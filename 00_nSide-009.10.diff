diff --git a/gpl-3.0.txt b/gpl-3.0.txt
new file mode 100644
index 0000000..b434587
--- /dev/null
+++ b/gpl-3.0.txt
@@ -0,0 +1,674 @@
+ï»¿                    GNU GENERAL PUBLIC LICENSE
+                       Version 3, 29 June 2007
+
+ Copyright (C) 2007 Free Software Foundation, Inc. <http://fsf.org/>
+ Everyone is permitted to copy and distribute verbatim copies
+ of this license document, but changing it is not allowed.
+
+                            Preamble
+
+  The GNU General Public License is a free, copyleft license for
+software and other kinds of works.
+
+  The licenses for most software and other practical works are designed
+to take away your freedom to share and change the works.  By contrast,
+the GNU General Public License is intended to guarantee your freedom to
+share and change all versions of a program--to make sure it remains free
+software for all its users.  We, the Free Software Foundation, use the
+GNU General Public License for most of our software; it applies also to
+any other work released this way by its authors.  You can apply it to
+your programs, too.
+
+  When we speak of free software, we are referring to freedom, not
+price.  Our General Public Licenses are designed to make sure that you
+have the freedom to distribute copies of free software (and charge for
+them if you wish), that you receive source code or can get it if you
+want it, that you can change the software or use pieces of it in new
+free programs, and that you know you can do these things.
+
+  To protect your rights, we need to prevent others from denying you
+these rights or asking you to surrender the rights.  Therefore, you have
+certain responsibilities if you distribute copies of the software, or if
+you modify it: responsibilities to respect the freedom of others.
+
+  For example, if you distribute copies of such a program, whether
+gratis or for a fee, you must pass on to the recipients the same
+freedoms that you received.  You must make sure that they, too, receive
+or can get the source code.  And you must show them these terms so they
+know their rights.
+
+  Developers that use the GNU GPL protect your rights with two steps:
+(1) assert copyright on the software, and (2) offer you this License
+giving you legal permission to copy, distribute and/or modify it.
+
+  For the developers' and authors' protection, the GPL clearly explains
+that there is no warranty for this free software.  For both users' and
+authors' sake, the GPL requires that modified versions be marked as
+changed, so that their problems will not be attributed erroneously to
+authors of previous versions.
+
+  Some devices are designed to deny users access to install or run
+modified versions of the software inside them, although the manufacturer
+can do so.  This is fundamentally incompatible with the aim of
+protecting users' freedom to change the software.  The systematic
+pattern of such abuse occurs in the area of products for individuals to
+use, which is precisely where it is most unacceptable.  Therefore, we
+have designed this version of the GPL to prohibit the practice for those
+products.  If such problems arise substantially in other domains, we
+stand ready to extend this provision to those domains in future versions
+of the GPL, as needed to protect the freedom of users.
+
+  Finally, every program is threatened constantly by software patents.
+States should not allow patents to restrict development and use of
+software on general-purpose computers, but in those that do, we wish to
+avoid the special danger that patents applied to a free program could
+make it effectively proprietary.  To prevent this, the GPL assures that
+patents cannot be used to render the program non-free.
+
+  The precise terms and conditions for copying, distribution and
+modification follow.
+
+                       TERMS AND CONDITIONS
+
+  0. Definitions.
+
+  "This License" refers to version 3 of the GNU General Public License.
+
+  "Copyright" also means copyright-like laws that apply to other kinds of
+works, such as semiconductor masks.
+
+  "The Program" refers to any copyrightable work licensed under this
+License.  Each licensee is addressed as "you".  "Licensees" and
+"recipients" may be individuals or organizations.
+
+  To "modify" a work means to copy from or adapt all or part of the work
+in a fashion requiring copyright permission, other than the making of an
+exact copy.  The resulting work is called a "modified version" of the
+earlier work or a work "based on" the earlier work.
+
+  A "covered work" means either the unmodified Program or a work based
+on the Program.
+
+  To "propagate" a work means to do anything with it that, without
+permission, would make you directly or secondarily liable for
+infringement under applicable copyright law, except executing it on a
+computer or modifying a private copy.  Propagation includes copying,
+distribution (with or without modification), making available to the
+public, and in some countries other activities as well.
+
+  To "convey" a work means any kind of propagation that enables other
+parties to make or receive copies.  Mere interaction with a user through
+a computer network, with no transfer of a copy, is not conveying.
+
+  An interactive user interface displays "Appropriate Legal Notices"
+to the extent that it includes a convenient and prominently visible
+feature that (1) displays an appropriate copyright notice, and (2)
+tells the user that there is no warranty for the work (except to the
+extent that warranties are provided), that licensees may convey the
+work under this License, and how to view a copy of this License.  If
+the interface presents a list of user commands or options, such as a
+menu, a prominent item in the list meets this criterion.
+
+  1. Source Code.
+
+  The "source code" for a work means the preferred form of the work
+for making modifications to it.  "Object code" means any non-source
+form of a work.
+
+  A "Standard Interface" means an interface that either is an official
+standard defined by a recognized standards body, or, in the case of
+interfaces specified for a particular programming language, one that
+is widely used among developers working in that language.
+
+  The "System Libraries" of an executable work include anything, other
+than the work as a whole, that (a) is included in the normal form of
+packaging a Major Component, but which is not part of that Major
+Component, and (b) serves only to enable use of the work with that
+Major Component, or to implement a Standard Interface for which an
+implementation is available to the public in source code form.  A
+"Major Component", in this context, means a major essential component
+(kernel, window system, and so on) of the specific operating system
+(if any) on which the executable work runs, or a compiler used to
+produce the work, or an object code interpreter used to run it.
+
+  The "Corresponding Source" for a work in object code form means all
+the source code needed to generate, install, and (for an executable
+work) run the object code and to modify the work, including scripts to
+control those activities.  However, it does not include the work's
+System Libraries, or general-purpose tools or generally available free
+programs which are used unmodified in performing those activities but
+which are not part of the work.  For example, Corresponding Source
+includes interface definition files associated with source files for
+the work, and the source code for shared libraries and dynamically
+linked subprograms that the work is specifically designed to require,
+such as by intimate data communication or control flow between those
+subprograms and other parts of the work.
+
+  The Corresponding Source need not include anything that users
+can regenerate automatically from other parts of the Corresponding
+Source.
+
+  The Corresponding Source for a work in source code form is that
+same work.
+
+  2. Basic Permissions.
+
+  All rights granted under this License are granted for the term of
+copyright on the Program, and are irrevocable provided the stated
+conditions are met.  This License explicitly affirms your unlimited
+permission to run the unmodified Program.  The output from running a
+covered work is covered by this License only if the output, given its
+content, constitutes a covered work.  This License acknowledges your
+rights of fair use or other equivalent, as provided by copyright law.
+
+  You may make, run and propagate covered works that you do not
+convey, without conditions so long as your license otherwise remains
+in force.  You may convey covered works to others for the sole purpose
+of having them make modifications exclusively for you, or provide you
+with facilities for running those works, provided that you comply with
+the terms of this License in conveying all material for which you do
+not control copyright.  Those thus making or running the covered works
+for you must do so exclusively on your behalf, under your direction
+and control, on terms that prohibit them from making any copies of
+your copyrighted material outside their relationship with you.
+
+  Conveying under any other circumstances is permitted solely under
+the conditions stated below.  Sublicensing is not allowed; section 10
+makes it unnecessary.
+
+  3. Protecting Users' Legal Rights From Anti-Circumvention Law.
+
+  No covered work shall be deemed part of an effective technological
+measure under any applicable law fulfilling obligations under article
+11 of the WIPO copyright treaty adopted on 20 December 1996, or
+similar laws prohibiting or restricting circumvention of such
+measures.
+
+  When you convey a covered work, you waive any legal power to forbid
+circumvention of technological measures to the extent such circumvention
+is effected by exercising rights under this License with respect to
+the covered work, and you disclaim any intention to limit operation or
+modification of the work as a means of enforcing, against the work's
+users, your or third parties' legal rights to forbid circumvention of
+technological measures.
+
+  4. Conveying Verbatim Copies.
+
+  You may convey verbatim copies of the Program's source code as you
+receive it, in any medium, provided that you conspicuously and
+appropriately publish on each copy an appropriate copyright notice;
+keep intact all notices stating that this License and any
+non-permissive terms added in accord with section 7 apply to the code;
+keep intact all notices of the absence of any warranty; and give all
+recipients a copy of this License along with the Program.
+
+  You may charge any price or no price for each copy that you convey,
+and you may offer support or warranty protection for a fee.
+
+  5. Conveying Modified Source Versions.
+
+  You may convey a work based on the Program, or the modifications to
+produce it from the Program, in the form of source code under the
+terms of section 4, provided that you also meet all of these conditions:
+
+    a) The work must carry prominent notices stating that you modified
+    it, and giving a relevant date.
+
+    b) The work must carry prominent notices stating that it is
+    released under this License and any conditions added under section
+    7.  This requirement modifies the requirement in section 4 to
+    "keep intact all notices".
+
+    c) You must license the entire work, as a whole, under this
+    License to anyone who comes into possession of a copy.  This
+    License will therefore apply, along with any applicable section 7
+    additional terms, to the whole of the work, and all its parts,
+    regardless of how they are packaged.  This License gives no
+    permission to license the work in any other way, but it does not
+    invalidate such permission if you have separately received it.
+
+    d) If the work has interactive user interfaces, each must display
+    Appropriate Legal Notices; however, if the Program has interactive
+    interfaces that do not display Appropriate Legal Notices, your
+    work need not make them do so.
+
+  A compilation of a covered work with other separate and independent
+works, which are not by their nature extensions of the covered work,
+and which are not combined with it such as to form a larger program,
+in or on a volume of a storage or distribution medium, is called an
+"aggregate" if the compilation and its resulting copyright are not
+used to limit the access or legal rights of the compilation's users
+beyond what the individual works permit.  Inclusion of a covered work
+in an aggregate does not cause this License to apply to the other
+parts of the aggregate.
+
+  6. Conveying Non-Source Forms.
+
+  You may convey a covered work in object code form under the terms
+of sections 4 and 5, provided that you also convey the
+machine-readable Corresponding Source under the terms of this License,
+in one of these ways:
+
+    a) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by the
+    Corresponding Source fixed on a durable physical medium
+    customarily used for software interchange.
+
+    b) Convey the object code in, or embodied in, a physical product
+    (including a physical distribution medium), accompanied by a
+    written offer, valid for at least three years and valid for as
+    long as you offer spare parts or customer support for that product
+    model, to give anyone who possesses the object code either (1) a
+    copy of the Corresponding Source for all the software in the
+    product that is covered by this License, on a durable physical
+    medium customarily used for software interchange, for a price no
+    more than your reasonable cost of physically performing this
+    conveying of source, or (2) access to copy the
+    Corresponding Source from a network server at no charge.
+
+    c) Convey individual copies of the object code with a copy of the
+    written offer to provide the Corresponding Source.  This
+    alternative is allowed only occasionally and noncommercially, and
+    only if you received the object code with such an offer, in accord
+    with subsection 6b.
+
+    d) Convey the object code by offering access from a designated
+    place (gratis or for a charge), and offer equivalent access to the
+    Corresponding Source in the same way through the same place at no
+    further charge.  You need not require recipients to copy the
+    Corresponding Source along with the object code.  If the place to
+    copy the object code is a network server, the Corresponding Source
+    may be on a different server (operated by you or a third party)
+    that supports equivalent copying facilities, provided you maintain
+    clear directions next to the object code saying where to find the
+    Corresponding Source.  Regardless of what server hosts the
+    Corresponding Source, you remain obligated to ensure that it is
+    available for as long as needed to satisfy these requirements.
+
+    e) Convey the object code using peer-to-peer transmission, provided
+    you inform other peers where the object code and Corresponding
+    Source of the work are being offered to the general public at no
+    charge under subsection 6d.
+
+  A separable portion of the object code, whose source code is excluded
+from the Corresponding Source as a System Library, need not be
+included in conveying the object code work.
+
+  A "User Product" is either (1) a "consumer product", which means any
+tangible personal property which is normally used for personal, family,
+or household purposes, or (2) anything designed or sold for incorporation
+into a dwelling.  In determining whether a product is a consumer product,
+doubtful cases shall be resolved in favor of coverage.  For a particular
+product received by a particular user, "normally used" refers to a
+typical or common use of that class of product, regardless of the status
+of the particular user or of the way in which the particular user
+actually uses, or expects or is expected to use, the product.  A product
+is a consumer product regardless of whether the product has substantial
+commercial, industrial or non-consumer uses, unless such uses represent
+the only significant mode of use of the product.
+
+  "Installation Information" for a User Product means any methods,
+procedures, authorization keys, or other information required to install
+and execute modified versions of a covered work in that User Product from
+a modified version of its Corresponding Source.  The information must
+suffice to ensure that the continued functioning of the modified object
+code is in no case prevented or interfered with solely because
+modification has been made.
+
+  If you convey an object code work under this section in, or with, or
+specifically for use in, a User Product, and the conveying occurs as
+part of a transaction in which the right of possession and use of the
+User Product is transferred to the recipient in perpetuity or for a
+fixed term (regardless of how the transaction is characterized), the
+Corresponding Source conveyed under this section must be accompanied
+by the Installation Information.  But this requirement does not apply
+if neither you nor any third party retains the ability to install
+modified object code on the User Product (for example, the work has
+been installed in ROM).
+
+  The requirement to provide Installation Information does not include a
+requirement to continue to provide support service, warranty, or updates
+for a work that has been modified or installed by the recipient, or for
+the User Product in which it has been modified or installed.  Access to a
+network may be denied when the modification itself materially and
+adversely affects the operation of the network or violates the rules and
+protocols for communication across the network.
+
+  Corresponding Source conveyed, and Installation Information provided,
+in accord with this section must be in a format that is publicly
+documented (and with an implementation available to the public in
+source code form), and must require no special password or key for
+unpacking, reading or copying.
+
+  7. Additional Terms.
+
+  "Additional permissions" are terms that supplement the terms of this
+License by making exceptions from one or more of its conditions.
+Additional permissions that are applicable to the entire Program shall
+be treated as though they were included in this License, to the extent
+that they are valid under applicable law.  If additional permissions
+apply only to part of the Program, that part may be used separately
+under those permissions, but the entire Program remains governed by
+this License without regard to the additional permissions.
+
+  When you convey a copy of a covered work, you may at your option
+remove any additional permissions from that copy, or from any part of
+it.  (Additional permissions may be written to require their own
+removal in certain cases when you modify the work.)  You may place
+additional permissions on material, added by you to a covered work,
+for which you have or can give appropriate copyright permission.
+
+  Notwithstanding any other provision of this License, for material you
+add to a covered work, you may (if authorized by the copyright holders of
+that material) supplement the terms of this License with terms:
+
+    a) Disclaiming warranty or limiting liability differently from the
+    terms of sections 15 and 16 of this License; or
+
+    b) Requiring preservation of specified reasonable legal notices or
+    author attributions in that material or in the Appropriate Legal
+    Notices displayed by works containing it; or
+
+    c) Prohibiting misrepresentation of the origin of that material, or
+    requiring that modified versions of such material be marked in
+    reasonable ways as different from the original version; or
+
+    d) Limiting the use for publicity purposes of names of licensors or
+    authors of the material; or
+
+    e) Declining to grant rights under trademark law for use of some
+    trade names, trademarks, or service marks; or
+
+    f) Requiring indemnification of licensors and authors of that
+    material by anyone who conveys the material (or modified versions of
+    it) with contractual assumptions of liability to the recipient, for
+    any liability that these contractual assumptions directly impose on
+    those licensors and authors.
+
+  All other non-permissive additional terms are considered "further
+restrictions" within the meaning of section 10.  If the Program as you
+received it, or any part of it, contains a notice stating that it is
+governed by this License along with a term that is a further
+restriction, you may remove that term.  If a license document contains
+a further restriction but permits relicensing or conveying under this
+License, you may add to a covered work material governed by the terms
+of that license document, provided that the further restriction does
+not survive such relicensing or conveying.
+
+  If you add terms to a covered work in accord with this section, you
+must place, in the relevant source files, a statement of the
+additional terms that apply to those files, or a notice indicating
+where to find the applicable terms.
+
+  Additional terms, permissive or non-permissive, may be stated in the
+form of a separately written license, or stated as exceptions;
+the above requirements apply either way.
+
+  8. Termination.
+
+  You may not propagate or modify a covered work except as expressly
+provided under this License.  Any attempt otherwise to propagate or
+modify it is void, and will automatically terminate your rights under
+this License (including any patent licenses granted under the third
+paragraph of section 11).
+
+  However, if you cease all violation of this License, then your
+license from a particular copyright holder is reinstated (a)
+provisionally, unless and until the copyright holder explicitly and
+finally terminates your license, and (b) permanently, if the copyright
+holder fails to notify you of the violation by some reasonable means
+prior to 60 days after the cessation.
+
+  Moreover, your license from a particular copyright holder is
+reinstated permanently if the copyright holder notifies you of the
+violation by some reasonable means, this is the first time you have
+received notice of violation of this License (for any work) from that
+copyright holder, and you cure the violation prior to 30 days after
+your receipt of the notice.
+
+  Termination of your rights under this section does not terminate the
+licenses of parties who have received copies or rights from you under
+this License.  If your rights have been terminated and not permanently
+reinstated, you do not qualify to receive new licenses for the same
+material under section 10.
+
+  9. Acceptance Not Required for Having Copies.
+
+  You are not required to accept this License in order to receive or
+run a copy of the Program.  Ancillary propagation of a covered work
+occurring solely as a consequence of using peer-to-peer transmission
+to receive a copy likewise does not require acceptance.  However,
+nothing other than this License grants you permission to propagate or
+modify any covered work.  These actions infringe copyright if you do
+not accept this License.  Therefore, by modifying or propagating a
+covered work, you indicate your acceptance of this License to do so.
+
+  10. Automatic Licensing of Downstream Recipients.
+
+  Each time you convey a covered work, the recipient automatically
+receives a license from the original licensors, to run, modify and
+propagate that work, subject to this License.  You are not responsible
+for enforcing compliance by third parties with this License.
+
+  An "entity transaction" is a transaction transferring control of an
+organization, or substantially all assets of one, or subdividing an
+organization, or merging organizations.  If propagation of a covered
+work results from an entity transaction, each party to that
+transaction who receives a copy of the work also receives whatever
+licenses to the work the party's predecessor in interest had or could
+give under the previous paragraph, plus a right to possession of the
+Corresponding Source of the work from the predecessor in interest, if
+the predecessor has it or can get it with reasonable efforts.
+
+  You may not impose any further restrictions on the exercise of the
+rights granted or affirmed under this License.  For example, you may
+not impose a license fee, royalty, or other charge for exercise of
+rights granted under this License, and you may not initiate litigation
+(including a cross-claim or counterclaim in a lawsuit) alleging that
+any patent claim is infringed by making, using, selling, offering for
+sale, or importing the Program or any portion of it.
+
+  11. Patents.
+
+  A "contributor" is a copyright holder who authorizes use under this
+License of the Program or a work on which the Program is based.  The
+work thus licensed is called the contributor's "contributor version".
+
+  A contributor's "essential patent claims" are all patent claims
+owned or controlled by the contributor, whether already acquired or
+hereafter acquired, that would be infringed by some manner, permitted
+by this License, of making, using, or selling its contributor version,
+but do not include claims that would be infringed only as a
+consequence of further modification of the contributor version.  For
+purposes of this definition, "control" includes the right to grant
+patent sublicenses in a manner consistent with the requirements of
+this License.
+
+  Each contributor grants you a non-exclusive, worldwide, royalty-free
+patent license under the contributor's essential patent claims, to
+make, use, sell, offer for sale, import and otherwise run, modify and
+propagate the contents of its contributor version.
+
+  In the following three paragraphs, a "patent license" is any express
+agreement or commitment, however denominated, not to enforce a patent
+(such as an express permission to practice a patent or covenant not to
+sue for patent infringement).  To "grant" such a patent license to a
+party means to make such an agreement or commitment not to enforce a
+patent against the party.
+
+  If you convey a covered work, knowingly relying on a patent license,
+and the Corresponding Source of the work is not available for anyone
+to copy, free of charge and under the terms of this License, through a
+publicly available network server or other readily accessible means,
+then you must either (1) cause the Corresponding Source to be so
+available, or (2) arrange to deprive yourself of the benefit of the
+patent license for this particular work, or (3) arrange, in a manner
+consistent with the requirements of this License, to extend the patent
+license to downstream recipients.  "Knowingly relying" means you have
+actual knowledge that, but for the patent license, your conveying the
+covered work in a country, or your recipient's use of the covered work
+in a country, would infringe one or more identifiable patents in that
+country that you have reason to believe are valid.
+
+  If, pursuant to or in connection with a single transaction or
+arrangement, you convey, or propagate by procuring conveyance of, a
+covered work, and grant a patent license to some of the parties
+receiving the covered work authorizing them to use, propagate, modify
+or convey a specific copy of the covered work, then the patent license
+you grant is automatically extended to all recipients of the covered
+work and works based on it.
+
+  A patent license is "discriminatory" if it does not include within
+the scope of its coverage, prohibits the exercise of, or is
+conditioned on the non-exercise of one or more of the rights that are
+specifically granted under this License.  You may not convey a covered
+work if you are a party to an arrangement with a third party that is
+in the business of distributing software, under which you make payment
+to the third party based on the extent of your activity of conveying
+the work, and under which the third party grants, to any of the
+parties who would receive the covered work from you, a discriminatory
+patent license (a) in connection with copies of the covered work
+conveyed by you (or copies made from those copies), or (b) primarily
+for and in connection with specific products or compilations that
+contain the covered work, unless you entered into that arrangement,
+or that patent license was granted, prior to 28 March 2007.
+
+  Nothing in this License shall be construed as excluding or limiting
+any implied license or other defenses to infringement that may
+otherwise be available to you under applicable patent law.
+
+  12. No Surrender of Others' Freedom.
+
+  If conditions are imposed on you (whether by court order, agreement or
+otherwise) that contradict the conditions of this License, they do not
+excuse you from the conditions of this License.  If you cannot convey a
+covered work so as to satisfy simultaneously your obligations under this
+License and any other pertinent obligations, then as a consequence you may
+not convey it at all.  For example, if you agree to terms that obligate you
+to collect a royalty for further conveying from those to whom you convey
+the Program, the only way you could satisfy both those terms and this
+License would be to refrain entirely from conveying the Program.
+
+  13. Use with the GNU Affero General Public License.
+
+  Notwithstanding any other provision of this License, you have
+permission to link or combine any covered work with a work licensed
+under version 3 of the GNU Affero General Public License into a single
+combined work, and to convey the resulting work.  The terms of this
+License will continue to apply to the part which is the covered work,
+but the special requirements of the GNU Affero General Public License,
+section 13, concerning interaction through a network will apply to the
+combination as such.
+
+  14. Revised Versions of this License.
+
+  The Free Software Foundation may publish revised and/or new versions of
+the GNU General Public License from time to time.  Such new versions will
+be similar in spirit to the present version, but may differ in detail to
+address new problems or concerns.
+
+  Each version is given a distinguishing version number.  If the
+Program specifies that a certain numbered version of the GNU General
+Public License "or any later version" applies to it, you have the
+option of following the terms and conditions either of that numbered
+version or of any later version published by the Free Software
+Foundation.  If the Program does not specify a version number of the
+GNU General Public License, you may choose any version ever published
+by the Free Software Foundation.
+
+  If the Program specifies that a proxy can decide which future
+versions of the GNU General Public License can be used, that proxy's
+public statement of acceptance of a version permanently authorizes you
+to choose that version for the Program.
+
+  Later license versions may give you additional or different
+permissions.  However, no additional obligations are imposed on any
+author or copyright holder as a result of your choosing to follow a
+later version.
+
+  15. Disclaimer of Warranty.
+
+  THERE IS NO WARRANTY FOR THE PROGRAM, TO THE EXTENT PERMITTED BY
+APPLICABLE LAW.  EXCEPT WHEN OTHERWISE STATED IN WRITING THE COPYRIGHT
+HOLDERS AND/OR OTHER PARTIES PROVIDE THE PROGRAM "AS IS" WITHOUT WARRANTY
+OF ANY KIND, EITHER EXPRESSED OR IMPLIED, INCLUDING, BUT NOT LIMITED TO,
+THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
+PURPOSE.  THE ENTIRE RISK AS TO THE QUALITY AND PERFORMANCE OF THE PROGRAM
+IS WITH YOU.  SHOULD THE PROGRAM PROVE DEFECTIVE, YOU ASSUME THE COST OF
+ALL NECESSARY SERVICING, REPAIR OR CORRECTION.
+
+  16. Limitation of Liability.
+
+  IN NO EVENT UNLESS REQUIRED BY APPLICABLE LAW OR AGREED TO IN WRITING
+WILL ANY COPYRIGHT HOLDER, OR ANY OTHER PARTY WHO MODIFIES AND/OR CONVEYS
+THE PROGRAM AS PERMITTED ABOVE, BE LIABLE TO YOU FOR DAMAGES, INCLUDING ANY
+GENERAL, SPECIAL, INCIDENTAL OR CONSEQUENTIAL DAMAGES ARISING OUT OF THE
+USE OR INABILITY TO USE THE PROGRAM (INCLUDING BUT NOT LIMITED TO LOSS OF
+DATA OR DATA BEING RENDERED INACCURATE OR LOSSES SUSTAINED BY YOU OR THIRD
+PARTIES OR A FAILURE OF THE PROGRAM TO OPERATE WITH ANY OTHER PROGRAMS),
+EVEN IF SUCH HOLDER OR OTHER PARTY HAS BEEN ADVISED OF THE POSSIBILITY OF
+SUCH DAMAGES.
+
+  17. Interpretation of Sections 15 and 16.
+
+  If the disclaimer of warranty and limitation of liability provided
+above cannot be given local legal effect according to their terms,
+reviewing courts shall apply local law that most closely approximates
+an absolute waiver of all civil liability in connection with the
+Program, unless a warranty or assumption of liability accompanies a
+copy of the Program in return for a fee.
+
+                     END OF TERMS AND CONDITIONS
+
+            How to Apply These Terms to Your New Programs
+
+  If you develop a new program, and you want it to be of the greatest
+possible use to the public, the best way to achieve this is to make it
+free software which everyone can redistribute and change under these terms.
+
+  To do so, attach the following notices to the program.  It is safest
+to attach them to the start of each source file to most effectively
+state the exclusion of warranty; and each file should have at least
+the "copyright" line and a pointer to where the full notice is found.
+
+    <one line to give the program's name and a brief idea of what it does.>
+    Copyright (C) <year>  <name of author>
+
+    This program is free software: you can redistribute it and/or modify
+    it under the terms of the GNU General Public License as published by
+    the Free Software Foundation, either version 3 of the License, or
+    (at your option) any later version.
+
+    This program is distributed in the hope that it will be useful,
+    but WITHOUT ANY WARRANTY; without even the implied warranty of
+    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+    GNU General Public License for more details.
+
+    You should have received a copy of the GNU General Public License
+    along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+Also add information on how to contact you by electronic and paper mail.
+
+  If the program does terminal interaction, make it output a short
+notice like this when it starts in an interactive mode:
+
+    <program>  Copyright (C) <year>  <name of author>
+    This program comes with ABSOLUTELY NO WARRANTY; for details type `show w'.
+    This is free software, and you are welcome to redistribute it
+    under certain conditions; type `show c' for details.
+
+The hypothetical commands `show w' and `show c' should show the appropriate
+parts of the General Public License.  Of course, your program's commands
+might be different; for a GUI interface, you would use an "about box".
+
+  You should also get your employer (if you work as a programmer) or school,
+if any, to sign a "copyright disclaimer" for the program, if necessary.
+For more information on this, and how to apply and follow the GNU GPL, see
+<http://www.gnu.org/licenses/>.
+
+  The GNU General Public License does not permit incorporating your program
+into proprietary programs.  If your program is a subroutine library, you
+may consider it more useful to permit linking proprietary applications with
+the library.  If this is what you want to do, use the GNU Lesser General
+Public License instead of this License.  But first, please read
+<http://www.gnu.org/philosophy/why-not-lgpl.html>.
diff --git a/higan/GNUmakefile b/higan/GNUmakefile
index acac7eb..20effe8 100644
--- a/higan/GNUmakefile
+++ b/higan/GNUmakefile
@@ -1,6 +1,8 @@
 include ../nall/GNUmakefile
 
-target := tomoko
+ifndef target
+  target := tomoko
+endif
 # console := true
 
 flags += -I. -I.. -O3
diff --git a/higan/a2600/GNUmakefile b/higan/a2600/GNUmakefile
new file mode 100644
index 0000000..52a8da3
--- /dev/null
+++ b/higan/a2600/GNUmakefile
@@ -0,0 +1,14 @@
+processors += mos6502
+
+objects += a2600-interface
+objects += a2600-cpu a2600-pia a2600-tia
+objects += a2600-system a2600-cartridge
+objects += a2600-controller
+
+obj/a2600-interface.o:    a2600/interface/interface.cpp $(call rwildcard,a2600/interface/)
+obj/a2600-cpu.o:          a2600/cpu/cpu.cpp $(call rwildcard,a2600/cpu/)
+obj/a2600-pia.o:          a2600/pia/pia.cpp $(call rwildcard,a2600/pia/)
+obj/a2600-tia.o:          a2600/tia/tia.cpp $(call rwildcard,a2600/tia/)
+obj/a2600-system.o:       a2600/system/system.cpp $(call rwildcard,a2600/system/)
+obj/a2600-cartridge.o:    a2600/cartridge/cartridge.cpp $(call rwildcard,a2600/cartridge/)
+obj/a2600-controller.o:   a2600/controller/controller.cpp $(call rwildcard,a2600/controller/)
diff --git a/higan/a2600/a2600.hpp b/higan/a2600/a2600.hpp
new file mode 100644
index 0000000..c50bef9
--- /dev/null
+++ b/higan/a2600/a2600.hpp
@@ -0,0 +1,44 @@
+#pragma once
+
+//Atari 2600 emulator by hex_usr, with contributions from:
+// byuu        (MOS6502 processor)
+// Alyosha_TAS (PIA TIA, timing details)
+//license: GPLv3
+//original project started: 2016-07-31
+
+#include <emulator/emulator.hpp>
+#include <emulator/thread.hpp>
+#include <emulator/scheduler.hpp>
+#include <emulator/cheat.hpp>
+
+#include <processor/mos6502/mos6502.hpp>
+
+namespace Atari2600 {
+  using File = Emulator::File;
+  using Scheduler = Emulator::Scheduler;
+  using Cheat = Emulator::Cheat;
+  extern Scheduler scheduler;
+  extern Cheat cheat;
+
+  struct Thread : Emulator::Thread {
+    auto create(auto (*entrypoint)() -> void, double frequency) -> void {
+      Emulator::Thread::create(entrypoint, frequency);
+      scheduler.append(*this);
+    }
+
+    inline auto synchronize(Thread& thread) -> void {
+      if(clock() >= thread.clock()) scheduler.resume(thread);
+    }
+  };
+
+  #include <a2600/controller/controller.hpp>
+
+  #include <a2600/cpu/cpu.hpp>
+  #include <a2600/pia/pia.hpp>
+  #include <a2600/tia/tia.hpp>
+
+  #include <a2600/system/system.hpp>
+  #include <a2600/cartridge/cartridge.hpp>
+}
+
+#include <a2600/interface/interface.hpp>
diff --git a/higan/a2600/cartridge/cartridge.cpp b/higan/a2600/cartridge/cartridge.cpp
new file mode 100644
index 0000000..527fd4f
--- /dev/null
+++ b/higan/a2600/cartridge/cartridge.cpp
@@ -0,0 +1,88 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+#include "serialization.cpp"
+Cartridge cartridge;
+
+auto Cartridge::load() -> bool {
+  information = Information();
+
+  if(auto pathID = interface->load(ID::Atari2600, "Atari 2600", "a26")) {
+    information.pathID = pathID();
+  } else return false;
+
+  if(auto fp = interface->open(pathID(), "manifest.bml", File::Read, File::Required)) {
+    information.manifest = fp->reads();
+  } else return false;
+
+  auto document = BML::unserialize(information.manifest);
+  information.title = document["information/title"].text();
+  if(document["board/region"].text() == "ntsc")  information.region = Region::NTSC;
+  if(document["board/region"].text() == "pal")   information.region = Region::PAL;
+  if(document["board/region"].text() == "secam") information.region = Region::SECAM;
+
+  if(auto node = document["board/rom"]) {
+    rom.size = node["size"].natural();
+    rom.mask = bit::round(rom.size) - 1;
+    if(rom.size) {
+      rom.data = new uint8[rom.mask];
+      if(auto name = node["name"].text()) {
+        if(auto fp = interface->open(pathID(), name, File::Read, File::Required)) {
+          fp->read(rom.data, rom.size);
+        }
+      }
+    }
+  }
+
+  if(auto node = document["board/ram"]) {
+    ram.size = node["size"].natural();
+    ram.mask = bit::round(ram.size) - 1;
+    if(ram.size) {
+      ram.data = new uint8[ram.mask];
+      if(auto name = node["name"].text()) {
+        if(auto fp = interface->open(pathID(), name, File::Read)) {
+          fp->read(ram.data, ram.size);
+        }
+      }
+    }
+  }
+
+  return true;
+}
+
+auto Cartridge::save() -> void {
+  auto document = BML::unserialize(information.manifest);
+
+  if(auto name = document["board/ram/name"].text()) {
+    if(auto fp = interface->open(pathID(), name, File::Write)) {
+      fp->write(ram.data, ram.size);
+    }
+  }
+}
+
+auto Cartridge::unload() -> void {
+  delete[] rom.data;
+  delete[] ram.data;
+  rom = Memory();
+  ram = Memory();
+}
+
+auto Cartridge::power() -> void {
+}
+
+auto Cartridge::reset() -> void {
+}
+
+auto Cartridge::access(uint13 addr, uint8 data) -> uint8 {
+  if(!addr.bit(12)) return data;
+
+  if(ram.size) {
+         if((addr & rom.mask) < ram.size << 0) return ram.data[addr & ram.mask] = data;
+    else if((addr & rom.mask) < ram.size << 1) return ram.data[addr & ram.mask];
+  }
+
+  return rom.data[addr & rom.mask];
+}
+
+}
diff --git a/higan/a2600/cartridge/cartridge.hpp b/higan/a2600/cartridge/cartridge.hpp
new file mode 100644
index 0000000..2e3ffd6
--- /dev/null
+++ b/higan/a2600/cartridge/cartridge.hpp
@@ -0,0 +1,38 @@
+struct Cartridge {
+  enum class Region : uint { NTSC, PAL, SECAM };
+
+  auto pathID() const -> uint { return information.pathID; }
+  auto sha256() const -> string { return information.sha256; }
+  auto region() const -> Region { return information.region; }
+  auto manifest() const -> string { return information.manifest; }
+  auto title() const -> string { return information.title; }
+
+  auto load() -> bool;
+  auto save() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto access(uint13 addr, uint8 data) -> uint8;
+
+  auto serialize(serializer&) -> void;
+
+  struct Information {
+    uint pathID = 0;
+    string sha256;
+    Region region = Region::NTSC;
+    string manifest;
+    string title;
+  } information;
+
+  struct Memory {
+    uint8* data = nullptr;
+    uint size = 0;
+    uint mask = 0;
+  };
+
+  Memory rom;
+  Memory ram;
+};
+
+extern Cartridge cartridge;
diff --git a/higan/a2600/cartridge/serialization.cpp b/higan/a2600/cartridge/serialization.cpp
new file mode 100644
index 0000000..f87cdc7
--- /dev/null
+++ b/higan/a2600/cartridge/serialization.cpp
@@ -0,0 +1,3 @@
+auto Cartridge::serialize(serializer& s) -> void {
+  s.array(ram.data, ram.size);
+}
diff --git a/higan/a2600/controller/controller.cpp b/higan/a2600/controller/controller.cpp
new file mode 100644
index 0000000..4277809
--- /dev/null
+++ b/higan/a2600/controller/controller.cpp
@@ -0,0 +1,27 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+#include "joystick/joystick.cpp"
+
+Controller::Controller(uint port) : port(port) {
+  if(!handle()) create(Controller::Enter, 1);
+}
+
+Controller::~Controller() {
+}
+
+auto Controller::Enter() -> void {
+  while(true) {
+    scheduler.synchronize();
+    if(peripherals.controllerPort1->active()) peripherals.controllerPort1->main();
+    if(peripherals.controllerPort2->active()) peripherals.controllerPort2->main();
+  }
+}
+
+auto Controller::main() -> void {
+  step(1);
+  synchronize(pia);
+}
+
+}
diff --git a/higan/a2600/controller/controller.hpp b/higan/a2600/controller/controller.hpp
new file mode 100644
index 0000000..e50b1bb
--- /dev/null
+++ b/higan/a2600/controller/controller.hpp
@@ -0,0 +1,34 @@
+//Atari 2600 controller port pinout:
+//  ___________________
+// /(1) (2) (3) (4) (5)\
+//  \ (6) (7) (8) (9) /
+//   \---------------/
+//
+// pin  name     port1      port2
+//  1:  up       $0280.d4   $0280.d0
+//  2:  down     $0280.d5   $0280.d1
+//  3:  left     $0280.d6   $0280.d2
+//  4:  right    $0280.d7   $0280.d3
+//  5:  inpt0/2  $0038.d7   $003a.d7
+//  6:  inpt4/5  $003c.d7   $003d.d7
+//  7:  +5v
+//  8:  gnd
+//  9:  inpt1/3  $0039.d7   $003b.d7
+
+struct Controller : Thread {
+  enum : uint { Port1 = 0, Port2 = 1 };
+
+  Controller(uint port);
+  virtual ~Controller();
+  static auto Enter() -> void;
+
+  virtual auto main() -> void;
+  virtual auto pot0() -> bool { return 1; }
+  virtual auto pot1() -> bool { return 1; }
+  virtual auto fire() -> bool { return 1; }
+  virtual auto direction() -> uint4 { return 0xf; }
+
+  const uint port;
+};
+
+#include "joystick/joystick.hpp"
diff --git a/higan/a2600/controller/joystick/joystick.cpp b/higan/a2600/controller/joystick/joystick.cpp
new file mode 100644
index 0000000..4a58b21
--- /dev/null
+++ b/higan/a2600/controller/joystick/joystick.cpp
@@ -0,0 +1,22 @@
+Joystick::Joystick(uint port) : Controller(port) {
+}
+
+auto Joystick::pot0() -> bool {
+  return 1;
+}
+
+auto Joystick::pot1() -> bool {
+  return 1;
+}
+
+auto Joystick::fire() -> bool {
+  return !interface->inputPoll(port, ID::Device::Joystick, Fire);
+}
+
+auto Joystick::direction() -> uint4 {
+  bool up    = interface->inputPoll(port, ID::Device::Joystick, Up);
+  bool down  = interface->inputPoll(port, ID::Device::Joystick, Down);
+  bool left  = interface->inputPoll(port, ID::Device::Joystick, Left);
+  bool right = interface->inputPoll(port, ID::Device::Joystick, Right);
+  return !(up && !down) << 0 | !(down && !up) << 1 | !(left && !right) << 2 | !(right && !left) << 3;
+}
diff --git a/higan/a2600/controller/joystick/joystick.hpp b/higan/a2600/controller/joystick/joystick.hpp
new file mode 100644
index 0000000..bf69a64
--- /dev/null
+++ b/higan/a2600/controller/joystick/joystick.hpp
@@ -0,0 +1,12 @@
+struct Joystick : Controller {
+  enum : uint {
+    Up, Down, Left, Right, Fire,
+  };
+
+  Joystick(uint port);
+
+  auto pot0() -> bool;
+  auto pot1() -> bool;
+  auto fire() -> bool;
+  auto direction() -> uint4;
+};
diff --git a/higan/a2600/cpu/cpu.cpp b/higan/a2600/cpu/cpu.cpp
new file mode 100644
index 0000000..506b020
--- /dev/null
+++ b/higan/a2600/cpu/cpu.cpp
@@ -0,0 +1,41 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+CPU cpu;
+#include "memory.cpp"
+#include "timing.cpp"
+#include "serialization.cpp"
+
+CPU::CPU() : Processor::MOS6502(true) {
+}
+
+auto CPU::Enter() -> void {
+  while(true) scheduler.synchronize(), cpu.main();
+}
+
+auto CPU::main() -> void {
+  instruction();
+}
+
+auto CPU::load(Markup::Node node) -> bool {
+  return true;
+}
+
+auto CPU::power() -> void {
+  MOS6502::power();
+  //CPU's clock rate is the same in all regions
+  create(Enter, Emulator::Constants::Colorburst::NTSC);
+}
+
+auto CPU::reset() -> void {
+  MOS6502::reset();
+
+  //CPU
+  r.pc  = cartridge.access(0xfffc, r.mdr) << 0;
+  r.pc |= cartridge.access(0xfffd, r.mdr) << 8;
+
+  io.rdyLine = 1;
+}
+
+}
diff --git a/higan/a2600/cpu/cpu.hpp b/higan/a2600/cpu/cpu.hpp
new file mode 100644
index 0000000..c663b03
--- /dev/null
+++ b/higan/a2600/cpu/cpu.hpp
@@ -0,0 +1,33 @@
+//MOS 6507
+
+struct CPU : Processor::MOS6502, Thread {
+  CPU();
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //memory.cpp
+  auto read(uint16 addr) -> uint8 override;
+  auto write(uint16 addr, uint8 data) -> void override;
+
+  //timing.cpp
+  auto step(uint clocks) -> void;
+  auto lastCycle() -> void;
+
+  auto rdyLine(bool) -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  auto nmi(uint16&) -> void {}
+
+privileged:
+  struct IO {
+    bool rdyLine;
+  } io;
+};
+
+extern CPU cpu;
diff --git a/higan/a2600/cpu/memory.cpp b/higan/a2600/cpu/memory.cpp
new file mode 100644
index 0000000..e6aa4ac
--- /dev/null
+++ b/higan/a2600/cpu/memory.cpp
@@ -0,0 +1,23 @@
+auto CPU::read(uint16 addr) -> uint8 {
+  addr &= 0x1fff;
+
+  do {
+    step(3);
+    if((addr & 0x1080) == 0x0000) r.mdr = tia.readIO(addr, r.mdr);
+    if((addr & 0x1280) == 0x0080) r.mdr = pia.readRAM(addr, r.mdr);
+    if((addr & 0x1280) == 0x0280) r.mdr = pia.readIO(addr, r.mdr);
+    if((addr & 0x1000) == 0x1000) r.mdr = cartridge.access(addr, r.mdr);
+  } while(io.rdyLine == 0);
+
+  return r.mdr;
+}
+
+auto CPU::write(uint16 addr, uint8 data) -> void {
+  addr &= 0x1fff;
+  r.mdr = data;
+  step(3);
+  if((addr & 0x1080) == 0x0000) tia.writeIO(addr, data);
+  if((addr & 0x1280) == 0x0080) pia.writeRAM(addr, data);
+  if((addr & 0x1280) == 0x0280) pia.writeIO(addr, data);
+  if((addr & 0x1000) == 0x1000) cartridge.access(addr, data);
+}
diff --git a/higan/a2600/cpu/serialization.cpp b/higan/a2600/cpu/serialization.cpp
new file mode 100644
index 0000000..0e41ced
--- /dev/null
+++ b/higan/a2600/cpu/serialization.cpp
@@ -0,0 +1,6 @@
+auto CPU::serialize(serializer& s) -> void {
+  MOS6502::serialize(s);
+  Thread::serialize(s);
+
+  s.integer(io.rdyLine);
+}
diff --git a/higan/a2600/cpu/timing.cpp b/higan/a2600/cpu/timing.cpp
new file mode 100644
index 0000000..4b389f2
--- /dev/null
+++ b/higan/a2600/cpu/timing.cpp
@@ -0,0 +1,12 @@
+auto CPU::step(uint clocks) -> void {
+  Thread::step(clocks);
+  synchronize(pia);
+  synchronize(tia);
+}
+
+auto CPU::lastCycle() -> void {
+}
+
+auto CPU::rdyLine(bool line) -> void {
+  io.rdyLine = line;
+}
diff --git a/higan/a2600/interface/interface.cpp b/higan/a2600/interface/interface.cpp
new file mode 100644
index 0000000..cc871b2
--- /dev/null
+++ b/higan/a2600/interface/interface.cpp
@@ -0,0 +1,297 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+Interface* interface = nullptr;
+Settings settings;
+
+Interface::Interface() {
+  interface = this;
+  system.init();
+
+  information.preAlpha     = true;
+  information.manufacturer = "Atari";
+  information.name         = "Atari 2600";
+  information.overscan     = true;
+  information.resettable   = false;
+
+  information.capability.states = true;
+  information.capability.cheats = false;
+
+  media.append({ID::Atari2600, "Atari 2600", "a26"});
+
+  Port hardwarePort{ID::Port::Hardware, "Hardware", Hardwired};
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+
+  { Device device{ID::Device::Controls, "Controls"};
+    device.inputs.append({0, "Select"          });
+    device.inputs.append({0, "Reset"           });
+    device.inputs.append({0, "Color"           });
+    device.inputs.append({0, "Left Difficulty" });
+    device.inputs.append({0, "Right Difficulty"});
+    hardwarePort.devices.append(device);
+  }
+
+  { Device device{ID::Device::None, "None"};
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Joystick, "Joystick"};
+    device.inputs.append({0, "Up"   });
+    device.inputs.append({0, "Down" });
+    device.inputs.append({0, "Left" });
+    device.inputs.append({0, "Right"});
+    device.inputs.append({0, "Fire" });
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  ports.append(move(hardwarePort));
+  ports.append(move(controllerPort1));
+  ports.append(move(controllerPort2));
+}
+
+auto Interface::manifest() -> string {
+  return cartridge.manifest();
+}
+
+auto Interface::title() -> string {
+  return cartridge.title();
+}
+
+auto Interface::videoSize() -> VideoSize {
+  return {160, 228};
+}
+
+auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
+  double w = 160;
+  if(arc) {
+    double squarePixelRate = system.region() == System::Region::NTSC
+    ? 135.0 / 22.0 * 1'000'000.0
+    : 7'375'000.0;
+    w *= squarePixelRate / system.colorburst();
+  }
+  uint h = 228;
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
+}
+
+auto Interface::videoFrequency() -> double {
+  switch(system.region()) { default:
+  case System::Region::NTSC:  return system.colorburst() / (262.0 * 228.0);
+  case System::Region::PAL:   return system.colorburst() / (312.0 * 228.0);
+  case System::Region::SECAM: return system.colorburst() / (312.0 * 228.0);
+  }
+}
+
+auto Interface::videoColors() -> uint32 {
+  return 1 << 7;
+}
+
+auto Interface::videoColor(uint32 n) -> uint64 {
+  static auto generateNTSCColor = [](uint7 n, double hue, double gamma) -> uint64 {
+    uint4 color = n.bits(3,6);
+    uint3 level = n.bits(0,2);
+
+    double y;
+    double i;
+    double q;
+
+    //TODO: Determine if there is any special circuitry for when both the
+    //luminosity and hue are 0 (black).
+    if(color == 0 && level == 0) y = 0.0;
+    else y = 0.125 + level / 7.0 * 0.875;
+
+    if(color == 0) {
+      i = 0.0;
+      q = 0.0;
+    } else {
+      //hue 15 == hue 1:                   (360.0 / 14.0)Â°
+      //hue 15 == (hue 1 + hue 2) / 2:     (360.0 / (14.0 - 1.0 / 2.0))Â°
+      //hue 15 == (hue 1 + hue 2 * 2) / 3: (360.0 / (14.0 - 2.0 / 3.0))Â°
+      static const double delay = (360.0 / (14.0 - 2.0 / 3.0)) * Math::Pi / 180.0;
+      //phase shift delay only applies to colors 2-15
+      double phase = Math::Pi + hue - (color - 1) * delay;
+      i = std::sin(phase - 33.0 * Math::Pi / 180.0) * 0.25;
+      q = std::cos(phase - 33.0 * Math::Pi / 180.0) * 0.25;
+    }
+
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    //This matrix is from FCC's 1953 NTSC standard.
+    //The Atari 2600 is older than the SMPTE C standard that followed in 1987.
+    uint64 r = uclamp<16>(65535.0 * gammaAdjust(y +  0.946882 * i +  0.623557 * q));
+    uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.274788 * i + -0.635691 * q));
+    uint64 b = uclamp<16>(65535.0 * gammaAdjust(y + -1.108545 * i +  1.709007 * q));
+
+    return r << 32 | g << 16 | b << 0;
+  };
+
+  static auto generatePALColor = [](uint7 n, double gamma) -> uint64 {
+    uint4 color = n.bits(3,6);
+    uint3 level = n.bits(0,2);
+
+    double y;
+    double u;
+    double v;
+
+    //TODO: Determine the real formula for generating colors. The below formula
+    //is a quick hack-up to match colors with publicly-available palettes.
+    if((color.bits(1,3) == 0 || color.bits(1,3) == 7) && level == 0) y = 0.0;
+    else y = 0.125 + level / 7.0 * 0.875;
+
+    if(color.bits(1,3) == 0 || color.bits(1,3) == 7) {
+      u = 0.0;
+      v = 0.0;
+    } else if(color.bit(0) == 0) {
+      double phase = (180.0 - (color >> 1) * 30.0) * Math::Pi / 180.0;
+      u = std::cos(phase) * 0.25;
+      v = std::sin(phase) * 0.25;
+    } else if(color.bit(0) == 1) {
+      double phase = (165.0 + (color >> 1) * 30.0) * Math::Pi / 180.0;
+      u = std::cos(phase) * 0.25;
+      v = std::sin(phase) * 0.25;
+    }
+
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    uint64 r = uclamp<16>(65535.0 * gammaAdjust(y                 +  1.139837 * v));
+    uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.394652 * u + -0.580599 * v));
+    uint64 b = uclamp<16>(65535.0 * gammaAdjust(y +  2.032110 * u                ));
+
+    return r << 32 | g << 16 | b << 0;
+  };
+
+  static auto generateSECAMColor = [](uint7 n, double gamma) -> uint64 {
+    uint3 level = n.bits(0,2);
+
+    //static const uint32 colors[] = {
+    //  0xff000000, 0xff2121ff, 0xfff03c79, 0xffff50ff,
+    //  0xff7fff50, 0xff7fffff, 0xffffff3f, 0xffffffff,
+    //};
+    static const double Y[] = {
+       0.0000000000000000000,  0.2286588235294117800,
+       0.4736235294117646700,  0.5971568627450980000,
+       0.7716784313725490000,  0.8499137254901961000,
+       0.9141647058823529000,  1.0000000000000000000,
+    };
+    static const double Db[] = {
+       0.0000000000000000000,  1.1604941176470587000,
+       0.0012274509803921196,  0.6059803921568627000,
+      -0.6889215686274510000,  0.2258823529411764200,
+      -1.0036705882352940000,  0.0000000000000000000,
+    };
+    static const double Dr[] = {
+       0.0000000000000000000,  0.1889176470588235500,
+      -0.8890313725490195000, -0.7658823529411765000,
+       0.5201921568627452000,  0.6691137254901962000,
+      -0.1633882352941175000,  0.0000000000000000000,
+    };
+
+    double y  = Y[level];
+    double db = Db[level];
+    double dr = Dr[level];
+
+    //uint64 r = image::normalize(colors[level].byte(2), 8, 16);
+    //uint64 g = image::normalize(colors[level].byte(1), 8, 16);
+    //uint64 b = image::normalize(colors[level].byte(0), 8, 16);
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    uint64 r = uclamp<16>(65535.0 * gammaAdjust(y +  0.000092303716148 * db + -0.525912630661865 * dr));
+    uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.129132898890509 * db +  0.267899328207599 * dr));
+    uint64 b = uclamp<16>(65535.0 * gammaAdjust(y +  0.664679059978955 * db + -0.000079202543533 * dr));
+
+    return r << 32 | g << 16 | b << 0;
+  };
+
+  double gamma = settings.colorEmulation ? 1.8 : 2.2;
+  if(system.region() == System::Region::NTSC) {
+    return generateNTSCColor(n, 0.0, gamma);
+  } else if(system.region() == System::Region::PAL) {
+    return generatePALColor(n, gamma);
+  } else if(system.region() == System::Region::SECAM) {
+    return generateSECAMColor(n, gamma);
+  }
+}
+
+auto Interface::audioFrequency() -> double {
+  return system.colorburst() / 114.0;
+}
+
+auto Interface::loaded() -> bool {
+  return system.loaded();
+}
+
+auto Interface::sha256() -> string {
+  return cartridge.sha256();
+}
+
+auto Interface::load(uint id) -> bool {
+  return system.load();
+}
+
+auto Interface::save() -> void {
+  system.save();
+}
+
+auto Interface::unload() -> void {
+  save();
+  system.unload();
+}
+
+auto Interface::connect(uint port, uint device) -> void {
+  Atari2600::peripherals.connect(port, device);
+}
+
+auto Interface::power() -> void {
+  system.power();
+}
+
+auto Interface::reset() -> void {
+  system.power();
+}
+
+auto Interface::run() -> void {
+  system.run();
+}
+
+auto Interface::serialize() -> serializer {
+  system.runToSave();
+  return system.serialize();
+}
+
+auto Interface::unserialize(serializer& s) -> bool {
+  return system.unserialize(s);
+}
+
+auto Interface::cheatSet(const string_vector& list) -> void {
+  cheat.reset();
+  cheat.assign(list);
+}
+
+auto Interface::cap(const string& name) -> bool {
+  if(name == "Color Emulation") return true;
+  if(name == "Scanline Emulation") return true;
+  return false;
+}
+
+auto Interface::get(const string& name) -> any {
+  if(name == "Color Emulation") return settings.colorEmulation;
+  if(name == "Scanline Emulation") return settings.scanlineEmulation;
+  return {};
+}
+
+auto Interface::set(const string& name, const any& value) -> bool {
+  if(name == "Color Emulation" && value.is<bool>()) {
+    settings.colorEmulation = value.get<bool>();
+    system.configureVideoPalette();
+    return true;
+  }
+  if(name == "Scanline Emulation" && value.is<bool>()) {
+    settings.scanlineEmulation = value.get<bool>();
+    system.configureVideoEffects();
+    return true;
+  }
+  return false;
+}
+
+}
diff --git a/higan/a2600/interface/interface.hpp b/higan/a2600/interface/interface.hpp
new file mode 100644
index 0000000..fecf880
--- /dev/null
+++ b/higan/a2600/interface/interface.hpp
@@ -0,0 +1,70 @@
+namespace Atari2600 {
+
+struct ID {
+  enum : uint {
+    System,
+    Atari2600,
+  };
+
+  struct Port { enum : uint {
+    Hardware,
+    Controller1,
+    Controller2,
+  };};
+
+  struct Device { enum : uint {
+    Controls,
+    None,
+    Joystick,
+  };};
+};
+
+struct Interface : Emulator::Interface {
+  using Emulator::Interface::load;
+
+  Interface();
+
+  auto manifest() -> string override;
+  auto title() -> string override;
+
+  auto videoSize() -> VideoSize override;
+  auto videoSize(uint width, uint height, bool arc) -> VideoSize override;
+  auto videoFrequency() -> double override;
+  auto videoColors() -> uint32 override;
+  auto videoColor(uint32 color) -> uint64 override;
+
+  auto audioFrequency() -> double override;
+
+  auto loaded() -> bool override;
+  auto sha256() -> string override;
+  auto load(uint id) -> bool override;
+  auto save() -> void override;
+  auto unload() -> void override;
+
+  auto connect(uint port, uint device) -> void override;
+  auto power() -> void override;
+  auto reset() -> void override;
+  auto run() -> void override;
+
+  auto serialize() -> serializer override;
+  auto unserialize(serializer&) -> bool override;
+
+  auto cheatSet(const string_vector&) -> void override;
+
+  auto cap(const string& name) -> bool override;
+  auto get(const string& name) -> any override;
+  auto set(const string& name, const any& value) -> bool override;
+};
+
+struct Settings {
+  bool colorEmulation = true;
+  bool scanlineEmulation = true;
+
+  uint controllerPort1 = 0;
+  uint controllerPort2 = 0;
+};
+
+extern Interface* interface;
+extern Settings settings;
+
+}
diff --git a/higan/a2600/pia/io.cpp b/higan/a2600/pia/io.cpp
new file mode 100644
index 0000000..3e18183
--- /dev/null
+++ b/higan/a2600/pia/io.cpp
@@ -0,0 +1,120 @@
+auto PIA::readIO(uint7 addr, uint8 data) -> uint8 {
+  switch(addr & 0x07) {
+
+  case 0x00: {  //SWCHA
+    data = (io.swcha & io.swacnt) | (data & ~io.swacnt);
+    data |= (Atari2600::peripherals.controllerPort1->direction() << 4) & ~io.swacnt;
+    data |= (Atari2600::peripherals.controllerPort2->direction() << 0) & ~io.swacnt;
+    break;
+  }
+
+  case 0x01: {  //SWACNT
+    data = io.swacnt;
+    break;
+  }
+
+  case 0x02: {  //SWCHB
+    data = (io.swchb & io.swbcnt) | (data & ~io.swbcnt);
+    //Reset switch/button
+    if(!io.swbcnt.bit(0)) data.bit(0) = !interface->inputPoll(ID::Port::Hardware, ID::Device::Controls, 1);
+    //Select switch/button
+    if(!io.swbcnt.bit(1)) data.bit(1) = !interface->inputPoll(ID::Port::Hardware, ID::Device::Controls, 0);
+    if(!io.swbcnt.bit(3)) data.bit(3) = io.tvtype;
+    if(!io.swbcnt.bit(6)) data.bit(6) = io.difficulty0;
+    if(!io.swbcnt.bit(7)) data.bit(7) = io.difficulty1;
+    break;
+  }
+
+  case 0x03: {  //SWBCNT
+    data = io.swbcnt;
+    break;
+  }
+
+  case 0x04: case 0x06: {  //INTIM
+    data = io.timer.base;
+    io.timerIRQEnable = addr.bit(3);
+    break;
+  }
+
+  case 0x05: case 0x07: {  //INSTAT
+    data.bits(0,5) = 0;
+    data.bit (  6) = io.timerUnderflowINSTAT;
+    data.bit (  7) = io.timerUnderflowTIM_T;
+    io.timerUnderflowINSTAT = false;
+    break;
+  }
+
+  }
+
+  return data;
+}
+
+auto PIA::writeIO(uint7 addr, uint8 data) -> void {
+  switch(addr & 0x17) {
+
+  case 0x00: case 0x10: {
+    return;
+  }
+
+  case 0x01: case 0x11: {
+    io.swacnt = data;
+    return;
+  }
+
+  case 0x02: case 0x12: {
+    return;
+  }
+
+  case 0x03: case 0x13: {
+    io.swbcnt = data;
+    return;
+  }
+
+  case 0x04: case 0x05: case 0x06: case 0x07: {
+    //PA7 is connected to the left controller port's Right direction.
+    //Because the CPU has no IRQ line, this interrupt is useless.
+    io.pa7EdgeDetect = addr.bit(0);
+    io.pa7IRQEnable  = addr.bit(1);
+    return;
+  }
+
+  case 0x14: {  //TIM1T
+    io.timer.value         = data << 10;
+    io.timerDecrement      = 1024;
+    io.timerUnderflowTIM_T = false;
+    io.timerIRQEnable      = addr.bit(3);
+    runTimer();
+    return;
+  }
+
+  case 0x15: {  //TIM8T
+    io.timer.value         = data << 10;
+    io.timerDecrement      =  128;
+    io.timerUnderflowTIM_T = false;
+    io.timerIRQEnable      = addr.bit(3);
+    runTimer();
+    return;
+  }
+
+  case 0x16: {  //TIM64T
+    io.timer.value         = data << 10;
+    io.timerDecrement      =   16;
+    io.timerUnderflowTIM_T = false;
+    io.timerIRQEnable      = addr.bit(3);
+    runTimer();
+    return;
+  }
+
+  case 0x17: {  //T1024T
+    io.timer.value         = data << 10;
+    io.timerDecrement      =    1;
+    io.timerUnderflowTIM_T = false;
+    io.timerIRQEnable      = addr.bit(3);
+    runTimer();
+    return;
+  }
+
+  }
+
+  unreachable;
+}
diff --git a/higan/a2600/pia/memory.cpp b/higan/a2600/pia/memory.cpp
new file mode 100644
index 0000000..c3d1646
--- /dev/null
+++ b/higan/a2600/pia/memory.cpp
@@ -0,0 +1,7 @@
+auto PIA::readRAM(uint7 addr, uint8 data) -> uint8 {
+  return ram[addr];
+}
+
+auto PIA::writeRAM(uint7 addr, uint8 data) -> void {
+  ram[addr] = data;
+}
diff --git a/higan/a2600/pia/pia.cpp b/higan/a2600/pia/pia.cpp
new file mode 100644
index 0000000..3fbe3c0
--- /dev/null
+++ b/higan/a2600/pia/pia.cpp
@@ -0,0 +1,100 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+PIA pia;
+
+#include "memory.cpp"
+#include "io.cpp"
+#include "serialization.cpp"
+
+PIA::PIA() {
+}
+
+PIA::~PIA() {
+}
+
+auto PIA::step(uint clocks) -> void {
+  Thread::step(clocks);
+  for(auto peripheral : peripherals) synchronize(*peripheral);
+  synchronize(cpu);
+}
+
+auto PIA::Enter() -> void {
+  while(true) scheduler.synchronize(), pia.main();
+}
+
+auto PIA::main() -> void {
+  runTimer();
+  step(3);
+
+  //Behavior not relevant to the Atari 2600:
+  //The MOS 6507 has no IRQ pin, so IRQ functionality is left unused.
+  //This means that timers and PA7 (left controller port pressing Right)
+  //cannot automatically fire IRQs.
+}
+
+auto PIA::load(Markup::Node node) -> bool {
+  return true;
+}
+
+auto PIA::power() -> void {
+  //PIA's clock rate is the same in all regions
+  create(Enter, Emulator::Constants::Colorburst::NTSC);
+
+  io.tvtype = TVType::Color;
+  io.difficulty0 = Difficulty::B;
+  io.difficulty1 = Difficulty::B;
+
+  io.swcha  = 0x00;
+  io.swacnt = 0x00;
+  io.swchb  = 0x00;
+  io.swbcnt = 0x00;
+
+  io.timer.value          = 0x00000;
+  io.timerDecrement       = 1024;
+  io.timerUnderflowINSTAT = false;
+  io.timerUnderflowTIM_T  = false;
+
+  io.timerIRQEnable = false;
+  io.pa7IRQEnable   = false;
+  io.pa7EdgeDetect  = false;
+}
+
+auto PIA::updateIO() -> void {
+  //If this code runs 19912 (262 * 228 / 3) times as fast as it does in other
+  //emulators, it will tremendously slow down emulation.
+  //Therefore, a dirty hack is used where this function is called from within
+  //the TIA.
+  if(interface->inputPoll(ID::Port::Hardware, ID::Device::Controls, 2)) {
+    if(!input.tvtype) io.tvtype = !io.tvtype;
+    input.tvtype = 1;
+  } else {
+    input.tvtype = 0;
+  }
+
+  if(interface->inputPoll(ID::Port::Hardware, ID::Device::Controls, 3)) {
+    if(!input.difficulty0) io.difficulty0 = !io.difficulty0;
+    input.difficulty0 = 1;
+  } else {
+    input.difficulty0 = 0;
+  }
+
+  if(interface->inputPoll(ID::Port::Hardware, ID::Device::Controls, 4)) {
+    if(!input.difficulty1) io.difficulty1 = !io.difficulty1;
+    input.difficulty1 = 1;
+  } else {
+    input.difficulty1 = 0;
+  }
+}
+
+auto PIA::runTimer() -> void {
+  io.timer.value = (io.timer.value - io.timerDecrement) & 0x3ffff;
+  if(io.timer.value == 0) {
+    io.timerUnderflowINSTAT = true;
+    io.timerUnderflowTIM_T  = true;
+    io.timerDecrement = 1024;
+  }
+}
+
+}
diff --git a/higan/a2600/pia/pia.hpp b/higan/a2600/pia/pia.hpp
new file mode 100644
index 0000000..6f89133
--- /dev/null
+++ b/higan/a2600/pia/pia.hpp
@@ -0,0 +1,73 @@
+//MOS 6532 RIOT
+
+struct PIA : Thread {
+  PIA();
+  ~PIA();
+
+  alwaysinline auto step(uint clocks) -> void;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+
+  auto updateIO() -> void;
+  auto runTimer() -> void;
+
+  //memory.cpp
+  auto readRAM(uint7 addr, uint8 data) -> uint8;
+  auto writeRAM(uint7 addr, uint8 data) -> void;
+
+  //io.cpp
+  auto readIO(uint7 addr, uint8 data) -> uint8;
+  auto writeIO(uint7 addr, uint8 data) -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  uint8 ram[128];
+  vector<Thread*> peripherals;
+
+privileged:
+  struct TVType { enum : bool { Monochrome, Color };};
+  struct Difficulty { enum : bool { B, A };};
+
+  struct IO {
+    bool tvtype;
+    bool difficulty0;
+    bool difficulty1;
+
+    //$0280 SWCHA
+    uint8 swcha;
+
+    //$0281 SWACNT
+    uint8 swacnt;
+
+    //$0282 SWCHB
+    uint8 swchb;
+
+    //$0283 SWBCNT
+    uint8 swbcnt;
+
+    union {
+      uint value;
+      NaturalBitField<uint, 0, 9> prescaler;
+      NaturalBitField<uint,10,17> base;
+    } timer;
+    uint10 timerDecrement;
+    bool timerUnderflowINSTAT;
+    bool timerUnderflowTIM_T;
+
+    bool timerIRQEnable;  //useless with MOS 6507
+    bool pa7IRQEnable;  //useless with MOS 6507
+    bool pa7EdgeDetect;
+  } io;
+
+  struct Input {
+    bool tvtype;
+    bool difficulty0;
+    bool difficulty1;
+  } input;
+};
+
+extern PIA pia;
diff --git a/higan/a2600/pia/serialization.cpp b/higan/a2600/pia/serialization.cpp
new file mode 100644
index 0000000..50365c5
--- /dev/null
+++ b/higan/a2600/pia/serialization.cpp
@@ -0,0 +1,23 @@
+auto PIA::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+
+  s.array(ram);
+
+  s.integer(io.tvtype);
+  s.integer(io.difficulty0);
+  s.integer(io.difficulty1);
+
+  s.integer(io.swcha);
+  s.integer(io.swacnt);
+  s.integer(io.swchb);
+  s.integer(io.swbcnt);
+
+  s.integer(io.timer.value);
+  s.integer(io.timerDecrement);
+  s.integer(io.timerUnderflowINSTAT);
+  s.integer(io.timerUnderflowTIM_T);
+
+  s.integer(io.timerIRQEnable);
+  s.integer(io.pa7IRQEnable);
+  s.integer(io.pa7EdgeDetect);
+}
diff --git a/higan/a2600/system/peripherals.cpp b/higan/a2600/system/peripherals.cpp
new file mode 100644
index 0000000..4cf4878
--- /dev/null
+++ b/higan/a2600/system/peripherals.cpp
@@ -0,0 +1,41 @@
+Peripherals peripherals;
+
+auto Peripherals::unload() -> void {
+  delete controllerPort1;
+  delete controllerPort2;
+  controllerPort1 = nullptr;
+  controllerPort2 = nullptr;
+}
+
+auto Peripherals::reset() -> void {
+  connect(ID::Port::Controller1, settings.controllerPort1);
+  connect(ID::Port::Controller2, settings.controllerPort2);
+}
+
+auto Peripherals::connect(uint port, uint device) -> void {
+  if(port == ID::Port::Controller1) {
+    settings.controllerPort1 = device;
+    if(!system.loaded()) return;
+
+    delete controllerPort1;
+    switch(device) { default:
+    case ID::Device::None:     controllerPort1 = new Controller(ID::Port::Controller1); break;
+    case ID::Device::Joystick: controllerPort1 = new Joystick(ID::Port::Controller1); break;
+    }
+  }
+
+  if(port == ID::Port::Controller2) {
+    settings.controllerPort2 = device;
+    if(!system.loaded()) return;
+
+    delete controllerPort2;
+    switch(device) { default:
+    case ID::Device::None:     controllerPort2 = new Controller(ID::Port::Controller2); break;
+    case ID::Device::Joystick: controllerPort2 = new Joystick(ID::Port::Controller2); break;
+    }
+  }
+
+  pia.peripherals.reset();
+  pia.peripherals.append(controllerPort1);
+  pia.peripherals.append(controllerPort2);
+}
diff --git a/higan/a2600/system/serialization.cpp b/higan/a2600/system/serialization.cpp
new file mode 100644
index 0000000..5b7f2b8
--- /dev/null
+++ b/higan/a2600/system/serialization.cpp
@@ -0,0 +1,70 @@
+auto System::serialize() -> serializer {
+  serializer s(serializeSize);
+
+  uint signature = 0x31545342;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+  memory::copy(&version, (const char*)Emulator::SerializerVersion, Emulator::SerializerVersion.size());
+  memory::copy(&hash, (const char*)cartridge.sha256(), 64);
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  serializeAll(s);
+  return s;
+}
+
+auto System::unserialize(serializer& s) -> bool {
+  uint signature = 0;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  if(signature != 0x31545342) return false;
+  if(string{version} != Emulator::SerializerVersion) return false;
+
+  power();
+  serializeAll(s);
+  return true;
+}
+
+//internal
+
+auto System::serialize(serializer& s) -> void {
+  s.integer((uint&)information.region);
+}
+
+auto System::serializeAll(serializer& s) -> void {
+  cartridge.serialize(s);
+  system.serialize(s);
+  cpu.serialize(s);
+  tia.serialize(s);
+}
+
+//perform dry-run state save:
+//determines exactly how many bytes are needed to save state for this cartridge,
+//as amount varies per game (eg different RAM sizes, etc.)
+auto System::serializeInit() -> void {
+  serializer s;
+
+  uint signature = 0;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  serializeAll(s);
+  serializeSize = s.size();
+}
diff --git a/higan/a2600/system/system.cpp b/higan/a2600/system/system.cpp
new file mode 100644
index 0000000..8159050
--- /dev/null
+++ b/higan/a2600/system/system.cpp
@@ -0,0 +1,92 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+System system;
+Scheduler scheduler;
+Cheat cheat;
+#include "video.cpp"
+#include "peripherals.cpp"
+#include "serialization.cpp"
+
+auto System::run() -> void {
+  if(scheduler.enter() == Scheduler::Event::Frame) tia.refresh();
+}
+
+auto System::runToSave() -> void {
+  scheduler.synchronize(cpu);
+  scheduler.synchronize(pia);
+  scheduler.synchronize(tia);
+  for(auto peripheral : pia.peripherals) scheduler.synchronize(*peripheral);
+}
+
+auto System::init() -> void {
+  assert(interface != nullptr);
+}
+
+auto System::load() -> bool {
+  information = Information();
+
+  if(auto fp = interface->open(ID::System, "manifest.bml", File::Read, File::Required)) {
+    information.manifest = fp->reads();
+  } else return false;
+
+  auto document = BML::unserialize(information.manifest);
+  auto system = document["system"];
+
+  if(!cartridge.load()) return false;
+
+  switch(cartridge.region()) {
+  case Cartridge::Region::NTSC:  information.region = Region::NTSC;  break;
+  case Cartridge::Region::PAL:   information.region = Region::PAL;   break;
+  case Cartridge::Region::SECAM: information.region = Region::SECAM; break;
+  }
+  if(system["region"].text() == "NTSC" ) information.region = Region::NTSC;
+  if(system["region"].text() == "PAL"  ) information.region = Region::PAL;
+  if(system["region"].text() == "SECAM") information.region = Region::SECAM;
+
+  if(!cpu.load(system)) return false;
+  if(!pia.load(system)) return false;
+  if(!tia.load(system)) return false;
+
+  information.colorburst = region() == Region::NTSC
+  ? Emulator::Constants::Colorburst::NTSC
+  : Emulator::Constants::Colorburst::PAL * 4.0 / 5.0;
+
+  serializeInit();
+  return information.loaded = true;
+}
+
+auto System::save() -> void {
+  if(!loaded()) return;
+  cartridge.save();
+}
+
+auto System::unload() -> void {
+  if(!loaded()) return;
+  peripherals.unload();
+
+  cartridge.unload();
+  information.loaded = false;
+}
+
+auto System::power() -> void {
+  Emulator::video.reset();
+  Emulator::video.setInterface(interface);
+  configureVideoPalette();
+  configureVideoEffects();
+
+  Emulator::audio.reset();
+  Emulator::audio.setInterface(interface);
+
+  scheduler.reset();
+  cpu.power();
+  cpu.reset();
+  pia.power();
+  tia.power();
+  scheduler.primary(cpu);
+
+  peripherals.reset();
+}
+
+}
diff --git a/higan/a2600/system/system.hpp b/higan/a2600/system/system.hpp
new file mode 100644
index 0000000..3bafc99
--- /dev/null
+++ b/higan/a2600/system/system.hpp
@@ -0,0 +1,54 @@
+struct Interface;
+
+struct System {
+  enum class Region : uint { NTSC = 0, PAL = 1, SECAM = 2 };
+
+  inline auto loaded() const -> bool { return information.loaded; }
+  inline auto region() const -> Region { return information.region; }
+  inline auto colorburst() const -> double { return information.colorburst; }
+
+  auto run() -> void;
+  auto runToSave() -> void;
+
+  auto init() -> void;
+  auto load() -> bool;
+  auto save() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+
+  //video.cpp
+  auto configureVideoPalette() -> void;
+  auto configureVideoEffects() -> void;
+
+  //serialization.cpp
+  auto serialize() -> serializer;
+  auto unserialize(serializer&) -> bool;
+
+private:
+  struct Information {
+    string manifest;
+    bool loaded = false;
+    Region region = Region::NTSC;
+    double colorburst = 0.0;
+  } information;
+
+  uint serializeSize = 0;
+
+  auto serialize(serializer&) -> void;
+  auto serializeAll(serializer&) -> void;
+  auto serializeInit() -> void;
+
+  friend class Cartridge;
+};
+
+struct Peripherals {
+  auto unload() -> void;
+  auto reset() -> void;
+  auto connect(uint port, uint device) -> void;
+
+  Controller* controllerPort1 = nullptr;
+  Controller* controllerPort2 = nullptr;
+};
+
+extern System system;
+extern Peripherals peripherals;
diff --git a/higan/a2600/system/video.cpp b/higan/a2600/system/video.cpp
new file mode 100644
index 0000000..2faaf57
--- /dev/null
+++ b/higan/a2600/system/video.cpp
@@ -0,0 +1,7 @@
+auto System::configureVideoPalette() -> void {
+  Emulator::video.setPalette();
+}
+
+auto System::configureVideoEffects() -> void {
+  Emulator::video.setEffect(Emulator::Video::Effect::Scanlines, settings.scanlineEmulation);
+}
diff --git a/higan/a2600/tia/audio.cpp b/higan/a2600/tia/audio.cpp
new file mode 100644
index 0000000..48605cb
--- /dev/null
+++ b/higan/a2600/tia/audio.cpp
@@ -0,0 +1,88 @@
+auto TIA::runAudio() -> void {
+  if(io.hcounter != 0 && io.hcounter != 114) return;
+
+  for(auto& channel : audio.channel) {
+    if(channel.phase++ < channel.frequency) continue;
+    channel.phase = 0;
+
+    if(channel.control.bits(2,3) == 3) {
+      if(++channel.state3 == 3) channel.state3 = 0;
+      else continue;
+    }
+
+    switch(channel.control) {
+    case 0x0:
+    case 0xb:
+      channel.sample = channel.shift4.bit(0);
+      channel.shift4 = channel.shift4 >> 1 | 0x008;
+      channel.shift5 = channel.shift5 >> 1 | 0x010;
+      break;
+    case 0x1:
+      channel.sample = shift(channel.shift4);
+      break;
+    case 0x2:
+      if((channel.shift5 & 0x00f) == 0x000) channel.sample = shift(channel.shift4);
+      if((channel.shift5 & 0x00f) == 0x00f) channel.sample = shift(channel.shift4);
+      shift(channel.shift5);
+      break;
+    case 0x3:
+      if(shift(channel.shift5)) channel.sample = shift(channel.shift4);
+      break;
+    case 0x4:
+      channel.shift4 = channel.shift4 >> 1 | 0x008;
+      shift(channel.shift5);
+      channel.sample = channel.state1++;
+      break;
+    case 0x5:
+      channel.shift5 = channel.shift5 >> 1 | 0x010;
+      shift(channel.shift4);
+      channel.sample = channel.state1++;
+      break;
+    case 0x6:
+    case 0xa:
+    case 0xe:
+      shift(channel.shift5);
+      if((channel.shift5 & 0x00f) == 0x000) channel.sample = 0;
+      if((channel.shift5 & 0x00f) == 0x00f) channel.sample = 1;
+      break;
+    case 0x7:
+    case 0x9:
+    case 0xf:
+      channel.sample = shift(channel.shift5);
+      break;
+    case 0x8:
+      channel.sample = shift(channel.shift9);
+      break;
+    case 0xc:
+    case 0xd:
+      channel.sample = channel.state1++;
+      break;
+    }
+  }
+
+  double sample = 0.0;
+  sample += audio.channel[0].sample * audio.channel[0].volume * 32768.0 / 15.0 - 16384.0;
+  sample += audio.channel[1].sample * audio.channel[1].volume * 32768.0 / 15.0 - 16384.0;
+
+  //stream->sample(sample / 32768.0);
+  stream->sample(0.0);
+}
+
+auto TIA::shift(uint4& shift) -> bool {
+  bool result = shift.bit(0);
+  shift = shift >> 1 | (shift.bit(1) ^ shift.bit(0)) << 3;
+  return result;
+}
+
+auto TIA::shift(uint5& shift) -> bool {
+  bool result = shift.bit(0);
+  shift = shift >> 1 | (shift.bit(2) ^ shift.bit(0)) << 4;
+  return result;
+}
+
+auto TIA::shift(uint9& shift) -> bool {
+  bool result = shift.bit(0);
+  shift = shift >> 1 | (shift.bit(4) ^ shift.bit(0)) << 8;
+  return result;
+}
+
diff --git a/higan/a2600/tia/io.cpp b/higan/a2600/tia/io.cpp
new file mode 100644
index 0000000..a617089
--- /dev/null
+++ b/higan/a2600/tia/io.cpp
@@ -0,0 +1,399 @@
+auto TIA::readIO(uint6 addr, uint8 data) -> uint8 {
+  switch(addr & 0x0f) {
+
+  //CXM0P
+  case 0x0: {
+    data.bit(6) = collision.m0p0;
+    data.bit(7) = collision.m0p1;
+    break;
+  }
+
+  //CXM1P
+  case 0x1: {
+    data.bit(6) = collision.m1p1;
+    data.bit(7) = collision.m1p0;
+    break;
+  }
+
+  //CXP0FB
+  case 0x2: {
+    data.bit(6) = collision.p0bl;
+    data.bit(7) = collision.p0pf;
+    break;
+  }
+
+  //CXP1FB
+  case 0x3: {
+    data.bit(6) = collision.p1bl;
+    data.bit(7) = collision.p1pf;
+    break;
+  }
+
+  //CXM0FB
+  case 0x4: {
+    data.bit(6) = collision.m0bl;
+    data.bit(7) = collision.m0pf;
+    break;
+  }
+
+  //CXM1FB
+  case 0x5: {
+    data.bit(6) = collision.m1bl;
+    data.bit(7) = collision.m1pf;
+    break;
+  }
+
+  //CXBLPF
+  case 0x6: {
+    data.bit(7) = collision.blpf;
+    break;
+  }
+
+  //CXPPMM
+  case 0x7: {
+    data.bit(6) = collision.m0m1;
+    data.bit(7) = collision.p0p1;
+    break;
+  }
+
+  //INPT0
+  case 0x8: {
+    data.bit(7) = peripherals.controllerPort1->pot0();
+    break;
+  }
+
+  //INPT1
+  case 0x9: {
+    data.bit(7) = peripherals.controllerPort1->pot1();
+    break;
+  }
+
+  //INPT2
+  case 0xa: {
+    data.bit(7) = peripherals.controllerPort2->pot0();
+    break;
+  }
+
+  //INPT3
+  case 0xb: {
+    data.bit(7) = peripherals.controllerPort2->pot1();
+    break;
+  }
+
+  //INPT4
+  case 0xc: {
+    data.bit(7) = peripherals.controllerPort1->fire();
+    break;
+  }
+
+  //INPT5
+  case 0xd: {
+    data.bit(7) = peripherals.controllerPort2->fire();
+    break;
+  }
+
+  }
+
+  return data;
+}
+
+auto TIA::writeIO(uint6 addr, uint8 data) -> void {
+  switch(addr) {
+
+  //VSYNC
+  case 0x00: {
+    if(io.vsync && !data.bit(1)) io.vcounter = 0;
+    io.vsync = data.bit(1);
+    return;
+  }
+
+  //VBLANK
+  case 0x01: {
+    io.vblank = data.bit(1);
+    return;
+  }
+
+  //WSYNC
+  case 0x02: {
+    cpu.rdyLine(0);
+    return;
+  }
+
+  //RSYNC
+  case 0x03: {
+    io.hcounter = 0;
+    return;
+  }
+
+  //NUSIZ0
+  case 0x04: {
+    player[0].numberSize = data.bits(0,2);
+    //missile size is 2 ^ data, or {1, 2, 4, 8}[data].
+    missile[0].size      = data.bits(4,5);
+    return;
+  }
+
+  //NUSIZ1
+  case 0x05: {
+    player[1].numberSize = data.bits(0,2);
+    missile[1].size      = data.bits(4,5);
+    return;
+  }
+
+  //COLUP0
+  case 0x06: {
+    io.playerMissile0Color = data >> 1;
+    return;
+  }
+
+  //COLUP1
+  case 0x07: {
+    io.playerMissile1Color = data >> 1;
+    return;
+  }
+
+  //COLUPF
+  case 0x08: {
+    io.playfieldBallColor = data >> 1;
+    return;
+  }
+
+  //COLUBK
+  case 0x09: {
+    io.backgroundColor = data >> 1;
+    return;
+  }
+
+  //CTRLPF
+  case 0x0a: {
+    playfield.reflect        = data.bit (  0);
+    playfield.score          = data.bit (  1);
+    io.playfieldBallPriority = data.bit (  2);
+    ball.size                = data.bits(4,5);
+    return;
+  }
+
+  //REFP0
+  case 0x0b: {
+    player[0].reflect = data.bit(3);
+    return;
+  }
+
+  //REFP1
+  case 0x0c: {
+    player[1].reflect = data.bit(3);
+    return;
+  }
+
+  //PF0
+  case 0x0d: {
+    playfield.graphic0 = data.bits(4,7);
+    return;
+  }
+
+  //PF1
+  case 0x0e: {
+    playfield.graphic1 = data.bits(0,7);
+    return;
+  }
+
+  //PF2
+  case 0x0f: {
+    playfield.graphic2 = data.bits(0,7);
+    return;
+  }
+
+  //RESP0
+  case 0x10: {
+    player[0].position = (hblank() ? 2 : io.hcounter - 68 + 4) % 160;
+    return;
+  }
+
+  //RESP1
+  case 0x11: {
+    player[1].position = (hblank() ? 2 : io.hcounter - 68 + 4) % 160;
+    return;
+  }
+
+  //RESM0
+  case 0x12: {
+    missile[0].position = (hblank() ? 1 : io.hcounter - 68 + 3) % 160;
+    return;
+  }
+
+  //RESM1
+  case 0x13: {
+    missile[1].position = (hblank() ? 1 : io.hcounter - 68 + 3) % 160;
+    return;
+  }
+
+  //RESBL
+  case 0x14: {
+    ball.position = (hblank() ? 1 : io.hcounter - 68 + 3) % 160;
+    return;
+  }
+
+  //AUDC0
+  case 0x15: {
+    audio.channel[0].control = data.bits(0,3);
+    return;
+  }
+
+  //AUDC1
+  case 0x16: {
+    audio.channel[1].control = data.bits(0,3);
+    return;
+  }
+
+  //AUDF0
+  case 0x17: {
+    audio.channel[0].frequency = data.bits(0,4);
+    return;
+  }
+
+  //AUDF1
+  case 0x18: {
+    audio.channel[1].frequency = data.bits(0,4);
+    return;
+  }
+
+  //AUDV0
+  case 0x19: {
+    audio.channel[0].volume = data.bits(0,3);
+    return;
+  }
+
+  //AUDV1
+  case 0x1a: {
+    audio.channel[1].volume = data.bits(0,3);
+    return;
+  }
+
+  //GRP0
+  case 0x1b: {
+    player[0].graphic = data;
+    return;
+  }
+
+  //GRP1
+  case 0x1c: {
+    player[1].graphic = data;
+    return;
+  }
+
+  //ENAM0
+  case 0x1d: {
+    missile[0].enable = data.bit(1);
+    return;
+  }
+
+  //ENAM1
+  case 0x1e: {
+    missile[1].enable = data.bit(1);
+    return;
+  }
+
+  //ENABL
+  case 0x1f: {
+    ball.enable = data.bit(1);
+    return;
+  }
+
+  //HMP0
+  case 0x20: {
+    player[0].motion = data.bits(4,7);
+    return;
+  }
+
+  //HMP1
+  case 0x21: {
+    player[1].motion = data.bits(4,7);
+    return;
+  }
+
+  //HMM0
+  case 0x22: {
+    missile[0].motion = data.bits(4,7);
+    return;
+  }
+
+  //HMM1
+  case 0x23: {
+    missile[1].motion = data.bits(4,7);
+    return;
+  }
+
+  //HMBL
+  case 0x24: {
+    ball.motion = data.bits(4,7);
+    return;
+  }
+
+  //VDELP0
+  case 0x25: {
+    return;
+  }
+
+  //VDELP1
+  case 0x26: {
+    return;
+  }
+
+  //VDELBL
+  case 0x27: {
+    return;
+  }
+
+  //RESMP0
+  case 0x28: {
+    missile[0].reset = data.bit(1);
+    return;
+  }
+
+  //RESMP1
+  case 0x29: {
+    missile[1].reset = data.bit(1);
+    return;
+  }
+
+  //HMOVE
+  case 0x2a: {
+    for(auto& p : player)  p.position = (p.position - p.motion + 160) % 160;
+    for(auto& m : missile) m.position = (m.position - m.motion + 160) % 160;
+    ball.position = (ball.position - ball.motion + 160) % 160;
+    return;
+  }
+
+  //HMCLR
+  case 0x2b: {
+    player[0].motion = 0;
+    player[1].motion = 0;
+    missile[0].motion = 0;
+    missile[1].motion = 0;
+    ball.motion = 0;
+    return;
+  }
+
+  //CXCLR
+  case 0x2c: {
+    collision.m0p1 = false;
+    collision.m0p0 = false;
+    collision.m1p0 = false;
+    collision.m1p1 = false;
+    collision.p0pf = false;
+    collision.p0bl = false;
+    collision.p1pf = false;
+    collision.p1bl = false;
+    collision.m0pf = false;
+    collision.m0bl = false;
+    collision.m1pf = false;
+    collision.m1bl = false;
+    collision.blpf = false;
+    collision.p0p1 = false;
+    collision.m0m1 = false;
+    return;
+  }
+
+  }
+
+}
diff --git a/higan/a2600/tia/render.cpp b/higan/a2600/tia/render.cpp
new file mode 100644
index 0000000..57fb315
--- /dev/null
+++ b/higan/a2600/tia/render.cpp
@@ -0,0 +1,110 @@
+auto TIA::frame() -> void {
+}
+
+auto TIA::scanline() -> void {
+  if(io.vcounter == 0) frame();
+
+  if(io.vcounter == 228 + (system.region() == System::Region::NTSC ? 19 : 44)) {
+    //dirty hack to prevent controls for hardware switches from being polled
+    //19912 (262 * 228 / 3) times as fast as joystick/paddle controls and other emulators' controls
+    pia.updateIO();
+
+    scheduler.exit(Scheduler::Event::Frame);
+  }
+}
+
+auto TIA::runVideo() -> void {
+  for(bool i : range(2)) {
+    if(!missile[i].reset) continue;
+    uint offset = player[i].numberSize == 5 ? 6 : player[i].numberSize == 7 ? 10 : 3;
+    missile[i].position = (player[i].position + offset) % 160;
+  }
+
+  uint offsetY = system.region() == System::Region::NTSC ? 19 : 37;
+  if(hblank() || io.vcounter < offsetY) return;
+
+  uint x = io.hcounter - 68;
+  uint y = io.vcounter - offsetY;
+  if(y >= 228) return;
+
+  uint7 pixel = 0;
+
+  if(!io.vblank) {
+    pixel = io.backgroundColor;
+    uint size;
+
+    bool p0 = false;
+    bool p1 = false;
+    bool m0 = false;
+    bool m1 = false;
+    bool bl = false;
+    bool pf = false;
+
+    for(bool i : range(2)) {
+      uint scale;
+      if(player[i].numberSize != 5 && player[i].numberSize != 7) {
+        scale = 0;
+      } else if(player[i].numberSize == 5) {
+        scale = 1;
+      } else if(player[i].numberSize == 7) {
+        scale = 2;
+      }
+      size = 8 << scale;
+      if(player[i].position >= x - (size - 1) && player[i].position <= x) {
+        uint bit = (x - player[i].position) >> scale;
+        if(!player[i].reflect) bit = 7 - bit;
+        if(i == 0) p0 = player[i].graphic.bit(bit);
+        if(i == 1) p1 = player[i].graphic.bit(bit);
+      }
+    }
+
+    for(bool i : range(2)) {
+      if(missile[i].enable && !missile[i].reset) {
+        size = 1 << missile[i].size;
+        if(missile[i].position >= x - (size - 1) && missile[i].position <= x) {
+          if(i == 0) m0 = true;
+          if(i == 1) m1 = true;
+        }
+      }
+    }
+
+    if(ball.enable) {
+      size = 1 << ball.size;
+      if(ball.position >= x - (size - 1) && ball.position <= x) bl = true;
+    }
+
+    uint playfieldX = x >> 2;
+    if(playfieldX >= 20) playfieldX = !playfield.reflect ? playfieldX - 20 : 39 - playfieldX;
+    if(playfieldX >=  0 && playfieldX <  4) pf = playfield.graphic0.bit(playfieldX -  0);
+    if(playfieldX >=  4 && playfieldX < 12) pf = playfield.graphic1.bit(11 - playfieldX);
+    if(playfieldX >= 12 && playfieldX < 20) pf = playfield.graphic2.bit(playfieldX - 12);
+
+    if(m0 && p1) collision.m0p1 = true;
+    if(m0 && p0) collision.m0p0 = true;
+    if(m1 && p0) collision.m1p0 = true;
+    if(m1 && p1) collision.m1p1 = true;
+    if(p0 && pf) collision.p0pf = true;
+    if(p0 && bl) collision.p0bl = true;
+    if(p1 && pf) collision.p1pf = true;
+    if(p1 && bl) collision.p1bl = true;
+    if(m0 && pf) collision.m0pf = true;
+    if(m0 && bl) collision.m0bl = true;
+    if(m1 && pf) collision.m1pf = true;
+    if(m1 && bl) collision.m1bl = true;
+    if(bl && pf) collision.blpf = true;
+    if(p0 && p1) collision.p0p1 = true;
+    if(m0 && m1) collision.m0m1 = true;
+
+    if(playfield.score && pf) {
+      if(x <  80) p0 = m0 = true;
+      if(x >= 80) p1 = m1 = true;
+    }
+    if(io.playfieldBallPriority && (bl || pf)) pixel = io.playfieldBallColor;
+    else if(p0 || m0) pixel = io.playerMissile0Color;
+    else if(p1 || m1) pixel = io.playerMissile1Color;
+    else if(bl || pf) pixel = io.playfieldBallColor;
+  }
+
+  output[y * 160 + x] = pixel;
+}
+
diff --git a/higan/a2600/tia/serialization.cpp b/higan/a2600/tia/serialization.cpp
new file mode 100644
index 0000000..0ddc73e
--- /dev/null
+++ b/higan/a2600/tia/serialization.cpp
@@ -0,0 +1,72 @@
+auto TIA::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+
+  s.integer(io.hcounter);
+  s.integer(io.vcounter);
+
+  s.integer(io.vsync);
+  s.integer(io.vblank);
+
+  s.integer(io.playerMissile0Color);
+  s.integer(io.playerMissile1Color);
+  s.integer(io.playfieldBallColor);
+  s.integer(io.backgroundColor);
+
+  s.integer(io.playfieldBallPriority);
+
+  for(auto& p : player) {
+    s.integer(p.numberSize);
+    s.integer(p.reflect);
+    s.integer(p.graphic);
+    s.integer(p.position);
+    s.integer(p.motion);
+  }
+
+  for(auto& m : missile) {
+    s.integer(m.enable);
+    s.integer(m.size);
+    s.integer(m.position);
+    s.integer(m.motion);
+  }
+
+  s.integer(ball.enable);
+  s.integer(ball.size);
+  s.integer(ball.position);
+  s.integer(ball.motion);
+
+  s.integer(playfield.reflect);
+  s.integer(playfield.score);
+
+  s.integer(playfield.graphic0);
+  s.integer(playfield.graphic1);
+  s.integer(playfield.graphic2);
+
+  s.integer(collision.m0p1);
+  s.integer(collision.m0p0);
+  s.integer(collision.m1p0);
+  s.integer(collision.m1p1);
+  s.integer(collision.p0pf);
+  s.integer(collision.p0bl);
+  s.integer(collision.p1pf);
+  s.integer(collision.p1bl);
+  s.integer(collision.m0pf);
+  s.integer(collision.m0bl);
+  s.integer(collision.m1pf);
+  s.integer(collision.m1bl);
+  s.integer(collision.blpf);
+  s.integer(collision.p0p1);
+  s.integer(collision.m0m1);
+
+  for(auto& channel : audio.channel) {
+    s.integer(channel.control);
+    s.integer(channel.frequency);
+    s.integer(channel.volume);
+    s.integer(channel.phase);
+    s.integer(channel.state1);
+    s.integer(channel.state3);
+    s.integer(channel.shift4);
+    s.integer(channel.shift5);
+    s.integer(channel.shift9);
+    s.integer(channel.sample);
+  }
+}
diff --git a/higan/a2600/tia/tia.cpp b/higan/a2600/tia/tia.cpp
new file mode 100644
index 0000000..86e8112
--- /dev/null
+++ b/higan/a2600/tia/tia.cpp
@@ -0,0 +1,139 @@
+#include <a2600/a2600.hpp>
+
+namespace Atari2600 {
+
+TIA tia;
+#include "io.cpp"
+#include "render.cpp"
+#include "audio.cpp"
+#include "serialization.cpp"
+
+TIA::TIA() {
+  output = new uint32[160 * 228];
+}
+
+TIA::~TIA() {
+  delete[] output;
+}
+
+auto TIA::step(uint clocks) -> void {
+  while(clocks--) {
+    if(++io.hcounter >= 228) {
+      io.hcounter = 0;
+      if(io.vcounter < 511) io.vcounter++;
+      //Safe-guard against software that does not use VSYNC properly
+      if(io.vcounter >= (system.region() == System::Region::NTSC ? 262 : 312)) io.vcounter = 0;
+    }
+    Thread::step(1);
+    synchronize(cpu);
+  }
+}
+
+auto TIA::Enter() -> void {
+  while(true) scheduler.synchronize(), tia.main();
+}
+
+auto TIA::main() -> void {
+  scanline();
+
+  io.hcounter = 0;
+  for(uint x : range(57)) {
+    if(x == 0) cpu.rdyLine(1);
+    for(uint sub : range(4)) {
+      runVideo();
+      runAudio();
+      step(1);
+    }
+  }
+}
+
+auto TIA::load(Markup::Node node) -> bool {
+  return true;
+}
+
+auto TIA::power() -> void {
+  create(Enter, system.colorburst());
+  stream = Emulator::audio.createStream(1, system.colorburst() / 114.0);
+  memory::fill(output, 160 * 228 * sizeof(uint32));
+
+  io.playerMissile0Color   = 0x00;
+  io.playerMissile1Color   = 0x00;
+  io.playfieldBallColor    = 0x00;
+  io.backgroundColor       = 0x00;
+
+  io.playfieldBallPriority = false;
+
+  player[0].numberSize = 0;
+  player[0].reflect    = 0;
+  player[0].graphic    = 0;
+  player[0].position   = 0;
+  player[0].motion     = 0;
+
+  player[1].numberSize = 0;
+  player[1].reflect    = 0;
+  player[1].graphic    = 0;
+  player[1].position   = 0;
+  player[1].motion     = 0;
+
+  missile[0].enable   = false;
+  missile[0].size     = 0;
+  missile[0].position = 0;
+  missile[0].motion   = 0;
+
+  missile[1].enable   = false;
+  missile[1].size     = 0;
+  missile[1].position = 0;
+  missile[1].motion   = 0;
+
+  ball.enable   = false;
+  ball.size     = 0;
+  ball.position = 0;
+  ball.motion   = 0;
+
+  playfield.reflect = false;
+  playfield.score   = false;
+
+  playfield.graphic0 = 0x00;
+  playfield.graphic1 = 0x00;
+  playfield.graphic2 = 0x00;
+
+  collision.m0p0 = false;
+  collision.m0p1 = false;
+  collision.m1p0 = false;
+  collision.m1p1 = false;
+  collision.p0bl = false;
+  collision.p0pf = false;
+  collision.p1bl = false;
+  collision.p1pf = false;
+  collision.m0bl = false;
+  collision.m0pf = false;
+  collision.m1bl = false;
+  collision.m1pf = false;
+  collision.blpf = false;
+  collision.m0m1 = false;
+  collision.p0p1 = false;
+
+  for(auto& channel : audio.channel) {
+    channel.control = 0;
+    channel.frequency = 0;
+    channel.volume = 0;
+
+    channel.phase = 0;
+    channel.state1 = 1;
+    channel.state3 = 2;
+    channel.shift4 = ~0;
+    channel.shift5 = ~0;
+    channel.shift9 = ~0;
+    channel.sample = 1;
+  }
+}
+
+auto TIA::refresh() -> void {
+  auto output = this->output;
+  auto pitch = 160;
+  auto width = 160;
+  auto height = 228;
+  Emulator::video.refresh(output, pitch * sizeof(uint32), width, height);
+}
+
+}
diff --git a/higan/a2600/tia/tia.hpp b/higan/a2600/tia/tia.hpp
new file mode 100644
index 0000000..4ef88b6
--- /dev/null
+++ b/higan/a2600/tia/tia.hpp
@@ -0,0 +1,154 @@
+//Television Interface Adaptor
+
+struct TIA : Thread {
+  shared_pointer<Emulator::Stream> stream;
+
+  TIA();
+  ~TIA();
+
+  alwaysinline auto step(uint clocks) -> void;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+
+  //io.cpp
+  auto readIO(uint6 addr, uint8 data) -> uint8;
+  auto writeIO(uint6 addr, uint8 data) -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+privileged:
+  struct IO {
+    uint8 hcounter;
+    uint vcounter;  //not actually in TIA; needed for rendering
+
+    //$0000 VSYNC
+    bool vsync;
+
+    //$0001 VBLANK
+    bool vblank;
+
+    //$0006 COLUP0
+    uint7 playerMissile0Color;
+
+    //$0007 COLUP1
+    uint7 playerMissile1Color;
+
+    //$0008 COLUPF
+    uint7 playfieldBallColor;
+
+    //$0009 COLUBK
+    uint7 backgroundColor;
+
+    //$000a CTRLPF
+    bool playfieldBallPriority;
+  } io;
+
+  struct Player {
+    uint3 numberSize;  //also affects missiles
+    bool reflect;
+    uint8 graphic;
+    uint8 position;
+    int3 motion;
+  } player[2];
+
+  struct Missile {
+    bool enable;
+    uint2 size;
+    uint8 position;
+    int3 motion;
+    bool reset;
+  } missile[2];
+
+  struct Ball {
+    bool enable;
+    uint2 size;
+    uint8 position;
+    int3 motion;
+  } ball;
+
+  struct Playfield {
+    bool reflect;
+    bool score;
+
+    uint4 graphic0;
+    uint8 graphic1;
+    uint8 graphic2;
+  } playfield;
+
+  struct HMove {
+    bool enable;
+    uint2 counter;
+    uint3 delay;
+
+    bool latchP0;
+    bool latchP1;
+    bool latchM0;
+    bool latchM1;
+    bool latchBL;
+
+    uint4 counterP0;
+    uint4 counterP1;
+    uint4 counterM0;
+    uint4 counterM1;
+    uint4 counterBL;
+  } hmove;
+
+  struct Collision {
+    bool m0p1;
+    bool m0p0;
+    bool m1p0;
+    bool m1p1;
+    bool p0pf;
+    bool p0bl;
+    bool p1pf;
+    bool p1bl;
+    bool m0pf;
+    bool m0bl;
+    bool m1pf;
+    bool m1bl;
+    bool blpf;
+    bool p0p1;
+    bool m0m1;
+  } collision;
+
+  struct Audio {
+    struct Channel {
+      uint4 control;
+      uint5 frequency;
+      uint4 volume;
+
+      uint5 phase;
+      bool state1;
+      uint2 state3;
+      uint4 shift4;
+      uint5 shift5;
+      uint9 shift9;
+      bool sample;
+    } channel[2];
+  } audio;
+
+  alwaysinline auto hblank() -> bool { return io.hcounter < 68; }
+
+  auto refresh() -> void;
+
+  //render.cpp
+  auto frame() -> void;
+  auto scanline() -> void;
+  auto runVideo() -> void;
+
+  //audio.cpp
+  auto runAudio() -> void;
+  alwaysinline auto shift(uint4& shift) -> bool;
+  alwaysinline auto shift(uint5& shift) -> bool;
+  alwaysinline auto shift(uint9& shift) -> bool;
+
+  friend class System;
+
+  uint32* output = nullptr;
+};
+
+extern TIA tia;
diff --git a/higan/data/cheats.bml b/higan/data/cheats.bml
index 0e17e76..2e452c0 100644
--- a/higan/data/cheats.bml
+++ b/higan/data/cheats.bml
@@ -1,5 +1,6 @@
 database revision=2015-09-28
 
+// Famicom
 cartridge sha256:8e844d77da01f86ace52823f1f974c9230f09e6a6cbf33a07abfe9beeff00292
   name:10-Yard Fight (USA, Europe)
   cheat
@@ -111,15 +112,6 @@ cartridge sha256:9f54aafa367247b99c344ba9a0c58ad8fa8aceeeae1c304b8fefc9985c3c118
     description:Infinite energy (alt 2)
     code:0410/09
 
-cartridge sha256:cd8d9859f334901aca717e08be03dab077766927c87a2becda22982b9234d532
-  name:1945 [p1]
-  cheat
-    description:Invincibility
-    code:9298/20/ad+94e9/20/ad
-  cheat
-    description:Infinite Bombs
-    code:83b7/20/ad
-
 cartridge sha256:c457644ccfb93f8978326e728931800283821e531edc409fca9c0167495319c4
   name:3-D WorldRunner (USA)
   cheat
@@ -1182,24 +1174,18 @@ cartridge sha256:227e8a900206d0f8c67b7cb09eaee25f181085623b42bd9694dc30986d955f2
     description:Start in the cave - P2
     code:a380/01/06+a38a/03/1c
 
-cartridge sha256:69300586af39342fccc249134f6f44ebbd0fce7c1e5b93151cff63bb35072add
-  name:After Burner (USA) (Unl)
+cartridge sha256:4fb12ad1c791c7ee8d5ec824eff871d71b43b92c4e93b45ed0b60f022459b917
+  name:After Burner (Japan)
   cheat
     description:Invincibility
-    code:924b/85/a5
+    code:9261/85/a5
   cheat
     description:Infinite lives
-    code:e2a9/c6/c5
+    code:e1f1/c6/a5
   cheat
     description:Infinite missiles
     code:8af2/c6/c5
 
-cartridge sha256:4fb12ad1c791c7ee8d5ec824eff871d71b43b92c4e93b45ed0b60f022459b917
-  name:After Burner (Japan)
-  cheat
-    description:Infinite lives
-    code:e1f1/c6/a5
-
 cartridge sha256:1b5857f9fd57d6f50d8d1e57db67203155fb2974ae426deac3398efef1dbf042
   name:Aigina no Yogen - Balubalouk no Densetsu Yori (Japan)
   cheat
@@ -1554,60 +1540,6 @@ cartridge sha256:cd1a9bc6c9e2181668fea96db14bc67fbbf9bf1572eef2bb074e5912a0dd54c
     description:Don't lose life when touched
     code:8928/b1
 
-cartridge sha256:d676ef6f7aa3b042ae5a0c95a7f07fabb4c3a5fccb3767ae1950713e51189a47
-  name:Alien Syndrome (USA) (Unl)
-  cheat
-    description:Infinite time
-    code:f23f/ce/ad
-  cheat
-    description:Don't lose life when shot or touched
-    code:c98a/ff/00
-  cheat
-    description:Don't lose life from falling down holes
-    code:ca76/ff/00
-  cheat
-    description:Set timer to 440
-    code:f199/33/34
-  cheat
-    description:1 life after continue
-    code:c3a4/04/01
-  cheat
-    description:8 lives after continue
-    code:c3a4/04/08
-  cheat
-    description:Start with 1 life - both players
-    code:c511/04/01
-  cheat
-    description:Start with 8 lives - both players
-    code:c511/04/08
-  cheat
-    description:Start with Flame Thrower
-    code:c56c/00/01
-  cheat
-    description:Start with Fireball
-    code:c56c/00/02
-  cheat
-    description:Start with Laser
-    code:c56c/00/03
-  cheat
-    description:Start on round 2
-    code:fbf8/10/01+fbfa/00/b4+fbfb/20/03
-  cheat
-    description:Start on round 3
-    code:fbf8/10/02+fbfa/00/b4+fbfb/20/03
-  cheat
-    description:Start on round 4
-    code:fbf8/10/03+fbfa/00/b4+fbfb/20/03
-  cheat
-    description:Start on round 5
-    code:fbf8/10/04+fbfa/00/b4+fbfb/20/03
-  cheat
-    description:Start on round 6
-    code:fbf8/10/05+fbfa/00/b4+fbfb/20/03
-  cheat
-    description:Start on round 7
-    code:fbf8/10/06+fbfa/00/b4+fbfb/20/03
-
 cartridge sha256:a762d0a90d16c84b5f2b014816b37675cf5115320be7e815effbb64d91b2014d
   name:All Night Nippon Super Mario Brothers (Japan) (Promotion Card)
   cheat
@@ -2280,24 +2212,6 @@ cartridge sha256:f3601248633f47a0ef10723e42a1072c76dd487d7ddf943e618611bb7cfec73
     description:Partial invincibility
     code:b79f/20/ad+b279/20/ad+b411/20/ad+81b0/20/ad
 
-cartridge sha256:f91113b6a4bcd39d86ad5bbeaeb0f103461ada2cae513d1648a77ee575caf69b
-  name:Auto-Upturn (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite health (blinking)
-    code:a3f6/c6/a5+a42b/c6/a5
-  cheat
-    description:Infinite lives
-    code:a416/c6/a5
-  cheat
-    description:Infinite time
-    code:95c6/c6/a5
-
-cartridge sha256:fb20d9562088cfa620ad0221e6e6f6c6d1f08e5a9cee2a97c0ef4fc39f050c6c
-  name:Baby Boomer (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:e242/ce/cd
-
 cartridge sha256:2bd744ff0d76653b9e218f6cea37f86bbdc6bc9b7a816c5fa236594ed1eb496a
   name:Back to the Future (USA)
   cheat
@@ -3291,39 +3205,6 @@ cartridge sha256:b9434d2f359f6e464da36fbcf6d9eb794b7edff03b89467d1609158f13bfef5
     description:Start with 9 lives
     code:8090/03/09
 
-cartridge sha256:f93163a51f4a671c5f4da390d4d286d6d8440d87dfe24285c40ed73dc422bf7d
-  name:Bee 52 (USA) (Unl)
-  cheat
-    description:Invincibility
-    code:e375/f0/d0
-  cheat
-    description:Invincibility (alt)
-    code:e1f3/85/a5
-  cheat
-    description:Infinite lives
-    code:cdd1/ce/ad
-  cheat
-    description:Hit anywhere - sting attack
-    code:e321/d0/50+e322/3b/18
-  cheat
-    description:Keep pick-ups
-    code:fe2a/20/ad
-  cheat
-    description:Don't get stunned
-    code:d65e/d0/24
-  cheat
-    description:Fly quicker
-    code:ceff/30/24+cf1b/10/24
-  cheat
-    description:Start with 1 life
-    code:fc24/03/01
-  cheat
-    description:Start with 6 lives
-    code:fc24/03/06
-  cheat
-    description:Start with 9 lives
-    code:fc24/03/09
-
 cartridge sha256:2366af9fc0512d39bfa6e908b4caa12be3d21225af49274ffe2ff51cf0b9c1e6
   name:Best of the Best - Championship Karate (USA)
   cheat
@@ -3414,36 +3295,6 @@ cartridge sha256:2366af9fc0512d39bfa6e908b4caa12be3d21225af49274ffe2ff51cf0b9c1e
     description:Start with 70 reflex points
     code:8003/14/46
 
-cartridge sha256:18c134f8cc7effc0b90dcca86a27c305cbd7dadfb159689c89790c7fe4ff9b77
-  name:Bible Adventures (USA) (v1.4) (Unl)
-  cheat
-    description:Infinite health
-    code:dae4/9d/bd
-
-cartridge sha256:b56f867ad6b067f9ca7e46afb8e7a953fa281404232e2497c88e43448a2c3a57
-  name:Bible Adventures (USA) (v1.3) (Unl)
-  cheat
-    description:Infinite health
-    code:dae8/9d/bd
-
-cartridge sha256:981b39b22c9b17055c90a612b9c8ea6711541ff5196018043f3516ed238f3ce9
-  name:Bible Adventures (USA) (v1.2) (Unl)
-  cheat
-    description:Infinite health
-    code:dafe/9d/bd
-
-cartridge sha256:88ee64119746de659f70f3d459c62dd2af3b21f29f5064ea14f0fb03904cbcfe
-  name:Bible Adventures (USA) (v1.1) (Unl)
-  cheat
-    description:Infinite health
-    code:daa3/9d/bd
-
-cartridge sha256:2807c405f072a1e828cbdd4812822ec301979472fd9b8c6225aa4d1dca89613c
-  name:Bible Adventures (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:d61c/9d/bd
-
 cartridge sha256:32fa00d52f39b053c30061d6789944fc61c0c88c885bd8248ff5771fd2f78ae6
   name:Bigfoot (USA)
   cheat
@@ -3561,7 +3412,7 @@ cartridge sha256:aeb61fd5cf5a5ed73344c46a43f8a8d539f601ff57e8f56c49bc1caea4ab3d9
     description:Don't take damage from spikes
     code:ae72/ce/ee
   cheat
-    description:Don't take damange from bullets and collisions in sub-game
+    description:Don't take damage from bullets and collisions in sub-game
     code:9138/ce/ad
   cheat
     description:Hit anywhere
@@ -4209,15 +4060,6 @@ cartridge sha256:fde81fc5af055819700842db8650077d64b853f95b3542bf12f039a6df48115
     description:Start in Las Vegas
     code:836d/85/86+836c/00/04
 
-cartridge sha256:3bcce1ff03b55c20eeaefa44f35f19b3f06b3ff88a86ed51968bad9bd44d9144
-  name:Bubble Bath Babes (USA) (Unl)
-  cheat
-    description:Infinite credits
-    code:930b/c6/a5
-  cheat
-    description:View slideshow
-    code:8045/01/08+892a/85/e6+892b/64/88+8935/0b/0c
-
 cartridge sha256:31523322db8f94e7244f6e2d958692a412c1395fc744601d83d1e5111eff9042
   name:Bubble Bobble (USA)
   cheat
@@ -4773,48 +4615,6 @@ cartridge sha256:6d694349435603c0dcd7645081b0761e109f3994b30f9d822586c991d93510d
     description:Have 99 Red Gems - Hawkeye, 1P mode
     code:03de/63
 
-cartridge sha256:935aa637ca8fb0ec4e0f3f09881c46c134b9a5821707e35899d8a7eedb17c6c3
-  name:Captain Comic - The Adventure (USA) (Unl)
-  cheat
-    description:Invincibility
-    code:ec00/ad
-  cheat
-    description:Infinite energy
-    code:ec06/bd
-  cheat
-    description:Infinite lives
-    code:e702/ad
-  cheat
-    description:Max blast level
-    code:0316/09
-  cheat
-    description:Infinite blast meter
-    code:0318/80
-  cheat
-    description:Have Door Key
-    code:05aa/01
-  cheat
-    description:Have Corkscrew
-    code:05ab/01
-  cheat
-    description:Have Power Boots
-    code:05ac/01
-  cheat
-    description:Have Teleport Wand
-    code:05b3/01
-  cheat
-    description:Have Lantern
-    code:05b4/01
-  cheat
-    description:Have Mystical Gems of Lascorbanos
-    code:05b5/01
-  cheat
-    description:Have Coins of Tenure
-    code:05b6/01
-  cheat
-    description:Have Crown of the Ages
-    code:05b7/01
-
 cartridge sha256:41dd396fbd9b0883b4222b6fbdae09d0e3894eb015e965a0d228f21edd98ad8c
   name:Captain Planet and the Planeteers (USA)
   cheat
@@ -5004,15 +4804,6 @@ cartridge sha256:98ba2353111a0b2cf557b03d8b8c4f5c15d7be56e47182536d710913d62582f
     description:Start with 8 continues
     code:c216/02/08
 
-cartridge sha256:3668454e1904ada7f80ec2f94c4c2d45272d8a8c9e8d3b78ceebae5f890eb164
-  name:Castle of Deceit (USA) (Unl)
-  cheat
-    description:Infinite energy
-    code:dbf1/ce/ad
-  cheat
-    description:Infinite lives
-    code:d51f/ce/ad
-
 cartridge sha256:6887230077d8eefa311d313672c31e7497211e21c5df78aa8d2030ea72471108
   name:Castle of Dragon (USA)
   cheat
@@ -5550,30 +5341,6 @@ cartridge sha256:52451a89296cfcb006beb6363ddc8486fcc88154338cbec778a846056c522f5
     description:Infinite magic energy
     code:0040/ff
 
-cartridge sha256:c20a8cc1b2dacb8a45e706b5763ac6c82c17b4ee4fb547ba4a853e4aabd6e35c
-  name:Challenge of the Dragon (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:e252/9d/ad
-  cheat
-    description:Infinite lives
-    code:e49a/99/b9
-  cheat
-    description:Always have Bombs
-    code:eca6/d0/50
-
-cartridge sha256:7f4b9307e228c737b5f6e4ef3efb40438aa2024b95b29f9aabf18a15af6ed185
-  name:Challenge of the Dragon (Asia) (PAL) (Unl)
-  cheat
-    description:Invincibility
-    code:a079/f0/60
-  cheat
-    description:Infinite health
-    code:a120/c6/a5
-  cheat
-    description:Infinite lives
-    code:8f1a/c6/a9
-
 cartridge sha256:d5b039637a2315458f71ec57a287f93b3532e6243b712b55767f07dc83c5a3c9
   name:Championship Pool (USA)
   cheat
@@ -5601,27 +5368,6 @@ cartridge sha256:a8f18eb52126cdf3d004877f8c4c315ddf15f823f13f42b0154da17db21ecdd
     description:Drive a short distance to finish lap
     code:cb5d/20/00
 
-cartridge sha256:ebdd748cd488c4acdc5d2c7321de692c1ab0b37044cf0c6ea043457176dbd306
-  name:Cheetahmen II (USA) (Unl)
-  cheat
-    description:Infinite health - level 1 and 2
-    code:a3bc/ce/ad
-  cheat
-    description:Infinite health - level 3
-    code:a3dc/ce/ad
-  cheat
-    description:Infinite health - level 4
-    code:a384/ce/ad
-  cheat
-    description:Infinite lives - level 1 and 2
-    code:b378/ce/ad
-  cheat
-    description:Infinite lives - level 3
-    code:b30f/ce/ad
-  cheat
-    description:Infinite lives - level 4
-    code:b2ad/ce/ad
-
 cartridge sha256:b705f866955c7d19292b55a9b0f3ec0e970e3f2509c3da15708b7afd879d98ed
   name:Chessmaster, The (USA)
   cheat
@@ -6258,30 +6004,6 @@ cartridge sha256:2be0bd6e64cf2cb47c7b4a2d6bdb5fd4ff9ed1cd5eb6eadb4d56c410c659bdc
     description:Have all adults and children rescued
     code:0757/ff
 
-cartridge sha256:47ebed8be6679468d0627065153520a539b292244b51c54263c027e106b6ef65
-  name:Colorful Dragon (Asia) (PAL) (Unl)
-  cheat
-    description:Invincibility
-    code:9a02/f0/d0
-  cheat
-    description:Infinite lives
-    code:99bc/d6/b5
-  cheat
-    description:Start on level 2
-    code:8037/01/02
-  cheat
-    description:Start on level 5
-    code:8037/01/05
-  cheat
-    description:Start on level 10
-    code:8037/01/0a
-  cheat
-    description:Start on level 15
-    code:8037/01/0f
-  cheat
-    description:Start on level 20
-    code:8037/01/14
-
 cartridge sha256:0512b4aa2220f74e40fe8652b758893fa87efb6c3407808f7dda0e1901017432
   name:Commando (USA)
   cheat
@@ -6774,18 +6496,6 @@ cartridge sha256:ad1e14d08657d99c8b70f779931f62524b4beb529090b82b368925d8b642e40
     description:Infinite lives
     code:06d5/ff
 
-cartridge sha256:9d832956a533292e740be553e0eb46d3a3d449578bcbaa9c7556a31d2b6a594d
-  name:D.J. Boy (Unl)
-  cheat
-    description:Infinite health
-    code:8662/9d/ad
-  cheat
-    description:Infinite time
-    code:8d1f/85/a5
-  cheat
-    description:Infinite lives
-    code:f788/c6/a5
-
 cartridge sha256:4cbf1c1d0be227127513065ccbc8ecf5e5ee61a7a58b6dea79ff01f0eb9f26af
   name:Danny Sullivan's Indy Heat (USA)
   cheat
@@ -7170,30 +6880,6 @@ cartridge sha256:0115356b0791cc8ddcb7d3163d6ef7aa664f3ff4e68dba561ffffb79eefcbca
     description:Slot 6 - Parallel Shot
     code:017b/1a
 
-cartridge sha256:32aeef6bae170d2628d9c678f0b198a61e787a498a995eb374518635f0b55199
-  name:Deathbots (USA) (Rev 1) (Unl)
-  cheat
-    description:Infinite energy
-    code:aa71/9d/bd
-  cheat
-    description:Infinite lives
-    code:a0a5/ce/ad
-  cheat
-    description:Infinite shots
-    code:ae30/99/b9
-
-cartridge sha256:5dac8da44ac4e28bebf3d33c8e00e1fdffcc7baee3ff98bec5a10415d1226791
-  name:Deathbots (USA) (Unl)
-  cheat
-    description:Infinite energy
-    code:aa71/9d/bd
-  cheat
-    description:Infinite lives
-    code:a0a5/ce/ad
-  cheat
-    description:Infinite shots
-    code:ae30/99/b9
-
 cartridge sha256:bf58512dc3bc427d14a6d851445801967cd14f3d02ae236eabceeb7928a55462
   name:Defender II (USA)
   cheat
@@ -8949,15 +8635,6 @@ cartridge sha256:7026334a7e8742b61b450f4b3b182922c6a69fc723d7cd19c83db365f15e45b
     description:Infinite ammo (alt)
     code:00ba/03
 
-cartridge sha256:262c1fcacd30a7f3018bd33ea6cf3fb86f8d9a77273d4f822268bff2c7deeb9a
-  name:Duck Maze (Australia) (Unl)
-  cheat
-    description:Invincibility
-    code:bbbe/20/ad
-  cheat
-    description:No breaking eggs from falling
-    code:bb88/2a/00
-
 cartridge sha256:8ba8baed01a9fbaf1e9ff29e0c9825db1963ac2aff211d6f1f3bcfd3839e2013
   name:DuckTales (USA)
   cheat
@@ -9078,24 +8755,6 @@ cartridge sha256:54c70628739c9cfab40b8d79555e9076adae34127ef369988ca91635b4a688b
     description:Start with 9 lives
     code:c108/02/08
 
-cartridge sha256:12c92261dfae9c01ce0172cd1e7d70192105ceb350b37c3f1cb2c72f9a10a6b9
-  name:Dudes with Attitude (USA) (Rev 1) (Unl)
-  cheat
-    description:Infinite energy
-    code:dd3d/d6/b5
-  cheat
-    description:Infinite time
-    code:d73d/c6/a5
-
-cartridge sha256:99bba29bd92942f64d8a0beda7df3d8bff1ddcebcd3172eec16009fcb4a8bd3e
-  name:Dudes with Attitude (USA) (Unl)
-  cheat
-    description:Infinite energy
-    code:dd3d/d6/b5
-  cheat
-    description:Infinite time
-    code:d73d/c6/a5
-
 cartridge sha256:c613c10e32b93dbc402356273d698efa14814a51b0339d6d7aacdfb639a7acd7
   name:Dungeon Magic - Sword of the Elements (USA)
   cheat
@@ -9291,15 +8950,6 @@ cartridge sha256:e9f4c9d1b7c66c6af83f2db5d4f704cf5f4b3c86e26a49c05539237807d8875
     description:Press Start to complete current race (uses your race position for the verdict)
     code:ca59/03/00+ca58/b1/52
 
-cartridge sha256:9e3c5574e31cbf74146808df930a70856d7196ec581e40cae3061743504bfba2
-  name:Exodus - Journey to the Promised Land (USA) (v4.0) (Unl)
-  cheat
-    description:Infinite lives
-    code:a834/d6/a5
-  cheat
-    description:Infinite time
-    code:ddfc/c6/a5
-
 cartridge sha256:e9aab85fd91822b9dc7a89997eda3415e45a07fe21580c0df4765ce392e63824
   name:F-1 Race (Japan)
   cheat
@@ -9315,18 +8965,6 @@ cartridge sha256:e9aab85fd91822b9dc7a89997eda3415e45a07fe21580c0df4765ce392e6382
     description:Don't lose speed when skidding in the road
     code:c38f/85/a5
 
-cartridge sha256:3fd39ba2cdd6e220b07050d752a2c67d4a0f16a72ea9e519adf7390721cd9bdd
-  name:F15 City War (USA) (v1.1) (Unl)
-  cheat
-    description:Infinite lives
-    code:00e4/09
-
-cartridge sha256:0e3db714b82795111afa386f32534ece968d0f8ccb63dc70189d2010dc77a2a7
-  name:F15 City War (USA) (v1.0) (Unl)
-  cheat
-    description:Infinite lives
-    code:00e4/09
-
 cartridge sha256:bf4b9f8706814e9164971a3c32535bb2ec718232cf05decda785770fa949d396
   name:F-15 Strike Eagle (USA)
   cheat
@@ -9375,75 +9013,6 @@ cartridge sha256:0de5af54fd433bc6678cd8c62b5e6f0a0987c26d64b2081764e66263cf0c658
     description:10 strikes allowed
     code:90dc/03/0a
 
-cartridge sha256:e0b124ddd8ac7be9e0f0b14679a089c475646fe97425fea36674d75a0f481461
-  name:Fantastic Adventures of Dizzy, The (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:d0e0/c6/a5
-  cheat
-    description:Spiders, bats, ants and rats do no damage
-    code:f261/08/00
-  cheat
-    description:Play bubble sub-game only
-    code:a531/0e/7f
-  cheat
-    description:Play river sub-game only
-    code:a531/0e/7e
-  cheat
-    description:Play mine sub-game only
-    code:a531/0e/7d
-  cheat
-    description:Play puzzle sub-game ony
-    code:a531/0e/7a
-  cheat
-    description:Start with 10 stars instead of 100
-    code:fac6/64/0a
-  cheat
-    description:Start with 10 lives
-    code:8012/02/09
-
-cartridge sha256:ad14301747e0ae0f9b941c6002102d69916ca5e87b355156ab79311ce8dd7236
-  name:Fantasy Zone (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:e60f/c6/a9
-  cheat
-    description:Keep bought weapon for a life
-    code:e881/c6/a9
-  cheat
-    description:Keep bought weapon until next shop visit
-    code:e881/c6/a9+e618/85/c9
-  cheat
-    description:Autofire on all weapons
-    code:ee1c/01/00
-  cheat
-    description:Start with 1 life
-    code:e929/03/01
-  cheat
-    description:Start with 6 lives
-    code:e929/03/06
-  cheat
-    description:Start with 9 lives
-    code:e929/03/09
-  cheat
-    description:Start on level 2
-    code:e75f/00/01
-  cheat
-    description:Start on level 3
-    code:e75f/00/02
-  cheat
-    description:Start on level 4
-    code:e75f/00/03
-  cheat
-    description:Start on level 5
-    code:e75f/00/04
-  cheat
-    description:Start on level 6
-    code:e75f/00/05
-  cheat
-    description:Start on level 7
-    code:e75f/00/06
-
 cartridge sha256:6f23f245b9edc5af0c07fab9e12f5c0571ea0f52413e4ce6ad36e2f57ddf4097
   name:Faria - A World of Mystery & Danger! (USA)
   cheat
@@ -9702,18 +9271,6 @@ cartridge sha256:179bd9c16fc5b85168fecac685045ed58f6bec5a51363babb7aaaaceb6fa093
     description:Infinite health
     code:d68b/85/a5
 
-cartridge sha256:2ae778c5a59fac650fa97e93d883381dbf96c5a0ad2c1db94fd822663904f7e5
-  name:Final Combat (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite health
-    code:a6d0/8d/ad+c794/8d/ad
-  cheat
-    description:Infinite lives
-    code:bb61/d6/a5
-  cheat
-    description:Infinite time
-    code:9d79/ce/ad
-
 cartridge sha256:fa456d852372173ea31b192459ba1a2026f779df67793327ba6e132476c1d034
   name:Final Fantasy (USA)
   cheat
@@ -10140,39 +9697,6 @@ cartridge sha256:5f21fadd084947d11224d1f37218a504bd75f7c6f17212f638a6917ba8a96f9
     description:Start with 65,534 Fire
     code:dfc4/81/fe+dfc5/09/ff
 
-cartridge sha256:9a0cc935c7d8452eff5b90f591bb6390d04362545ecd66b4be67a875ad63dc73
-  name:Fire Dragon (Asia) (Unl)
-  cheat
-    description:One fireball needed to finish the level
-    code:034f/04
-  cheat
-    description:Start on stage 50
-    code:034d/32
-
-cartridge sha256:3f5ed8b5207ff10ef490e7533bdd8419e5266101d4049d7689c01b5b352a4547
-  name:Fire Hawk (USA) (Unl)
-  cheat
-    description:Invincibility
-    code:ae19/d0/a9
-  cheat
-    description:Start with 1 life
-    code:8019/03/01
-  cheat
-    description:Start with 6 lives
-    code:8019/03/06
-  cheat
-    description:Start with 9 lives
-    code:8019/03/09
-  cheat
-    description:Infinite Missiles
-    code:04da/1f
-  cheat
-    description:Infinite ammo
-    code:04dc/1f
-  cheat
-    description:Infinite fuel
-    code:04f4/26
-
 cartridge sha256:db16f0a5cb05dfa9344e0ae459f6c44fac7c28d4a8ecd47d3418053ab16c8a62
   name:Fire 'n Ice (USA)
   cheat
@@ -10872,33 +10396,6 @@ cartridge sha256:9e65e4d55123612c5eb05b332e48fd975a187d706a3fd44b62125e1ae48af02
     description:Start with 1 life
     code:effd/05/01
 
-cartridge sha256:023ff157d96a8efc847c7d7cbe89574091fe099996e6283c63e3fb58918f3502
-  name:Gaiapolis (Asia) (Unl)
-  cheat
-    description:Invincibility
-    code:8e47/f0/d0
-  cheat
-    description:Infinite time
-    code:c93e/c6/a5
-  cheat
-    description:Infinite credits
-    code:cea5/ce/ad
-  cheat
-    description:Hit anywhere
-    code:9a34/b0/50+9a35/24/18+9988/b0/50+a486/74/b8+a485/d9/4c+a487/05/a4+9989/58/32
-  cheat
-    description:Get items from anywhere
-    code:9a72/b0/50+9a73/29/1f
-
-cartridge sha256:a636a947acf1ef0b50e66d31699b64aa4f3b4865e2f2031385780974fb6d8c91
-  name:Galactic Crusader (USA) (Unl)
-  cheat
-    description:Invincibility
-    code:f13e/f0/d0
-  cheat
-    description:Infinite lives
-    code:debb/c6/a6
-
 cartridge sha256:df49cc788fff36881fcf1d1cb22281d305260d4d8fbbe07ca2c4d699fe54843a
   name:Galaga - Demons of Death (USA)
   cheat
@@ -11067,57 +10564,6 @@ cartridge sha256:a2039efb5b5b8d4941c31ae0977dacccec5aaa72fe307ae36af2a454d30d9e2
     description:Start with max 50mm ammo after mission 5
     code:a105/c8/ff
 
-cartridge sha256:fbc976422ca910d9391060898c8b58694f19b6e53a68bd33c457fb38dac1e5c6
-  name:Gauntlet (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:8f70/95/b5+9861/95/b5
-  cheat
-    description:Infinite keys
-    code:ab1e/00/09+ab21/a5/85
-  cheat
-    description:Infinite time in puzzle and treasure rooms
-    code:989f/c6/ea
-  cheat
-    description:Infinite time in puzzle and treasure rooms (alt)
-    code:00c0/1e
-  cheat
-    description:Have all power-ups - P1
-    code:00ac/3f
-  cheat
-    description:Have all power-ups - P2
-    code:00ad/3f
-  cheat
-    description:Have Invisibility - P1
-    code:00aa/01
-  cheat
-    description:Have Invisibility - P2
-    code:00ac/01
-  cheat
-    description:Have Invulnerability - P1
-    code:00aa/20
-  cheat
-    description:Have Invulnerability - P2
-    code:00ac/20
-  cheat
-    description:Have Reflective shot - P1
-    code:00aa/04
-  cheat
-    description:Have Reflective Shot - P2
-    code:00ac/04
-  cheat
-    description:Have Repulsiveness - P1
-    code:00aa/02
-  cheat
-    description:Have Repulsiveness - P2
-    code:00ac/02
-  cheat
-    description:Have Super Shot - P1
-    code:00aa/10
-  cheat
-    description:Have Super Shot - P2
-    code:00ac/10
-
 cartridge sha256:fd2a8520314fb183e15fd62f48df97f92eb9c81140da4e6ab9ff0386e4797071
   name:Gauntlet (USA)
   cheat
@@ -12312,18 +11758,6 @@ cartridge sha256:bd5c7925e616da879ee63ac4ac2004af26e20ae36a494247e704d41440ac971
     description:Invincibility
     code:f6d9/f0/d0+f6d6/ad/8d
 
-cartridge sha256:6e2b0e222eb8dba29c0ca363f1d7d59ed1fa307bafc150b5c8e1dd13638555a6
-  name:Happy Pairs (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite tries
-    code:b04a/c6/a5
-  cheat
-    description:Infinite time
-    code:beaf/c6/a5
-  cheat
-    description:Infinite autos
-    code:b175/c6/a5
-
 cartridge sha256:07bfd5bf6d3e5cea26d0a521e7d599d67a4b794c5efa66e4189877c1361aad47
   name:Harlem Globetrotters (USA)
   cheat
@@ -12417,12 +11851,6 @@ cartridge sha256:429c833eb61c0728b0d9335c61f4bd8d3fb19c3bf8a18564917bf75526f104a
     description:Infinite time
     code:8ac9/85/a5
 
-cartridge sha256:1c8e9b6c4c57850d4ab1dea011e0226970034a46fa29fab1d370c01fac90538d
-  name:Hell Fighter (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite lives
-    code:ad5f/ce/ad+ad62/ce/ad
-
 cartridge sha256:680a56e038176c7b8deca9fb910b26b097cadd58fa553ea29f3c9836c9a4e11b
   name:Hello Kitty no Ohanabatake (Japan)
   cheat
@@ -14085,30 +13513,6 @@ cartridge sha256:509f04b745d11b8d83afb42f084179a6f2ebc87f647927432a647f0e7ee51bb
     description:One hit kills on bosses
     code:064d/00
 
-cartridge sha256:ec54ed32302aaeb2fa6e0d7e2ca3ea2d8df888e77859e158298ecb2fa322178e
-  name:Joshua & the Battle of Jericho (USA) (v6.0) (Unl)
-  cheat
-    description:Exit always open
-    code:075f/05+003f/ff
-  cheat
-    description:Infinite Bombs
-    code:003e/01
-  cheat
-    description:Immune to explosions (disable at end of level)
-    code:004b/c2
-
-cartridge sha256:5b7afe0ff1fcf538fec60d085aa759522a2ab1cce511a6f210b672a256a87a8a
-  name:Joshua & the Battle of Jericho (USA) (v5.0) (Unl)
-  cheat
-    description:Exit always open
-    code:075f/05+003f/ff
-  cheat
-    description:Infinite Bombs
-    code:003e/01
-  cheat
-    description:Immune to explosions (disable at end of level)
-    code:004b/c2
-
 cartridge sha256:0417d7caec593852823b94f5520caea3745a28c9dac68e30d2c5e6f5545a9757
   name:Journey to Silius (USA)
   cheat
@@ -14226,15 +13630,6 @@ cartridge sha256:0417d7caec593852823b94f5520caea3745a28c9dac68e30d2c5e6f5545a975
     description:Start on stage 5 (final stage)
     code:0170/04
 
-cartridge sha256:4b00fa0ae20030af3406e95eb08f42ec473ec03d9063798ccd6c249648409af3
-  name:Journey to the West (Asia) (Unl)
-  cheat
-    description:Hit anywhere
-    code:b445/4c/00+b42c/65/00
-  cheat
-    description:Climb anywhere (except in boss fights)
-    code:a55c/29/a9+a552/60/ea
-
 cartridge sha256:8471a6b7c7c7d6c7be0ee278778e2d25dc91462db22643395787eaaeb6e320c1
   name:Joust (USA)
   cheat
@@ -14256,36 +13651,6 @@ cartridge sha256:8471a6b7c7c7d6c7be0ee278778e2d25dc91462db22643395787eaaeb6e320c
     description:Start on last level reached
     code:c0de/85/24+c0dc/85/24+c0e4/85/24
 
-cartridge sha256:8d36c0923103f370eb9fab5caeb2a8307cd1c7a30030db69bd5bc4f5ca46b1d2
-  name:Jovial Race (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite lives
-    code:9c7b/ce/ad
-  cheat
-    description:Start with 5 lives
-    code:836a/03/05
-  cheat
-    description:Start with 10 lives
-    code:836a/03/0a
-  cheat
-    description:Sart with 100 lives
-    code:836a/03/64
-
-cartridge sha256:a7bf6adcd838f055405963741dd3368730b0f9dc125ae7071832a9305a4c7292
-  name:Jovial Race (Unknown) (Unl)
-  cheat
-    description:Infinite lives
-    code:9c7b/ce/ad
-  cheat
-    description:Start with 5 lives
-    code:836a/03/05
-  cheat
-    description:Start with 10 lives
-    code:836a/03/0a
-  cheat
-    description:Sart with 100 lives
-    code:836a/03/64
-
 cartridge sha256:e5bcb8838f567f485c6f872e9695d2e3ef676f4bcda1c32d51d56008efb96e7a
   name:Jungle Book, The (USA)
   cheat
@@ -14967,51 +14332,6 @@ cartridge sha256:a8f2987d83253adb573aa760c1bb926e951f2c2d72daff4e2d2e125ec1a181c
     description:Start with 9 lives
     code:e929/02/09
 
-cartridge sha256:6cc3a973288a4c3c96a967bdf1be74eee909d3f5eb16ce0b405f20ce565c66cc
-  name:King Neptune's Adventure (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:d6ae/ce/ad+d4b3/ce/ad+d675/8d/ad
-  cheat
-    description:Infinite lives
-    code:ce5e/ce/ad
-  cheat
-    description:Infinite Bubble Bombs
-    code:f9a5/c6/a5
-  cheat
-    description:Start with all treasures (removes all items from level)
-    code:c4b3/f8/00
-  cheat
-    description:Start with 99 Bubble Bombs and Money
-    code:c4bc/00/63
-  cheat
-    description:Start with 99 Seahorses and Keys
-    code:cd3d/00/63
-
-cartridge sha256:3249d267ca17098077bb94eee437f354066971bc03c0d06eada05efd92b0fa52
-  name:King of Kings, The (USA) (v5.0) (Unl)
-  cheat
-    description:Infinite health
-    code:0512/06
-
-cartridge sha256:dc6859332ca69a8361bb3eb8ba1ff638f4bbbc7837a3a9f8a474e05f6bc379ea
-  name:King of Kings, The (USA) (v1.3) (Unl)
-  cheat
-    description:Infinite health
-    code:0512/06
-
-cartridge sha256:9ae715b6f2400d21f5d1ec426ecf310aa68ca46f3b37b37d5ae115f34049676b
-  name:King of Kings, The (USA) (v1.2) (Unl)
-  cheat
-    description:Infinite health
-    code:0512/06
-
-cartridge sha256:d1002d407b544d70b4ddf4515665f6e18ac9c8ee2efd4be184e5240119fd6f70
-  name:King of Kings, The (USA) (v1.1) (Unl)
-  cheat
-    description:Infinite health
-    code:0512/06
-
 cartridge sha256:be97bca71e1bf099ef0f6ff91aed506df7b0506433c76e5deccea7b130e3a20f
   name:King's Knight (USA)
   cheat
@@ -15222,33 +14542,6 @@ cartridge sha256:ef63df6bcbc7e13dace53f106a247485a09409799b99c8415e934ba532cdaa5
     description:Everyone including computer has 255 skill - select the middle team
     code:a05e/38/2c+a05e/fd/2c
 
-cartridge sha256:28b3f1dde1488dd83422da47300d2e31ffce811bf2be37bf6d510019c2289f40
-  name:Klax (USA) (Unl)
-  cheat
-    description:Infinite drops
-    code:bca3/e6/a5
-  cheat
-    description:When starting on level 6, 0 drops allowed
-    code:8c7f/04/01
-  cheat
-    description:When starting on level 6, 5 drops allowed
-    code:8c7f/04/05
-  cheat
-    description:When starting on level 11, 0 drops allowed
-    code:8c92/05/01
-  cheat
-    description:When starting on level 11, 3 drops allowed
-    code:8c92/05/03
-  cheat
-    description:Start with 0 drops allowed
-    code:8c6d/03/01
-  cheat
-    description:Start with 5 drops allowed
-    code:8c6d/03/05
-  cheat
-    description:Level select
-    code:0000/00
-
 cartridge sha256:b66538543d3c4c74448e896130081c39112b14898beffbe95137a410394e5dc9
   name:Knight Rider (USA)
   cheat
@@ -15915,7 +15208,7 @@ cartridge sha256:ec0d4ebf6d2fcecd1d95fef7329954efe79676959bc281ea908b226459bc6dc
     description:Infinite Keys
     code:066e/03
   cheat
-    description:Infinite Rupies
+    description:Infinite Rupees
     code:066d/ff
   cheat
     description:Enemies don't shoot anything
@@ -16056,7 +15349,7 @@ cartridge sha256:085e5397a3487357c263dfa159fb0fe20a5f3ea8ef82d7af6a7e848d3b9364e
     description:Infinite Keys
     code:066e/03
   cheat
-    description:Infinite Rupies
+    description:Infinite Rupees
     code:066d/ff
   cheat
     description:Enemies don't shoot anything
@@ -16308,27 +15601,6 @@ cartridge sha256:dbd530e6ca07cc4b255b1b885cd5b6b2e23b8d3cac4733c3e4d96acd7d751c2
     description:Have Option
     code:0091/01
 
-cartridge sha256:36769f543b6cfb08c5ef8673a11a7b27264bdd60323a62e9083b3da47eb33a8c
-  name:Lightgun Game 2 in 1 - Cosmocop + Cyber Monster (Asia) (Unl)
-  cheat
-    description:Cosmo Cop - Infinite lives
-    code:cbaf/ce/ad
-  cheat
-    description:Cosmo Cop - Infinite ammo
-    code:cb22/8d/ad
-  cheat
-    description:Cosmo Cop - Infinite energy
-    code:cb68/ce/ad+cb6b/ce/ad
-  cheat
-    description:Cyber Monster - Infinite misses
-    code:9550/ce/60
-
-cartridge sha256:745164dee8e4af6a7150d21e9ef082f56a51b01c5c32f28cdf4cd211bed3714d
-  name:Lightgun Game 2 in 1 - Tough Cop + Super Tough Cop (Asia) (Unl)
-  cheat
-    description:Infinite health
-    code:037a/06
-
 cartridge sha256:cecc797ffc82c5764e89038262c00b325f44afc0d9fc4b5bef295ea227e1dd22
   name:Lion King, The (Europe)
   cheat
@@ -16599,18 +15871,6 @@ cartridge sha256:a5165565263eaf8bdc45a8e6a615704f9bf271cd6d547d22c098c80cbaffd87
     description:Infinite health - K.O. the Mouse
     code:009a/04
 
-cartridge sha256:33c362ea3dbce2ac449e0d877d85904c26fcaf4b197e27b23efe9cbe67f20e15
-  name:Locksmith (Asia) (PAL) (Unl)
-  cheat
-    description:Infinite health
-    code:0573/23
-  cheat
-    description:Infinite time
-    code:056a/01
-  cheat
-    description:Instantly beat puzzle
-    code:0043/ff
-
 cartridge sha256:6c17c7bf2f7466eb43718305a0d74bd75f31b65429bc1fe406c34565e792310c
   name:Lode Runner (USA)
   cheat
@@ -17001,24 +16261,6 @@ cartridge sha256:ab0a43bc7c33f0cdd8acf15c4da967ba2af56431de1a598b9767bd10e78cc8f
     description:Slower timer
     code:da70/3c/70+da65/3c/70
 
-cartridge sha256:2eee5b14a90458088ac18c36352ab605ae4fe452a59f2675937acee0d15e94b6
-  name:Magic Carpet 1001 (Unl)
-  cheat
-    description:Invincibility
-    code:8487/38/60
-
-cartridge sha256:9a5d7367891f4d929fe5e3be5fe2988e3e6c0b0d70b7cd401976f16b3b5f0a9d
-  name:Magic Jewelry (Asia) (Unl)
-  cheat
-    description:Bypass checksum check
-    code:e7b0/d0/24+e7a8/d0/24
-  cheat
-    description:Speed never increases
-    code:ec87/6d/00+ec86/a6/a2
-  cheat
-    description:Disable Game Over
-    code:e7bf/90/24
-
 cartridge sha256:caae56599689d4297c3be1afdc77d5bfc510d47d6e668244c308b9732eb41dea
   name:Magician (USA)
   cheat
@@ -17289,36 +16531,6 @@ cartridge sha256:c9348c4e30ef0bc62c4fd119b5e38d85af493a1eb436c6c229b7a6a52af4268
     description:Get an item after killing one Koopa
     code:b7bc/00/02
 
-cartridge sha256:a385f0bed8d9afd110e649b73084191d80f41728139494f8fcb92d4815cd5197
-  name:Master Chu and the Drunkard Hu (USA) (Unl)
-  cheat
-    description:Invinicibility
-    code:90ed/fe/bd
-  cheat
-    description:Infinite health
-    code:9730/de/bd
-  cheat
-    description:Infinite lives
-    code:972e/d6/b5
-  cheat
-    description:Start on round 2
-    code:8103/01/02
-  cheat
-    description:Start on round 3
-    code:8103/01/03
-  cheat
-    description:Start on round 4
-    code:8103/01/04
-  cheat
-    description:Start on round 5
-    code:8103/01/05
-  cheat
-    description:Start on round 6
-    code:8103/01/06
-  cheat
-    description:Start on round 7
-    code:8103/01/07
-
 cartridge sha256:c8486cd1a35950007a3ba671a128097d780084182a854d6115ddec7dad56e806
   name:Mechanized Attack (USA)
   cheat
@@ -18240,18 +17452,6 @@ cartridge sha256:2037babe50fed7a13b6f6559914cb81497245c9477592e6f8da183df09a3609
     description:Bosses have no invulnerability time
     code:0640/00
 
-cartridge sha256:741fbfeeec83073cc3d8b407c0ddc9f78a0dc5b52d8196c6222bffb459b73ed1
-  name:Menace Beach (USA) (Unl)
-  cheat
-    description:Infinite health and one hit kills (levels 1-9, 11, 12 only)
-    code:e169/38/e0+e16b/11/f0+e16c/b0/06+e16d/02/ea+e16a/e5/00
-  cheat
-    description:Infinite health and one hit kills (level 10 only)
-    code:e169/38/e0+e16b/11/f0+e16c/b0/06+e16d/02/ea+e16a/e5/01
-  cheat
-    description:Multi-jump
-    code:f441/a5/a9+f442/62/82
-
 cartridge sha256:1152961edf8d484f0e33294ae19fbcac8ab85099e6c8a59f1732c5f17b622885
   name:Mendel Palace (USA)
   cheat
@@ -18594,18 +17794,6 @@ cartridge sha256:77c9100f4d3f291dd751098d3291b14e824cc367696c9167d01051041e08b5c
     description:Infinite time
     code:0565/01
 
-cartridge sha256:2d40d51736c2fa22f0cccf686e92efee3a7ebb8fa4eee5032206bab099a5aaf6
-  name:Mickey Mania 7 (Unl)
-  cheat
-    description:Infinite health
-    code:9186/ce/ad
-  cheat
-    description:Infinite lives
-    code:9507/ce/ad
-  cheat
-    description:Infinite Apples
-    code:9641/ce/ad
-
 cartridge sha256:826ace604eb7a657acedd98cd3479dbe1d3ebb087dd7a1b2ad299ab854c0d519
   name:Mickey Mouse 3 - Yume Fuusen (Japan)
   cheat
@@ -18642,204 +17830,6 @@ cartridge sha256:989243c99d6e58c4fbcc6999473e48a389eba22cf1d3cb95dbe4c8b1f3ce15d
     description:Start with 9 lives
     code:91dd/04/08
 
-cartridge sha256:1df64e9554fb9997ceeab9954b2b7f8aa6206509a15e09298014ba765d87c094
-  name:Micro Machines (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:a6d2/ce/2c
-  cheat
-    description:Qualify every race
-    code:fac5/02/04
-  cheat
-    description:Play with 9 lives
-    code:f7c8/03/09
-  cheat
-    description:Ruff Trux after every race
-    code:fab2/03/01
-  cheat
-    description:Kid out of game after every race
-    code:f857/03/01
-  cheat
-    description:Win Championship race
-    code:fad1/01/04
-  cheat
-    description:Faster Boat acceleration
-    code:801d/05/00
-  cheat
-    description:Faster Sports Car acceleration
-    code:801c/05/00
-  cheat
-    description:Faster Formula 1 acceleration
-    code:801e/05/00
-  cheat
-    description:Faster Turbo Wheels(tm) acceleration
-    code:801f/05/00
-  cheat
-    description:Faster 4x4 acceleration
-    code:8020/05/00
-  cheat
-    description:Faster Tank acceleration
-    code:8022/02/00
-  cheat
-    description:Faster Chopper acceleration
-    code:8023/05/00
-  cheat
-    description:Quicker Boat deceleration
-    code:8026/09/00
-  cheat
-    description:Quicker Sports Car deceleration
-    code:8025/09/00
-  cheat
-    description:Quicker Formula 1 deceleration
-    code:8027/09/00
-  cheat
-    description:Quicker Turbo Wheels deceleration
-    code:8028/09/00
-  cheat
-    description:Quicker 4x4 deceleration
-    code:8029/09/00
-  cheat
-    description:Quicker Tank deceleration
-    code:802b/02/00
-  cheat
-    description:Quicker Chopper deceleration
-    code:802c/0f/00
-  cheat
-    description:Higher bounce for Boats
-    code:8002/01/07
-  cheat
-    description:Higher bounce for Sports cars
-    code:8001/01/05
-  cheat
-    description:Higher bounce for Formula 1's
-    code:8003/01/07
-  cheat
-    description:Higher bounce for Turbo Wheels
-    code:8004/01/07
-  cheat
-    description:Higher bounce for 4x4's
-    code:8005/01/07
-  cheat
-    description:Higher bounce for Tanks
-    code:8007/01/07
-  cheat
-    description:Drive through vehicles
-    code:8dbd/19
-  cheat
-    description:Start on race 5
-    code:f7cd/00/04
-  cheat
-    description:Start on race 10
-    code:f7cd/00/09
-  cheat
-    description:Start on race 15
-    code:f7cd/00/0e
-  cheat
-    description:Start on race 20
-    code:f7cd/00/13
-  cheat
-    description:Start on race 25 (Final Race)
-    code:f7cd/00/18
-
-cartridge sha256:31b8afd6e571d3ce8ddea49b813ceda2d350df3c84ceb5d8dd2c7a3a6de5ba88
-  name:Micro Machines (USA) (Aladdin Compact Cartridge) (Unl)
-  cheat
-    description:Infinite lives
-    code:a67c/ce/2c
-  cheat
-    description:Qualify every race
-    code:fa25/02/04
-  cheat
-    description:Play with 9 lives
-    code:f728/03/09
-  cheat
-    description:Ruff Trux after every race
-    code:fa12/03/01
-  cheat
-    description:Kid out of game after every race
-    code:f7b7/03/01
-  cheat
-    description:Win Championship race
-    code:fa31/01/04
-  cheat
-    description:Faster Boat acceleration
-    code:801d/05/00
-  cheat
-    description:Faster Sports Car acceleration
-    code:801c/05/00
-  cheat
-    description:Faster Formula 1 acceleration
-    code:801e/05/00
-  cheat
-    description:Faster Turbo Wheels(tm) acceleration
-    code:801f/05/00
-  cheat
-    description:Faster 4x4 acceleration
-    code:8020/05/00
-  cheat
-    description:Faster Tank acceleration
-    code:8022/02/00
-  cheat
-    description:Faster Chopper acceleration
-    code:8023/05/00
-  cheat
-    description:Quicker Boat deceleration
-    code:8026/09/00
-  cheat
-    description:Quicker Sports Car deceleration
-    code:8025/09/00
-  cheat
-    description:Quicker Formula 1 deceleration
-    code:8027/09/00
-  cheat
-    description:Quicker Turbo Wheels deceleration
-    code:8028/09/00
-  cheat
-    description:Quicker 4x4 deceleration
-    code:8029/09/00
-  cheat
-    description:Quicker Tank deceleration
-    code:802b/02/00
-  cheat
-    description:Quicker Chopper deceleration
-    code:802c/0f/00
-  cheat
-    description:Higher bounce for Boats
-    code:8002/01/07
-  cheat
-    description:Higher bounce for Sports cars
-    code:8001/01/05
-  cheat
-    description:Higher bounce for Formula 1's
-    code:8003/01/07
-  cheat
-    description:Higher bounce for Turbo Wheels
-    code:8004/01/07
-  cheat
-    description:Higher bounce for 4x4's
-    code:8005/01/07
-  cheat
-    description:Higher bounce for Tanks
-    code:8007/01/07
-  cheat
-    description:Drive through vehicles
-    code:8dbd/19
-  cheat
-    description:Start on race 5
-    code:f72d/00/04
-  cheat
-    description:Start on race 10
-    code:f72d/00/09
-  cheat
-    description:Start on race 15
-    code:f72d/00/0e
-  cheat
-    description:Start on race 20
-    code:f72d/00/13
-  cheat
-    description:Start on race 25 (Final Race)
-    code:f72d/00/18
-
 cartridge sha256:a2b4b0fd54028f1bbbdef152d8f2a172270b60162802d298accd0c698d258c3d
   name:Mighty Bomb Jack (USA)
   cheat
@@ -19050,48 +18040,6 @@ cartridge sha256:ef8ccb38760604f5122e034ae0c4591362364632fe2dc2fa10f2660e15bd368
     description:Max level
     code:006b/05
 
-cartridge sha256:5327792d8b5392cd5cec95ee254fc9f729777283c80f3d1f94d5147f3be73652
-  name:MiG 29 - Soviet Fighter (USA) (Unl)
-  cheat
-    description:Keep weapon after death
-    code:db59/c6/a5
-  cheat
-    description:Start with best weapon
-    code:c179/00/03
-  cheat
-    description:More time to refuel
-    code:908a/00/ff
-  cheat
-    description:Less time to refuel
-    code:908a/00/03
-  cheat
-    description:Start with 1 life
-    code:c174/03/00
-  cheat
-    description:Start with 6 lives
-    code:c174/03/05
-  cheat
-    description:Start with 9 lives
-    code:c174/03/08
-  cheat
-    description:Start with 255 lives
-    code:c174/03/fe
-  cheat
-    description:Start on mission 2
-    code:911f/a5/a9+9120/15/01+9122/51/da
-  cheat
-    description:Start on mission 3
-    code:911f/a5/a9+9120/15/02+9122/51/da
-  cheat
-    description:Start on mission 4
-    code:911f/a5/a9+9120/15/03+9122/51/da
-  cheat
-    description:Start on mission 5
-    code:911f/a5/a9+9120/15/04+9122/51/da
-  cheat
-    description:Start on mission 6
-    code:911f/a5/a9+9120/15/05+9122/51/da
-
 cartridge sha256:2ebab487204c42b0d9cf19c37bdc395e396226ca3eaa664907bf7f8216b3c4d3
   name:Mike Tyson's Punch-Out!! (Japan, USA) (Rev A)
   cheat
@@ -19428,15 +18376,6 @@ cartridge sha256:6eea421f6c0738ff3abfd6e059e91c3409eedd2150093d3e01d49dfaad4dbf8
     description:Have Vest
     code:07a3/fa
 
-cartridge sha256:61e4e0a38f23eec3e931f21ad89cc901ca9f709dccfec952ed0e478172f04441
-  name:Mission Cobra (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:f17a/64/00+dd0e/64/00+db21/64/00
-  cheat
-    description:Infinite health (alt)
-    code:009a/63
-
 cartridge sha256:6b04b87ab30e885974844ad693cc39ba8c87e7e650e1f9cf22a054e0a385df4e
   name:Mission Impossible (USA)
   cheat
@@ -19656,14 +18595,8 @@ cartridge sha256:ce493dcb4ba133d9a31e234a4c446a365bcf98c5f99c13968f1e1c777747ac2
     description:Multi-jump
     code:96dc/06/60+96d6/1c/04+96dd/98/97+977b/8d/ad
 
-cartridge sha256:66cb74efa264a285a541277b935d4b6cc9c49a18653bce90b65f0de98b05aec0
-  name:Moon Ranger (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:d6bc/ce/ad
-
 cartridge sha256:aa0fe1b0b1e0c3a0a01695f1914fbb5e92649db33b74a9bdcb51be1481221f49
-  name:Mother (Japan)
+  name:MOTHER (Japan)
   cheat
     description:Start a new game with $1024
     code:be11/00/04
@@ -19758,63 +18691,6 @@ cartridge sha256:f7cc35a736ffd7804056b92ab92bfef02ded95d999ac126b680e87b573f1818
     description:Start on stage 10
     code:003e/0a
 
-cartridge sha256:3ec56ffa686a0e45dc5dfa02d3216b6c9302177b01a0bba506739a436c4ba730
-  name:Ms. Pac-Man (USA) (Unl)
-  cheat
-    description:Infinite lives for both players in alternating type games
-    code:82fe/c6/a5
-  cheat
-    description:Infinite lives for P2 only, in other type games
-    code:8303/ce/ad
-  cheat
-    description:Super fast turbo speed
-    code:f79d/4a/ea
-  cheat
-    description:Pinky out of game
-    code:863a/02/00
-  cheat
-    description:Sue out of game
-    code:865a/02/00
-  cheat
-    description:Start with 1 life - both players
-    code:86b7/02/00
-  cheat
-    description:Start with 6 lives - both players
-    code:86b7/02/05
-  cheat
-    description:Start with 9 lives - both players
-    code:86b7/02/08
-  cheat
-    description:Start with 1 life for P2 in 2P cooperative and competitive games
-    code:86ba/8d/8c
-  cheat
-    description:Only pink ghost escapes from center
-    code:002a/1b+023d/0e+002c/0b
-  cheat
-    description:Max score - P1
-    code:00d0/09+00d1/99+00d2/99
-  cheat
-    description:Infinite lives
-    code:00d4/09
-  cheat
-    description:Ghosts stay blue until eaten
-    code:00c5/01
-  cheat
-    description:Start on level 2
-    code:0127/01
-  cheat
-    description:Start on level 3
-    code:0127/02
-  cheat
-    description:Start on level 4
-    code:0127/03
-  cheat
-    description:Start on level 5
-    code:0127/04
-  cheat
-    description:Start on level 6
-    code:0127/05
-
 cartridge sha256:80f6f2b9cb2669e876328cf47ad94fd5288adeddaf45dee93087142ff589b6d6
   name:Muppet Adventure - Chaos at the Carnival (USA)
   cheat
@@ -20610,18 +19486,6 @@ cartridge sha256:55c2d10ae1b034b39533f780f6205f736735df1954c0eca6d147cfc13a224f8
     description:5 men on the train
     code:8154/0a/05
 
-cartridge sha256:106a9cd2acc3373bf2fae05158bdf7587d5f645402ba8073aaee65cb8b7b11cd
-  name:Operation Secret Storm (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:e33a/99/b9
-  cheat
-    description:Infinite Gun ammo
-    code:e54f/99/bd
-  cheat
-    description:Infinite health
-    code:0520/17
-
 cartridge sha256:36666e3314ee9e0a340b04ea8427aaefb6df8937425a016e78c26fb1fa77b017
   name:Operation Wolf (USA) (Rev 0A)
   cheat
@@ -20859,57 +19723,6 @@ cartridge sha256:1e60a181e1f89f2249a3e0d44a7765c2cdd9e0446f1671c63bf2c6f6df562d4
     description:Infinite lives
     code:0067/03
 
-cartridge sha256:25506ac6d6413a73249d3ce6a4ecc40048982596e01d778eddb71baca084efa6
-  name:Pac-Man (USA) (Tengen) (Unl)
-  cheat
-    description:Invincibility
-    code:d2c6/f0/24
-  cheat
-    description:Get 8000+ points for eating ghosts
-    code:d2da/a4/a0+d2db/d9/06+d2e6/e6/a5
-  cheat
-    description:Ghosts are re-eatable until Power Pill wears off
-    code:d648/85/a5
-  cheat
-    description:Power pills last longer
-    code:d166/3c/70
-  cheat
-    description:Power pills last extra long
-    code:d166/3c/ff
-  cheat
-    description:Power pills don't last as long
-    code:d166/3c/20
-  cheat
-    description:Power pills don't work
-    code:e022/a5/60
-  cheat
-    description:Only 3 ghosts are edible
-    code:e02f/0f/0d
-  cheat
-    description:Only 2 ghosts are edible
-    code:e02f/0f/09
-  cheat
-    description:Power Pill effect always active
-    code:0088/15
-  cheat
-    description:Infinite lives
-    code:0067/03
-
-cartridge sha256:acc561f57cfd0490fdce649deb16fa9df309bba1695608213a0ff8066d662492
-  name:Pac-Mania (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:d941/c6/a5
-  cheat
-    description:Trapped ghosts
-    code:cfe3/78
-  cheat
-    description:Go through ghosts
-    code:d8b6/95
-  cheat
-    description:Ghosts worth 3200 points
-    code:d88f/01
-
 cartridge sha256:6c47c73eb510fb0f71eeb2a3f5cca7c25eca8678ffe060aa17df6534dbd10ef1
   name:Panic Restaurant (USA)
   cheat
@@ -20970,12 +19783,6 @@ cartridge sha256:6c47c73eb510fb0f71eeb2a3f5cca7c25eca8678ffe060aa17df6534dbd10ef
     description:Start with 60 on timer (1st level only)
     code:f464/63/3c+cf6a/63/3c
 
-cartridge sha256:73f0f7b9150fb080541426cedc87bf528c63393e6112812112e8c1339d9bfbf5
-  name:Panda Prince, The (Shin-Shin) (Unl)
-  cheat
-    description:Infinite lives
-    code:979b/85/a5
-
 cartridge sha256:f1c9c4723190d6be5f1f683ad5fd8cc123abd70d42f486c175a25f1237db6199
   name:Paperboy (USA)
   cheat
@@ -21072,15 +19879,6 @@ cartridge sha256:f0d89b53126513e1df56b46bae3a43b4a4b87543d48974c9087ba9473724980
     description:Infinite Shield on pick-up
     code:64d0/0f
 
-cartridge sha256:f1762c9f40e6e45a123b73a035841768e0132fa82c92f9d066a8718a7f99b6cc
-  name:Pesterminator (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:d799/ce/e6
-  cheat
-    description:Infinite lives
-    code:d0f5/ce/ae
-
 cartridge sha256:1c598fe0b58811b1bedfc6f2cda05f0960b4a6e2770c8a2f73cd6da370ed2448
   name:Phantom Fighter (USA)
   cheat
@@ -21216,18 +20014,6 @@ cartridge sha256:836a6df9f6885b2b09d9daf3cecd67a4e5f36ae0b278a32c296779f067c8694
     description:Infinite Gold - RPG mode (3 of 3)
     code:0084/63
 
-cartridge sha256:7dd47bac196af9874181e86f64402035e255814739828d5d00c03bac8689d40a
-  name:Pipe 5 (Asia) (Unl)
-  cheat
-    description:Infinite time (disable to finish round)
-    code:0080/09
-  cheat
-    description:1 distance needed
-    code:008e/01
-  cheat
-    description:Automatically finish round
-    code:008e/00
-
 cartridge sha256:a57f873ccb2c8842e9ef1a8380c87026a8ef0c6649f1cc02ce0743fae61ea120
   name:Pipe Dream (USA)
   cheat
@@ -21357,18 +20143,6 @@ cartridge sha256:97f56ee3bcb0542996401a65c63a0e91c1c9c71da07f0619975e910946f9540
     description:Start with 9 lives
     code:c81f/09
 
-cartridge sha256:23e457d854d5ce2bb8b81cef9fbbff0164171505a4d2d9e28ecbc2d062c81517
-  name:Popo Team (Asia) (Unl)
-  cheat
-    description:Invincibility
-    code:004f/01
-  cheat
-    description:Infinite lives
-    code:003f/03
-  cheat
-    description:Slower enemies
-    code:004d/01
-
 cartridge sha256:4986c3862a04fcf5b22df58b1182ec2ad636e6083714ac7c069adc1639023ebf
   name:Power Blade (USA)
   cheat
@@ -22035,24 +20809,6 @@ cartridge sha256:5fa346174b6b5a9dc2b5fe113ef8d8ac013a32b26dde6d5dfc9ed631d5e9af2
     description:Start on level 9 round 4
     code:0049/23
 
-cartridge sha256:882a02c538cb097531da74d0ad685f6896dcfb7fa9b1a0cd540b4274968a7c13
-  name:Q Boy (Asia) (Unl)
-  cheat
-    description:Infinite lives
-    code:8f54/ce/ad
-  cheat
-    description:Infinite life
-    code:a9f2/ce/ad
-  cheat
-    description:Invincibility after first hit
-    code:95a7/c6/60
-  cheat
-    description:Infinite Breath Power
-    code:aa8e/ce/ad+aa91/ce/ad
-  cheat
-    description:Infinite Lift Power
-    code:ab22/ce/ad+ab25/ce/ad
-
 cartridge sha256:745050dec23a692e1e759eb3e291f58ad7739fadb3a1308ec8d60085fefaec69
   name:QIX (USA)
   cheat
@@ -22080,174 +20836,6 @@ cartridge sha256:745050dec23a692e1e759eb3e291f58ad7739fadb3a1308ec8d60085fefaec6
     description:Start on Level 20 - 2P game
     code:828c/01/14
 
-cartridge sha256:5dcea6d649f5ab79cf43dde76b92fb53b056fe92c6b49fd41f5158d9af0e9c32
-  name:Quattro Adventure (USA) (Unl)
-  cheat
-    description:Boomerang Kid - Infinite lives
-    code:ce12/ce/ad
-  cheat
-    description:Boomerang Kid - Start with 6 lives
-    code:c611/03/06
-  cheat
-    description:Linus Spacehead - Increase oxygen
-    code:c749/18/20
-  cheat
-    description:Linus Spacehead - Never lose oxygen
-    code:b5b2/01/00
-  cheat
-    description:Linus Spacehead - Never lose life in the water
-    code:c783/c6/a5
-  cheat
-    description:Linus Spacehead - Never lose life in the land
-    code:d325/c6/a5
-  cheat
-    description:Linus Spacehead - Start with 9 lives
-    code:c3c4/03/09
-  cheat
-    description:Super Robin Hood - Invincibility
-    code:f59d/49/60
-  cheat
-    description:Super Robin Hood - Infinite lives
-    code:c5fa/c6/a5
-  cheat
-    description:Super Robin Hood - 9 energy hearts, you may lose some hearts when you pick up new ones
-    code:c603/03/09
-  cheat
-    description:Super Robin Hood - Start with 1 life
-    code:c365/03/01
-  cheat
-    description:Super Robin Hood - Start with 6 lives
-    code:c365/03/06
-  cheat
-    description:Super Robin Hood - Start with 9 lives
-    code:c365/03/09
-  cheat
-    description:Treasure Island Dizzy - Invincible Dizzy Starts you in the Island In The Sky, walk left to arrive at the original starting point -
-    code:d7aa/00/01
-  cheat
-    description:Treasure Island Dizzy - Walk backwards
-    code:e874/a5/a9
-  cheat
-    description:Treasure Island Dizzy - Start with snorkel
-    code:d7bf/00/01
-  cheat
-    description:Treasure Island Dizzy - Start with axe
-    code:d7bf/00/01+f2cd/12/01
-  cheat
-    description:Treasure Island Dizzy - Start with dynamite
-    code:d7bf/00/01+f2cd/12/02
-  cheat
-    description:Treasure Island Dizzy - Start with heavy weight
-    code:d7bf/00/01+f2cd/12/05
-
-cartridge sha256:a537916d210a97e41e669c77f3ebcccb681dc44db4d8b758c2109baf8590d918
-  name:Quattro Arcade (USA) (Unl)
-  cheat
-    description:Go! Dizzy Go! - Always kill monsters
-    code:dbe5/ea+dbe6/ea
-  cheat
-    description:Go! Dizzy Go! - Walk through walls
-    code:d3e3/ea
-  cheat
-    description:Go! Dizzy Go! - Start with 1 life
-    code:c562/03/01
-  cheat
-    description:Go! Dizzy Go! - Start with 6 lives
-    code:c562/03/06
-  cheat
-    description:Go! Dizzy Go! - Start with 9 lives
-    code:c562/03/09
-  cheat
-    description:Go! Dizzy Go! - Start on world 1, stage 3
-    code:c58c/01/02
-  cheat
-    description:Go! Dizzy Go! - Start on world 1, stage 5
-    code:c58c/01/04
-  cheat
-    description:Go! Dizzy Go! - Start on world 2, stage 2
-    code:c58c/01/06
-  cheat
-    description:Go! Dizzy Go! - Start on world 2, stage 4
-    code:c58c/01/08
-  cheat
-    description:Go! Dizzy Go! - Start on world 4, stage 2
-    code:c58c/01/10
-  cheat
-    description:Go! Dizzy Go! - Start on world 4, stage 4
-    code:c58c/01/12
-  cheat
-    description:Go! Dizzy Go! - Start on world 5, stage 1
-    code:c58c/01/14
-  cheat
-    description:Go! Dizzy Go! - Start on world 5, stage 3
-    code:c58c/01/16
-  cheat
-    description:Go! Dizzy Go! - Start on world 5, stage 5
-    code:c58c/01/18
-  cheat
-    description:Sunt Buggies - Infinite lives
-    code:a09a/ce/ad
-  cheat
-    description:Sunt Buggies - Start with 1 life
-    code:ec4a/03/01
-  cheat
-    description:Sunt Buggies - Start with 6 lives
-    code:ec4a/03/06
-  cheat
-    description:Sunt Buggies - Start with 9 lives
-    code:ec4a/03/09
-  cheat
-    description:F-16 Renegade - Start with 2 lives - 1P game
-    code:c8b0/03/01
-  cheat
-    description:F-16 Renegade - Start with 7 lives - 1P game
-    code:c8b0/03/06
-  cheat
-    description:F-16 Renegade - Start with 10 lives - 1P game
-    code:c8b0/03/09
-  cheat
-    description:F-16 Renegade - Start on level 3
-    code:c8b5/01/03+c8c2/00/01
-  cheat
-    description:F-16 Renegade - Start on level 5
-    code:c8b5/01/05+c8c2/00/02
-  cheat
-    description:F-16 Renegade - Start on level 7
-    code:c8b5/01/07+c8c2/00/03
-  cheat
-    description:F-16 Renegade - Start on level 9
-    code:c8b5/01/09+c8c2/00/04
-  cheat
-    description:C.J.'s Elephant Antics - Infinite lives
-    code:e3c2/de/bd
-  cheat
-    description:C.J.'s Elephant Antics - Start in Switzerland
-    code:f801/00/01
-  cheat
-    description:C.J.'s Elephant Antics - Start in Egypt
-    code:f801/00/02
-  cheat
-    description:C.J.'s Elephant Antics - Start in Africa
-    code:f801/00/03
-  cheat
-    description:C.J.'s Elephant Antics - Always run fast after losing all lives
-    code:f31d/00/01
-  cheat
-    description:C.J.'s Elephant Antics - Super C.J. after losing all lives
-    code:f31d/00/0f
-  cheat
-    description:C.J.'s Elephant Antics - Start with 1 life
-    code:ee55/09/01
-  cheat
-    description:C.J.'s Elephant Antics - Start with 5 lives
-    code:ee55/09/05
-  cheat
-    description:C.J.'s Elephant Antics - Start with 15 lives
-    code:ee55/09/0f
-  cheat
-    description:C.J.'s Elephant Antics - Start with 20 lives
-    code:ee55/09/14
-
 cartridge sha256:d4f1650059a011455577561ea607993a5046d452ba987b1c7381cad56550be0a
   name:R.B.I. Baseball (USA)
   cheat
@@ -22272,12 +20860,6 @@ cartridge sha256:d4f1650059a011455577561ea607993a5046d452ba987b1c7381cad56550be0
     description:All missed pitches are strikes - both players
     code:bbe5/d0/10
 
-cartridge sha256:0df01b1d7b6efe38c98f2f0b131707d833c87874938d5722bf0a9a488c2e41c0
-  name:R.B.I. Baseball 2 (USA) (Unl)
-  cheat
-    description:Auto fielding
-    code:fac6/09/00+a703/30/f0+a704/13/0f
-
 cartridge sha256:3f9e3d3b48a897d94003df004ab4b332d749f85ea5d0e1a1b29b6d4f5634049a
   name:R.C. Pro-Am (USA) (Rev A)
   cheat
@@ -22701,15 +21283,6 @@ cartridge sha256:5d9f7deb09c9de8725c293366c943e6fef0a505a72bb1bc92be7a7a055cde46
     description:Double-jump
     code:81cd/a9/60
 
-cartridge sha256:d79be89ff83550ba185d19fb586d2b5f988ad6743125b5233ab3bfe2cb814c94
-  name:Raid 2020 (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:ddd8/ce/ad+dd4e/ce/ad
-  cheat
-    description:Infinite lives
-    code:d6ed/ce/ad
-
 cartridge sha256:b7b5fdf2b31c4b8c5340f93f166fb56aecf598f7c43a24b4334502bb81065143
   name:Raid on Bungeling Bay (USA)
   cheat
@@ -23175,42 +21748,6 @@ cartridge sha256:46361c5b4007e6ef855430934b5a205aa19c885857a7eb31072646753d06e32
     description:Max speed
     code:009a/ff
 
-cartridge sha256:46a38baf9067869e8ecdf227c3cd33f14df20998d0d27e645e47f6c57fd9703d
-  name:Road Runner (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:eb1b/ce/ad
-  cheat
-    description:Never lose seed
-    code:c1b0/c8/ea+eba5/c8/ea
-  cheat
-    description:Start with 1 life
-    code:e40e/05/00
-  cheat
-    description:Start with 12 lives
-    code:e40e/05/0b
-  cheat
-    description:Start with 18 lives
-    code:e40e/05/11
-  cheat
-    description:Start on level 5
-    code:e413/01/05
-  cheat
-    description:Start on level 10
-    code:e413/01/0a
-  cheat
-    description:Start on level 15
-    code:e413/01/0f
-  cheat
-    description:Start on level 20
-    code:e413/01/14
-  cheat
-    description:Start on level 25
-    code:e413/01/19
-  cheat
-    description:Start on level 30
-    code:e413/01/1e
-
 cartridge sha256:687e4129be3b8e224a9748cba9687b8c10e5feb234a727bdf2dcb8d3c8c47097
   name:Robin Hood - Prince of Thieves (USA) (Rev A)
   cheat
@@ -23556,12 +22093,6 @@ cartridge sha256:92b1bde12ac860a385416b92529c15d149db54e53a56bd2a82ab97f517e67f8
     description:Infinite health (alt)
     code:04ee/0a
 
-cartridge sha256:d0e5899cf6b756d697be9ad6700d1f612b1604496374da9606478d5cdbceebf1
-  name:Robodemons (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:051b/14
-
 cartridge sha256:e1a3d949b9bf258b4d2c92104cedd7957a311f142dc2cb32eb92ce559837377f
   name:Rocketeer, The (USA)
   cheat
@@ -23790,105 +22321,6 @@ cartridge sha256:7ddc56bf2b8d8f3f980837bbc48284fd7241e111a9f51599c6e358518d3469d
     description:Infinite time (alt)
     code:0032/03
 
-cartridge sha256:e91bb35c7a95388c06f978c6cee73b1169fa7ec66b1808de5f504dcfefafbaab
-  name:Rolling Thunder (USA) (Unl)
-  cheat
-    description:Infinite health
-    code:a654/8d/ad
-  cheat
-    description:Infinite lives
-    code:eb73/c6/a5+eb53/c6/a5
-  cheat
-    description:Infinite time
-    code:e20f/c6/a5
-  cheat
-    description:Hit anywhere
-    code:a7d0/b8/40+d733/d0/60+a7d1/a8/a9
-  cheat
-    description:200 Machine Gun bullets on pick-up
-    code:e8d0/64/c8
-  cheat
-    description:300 Machine Gun bullets and 300 bullets on pick-up
-    code:a291/de/bd
-  cheat
-    description:Gain fewer bullets on pick-up
-    code:e8cf/32/14
-  cheat
-    description:Self-replenishing bullets
-    code:d766/01/32
-  cheat
-    description:Start with 200 bullets
-    code:e0aa/32/c8
-  cheat
-    description:Start with 200 bullets on each new life
-    code:eb4c/32/c8
-  cheat
-    description:Start with loads of ammunition
-    code:e0a2/00/03+eb44/00/03
-  cheat
-    description:Start with 1 life
-    code:e09b/03/01
-  cheat
-    description:Start with 6 lives
-    code:e09b/03/06
-  cheat
-    description:Start with 9 lives
-    code:e09b/03/09
-  cheat
-    description:Start with 1 life after continue
-    code:9257/03/01
-  cheat
-    description:Start with 6 lives after continue
-    code:9257/03/06
-  cheat
-    description:Start with 9 lives after continue
-    code:9257/03/09
-  cheat
-    description:Start with increased life meter
-    code:e88d/02/08
-  cheat
-    description:Start on story 1 area 02
-    code:8f6b/00/01+8f6d/b1/30
-  cheat
-    description:Start on story 1 area 03
-    code:8f6b/00/02+8f6d/b1/30
-  cheat
-    description:Start on story 1 area 04
-    code:8f6b/00/03+8f6d/b1/30
-  cheat
-    description:Start on story 1 area 05
-    code:8f6b/00/04+8f6d/b1/30
-  cheat
-    description:Start on story 2 area 06
-    code:8f6b/00/05+8f6d/b1/30
-  cheat
-    description:Start on story 2 area 07
-    code:8f6b/00/06+8f6d/b1/30
-  cheat
-    description:Start on story 2 area 08
-    code:8f6b/00/07+8f6d/b1/30
-  cheat
-    description:Start on story 2 area 09
-    code:8f6b/00/08+8f6d/b1/30
-  cheat
-    description:Start on story 2 area 10
-    code:8f6b/00/09+8f6d/b1/30
-  cheat
-    description:Start on story 3 area 01
-    code:8dca/00/01
-  cheat
-    description:Infinite health (not versus bullets)
-    code:0089/02
-  cheat
-    description:Infinite bullets
-    code:00a0/32
-  cheat
-    description:Infinite time (alt)
-    code:059b/09+059c/09+059d/09
-  cheat
-    description:Infinite lives (alt)
-    code:05bc/09
-
 cartridge sha256:644291444ae16a02a128c613fa4e10559a45e4740e3614fb57b73b8c736bdbef
   name:Roundball - 2-on-2 Challenge (USA)
   cheat
@@ -24162,15 +22594,6 @@ cartridge sha256:9e8eb95ec2917597650131db254067ff59bc3669417563165518927357812c7
     description:Start with and keep Missiles
     code:0076/02
 
-cartridge sha256:7ee2b81ef8ab8e9c009ecd42ed5fa5a34e3e48896c3567fac1ca7520c1de870e
-  name:Secret Scout in the Temple of Demise (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:e4a7/99/b9
-  cheat
-    description:View the ending
-    code:d5e7/00/58
-
 cartridge sha256:c33611fb6b3ced6cf0ab4cd8e6795be44dc164efd453a69bad404c95837ec420
   name:Secret Ties (USA) (Proto)
   cheat
@@ -24351,30 +22774,6 @@ cartridge sha256:c3f361c4a1441101d6a3eb42f5776073c712198e7ed45d6ab5350816ea15aee
     description:Powered up - Red Vest
     code:05c8/03
 
-cartridge sha256:2b85e6411f42597ceab01f5eb3ba9fd362b07340c0665fd533a3c3d5f2b1e972
-  name:Shinobi (USA) (Unl)
-  cheat
-    description:Infinite life
-    code:d771/ce/ad
-  cheat
-    description:Infinite lives
-    code:920b/ce/ad
-  cheat
-    description:Turbo running
-    code:9dcf/03/05
-  cheat
-    description:Start with double life
-    code:902e/06/0c+91f4/06/0c
-  cheat
-    description:Start with 1 life
-    code:907b/02/00
-  cheat
-    description:Start with 6 lives
-    code:907b/02/05
-  cheat
-    description:Start with 9 lives
-    code:907b/02/08
-
 cartridge sha256:0df6a7a16af6cffc9a54a3de1ab14225f2ce5d5a269a691f16a22d3fd42b942b
   name:Shinsenden (Japan)
   cheat
@@ -24423,15 +22822,6 @@ cartridge sha256:648f68ae58f3420096e052a68255d8e453ae1fc09a4214adbeaa66ff841aaa3
     description:Infinite turns - P1
     code:abcf/85/a5
 
-cartridge sha256:69399633df5ea1baf37d3e47087257e245fca1f260cac0f539e8e4437ddf2a28
-  name:Silent Assault (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:002e/08
-  cheat
-    description:Infinite Grenades
-    code:00d9/04
-
 cartridge sha256:37a5cfb1aacd9bb42746f20923441b5f613971d4dc99de68c216b10a8d7bcbfc
   name:Silent Service (USA)
   cheat
@@ -24819,39 +23209,6 @@ cartridge sha256:a29461c583ec03909c1dbc4e7d783de0aaf2f391ae8329b3d8bf06e06cfdd2f
     description:Acro Aerials - More jumps allowed
     code:efd0/03/05+ed6f/03/05
 
-cartridge sha256:06fddd300a6d1cbe1be92e851e3d5d2defcc7e682903b569bc9fe71a26addd74
-  name:Skull & Crossbones (USA) (Unl)
-  cheat
-    description:Infinite continues
-    code:977e/ce/ad
-  cheat
-    description:Infinite weapons
-    code:869d/de/bd
-  cheat
-    description:Infinite time
-    code:f21c/ce/ad
-  cheat
-    description:Faster timer
-    code:f218/3c/20
-  cheat
-    description:Slower timer
-    code:f218/3c/70
-  cheat
-    description:Half energy for Red Dog and One Eye
-    code:97e3/32/19+9782/32/19
-  cheat
-    description:Double energy for Red Dog and One Eye
-    code:97e3/32/63+9782/32/19
-  cheat
-    description:Better super-jump
-    code:87ef/c8/b8+87e4/c8/b8
-  cheat
-    description:1 continue
-    code:97a6/05/01
-  cheat
-    description:9 continues
-    code:97a6/05/09
-
 cartridge sha256:51958d12a19e7c573fab26b85fe81d57330ff6668d630c6bc95c7c563c441e93
   name:Sky Kid (USA)
   cheat
@@ -25398,69 +23755,6 @@ cartridge sha256:1104d574711a103745aed2407997275e1ac43fd4d5c7ff96bde0af5bfa014c2
     description:Infinite health
     code:ce9e/8d/ad
 
-cartridge sha256:3c74b191d7d4cb6c34e6b2d5f76d9c86be63f8ebb61581c49810f0dd58c538c1
-  name:Spiritual Warfare (USA) (v6.1) (Unl)
-  cheat
-    description:Infinite energy
-    code:c4e3/85/a5
-  cheat
-    description:Infinite Vial Of God's Wrath
-    code:cdc2/c6/a5
-  cheat
-    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
-    code:b50f/00/ff
-  cheat
-    description:Start with max energy
-    code:b542/06/18
-
-cartridge sha256:5a82a1b0386407f1036c3d0ae750741c0835336f062d77480e1dd5b4da507386
-  name:Spiritual Warfare (USA) (v6.0) (Unl)
-  cheat
-    description:Invincibility
-    code:ed9a/02/00
-  cheat
-    description:Infinite energy
-    code:c4bb/85/a5
-  cheat
-    description:Infinite Vial Of God's Wrath
-    code:b4df/00/ff
-  cheat
-    description:Infinite Vials
-    code:cd9a/c6/a5
-  cheat
-    description:Hit anywhere with fruits
-    code:cc5c/06/24
-  cheat
-    description:Items are free
-    code:9161/b0/50
-  cheat
-    description:Any answer is correct
-    code:929e/4c/ad
-  cheat
-    description:Walk through walls (not diagonally)
-    code:e5d4/c9/60
-  cheat
-    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
-    code:b4df/00/ff
-  cheat
-    description:Start with max energy
-    code:b512/06/18
-
-cartridge sha256:14a86d409cc9e6ae2428f301e4aaa77290fe38ec3e660d971af9abda772747e2
-  name:Spiritual Warfare (USA) (v5.1) (Unl)
-  cheat
-    description:Infinite energy
-    code:c4f9/85/a5
-  cheat
-    description:Infinite Vial Of God's Wrath
-    code:cdd8/c6/a5
-  cheat
-    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
-    code:b525/00/ff
-  cheat
-    description:Start with max energy
-    code:b558/06/18
-
 cartridge sha256:387d82471ca5f54e70b3c4d445ae5c692640d99c47b30a6bf67f5a17b6236c85
   name:Splatter House - Wanpaku Graffiti (Japan)
   cheat
@@ -26094,18 +24388,6 @@ cartridge sha256:885cfd4396e0ade5f3abbbdb5055bc48ef166f86207db631bac83c51c0844f0
     description:Start with 9 lives
     code:800e/04/09
 
-cartridge sha256:07401bfb725c61711ce0a1d5eade14e09cd0f1b90991691339077a0b7dea5e58
-  name:Street Heroes (Asia) (Unl)
-  cheat
-    description:Infinite health
-    code:00d6/59
-  cheat
-    description:One hit kills
-    code:00d7/00
-  cheat
-    description:Only one win needed to advance
-    code:0059/02
-
 cartridge sha256:d4fc5610f1355c545d1ecf21502c31a9d21a31e0d4f0043c7c8d8f199bea2a73
   name:Strider (USA)
   cheat
@@ -26160,48 +24442,6 @@ cartridge sha256:9aa6ced81adbfb09730591efa9aea369ec7bf57d8a1504dfd5f77ff5696b042
     description:Infinite Bombs
     code:97a3/ce/ad
 
-cartridge sha256:f3a140c16012c4e4fb0deda64cbee7d9ebe78d2fb717b80b12a9f938d57b78bb
-  name:Stunt Kids (USA) (Unl)
-  cheat
-    description:Infinite time - P1
-    code:927f/de/bd
-  cheat
-    description:Infinite time - P2
-    code:932f/de/bd
-  cheat
-    description:Infinite lives
-    code:ac55/ce/ad
-  cheat
-    description:Always have 9 coins after a race
-    code:d673/8c/8e
-  cheat
-    description:Coins worth nothing on pick-up
-    code:9948/ee/ad
-  cheat
-    description:Start with 1 life instead of 3
-    code:cad7/02/00
-  cheat
-    description:Start with 6 lives
-    code:cad7/02/05
-  cheat
-    description:Start with 9 lives
-    code:cad7/02/09
-  cheat
-    description:Start with 0 turbos instead of 3
-    code:d089/03/00
-  cheat
-    description:Start with 6 turbos
-    code:d089/03/06
-  cheat
-    description:Start with 9 turbos
-    code:d089/03/09
-
-cartridge sha256:4d16627301ff5def67247039b3a4b1cce4d20fbb867f4c5b7bcab43a8575f59f
-  name:Sunday Funday - The Ride (USA) (Unl)
-  cheat
-    description:Enable level skip (press B then Select)
-    code:fafb/f0/d0
-
 cartridge sha256:a387a17294bb440eb821fa096bfe476f772c7f9f79c5fb251f6b0a50bdeda53d
   name:Super Arabian (Japan)
   cheat
@@ -27840,42 +26080,6 @@ cartridge sha256:fe019a7da7fb7ecd2e6478bde546e6c5d6bba185d53e5c8692522ed8fdd617a
     description:Invincibility (blinking) - both players
     code:00dc/ff
 
-cartridge sha256:7c14c7e39943e7247c92d907f3362eab09a7306fb606d4a899a918fc6afd356a
-  name:Super Shinobi, The (unl)
-  cheat
-    description:Infinite health
-    code:04f5/09
-  cheat
-    description:Infinite magic
-    code:010d/09
-  cheat
-    description:Infinite Shurikens
-    code:0109/09+010b/09
-  cheat
-    description:Always have powered-up Shurikens
-    code:00af/01
-
-cartridge sha256:d1defc7a6c6f96f89386c79ac887aa41a72fefa93ba22a8a08159ac891f73613
-  name:Super Sprint (USA) (Unl)
-  cheat
-    description:Infinite continues
-    code:eb06/ce/ad
-  cheat
-    description:6 continues
-    code:d059/03/07
-  cheat
-    description:No continues
-    code:d059/03/01
-  cheat
-    description:More obstacles on tracks
-    code:cecf/00/05+ced3/8d/2c
-  cheat
-    description:Even more obstacles on tracks
-    code:cecf/00/0a+ced3/8d/2c
-  cheat
-    description:Lots and lots of obstacles on tracks
-    code:cecf/00/0f+ced3/8d/2c
-
 cartridge sha256:7806ee6afcdf88ef6364da23af8b28f359ef7d850fe55224e188b8a01d5ade67
   name:Super Spy Hunter (USA)
   cheat
@@ -28905,126 +27109,6 @@ cartridge sha256:2ae5fb18a1bf841077e3872ba05060f030ea0bfc573994b2f8fe2fb570dc785
     description:Next piece is a straight line block
     code:00bf/12
 
-cartridge sha256:9daa4bec3013ae7ef498318432f438d70374af294d1dce28edd3c466aaf6b740
-  name:Tetris (USA) (Unl)
-  cheat
-    description:Lines are cleared when a piece is dropped
-    code:87ab/2a/00+87af/26/00
-  cheat
-    description:Always get straight pieces
-    code:9940/f0/a9+9941/f9/01
-  cheat
-    description:Speed stays the same
-    code:9b24/24/a9+9b25/2f/21
-  cheat
-    description:Press down to stop blocks from falling
-    code:8109/04
-  cheat
-    description:Press down to rotate block very fast
-    code:8109/19
-  cheat
-    description:Next piece is a straight line block - P1
-    code:0066/01
-  cheat
-    description:Next piece is a T-block - P1
-    code:0066/02
-  cheat
-    description:Next piece is a square block - P1
-    code:0066/03
-  cheat
-    description:Next piece is a J-block - P1
-    code:0066/04
-  cheat
-    description:Next piece is a L-block - P1
-    code:0066/05
-  cheat
-    description:Next piece is a S-block - P1
-    code:0066/06
-  cheat
-    description:Next piece is a Z-block - P1
-    code:0066/07
-  cheat
-    description:Next piece is a straight line block - P2
-    code:0067/01
-  cheat
-    description:Next piece is a T-block - P2
-    code:0067/02
-  cheat
-    description:Next piece is a square block - P2
-    code:0067/03
-  cheat
-    description:Next piece is a J-block - P2
-    code:0067/04
-  cheat
-    description:Next piece is a L-block - P2
-    code:0067/05
-  cheat
-    description:Next piece is a S-block - P2
-    code:0067/06
-  cheat
-    description:Next piece is a Z-block - P2
-    code:0067/07
-  cheat
-    description:Start at level 0
-    code:042c/30+042d/30
-  cheat
-    description:Start at level 1
-    code:042c/30+042d/31
-  cheat
-    description:Start at level 2
-    code:042c/30+042d/32
-  cheat
-    description:Start at level 3
-    code:042c/30+042d/33
-  cheat
-    description:Start at level 4
-    code:042c/30+042d/34
-  cheat
-    description:Start at level 5
-    code:042c/30+042d/35
-  cheat
-    description:Start at level 6
-    code:042c/30+042d/36
-  cheat
-    description:Start at level 7
-    code:042c/30+042d/37
-  cheat
-    description:Start at level 8
-    code:042c/30+042d/38
-  cheat
-    description:Start at level 9
-    code:042c/30+042d/39
-  cheat
-    description:Start at level 10
-    code:042c/31+042d/30
-  cheat
-    description:Start at level 11
-    code:042c/31+042d/31
-  cheat
-    description:Start at level 12
-    code:042c/31+042d/32
-  cheat
-    description:Start at level 13
-    code:042c/31+042d/33
-  cheat
-    description:Start at level 14
-    code:042c/31+042d/34
-  cheat
-    description:Start at level 15
-    code:042c/31+042d/35
-  cheat
-    description:Start at level 16
-    code:042c/31+042d/36
-  cheat
-    description:Start at level 17
-    code:042c/31+042d/37
-  cheat
-    description:Max score at 999,999 - P1
-    code:0418/39+0419/39+041a/39+041b/39+041c/39+041d/39
-  cheat
-    description:Max score at 999,999 - P2
-    code:041e/39+041f/39+0420/39+0421/39+0422/39+0423/39
-
 cartridge sha256:dd77dc88d380807990f55d0b1b55c151f78c480a0a0895e91d6edfb945ad71d7
   name:Tetris 2 (USA)
   cheat
@@ -29145,27 +27229,6 @@ cartridge sha256:c56af43761cb601a068cdc88c2fc36f715921dbae9a8a9d8c10479146c47ccb
     description:Start with 9 lives
     code:f515/03/09
 
-cartridge sha256:e115dbf3de0a4e674ff3f9081d7f97b89f636d81ce524119c0af4ef799490695
-  name:Thunder Warrior (Asia) (Unl)
-  cheat
-    description:Invincibility
-    code:b3be/f0/d0+b3c3/f0/d0
-  cheat
-    description:Infinite health
-    code:93a4/ce/ad
-  cheat
-    description:Infinite magic
-    code:89c0/ce/ad
-  cheat
-    description:Infinite lives
-    code:807d/ce/ad
-  cheat
-    description:Keep weapon after losing a life
-    code:9bd1/8d/60
-  cheat
-    description:Start with 9 lives
-    code:a438/03/09
-
 cartridge sha256:403fe1c4454dc1e23fb272c88f70ba30dd5e860ab48ecff59420a09fc84e9a2d
   name:Tiger-Heli (USA)
   cheat
@@ -29547,66 +27610,6 @@ cartridge sha256:b49e3b3c2a307e9c24715ea5863d6c80b805f9566eb1f468a4c701cf54605a5
     description:Start on world 5
     code:f9e4/00/20
 
-cartridge sha256:fe052f7f6b4b41dcbc009860e0c997c31e2e236eb46d713137ee773cce96105e
-  name:Toobin' (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:e5b4/c6/a5
-  cheat
-    description:Infinite cans
-    code:a502/c6/a5
-  cheat
-    description:Turbo left and right movement
-    code:a04e/20/30+a06b/20/30
-  cheat
-    description:Start with 2 lives
-    code:e612/03/01
-  cheat
-    description:Start with 6 lives
-    code:e612/03/06
-  cheat
-    description:Start with 9 lives
-    code:e612/03/09
-  cheat
-    description:Start with 18 cans
-    code:e616/06/12
-  cheat
-    description:Start with 12 cans
-    code:e616/06/0c
-  cheat
-    description:Start with 1 can
-    code:e616/06/01
-  cheat
-    description:Start on level 2
-    code:a810/00/01
-  cheat
-    description:Start on level 4
-    code:a810/00/03
-  cheat
-    description:Start on level 6
-    code:a810/00/05
-  cheat
-    description:Start on level 8
-    code:a810/00/07
-  cheat
-    description:Invincibility (glitchy)
-    code:02d3/00
-  cheat
-    description:Infinite patches
-    code:006e/09
-  cheat
-    description:Infinite cans (alt)
-    code:004c/ff
-  cheat
-    description:Have all letters
-    code:006d/7f
-  cheat
-    description:Faster shots
-    code:003f/02
-  cheat
-    description:Don't go into dying animation (use with invincibility)
-    code:004a/00+004b/00
-
 cartridge sha256:e788ae1dff1b868795395e19357525b93ddd52ac86f6a505d14eac5fa323b023
   name:Top Gun (USA) (Rev A)
   cheat
@@ -30006,15 +28009,6 @@ cartridge sha256:5699da9924f31e0f1b7d5cacd05111786881b7a87da38a99aee092fc855ab35
     description:Hit anywhere
     code:9133/1c/00
 
-cartridge sha256:0b5d1465b23e31f24e1caecf1490f97a60deb97ba873a36fa948adb016e9c0d2
-  name:Trolls on Treasure Island (USA) (Unl)
-  cheat
-    description:Infinite time
-    code:ce13/86/dd
-  cheat
-    description:Only one jewel needed to clear stage
-    code:df77/d0/f0
-
 cartridge sha256:e2b26560d326cc626736efa2addf1c66f5af77913968fcf5cde738188c4a0132
   name:Twin Cobra (USA)
   cheat
@@ -30378,48 +28372,6 @@ cartridge sha256:8dda0b6bcb5d66fd6983f71f9257225ce053822cbb5edda5d072feeddec9358
     description:Infinite Missiles
     code:a5e2/ce/ad+a60c/ce/ad
 
-cartridge sha256:f4de2a91acb2eb3024fb75231859a30c130c0169be0e6ad24330805c8f766e03
-  name:Ultimate Stuntman, The (USA) (Unl)
-  cheat
-    description:Infinite time
-    code:d2ff/ce/ad
-  cheat
-    description:Infinite 'Crez' weapon until end of stage
-    code:dbaf/ce/ad
-  cheat
-    description:Minimum damage taken
-    code:a9b4/e5/e9+a9b5/ff/01
-  cheat
-    description:Don't lose a life on Ground Pursuit, Boat and Hang Glider stages
-    code:8cb1/ce/2c
-  cheat
-    description:9 seconds on clock pick-up
-    code:a8ad/06/09
-  cheat
-    description:Full energy on pick-up
-    code:a992/02/00
-  cheat
-    description:Shield lasts longer on Human Fly stages
-    code:ae2e/78/ff
-  cheat
-    description:Shield lasts a shorter time on Human Fly stages
-    code:ae2e/78/40
-  cheat
-    description:Don't lose a life against end-of-stage bosses and on street combat stages
-    code:affc/ce/ad
-  cheat
-    description:Don't lose a life on Human Fly stages
-    code:bdaa/ce/ad
-  cheat
-    description:Start with 1 life (first credit only)
-    code:ecff/02/00
-  cheat
-    description:Start with 6 lives (first credit only)
-    code:ecff/02/05
-  cheat
-    description:Start with 9 lives (first credit only)
-    code:ecff/02/08
-
 cartridge sha256:c7ad19e926809adc47c0b44c852e19be7a95e7235ee58cb753e68d7cdee9c89c
   name:Uncanny X-Men, The (USA)
   cheat
@@ -30672,45 +28624,6 @@ cartridge sha256:433f6bcbd59a9d5916d2209ddeacd39d24810c1ed21a33366171b4991fc7e84
     description:Start with 99 grenades
     code:fb7a/05/63
 
-cartridge sha256:8104dc7acdaea42b027b2cc7b05dc6a1ffdba6e74b35581c2bb0250df89a28fa
-  name:Vindicators (USA) (Unl)
-  cheat
-    description:Infinite lives
-    code:8634/d6/b4
-  cheat
-    description:Automatic fuel replenishment
-    code:cd38/d6/f6
-  cheat
-    description:Never lose Stars
-    code:8a1e/f9/2c
-  cheat
-    description:Quicker shot re-load
-    code:c63f/12/02
-  cheat
-    description:Turbo speed
-    code:c64b/0c/1b
-  cheat
-    description:Start with increased shot range
-    code:c647/08/20
-  cheat
-    description:Start with 10 Stars
-    code:81e0/85/e6
-  cheat
-    description:Start with 80 Shots
-    code:c63f/12/08+c641/d0/d6
-  cheat
-    description:Start with 80 Bombs
-    code:c63f/12/08+c641/d0/d4
-  cheat
-    description:Start with 1 life
-    code:c64f/02/00
-  cheat
-    description:Start with 6 lives
-    code:c64f/02/05
-  cheat
-    description:Start with 9 lives
-    code:c64f/02/08
-
 cartridge sha256:2e312fc327c1e569eccf14eee5a00c41f676c1492035d99af0873681da0f034d
   name:Volleyball (USA, Europe)
   cheat
@@ -30849,18 +28762,6 @@ cartridge sha256:60667bc0ed1c0c6355f59b5716c678954c5f3915064bdbfbb8e0195f2643eda
     description:Infinite money (alt)
     code:03e1/ff
 
-cartridge sha256:50b6f1f87fb14c8ff74a54e60b85139e11adcaecb62eb24174aeb58a20b7698f
-  name:Wally Bear and the No! Gang (USA) (Unl)
-  cheat
-    description:Invincibility
-    code:a7bf/d0/10
-  cheat
-    description:Multi-jump
-    code:a57a/85/24
-  cheat
-    description:Collect items from anywhere
-    code:b775/5c/00+b77b/56/00
-
 cartridge sha256:c12771e8155b030eff0081bfabd98e57a162d6592899f29dd16f141f0e6e08a3
   name:Wario's Woods (USA)
   cheat
@@ -32088,69 +29989,6 @@ cartridge sha256:2508e4eada73f233b2df86af2248a370b2d40ec2de590c8886a8750ddfb5b79
     description:Start with and keep foot-wing
     code:b711/08/00
 
-cartridge sha256:1f349392d49c60c3e52a06be6ab4d914bf71ffd5b73857964ec9d604806b131b
-  name:Xybots (USA) (Proto) (Unl)
-  cheat
-    description:Infinite lives and second shots
-    code:f385/de/bd
-  cheat
-    description:Infinite Keys - both players
-    code:9004/de/ad
-  cheat
-    description:Infinite money - both players
-    code:8986/9d/bd
-  cheat
-    description:Infinite Slow Energy Drain and Zap power
-    code:e96b/9d/ad
-  cheat
-    description:Infinite Warning Arrows and Level Mappers
-    code:b6bb/9d/ad
-  cheat
-    description:Infinite Enemy Mappers and Guard Mapper
-    code:e950/99/b9
-  cheat
-    description:Start with 6 lives and 6 second shots
-    code:e15c/12/66
-  cheat
-    description:Start with 3 Slow Energy Drain and 4 Zap power - P1
-    code:e152/02/24
-  cheat
-    description:Start with 3 Slow Energy Drain and 4 Zap power - P2
-    code:e157/12/24
-  cheat
-    description:Start with 6 Warning Arrows and Level Mappers
-    code:e164/21/66
-  cheat
-    description:Start with 6 Enemy Mappers and have Guard Mapper
-    code:e16c/01/16
-  cheat
-    description:Start with 99 Keys, $99 and 2,544,300 points
-    code:e4ac/00/63
-  cheat
-    description:Start with 4 extra Speed, extra Armor, extra Shot Speed, extra Shot Power and Wide Shot
-    code:e130/00/44
-  cheat
-    description:Start at last level
-    code:e176/01/36
-  cheat
-    description:Infinite health - P1
-    code:0192/ff
-  cheat
-    description:Infinite health - P2
-    code:0193/ff
-  cheat
-    description:Infinite Keys - P1
-    code:0196/09
-  cheat
-    description:Infinite Keys - P2
-    code:0197/09
-  cheat
-    description:Infinite Money - P1
-    code:0194/ff
-  cheat
-    description:Infinite Money - P2
-    code:0195/ff
-
 cartridge sha256:0624c93899a588232f9193db0d560291b15636727813a4cd6c3dab8b7f74badb
   name:Yie Ar Kung-Fu (Japan) (Rev 1.4)
   cheat
@@ -32355,360 +30193,2528 @@ cartridge sha256:91d281ee84a71483cd9b8e8021222ef509a8c0ea4be0a4fa675140a91b65c2d
     description:Start on World 5
     code:0635/04
   cheat
-    description:Start on World 6
-    code:0635/05
+    description:Start on World 6
+    code:0635/05
+  cheat
+    description:Start on World 7
+    code:0635/06
+
+cartridge sha256:bdc9dfed1b03db470a1453da0252b3e9fcd0869d02a48622476ddaa350e53374
+  name:Zanac (USA)
+  cheat
+    description:Invincibility + Hit anywhere
+    code:825c/b0/38+825d/31/60+821b/99/ad
+  cheat
+    description:Infinite lives
+    code:8f8f/c6/a9
+  cheat
+    description:Start with Straight Crusher
+    code:9490/00/01
+  cheat
+    description:Start with Field Shutter
+    code:9490/00/02
+  cheat
+    description:Start with the Circular
+    code:9490/00/03
+  cheat
+    description:Start with the Vibrator
+    code:9490/00/04
+  cheat
+    description:Start with the Rewinder
+    code:9490/00/05
+  cheat
+    description:Start with the Plasma Flash
+    code:9490/00/06
+  cheat
+    description:Start with rapid fire
+    code:9490/00/07
+  cheat
+    description:Start with 1 life
+    code:cb89/03/01
+  cheat
+    description:Start with 6 lives
+    code:cb89/03/06
+  cheat
+    description:Start with 9 lives
+    code:cb89/03/09
+  cheat
+    description:Invincibility
+    code:0764/00
+
+cartridge sha256:4cfc55e1521e58039d502f2a5ff16c233b84c0a05b1048185c75c971f3814c16
+  name:Zelda II - The Adventure of Link (USA)
+  cheat
+    description:Infinite health
+    code:e335/e5/ea+e336/0c/ea
+  cheat
+    description:Almost infinite health
+    code:e330/e2
+  cheat
+    description:Infinite magic
+    code:8df0/f9/2c
+  cheat
+    description:Infinite magic (alt)
+    code:8df5/8d/ad
+  cheat
+    description:Infinite magic and health in battle
+    code:d3f8/08
+  cheat
+    description:Infinite lives
+    code:ca44/ce/ad
+  cheat
+    description:Infinite Keys after obtaining one
+    code:d9e4/ce/ad
+  cheat
+    description:Keys not necessary to open doors
+    code:d9e3/ea+d9e2/e2
+  cheat
+    description:Gain over 2048 EXP when you defeat an enemy most of the time
+    code:d465/00/08
+  cheat
+    description:Gain 256 EXP when you defeat an enemy most of the time
+    code:d45e/8d/ea
+  cheat
+    description:Gain more than 256 EXP for every EXP
+    code:d465/00/01
+  cheat
+    description:Don't lose EXP points while leveling up
+    code:9f6b/8d/ad+9f74/8d/ad
+  cheat
+    description:All sword levels do massive damage
+    code:e732/f9/ed
+  cheat
+    description:Hit anywhere (press up if you get stuck at a Palace entrance)
+    code:e6a4/b0/50
+  cheat
+    description:Multi-jump
+    code:9530/f7/f5+9535/ad/a9+9536/7d/fb+9537/05/8d+9538/10/7d+9539/02/05
+  cheat
+    description:Mega-jump
+    code:953b/30/20
+  cheat
+    description:Link can fly (hold A)
+    code:953b/30/00
+  cheat
+    description:Faster text (when talking to people)
+    code:b6be/df/00
+  cheat
+    description:Walk through walls in Overworld
+    code:871e/02/00
+  cheat
+    description:Swap Shield spell for Fire spell
+    code:8e48/8d/f1+8e49/8e/97
+  cheat
+    description:Swap Shield spell for Spell spell
+    code:8e48/8d/73+8e49/8e/8e
+  cheat
+    description:Swap Shield spell for Fairy spell
+    code:8e48/8d/23+8e49/8e/91
+  cheat
+    description:Swap Shield spell for Life spell
+    code:8e48/8d/5d+8e49/8e/8e
+  cheat
+    description:Swap Shield spell for Thunder spell
+    code:8e48/8d/e6+8e49/8e/91
+  cheat
+    description:Start with all spells
+    code:a60d/bd/de
+  cheat
+    description:Start with 1 life
+    code:c359/03/01
+  cheat
+    description:Start with 6 lives
+    code:c359/03/06
+  cheat
+    description:Start with 9 lives
+    code:c359/03/09
+  cheat
+    description:Invincibility (disable when fighting your shadow)
+    code:0518/03
+  cheat
+    description:Infinite health (alt)
+    code:0774/ff
+  cheat
+    description:Infinite magic (alt 2)
+    code:0773/ff
+  cheat
+    description:Infinite lives (alt)
+    code:0700/04
+  cheat
+    description:Infinite Keys
+    code:0793/09
+  cheat
+    description:No enemies in overworld
+    code:0086/00+0087/00+0088/00+0089/00
+  cheat
+    description:Jump spell always on
+    code:076f/02
+  cheat
+    description:Max sword level
+    code:0777/ff
+  cheat
+    description:Max magic level
+    code:0778/ff
+  cheat
+    description:Max life level
+    code:0779/ff
+  cheat
+    description:Have up/down thrust
+    code:0796/ff
+  cheat
+    description:Have Shield spell
+    code:077b/01
+  cheat
+    description:Have Jump spell
+    code:077c/01
+  cheat
+    description:Have Life spell
+    code:077d/01
+  cheat
+    description:Have Fairy spell
+    code:077e/01
+  cheat
+    description:Have Fire spell
+    code:077f/01
+  cheat
+    description:Have Reflect spell
+    code:0780/01
+  cheat
+    description:Have Spell spell
+    code:0781/01
+  cheat
+    description:Have Thunder spell
+    code:0782/01
+  cheat
+    description:Max magic jars
+    code:0783/08
+  cheat
+    description:Have Boots
+    code:0788/01
+  cheat
+    description:Have Candle
+    code:0785/01
+  cheat
+    description:Have Cross
+    code:078a/01
+  cheat
+    description:Have Flute
+    code:0789/01
+  cheat
+    description:Have Glove
+    code:0786/01
+  cheat
+    description:Have Hammer
+    code:078b/01
+  cheat
+    description:Have Key
+    code:078c/01
+  cheat
+    description:Have Raft
+    code:0787/01
+  cheat
+    description:Can enter final palace
+    code:0794/00
+  cheat
+    description:One hit kill on final boss
+    code:00c2/01
+
+cartridge sha256:939dcb88fce04f9c91e1ce49016b12e301afc4861684576ab5862eada5860db7
+  name:Zen - Intergalactic Ninja (USA)
+  cheat
+    description:Invincibility
+    code:8849/11/00
+  cheat
+    description:Hit anywhere
+    code:b281/2f/00+b297/19/00+b2ac/b0/a9
+  cheat
+    description:One hit kills
+    code:b4c7/02/00
+  cheat
+    description:Infinite health
+    code:b377/8d/2c
+  cheat
+    description:Infinite lives
+    code:9654/c6/a5+a617/c6/a5
+  cheat
+    description:9 lives allowed in options menu
+    code:bc07/05/0a
+  cheat
+    description:Slower timer
+    code:ae7e/81/ff
+  cheat
+    description:Faster timer
+    code:ae7e/81/6f
+  cheat
+    description:Even faster timer
+    code:ae7e/81/5f
+  cheat
+    description:Zen does increased damage - isometric stages
+    code:8bb1/04/08
+  cheat
+    description:Zen does mega damage - isometric stages
+    code:8bb1/04/14
+  cheat
+    description:Jab attack does more damage - horizontal stages
+    code:ad4b/04/08
+  cheat
+    description:Mega jab attack damage - horizontal stages
+    code:ad4b/04/14
+  cheat
+    description:Fewer hits in shield
+    code:b40c/03/01+be2f/03/01
+  cheat
+    description:Double hits in shield
+    code:b40c/03/06+be2f/03/06
+  cheat
+    description:Triple hits in shield
+    code:b40c/03/09+be2f/03/09
+
+cartridge sha256:d0850075065ecbd125a33accc952de5d012527be45aa14a1b8223a9adf1643ae
+  name:Zoda's Revenge - StarTropics II (USA)
+  cheat
+    description:Invincibility
+    code:a140/ed/ae
+  cheat
+    description:Infinite lives
+    code:e4c9/ce/ad
+  cheat
+    description:Infinite weapons
+    code:a536/de/bd
+  cheat
+    description:Hit anywhere
+    code:b40d/b9/4c+b40f/70/b4+b40e/b4/8b
+  cheat
+    description:Walk faster - battle mode
+    code:a83c/01/02
+  cheat
+    description:Jump faster and further - battle mode
+    code:a83c/00/01
+  cheat
+    description:Throw Tink's axe further
+    code:b0cb/40/60
+  cheat
+    description:1 star gives energy
+    code:a651/05/01+a655/05/01
+  cheat
+    description:Throw Tink's Axe faster (can't be combined with other Axe code)
+    code:b038/41/f1
+  cheat
+    description:Tink's Axe splits into 3 little ones when thrown (can't be combined with other Axe code)
+    code:b038/41/43
+  cheat
+    description:Throw Tink's splitting-Axe faster (can't be combined with other Axe code)
+    code:b038/f1/f3
+  cheat
+    description:Start with 1 life (Only effective in battle mode on first life)
+    code:e266/03/01
+  cheat
+    description:Start with 6 lives (Only effective in battle mode on first life)
+    code:e266/03/06
+  cheat
+    description:Start with 9 lives (Only effective in battle mode on first life)
+    code:e266/03/09
+
+cartridge sha256:a18476a3b06ec3d9767ed6b6cf528dd204440a64e7781a3b18c1250c3c18f2ec
+  name:Zombie Hunter (Japan)
+  cheat
+    description:Invincibility
+    code:dfaa/13/00
+  cheat
+    description:One hit kills
+    code:dd8d/60/ea
+  cheat
+    description:Hit anywhere
+    code:dec1/10/00+deba/16/00+decb/b0/a9
+  cheat
+    description:Walk on air, jump to fall down
+    code:e070/f3/00
+
+cartridge sha256:91eae4e0e59dadd5de7cdbe71fe57e304d741ae5107928e29e0f6ff8813151a9
+  name:Zombie Nation (USA)
+  cheat
+    description:Infinite health
+    code:eda0/a5/60
+  cheat
+    description:Infinite continues
+    code:053b/05
+
+cartridge sha256:061d1c3865ad62ae883bb30b9f0071e8f7aa572f15f61bfb91b3a755eeeb5eb0
+  name:Zunou Senkan Galg (Japan)
+  cheat
+    description:Invincibility
+    code:860d/68/60+cf59/a5/60
+  cheat
+    description:Infinite lives
+    code:80f8/c6/a9
+
+// Famicom (Unlicensed)
+cartridge sha256:cd8d9859f334901aca717e08be03dab077766927c87a2becda22982b9234d532
+  name:1945 [p1]
+  cheat
+    description:Invincibility
+    code:9298/20/ad+94e9/20/ad
+  cheat
+    description:Infinite Bombs
+    code:83b7/20/ad
+
+cartridge sha256:69300586af39342fccc249134f6f44ebbd0fce7c1e5b93151cff63bb35072add
+  name:After Burner (USA) (Unl)
+  cheat
+    description:Invincibility
+    code:924b/85/a5
+  cheat
+    description:Infinite lives
+    code:e2a9/c6/c5
+  cheat
+    description:Infinite missiles
+    code:8af2/c6/c5
+
+cartridge sha256:d676ef6f7aa3b042ae5a0c95a7f07fabb4c3a5fccb3767ae1950713e51189a47
+  name:Alien Syndrome (USA) (Unl)
+  cheat
+    description:Infinite time
+    code:f23f/ce/ad
+  cheat
+    description:Don't lose life when shot or touched
+    code:c98a/ff/00
+  cheat
+    description:Don't lose life from falling down holes
+    code:ca76/ff/00
+  cheat
+    description:Set timer to 440
+    code:f199/33/34
+  cheat
+    description:1 life after continue
+    code:c3a4/04/01
+  cheat
+    description:8 lives after continue
+    code:c3a4/04/08
+  cheat
+    description:Start with 1 life - both players
+    code:c511/04/01
+  cheat
+    description:Start with 8 lives - both players
+    code:c511/04/08
+  cheat
+    description:Start with Flame Thrower
+    code:c56c/00/01
+  cheat
+    description:Start with Fireball
+    code:c56c/00/02
+  cheat
+    description:Start with Laser
+    code:c56c/00/03
+  cheat
+    description:Start on round 2
+    code:fbf8/10/01+fbfa/00/b4+fbfb/20/03
+  cheat
+    description:Start on round 3
+    code:fbf8/10/02+fbfa/00/b4+fbfb/20/03
+  cheat
+    description:Start on round 4
+    code:fbf8/10/03+fbfa/00/b4+fbfb/20/03
+  cheat
+    description:Start on round 5
+    code:fbf8/10/04+fbfa/00/b4+fbfb/20/03
+  cheat
+    description:Start on round 6
+    code:fbf8/10/05+fbfa/00/b4+fbfb/20/03
+  cheat
+    description:Start on round 7
+    code:fbf8/10/06+fbfa/00/b4+fbfb/20/03
+
+cartridge sha256:f91113b6a4bcd39d86ad5bbeaeb0f103461ada2cae513d1648a77ee575caf69b
+  name:Auto-Upturn (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite health (blinking)
+    code:a3f6/c6/a5+a42b/c6/a5
+  cheat
+    description:Infinite lives
+    code:a416/c6/a5
+  cheat
+    description:Infinite time
+    code:95c6/c6/a5
+
+cartridge sha256:fb20d9562088cfa620ad0221e6e6f6c6d1f08e5a9cee2a97c0ef4fc39f050c6c
+  name:Baby Boomer (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:e242/ce/cd
+
+cartridge sha256:f93163a51f4a671c5f4da390d4d286d6d8440d87dfe24285c40ed73dc422bf7d
+  name:Bee 52 (USA) (Unl)
+  cheat
+    description:Invincibility
+    code:e375/f0/d0
+  cheat
+    description:Invincibility (alt)
+    code:e1f3/85/a5
+  cheat
+    description:Infinite lives
+    code:cdd1/ce/ad
+  cheat
+    description:Hit anywhere - sting attack
+    code:e321/d0/50+e322/3b/18
+  cheat
+    description:Keep pick-ups
+    code:fe2a/20/ad
+  cheat
+    description:Don't get stunned
+    code:d65e/d0/24
+  cheat
+    description:Fly quicker
+    code:ceff/30/24+cf1b/10/24
+  cheat
+    description:Start with 1 life
+    code:fc24/03/01
+  cheat
+    description:Start with 6 lives
+    code:fc24/03/06
+  cheat
+    description:Start with 9 lives
+    code:fc24/03/09
+
+cartridge sha256:2807c405f072a1e828cbdd4812822ec301979472fd9b8c6225aa4d1dca89613c
+  name:Bible Adventures (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:d61c/9d/bd
+
+cartridge sha256:88ee64119746de659f70f3d459c62dd2af3b21f29f5064ea14f0fb03904cbcfe
+  name:Bible Adventures (USA) (v1.1) (Unl)
+  cheat
+    description:Infinite health
+    code:daa3/9d/bd
+
+cartridge sha256:981b39b22c9b17055c90a612b9c8ea6711541ff5196018043f3516ed238f3ce9
+  name:Bible Adventures (USA) (v1.2) (Unl)
+  cheat
+    description:Infinite health
+    code:dafe/9d/bd
+
+cartridge sha256:b56f867ad6b067f9ca7e46afb8e7a953fa281404232e2497c88e43448a2c3a57
+  name:Bible Adventures (USA) (v1.3) (Unl)
+  cheat
+    description:Infinite health
+    code:dae8/9d/bd
+
+cartridge sha256:18c134f8cc7effc0b90dcca86a27c305cbd7dadfb159689c89790c7fe4ff9b77
+  name:Bible Adventures (USA) (v1.4) (Unl)
+  cheat
+    description:Infinite health
+    code:dae4/9d/bd
+
+cartridge sha256:3bcce1ff03b55c20eeaefa44f35f19b3f06b3ff88a86ed51968bad9bd44d9144
+  name:Bubble Bath Babes (USA) (Unl)
+  cheat
+    description:Infinite credits
+    code:930b/c6/a5
+  cheat
+    description:View slideshow
+    code:8045/01/08+892a/85/e6+892b/64/88+8935/0b/0c
+
+cartridge sha256:935aa637ca8fb0ec4e0f3f09881c46c134b9a5821707e35899d8a7eedb17c6c3
+  name:Captain Comic - The Adventure (USA) (Unl)
+  cheat
+    description:Invincibility
+    code:ec00/ad
+  cheat
+    description:Infinite energy
+    code:ec06/bd
+  cheat
+    description:Infinite lives
+    code:e702/ad
+  cheat
+    description:Max blast level
+    code:0316/09
+  cheat
+    description:Infinite blast meter
+    code:0318/80
+  cheat
+    description:Have Door Key
+    code:05aa/01
+  cheat
+    description:Have Corkscrew
+    code:05ab/01
+  cheat
+    description:Have Power Boots
+    code:05ac/01
+  cheat
+    description:Have Teleport Wand
+    code:05b3/01
+  cheat
+    description:Have Lantern
+    code:05b4/01
+  cheat
+    description:Have Mystical Gems of Lascorbanos
+    code:05b5/01
+  cheat
+    description:Have Coins of Tenure
+    code:05b6/01
+  cheat
+    description:Have Crown of the Ages
+    code:05b7/01
+
+cartridge sha256:3668454e1904ada7f80ec2f94c4c2d45272d8a8c9e8d3b78ceebae5f890eb164
+  name:Castle of Deceit (USA) (Unl)
+  cheat
+    description:Infinite energy
+    code:dbf1/ce/ad
+  cheat
+    description:Infinite lives
+    code:d51f/ce/ad
+
+cartridge sha256:c20a8cc1b2dacb8a45e706b5763ac6c82c17b4ee4fb547ba4a853e4aabd6e35c
+  name:Challenge of the Dragon (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:e252/9d/ad
+  cheat
+    description:Infinite lives
+    code:e49a/99/b9
+  cheat
+    description:Always have Bombs
+    code:eca6/d0/50
+
+cartridge sha256:7f4b9307e228c737b5f6e4ef3efb40438aa2024b95b29f9aabf18a15af6ed185
+  name:Challenge of the Dragon (Asia) (PAL) (Unl)
+  cheat
+    description:Invincibility
+    code:a079/f0/60
+  cheat
+    description:Infinite health
+    code:a120/c6/a5
+  cheat
+    description:Infinite lives
+    code:8f1a/c6/a9
+
+cartridge sha256:ebdd748cd488c4acdc5d2c7321de692c1ab0b37044cf0c6ea043457176dbd306
+  name:Cheetahmen II (USA) (Unl)
+  cheat
+    description:Infinite health - level 1 and 2
+    code:a3bc/ce/ad
+  cheat
+    description:Infinite health - level 3
+    code:a3dc/ce/ad
+  cheat
+    description:Infinite health - level 4
+    code:a384/ce/ad
+  cheat
+    description:Infinite lives - level 1 and 2
+    code:b378/ce/ad
+  cheat
+    description:Infinite lives - level 3
+    code:b30f/ce/ad
+  cheat
+    description:Infinite lives - level 4
+    code:b2ad/ce/ad
+
+cartridge sha256:47ebed8be6679468d0627065153520a539b292244b51c54263c027e106b6ef65
+  name:Colorful Dragon (Asia) (PAL) (Unl)
+  cheat
+    description:Invincibility
+    code:9a02/f0/d0
+  cheat
+    description:Infinite lives
+    code:99bc/d6/b5
+  cheat
+    description:Start on level 2
+    code:8037/01/02
+  cheat
+    description:Start on level 5
+    code:8037/01/05
+  cheat
+    description:Start on level 10
+    code:8037/01/0a
+  cheat
+    description:Start on level 15
+    code:8037/01/0f
+  cheat
+    description:Start on level 20
+    code:8037/01/14
+
+cartridge sha256:9d832956a533292e740be553e0eb46d3a3d449578bcbaa9c7556a31d2b6a594d
+  name:D.J. Boy (Unl)
+  cheat
+    description:Infinite health
+    code:8662/9d/ad
+  cheat
+    description:Infinite time
+    code:8d1f/85/a5
+  cheat
+    description:Infinite lives
+    code:f788/c6/a5
+
+cartridge sha256:5dac8da44ac4e28bebf3d33c8e00e1fdffcc7baee3ff98bec5a10415d1226791
+  name:Deathbots (USA) (Unl)
+  cheat
+    description:Infinite energy
+    code:aa71/9d/bd
+  cheat
+    description:Infinite lives
+    code:a0a5/ce/ad
+  cheat
+    description:Infinite shots
+    code:ae30/99/b9
+
+cartridge sha256:32aeef6bae170d2628d9c678f0b198a61e787a498a995eb374518635f0b55199
+  name:Deathbots (USA) (Rev 1) (Unl)
+  cheat
+    description:Infinite energy
+    code:aa71/9d/bd
+  cheat
+    description:Infinite lives
+    code:a0a5/ce/ad
+  cheat
+    description:Infinite shots
+    code:ae30/99/b9
+
+cartridge sha256:262c1fcacd30a7f3018bd33ea6cf3fb86f8d9a77273d4f822268bff2c7deeb9a
+  name:Duck Maze (Australia) (Unl)
+  cheat
+    description:Invincibility
+    code:bbbe/20/ad
+  cheat
+    description:No breaking eggs from falling
+    code:bb88/2a/00
+
+cartridge sha256:99bba29bd92942f64d8a0beda7df3d8bff1ddcebcd3172eec16009fcb4a8bd3e
+  name:Dudes with Attitude (USA) (Unl)
+  cheat
+    description:Infinite energy
+    code:dd3d/d6/b5
+  cheat
+    description:Infinite time
+    code:d73d/c6/a5
+
+cartridge sha256:12c92261dfae9c01ce0172cd1e7d70192105ceb350b37c3f1cb2c72f9a10a6b9
+  name:Dudes with Attitude (USA) (Rev 1) (Unl)
+  cheat
+    description:Infinite energy
+    code:dd3d/d6/b5
+  cheat
+    description:Infinite time
+    code:d73d/c6/a5
+
+cartridge sha256:9e3c5574e31cbf74146808df930a70856d7196ec581e40cae3061743504bfba2
+  name:Exodus - Journey to the Promised Land (USA) (v4.0) (Unl)
+  cheat
+    description:Infinite lives
+    code:a834/d6/a5
+  cheat
+    description:Infinite time
+    code:ddfc/c6/a5
+
+cartridge sha256:0e3db714b82795111afa386f32534ece968d0f8ccb63dc70189d2010dc77a2a7
+  name:F15 City War (USA) (v1.0) (Unl)
+  cheat
+    description:Infinite lives
+    code:00e4/09
+
+cartridge sha256:3fd39ba2cdd6e220b07050d752a2c67d4a0f16a72ea9e519adf7390721cd9bdd
+  name:F15 City War (USA) (v1.1) (Unl)
+  cheat
+    description:Infinite lives
+    code:00e4/09
+
+cartridge sha256:e0b124ddd8ac7be9e0f0b14679a089c475646fe97425fea36674d75a0f481461
+  name:Fantastic Adventures of Dizzy, The (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:d0e0/c6/a5
+  cheat
+    description:Spiders, bats, ants and rats do no damage
+    code:f261/08/00
+  cheat
+    description:Play bubble sub-game only
+    code:a531/0e/7f
+  cheat
+    description:Play river sub-game only
+    code:a531/0e/7e
+  cheat
+    description:Play mine sub-game only
+    code:a531/0e/7d
+  cheat
+    description:Play puzzle sub-game ony
+    code:a531/0e/7a
+  cheat
+    description:Start with 10 stars instead of 100
+    code:fac6/64/0a
+  cheat
+    description:Start with 10 lives
+    code:8012/02/09
+
+cartridge sha256:ad14301747e0ae0f9b941c6002102d69916ca5e87b355156ab79311ce8dd7236
+  name:Fantasy Zone (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:e60f/c6/a9
+  cheat
+    description:Keep bought weapon for a life
+    code:e881/c6/a9
+  cheat
+    description:Keep bought weapon until next shop visit
+    code:e881/c6/a9+e618/85/c9
+  cheat
+    description:Autofire on all weapons
+    code:ee1c/01/00
+  cheat
+    description:Start with 1 life
+    code:e929/03/01
+  cheat
+    description:Start with 6 lives
+    code:e929/03/06
+  cheat
+    description:Start with 9 lives
+    code:e929/03/09
+  cheat
+    description:Start on level 2
+    code:e75f/00/01
+  cheat
+    description:Start on level 3
+    code:e75f/00/02
+  cheat
+    description:Start on level 4
+    code:e75f/00/03
+  cheat
+    description:Start on level 5
+    code:e75f/00/04
+  cheat
+    description:Start on level 6
+    code:e75f/00/05
+  cheat
+    description:Start on level 7
+    code:e75f/00/06
+
+cartridge sha256:2ae778c5a59fac650fa97e93d883381dbf96c5a0ad2c1db94fd822663904f7e5
+  name:Final Combat (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite health
+    code:a6d0/8d/ad+c794/8d/ad
+  cheat
+    description:Infinite lives
+    code:bb61/d6/a5
+  cheat
+    description:Infinite time
+    code:9d79/ce/ad
+
+cartridge sha256:9a0cc935c7d8452eff5b90f591bb6390d04362545ecd66b4be67a875ad63dc73
+  name:Fire Dragon (Asia) (Unl)
+  cheat
+    description:One fireball needed to finish the level
+    code:034f/04
+  cheat
+    description:Start on stage 50
+    code:034d/32
+
+cartridge sha256:3f5ed8b5207ff10ef490e7533bdd8419e5266101d4049d7689c01b5b352a4547
+  name:Fire Hawk (USA) (Unl)
+  cheat
+    description:Invincibility
+    code:ae19/d0/a9
+  cheat
+    description:Start with 1 life
+    code:8019/03/01
+  cheat
+    description:Start with 6 lives
+    code:8019/03/06
+  cheat
+    description:Start with 9 lives
+    code:8019/03/09
+  cheat
+    description:Infinite Missiles
+    code:04da/1f
+  cheat
+    description:Infinite ammo
+    code:04dc/1f
+  cheat
+    description:Infinite fuel
+    code:04f4/26
+
+cartridge sha256:023ff157d96a8efc847c7d7cbe89574091fe099996e6283c63e3fb58918f3502
+  name:Gaiapolis (Asia) (Unl)
+  cheat
+    description:Invincibility
+    code:8e47/f0/d0
+  cheat
+    description:Infinite time
+    code:c93e/c6/a5
+  cheat
+    description:Infinite credits
+    code:cea5/ce/ad
+  cheat
+    description:Hit anywhere
+    code:9a34/b0/50+9a35/24/18+9988/b0/50+a486/74/b8+a485/d9/4c+a487/05/a4+9989/58/32
+  cheat
+    description:Get items from anywhere
+    code:9a72/b0/50+9a73/29/1f
+
+cartridge sha256:a636a947acf1ef0b50e66d31699b64aa4f3b4865e2f2031385780974fb6d8c91
+  name:Galactic Crusader (USA) (Unl)
+  cheat
+    description:Invincibility
+    code:f13e/f0/d0
+  cheat
+    description:Infinite lives
+    code:debb/c6/a6
+
+cartridge sha256:fbc976422ca910d9391060898c8b58694f19b6e53a68bd33c457fb38dac1e5c6
+  name:Gauntlet (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:8f70/95/b5+9861/95/b5
+  cheat
+    description:Infinite keys
+    code:ab1e/00/09+ab21/a5/85
+  cheat
+    description:Infinite time in puzzle and treasure rooms
+    code:989f/c6/ea
+  cheat
+    description:Infinite time in puzzle and treasure rooms (alt)
+    code:00c0/1e
+  cheat
+    description:Have all power-ups - P1
+    code:00ac/3f
+  cheat
+    description:Have all power-ups - P2
+    code:00ad/3f
+  cheat
+    description:Have Invisibility - P1
+    code:00aa/01
+  cheat
+    description:Have Invisibility - P2
+    code:00ac/01
+  cheat
+    description:Have Invulnerability - P1
+    code:00aa/20
+  cheat
+    description:Have Invulnerability - P2
+    code:00ac/20
+  cheat
+    description:Have Reflective shot - P1
+    code:00aa/04
+  cheat
+    description:Have Reflective Shot - P2
+    code:00ac/04
+  cheat
+    description:Have Repulsiveness - P1
+    code:00aa/02
+  cheat
+    description:Have Repulsiveness - P2
+    code:00ac/02
+  cheat
+    description:Have Super Shot - P1
+    code:00aa/10
+  cheat
+    description:Have Super Shot - P2
+    code:00ac/10
+
+cartridge sha256:6e2b0e222eb8dba29c0ca363f1d7d59ed1fa307bafc150b5c8e1dd13638555a6
+  name:Happy Pairs (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite tries
+    code:b04a/c6/a5
+  cheat
+    description:Infinite time
+    code:beaf/c6/a5
+  cheat
+    description:Infinite autos
+    code:b175/c6/a5
+
+cartridge sha256:1c8e9b6c4c57850d4ab1dea011e0226970034a46fa29fab1d370c01fac90538d
+  name:Hell Fighter (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite lives
+    code:ad5f/ce/ad+ad62/ce/ad
+
+cartridge sha256:5b7afe0ff1fcf538fec60d085aa759522a2ab1cce511a6f210b672a256a87a8a
+  name:Joshua & the Battle of Jericho (USA) (v5.0) (Unl)
+  cheat
+    description:Exit always open
+    code:075f/05+003f/ff
+  cheat
+    description:Infinite Bombs
+    code:003e/01
+  cheat
+    description:Immune to explosions (disable at end of level)
+    code:004b/c2
+
+cartridge sha256:ec54ed32302aaeb2fa6e0d7e2ca3ea2d8df888e77859e158298ecb2fa322178e
+  name:Joshua & the Battle of Jericho (USA) (v6.0) (Unl)
+  cheat
+    description:Exit always open
+    code:075f/05+003f/ff
+  cheat
+    description:Infinite Bombs
+    code:003e/01
+  cheat
+    description:Immune to explosions (disable at end of level)
+    code:004b/c2
+
+cartridge sha256:4b00fa0ae20030af3406e95eb08f42ec473ec03d9063798ccd6c249648409af3
+  name:Journey to the West (Asia) (Unl)
+  cheat
+    description:Hit anywhere
+    code:b445/4c/00+b42c/65/00
+  cheat
+    description:Climb anywhere (except in boss fights)
+    code:a55c/29/a9+a552/60/ea
+
+cartridge sha256:8d36c0923103f370eb9fab5caeb2a8307cd1c7a30030db69bd5bc4f5ca46b1d2
+  name:Jovial Race (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite lives
+    code:9c7b/ce/ad
+  cheat
+    description:Start with 5 lives
+    code:836a/03/05
+  cheat
+    description:Start with 10 lives
+    code:836a/03/0a
+  cheat
+    description:Sart with 100 lives
+    code:836a/03/64
+
+cartridge sha256:a7bf6adcd838f055405963741dd3368730b0f9dc125ae7071832a9305a4c7292
+  name:Jovial Race (Unknown) (Unl)
+  cheat
+    description:Infinite lives
+    code:9c7b/ce/ad
+  cheat
+    description:Start with 5 lives
+    code:836a/03/05
+  cheat
+    description:Start with 10 lives
+    code:836a/03/0a
+  cheat
+    description:Sart with 100 lives
+    code:836a/03/64
+
+cartridge sha256:6cc3a973288a4c3c96a967bdf1be74eee909d3f5eb16ce0b405f20ce565c66cc
+  name:King Neptune's Adventure (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:d6ae/ce/ad+d4b3/ce/ad+d675/8d/ad
+  cheat
+    description:Infinite lives
+    code:ce5e/ce/ad
+  cheat
+    description:Infinite Bubble Bombs
+    code:f9a5/c6/a5
+  cheat
+    description:Start with all treasures (removes all items from level)
+    code:c4b3/f8/00
+  cheat
+    description:Start with 99 Bubble Bombs and Money
+    code:c4bc/00/63
+  cheat
+    description:Start with 99 Seahorses and Keys
+    code:cd3d/00/63
+
+cartridge sha256:d1002d407b544d70b4ddf4515665f6e18ac9c8ee2efd4be184e5240119fd6f70
+  name:King of Kings, The (USA) (v1.1) (Unl)
+  cheat
+    description:Infinite health
+    code:0512/06
+
+cartridge sha256:9ae715b6f2400d21f5d1ec426ecf310aa68ca46f3b37b37d5ae115f34049676b
+  name:King of Kings, The (USA) (v1.2) (Unl)
+  cheat
+    description:Infinite health
+    code:0512/06
+
+cartridge sha256:dc6859332ca69a8361bb3eb8ba1ff638f4bbbc7837a3a9f8a474e05f6bc379ea
+  name:King of Kings, The (USA) (v1.3) (Unl)
+  cheat
+    description:Infinite health
+    code:0512/06
+
+cartridge sha256:3249d267ca17098077bb94eee437f354066971bc03c0d06eada05efd92b0fa52
+  name:King of Kings, The (USA) (v5.0) (Unl)
+  cheat
+    description:Infinite health
+    code:0512/06
+
+cartridge sha256:28b3f1dde1488dd83422da47300d2e31ffce811bf2be37bf6d510019c2289f40
+  name:Klax (USA) (Unl)
+  cheat
+    description:Infinite drops
+    code:bca3/e6/a5
+  cheat
+    description:When starting on level 6, 0 drops allowed
+    code:8c7f/04/01
+  cheat
+    description:When starting on level 6, 5 drops allowed
+    code:8c7f/04/05
+  cheat
+    description:When starting on level 11, 0 drops allowed
+    code:8c92/05/01
+  cheat
+    description:When starting on level 11, 3 drops allowed
+    code:8c92/05/03
+  cheat
+    description:Start with 0 drops allowed
+    code:8c6d/03/01
+  cheat
+    description:Start with 5 drops allowed
+    code:8c6d/03/05
+  cheat
+    description:Level select
+    code:0000/00
+
+cartridge sha256:36769f543b6cfb08c5ef8673a11a7b27264bdd60323a62e9083b3da47eb33a8c
+  name:Lightgun Game 2 in 1 - Cosmocop + Cyber Monster (Asia) (Unl)
+  cheat
+    description:Cosmo Cop - Infinite lives
+    code:cbaf/ce/ad
+  cheat
+    description:Cosmo Cop - Infinite ammo
+    code:cb22/8d/ad
+  cheat
+    description:Cosmo Cop - Infinite energy
+    code:cb68/ce/ad+cb6b/ce/ad
+  cheat
+    description:Cyber Monster - Infinite misses
+    code:9550/ce/60
+
+cartridge sha256:745164dee8e4af6a7150d21e9ef082f56a51b01c5c32f28cdf4cd211bed3714d
+  name:Lightgun Game 2 in 1 - Tough Cop + Super Tough Cop (Asia) (Unl)
+  cheat
+    description:Infinite health
+    code:037a/06
+
+cartridge sha256:33c362ea3dbce2ac449e0d877d85904c26fcaf4b197e27b23efe9cbe67f20e15
+  name:Locksmith (Asia) (PAL) (Unl)
+  cheat
+    description:Infinite health
+    code:0573/23
+  cheat
+    description:Infinite time
+    code:056a/01
+  cheat
+    description:Instantly beat puzzle
+    code:0043/ff
+
+cartridge sha256:2eee5b14a90458088ac18c36352ab605ae4fe452a59f2675937acee0d15e94b6
+  name:Magic Carpet 1001 (Unl)
+  cheat
+    description:Invincibility
+    code:8487/38/60
+
+cartridge sha256:9a5d7367891f4d929fe5e3be5fe2988e3e6c0b0d70b7cd401976f16b3b5f0a9d
+  name:Magic Jewelry (Asia) (Unl)
+  cheat
+    description:Bypass checksum check
+    code:e7b0/d0/24+e7a8/d0/24
+  cheat
+    description:Speed never increases
+    code:ec87/6d/00+ec86/a6/a2
+  cheat
+    description:Disable Game Over
+    code:e7bf/90/24
+
+cartridge sha256:a385f0bed8d9afd110e649b73084191d80f41728139494f8fcb92d4815cd5197
+  name:Master Chu and the Drunkard Hu (USA) (Unl)
+  cheat
+    description:Invinicibility
+    code:90ed/fe/bd
+  cheat
+    description:Infinite health
+    code:9730/de/bd
+  cheat
+    description:Infinite lives
+    code:972e/d6/b5
+  cheat
+    description:Start on round 2
+    code:8103/01/02
+  cheat
+    description:Start on round 3
+    code:8103/01/03
+  cheat
+    description:Start on round 4
+    code:8103/01/04
+  cheat
+    description:Start on round 5
+    code:8103/01/05
+  cheat
+    description:Start on round 6
+    code:8103/01/06
+  cheat
+    description:Start on round 7
+    code:8103/01/07
+
+cartridge sha256:741fbfeeec83073cc3d8b407c0ddc9f78a0dc5b52d8196c6222bffb459b73ed1
+  name:Menace Beach (USA) (Unl)
+  cheat
+    description:Infinite health and one hit kills (levels 1-9, 11, 12 only)
+    code:e169/38/e0+e16b/11/f0+e16c/b0/06+e16d/02/ea+e16a/e5/00
+  cheat
+    description:Infinite health and one hit kills (level 10 only)
+    code:e169/38/e0+e16b/11/f0+e16c/b0/06+e16d/02/ea+e16a/e5/01
+  cheat
+    description:Multi-jump
+    code:f441/a5/a9+f442/62/82
+  cheat
+    description:Enable level skip (press B then Select)
+    code:fc49/f0/d0
+
+cartridge sha256:2d40d51736c2fa22f0cccf686e92efee3a7ebb8fa4eee5032206bab099a5aaf6
+  name:Mickey Mania 7 (Unl)
+  cheat
+    description:Infinite health
+    code:9186/ce/ad
+  cheat
+    description:Infinite lives
+    code:9507/ce/ad
+  cheat
+    description:Infinite Apples
+    code:9641/ce/ad
+
+cartridge sha256:1df64e9554fb9997ceeab9954b2b7f8aa6206509a15e09298014ba765d87c094
+  name:Micro Machines (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:a6d2/ce/2c
+  cheat
+    description:Qualify every race
+    code:fac5/02/04
+  cheat
+    description:Play with 9 lives
+    code:f7c8/03/09
+  cheat
+    description:Ruff Trux after every race
+    code:fab2/03/01
+  cheat
+    description:Kid out of game after every race
+    code:f857/03/01
+  cheat
+    description:Win Championship race
+    code:fad1/01/04
+  cheat
+    description:Faster Boat acceleration
+    code:801d/05/00
+  cheat
+    description:Faster Sports Car acceleration
+    code:801c/05/00
+  cheat
+    description:Faster Formula 1 acceleration
+    code:801e/05/00
+  cheat
+    description:Faster Turbo Wheels(tm) acceleration
+    code:801f/05/00
+  cheat
+    description:Faster 4x4 acceleration
+    code:8020/05/00
+  cheat
+    description:Faster Tank acceleration
+    code:8022/02/00
+  cheat
+    description:Faster Chopper acceleration
+    code:8023/05/00
+  cheat
+    description:Quicker Boat deceleration
+    code:8026/09/00
+  cheat
+    description:Quicker Sports Car deceleration
+    code:8025/09/00
+  cheat
+    description:Quicker Formula 1 deceleration
+    code:8027/09/00
+  cheat
+    description:Quicker Turbo Wheels deceleration
+    code:8028/09/00
+  cheat
+    description:Quicker 4x4 deceleration
+    code:8029/09/00
+  cheat
+    description:Quicker Tank deceleration
+    code:802b/02/00
+  cheat
+    description:Quicker Chopper deceleration
+    code:802c/0f/00
+  cheat
+    description:Higher bounce for Boats
+    code:8002/01/07
+  cheat
+    description:Higher bounce for Sports cars
+    code:8001/01/05
+  cheat
+    description:Higher bounce for Formula 1's
+    code:8003/01/07
+  cheat
+    description:Higher bounce for Turbo Wheels
+    code:8004/01/07
+  cheat
+    description:Higher bounce for 4x4's
+    code:8005/01/07
+  cheat
+    description:Higher bounce for Tanks
+    code:8007/01/07
+  cheat
+    description:Drive through vehicles
+    code:8dbd/19
+  cheat
+    description:Start on race 5
+    code:f7cd/00/04
+  cheat
+    description:Start on race 10
+    code:f7cd/00/09
+  cheat
+    description:Start on race 15
+    code:f7cd/00/0e
+  cheat
+    description:Start on race 20
+    code:f7cd/00/13
+  cheat
+    description:Start on race 25 (Final Race)
+    code:f7cd/00/18
+
+cartridge sha256:31b8afd6e571d3ce8ddea49b813ceda2d350df3c84ceb5d8dd2c7a3a6de5ba88
+  name:Micro Machines (USA) (Aladdin Compact Cartridge) (Unl)
+  cheat
+    description:Infinite lives
+    code:a67c/ce/2c
+  cheat
+    description:Qualify every race
+    code:fa25/02/04
+  cheat
+    description:Play with 9 lives
+    code:f728/03/09
+  cheat
+    description:Ruff Trux after every race
+    code:fa12/03/01
+  cheat
+    description:Kid out of game after every race
+    code:f7b7/03/01
+  cheat
+    description:Win Championship race
+    code:fa31/01/04
+  cheat
+    description:Faster Boat acceleration
+    code:801d/05/00
+  cheat
+    description:Faster Sports Car acceleration
+    code:801c/05/00
+  cheat
+    description:Faster Formula 1 acceleration
+    code:801e/05/00
+  cheat
+    description:Faster Turbo Wheels(tm) acceleration
+    code:801f/05/00
+  cheat
+    description:Faster 4x4 acceleration
+    code:8020/05/00
+  cheat
+    description:Faster Tank acceleration
+    code:8022/02/00
+  cheat
+    description:Faster Chopper acceleration
+    code:8023/05/00
+  cheat
+    description:Quicker Boat deceleration
+    code:8026/09/00
+  cheat
+    description:Quicker Sports Car deceleration
+    code:8025/09/00
+  cheat
+    description:Quicker Formula 1 deceleration
+    code:8027/09/00
+  cheat
+    description:Quicker Turbo Wheels deceleration
+    code:8028/09/00
+  cheat
+    description:Quicker 4x4 deceleration
+    code:8029/09/00
+  cheat
+    description:Quicker Tank deceleration
+    code:802b/02/00
+  cheat
+    description:Quicker Chopper deceleration
+    code:802c/0f/00
+  cheat
+    description:Higher bounce for Boats
+    code:8002/01/07
+  cheat
+    description:Higher bounce for Sports cars
+    code:8001/01/05
+  cheat
+    description:Higher bounce for Formula 1's
+    code:8003/01/07
+  cheat
+    description:Higher bounce for Turbo Wheels
+    code:8004/01/07
+  cheat
+    description:Higher bounce for 4x4's
+    code:8005/01/07
+  cheat
+    description:Higher bounce for Tanks
+    code:8007/01/07
+  cheat
+    description:Drive through vehicles
+    code:8dbd/19
+  cheat
+    description:Start on race 5
+    code:f72d/00/04
+  cheat
+    description:Start on race 10
+    code:f72d/00/09
+  cheat
+    description:Start on race 15
+    code:f72d/00/0e
+  cheat
+    description:Start on race 20
+    code:f72d/00/13
+  cheat
+    description:Start on race 25 (Final Race)
+    code:f72d/00/18
+
+cartridge sha256:5327792d8b5392cd5cec95ee254fc9f729777283c80f3d1f94d5147f3be73652
+  name:MiG 29 - Soviet Fighter (USA) (Unl)
+  cheat
+    description:Keep weapon after death
+    code:db59/c6/a5
+  cheat
+    description:Start with best weapon
+    code:c179/00/03
+  cheat
+    description:More time to refuel
+    code:908a/00/ff
+  cheat
+    description:Less time to refuel
+    code:908a/00/03
+  cheat
+    description:Start with 1 life
+    code:c174/03/00
+  cheat
+    description:Start with 6 lives
+    code:c174/03/05
+  cheat
+    description:Start with 9 lives
+    code:c174/03/08
+  cheat
+    description:Start with 255 lives
+    code:c174/03/fe
+  cheat
+    description:Start on mission 2
+    code:911f/a5/a9+9120/15/01+9122/51/da
+  cheat
+    description:Start on mission 3
+    code:911f/a5/a9+9120/15/02+9122/51/da
+  cheat
+    description:Start on mission 4
+    code:911f/a5/a9+9120/15/03+9122/51/da
+  cheat
+    description:Start on mission 5
+    code:911f/a5/a9+9120/15/04+9122/51/da
+  cheat
+    description:Start on mission 6
+    code:911f/a5/a9+9120/15/05+9122/51/da
+
+cartridge sha256:61e4e0a38f23eec3e931f21ad89cc901ca9f709dccfec952ed0e478172f04441
+  name:Mission Cobra (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:f17a/64/00+dd0e/64/00+db21/64/00
+  cheat
+    description:Infinite health (alt)
+    code:009a/63
+
+cartridge sha256:66cb74efa264a285a541277b935d4b6cc9c49a18653bce90b65f0de98b05aec0
+  name:Moon Ranger (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:d6bc/ce/ad
+
+cartridge sha256:3ec56ffa686a0e45dc5dfa02d3216b6c9302177b01a0bba506739a436c4ba730
+  name:Ms. Pac-Man (USA) (Unl)
+  cheat
+    description:Infinite lives for both players in alternating type games
+    code:82fe/c6/a5
+  cheat
+    description:Infinite lives for P2 only, in other type games
+    code:8303/ce/ad
+  cheat
+    description:Super fast turbo speed
+    code:f79d/4a/ea
+  cheat
+    description:Pinky out of game
+    code:863a/02/00
+  cheat
+    description:Sue out of game
+    code:865a/02/00
+  cheat
+    description:Start with 1 life - both players
+    code:86b7/02/00
+  cheat
+    description:Start with 6 lives - both players
+    code:86b7/02/05
+  cheat
+    description:Start with 9 lives - both players
+    code:86b7/02/08
+  cheat
+    description:Start with 1 life for P2 in 2P cooperative and competitive games
+    code:86ba/8d/8c
+  cheat
+    description:Only pink ghost escapes from center
+    code:002a/1b+023d/0e+002c/0b
+  cheat
+    description:Max score - P1
+    code:00d0/09+00d1/99+00d2/99
+  cheat
+    description:Infinite lives
+    code:00d4/09
+  cheat
+    description:Ghosts stay blue until eaten
+    code:00c5/01
+  cheat
+    description:Start on level 2
+    code:0127/01
+  cheat
+    description:Start on level 3
+    code:0127/02
+  cheat
+    description:Start on level 4
+    code:0127/03
+  cheat
+    description:Start on level 5
+    code:0127/04
+  cheat
+    description:Start on level 6
+    code:0127/05
+
+cartridge sha256:106a9cd2acc3373bf2fae05158bdf7587d5f645402ba8073aaee65cb8b7b11cd
+  name:Operation Secret Storm (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:e33a/99/b9
+  cheat
+    description:Infinite Gun ammo
+    code:e54f/99/bd
+  cheat
+    description:Infinite health
+    code:0520/17
+
+cartridge sha256:25506ac6d6413a73249d3ce6a4ecc40048982596e01d778eddb71baca084efa6
+  name:Pac-Man (USA) (Tengen) (Unl)
+  cheat
+    description:Invincibility
+    code:d2c6/f0/24
+  cheat
+    description:Get 8000+ points for eating ghosts
+    code:d2da/a4/a0+d2db/d9/06+d2e6/e6/a5
+  cheat
+    description:Ghosts are re-eatable until Power Pill wears off
+    code:d648/85/a5
+  cheat
+    description:Power pills last longer
+    code:d166/3c/70
+  cheat
+    description:Power pills last extra long
+    code:d166/3c/ff
+  cheat
+    description:Power pills don't last as long
+    code:d166/3c/20
+  cheat
+    description:Power pills don't work
+    code:e022/a5/60
+  cheat
+    description:Only 3 ghosts are edible
+    code:e02f/0f/0d
+  cheat
+    description:Only 2 ghosts are edible
+    code:e02f/0f/09
+  cheat
+    description:Power Pill effect always active
+    code:0088/15
+  cheat
+    description:Infinite lives
+    code:0067/03
+
+cartridge sha256:acc561f57cfd0490fdce649deb16fa9df309bba1695608213a0ff8066d662492
+  name:Pac-Mania (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:d941/c6/a5
+  cheat
+    description:Trapped ghosts
+    code:cfe3/78
+  cheat
+    description:Go through ghosts
+    code:d8b6/95
+  cheat
+    description:Ghosts worth 3200 points
+    code:d88f/01
+
+cartridge sha256:73f0f7b9150fb080541426cedc87bf528c63393e6112812112e8c1339d9bfbf5
+  name:Panda Prince, The (Shin-Shin) (Unl)
+  cheat
+    description:Infinite lives
+    code:979b/85/a5
+
+cartridge sha256:f1762c9f40e6e45a123b73a035841768e0132fa82c92f9d066a8718a7f99b6cc
+  name:Pesterminator (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:d799/ce/e6
+  cheat
+    description:Infinite lives
+    code:d0f5/ce/ae
+
+cartridge sha256:7dd47bac196af9874181e86f64402035e255814739828d5d00c03bac8689d40a
+  name:Pipe 5 (Asia) (Unl)
+  cheat
+    description:Infinite time (disable to finish round)
+    code:0080/09
+  cheat
+    description:1 distance needed
+    code:008e/01
+  cheat
+    description:Automatically finish round
+    code:008e/00
+
+cartridge sha256:23e457d854d5ce2bb8b81cef9fbbff0164171505a4d2d9e28ecbc2d062c81517
+  name:Popo Team (Asia) (Unl)
+  cheat
+    description:Invincibility
+    code:004f/01
+  cheat
+    description:Infinite lives
+    code:003f/03
+  cheat
+    description:Slower enemies
+    code:004d/01
+
+cartridge sha256:882a02c538cb097531da74d0ad685f6896dcfb7fa9b1a0cd540b4274968a7c13
+  name:Q Boy (Asia) (Unl)
+  cheat
+    description:Infinite lives
+    code:8f54/ce/ad
+  cheat
+    description:Infinite life
+    code:a9f2/ce/ad
+  cheat
+    description:Invincibility after first hit
+    code:95a7/c6/60
+  cheat
+    description:Infinite Breath Power
+    code:aa8e/ce/ad+aa91/ce/ad
+  cheat
+    description:Infinite Lift Power
+    code:ab22/ce/ad+ab25/ce/ad
+
+cartridge sha256:5dcea6d649f5ab79cf43dde76b92fb53b056fe92c6b49fd41f5158d9af0e9c32
+  name:Quattro Adventure (USA) (Unl)
+  cheat
+    description:Boomerang Kid - Infinite lives
+    code:ce12/ce/ad
+  cheat
+    description:Boomerang Kid - Start with 6 lives
+    code:c611/03/06
+  cheat
+    description:Linus Spacehead - Increase oxygen
+    code:c749/18/20
+  cheat
+    description:Linus Spacehead - Never lose oxygen
+    code:b5b2/01/00
+  cheat
+    description:Linus Spacehead - Never lose life in the water
+    code:c783/c6/a5
+  cheat
+    description:Linus Spacehead - Never lose life in the land
+    code:d325/c6/a5
+  cheat
+    description:Linus Spacehead - Start with 9 lives
+    code:c3c4/03/09
+  cheat
+    description:Super Robin Hood - Invincibility
+    code:f59d/49/60
+  cheat
+    description:Super Robin Hood - Infinite lives
+    code:c5fa/c6/a5
+  cheat
+    description:Super Robin Hood - 9 energy hearts, you may lose some hearts when you pick up new ones
+    code:c603/03/09
+  cheat
+    description:Super Robin Hood - Start with 1 life
+    code:c365/03/01
+  cheat
+    description:Super Robin Hood - Start with 6 lives
+    code:c365/03/06
+  cheat
+    description:Super Robin Hood - Start with 9 lives
+    code:c365/03/09
+  cheat
+    description:Treasure Island Dizzy - Invincible Dizzy Starts you in the Island In The Sky, walk left to arrive at the original starting point -
+    code:d7aa/00/01
+  cheat
+    description:Treasure Island Dizzy - Walk backwards
+    code:e874/a5/a9
+  cheat
+    description:Treasure Island Dizzy - Start with snorkel
+    code:d7bf/00/01
+  cheat
+    description:Treasure Island Dizzy - Start with axe
+    code:d7bf/00/01+f2cd/12/01
+  cheat
+    description:Treasure Island Dizzy - Start with dynamite
+    code:d7bf/00/01+f2cd/12/02
+  cheat
+    description:Treasure Island Dizzy - Start with heavy weight
+    code:d7bf/00/01+f2cd/12/05
+
+cartridge sha256:a537916d210a97e41e669c77f3ebcccb681dc44db4d8b758c2109baf8590d918
+  name:Quattro Arcade (USA) (Unl)
+  cheat
+    description:Go! Dizzy Go! - Always kill monsters
+    code:dbe5/ea+dbe6/ea
+  cheat
+    description:Go! Dizzy Go! - Walk through walls
+    code:d3e3/ea
+  cheat
+    description:Go! Dizzy Go! - Start with 1 life
+    code:c562/03/01
+  cheat
+    description:Go! Dizzy Go! - Start with 6 lives
+    code:c562/03/06
+  cheat
+    description:Go! Dizzy Go! - Start with 9 lives
+    code:c562/03/09
+  cheat
+    description:Go! Dizzy Go! - Start on world 1, stage 3
+    code:c58c/01/02
+  cheat
+    description:Go! Dizzy Go! - Start on world 1, stage 5
+    code:c58c/01/04
+  cheat
+    description:Go! Dizzy Go! - Start on world 2, stage 2
+    code:c58c/01/06
+  cheat
+    description:Go! Dizzy Go! - Start on world 2, stage 4
+    code:c58c/01/08
+  cheat
+    description:Go! Dizzy Go! - Start on world 4, stage 2
+    code:c58c/01/10
+  cheat
+    description:Go! Dizzy Go! - Start on world 4, stage 4
+    code:c58c/01/12
+  cheat
+    description:Go! Dizzy Go! - Start on world 5, stage 1
+    code:c58c/01/14
+  cheat
+    description:Go! Dizzy Go! - Start on world 5, stage 3
+    code:c58c/01/16
+  cheat
+    description:Go! Dizzy Go! - Start on world 5, stage 5
+    code:c58c/01/18
+  cheat
+    description:Sunt Buggies - Infinite lives
+    code:a09a/ce/ad
+  cheat
+    description:Sunt Buggies - Start with 1 life
+    code:ec4a/03/01
+  cheat
+    description:Sunt Buggies - Start with 6 lives
+    code:ec4a/03/06
+  cheat
+    description:Sunt Buggies - Start with 9 lives
+    code:ec4a/03/09
+  cheat
+    description:F-16 Renegade - Start with 2 lives - 1P game
+    code:c8b0/03/01
+  cheat
+    description:F-16 Renegade - Start with 7 lives - 1P game
+    code:c8b0/03/06
+  cheat
+    description:F-16 Renegade - Start with 10 lives - 1P game
+    code:c8b0/03/09
+  cheat
+    description:F-16 Renegade - Start on level 3
+    code:c8b5/01/03+c8c2/00/01
+  cheat
+    description:F-16 Renegade - Start on level 5
+    code:c8b5/01/05+c8c2/00/02
+  cheat
+    description:F-16 Renegade - Start on level 7
+    code:c8b5/01/07+c8c2/00/03
+  cheat
+    description:F-16 Renegade - Start on level 9
+    code:c8b5/01/09+c8c2/00/04
+  cheat
+    description:C.J.'s Elephant Antics - Infinite lives
+    code:e3c2/de/bd
+  cheat
+    description:C.J.'s Elephant Antics - Start in Switzerland
+    code:f801/00/01
+  cheat
+    description:C.J.'s Elephant Antics - Start in Egypt
+    code:f801/00/02
+  cheat
+    description:C.J.'s Elephant Antics - Start in Africa
+    code:f801/00/03
+  cheat
+    description:C.J.'s Elephant Antics - Always run fast after losing all lives
+    code:f31d/00/01
+  cheat
+    description:C.J.'s Elephant Antics - Super C.J. after losing all lives
+    code:f31d/00/0f
+  cheat
+    description:C.J.'s Elephant Antics - Start with 1 life
+    code:ee55/09/01
+  cheat
+    description:C.J.'s Elephant Antics - Start with 5 lives
+    code:ee55/09/05
+  cheat
+    description:C.J.'s Elephant Antics - Start with 15 lives
+    code:ee55/09/0f
+  cheat
+    description:C.J.'s Elephant Antics - Start with 20 lives
+    code:ee55/09/14
+
+cartridge sha256:d79be89ff83550ba185d19fb586d2b5f988ad6743125b5233ab3bfe2cb814c94
+  name:Raid 2020 (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:ddd8/ce/ad+dd4e/ce/ad
+  cheat
+    description:Infinite lives
+    code:d6ed/ce/ad
+
+cartridge sha256:46a38baf9067869e8ecdf227c3cd33f14df20998d0d27e645e47f6c57fd9703d
+  name:Road Runner (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:eb1b/ce/ad
+  cheat
+    description:Never lose seed
+    code:c1b0/c8/ea+eba5/c8/ea
+  cheat
+    description:Start with 1 life
+    code:e40e/05/00
+  cheat
+    description:Start with 12 lives
+    code:e40e/05/0b
+  cheat
+    description:Start with 18 lives
+    code:e40e/05/11
+  cheat
+    description:Start on level 5
+    code:e413/01/05
+  cheat
+    description:Start on level 10
+    code:e413/01/0a
+  cheat
+    description:Start on level 15
+    code:e413/01/0f
+  cheat
+    description:Start on level 20
+    code:e413/01/14
+  cheat
+    description:Start on level 25
+    code:e413/01/19
+  cheat
+    description:Start on level 30
+    code:e413/01/1e
+
+cartridge sha256:d0e5899cf6b756d697be9ad6700d1f612b1604496374da9606478d5cdbceebf1
+  name:Robodemons (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:051b/14
+
+cartridge sha256:e91bb35c7a95388c06f978c6cee73b1169fa7ec66b1808de5f504dcfefafbaab
+  name:Rolling Thunder (USA) (Unl)
+  cheat
+    description:Infinite health
+    code:a654/8d/ad
+  cheat
+    description:Infinite lives
+    code:eb73/c6/a5+eb53/c6/a5
+  cheat
+    description:Infinite time
+    code:e20f/c6/a5
+  cheat
+    description:Hit anywhere
+    code:a7d0/b8/40+d733/d0/60+a7d1/a8/a9
+  cheat
+    description:200 Machine Gun bullets on pick-up
+    code:e8d0/64/c8
+  cheat
+    description:300 Machine Gun bullets and 300 bullets on pick-up
+    code:a291/de/bd
+  cheat
+    description:Gain fewer bullets on pick-up
+    code:e8cf/32/14
+  cheat
+    description:Self-replenishing bullets
+    code:d766/01/32
+  cheat
+    description:Start with 200 bullets
+    code:e0aa/32/c8
+  cheat
+    description:Start with 200 bullets on each new life
+    code:eb4c/32/c8
+  cheat
+    description:Start with loads of ammunition
+    code:e0a2/00/03+eb44/00/03
+  cheat
+    description:Start with 1 life
+    code:e09b/03/01
+  cheat
+    description:Start with 6 lives
+    code:e09b/03/06
+  cheat
+    description:Start with 9 lives
+    code:e09b/03/09
+  cheat
+    description:Start with 1 life after continue
+    code:9257/03/01
+  cheat
+    description:Start with 6 lives after continue
+    code:9257/03/06
+  cheat
+    description:Start with 9 lives after continue
+    code:9257/03/09
+  cheat
+    description:Start with increased life meter
+    code:e88d/02/08
+  cheat
+    description:Start on story 1 area 02
+    code:8f6b/00/01+8f6d/b1/30
+  cheat
+    description:Start on story 1 area 03
+    code:8f6b/00/02+8f6d/b1/30
+  cheat
+    description:Start on story 1 area 04
+    code:8f6b/00/03+8f6d/b1/30
+  cheat
+    description:Start on story 1 area 05
+    code:8f6b/00/04+8f6d/b1/30
+  cheat
+    description:Start on story 2 area 06
+    code:8f6b/00/05+8f6d/b1/30
+  cheat
+    description:Start on story 2 area 07
+    code:8f6b/00/06+8f6d/b1/30
+  cheat
+    description:Start on story 2 area 08
+    code:8f6b/00/07+8f6d/b1/30
+  cheat
+    description:Start on story 2 area 09
+    code:8f6b/00/08+8f6d/b1/30
+  cheat
+    description:Start on story 2 area 10
+    code:8f6b/00/09+8f6d/b1/30
+  cheat
+    description:Start on story 3 area 01
+    code:8dca/00/01
+  cheat
+    description:Infinite health (not versus bullets)
+    code:0089/02
+  cheat
+    description:Infinite bullets
+    code:00a0/32
+  cheat
+    description:Infinite time (alt)
+    code:059b/09+059c/09+059d/09
+  cheat
+    description:Infinite lives (alt)
+    code:05bc/09
+
+cartridge sha256:7ee2b81ef8ab8e9c009ecd42ed5fa5a34e3e48896c3567fac1ca7520c1de870e
+  name:Secret Scout in the Temple of Demise (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:e4a7/99/b9
+  cheat
+    description:View the ending
+    code:d5e7/00/58
+
+cartridge sha256:2b85e6411f42597ceab01f5eb3ba9fd362b07340c0665fd533a3c3d5f2b1e972
+  name:Shinobi (USA) (Unl)
+  cheat
+    description:Infinite life
+    code:d771/ce/ad
+  cheat
+    description:Infinite lives
+    code:920b/ce/ad
+  cheat
+    description:Turbo running
+    code:9dcf/03/05
+  cheat
+    description:Start with double life
+    code:902e/06/0c+91f4/06/0c
+  cheat
+    description:Start with 1 life
+    code:907b/02/00
+  cheat
+    description:Start with 6 lives
+    code:907b/02/05
+  cheat
+    description:Start with 9 lives
+    code:907b/02/08
+
+cartridge sha256:69399633df5ea1baf37d3e47087257e245fca1f260cac0f539e8e4437ddf2a28
+  name:Silent Assault (USA) (Unl)
+  cheat
+    description:Infinite lives
+    code:002e/08
+  cheat
+    description:Infinite Grenades
+    code:00d9/04
+
+cartridge sha256:06fddd300a6d1cbe1be92e851e3d5d2defcc7e682903b569bc9fe71a26addd74
+  name:Skull & Crossbones (USA) (Unl)
+  cheat
+    description:Infinite continues
+    code:977e/ce/ad
+  cheat
+    description:Infinite weapons
+    code:869d/de/bd
+  cheat
+    description:Infinite time
+    code:f21c/ce/ad
+  cheat
+    description:Faster timer
+    code:f218/3c/20
+  cheat
+    description:Slower timer
+    code:f218/3c/70
+  cheat
+    description:Half energy for Red Dog and One Eye
+    code:97e3/32/19+9782/32/19
+  cheat
+    description:Double energy for Red Dog and One Eye
+    code:97e3/32/63+9782/32/19
+  cheat
+    description:Better super-jump
+    code:87ef/c8/b8+87e4/c8/b8
+  cheat
+    description:1 continue
+    code:97a6/05/01
+  cheat
+    description:9 continues
+    code:97a6/05/09
+
+cartridge sha256:14a86d409cc9e6ae2428f301e4aaa77290fe38ec3e660d971af9abda772747e2
+  name:Spiritual Warfare (USA) (v5.1) (Unl)
+  cheat
+    description:Infinite energy
+    code:c4f9/85/a5
+  cheat
+    description:Infinite Vial Of God's Wrath
+    code:cdd8/c6/a5
+  cheat
+    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
+    code:b525/00/ff
+  cheat
+    description:Start with max energy
+    code:b558/06/18
+
+cartridge sha256:5a82a1b0386407f1036c3d0ae750741c0835336f062d77480e1dd5b4da507386
+  name:Spiritual Warfare (USA) (v6.0) (Unl)
+  cheat
+    description:Invincibility
+    code:ed9a/02/00
+  cheat
+    description:Infinite energy
+    code:c4bb/85/a5
+  cheat
+    description:Infinite Vial Of God's Wrath
+    code:b4df/00/ff
+  cheat
+    description:Infinite Vials
+    code:cd9a/c6/a5
+  cheat
+    description:Hit anywhere with fruits
+    code:cc5c/06/24
+  cheat
+    description:Items are free
+    code:9161/b0/50
+  cheat
+    description:Any answer is correct
+    code:929e/4c/ad
+  cheat
+    description:Walk through walls (not diagonally)
+    code:e5d4/c9/60
+  cheat
+    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
+    code:b4df/00/ff
+  cheat
+    description:Start with max energy
+    code:b512/06/18
+
+cartridge sha256:3c74b191d7d4cb6c34e6b2d5f76d9c86be63f8ebb61581c49810f0dd58c538c1
+  name:Spiritual Warfare (USA) (v6.1) (Unl)
+  cheat
+    description:Infinite energy
+    code:c4e3/85/a5
+  cheat
+    description:Infinite Vial Of God's Wrath
+    code:cdc2/c6/a5
+  cheat
+    description:Start with all armors, 7 of each fruit, all items, 99 Keys, 255 God's Wrath, 99 Birds
+    code:b50f/00/ff
+  cheat
+    description:Start with max energy
+    code:b542/06/18
+
+cartridge sha256:07401bfb725c61711ce0a1d5eade14e09cd0f1b90991691339077a0b7dea5e58
+  name:Street Heroes (Asia) (Unl)
+  cheat
+    description:Infinite health
+    code:00d6/59
+  cheat
+    description:One hit kills
+    code:00d7/00
+  cheat
+    description:Only one win needed to advance
+    code:0059/02
+
+cartridge sha256:f3a140c16012c4e4fb0deda64cbee7d9ebe78d2fb717b80b12a9f938d57b78bb
+  name:Stunt Kids (USA) (Unl)
+  cheat
+    description:Infinite time - P1
+    code:927f/de/bd
+  cheat
+    description:Infinite time - P2
+    code:932f/de/bd
+  cheat
+    description:Infinite lives
+    code:ac55/ce/ad
+  cheat
+    description:Always have 9 coins after a race
+    code:d673/8c/8e
+  cheat
+    description:Coins worth nothing on pick-up
+    code:9948/ee/ad
+  cheat
+    description:Start with 1 life instead of 3
+    code:cad7/02/00
+  cheat
+    description:Start with 6 lives
+    code:cad7/02/05
+  cheat
+    description:Start with 9 lives
+    code:cad7/02/09
+  cheat
+    description:Start with 0 turbos instead of 3
+    code:d089/03/00
+  cheat
+    description:Start with 6 turbos
+    code:d089/03/06
+  cheat
+    description:Start with 9 turbos
+    code:d089/03/09
+
+cartridge sha256:4d16627301ff5def67247039b3a4b1cce4d20fbb867f4c5b7bcab43a8575f59f
+  name:Sunday Funday - The Ride (USA) (Unl)
+  cheat
+    description:Enable level skip (press B then Select)
+    code:fafb/f0/d0
+
+cartridge sha256:7c14c7e39943e7247c92d907f3362eab09a7306fb606d4a899a918fc6afd356a
+  name:Super Shinobi, The (Unl)
+  cheat
+    description:Infinite health
+    code:04f5/09
+  cheat
+    description:Infinite magic
+    code:010d/09
+  cheat
+    description:Infinite Shurikens
+    code:0109/09+010b/09
+  cheat
+    description:Always have powered-up Shurikens
+    code:00af/01
+
+cartridge sha256:d1defc7a6c6f96f89386c79ac887aa41a72fefa93ba22a8a08159ac891f73613
+  name:Super Sprint (USA) (Unl)
+  cheat
+    description:Infinite continues
+    code:eb06/ce/ad
+  cheat
+    description:6 continues
+    code:d059/03/07
+  cheat
+    description:No continues
+    code:d059/03/01
+  cheat
+    description:More obstacles on tracks
+    code:cecf/00/05+ced3/8d/2c
+  cheat
+    description:Even more obstacles on tracks
+    code:cecf/00/0a+ced3/8d/2c
+  cheat
+    description:Lots and lots of obstacles on tracks
+    code:cecf/00/0f+ced3/8d/2c
+
+cartridge sha256:9daa4bec3013ae7ef498318432f438d70374af294d1dce28edd3c466aaf6b740
+  name:Tetris - The Soviet Mind Game (USA) (Unl)
+  cheat
+    description:Lines are cleared when a piece is dropped
+    code:87ab/2a/00+87af/26/00
+  cheat
+    description:Always get straight pieces
+    code:9940/f0/a9+9941/f9/01
+  cheat
+    description:Speed stays the same
+    code:9b24/24/a9+9b25/2f/21
   cheat
-    description:Start on World 7
-    code:0635/06
-
-cartridge sha256:bdc9dfed1b03db470a1453da0252b3e9fcd0869d02a48622476ddaa350e53374
-  name:Zanac (USA)
+    description:Press down to stop blocks from falling
+    code:8109/04
   cheat
-    description:Invincibility + Hit anywhere
-    code:825c/b0/38+825d/31/60+821b/99/ad
+    description:Press down to rotate block very fast
+    code:8109/19
   cheat
-    description:Infinite lives
-    code:8f8f/c6/a9
+    description:Next piece is a straight line block - P1
+    code:0066/01
   cheat
-    description:Start with Straight Crusher
-    code:9490/00/01
+    description:Next piece is a T-block - P1
+    code:0066/02
   cheat
-    description:Start with Field Shutter
-    code:9490/00/02
+    description:Next piece is a square block - P1
+    code:0066/03
   cheat
-    description:Start with the Circular
-    code:9490/00/03
+    description:Next piece is a J-block - P1
+    code:0066/04
   cheat
-    description:Start with the Vibrator
-    code:9490/00/04
+    description:Next piece is a L-block - P1
+    code:0066/05
   cheat
-    description:Start with the Rewinder
-    code:9490/00/05
+    description:Next piece is a S-block - P1
+    code:0066/06
   cheat
-    description:Start with the Plasma Flash
-    code:9490/00/06
+    description:Next piece is a Z-block - P1
+    code:0066/07
   cheat
-    description:Start with rapid fire
-    code:9490/00/07
+    description:Next piece is a straight line block - P2
+    code:0067/01
   cheat
-    description:Start with 1 life
-    code:cb89/03/01
+    description:Next piece is a T-block - P2
+    code:0067/02
   cheat
-    description:Start with 6 lives
-    code:cb89/03/06
+    description:Next piece is a square block - P2
+    code:0067/03
   cheat
-    description:Start with 9 lives
-    code:cb89/03/09
+    description:Next piece is a J-block - P2
+    code:0067/04
   cheat
-    description:Invincibility
-    code:0764/00
-
-cartridge sha256:4cfc55e1521e58039d502f2a5ff16c233b84c0a05b1048185c75c971f3814c16
-  name:Zelda II - The Adventure of Link (USA)
+    description:Next piece is a L-block - P2
+    code:0067/05
   cheat
-    description:Infinite health
-    code:e335/e5/ea+e336/0c/ea
+    description:Next piece is a S-block - P2
+    code:0067/06
   cheat
-    description:Almost infinite health
-    code:e330/e2
+    description:Next piece is a Z-block - P2
+    code:0067/07
   cheat
-    description:Infinite magic
-    code:8df0/f9/2c
+    description:Start at level 0
+    code:042c/30+042d/30
   cheat
-    description:Infinite magic (alt)
-    code:8df5/8d/ad
+    description:Start at level 1
+    code:042c/30+042d/31
   cheat
-    description:Infinite magic and health in battle
-    code:d3f8/08
+    description:Start at level 2
+    code:042c/30+042d/32
   cheat
-    description:Infinite lives
-    code:ca44/ce/ad
+    description:Start at level 3
+    code:042c/30+042d/33
   cheat
-    description:Infinite Keys after obtaining one
-    code:d9e4/ce/ad
+    description:Start at level 4
+    code:042c/30+042d/34
   cheat
-    description:Keys not necessary to open doors
-    code:d9e3/ea+d9e2/e2
+    description:Start at level 5
+    code:042c/30+042d/35
   cheat
-    description:Gain over 2048 EXP when you defeat an enemy most of the time
-    code:d465/00/08
+    description:Start at level 6
+    code:042c/30+042d/36
   cheat
-    description:Gain 256 EXP when you defeat an enemy most of the time
-    code:d45e/8d/ea
+    description:Start at level 7
+    code:042c/30+042d/37
   cheat
-    description:Gain more than 256 EXP for every EXP
-    code:d465/00/01
+    description:Start at level 8
+    code:042c/30+042d/38
   cheat
-    description:Don't lose EXP points while leveling up
-    code:9f6b/8d/ad+9f74/8d/ad
+    description:Start at level 9
+    code:042c/30+042d/39
   cheat
-    description:All sword levels do massive damage
-    code:e732/f9/ed
+    description:Start at level 10
+    code:042c/31+042d/30
   cheat
-    description:Hit anywhere (press up if you get stuck at a Palace entrance)
-    code:e6a4/b0/50
+    description:Start at level 11
+    code:042c/31+042d/31
   cheat
-    description:Multi-jump
-    code:9530/f7/f5+9535/ad/a9+9536/7d/fb+9537/05/8d+9538/10/7d+9539/02/05
+    description:Start at level 12
+    code:042c/31+042d/32
   cheat
-    description:Mega-jump
-    code:953b/30/20
+    description:Start at level 13
+    code:042c/31+042d/33
   cheat
-    description:Link can fly (hold A)
-    code:953b/30/00
+    description:Start at level 14
+    code:042c/31+042d/34
   cheat
-    description:Faster text (when talking to people)
-    code:b6be/df/00
+    description:Start at level 15
+    code:042c/31+042d/35
   cheat
-    description:Walk through walls in Overworld
-    code:871e/02/00
+    description:Start at level 16
+    code:042c/31+042d/36
   cheat
-    description:Swap Shield spell for Fire spell
-    code:8e48/8d/f1+8e49/8e/97
+    description:Start at level 17
+    code:042c/31+042d/37
   cheat
-    description:Swap Shield spell for Spell spell
-    code:8e48/8d/73+8e49/8e/8e
+    description:Max score at 999,999 - P1
+    code:0418/39+0419/39+041a/39+041b/39+041c/39+041d/39
   cheat
-    description:Swap Shield spell for Fairy spell
-    code:8e48/8d/23+8e49/8e/91
+    description:Max score at 999,999 - P2
+    code:041e/39+041f/39+0420/39+0421/39+0422/39+0423/39
+
+cartridge sha256:e115dbf3de0a4e674ff3f9081d7f97b89f636d81ce524119c0af4ef799490695
+  name:Thunder Warrior (Asia) (Unl)
   cheat
-    description:Swap Shield spell for Life spell
-    code:8e48/8d/5d+8e49/8e/8e
+    description:Invincibility
+    code:b3be/f0/d0+b3c3/f0/d0
   cheat
-    description:Swap Shield spell for Thunder spell
-    code:8e48/8d/e6+8e49/8e/91
+    description:Infinite health
+    code:93a4/ce/ad
   cheat
-    description:Start with all spells
-    code:a60d/bd/de
+    description:Infinite magic
+    code:89c0/ce/ad
   cheat
-    description:Start with 1 life
-    code:c359/03/01
+    description:Infinite lives
+    code:807d/ce/ad
   cheat
-    description:Start with 6 lives
-    code:c359/03/06
+    description:Keep weapon after losing a life
+    code:9bd1/8d/60
   cheat
     description:Start with 9 lives
-    code:c359/03/09
+    code:a438/03/09
+
+cartridge sha256:fe052f7f6b4b41dcbc009860e0c997c31e2e236eb46d713137ee773cce96105e
+  name:Toobin' (USA) (Unl)
   cheat
-    description:Invincibility (disable when fighting your shadow)
-    code:0518/03
+    description:Infinite lives
+    code:e5b4/c6/a5
   cheat
-    description:Infinite health (alt)
-    code:0774/ff
+    description:Infinite cans
+    code:a502/c6/a5
   cheat
-    description:Infinite magic (alt 2)
-    code:0773/ff
+    description:Turbo left and right movement
+    code:a04e/20/30+a06b/20/30
   cheat
-    description:Infinite lives (alt)
-    code:0700/04
+    description:Start with 2 lives
+    code:e612/03/01
   cheat
-    description:Infinite Keys
-    code:0793/09
+    description:Start with 6 lives
+    code:e612/03/06
   cheat
-    description:No enemies in overworld
-    code:0086/00+0087/00+0088/00+0089/00
+    description:Start with 9 lives
+    code:e612/03/09
   cheat
-    description:Jump spell always on
-    code:076f/02
+    description:Start with 18 cans
+    code:e616/06/12
   cheat
-    description:Max sword level
-    code:0777/ff
+    description:Start with 12 cans
+    code:e616/06/0c
   cheat
-    description:Max magic level
-    code:0778/ff
+    description:Start with 1 can
+    code:e616/06/01
   cheat
-    description:Max life level
-    code:0779/ff
+    description:Start on level 2
+    code:a810/00/01
   cheat
-    description:Have up/down thrust
-    code:0796/ff
+    description:Start on level 4
+    code:a810/00/03
   cheat
-    description:Have Shield spell
-    code:077b/01
+    description:Start on level 6
+    code:a810/00/05
   cheat
-    description:Have Jump spell
-    code:077c/01
+    description:Start on level 8
+    code:a810/00/07
   cheat
-    description:Have Life spell
-    code:077d/01
+    description:Invincibility (glitchy)
+    code:02d3/00
   cheat
-    description:Have Fairy spell
-    code:077e/01
+    description:Infinite patches
+    code:006e/09
   cheat
-    description:Have Fire spell
-    code:077f/01
+    description:Infinite cans (alt)
+    code:004c/ff
   cheat
-    description:Have Reflect spell
-    code:0780/01
+    description:Have all letters
+    code:006d/7f
   cheat
-    description:Have Spell spell
-    code:0781/01
+    description:Faster shots
+    code:003f/02
   cheat
-    description:Have Thunder spell
-    code:0782/01
+    description:Don't go into dying animation (use with invincibility)
+    code:004a/00+004b/00
+
+cartridge sha256:0b5d1465b23e31f24e1caecf1490f97a60deb97ba873a36fa948adb016e9c0d2
+  name:Trolls on Treasure Island (USA) (Unl)
   cheat
-    description:Max magic jars
-    code:0783/08
+    description:Infinite time
+    code:ce13/86/dd
   cheat
-    description:Have Boots
-    code:0788/01
+    description:Only one jewel needed to clear stage
+    code:df77/d0/f0
+
+cartridge sha256:f4de2a91acb2eb3024fb75231859a30c130c0169be0e6ad24330805c8f766e03
+  name:Ultimate Stuntman, The (USA) (Unl)
   cheat
-    description:Have Candle
-    code:0785/01
+    description:Infinite time
+    code:d2ff/ce/ad
   cheat
-    description:Have Cross
-    code:078a/01
+    description:Infinite 'Crez' weapon until end of stage
+    code:dbaf/ce/ad
   cheat
-    description:Have Flute
-    code:0789/01
+    description:Minimum damage taken
+    code:a9b4/e5/e9+a9b5/ff/01
   cheat
-    description:Have Glove
-    code:0786/01
+    description:Don't lose a life on Ground Pursuit, Boat and Hang Glider stages
+    code:8cb1/ce/2c
   cheat
-    description:Have Hammer
-    code:078b/01
+    description:9 seconds on clock pick-up
+    code:a8ad/06/09
   cheat
-    description:Have Key
-    code:078c/01
+    description:Full energy on pick-up
+    code:a992/02/00
   cheat
-    description:Have Raft
-    code:0787/01
+    description:Shield lasts longer on Human Fly stages
+    code:ae2e/78/ff
   cheat
-    description:Can enter final palace
-    code:0794/00
+    description:Shield lasts a shorter time on Human Fly stages
+    code:ae2e/78/40
   cheat
-    description:One hit kill on final boss
-    code:00c2/01
-
-cartridge sha256:939dcb88fce04f9c91e1ce49016b12e301afc4861684576ab5862eada5860db7
-  name:Zen - Intergalactic Ninja (USA)
+    description:Don't lose a life against end-of-stage bosses and on street combat stages
+    code:affc/ce/ad
   cheat
-    description:Invincibility
-    code:8849/11/00
+    description:Don't lose a life on Human Fly stages
+    code:bdaa/ce/ad
   cheat
-    description:Hit anywhere
-    code:b281/2f/00+b297/19/00+b2ac/b0/a9
+    description:Start with 1 life (first credit only)
+    code:ecff/02/00
   cheat
-    description:One hit kills
-    code:b4c7/02/00
+    description:Start with 6 lives (first credit only)
+    code:ecff/02/05
   cheat
-    description:Infinite health
-    code:b377/8d/2c
+    description:Start with 9 lives (first credit only)
+    code:ecff/02/08
+
+cartridge sha256:8104dc7acdaea42b027b2cc7b05dc6a1ffdba6e74b35581c2bb0250df89a28fa
+  name:Vindicators (USA) (Unl)
   cheat
     description:Infinite lives
-    code:9654/c6/a5+a617/c6/a5
+    code:8634/d6/b4
   cheat
-    description:9 lives allowed in options menu
-    code:bc07/05/0a
+    description:Automatic fuel replenishment
+    code:cd38/d6/f6
   cheat
-    description:Slower timer
-    code:ae7e/81/ff
+    description:Never lose Stars
+    code:8a1e/f9/2c
   cheat
-    description:Faster timer
-    code:ae7e/81/6f
+    description:Quicker shot re-load
+    code:c63f/12/02
   cheat
-    description:Even faster timer
-    code:ae7e/81/5f
+    description:Turbo speed
+    code:c64b/0c/1b
   cheat
-    description:Zen does increased damage - isometric stages
-    code:8bb1/04/08
+    description:Start with increased shot range
+    code:c647/08/20
   cheat
-    description:Zen does mega damage - isometric stages
-    code:8bb1/04/14
+    description:Start with 10 Stars
+    code:81e0/85/e6
   cheat
-    description:Jab attack does more damage - horizontal stages
-    code:ad4b/04/08
+    description:Start with 80 Shots
+    code:c63f/12/08+c641/d0/d6
   cheat
-    description:Mega jab attack damage - horizontal stages
-    code:ad4b/04/14
+    description:Start with 80 Bombs
+    code:c63f/12/08+c641/d0/d4
   cheat
-    description:Fewer hits in shield
-    code:b40c/03/01+be2f/03/01
+    description:Start with 1 life
+    code:c64f/02/00
   cheat
-    description:Double hits in shield
-    code:b40c/03/06+be2f/03/06
+    description:Start with 6 lives
+    code:c64f/02/05
   cheat
-    description:Triple hits in shield
-    code:b40c/03/09+be2f/03/09
+    description:Start with 9 lives
+    code:c64f/02/08
 
-cartridge sha256:d0850075065ecbd125a33accc952de5d012527be45aa14a1b8223a9adf1643ae
-  name:Zoda's Revenge - StarTropics II (USA)
+cartridge sha256:50b6f1f87fb14c8ff74a54e60b85139e11adcaecb62eb24174aeb58a20b7698f
+  name:Wally Bear and the No! Gang (USA) (Unl)
   cheat
     description:Invincibility
-    code:a140/ed/ae
+    code:a7bf/d0/10
   cheat
-    description:Infinite lives
-    code:e4c9/ce/ad
+    description:Multi-jump
+    code:a57a/85/24
   cheat
-    description:Infinite weapons
-    code:a536/de/bd
+    description:Collect items from anywhere
+    code:b775/5c/00+b77b/56/00
+
+cartridge sha256:1f349392d49c60c3e52a06be6ab4d914bf71ffd5b73857964ec9d604806b131b
+  name:Xybots (USA) (Proto) (Unl)
   cheat
-    description:Hit anywhere
-    code:b40d/b9/4c+b40f/70/b4+b40e/b4/8b
+    description:Infinite lives and second shots
+    code:f385/de/bd
   cheat
-    description:Walk faster - battle mode
-    code:a83c/01/02
+    description:Infinite Keys - both players
+    code:9004/de/ad
   cheat
-    description:Jump faster and further - battle mode
-    code:a83c/00/01
+    description:Infinite money - both players
+    code:8986/9d/bd
   cheat
-    description:Throw Tink's axe further
-    code:b0cb/40/60
+    description:Infinite Slow Energy Drain and Zap power
+    code:e96b/9d/ad
   cheat
-    description:1 star gives energy
-    code:a651/05/01+a655/05/01
+    description:Infinite Warning Arrows and Level Mappers
+    code:b6bb/9d/ad
   cheat
-    description:Throw Tink's Axe faster (can't be combined with other Axe code)
-    code:b038/41/f1
+    description:Infinite Enemy Mappers and Guard Mapper
+    code:e950/99/b9
   cheat
-    description:Tink's Axe splits into 3 little ones when thrown (can't be combined with other Axe code)
-    code:b038/41/43
+    description:Start with 6 lives and 6 second shots
+    code:e15c/12/66
   cheat
-    description:Throw Tink's splitting-Axe faster (can't be combined with other Axe code)
-    code:b038/f1/f3
+    description:Start with 3 Slow Energy Drain and 4 Zap power - P1
+    code:e152/02/24
   cheat
-    description:Start with 1 life (Only effective in battle mode on first life)
-    code:e266/03/01
+    description:Start with 3 Slow Energy Drain and 4 Zap power - P2
+    code:e157/12/24
   cheat
-    description:Start with 6 lives (Only effective in battle mode on first life)
-    code:e266/03/06
+    description:Start with 6 Warning Arrows and Level Mappers
+    code:e164/21/66
   cheat
-    description:Start with 9 lives (Only effective in battle mode on first life)
-    code:e266/03/09
-
-cartridge sha256:a18476a3b06ec3d9767ed6b6cf528dd204440a64e7781a3b18c1250c3c18f2ec
-  name:Zombie Hunter (Japan)
+    description:Start with 6 Enemy Mappers and have Guard Mapper
+    code:e16c/01/16
   cheat
-    description:Invincibility
-    code:dfaa/13/00
+    description:Start with 99 Keys, $99 and 2,544,300 points
+    code:e4ac/00/63
   cheat
-    description:One hit kills
-    code:dd8d/60/ea
+    description:Start with 4 extra Speed, extra Armor, extra Shot Speed, extra Shot Power and Wide Shot
+    code:e130/00/44
   cheat
-    description:Hit anywhere
-    code:dec1/10/00+deba/16/00+decb/b0/a9
+    description:Start at last level
+    code:e176/01/36
   cheat
-    description:Walk on air, jump to fall down
-    code:e070/f3/00
-
-cartridge sha256:91eae4e0e59dadd5de7cdbe71fe57e304d741ae5107928e29e0f6ff8813151a9
-  name:Zombie Nation (USA)
+    description:Infinite health - P1
+    code:0192/ff
   cheat
-    description:Infinite health
-    code:eda0/a5/60
+    description:Infinite health - P2
+    code:0193/ff
   cheat
-    description:Infinite continues
-    code:053b/05
-
-cartridge sha256:061d1c3865ad62ae883bb30b9f0071e8f7aa572f15f61bfb91b3a755eeeb5eb0
-  name:Zunou Senkan Galg (Japan)
+    description:Infinite Keys - P1
+    code:0196/09
   cheat
-    description:Invincibility
-    code:860d/68/60+cf59/a5/60
+    description:Infinite Keys - P2
+    code:0197/09
   cheat
-    description:Infinite lives
-    code:80f8/c6/a9
+    description:Infinite Money - P1
+    code:0194/ff
+  cheat
+    description:Infinite Money - P2
+    code:0195/ff
 
+// Super Famicom
 cartridge sha256:8808783f789ca6413364a7abea240f6f7291b5906026f360ba8cfdd2791fc179
   name:2020 Super Baseball (USA)
   cheat
@@ -78420,6 +78426,7 @@ cartridge sha256:b27e2e957fa760f4f483e2af30e03062034a6c0066984f2e284cc2cb430b205
     description:Infinite Weed Wacker - P2
     code:7e1cf2/50
 
+// Game Boy
 cartridge sha256:c8497ee7a25d1eb7cf4ef1604b2fd7836a64c5c30e8334f7a48f1ed2a27b5cc1
   name:1942 (USA, Europe)
   cheat
@@ -79353,18 +79360,6 @@ cartridge sha256:e10716e26a1b4edddc8c8fbf24cdad4decd054e555c77a6c0cd64fe283fa228
     description:Infinite lives
     code:1a31/35/7e
 
-cartridge sha256:ffb240c74aac4527af2c268e1d7cf4f1b44229ff624d22966b5679e301617465
-  name:Beast Fighter (Asia) (Unl)
-  cheat
-    description:Invincibility
-    code:57f6/c8/00+5800/c0/00+57ff/00/01+57fe/fe/3e
-  cheat
-    description:Infinite time
-    code:2db6/c8/c9
-  cheat
-    description:One hit kills on bosses
-    code:46fa/02/00
-
 cartridge sha256:1cbdbf760d84d62933f1b66410a80dda4185b138d964e6ec51780d391d09143d
   name:Beauty and the Beast - A Board Game Adventure (USA) (SGB Enhanced)
   cheat
@@ -81954,18 +81949,6 @@ cartridge sha256:6b13a664a3c74e6e61b019f4024f65b3fb301ee5518a9cf9e2a27dc41bbdd56
     description:Start with 9 hearts - 1st life
     code:039b/04/09
 
-cartridge sha256:5b3e8b6b22662607933bac74e03059ceb7274b6ed3dc2c8752cab45472584a3a
-  name:Karate Joe (Europe) (Unl)
-  cheat
-    description:Invincibility
-    code:1e82/35/77+1e80/28/3e
-  cheat
-    description:Hit anywhere
-    code:0fc1/d2/fa+0fbb/da/fa+0fa2/d2/fa+0f9c/da/fa
-  cheat
-    description:Hit anywhere - Boss
-    code:10e6/d2/fa+10e0/da/fa+10c7/d2/fa+10c1/da/fa
-
 cartridge sha256:5759871de43dd530b6e54bbd8025018576c0e5f97a2aa7128c091df33554ea91
   name:Ken Griffey Jr.'s Slugfest (USA)
   cheat
@@ -87495,3 +87478,16 @@ cartridge sha256:1f6a79c3a548718eea5cf530f30d67f8fd76ee9693cd2da164caef36d310a50
     description:Start with 10 lives
     code:0591/03/0a
 
+// Game Boy (Unlicensed)
+cartridge sha256:5b3e8b6b22662607933bac74e03059ceb7274b6ed3dc2c8752cab45472584a3a
+  name:Karate Joe (Europe) (Unl)
+  cheat
+    description:Invincibility
+    code:1e82/35/77+1e80/28/3e
+  cheat
+    description:Hit anywhere
+    code:0fc1/d2/fa+0fbb/da/fa+0fa2/d2/fa+0f9c/da/fa
+  cheat
+    description:Hit anywhere - Boss
+    code:10e6/d2/fa+10e0/da/fa+10c7/d2/fa+10c1/da/fa
+
diff --git a/higan/emulator/cheat.hpp b/higan/emulator/cheat.hpp
index 929c678..bb71eb4 100644
--- a/higan/emulator/cheat.hpp
+++ b/higan/emulator/cheat.hpp
@@ -5,6 +5,7 @@ namespace Emulator {
 struct Cheat {
   struct Code {
     uint addr;
+    uint dataWidth;
     uint data;
     maybe<uint> comp;
   };
@@ -17,8 +18,8 @@ struct Cheat {
     codes.reset();
   }
 
-  auto append(uint addr, uint data, maybe<uint> comp = nothing) -> void {
-    codes.append({addr, data, comp});
+  auto append(uint addr, uint dataWidth, uint data, maybe<uint> comp = nothing) -> void {
+    codes.append({addr, dataWidth, data, comp});
   }
 
   auto assign(const string_vector& list) -> void {
@@ -26,15 +27,21 @@ struct Cheat {
     for(auto& entry : list) {
       for(auto code : entry.split("+")) {
         auto part = code.split("/");
-        if(part.size() == 2) append(part[0].hex(), part[1].hex());
-        if(part.size() == 3) append(part[0].hex(), part[2].hex(), part[1].hex());
+        //reject cheats where the data is an odd number of digits long
+        if(part[1].size() & 1) continue;
+        //reject cheats with mismatched data and comp sizes
+        if(part.size() == 3 && (part[1].size() != part[2].size())) continue;
+
+        uint dataWidth = part[1].size() >> 1;
+        if(part.size() == 2) append(part[0].hex(), dataWidth, part[1].hex());
+        if(part.size() == 3) append(part[0].hex(), dataWidth, part[2].hex(), part[1].hex());
       }
     }
   }
 
-  auto find(uint addr, uint comp) -> maybe<uint> {
+  template<uint dataWidth> auto find(uint addr, uint comp) -> maybe<uint> {
     for(auto& code : codes) {
-      if(code.addr == addr && (!code.comp || code.comp() == comp)) {
+      if(code.addr == addr && code.dataWidth == dataWidth && (!code.comp || code.comp() == comp)) {
         return code.data;
       }
     }
diff --git a/higan/emulator/emulator.hpp b/higan/emulator/emulator.hpp
index d5d21a6..a82fbba 100644
--- a/higan/emulator/emulator.hpp
+++ b/higan/emulator/emulator.hpp
@@ -18,7 +18,7 @@ namespace Emulator {
   static const string Website = "http://byuu.org/";
 
   //incremented only when serialization format changes
-  static const string SerializerVersion = "101";
+  static const string SerializerVersion = "009.10(101)";
 
   namespace Constants {
     namespace Colorburst {
diff --git a/higan/emulator/interface.hpp b/higan/emulator/interface.hpp
index f6cd076..8ad037d 100644
--- a/higan/emulator/interface.hpp
+++ b/higan/emulator/interface.hpp
@@ -4,6 +4,7 @@ namespace Emulator {
 
 struct Interface {
   struct Information {
+    bool preAlpha;
     string manufacturer;
     string name;
     bool overscan;
@@ -14,10 +15,17 @@ struct Interface {
     } capability;
   } information;
 
+  struct Domain { enum : uint {
+    Home,
+    Portable,
+    Arcade,
+  };};
+
   struct Medium {
     uint id;
     string name;
     string type;  //extension
+    uint domain;
   };
   vector<Medium> media;
 
@@ -31,9 +39,12 @@ struct Interface {
     vector<Input> inputs;
   };
 
+  enum : bool { Hardwired, PlugAndPlay };
+
   struct Port {
     uint id;
     string name;
+    bool plugAndPlay;
     vector<Device> devices;
   };
   vector<Port> ports;
@@ -46,6 +57,7 @@ struct Interface {
     virtual auto audioSample(const double*, uint) -> void {}
     virtual auto inputPoll(uint, uint, uint) -> int16 { return 0; }
     virtual auto inputRumble(uint, uint, uint, bool) -> void {}
+    virtual auto deviceChanged(uint port, uint device) -> void {}
     virtual auto dipSettings(Markup::Node) -> uint { return 0; }
     virtual auto notify(string text) -> void { print(text, "\n"); }
   };
@@ -59,6 +71,7 @@ struct Interface {
   auto audioSample(const double* samples, uint channels) -> void { return bind->audioSample(samples, channels); }
   auto inputPoll(uint port, uint device, uint input) -> int16 { return bind->inputPoll(port, device, input); }
   auto inputRumble(uint port, uint device, uint input, bool enable) -> void { return bind->inputRumble(port, device, input, enable); }
+  auto deviceChanged(uint port, uint device) -> void { return bind->deviceChanged(port, device); }
   auto dipSettings(Markup::Node node) -> uint { return bind->dipSettings(node); }
   template<typename... P> auto notify(P&&... p) -> void { return bind->notify({forward<P>(p)...}); }
 
@@ -89,6 +102,7 @@ struct Interface {
   virtual auto power() -> void {}
   virtual auto reset() -> void {}
   virtual auto run() -> void {}
+  virtual auto rotate() -> void {}
 
   //time functions
   virtual auto rtc() -> bool { return false; }
@@ -108,6 +122,9 @@ struct Interface {
 
   //shared functions
   auto videoColor(uint16 r, uint16 g, uint16 b) -> uint32;
+
+  //debugger functions
+  virtual auto exportMemory() -> void {}
 };
 
 //nall/vfs shorthand constants for open(), load()
diff --git a/higan/emulator/scheduler.hpp b/higan/emulator/scheduler.hpp
index b90fbc7..aceb646 100644
--- a/higan/emulator/scheduler.hpp
+++ b/higan/emulator/scheduler.hpp
@@ -13,6 +13,7 @@ struct Scheduler {
     Step,
     Frame,
     Synchronize,
+    Debugger,
   };
 
   inline auto synchronizing() const -> bool { return _mode == Mode::SynchronizeSlave; }
diff --git a/higan/fc/GNUmakefile b/higan/fc/GNUmakefile
index 9eed6a4..171af99 100644
--- a/higan/fc/GNUmakefile
+++ b/higan/fc/GNUmakefile
@@ -1,13 +1,23 @@
-processors += r6502
+processors += mos6502 z80
 
 objects += fc-interface fc-system fc-controller
-objects += fc-memory fc-cartridge fc-cpu fc-apu fc-ppu
-
-obj/fc-interface.o:  fc/interface/interface.cpp $(call rwildcard,fc/interface/)
-obj/fc-system.o:     fc/system/system.cpp $(call rwildcard,fc/system/)
-obj/fc-controller.o: fc/controller/controller.cpp $(call rwildcard,fc/controller/)
-obj/fc-memory.o:     fc/memory/memory.cpp $(call rwildcard,fc/memory/)
-obj/fc-cartridge.o:  fc/cartridge/cartridge.cpp $(call rwildcard,fc/cartridge/)
-obj/fc-cpu.o:        fc/cpu/cpu.cpp $(call rwildcard,fc/cpu/)
-obj/fc-apu.o:        fc/apu/apu.cpp $(call rwildcard,fc/apu/)
-obj/fc-ppu.o:        fc/ppu/ppu.cpp $(call rwildcard,fc/ppu/)
+objects += fc-cartridge fc-memory
+objects += fc-cpu fc-apu fc-ppu
+objects += fc-expansion
+objects += fc-vssystem fc-playchoice10 fc-famicombox
+
+obj/fc-interface.o:    fc/interface/interface.cpp $(call rwildcard,fc/interface/)
+obj/fc-system.o:       fc/system/system.cpp $(call rwildcard,fc/system/)
+obj/fc-controller.o:   fc/controller/controller.cpp $(call rwildcard,fc/controller/)
+obj/fc-cartridge.o:    fc/cartridge/cartridge.cpp $(call rwildcard,fc/cartridge/)
+obj/fc-memory.o:       fc/memory/memory.cpp $(call rwildcard,fc/memory/)
+
+obj/fc-cpu.o:          fc/cpu/cpu.cpp $(call rwildcard,fc/cpu/)
+obj/fc-apu.o:          fc/apu/apu.cpp $(call rwildcard,fc/apu/)
+obj/fc-ppu.o:          fc/ppu/ppu.cpp $(call rwildcard,fc/ppu/)
+
+obj/fc-expansion.o:    fc/expansion/expansion.cpp $(call rwildcard,fc/expansion/)
+
+obj/fc-vssystem.o:     fc/arcade/vssystem/vssystem.cpp $(call rwildcard,fc/arcade/vssystem/)
+obj/fc-playchoice10.o: fc/arcade/playchoice10/playchoice10.cpp $(call rwildcard,fc/arcade/playchoice10/)
+obj/fc-famicombox.o:   fc/arcade/famicombox/famicombox.cpp $(call rwildcard,fc/arcade/famicombox/)
diff --git a/higan/fc/apu/apu.cpp b/higan/fc/apu/apu.cpp
index 2f4e4c6..ea92b64 100644
--- a/higan/fc/apu/apu.cpp
+++ b/higan/fc/apu/apu.cpp
@@ -2,6 +2,8 @@
 
 namespace Famicom {
 
+APU apu;
+
 #include "envelope.cpp"
 #include "sweep.cpp"
 #include "pulse.cpp"
@@ -9,7 +11,6 @@ namespace Famicom {
 #include "noise.cpp"
 #include "dmc.cpp"
 #include "serialization.cpp"
-APU apu;
 
 APU::APU() {
   for(uint amp : range(32)) {
@@ -63,7 +64,11 @@ auto APU::main() -> void {
 }
 
 auto APU::tick() -> void {
-  Thread::step(12);
+  switch(system.region()) {
+  case System::Region::NTSC:  Thread::step(12); break;
+  case System::Region::PAL:   Thread::step(16); break;
+  case System::Region::Dendy: Thread::step(15); break;
+  }
   synchronize(cpu);
 }
 
@@ -75,6 +80,37 @@ auto APU::setSample(int16 sample) -> void {
   cartridgeSample = sample;
 }
 
+auto APU::load(Markup::Node node) -> bool {
+  if(system.vs()) return true;
+
+  string versionString;
+  if(system.fc()) {
+    if(system.region() == System::Region::NTSC)  versionString = node["apu/ntsc-version"].text();
+    if(system.region() == System::Region::PAL)   versionString = node["apu/pal-version"].text();
+    if(system.region() == System::Region::Dendy) versionString = node["apu/dendy-version"].text();
+  } else {
+    versionString = node["apu/version"].text();
+  }
+
+  //NTSC
+  if(versionString == "RP2A03")         version = Version::RP2A03;
+  if(versionString == "RP2A03A")        version = Version::RP2A03A;
+  if(versionString == "RP2A03C")        version = Version::RP2A03C;
+  if(versionString == "RP2A03E")        version = Version::RP2A03E;
+  if(versionString == "RP2A03F")        version = Version::RP2A03F;
+  if(versionString == "RP2A03G")        version = Version::RP2A03G;
+  if(versionString == "RP2A03H")        version = Version::RP2A03H;
+
+  //PAL
+  if(versionString == "RP2A07G")        version = Version::RP2A07G;
+
+  //Dendy
+  if(versionString == "UA6527P")        version = Version::UA6527P;
+  if(versionString == "TA-03NP1-6527P") version = Version::TA_03NP1_6527P;
+
+  return true;
+}
+
 auto APU::power() -> void {
   filter.hipassStrong = 0;
   filter.hipassWeak = 0;
@@ -89,7 +125,13 @@ auto APU::power() -> void {
 
 auto APU::reset() -> void {
   create(APU::Enter, system.colorburst() * 6.0);
-  stream = Emulator::audio.createStream(1, system.colorburst() / 2.0);
+  double clockDivider;
+  switch(system.region()) {
+  case System::Region::NTSC:  clockDivider = 12.0; break;
+  case System::Region::PAL:   clockDivider = 16.0; break;
+  case System::Region::Dendy: clockDivider = 15.0; break;
+  }
+  stream = Emulator::audio.createStream(1, (system.colorburst() * 6.0) / clockDivider);
 
   pulse[0].reset();
   pulse[1].reset();
@@ -204,8 +246,10 @@ auto APU::writeIO(uint16 addr, uint8 data) -> void {
   }
 
   case 0x400e: {
-    noise.shortMode = data & 0x80;
-    noise.period = data & 0x0f;
+    //TODO: Check if the RP2A03E and prior versions support short mode.
+    //Currently assuming that the RP2A03F is bugged. See noise.cpp for bug implementation.
+    if(version != Version::RP2A03) noise.shortMode = data.bit(7);
+    noise.period = data.bits(0,3);
     return;
   }
 
@@ -266,7 +310,7 @@ auto APU::writeIO(uint16 addr, uint8 data) -> void {
       frame.irqPending = false;
       setIRQ();
     }
-    frame.divider = FrameCounter::NtscPeriod;
+    frame.divider = system.region() != System::Region::PAL ? FrameCounter::NtscPeriod : FrameCounter::PalPeriod;
     return;
   }
 
@@ -306,7 +350,7 @@ auto APU::clockFrameCounter() -> void {
   noise.envelope.clock();
 
   if(frame.counter == 0) {
-    if(frame.mode & 2) frame.divider += FrameCounter::NtscPeriod;
+    if(frame.mode & 2) frame.divider += system.region() == System::Region::NTSC ? FrameCounter::NtscPeriod : FrameCounter::PalPeriod;
     if(frame.mode == 0) {
       frame.irqPending = true;
       setIRQ();
@@ -318,7 +362,7 @@ auto APU::clockFrameCounterDivider() -> void {
   frame.divider -= 2;
   if(frame.divider <= 0) {
     clockFrameCounter();
-    frame.divider += FrameCounter::NtscPeriod;
+    frame.divider += system.region() == System::Region::NTSC ? FrameCounter::NtscPeriod : FrameCounter::PalPeriod;
   }
 }
 
@@ -332,7 +376,7 @@ const uint16 APU::noisePeriodTableNTSC[16] = {
 };
 
 const uint16 APU::noisePeriodTablePAL[16] = {
-  4, 7, 14, 30, 60, 88, 118, 148, 188, 236, 354, 472, 708,  944, 1890, 3778,
+  4, 8, 14, 30, 60, 88, 118, 148, 188, 236, 354, 472, 708,  944, 1890, 3778,
 };
 
 const uint16 APU::dmcPeriodTableNTSC[16] = {
diff --git a/higan/fc/apu/apu.hpp b/higan/fc/apu/apu.hpp
index d0cc83f..afc2307 100644
--- a/higan/fc/apu/apu.hpp
+++ b/higan/fc/apu/apu.hpp
@@ -1,6 +1,24 @@
 struct APU : Thread {
   shared_pointer<Emulator::Stream> stream;
 
+  enum class Version : uint {
+    //NTSC
+    RP2A03,
+    RP2A03A,
+    RP2A03C,
+    RP2A03E,
+    RP2A03F,
+    RP2A03G,
+    RP2A03H,
+
+    //PAL
+    RP2A07G,
+
+    //Dendy
+    UA6527P,
+    TA_03NP1_6527P,
+  } version;
+
   APU();
 
   static auto Enter() -> void;
@@ -9,6 +27,7 @@ struct APU : Thread {
   auto setIRQ() -> void;
   auto setSample(int16 sample) -> void;
 
+  auto load(Markup::Node) -> bool;
   auto power() -> void;
   auto reset() -> void;
 
@@ -17,6 +36,8 @@ struct APU : Thread {
 
   auto serialize(serializer&) -> void;
 
+  bool side; // VS. System; 0: main, 1: sub
+
   struct Filter {
     auto runHipassStrong(int sample) -> int;
     auto runHipassWeak(int sample) -> int;
@@ -169,7 +190,10 @@ struct APU : Thread {
   struct FrameCounter {
     auto serialize(serializer&) -> void;
 
-    enum : uint { NtscPeriod = 14915 };  //~(21.477MHz / 6 / 240hz)
+    enum : uint {
+      NtscPeriod = 14915,  //~(21.477MHz / 6 / 240hz)
+      PalPeriod = 18473, // conjectural
+    };
 
     bool irqPending;
 
diff --git a/higan/fc/apu/dmc.cpp b/higan/fc/apu/dmc.cpp
index e829ebd..dc0c233 100644
--- a/higan/fc/apu/dmc.cpp
+++ b/higan/fc/apu/dmc.cpp
@@ -57,7 +57,8 @@ auto APU::DMC::clock() -> uint8 {
       }
     }
 
-    periodCounter = dmcPeriodTableNTSC[period];
+    if(system.region() != System::Region::PAL) periodCounter = dmcPeriodTableNTSC[period];
+    else                                       periodCounter = dmcPeriodTablePAL[period];
   }
 
   if(lengthCounter > 0 && !dmaBufferValid && dmaDelayCounter == 0) {
@@ -76,7 +77,8 @@ auto APU::DMC::reset() -> void {
   irqPending = 0;
 
   period = 0;
-  periodCounter = dmcPeriodTableNTSC[0];
+  if(system.region() != System::Region::PAL) periodCounter = dmcPeriodTableNTSC[0];
+  else                                       periodCounter = dmcPeriodTablePAL[0];
   irqEnable = 0;
   loopMode = 0;
   dacLatch = 0;
diff --git a/higan/fc/apu/noise.cpp b/higan/fc/apu/noise.cpp
index dcd9ce9..2b53ffc 100644
--- a/higan/fc/apu/noise.cpp
+++ b/higan/fc/apu/noise.cpp
@@ -12,14 +12,15 @@ auto APU::Noise::clock() -> uint8 {
   if(--periodCounter == 0) {
     uint feedback;
 
-    if(shortMode) {
+    //TODO: Check if the RP2A03E and prior versions support short mode.
+    if(shortMode && apu.version != APU::Version::RP2A03 && apu.version != APU::Version::RP2A03F) {
       feedback = ((lfsr >> 0) & 1) ^ ((lfsr >> 6) & 1);
     } else {
       feedback = ((lfsr >> 0) & 1) ^ ((lfsr >> 1) & 1);
     }
 
     lfsr = (lfsr >> 1) | (feedback << 14);
-    periodCounter = apu.noisePeriodTableNTSC[period];
+    periodCounter = system.region() != System::Region::PAL ? apu.noisePeriodTableNTSC[period] : apu.noisePeriodTablePAL[period];
   }
 
   return result;
diff --git a/higan/fc/apu/pulse.cpp b/higan/fc/apu/pulse.cpp
index 4650128..14f20ae 100644
--- a/higan/fc/apu/pulse.cpp
+++ b/higan/fc/apu/pulse.cpp
@@ -9,7 +9,9 @@ auto APU::Pulse::clock() -> uint8 {
   if(lengthCounter == 0) return 0;
 
   static const uint dutyTable[] = {1, 2, 4, 6};
-  uint8 result = (dutyCounter < dutyTable[duty]) ? envelope.volume() : 0;
+  static const uint umcDutyTable[] = {1, 4, 2, 6};
+  uint dutyLimit = apu.version != APU::Version::UA6527P ? dutyTable[duty] : umcDutyTable[duty];
+  uint8 result = (dutyCounter < dutyLimit) ? envelope.volume() : 0;
   if(sweep.pulsePeriod < 0x008) result = 0;
 
   if(--periodCounter == 0) {
diff --git a/higan/fc/arcade/arcade.hpp b/higan/fc/arcade/arcade.hpp
new file mode 100644
index 0000000..c2ecb86
--- /dev/null
+++ b/higan/fc/arcade/arcade.hpp
@@ -0,0 +1,3 @@
+#include <fc/arcade/vssystem/vssystem.hpp>
+#include <fc/arcade/playchoice10/playchoice10.hpp>
+#include <fc/arcade/famicombox/famicombox.hpp>
diff --git a/higan/fc/arcade/famicombox/famicombox.cpp b/higan/fc/arcade/famicombox/famicombox.cpp
new file mode 100644
index 0000000..8e3b762
--- /dev/null
+++ b/higan/fc/arcade/famicombox/famicombox.cpp
@@ -0,0 +1,399 @@
+#include <fc/fc.hpp>
+
+namespace Famicom {
+
+FamicomBox famicombox;
+
+#include "serialization.cpp"
+
+auto FamicomBox::Enter() -> void {
+  while(true) scheduler.synchronize(), famicombox.main();
+}
+
+auto FamicomBox::main() -> void {
+  if(--counter == 0) {
+    if(--attractionTimer == 0x7fff) trap(Exception::AttractionTimer);
+    //if(++watchdog        == 0x0000) trap(Exception::Watchdog);
+    counter = 3 * 0x2000;
+  }
+  step(1);
+  synchronize(cpu);
+}
+
+auto FamicomBox::init() -> void {
+  dip = 0x3da;
+}
+
+auto FamicomBox::load(Markup::Node node) -> bool {
+  if(auto bios_prg = node["prg/rom/name"].text()) {
+    if(auto fp = interface->open(ID::System, bios_prg, File::Read, File::Required)) {
+      fp->read(famicombox.bios_prg, 32768);
+    } else return false;
+  }
+
+  if(auto bios_chr = node["chr/rom/name"].text()) {
+    if(auto fp = interface->open(ID::System, bios_chr, File::Read, File::Required)) {
+      fp->read(famicombox.bios_chr, 8192);
+    } else return false;
+  }
+
+  return true;
+}
+
+auto FamicomBox::unload() -> void {
+}
+
+auto FamicomBox::power() -> void {
+  exceptionEnable = 0x00;
+}
+
+auto FamicomBox::reset() -> void {
+  create(FamicomBox::Enter, system.colorburst() * 6.0);
+
+  function<auto (uint16, uint8) -> uint8> reader;
+  function<auto (uint16, uint8) -> void> writer;
+
+  reader = {&FamicomBox::wramRead, this};
+  writer = {&FamicomBox::wramWrite, this};
+  bus.map(reader, writer, "0800-1fff");
+
+  reader = {&FamicomBox::portRead, this};
+  writer = {&FamicomBox::portWrite, this};
+  bus.map(reader, writer, "4016-4017");
+  bus.map(reader, writer, "5000-5fff");
+
+  reader = {&FamicomBox::sramRead, this};
+  writer = {&FamicomBox::sramWrite, this};
+  bus.map(reader, writer, "6000-7fff");
+
+  reader = {&FamicomBox::cartridgeRead, this};
+  writer = {&FamicomBox::cartridgeWrite, this};
+  bus.map(reader, writer, "8000-ffff");
+
+  // The cartridge is only mapped to $8000-ffff, not $4018-ffff.
+
+  exceptionTrap = 0xff;
+  ramProtect = 7;
+  counter = 3 * 0x2000;
+  attractionTimer.bits(14,7) = 0xff;
+  watchdog.bits(13,10) = 0x00;
+
+  cartridgeSelect = 1;
+  cartridgeRowSelect = 1;
+  registerLock = false;
+}
+
+auto FamicomBox::setDip(uint10 dip) -> void {
+  this->dip = dip;
+}
+
+auto FamicomBox::trap(Exception exceptionId) -> void {
+  if(exceptionId != Exception::ControllerRead) print("Trap Exception ", (uint)exceptionId, "\n");
+  if(exceptionId != Exception::Watchdog
+  && exceptionEnable.bit((int)exceptionId) == (exceptionId == Exception::Interrupt6_82Hz)) return;
+  exceptionTrap.bit((int)exceptionId) = 0;
+  cartridge.reset();
+  cpu.reset();
+  apu.reset();
+}
+
+auto FamicomBox::wramRead(uint16 addr, uint8 data) -> uint8 {
+  if(addr >= 0x0800 && addr <= 0x1fff) print("read  $", hex(addr, 4U), "\n");
+  switch(addr & 0xf800) {
+  case 0x0000: data = cpu.ram[addr]; break;
+  case 0x0800:
+  case 0x1000:
+  case 0x1800: data = bios_ram[addr - 0x800]; break;
+  }
+}
+
+auto FamicomBox::portRead(uint16 addr, uint8 data) -> uint8 {
+  if((addr & 0xf000) == 0x5000) print("read  $", hex(addr, 4U), "\n");
+
+  if(addr == 0x4016 || addr == 0x4017) {
+    data = cpu.readCPU(addr, data);
+    if(data == 0x4017 && !dip.bit(9)) data.bits(4,3) = 0;
+    watchdog.bits(13,10) = 0;
+    trap(Exception::ControllerRead);
+  }
+
+  if(!registerLock) {
+    switch(addr & 0xf007) {
+
+    //Exception trap flags
+    case 0x5000: {
+      data = exceptionTrap;
+      exceptionTrap = 0xff;
+      return data;
+    }
+
+    //Not used
+    case 0x5001: {
+      return data;
+    }
+
+    //DIP Switches
+    case 0x5002: {
+      return dip & 0xff;
+    }
+
+    //Keyswitch position and coin module status
+    case 0x5003: {
+      return 0x08;
+    }
+
+    //Test connector (25-pin) inputs 2, 15, 3, 16, 4, 17, 5, 18
+    case 0x5004: {
+      return data;
+    }
+
+    //Expansion connector (50-pin) input pin 28
+    case 0x5005: {
+      return data;
+    }
+
+    //Expansion connector (50-pin) input pin 27
+    case 0x5006: {
+      return data;
+    }
+
+    //Misc. status
+    case 0x5007: {
+      return 0x00;
+    }
+
+    }
+  }
+
+  return data;
+}
+
+auto FamicomBox::sramRead(uint16 addr, uint8 data) -> uint8 {
+  return test_ram[addr & 0x1fff];
+}
+
+auto FamicomBox::cartridgeRead(uint16 addr, uint8 data) -> uint8 {
+  switch(cartridgeRowSelect) {
+  case 0:
+    if(cartridgeSelect == 0) return bios_prg[addr];
+    break;
+  case 1:
+    switch(cartridgeSelect) {
+    case  1: return cartridge.readPRG(addr);
+    case  2: return data;
+    case  3: return data;
+    case  4: return data;
+    case  5: return data;
+    }
+    break;
+  case 2:
+    switch(cartridgeSelect) {
+    case  6: return data;
+    case  7: return data;
+    case  8: return data;
+    case  9: return data;
+    case 10: return data;
+    }
+    break;
+  case 3:
+    switch(cartridgeSelect) {
+    case 11: return data;
+    case 12: return data;
+    case 13: return data;
+    case 14: return data;
+    case 15: return data;
+    }
+    break;
+  }
+  return data;
+}
+
+auto FamicomBox::portWrite(uint16 addr, uint8 data) -> void {
+  if((addr & 0xf000) == 0x5000) print("write $", hex(addr, 4U), " 0x", hex(data, 2U), "\n");
+
+  if(addr >= 0x4016 && addr <= 0x4017) return cpu.writeCPU(addr, data);
+
+  if(!registerLock) {
+    switch(addr & 0xf007) {
+
+    //Exception enable flags
+    case 0x5000: {
+      exceptionEnable = data & 0xbf;
+      break;
+    }
+
+    //Coin module flags and CATV output
+    case 0x5001: {
+      break;
+    }
+
+    //Cartridge slot LED and RAM protect register
+    case 0x5002: {
+      //ramProtect = data.bits(6,4);
+      break;
+    }
+
+    //Attraction timer
+    case 0x5003: {
+      attractionTimer.bits(14,7) = 0x00;
+      break;
+    }
+
+    //Cartridge selection register
+    case 0x5004: {
+      cartridgeSelect = data.bits(3,0);
+      cartridgeRowSelect = data.bits(5,4);
+      registerLock |= data.bit(6);
+      break;
+    }
+
+    //Misc. control
+    case 0x5005: {
+      break;
+    }
+
+    //Test connector DB-25 outputs 6, 15, 7, 16, 8, 17, 9, 18
+    case 0x5006: {
+      break;
+    }
+
+    //Expansion connector (50-pin) output pin 26
+    case 0x5007: {
+      break;
+    }
+
+    }
+  }
+}
+
+auto FamicomBox::wramWrite(uint16 addr, uint8 data) -> void {
+  if(addr >= 0x0800 && addr <= 0x1fff) print("write $", hex(addr, 4U), " 0x", hex(data, 2U), "\n");
+  switch(addr & 0xf800) {
+  case 0x0000: {
+    if(ramProtect >= 1) cpu.ram[addr] = data;
+    return;
+  }
+
+  case 0x0800: {
+    if(ramProtect >= 2) bios_ram[addr - 0x800] = data;
+    return;
+  }
+
+  case 0x1000: {
+    if(ramProtect >= 3) bios_ram[addr - 0x800] = data;
+    return;
+  }
+
+  case 0x1800: {
+    if(ramProtect >= 4) bios_ram[addr - 0x800] = data;
+    return;
+  }
+
+  }
+}
+
+auto FamicomBox::sramWrite(uint16 addr, uint8 data) -> void {
+  test_ram[addr & 0x1fff] = data;
+}
+
+auto FamicomBox::cartridgeWrite(uint16 addr, uint8 data) -> void {
+  switch(cartridgeRowSelect) {
+  case 1:
+    switch(cartridgeSelect) {
+    case  1: return cartridge.writePRG(addr, data);
+    case  2: return;
+    case  3: return;
+    case  4: return;
+    case  5: return;
+    }
+    break;
+  case 2:
+    switch(cartridgeSelect) {
+    case  6: return;
+    case  7: return;
+    case  8: return;
+    case  9: return;
+    case 10: return;
+    }
+    break;
+  case 3:
+    switch(cartridgeSelect) {
+    case 11: return;
+    case 12: return;
+    case 13: return;
+    case 14: return;
+    case 15: return;
+    }
+    break;
+  }
+}
+
+auto FamicomBox::chrRead(uint14 addr) -> uint8 {
+  if(cartridgeRowSelect == 0 && cartridgeSelect == 0) {
+    return bios_chr[addr];
+  }
+  switch(cartridgeRowSelect) {
+  case 1:
+    switch(cartridgeSelect) {
+    case  1: return cartridge.readCHR(addr);
+    case  2: break;
+    case  3: break;
+    case  4: break;
+    case  5: break;
+    }
+    break;
+  case 2:
+    switch(cartridgeSelect) {
+    case  6: break;
+    case  7: break;
+    case  8: break;
+    case  9: break;
+    case 10: break;
+    }
+    break;
+  case 3:
+    switch(cartridgeSelect) {
+    case 11: break;
+    case 12: break;
+    case 13: break;
+    case 14: break;
+    case 15: break;
+    }
+    break;
+  }
+  return ppu.io.mdr;
+}
+
+auto FamicomBox::chrWrite(uint14 addr, uint8 data) -> void {
+  switch(cartridgeRowSelect) {
+  case 1:
+    switch(cartridgeSelect) {
+    case  1: return cartridge.writeCHR(addr, data);
+    case  2: break;
+    case  3: break;
+    case  4: break;
+    case  5: break;
+    }
+    break;
+  case 2:
+    switch(cartridgeSelect) {
+    case  6: break;
+    case  7: break;
+    case  8: break;
+    case  9: break;
+    case 10: break;
+    }
+    break;
+  case 3:
+    switch(cartridgeSelect) {
+    case 11: break;
+    case 12: break;
+    case 13: break;
+    case 14: break;
+    case 15: break;
+    }
+    break;
+  }
+}
+
+}
diff --git a/higan/fc/arcade/famicombox/famicombox.hpp b/higan/fc/arcade/famicombox/famicombox.hpp
new file mode 100644
index 0000000..82c46e4
--- /dev/null
+++ b/higan/fc/arcade/famicombox/famicombox.hpp
@@ -0,0 +1,70 @@
+struct FamicomBox : Thread {
+  enum class Exception : uint {
+    Interrupt6_82Hz = 0,
+    AttractionTimer = 1,
+    ControllerRead  = 2,
+    KeyswitchRotate = 3,
+    Coin            = 4,
+    ResetButton     = 5,
+    Watchdog        = 6,
+    CATVPin1        = 7,
+  };
+
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load(Markup::Node node) -> bool;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto setDip(uint10 dip) -> void;
+  auto trap(Exception exceptionId) -> void;
+
+  auto wramRead(uint16 addr, uint8 data) -> uint8;
+  auto portRead(uint16 addr, uint8 data) -> uint8;
+  auto sramRead(uint16 addr, uint8 data) -> uint8;
+  auto cartridgeRead(uint16 addr, uint8 data) -> uint8;
+  auto wramWrite(uint16 addr, uint8 data) -> void;
+  auto portWrite(uint16 addr, uint8 data) -> void;
+  auto sramWrite(uint16 addr, uint8 data) -> void;
+  auto cartridgeWrite(uint16 addr, uint8 data) -> void;
+
+  auto chrRead(uint14 addr) -> uint8;
+  auto chrWrite(uint14 addr, uint8 data) -> void;
+
+  auto serialize(serializer& s) -> void;
+
+  //memory map
+  //0000-07ff: Game RAM
+  //0800-1fff: BIOS RAM
+  //2000-3fff: PPU Registers
+  //4000-4015: APU/CPU Registers
+  //4016-4017: APU/CPU Registers and Watchdog
+  //5000-5fff: FamciomBox registers
+  //6000-7fff: FamicomBox TEST Mode RAM
+  //8000-ffff: cartridge ROM
+  uint8 bios_prg[0x8000];
+  uint8 bios_chr[0x2000];
+
+  uint8 bios_ram[0x1800]; // actually 0x2000, but 0x800 of it is game RAM
+  uint8 test_ram[0x2000];
+
+  uint10 dip;
+
+  uint8 exceptionEnable;
+  uint8 exceptionTrap;
+
+  uint3 ramProtect;
+
+  uint counter;
+  uint15 attractionTimer;
+  uint14 watchdog;
+
+  uint4 cartridgeSelect;
+  uint2 cartridgeRowSelect;
+  bool registerLock;
+};
+
+extern FamicomBox famicombox;
diff --git a/higan/fc/arcade/famicombox/serialization.cpp b/higan/fc/arcade/famicombox/serialization.cpp
new file mode 100644
index 0000000..f970bc4
--- /dev/null
+++ b/higan/fc/arcade/famicombox/serialization.cpp
@@ -0,0 +1,6 @@
+auto FamicomBox::serialize(serializer& s) -> void {
+  s.array(bios_ram);
+  s.array(test_ram);
+
+  s.integer(dip);
+}
diff --git a/higan/fc/arcade/playchoice10/bus.cpp b/higan/fc/arcade/playchoice10/bus.cpp
new file mode 100644
index 0000000..8839a7e
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/bus.cpp
@@ -0,0 +1,95 @@
+auto PlayChoice10::Bus::read(uint16 addr) -> uint8 {
+  if(addr < 0x8000) return bios[addr & 0x3fff];
+  if(addr < 0x8800) return wram[addr & 0x07ff];
+  if(addr < 0x8c00) return sram[addr & 0x03ff];
+  if(addr < 0x9000) return sram[(addr & 0x03ff) | (sramBank << 10)];
+  if(addr < 0x9800) return 0x00;  //VRAM is write-only
+  if(addr < 0xc000) return 0x00;  //open bus
+  if(addr < 0xe000) return cartridge.board->instrom.read(addr & 0x1fff);
+
+  uint8 data = 0xe7;
+  if(!promTest || promAddress < 0x40) {
+    data |= (((cartridge.board->keyrom.read(promAddress >> 3) >> (promAddress & 7)) & 1) << 3) ^ 0x08;
+  } else {
+    data |= (promAddress & 2 ? (uint8)0x00 : cartridge.board->keyrom.read(8)) ^ 0x08;
+  }
+  data |= ((promAddress & 0x20) >> 1) ^ 0x10;
+  return data;
+}
+
+auto PlayChoice10::Bus::write(uint16 addr, uint8 data) -> void {
+  if(addr < 0x8000) return;
+  if(addr < 0x8800) { wram[addr & 0x07ff] = data; return; }
+  if(addr < 0x8c00) { sram[addr & 0x03ff] = data; return; }
+  if(addr < 0x9000) { sram[(addr & 0x03ff) | (sramBank << 10)] = data; return; }
+  if(addr < 0x9800) { playchoice10.videoCircuit.vram[addr & 0x07ff] = data; return; }
+  if(addr < 0xc000) return;
+  if(addr < 0xe000) return;
+
+  promTest = data & 0x10;
+  if(promClock && (data & 0x08) == 0) promAddress++;
+  promClock = data & 0x08;
+  if((data & 0x01) == 0) promAddress = 0;
+  return;
+}
+
+auto PlayChoice10::Bus::in(uint8 addr) -> uint8 {
+  uint8 data = 0x00;
+  bool channelSelect = false;
+  bool enter         = false;
+  bool reset         = false;
+  bool coin2         = false;
+  bool service       = false;
+  bool coin1         = false;
+  switch(addr & 0x03) {
+  case 0x00:
+    data |= channelSelect  << 0;
+    data |= enter          << 1;
+    data |= reset          << 2;
+    data |= cpu.io.nmiLine << 3;
+    data |= 0              << 4;
+    data |= coin2          << 5;
+    data |= service        << 6;
+    data |= coin1          << 7;
+    break;
+  case 0x01: data = (playchoice10.dip >> 0) & 0xff; break;
+  case 0x02: data = (playchoice10.dip >> 8) & 0xff; break;
+  case 0x03: data = 0x00; break;
+  }
+  return data;
+}
+
+auto PlayChoice10::Bus::out(uint8 addr, uint8 data) -> void {
+  data &= 0x01;
+  switch(addr & 0x1f) {
+  case 0x00: playchoice10.vramAccess = data; break;
+  case 0x01: playchoice10.controls   = data; break;
+  case 0x02: playchoice10.ppuOutput  = data; break;
+  case 0x03: playchoice10.apuOutput  = data; break;
+  case 0x04: playchoice10.cpuReset   = data; break;
+  case 0x05: playchoice10.cpuStop    = data; break;
+  case 0x06: playchoice10.display    = data; break;
+  case 0x08: playchoice10.z80NMI     = data; break;
+  case 0x09: playchoice10.watchdog   = data; break;
+  case 0x0a: playchoice10.ppuReset   = data; break;
+  case 0x0b: channel.bit(0)          = data; break;
+  case 0x0c: channel.bit(1)          = data; break;
+  case 0x0d: channel.bit(2)          = data; break;
+  case 0x0e: channel.bit(3)          = data; break;
+  case 0x0f: sramBank                = data; break;
+  }
+  switch(addr & 0x13) {
+  case 0x10: break;
+  case 0x11: break;
+  case 0x12: break;
+  case 0x13: break;
+  }
+}
+
+auto PlayChoice10::Bus::power() -> void {
+  channel    = 0;  //channel 1 on-screen
+  sramBank   = 1;
+}
+
+auto PlayChoice10::Bus::reset() -> void {
+}
diff --git a/higan/fc/arcade/playchoice10/cpu.cpp b/higan/fc/arcade/playchoice10/cpu.cpp
new file mode 100644
index 0000000..d59d55b
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/cpu.cpp
@@ -0,0 +1,23 @@
+auto PlayChoice10::CPU::Enter() -> void {
+  while(true) scheduler.synchronize(), playchoice10.pc10cpu.main();
+}
+
+auto PlayChoice10::CPU::main() -> void {
+  instruction();
+}
+
+auto PlayChoice10::CPU::step(uint clocks) -> void {
+  Thread::step(clocks);
+  synchronize(playchoice10.videoCircuit);
+  synchronize(cpu);
+}
+
+auto PlayChoice10::CPU::power() -> void {
+  Processor::Z80::bus = &playchoice10.pc10bus;
+  Processor::Z80::power();
+}
+
+auto PlayChoice10::CPU::reset() -> void {
+  Processor::Z80::reset();
+  create(PlayChoice10::CPU::Enter, 4'000'000.0);
+}
diff --git a/higan/fc/arcade/playchoice10/playchoice10.cpp b/higan/fc/arcade/playchoice10/playchoice10.cpp
new file mode 100644
index 0000000..d81e3fb
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/playchoice10.cpp
@@ -0,0 +1,69 @@
+#include <fc/fc.hpp>
+
+namespace Famicom {
+
+PlayChoice10 playchoice10;
+
+#include "bus.cpp"
+#include "cpu.cpp"
+#include "video-circuit.cpp"
+#include "serialization.cpp"
+
+auto PlayChoice10::init() -> void {
+  dip = 0;
+  screenConfig = ScreenConfig::Single;
+}
+
+auto PlayChoice10::load(Markup::Node node) -> bool {
+  if(auto firmware = node["cpu/rom/name"].text()) {
+    if(auto fp = interface->open(ID::System, firmware, File::Read, File::Required)) {
+      fp->read(pc10bus.bios, 16384);
+    } else return false;
+  }
+
+  if(auto character = node["pc10/video-circuit/vrom/name"].text()) {
+    if(auto fp = interface->open(ID::System, character, File::Read, File::Required)) {
+      fp->read(videoCircuit.chrrom, 24576);
+    } else return false;
+  }
+
+  if(auto palette = node["pc10/video-circuit/cgrom/name"].text()) {
+    if(auto fp = interface->open(ID::System, palette, File::Read, File::Required)) {
+      fp->read(videoCircuit.cgrom, 768);
+    } else return false;
+  }
+
+  screenConfig = min(max(node["pc10/screen/mode"].integer(), 1), 2);
+  return true;
+}
+
+auto PlayChoice10::unload() -> void {
+}
+
+auto PlayChoice10::power() -> void {
+  pc10bus.power();
+  pc10cpu.power();
+  videoCircuit.power();
+  vramAccess = 1; // 0: Z80,                  1: video circuit
+  controls   = 1; // 0: disable START/SELECT, 1: enable START/SELECT
+  ppuOutput  = 1; // 0: disable,              1: enable
+  apuOutput  = 1; // 0: disable,              1: enable
+  cpuReset   = 1; // 0: reset,                1: run
+  cpuStop    = 1; // 0: stop,                 1: run
+  display    = 1; // 0: video circuit,        1: PPU
+  z80NMI     = 0; // 0: disable,              1: enable
+  watchdog   = 1; // 0: enable,               1: disable
+  ppuReset   = 1; // 0: reset,                1: run
+}
+
+auto PlayChoice10::reset() -> void {
+  pc10bus.reset();
+  pc10cpu.reset();
+  videoCircuit.reset();
+}
+
+auto PlayChoice10::setDip(uint16 dip) -> void {
+  this->dip = dip;
+}
+
+}
diff --git a/higan/fc/arcade/playchoice10/playchoice10.hpp b/higan/fc/arcade/playchoice10/playchoice10.hpp
new file mode 100644
index 0000000..39199d8
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/playchoice10.hpp
@@ -0,0 +1,96 @@
+struct PlayChoice10 {
+  struct ScreenConfig { enum : uint {
+    Dual = 2,
+    Single = 1,
+  };};
+
+  auto init() -> void;
+  auto load(Markup::Node node) -> bool;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto setDip(uint16 dip) -> void;
+
+  auto serialize(serializer& s) -> void;
+
+  uint16 dip;
+  uint screenConfig;
+
+  bool vramAccess;
+  bool controls;
+  bool ppuOutput;
+  bool apuOutput;
+  bool cpuReset;
+  bool cpuStop;
+  bool display;
+  bool z80NMI;
+  bool watchdog;
+  bool ppuReset;
+
+  struct Bus : Processor::Z80::Bus {
+    auto read(uint16 addr) -> uint8 override;
+    auto write(uint16 addr, uint8 data) -> void override;
+
+    auto in(uint8 addr) -> uint8 override;
+    auto out(uint8 addr, uint8 data) -> void override;
+
+    auto power() -> void;
+    auto reset() -> void;
+
+    auto serialize(serializer& s) -> void;
+
+    uint8 bios[0x4000];
+
+  private:
+    //memory map
+    //8000-87ff: WRAM
+    //8800-8bff: SRAM bank 0
+    //8c00-8fff: SRAM switchable bank (0 or 1)
+    //9000-97ff: VRAM
+    //9800-bfff: open bus
+    //c000-dfff: cartridge instruction ROM
+    //e000-ffff: cartridge IO registers
+    uint8 wram[0x800];
+    uint8 sram[0x800];
+
+    uint4 channel;
+    bool sramBank;
+    bool promTest;
+    bool promClock;
+    uint7 promAddress;
+  } pc10bus;
+
+  struct CPU : Processor::Z80, Thread {
+    static auto Enter() -> void;
+    auto main() -> void;
+    auto step(uint clocks) -> void;
+
+    auto power() -> void;
+    auto reset() -> void;
+
+    auto serialize(serializer& s) -> void;
+  } pc10cpu;
+
+  struct VideoCircuit : Thread {
+    static auto Enter() -> void;
+    auto main() -> void;
+    auto step(uint clocks) -> void;
+    auto refresh() -> void;
+
+    auto power() -> void;
+    auto reset() -> void;
+
+    auto run(uint x, uint y) -> void;
+
+    uint8 chrrom[0x2000 * 3];
+    uint8 cgrom[0x100 * 3];
+
+    uint8 vram[2048];
+
+  private:
+    uint32 buffer[256 * 240];
+  } videoCircuit;
+};
+
+extern PlayChoice10 playchoice10;
diff --git a/higan/fc/arcade/playchoice10/serialization.cpp b/higan/fc/arcade/playchoice10/serialization.cpp
new file mode 100644
index 0000000..3afc7a0
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/serialization.cpp
@@ -0,0 +1,32 @@
+auto PlayChoice10::serialize(serializer& s) -> void {
+  pc10bus.serialize(s);
+  pc10cpu.serialize(s);
+
+  s.integer(dip);
+
+  s.integer(vramAccess);
+  s.integer(controls);
+  s.integer(ppuOutput);
+  s.integer(apuOutput);
+  s.integer(cpuReset);
+  s.integer(cpuStop);
+  s.integer(display);
+  s.integer(z80NMI);
+  s.integer(watchdog);
+  s.integer(ppuReset);
+
+  s.array(videoCircuit.vram);
+}
+
+auto PlayChoice10::Bus::serialize(serializer& s) -> void {
+  s.integer(channel);
+  s.integer(sramBank);
+
+  s.array(wram);
+  s.array(sram);
+}
+
+auto PlayChoice10::CPU::serialize(serializer& s) -> void {
+  Processor::Z80::serialize(s);
+  Thread::serialize(s);
+}
diff --git a/higan/fc/arcade/playchoice10/video-circuit.cpp b/higan/fc/arcade/playchoice10/video-circuit.cpp
new file mode 100644
index 0000000..e7f84a9
--- /dev/null
+++ b/higan/fc/arcade/playchoice10/video-circuit.cpp
@@ -0,0 +1,205 @@
+auto PlayChoice10::VideoCircuit::Enter() -> void {
+  while(true) scheduler.synchronize(), playchoice10.videoCircuit.main();
+}
+
+auto PlayChoice10::VideoCircuit::main() -> void {
+  for(uint y : range(256)) {
+    for(uint x : range(327)) {
+      run(x, y);
+    }
+    step(4 * 327);
+  }
+}
+
+auto PlayChoice10::VideoCircuit::step(uint clocks) -> void {
+  Thread::step(clocks);
+  synchronize(playchoice10.pc10cpu);
+}
+
+auto PlayChoice10::VideoCircuit::refresh() -> void {
+  if(playchoice10.screenConfig == ScreenConfig::Dual) {
+    Emulator::video.refreshRegion(buffer, 256 * sizeof(uint32), 0, 0, 256, 224, 1 << 9);
+  }
+}
+
+auto PlayChoice10::VideoCircuit::power() -> void {
+  uint8 defaultVRAM[0x0780] = {
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xdb,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,
+0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,
+0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,
+0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdc,0x1b,0xdd,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0x64,0x1b,0x65,0x1b,0xfa,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xd8,0x1b,0xd8,0x1b,0x66,0x1b,0x67,0x1b,0x68,0x1b,0x69,0x1b,
+0x6a,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0x6b,0x1b,0x6c,0x1b,0x6d,0x1b,
+0x6e,0x1b,0xd8,0x1b,0xd8,0x1b,0x6f,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,
+0xd8,0x1b,0x70,0x1b,0x71,0x1b,0x72,0x1b,0xd8,0x1b,0xd8,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xd9,0x1b,0xd9,0x1b,0x73,0x1b,0x74,0x1b,0x75,0x1b,0x76,0x1b,
+0x77,0x1b,0x78,0x1b,0x79,0x1b,0x7a,0x1b,0x7b,0x1b,0x7c,0x1b,0x7d,0x1b,0x7e,0x1b,
+0x7f,0x1b,0x80,0x1b,0x81,0x1b,0x82,0x1b,0x83,0x1b,0x84,0x1b,0x85,0x1b,0xd9,0x1b,
+0xd9,0x1b,0x86,0x1b,0x87,0x1b,0x88,0x1b,0x89,0x1b,0xd9,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xfa,0x1b,0xfa,0x1b,0x8a,0x1b,0x8b,0x1b,0x8c,0x1b,0x8d,0x1b,
+0x8e,0x1b,0x8f,0x1b,0x90,0x1b,0x91,0x1b,0x92,0x1b,0x93,0x1b,0x94,0x1b,0x95,0x1b,
+0x96,0x1b,0x97,0x1b,0x98,0x1b,0x99,0x1b,0x9a,0x1b,0x9b,0x1b,0x9c,0x1b,0xfa,0x1b,
+0xfa,0x1b,0x9d,0x1b,0x9e,0x1b,0x9f,0x1b,0xa0,0x1b,0xfa,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xfa,0x1b,0xa1,0x1b,0xa2,0x1b,0xa3,0x1b,0xa4,0x1b,0xa5,0x1b,
+0xa6,0x1b,0xa7,0x1b,0xa8,0x1b,0xa9,0x1b,0xaa,0x1b,0xab,0x1b,0xac,0x1b,0xad,0x1b,
+0xae,0x1b,0xaf,0x1b,0xb0,0x1b,0xb1,0x1b,0xb2,0x1b,0xb3,0x1b,0xb4,0x1b,0xb5,0x1b,
+0xb6,0x1b,0xb7,0x1b,0xb8,0x1b,0xb9,0x1b,0xba,0x1b,0xfa,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xda,0x1b,0xbb,0x1b,0xbc,0x1b,0xbd,0x1b,0xbe,0x1b,0xbf,0x1b,
+0xc0,0x1b,0xc1,0x1b,0xc2,0x1b,0xc3,0x1b,0xc4,0x1b,0xc5,0x1b,0xc6,0x1b,0xc7,0x1b,
+0xc8,0x1b,0xc9,0x1b,0xca,0x1b,0xcb,0x1b,0xcc,0x1b,0xcd,0x1b,0xce,0x1b,0xda,0x1b,
+0xcf,0x1b,0xd0,0x1b,0xd1,0x1b,0xd2,0x1b,0xda,0x1b,0xda,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,
+0xd3,0x1b,0xd4,0x1b,0xd5,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,
+0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,
+0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xd8,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe2,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xd6,0x1b,0xd7,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,
+0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xfa,0x1b,0xde,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xe1,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,
+0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,
+0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,
+0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xe0,0x1b,0xdf,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xe3,0x1b,0xe4,0x1b,0xe5,0x1b,0xe6,0x1b,0xe7,0x1b,0xe8,0x1b,
+0xe9,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xea,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xeb,0x1b,0xec,0x1b,0xed,0x1b,0xee,0x1b,0xef,0x1b,0xf0,0x1b,
+0xf1,0x1b,0xf2,0x1b,0xf3,0x1b,0xf4,0x1b,0xf5,0x1b,0xf6,0x1b,0xf7,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,0xff,0x1b,
+
+0x14,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,
+0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,
+0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x16,0xf9,0x14,0xf9,0x15,0xf9,0x15,0xf9,
+0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x15,0xf9,0x16,0xf9,
+
+0x1b,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,
+0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,
+0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0x17,0xf9,0x1b,0xf9,0x1c,0xf9,0x1d,0xf9,
+0x1e,0xf9,0x1f,0xf9,0x20,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0x00,0xf9,0x17,0xf9,
+
+0x1b,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0x26,0xf9,0x27,0xf9,0x28,0xf9,
+0x29,0xf9,0x2a,0xf9,0x2b,0xf9,0x2c,0xf9,0x2d,0xf9,0x2e,0xf9,0xff,0xf9,0x2f,0xf9,
+0x2f,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0x17,0xf9,0x1b,0xf9,0x21,0xf9,0x22,0xf9,
+0x23,0xf9,0x24,0xf9,0x25,0xf9,0xff,0xf9,0xff,0xf9,0xff,0xf9,0x01,0xf9,0x17,0xf9,
+
+0x1a,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,
+0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,
+0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x18,0xf9,0x1a,0xf9,0x19,0xf9,0x19,0xf9,
+0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x19,0xf9,0x18,0xf9,
+
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,0xf8,
+  };
+  for(uint addr = 0x9040; addr <= 0x97bf; addr++) {
+    vram[addr & 0x07ff] = defaultVRAM[(addr & 0x07ff) - 0x40];
+  }
+}
+
+auto PlayChoice10::VideoCircuit::reset() -> void {
+  create(VideoCircuit::Enter, 20'160'000.0);
+}
+
+auto PlayChoice10::VideoCircuit::run(uint x, uint y) -> void {
+  if(y < 16 || y >= 240 || x >= 256) return;
+
+  uint tileY = y >> 3;
+  uint tileX = x >> 3;
+  uint16 addr = (tileY * 32 + tileX) << 1;
+  uint tileID = ((vram[addr | 0] & 0xff) << 0) + ((vram[addr | 1] & 0x07) << 8);
+
+  uint pixelY = y & 7;
+  uint pixelX = x & 7;
+
+  uint32 color = vram[addr | 1].bits(3,7) << 3;
+  uint8 byte;
+  for(uint plane : range(3)) {
+    byte = chrrom[(plane << 13) + (tileID << 3) + pixelY];
+    color.bit(plane) = byte.bit(7 - pixelX);
+  }
+
+  buffer[(y - 16) * 256 + x] = color;
+}
diff --git a/higan/fc/arcade/vssystem/control.cpp b/higan/fc/arcade/vssystem/control.cpp
new file mode 100644
index 0000000..4bfc735
--- /dev/null
+++ b/higan/fc/arcade/vssystem/control.cpp
@@ -0,0 +1,60 @@
+auto VSSystem::resetButtons() -> void {
+  mainControlLatched = 0;
+  mainControlCounter1 = 0;
+  mainControlCounter2 = 0;
+
+  subControlLatched = 0;
+  subControlCounter1 = 0;
+  subControlCounter2 = 0;
+
+  for(bool& button : mainButtons) button = false;
+  for(bool& button : subButtons) button = false;
+}
+
+auto VSSystem::poll(bool side, uint input) -> int16 {
+  return interface->inputPoll(ID::Port::Arcade, ID::Device::VSPanel, input);
+}
+
+auto VSSystem::data1(bool side) -> bool {
+  uint& counter = side == 0 ? mainControlCounter1 : subControlCounter1;
+  bool* buttons = side == 0 ? mainButtons : subButtons;
+  bool data;
+  if(!swapControllers) data = peripherals.controllerPort1->data() & 0x01;
+  else                 data = peripherals.controllerPort2->data() & 0x01;
+  if(counter == 2) return buttons[Button1];
+  if(counter == 3) return buttons[Button3];
+  return data;
+}
+
+auto VSSystem::data2(bool side) -> bool {
+  uint& counter = side == 0 ? mainControlCounter2 : subControlCounter2;
+  bool* buttons = side == 0 ? mainButtons : subButtons;
+  bool data;
+  if(!swapControllers) data = peripherals.controllerPort2->data() & 0x01;
+  else                 data = peripherals.controllerPort1->data() & 0x01;
+  if(counter == 2) return buttons[Button2];
+  if(counter == 3) return buttons[Button4];
+  return data;
+}
+
+auto VSSystem::latch(bool side, bool data) -> void {
+  if(side == 0) {
+    if(mainControlLatched == data) return;
+    mainControlLatched = data;
+    mainControlCounter1 = 0;
+    mainControlCounter2 = 0;
+
+    if(mainControlLatched == 0) {
+      for(uint i : {Button1, Button2, Button3, Button4}) mainButtons[i] = poll(0, i);
+    }
+  } else {
+    if(subControlLatched == data) return;
+    subControlLatched = data;
+    subControlCounter1 = 0;
+    subControlCounter2 = 0;
+
+    if(subControlLatched == 0) {
+      for(uint i : {Button1, Button2, Button3, Button4}) subButtons[i] = poll(1, i);
+    }
+  }
+}
diff --git a/higan/fc/arcade/vssystem/serialization.cpp b/higan/fc/arcade/vssystem/serialization.cpp
new file mode 100644
index 0000000..43b9c5e
--- /dev/null
+++ b/higan/fc/arcade/vssystem/serialization.cpp
@@ -0,0 +1,9 @@
+auto VSSystem::serialize(serializer& s) -> void {
+  s.array(ram);
+  s.integer(ramSide);
+
+  s.integer(swapControllers);
+  s.integer(mainDip);
+  s.integer(subDip);
+  s.integer(watchdog);
+}
diff --git a/higan/fc/arcade/vssystem/vssystem.cpp b/higan/fc/arcade/vssystem/vssystem.cpp
new file mode 100644
index 0000000..064cd85
--- /dev/null
+++ b/higan/fc/arcade/vssystem/vssystem.cpp
@@ -0,0 +1,115 @@
+#include <fc/fc.hpp>
+
+namespace Famicom {
+
+VSSystem vssystem;
+
+#include "control.cpp"
+#include "serialization.cpp"
+
+auto VSSystem::Enter() -> void {
+  while(true) scheduler.synchronize(), vssystem.main();
+}
+
+auto VSSystem::main() -> void {
+  //if(++watchdog > system.cpuFrequency() * 4 / 3) {
+  //  watchdog = 0;
+  //  cpu.reset();
+  //  //ppu.reset();
+  //}
+  step(1);
+  synchronize(cpu);
+}
+
+auto VSSystem::init() -> void {
+  forceSubRAM = false;
+  gameCount = GameCount::Uni;
+}
+
+auto VSSystem::load() -> bool {
+  return true;
+}
+
+auto VSSystem::unload() -> void {
+}
+
+auto VSSystem::power() -> void {
+  reset();
+}
+
+auto VSSystem::reset() -> void {
+  create(VSSystem::Enter, system.colorburst() * 6.0);
+
+  function<auto (uint16, uint8) -> uint8> reader;
+  function<auto (uint16, uint8) -> void> writer;
+  reader = [](uint16 addr, uint8 data) -> uint8 { return vssystem.read(cpu.side, addr, data); };
+  writer = [](uint16 addr, uint8 data) -> void { vssystem.write(cpu.side, addr, data); };
+  bus.map(reader, writer, "4016-4017");
+  bus.map(reader, writer, "4020-5fff", 0, 0, 0x0020);
+  bus.map(reader, writer, "6000-7fff");
+
+  ramSide = forceSubRAM ? 1 : 0;
+  resetButtons();
+}
+
+auto VSSystem::setDip(bool side, uint8 dip) -> void {
+  if(side == 0) mainDip = dip;
+  if(side == 1) subDip = dip;
+}
+
+auto VSSystem::read(bool side, uint16 addr, uint8 data) -> uint8 {
+  if(addr == 0x4016) {
+    data = (!side) << 7; // 0x00 for slave CPU, 0x80 for master CPU
+    data |= data1(side);
+    uint& counter = side == 0 ? mainControlCounter1 : subControlCounter1;
+    counter++;
+    if(side == 0) data |= (mainDip & 0x03) << 3;
+    if(side == 1) data |= (subDip & 0x03) << 3;
+    data |= (
+      poll(side, ServiceButton) << 2 |
+      poll(side, Coin1) << 5 |
+      poll(side, Coin2) << 6
+    );
+    return data;
+  }
+
+  if(addr == 0x4017) {
+    if(side == 1) watchdog = 0;
+    data = 0x00;
+    data |= data2(side); // buttons 2 and 4
+    uint& counter = side == 0 ? mainControlCounter2 : subControlCounter2;
+    counter++;
+    if(side == 0) data |= mainDip & 0xfc;
+    if(side == 1) data |= subDip & 0xfc;
+    return data;
+  }
+
+  if(addr >= 0x4020 && addr <= 0x5fff) {
+    write(side, addr, data);
+    return data;
+  }
+
+  if(addr >= 0x6000 && addr <= 0x7fff) {
+    return side == ramSide ? ram[addr & 0x07ff] : data;
+  }
+}
+
+auto VSSystem::write(bool side, uint16 addr, uint8 data) -> void {
+  if(addr == 0x4016) {
+    peripherals.controllerPort1->latch(data.bit(0));
+    peripherals.controllerPort2->latch(data.bit(0));
+    peripherals.expansionPort->write(data.bit(0));
+    latch(side, data & 1);
+    if(side == 0 && !forceSubRAM) ramSide = !data.bit(1);
+  }
+
+  if(addr >= 0x4020 && addr <= 0x5fff) {
+    // increment coin counter
+  }
+
+  if(addr >= 0x6000 && addr <= 0x7fff) {
+    if(side == ramSide) ram[addr & 0x07ff] = data;
+  }
+}
+
+}
diff --git a/higan/fc/arcade/vssystem/vssystem.hpp b/higan/fc/arcade/vssystem/vssystem.hpp
new file mode 100644
index 0000000..6109bf3
--- /dev/null
+++ b/higan/fc/arcade/vssystem/vssystem.hpp
@@ -0,0 +1,57 @@
+struct VSSystem : Thread {
+  enum : uint {
+    Button1, Button2, Button3, Button4, ServiceButton, Coin1, Coin2,
+  };
+
+  struct GameCount { enum : uint {
+    Uni = 1,
+    Dual = 2,
+  };};
+
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load() -> bool;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto setDip(bool side, uint8 dip) -> void;
+  auto read(bool side, uint16 addr, uint8 data) -> uint8;
+  auto write(bool side, uint16 addr, uint8 data) -> void;
+
+  auto serialize(serializer& s) -> void;
+
+  bool forceSubRAM;
+  uint gameCount;
+
+private:
+  uint8 ram[0x800];
+  bool ramSide; // 0: main, 1: sub
+
+  bool swapControllers;
+  uint8 mainDip;
+  uint8 subDip;
+  uint watchdog;
+
+  //control.cpp
+  bool mainControlLatched;
+  uint mainControlCounter1;
+  uint mainControlCounter2;
+  bool mainButtons[4];
+  bool subControlLatched;
+  uint subControlCounter1;
+  uint subControlCounter2;
+  bool subButtons[4];
+
+  auto resetButtons() -> void;
+  auto poll(bool side, uint input) -> int16;
+  auto data1(bool side) -> bool;
+  auto data2(bool side) -> bool;
+  auto latch(bool side, bool data) -> void;
+
+  friend class Cartridge;
+};
+
+extern VSSystem vssystem;
diff --git a/higan/fc/cartridge/board/bandai-74-161-02-74.cpp b/higan/fc/cartridge/board/bandai-74-161-02-74.cpp
new file mode 100644
index 0000000..e17dfd2
--- /dev/null
+++ b/higan/fc/cartridge/board/bandai-74-161-02-74.cpp
@@ -0,0 +1,74 @@
+  //BANDAI-74*161/02/74
+
+struct Bandai74_161_02_74 : Board {
+  Bandai74_161_02_74(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto main() -> void {
+    chrAddressBusTest(ppu.io.chrAddressBus);
+    tick();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      data &= readPRG(addr);
+      prgBank = (data & 0x03) >> 0;
+      chrPlane = (data & 0x04) >> 2;
+    }
+  }
+
+  auto chrAddress(uint addr) -> uint {
+    switch(addr & 0x1000) {
+    case 0x0000: return (addr & 0x0fff) | (chrPlane << 14) | (chrBank << 12);
+    case 0x1000: return (addr & 0x0fff) | (chrPlane << 14);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    chrAddressBusTest(addr);
+    if(addr & 0x2000) return ppu.readCIRAM(addr & 0x07ff);
+    return Board::readCHR(chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    chrAddressBusTest(addr);
+    if(addr & 0x2000) return ppu.writeCIRAM(addr & 0x07ff, data);
+    Board::writeCHR(chrAddress(addr), data);
+  }
+
+  auto chrAddressBusTest(uint addr) -> void {
+    if((addr & 0x3000) != (chrAddressBus & 0x3000) && (addr & 0x3000) == 0x2000) {
+      // NOR logic reverses bank numbers
+      chrBank = (((addr & 0x0300) ^ 0x0300) >> 8);
+    }
+    chrAddressBus = addr & 0x3000;
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrPlane = 0;
+    chrBank = 0;
+    chrAddressBus = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrPlane);
+    s.integer(chrBank);
+    s.integer(chrAddressBus);
+  }
+
+  uint2 prgBank;
+  bool chrPlane;
+  uint2 chrBank;
+  uint16 chrAddressBus;
+};
diff --git a/higan/fc/cartridge/board/bandai-74-161-161-32.cpp b/higan/fc/cartridge/board/bandai-74-161-161-32.cpp
new file mode 100644
index 0000000..2637051
--- /dev/null
+++ b/higan/fc/cartridge/board/bandai-74-161-161-32.cpp
@@ -0,0 +1,61 @@
+  //BANDAI-74*161/161/32
+
+struct Bandai74_161_161_32 : Board {
+  Bandai74_161_161_32(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x0000) return cpu.mdr();
+    if((addr & 0xc000) == 0x8000) return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+    else                          return read(prgrom, (   0x0f << 14) | (addr & 0x3fff));
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      //TODO: check for bus conflicts
+      data &= readPRG(addr);
+      prgBank = (data & 0xf0) >> 4;
+      chrBank = (data & 0x0f) >> 0;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+  }
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+
+  uint4 prgBank;
+  uint4 chrBank;
+};
diff --git a/higan/fc/cartridge/board/bandai-fcg.cpp b/higan/fc/cartridge/board/bandai-fcg.cpp
index 3d77bd0..733e743 100644
--- a/higan/fc/cartridge/board/bandai-fcg.cpp
+++ b/higan/fc/cartridge/board/bandai-fcg.cpp
@@ -1,109 +1,98 @@
 //BANDAI-FCG
+//BANDAI-FCG-1
+//BANDAI-FCG-2
+//BANDAI-JUMP2
+//BANDAI-LZ93D50
 
 struct BandaiFCG : Board {
-  BandaiFCG(Markup::Node& document) : Board(document) {
+  BandaiFCG(Markup::Node& boardNode) : Board(boardNode), fcg(*this, boardNode) {
+    string type = boardNode["id"].text();
+    revision = Revision::FCGAll;
+    if(type.match("*FCG-1*"  )) revision = Revision::FCG1;
+    if(type.match("*FCG-2*"  )) revision = Revision::FCG2;
+    if(type.match("*JUMP2*"  )) revision = Revision::JUMP2;
+    if(type.match("*LZ93D50*")) revision = Revision::LZ93D50;
   }
 
   auto main() -> void {
-    if(irqCounterEnable) {
-      if(--irqCounter == 0xffff) {
-        cpu.irqLine(1);
-        irqCounterEnable = false;
-      }
-    }
-
-    tick();
-  }
-
-  auto addrCIRAM(uint addr) const -> uint {
-    switch(mirror) {
-    case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
-    case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-    case 2: return 0x0000 | (addr & 0x03ff);
-    case 3: return 0x0400 | (addr & 0x03ff);
-    }
+    fcg.main();
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) {
-      bool region = addr & 0x4000;
-      uint bank = (region == 0 ? prgBank : (uint8)0x0f);
-      return prgrom.read((bank << 14) | (addr & 0x3fff));
+    if((addr & 0xe000) == 0x6000) {
+      switch(revision) {
+      case Revision::LZ93D50:
+        //TODO: serial EEPROM support
+        return 0x00 | (cpu.mdr() & 0xef);
+      case Revision::JUMP2:
+        return fcg.eepromI2C_SCL ? fcg.ramRead(addr) : cpu.mdr();
+      }
+    }
+    if((addr & 0x8000) == 0x8000) {
+      if(revision != Revision::JUMP2)
+        return read(prgrom, fcg.prgAddress(addr));
+      else
+        return read(prgrom, fcg.prgAddress(addr) | ((fcg.chrBank[(ppu.io.chrAddressBus >> 10) & 3] & 1) << 18));
     }
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if(addr >= 0x6000) {
-      switch(addr & 15) {
-      case 0x00: case 0x01: case 0x02: case 0x03:
-      case 0x04: case 0x05: case 0x06: case 0x07:
-        chrBank[addr & 7] = data;
-        break;
-      case 0x08:
-        prgBank = data & 0x0f;
-        break;
-      case 0x09:
-        mirror = data & 0x03;
-        break;
-      case 0x0a:
-        cpu.irqLine(0);
-        irqCounterEnable = data & 0x01;
-        irqCounter = irqLatch;
-        break;
-      case 0x0b:
-        irqLatch = (irqLatch & 0xff00) | (data << 0);
-        break;
-      case 0x0c:
-        irqLatch = (irqLatch & 0x00ff) | (data << 8);
-        break;
-      case 0x0d:
-        //todo: serial EEPROM support
+    if((addr & 0xe000) == 0x6000) {
+      switch(revision) {
+      case Revision::FCGAll:
+      case Revision::FCG1:
+      case Revision::FCG2:
+        return fcg.regWrite(addr, data);
+      case Revision::LZ93D50:
+        //TODO: serial EEPROM support
         break;
+      case Revision::JUMP2:
+        if(fcg.eepromI2C_SCL) return fcg.ramWrite(addr, data);
+        else                   break;
+      }
+    }
+    if((addr & 0x8000) == 0x8000) {
+      switch(revision) {
+      case Revision::FCGAll:
+      case Revision::LZ93D50:
+      case Revision::JUMP2:
+        return fcg.regWrite(addr, data);
       }
     }
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(addrCIRAM(addr));
-    addr = (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
-    return Board::readCHR(addr);
+    if(addr & 0x2000) return ppu.readCIRAM(fcg.ciramAddress(addr));
+    if(chrrom.size()) return Board::readCHR(fcg.chrAddress(addr));
+    if(chrram.size()) return Board::readCHR(addr);
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(addrCIRAM(addr), data);
-    addr = (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
-    return Board::writeCHR(addr, data);
+    if(addr & 0x2000) return ppu.writeCIRAM(fcg.ciramAddress(addr), data);
+    if(chrram.size()) Board::writeCHR(addr, data);
   }
 
   auto power() -> void {
-    reset();
+    fcg.power();
   }
 
   auto reset() -> void {
-    for(auto& n : chrBank) n = 0;
-    prgBank = 0;
-    mirror = 0;
-    irqCounterEnable = 0;
-    irqCounter = 0;
-    irqLatch = 0;
+    fcg.reset();
   }
 
   auto serialize(serializer& s) -> void {
     Board::serialize(s);
-
-    s.array(chrBank);
-    s.integer(prgBank);
-    s.integer(mirror);
-    s.integer(irqCounterEnable);
-    s.integer(irqCounter);
-    s.integer(irqLatch);
+    fcg.serialize(s);
   }
 
-  uint8 chrBank[8];
-  uint8 prgBank;
-  uint2 mirror;
-  bool irqCounterEnable;
-  uint16 irqCounter;
-  uint16 irqLatch;
+  enum class Revision : uint {
+    FCGAll,
+    FCG1,
+    FCG2,
+    JUMP2,
+    LZ93D50,
+  } revision;
+
+  FCG fcg;
 };
diff --git a/higan/fc/cartridge/board/board.cpp b/higan/fc/cartridge/board/board.cpp
index 93d92c2..0d4f281 100644
--- a/higan/fc/cartridge/board/board.cpp
+++ b/higan/fc/cartridge/board/board.cpp
@@ -1,131 +1,104 @@
+#include "bandai-74-161-02-74.cpp"
+#include "bandai-74-161-161-32.cpp"
 #include "bandai-fcg.cpp"
+#include "hvc-axrom.cpp"
+#include "hvc-cxrom.cpp"
+#include "hvc-exrom.cpp"
+#include "hvc-fxrom.cpp"
+#include "hvc-gxrom.cpp"
+#include "hvc-nrom.cpp"
+#include "hvc-pxrom.cpp"
+#include "hvc-sxrom.cpp"
+#include "hvc-txrom.cpp"
+#include "hvc-uxrom.cpp"
+#include "irem-74-161-161-21-138.cpp"
+#include "irem-g101.cpp"
+#include "irem-h3001.cpp"
+#include "irem-holydiver.cpp"
+#include "irem-i-im.cpp"
+#include "irem-tam-s1.cpp"
+#include "jaleco-jf-0x.cpp"
+#include "jaleco-jf-16.cpp"
+#include "jaleco-jf-2x.cpp"
 #include "konami-vrc1.cpp"
 #include "konami-vrc2.cpp"
 #include "konami-vrc3.cpp"
 #include "konami-vrc4.cpp"
 #include "konami-vrc6.cpp"
 #include "konami-vrc7.cpp"
-#include "nes-axrom.cpp"
-#include "nes-bnrom.cpp"
-#include "nes-cnrom.cpp"
-#include "nes-exrom.cpp"
-#include "nes-fxrom.cpp"
-#include "nes-gxrom.cpp"
+#include "namco-163.cpp"
+#include "namco-34xx.cpp"
+#include "nes-event.cpp"
 #include "nes-hkrom.cpp"
-#include "nes-nrom.cpp"
-#include "nes-pxrom.cpp"
-#include "nes-sxrom.cpp"
-#include "nes-txrom.cpp"
-#include "nes-uxrom.cpp"
+#include "nes-qj.cpp"
+#include "pal-zz.cpp"
+#include "sunsoft-4.cpp"
 #include "sunsoft-5b.cpp"
-
-Board::Board(Markup::Node& document) {
+#include "taito-tc.cpp"
+#include "fds.cpp"
+#include "vs.cpp"
+
+// Unlicensed board definitions; feel free to remove
+#include "unlicensed/camerica.cpp"
+#include "unlicensed/colordreams-74-377.cpp"
+#include "unlicensed/mlt-action52.cpp"
+#include "unlicensed/nina.cpp"
+// Homebrew board definitions; feel free to remove
+#include "unlicensed/noconflicts-cnrom.cpp"
+#include "unlicensed/single-chip.cpp"
+
+Board::Board(Markup::Node& boardNode) {
   cartridge.board = this;
-  auto board = document["board"];
-
-  information.type = board["id"].text();
-  information.battery = (bool)board["prg/ram/name"];
-
-  auto prom = board["prg/rom"];
-  auto pram = board["prg/ram"];
-  auto crom = board["chr/rom"];
-  auto cram = board["chr/ram"];
-
-  prgrom.size = prom["size"].natural();
-  prgram.size = pram["size"].natural();
-  chrrom.size = crom["size"].natural();
-  chrram.size = cram["size"].natural();
-
-  if(prgrom.size) prgrom.data = new uint8_t[prgrom.size]();
-  if(prgram.size) prgram.data = new uint8_t[prgram.size]();
-  if(chrrom.size) chrrom.data = new uint8_t[chrrom.size]();
-  if(chrram.size) chrram.data = new uint8_t[chrram.size]();
-
-  if(prgrom.name = prom["name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), prgrom.name, File::Read, File::Required)) {
-      fp->read(prgrom.data, min(prgrom.size, fp->size()));
-    }
-  }
-  if(prgram.name = pram["name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), prgram.name, File::Read)) {
-      fp->read(prgram.data, min(prgram.size, fp->size()));
-    }
-  }
-  if(chrrom.name = crom["name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), chrrom.name, File::Read, File::Required)) {
-      fp->read(chrrom.data, min(chrrom.size, fp->size()));
-    }
-  }
-  if(chrram.name = cram["name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), chrram.name, File::Read)) {
-      fp->read(chrram.data, min(chrram.size, fp->size()));
-    }
-  }
-
-  prgram.writable = true;
-  chrram.writable = true;
 }
 
-auto Board::save() -> void {
-  auto document = BML::unserialize(cartridge.manifest());
-
-  if(auto name = document["board/prg/ram/name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), name, File::Write)) {
-      fp->write(prgram.data, prgram.size);
-    }
-  }
-
-  if(auto name = document["board/chr/ram/name"].text()) {
-    if(auto fp = interface->open(cartridge.pathID(), name, File::Write)) {
-      fp->write(chrram.data, chrram.size);
-    }
-  }
+Board::~Board() {
 }
 
-auto Board::Memory::read(uint addr) const -> uint8 {
-  return data[mirror(addr, size)];
+auto Board::read(MappedRAM& memory, uint addr) -> uint8 {
+  return memory.readDirect(mirror(addr, memory.size()));
 }
 
-auto Board::Memory::write(uint addr, uint8 byte) -> void {
-  if(writable) data[mirror(addr, size)] = byte;
+auto Board::write(MappedRAM& memory, uint addr, uint8 byte) -> void {
+  memory.writeDirect(mirror(addr, memory.size()), byte);
 }
 
 auto Board::mirror(uint addr, uint size) -> uint {
+  if(size == 0) return 0;
   uint base = 0;
-  if(size) {
-    uint mask = 1 << 23;
-    while(addr >= size) {
-      while(!(addr & mask)) mask >>= 1;
-      addr -= mask;
-      if(size > mask) {
-        size -= mask;
-        base += mask;
-      }
-      mask >>= 1;
+  uint mask = 1 << 23;
+  while(addr >= size) {
+    while(!(addr & mask)) mask >>= 1;
+    addr -= mask;
+    if(size > mask) {
+      size -= mask;
+      base += mask;
     }
-    base += addr;
+    mask >>= 1;
   }
-  return base;
+  return base + addr;
 }
 
 auto Board::main() -> void {
-  cartridge.step(12 * 4095);
   tick();
 }
 
 auto Board::tick() -> void {
-  cartridge.step(12);
+  switch(system.region()) {
+  case System::Region::NTSC:  cartridge.step(12); break;
+  case System::Region::PAL:   cartridge.step(16); break;
+  case System::Region::Dendy: cartridge.step(15); break;
+  }
   cartridge.synchronize(cpu);
 }
 
 auto Board::readCHR(uint addr) -> uint8 {
-  if(chrram.size) return chrram.data[mirror(addr, chrram.size)];
-  if(chrrom.size) return chrrom.data[mirror(addr, chrrom.size)];
-  return 0u;
+  if(chrram.size()) return read(chrram, addr);
+  if(chrrom.size()) return read(chrrom, addr);
+  return ppu.io.mdr;
 }
 
 auto Board::writeCHR(uint addr, uint8 data) -> void {
-  if(chrram.size) chrram.data[mirror(addr, chrram.size)] = data;
+  if(chrram.size()) write(chrram, addr, data);
 }
 
 auto Board::power() -> void {
@@ -135,98 +108,236 @@ auto Board::reset() -> void {
 }
 
 auto Board::serialize(serializer& s) -> void {
-  if(prgram.size) s.array(prgram.data, prgram.size);
-  if(chrram.size) s.array(chrram.data, chrram.size);
+  if(prgram.size()) s.array(prgram.data(), prgram.size());
+  if(chrram.size()) s.array(chrram.data(), chrram.size());
 }
 
-auto Board::load(string manifest) -> Board* {
-  auto document = BML::unserialize(manifest);
-  cartridge.information.title = document["information/title"].text();
-
-  string type = document["board/id"].text();
-
-  if(type == "BANDAI-FCG"  ) return new BandaiFCG(document);
-
-  if(type == "KONAMI-VRC-1") return new KonamiVRC1(document);
-  if(type == "KONAMI-VRC-2") return new KonamiVRC2(document);
-  if(type == "KONAMI-VRC-3") return new KonamiVRC3(document);
-  if(type == "KONAMI-VRC-4") return new KonamiVRC4(document);
-  if(type == "KONAMI-VRC-6") return new KonamiVRC6(document);
-  if(type == "KONAMI-VRC-7") return new KonamiVRC7(document);
-
-  if(type == "NES-AMROM"   ) return new NES_AxROM(document);
-  if(type == "NES-ANROM"   ) return new NES_AxROM(document);
-  if(type == "NES-AN1ROM"  ) return new NES_AxROM(document);
-  if(type == "NES-AOROM"   ) return new NES_AxROM(document);
-
-  if(type == "NES-BNROM"   ) return new NES_BNROM(document);
-
-  if(type == "NES-CNROM"   ) return new NES_CNROM(document);
-
-  if(type == "NES-EKROM"   ) return new NES_ExROM(document);
-  if(type == "NES-ELROM"   ) return new NES_ExROM(document);
-  if(type == "NES-ETROM"   ) return new NES_ExROM(document);
-  if(type == "NES-EWROM"   ) return new NES_ExROM(document);
-
-  if(type == "NES-FJROM"   ) return new NES_FxROM(document);
-  if(type == "NES-FKROM"   ) return new NES_FxROM(document);
-
-  if(type == "NES-GNROM"   ) return new NES_GxROM(document);
-  if(type == "NES-MHROM"   ) return new NES_GxROM(document);
-
-  if(type == "NES-HKROM"   ) return new NES_HKROM(document);
-
-  if(type == "NES-NROM"    ) return new NES_NROM(document);
-  if(type == "NES-NROM-128") return new NES_NROM(document);
-  if(type == "NES-NROM-256") return new NES_NROM(document);
-
-  if(type == "NES-PEEOROM" ) return new NES_PxROM(document);
-  if(type == "NES-PNROM"   ) return new NES_PxROM(document);
-
-  if(type == "NES-SAROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SBROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SCROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SC1ROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SEROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SFROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SFEXPROM") return new NES_SxROM(document);
-  if(type == "NES-SGROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SHROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SH1ROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SIROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SJROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SKROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SLROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SL1ROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SL2ROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SL3ROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SLRROM"  ) return new NES_SxROM(document);
-  if(type == "NES-SMROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SNROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SOROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SUROM"   ) return new NES_SxROM(document);
-  if(type == "NES-SXROM"   ) return new NES_SxROM(document);
-
-  if(type == "NES-TBROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TEROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TFROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TGROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TKROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TKSROM"  ) return new NES_TxROM(document);
-  if(type == "NES-TLROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TL1ROM"  ) return new NES_TxROM(document);
-  if(type == "NES-TL2ROM"  ) return new NES_TxROM(document);
-  if(type == "NES-TLSROM"  ) return new NES_TxROM(document);
-  if(type == "NES-TNROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TQROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TR1ROM"  ) return new NES_TxROM(document);
-  if(type == "NES-TSROM"   ) return new NES_TxROM(document);
-  if(type == "NES-TVROM"   ) return new NES_TxROM(document);
-
-  if(type == "NES-UNROM"   ) return new NES_UxROM(document);
-  if(type == "NES-UOROM"   ) return new NES_UxROM(document);
-
-  if(type == "SUNSOFT-5B"  ) return new Sunsoft5B(document);
+Board* Board::load(Markup::Node boardNode) {
+  if(system.vs()) return new VS(boardNode);
+
+  string type = boardNode["id"].text();
+
+  if(slice(type,0,4) == "HVC-"
+  || slice(type,0,4) == "NES-"
+  || slice(type,0,4) == "PAL-") {
+    type = slice(type,4);
+    if(type == "AMROM"   ) return new HVC_AxROM(boardNode);
+    if(type == "ANROM"   ) return new HVC_AxROM(boardNode);
+    if(type == "AN1ROM"  ) return new HVC_AxROM(boardNode);
+    if(type == "AOROM"   ) return new HVC_AxROM(boardNode);
+
+    if(type == "BNROM"   ) return new IremIIM(boardNode);
+
+    if(type == "BTR"     ) return new Sunsoft5B(boardNode);
+
+    if(type == "CNROM"   ) return new HVC_CxROM(boardNode);
+    if(type == "CPROM"   ) return new HVC_CxROM(boardNode);
+
+    if(type == "DEROM"   ) return new Namco34xx(boardNode);
+    if(type == "DE1ROM"  ) return new Namco34xx(boardNode);
+    if(type == "DRROM"   ) return new Namco34xx(boardNode);
+
+    if(type == "EVENT"   ) return new NES_Event(boardNode);
+
+    if(type == "EKROM"   ) return new HVC_ExROM(boardNode);
+    if(type == "ELROM"   ) return new HVC_ExROM(boardNode);
+    if(type == "ETROM"   ) return new HVC_ExROM(boardNode);
+    if(type == "EWROM"   ) return new HVC_ExROM(boardNode);
+
+    if(type == "FJROM"   ) return new HVC_FxROM(boardNode);
+    if(type == "FKROM"   ) return new HVC_FxROM(boardNode);
+
+    if(type == "GNROM"   ) return new HVC_GxROM(boardNode);
+    if(type == "MHROM"   ) return new HVC_GxROM(boardNode);
+
+    if(type == "HKROM"   ) return new NES_HKROM(boardNode);
+
+    if(type == "JLROM"   ) return new Sunsoft5B(boardNode);
+    if(type == "JSROM"   ) return new Sunsoft5B(boardNode);
+
+    if(type == "FAMILYBASIC") return new HVC_NROM(boardNode);
+    if(type == "HROM"       ) return new HVC_NROM(boardNode);
+    if(type == "NROM"       ) return new HVC_NROM(boardNode);
+    if(type == "NROM-128"   ) return new HVC_NROM(boardNode);
+    if(type == "NROM-256"   ) return new HVC_NROM(boardNode);
+    if(type == "RROM"       ) return new HVC_NROM(boardNode);
+    if(type == "RROM-128"   ) return new HVC_NROM(boardNode);
+    if(type == "RTROM"      ) return new HVC_NROM(boardNode);
+    if(type == "SROM"       ) return new HVC_NROM(boardNode);
+    if(type == "STROM"      ) return new HVC_NROM(boardNode);
+
+    if(type == "PEEOROM" ) return new HVC_PxROM(boardNode);
+    if(type == "PNROM"   ) return new HVC_PxROM(boardNode);
+
+    if(type == "QJ"      ) return new NES_QJ(boardNode);
+
+    if(type == "SAROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SBROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SCROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SC1ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SEROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SFROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SF1ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SFEXPROM") return new HVC_SxROM(boardNode);
+    if(type == "SGROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SHROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SH1ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SIROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SJROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SKROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SLROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SL1ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SL2ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SL3ROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SLRROM"  ) return new HVC_SxROM(boardNode);
+    if(type == "SMROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SNROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SNWEPROM") return new HVC_SxROM(boardNode);
+    if(type == "SOROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SUROM"   ) return new HVC_SxROM(boardNode);
+    if(type == "SXROM"   ) return new HVC_SxROM(boardNode);
+
+    if(type == "TBROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TEROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TFROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TGROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TKROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TKEPROM" ) return new HVC_TxROM(boardNode);
+    if(type == "TKSROM"  ) return new HVC_TxROM(boardNode);
+    if(type == "TLROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TL1ROM"  ) return new HVC_TxROM(boardNode);
+    if(type == "TL2ROM"  ) return new HVC_TxROM(boardNode);
+    if(type == "TLSROM"  ) return new HVC_TxROM(boardNode);
+    if(type == "TNROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TQROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TR1ROM"  ) return new HVC_TxROM(boardNode);
+    if(type == "TSROM"   ) return new HVC_TxROM(boardNode);
+    if(type == "TVROM"   ) return new HVC_TxROM(boardNode);
+
+    if(type == "UNROM"   ) return new HVC_UxROM(boardNode);
+    if(type == "UN1ROM"  ) return new HVC_UxROM(boardNode);
+    if(type == "UOROM"   ) return new HVC_UxROM(boardNode);
+
+    if(type == "ZZ"      ) return new PAL_ZZ(boardNode);
+  }
+
+  if(type == "ACCLAIM-MC-ACC") return new HVC_TxROM(boardNode);
+
+  if(type == "BANDAI-74*161/02/74" ) return new Bandai74_161_02_74(boardNode);
+  if(type == "BANDAI-74*161/32"    ) return new HVC_CxROM(boardNode);
+  if(type == "BANDAI-74*161/161/32") return new Bandai74_161_161_32(boardNode);
+  if(type == "BANDAI-CNROM"        ) return new HVC_CxROM(boardNode);
+  if(type == "BANDAI-FCG"          ) return new BandaiFCG(boardNode);
+  if(type == "BANDAI-FCG-1"        ) return new BandaiFCG(boardNode);
+  if(type == "BANDAI-FCG-2"        ) return new BandaiFCG(boardNode);
+  if(type == "BANDAI-GNROM"        ) return new HVC_GxROM(boardNode);
+  if(type == "BANDAI-JUMP2"        ) return new BandaiFCG(boardNode);
+  if(type == "BANDAI-LZ93D50"      ) return new BandaiFCG(boardNode);
+  if(type == "BANDAI-NROM-128"     ) return new HVC_NROM(boardNode);
+  if(type == "BANDAI-NROM-256"     ) return new HVC_NROM(boardNode);
+  if(type == "BANDAI-PT-554"       ) return new HVC_CxROM(boardNode);
+
+  if(type == "IREM-74*161/161/21/138") return new Irem74_161_161_21_138(boardNode);
+  if(type == "IREM-BNROM"            ) return new IremIIM(boardNode);
+  if(type == "IREM-FCG-1"            ) return new BandaiFCG(boardNode);
+  if(type == "IREM-G101"             ) return new IremG101(boardNode);
+  if(type == "IREM-H3001"            ) return new IremH3001(boardNode);
+  if(type == "IREM-HOLYDIVER"        ) return new IremHolyDiver(boardNode);
+  if(type == "IREM-NROM-128"         ) return new HVC_NROM(boardNode);
+  if(type == "IREM-NROM-256"         ) return new HVC_NROM(boardNode);
+  if(type == "IREM-TAM-S1"           ) return new IremTamS1(boardNode);
+  if(type == "IREM-UNROM"            ) return new HVC_UxROM(boardNode);
+
+  if(type == "JALECO-JF-05") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-06") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-07") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-08") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-09") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-10") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-11") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-14") return new JalecoJF0x(boardNode);
+  if(type == "JALECO-JF-16") return new JalecoJF16(boardNode);
+  if(type == "JALECO-JF-22") return new KonamiVRC1(boardNode);
+  if(type == "JALECO-JF-23") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-24") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-25") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-27") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-29") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-37") return new JalecoJF2x(boardNode);
+  if(type == "JALECO-JF-40") return new JalecoJF2x(boardNode);
+
+  if(type == "KONAMI-74*139/74") return new JalecoJF0x(boardNode);
+  if(type == "KONAMI-CNROM"    ) return new HVC_CxROM(boardNode);
+  if(type == "KONAMI-NROM-128" ) return new HVC_NROM(boardNode);
+  if(type == "KONAMI-SLROM"    ) return new HVC_SxROM(boardNode);
+  if(type == "KONAMI-TLROM"    ) return new HVC_TxROM(boardNode);
+  if(type == "KONAMI-UNROM"    ) return new HVC_UxROM(boardNode);
+  if(type == "KONAMI-VRC-1"    ) return new KonamiVRC1(boardNode);
+  if(type == "KONAMI-VRC-2"    ) return new KonamiVRC2(boardNode);
+  if(type == "KONAMI-VRC-3"    ) return new KonamiVRC3(boardNode);
+  if(type == "KONAMI-VRC-4"    ) return new KonamiVRC4(boardNode);
+  if(type == "KONAMI-VRC-6"    ) return new KonamiVRC6(boardNode);
+  if(type == "KONAMI-VRC-7"    ) return new KonamiVRC7(boardNode);
+
+  if(type == "NAMCOT-129" ) return new Namco163(boardNode);
+  if(type == "NAMCOT-163" ) return new Namco163(boardNode);
+  if(type == "NAMCOT-175" ) return new Namco163(boardNode);
+  if(type == "NAMCOT-340" ) return new Namco163(boardNode);
+  if(type == "NAMCOT-3301") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3302") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3303") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3304") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3305") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3311") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3312") return new HVC_NROM(boardNode);
+  if(type == "NAMCOT-3401") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3406") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3407") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3413") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3414") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3415") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3416") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3417") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3425") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3443") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3446") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3451") return new Namco34xx(boardNode);
+  if(type == "NAMCOT-3453") return new Namco34xx(boardNode);
+
+  if(type == "SUNSOFT-4" ) return new Sunsoft4(boardNode);
+  if(type == "SUNSOFT-5B") return new Sunsoft5B(boardNode);
+
+  if(type == "TAITO-CNROM"    ) return new HVC_CxROM(boardNode);
+  if(type == "TAITO-TC0190FMC") return new TaitoTC(boardNode);
+  if(type == "TAITO-TC0350FMR") return new TaitoTC(boardNode);
+  if(type == "TAITO-TC0690FMR") return new TaitoTC(boardNode);
+
+  if(type == "FDS") return new FDS(boardNode);
+
+  // Unlicensed boards below; feel free to remove
+  if(type == "AVE-NINA-01"       ) return new Nina(boardNode);
+  if(type == "AVE-NINA-02"       ) return new Nina(boardNode);
+  if(type == "AVE-NINA-03"       ) return new Nina(boardNode);
+  if(type == "AVE-NINA-06"       ) return new Nina(boardNode);
+  if(type == "CAMERICA-ALGN"     ) return new Camerica(boardNode);
+  if(type == "CAMERICA-ALGQ"     ) return new Camerica(boardNode);
+  if(type == "CAMERICA-BF9093"   ) return new Camerica(boardNode);
+  if(type == "CAMERICA-BF9096"   ) return new Camerica(boardNode);
+  if(type == "CAMERICA-BF9097"   ) return new Camerica(boardNode);
+  if(type == "CODEMASTERS-NR8N"  ) return new Camerica(boardNode);
+  if(type == "COLORDREAMS-74*377") return new ColorDreams74_377(boardNode);
+  if(type == "MLT-ACTION52"      ) return new MLT_Action52(boardNode);
+  if(type == "TENGEN-800002"     ) return new Namco34xx(boardNode);
+  if(type == "TENGEN-800003"     ) return new HVC_NROM(boardNode);
+  if(type == "TENGEN-800004"     ) return new Namco34xx(boardNode);
+  if(type == "TENGEN-800008"     ) return new HVC_CxROM(boardNode);
+  if(type == "TENGEN-800030"     ) return new Namco34xx(boardNode);
+  if(type == "TENGEN-800042"     ) return new Sunsoft4(boardNode);
+  // Homebrew boards; feel free to remove
+  if(type == "NoConflicts-CNROM") return new NoConflicts_CNROM(boardNode);
+  if(type == "SingleChip") return new SingleChip(boardNode);
+
+  interface->notify(string{"Unrecognized board ID: ", type});
 
   return nullptr;
 }
diff --git a/higan/fc/cartridge/board/board.hpp b/higan/fc/cartridge/board/board.hpp
index e4440ec..13fca16 100644
--- a/higan/fc/cartridge/board/board.hpp
+++ b/higan/fc/cartridge/board/board.hpp
@@ -1,30 +1,16 @@
 struct Board {
-  struct Memory {
-    inline Memory(uint8_t* data, uint size) : data(data), size(size) {}
-    inline Memory() : data(nullptr), size(0u), writable(false) {}
-    inline ~Memory() { if(data) delete[] data; }
-
-    inline auto read(uint addr) const -> uint8;
-    inline auto write(uint addr, uint8 data) -> void;
-
-    string name;
-    uint8_t* data = nullptr;
-    uint size = 0;
-    bool writable = false;
-  };
-
-  virtual ~Board() = default;
+  Board(Markup::Node& boardNode);
+  virtual ~Board();
 
+  static auto read(MappedRAM& memory, uint addr) -> uint8;
+  static auto write(MappedRAM& memory, uint addr, uint8 byte) -> void;
   static auto mirror(uint addr, uint size) -> uint;
 
-  Board(Markup::Node& document);
-  auto save() -> void;
-
   virtual auto main() -> void;
   virtual auto tick() -> void;
 
-  virtual auto readPRG(uint addr) -> uint8 = 0;
-  virtual auto writePRG(uint addr, uint8 data) -> void = 0;
+  virtual uint8 readPRG(uint addr) = 0;
+  virtual void writePRG(uint addr, uint8 data) = 0;
 
   virtual auto readCHR(uint addr) -> uint8;
   virtual auto writeCHR(uint addr, uint8 data) -> void;
@@ -36,15 +22,14 @@ struct Board {
 
   virtual auto serialize(serializer&) -> void;
 
-  static auto load(string manifest) -> Board*;
+  static Board* load(Markup::Node boardNode);
 
-  struct Information {
-    string type;
-    bool battery;
-  } information;
+  Chip* chip = nullptr;
 
-  Memory prgrom;
-  Memory prgram;
-  Memory chrrom;
-  Memory chrram;
+  MappedRAM prgrom;
+  MappedRAM prgram;
+  MappedRAM chrrom;
+  MappedRAM chrram;
+  MappedRAM instrom;
+  MappedRAM keyrom;
 };
diff --git a/higan/fc/cartridge/board/fds.cpp b/higan/fc/cartridge/board/fds.cpp
new file mode 100644
index 0000000..45a2bd4
--- /dev/null
+++ b/higan/fc/cartridge/board/fds.cpp
@@ -0,0 +1,230 @@
+struct FDS : Board {
+  FDS(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto main() -> void {
+    if(irqEnable && irqCounter > 0 && --irqCounter == 0) {
+      cpu.irqLine(1);
+      if(irqRepeat) irqCounter = irqLatch;
+      else           irqEnable = false;
+      irqLatch = 0; // for Kaettekita Mario Bros.?
+    } else {
+      //TODO: Drive timer emulation
+    }
+    tick();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    switch(addr) {
+    case 0x4030: {
+      uint8 data = (irqPending | (byteTransferred << 1));
+      irqPending = false;
+      byteTransferred = false;
+      // 0x10: CRC 0=pass; 1=fail
+      // 0x40: End of disk head
+      // 0x80: Disk read/write enable
+      cpu.irqLine(0);
+      return 0;
+    }
+
+    case 0x4031: {
+      return dataRegister;
+    }
+
+    case 0x4032: {
+      return (
+        (diskSlotEmpty      << 0) |
+        (diskNotReady       << 1) |
+        (diskWriteProtected << 2)
+      );
+    }
+
+    case 0x4033: {
+      // 7-bit expansion input; 0x80 means low battery
+      return 0x00;
+    }
+
+    case 0x4090: {
+      return cpu.mdr() & 0xc0;
+    }
+
+    case 0x4092: {
+      return cpu.mdr() & 0xc0;
+    }
+
+    }
+
+    if((addr & 0xffc0) == 0x4040) {
+      return wavetable[addr & 0x3f] | (cpu.mdr() & 0xc0);
+    }
+    switch(addr & 0xe000) {
+    case 0x6000:
+    case 0x8000:
+    case 0xa000:
+    case 0xc000: return read(prgram, addr);
+    case 0xe000: return read(prgrom, addr);
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    switch(addr) {
+    case 0x4020: irqLatch = (irqLatch & 0xff00) | (data << 0); break;
+    case 0x4021: irqLatch = (irqLatch & 0x00ff) | (data << 8); break;
+    case 0x4022: {
+      irqRepeat = data & 0x01;
+      irqEnable = data & 0x02;
+      irqCounter = irqLatch;
+      byteTransferred = false;
+      cpu.irqLine(0); // if pending IRQ flag is clear
+      break;
+    }
+
+    case 0x4023: {
+      diskIOEnable = data & 0x01;
+      soundIOEnable = data & 0x02;
+      break;
+    }
+
+    case 0x4024: {
+      // clear pending IRQ flag
+      if(!byteTransferred) cpu.irqLine(0);
+      break;
+    }
+
+    case 0x4025: {
+      fdsControl = data & 0xf7;
+      mirror = data & 0x08;
+      break;
+    }
+
+    case 0x4026: {
+      // 7-bit expansion output
+      break;
+    }
+
+    case 0x4080: break;
+    case 0x4082: break;
+    case 0x4083: break;
+    case 0x4084: break;
+    case 0x4085: break;
+    case 0x4086: break;
+    case 0x4087: break;
+    case 0x4088: break;
+    case 0x4089: {
+      wavetableWriteEnable = data & 0x80;
+      break;
+    }
+
+    case 0x408a: break;
+
+    }
+
+    if((addr & 0xffc0) == 0x4040) {
+      if(wavetableWriteEnable) wavetable[addr & 0x3f] = data & 0x3f;
+    }
+
+    switch(addr & 0xe000) {
+    case 0x6000:
+    case 0x8000:
+    case 0xa000:
+    case 0xc000: write(prgram, addr, data); break;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(mirror) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(mirror) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    return Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+    reset();
+  }
+
+  auto reset() -> void {
+    irqCounter = 0;
+    irqLatch = 0;
+    irqRepeat = false;
+    irqEnable = false;
+
+    diskIOEnable = false;
+    soundIOEnable = false;
+
+    fdsControl = 0x26;
+    mirror = false;
+
+    irqPending = false;
+    byteTransferred = false;
+
+    dataRegister = 0x00;
+
+    diskSlotEmpty = true;
+    diskNotReady = true;
+    diskWriteProtected = true;
+
+    for(auto& n : wavetable) n = 0x00;
+    wavetableWriteEnable = false;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+
+    s.integer(irqCounter);
+    s.integer(irqLatch);
+    s.integer(irqRepeat);
+    s.integer(irqEnable);
+
+    s.integer(diskIOEnable);
+    s.integer(soundIOEnable);
+
+    s.integer(fdsControl);
+    s.integer(mirror);
+
+    s.integer(irqPending);
+    s.integer(byteTransferred);
+
+    s.integer(dataRegister);
+
+    s.integer(diskSlotEmpty);
+    s.integer(diskNotReady);
+    s.integer(diskWriteProtected);
+
+    s.array(wavetable);
+    s.integer(wavetableWriteEnable);
+  }
+
+  uint16 irqCounter;
+  uint16 irqLatch;
+  bool irqRepeat;
+  bool irqEnable;
+
+  bool diskIOEnable;
+  bool soundIOEnable;
+
+  uint8 fdsControl;
+  bool mirror;
+
+  bool irqPending;
+  bool byteTransferred;
+
+  uint8 dataRegister;
+
+  bool diskSlotEmpty;
+  bool diskNotReady;
+  bool diskWriteProtected;
+
+  uint6 wavetable[0x40];
+  bool wavetableWriteEnable;
+
+};
diff --git a/higan/fc/cartridge/board/nes-axrom.cpp b/higan/fc/cartridge/board/hvc-axrom.cpp
similarity index 57%
rename from higan/fc/cartridge/board/nes-axrom.cpp
rename to higan/fc/cartridge/board/hvc-axrom.cpp
index b773a0c..ecd088c 100644
--- a/higan/fc/cartridge/board/nes-axrom.cpp
+++ b/higan/fc/cartridge/board/hvc-axrom.cpp
@@ -1,19 +1,26 @@
-//NES-AMROM
+//HVC-AMROM
 //NES-ANROM
 //NES-AN1ROM
-//NES-AOROM
+//HVC-AOROM
 
-struct NES_AxROM : Board {
-  NES_AxROM(Markup::Node& document) : Board(document) {
+struct HVC_AxROM : Board {
+  HVC_AxROM(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*AMROM" )) revision = Revision::AMROM;
+    if(type.match("*ANROM" )) revision = Revision::ANROM;
+    if(type.match("*AN1ROM")) revision = Revision::AN1ROM;
+    if(type.match("*AOROM" )) revision = Revision::AOROM;
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read((prgBank << 15) | (addr & 0x7fff));
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr & 0x8000) {
+      // Bus conflicts
+      if(revision == Revision::AMROM) data &= readPRG(addr);
       prgBank = data & 0x0f;
       mirrorSelect = data & 0x10;
     }
@@ -44,6 +51,13 @@ struct NES_AxROM : Board {
     s.integer(mirrorSelect);
   }
 
+  enum class Revision : uint {
+    AMROM,
+    ANROM,
+    AN1ROM,
+    AOROM,
+  } revision;
+
   uint4 prgBank;
   bool mirrorSelect;
 };
diff --git a/higan/fc/cartridge/board/hvc-cxrom.cpp b/higan/fc/cartridge/board/hvc-cxrom.cpp
new file mode 100644
index 0000000..c2401cb
--- /dev/null
+++ b/higan/fc/cartridge/board/hvc-cxrom.cpp
@@ -0,0 +1,102 @@
+//HVC-CNROM
+//NES-CPROM
+
+struct HVC_CxROM : Board {
+  HVC_CxROM(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*CNROM" )) revision = Revision::CNROM;
+    if(type.match("*CPROM" )) revision = Revision::CPROM;
+    if(type.match("*PT-554")) revision = Revision::CNROM;
+    if(type == "TENGEN-800008") revision = Revision::CNROM;
+
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+    settings.security = (bool)boardNode["security"];
+    if(settings.security) {
+      settings.pass = boardNode["security/pass"].natural();
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, addr & 0x7fff);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      data &= readPRG(addr); // Bus conflicts
+      chrBank = data & 0x03;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    if(settings.security) {
+      if(chrBank != settings.pass) return ppu.io.mdr;
+    }
+    switch(revision) {
+    case Revision::CNROM: {
+      addr = (chrBank * 0x2000) + (addr & 0x1fff);
+      break;
+    }
+
+    case Revision::CPROM: {
+      if(addr < 0x1000) addr = addr & 0x1fff;
+      else              addr = (chrBank * 0x1000) + (addr & 0x0fff);
+      break;
+    }
+
+    }
+
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+
+    switch(revision) {
+    case Revision::CNROM: {
+      addr = (chrBank * 0x2000) + (addr & 0x1fff);
+      break;
+    }
+
+    case Revision::CPROM: {
+      if(addr < 0x1000) addr = addr & 0x1fff;
+      else              addr = (chrBank * 0x1000) + (addr & 0x0fff);
+      break;
+    }
+
+    }
+    Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    chrBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(chrBank);
+  }
+
+  enum class Revision : uint {
+    CNROM,
+    CPROM,
+  } revision;
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+    bool security;
+    uint2 pass;
+  } settings;
+
+  uint2 chrBank;
+};
diff --git a/higan/fc/cartridge/board/nes-exrom.cpp b/higan/fc/cartridge/board/hvc-exrom.cpp
similarity index 64%
rename from higan/fc/cartridge/board/nes-exrom.cpp
rename to higan/fc/cartridge/board/hvc-exrom.cpp
index 02229d8..4365a47 100644
--- a/higan/fc/cartridge/board/nes-exrom.cpp
+++ b/higan/fc/cartridge/board/hvc-exrom.cpp
@@ -1,6 +1,11 @@
-struct NES_ExROM : Board {
-  NES_ExROM(Markup::Node& document) : Board(document), mmc5(*this) {
-    revision = Revision::ELROM;
+struct HVC_ExROM : Board {
+  HVC_ExROM(Markup::Node& boardNode) : Board(boardNode), mmc5(*this, boardNode) {
+    chip = &mmc5;
+    string type = boardNode["id"].text();
+    if(type.match("*EKROM*")) revision = Revision::EKROM;
+    if(type.match("*ELROM*")) revision = Revision::ELROM;
+    if(type.match("*ETROM*")) revision = Revision::ETROM;
+    if(type.match("*EWROM*")) revision = Revision::EWROM;
   }
 
   auto main() -> void {
diff --git a/higan/fc/cartridge/board/nes-fxrom.cpp b/higan/fc/cartridge/board/hvc-fxrom.cpp
similarity index 77%
rename from higan/fc/cartridge/board/nes-fxrom.cpp
rename to higan/fc/cartridge/board/hvc-fxrom.cpp
index b4a3316..b75b9fb 100644
--- a/higan/fc/cartridge/board/nes-fxrom.cpp
+++ b/higan/fc/cartridge/board/hvc-fxrom.cpp
@@ -1,20 +1,22 @@
 //MMC4
 
-struct NES_FxROM : Board {
-  NES_FxROM(Markup::Node& document) : Board(document) {
-    revision = Revision::FKROM;
+struct HVC_FxROM : Board {
+  HVC_FxROM(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*FJROM*" )) revision = Revision::FJROM;
+    if(type.match("*FKROM*" )) revision = Revision::FKROM;
   }
 
   auto readPRG(uint addr) -> uint8 {
     if(addr < 0x6000) return cpu.mdr();
-    if(addr < 0x8000) return prgram.read(addr);
+    if(addr < 0x8000) return read(prgram, addr);
     uint bank = addr < 0xc000 ? prgBank : (uint4)0x0f;
-    return prgrom.read((bank * 0x4000) | (addr & 0x3fff));
+    return read(prgrom, (bank * 0x4000) | (addr & 0x3fff));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr < 0x6000) return;
-    if(addr < 0x8000) return prgram.write(addr, data);
+    if(addr < 0x8000) return write(prgram, addr, data);
 
     switch(addr & 0xf000) {
     case 0xa000: prgBank = data & 0x0f; break;
@@ -26,7 +28,7 @@ struct NES_FxROM : Board {
     }
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -34,7 +36,7 @@ struct NES_FxROM : Board {
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(addrCIRAM(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
     bool region = addr & 0x1000;
     uint bank = chrBank[region][latch[region]];
     if((addr & 0x0ff8) == 0x0fd8) latch[region] = 0;
@@ -43,7 +45,7 @@ struct NES_FxROM : Board {
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(addrCIRAM(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
     bool region = addr & 0x1000;
     uint bank = chrBank[region][latch[region]];
     if((addr & 0x0ff8) == 0x0fd8) latch[region] = 0;
diff --git a/higan/fc/cartridge/board/nes-gxrom.cpp b/higan/fc/cartridge/board/hvc-gxrom.cpp
similarity index 62%
rename from higan/fc/cartridge/board/nes-gxrom.cpp
rename to higan/fc/cartridge/board/hvc-gxrom.cpp
index 547d296..d0662b2 100644
--- a/higan/fc/cartridge/board/nes-gxrom.cpp
+++ b/higan/fc/cartridge/board/hvc-gxrom.cpp
@@ -1,18 +1,20 @@
 //NES-GNROM
 //NES-MHROM
 
-struct NES_GxROM : Board {
-  NES_GxROM(Markup::Node& document) : Board(document) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
+struct HVC_GxROM : Board {
+  HVC_GxROM(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read((prgBank << 15) | (addr & 0x7fff));
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
       prgBank = (data & 0x30) >> 4;
       chrBank = (data & 0x03) >> 0;
     }
@@ -20,8 +22,8 @@ struct NES_GxROM : Board {
 
   auto readCHR(uint addr) -> uint8 {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.readCIRAM(addr & 0x07ff);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
     }
     addr = (chrBank * 0x2000) + (addr & 0x1fff);
     return Board::readCHR(addr);
@@ -29,8 +31,8 @@ struct NES_GxROM : Board {
 
   auto writeCHR(uint addr, uint8 data) -> void {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.writeCIRAM(addr & 0x07ff, data);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
     }
     addr = (chrBank * 0x2000) + (addr & 0x1fff);
     Board::writeCHR(addr, data);
@@ -51,7 +53,7 @@ struct NES_GxROM : Board {
   }
 
   struct Settings {
-    bool mirror;  //0 = horizontal, 1 = vertical
+    bool mirror;  //0 = vertical, 1 = horizontal
   } settings;
 
   uint2 prgBank;
diff --git a/higan/fc/cartridge/board/hvc-nrom.cpp b/higan/fc/cartridge/board/hvc-nrom.cpp
new file mode 100644
index 0000000..41d5565
--- /dev/null
+++ b/higan/fc/cartridge/board/hvc-nrom.cpp
@@ -0,0 +1,71 @@
+//HVC-FAMILYBASIC
+//HVC-HROM
+//HVC-NROM-128
+//HVC-NROM-256
+//HVC-RROM
+//HVC-RROM-128
+//HVC-RTROM
+//HVC-SROM
+//HVC-STROM
+
+struct HVC_NROM : Board {
+  HVC_NROM(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*FAMILYBASIC*")) revision = Revision::FAMILYBASIC;
+    if(type.match("*HROM*"       )) revision = Revision::HROM;
+    if(type.match("*NROM*"       )) revision = Revision::NROM;
+    if(type.match("*RROM*"       )) revision = Revision::RROM;
+    if(type.match("*RTROM*"      )) revision = Revision::RTROM;
+    if(type.match("*SROM*"       )) revision = Revision::SROM;
+    if(type.match("*STROM*"      )) revision = Revision::STROM;
+    if(revision == Revision::HROM) {
+      settings.mirror = 0;
+    } else {
+      settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x8000) return read(prgrom, addr);
+    if(revision == Revision::FAMILYBASIC && (addr & 0xe000) == 0x6000) return read(prgram, addr);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(revision == Revision::FAMILYBASIC && (addr & 0xe000) == 0x6000) write(prgram, addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr & 0x07ff);
+    }
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    return Board::writeCHR(addr, data);
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+  }
+
+  enum class Revision : uint {
+    FAMILYBASIC,
+    HROM,
+    NROM,
+    RROM,
+    RTROM,
+    SROM,
+    STROM,
+  } revision;
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+};
diff --git a/higan/fc/cartridge/board/nes-pxrom.cpp b/higan/fc/cartridge/board/hvc-pxrom.cpp
similarity index 78%
rename from higan/fc/cartridge/board/nes-pxrom.cpp
rename to higan/fc/cartridge/board/hvc-pxrom.cpp
index 79dfd75..1562204 100644
--- a/higan/fc/cartridge/board/nes-pxrom.cpp
+++ b/higan/fc/cartridge/board/hvc-pxrom.cpp
@@ -1,13 +1,15 @@
 //MMC2
 
-struct NES_PxROM : Board {
-  NES_PxROM(Markup::Node& document) : Board(document) {
-    revision = Revision::PNROM;
+struct HVC_PxROM : Board {
+  HVC_PxROM(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*PEEOROM*")) revision = Revision::PEEOROM;
+    if(type.match("*PNROM*"  )) revision = Revision::PNROM;
   }
 
   auto readPRG(uint addr) -> uint8 {
     if(addr < 0x6000) return cpu.mdr();
-    if(addr < 0x8000) return prgram.read(addr);
+    if(addr < 0x8000) return read(prgram, addr);
     uint bank = 0;
     switch((addr / 0x2000) & 3) {
     case 0: bank = prgBank; break;
@@ -15,12 +17,12 @@ struct NES_PxROM : Board {
     case 2: bank = 0x0e; break;
     case 3: bank = 0x0f; break;
     }
-    return prgrom.read((bank * 0x2000) | (addr & 0x1fff));
+    return read(prgrom, (bank * 0x2000) | (addr & 0x1fff));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr < 0x6000) return;
-    if(addr < 0x8000) return prgram.write(addr, data);
+    if(addr < 0x8000) return write(prgram, addr, data);
 
     switch(addr & 0xf000) {
     case 0xa000: prgBank = data & 0x0f; break;
@@ -32,7 +34,7 @@ struct NES_PxROM : Board {
     }
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -40,7 +42,7 @@ struct NES_PxROM : Board {
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(addrCIRAM(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
     bool region = addr & 0x1000;
     uint bank = chrBank[region][latch[region]];
     if((addr & 0x0ff8) == 0x0fd8) latch[region] = 0;
@@ -49,7 +51,7 @@ struct NES_PxROM : Board {
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(addrCIRAM(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
     bool region = addr & 0x1000;
     uint bank = chrBank[region][latch[region]];
     if((addr & 0x0ff8) == 0x0fd8) latch[region] = 0;
diff --git a/higan/fc/cartridge/board/hvc-sxrom.cpp b/higan/fc/cartridge/board/hvc-sxrom.cpp
new file mode 100644
index 0000000..290ac95
--- /dev/null
+++ b/higan/fc/cartridge/board/hvc-sxrom.cpp
@@ -0,0 +1,145 @@
+struct HVC_SxROM : Board {
+  HVC_SxROM(Markup::Node& boardNode) : Board(boardNode), mmc1(*this, boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*SAROM"   )) revision = Revision::SAROM;
+    if(type.match("*SBROM"   )) revision = Revision::SBROM;
+    if(type.match("*SCROM"   )) revision = Revision::SCROM;
+    if(type.match("*SC1ROM"  )) revision = Revision::SC1ROM;
+    if(type.match("*SEROM"   )) revision = Revision::SEROM;
+    if(type.match("*SFROM"   )) revision = Revision::SFROM;
+    if(type.match("*SF1ROM"  )) revision = Revision::SF1ROM;
+    if(type.match("*SFEXPROM")) revision = Revision::SFEXPROM;
+    if(type.match("*SGROM"   )) revision = Revision::SGROM;
+    if(type.match("*SHROM"   )) revision = Revision::SHROM;
+    if(type.match("*SH1ROM"  )) revision = Revision::SH1ROM;
+    if(type.match("*SIROM"   )) revision = Revision::SIROM;
+    if(type.match("*SJROM"   )) revision = Revision::SJROM;
+    if(type.match("*SKROM"   )) revision = Revision::SKROM;
+    if(type.match("*SLROM"   )) revision = Revision::SLROM;
+    if(type.match("*SL1ROM"  )) revision = Revision::SL1ROM;
+    if(type.match("*SL2ROM"  )) revision = Revision::SL2ROM;
+    if(type.match("*SL3ROM"  )) revision = Revision::SL3ROM;
+    if(type.match("*SLRROM"  )) revision = Revision::SLRROM;
+    if(type.match("*SMROM"   )) revision = Revision::SMROM;
+    if(type.match("*SNROM"   )) revision = Revision::SNROM;
+    if(type.match("*SNWEPROM")) revision = Revision::SNWEPROM;
+    if(type.match("*SOROM"   )) revision = Revision::SOROM;
+    if(type.match("*SUROM"   )) revision = Revision::SUROM;
+    if(type.match("*SXROM"   )) revision = Revision::SXROM;
+  }
+
+  auto main() -> void {
+    mmc1.main();
+  }
+
+  auto ramAddress(uint addr) -> uint {
+    uint bank = 0;
+    if(revision == Revision::SOROM) bank = (mmc1.chrBank[0] & 0x08) >> 3;
+    if(revision == Revision::SXROM) bank = (mmc1.chrBank[0] & 0x0c) >> 2;
+    return (bank << 13) | (addr & 0x1fff);
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0xe000) == 0x6000) {
+      if(revision == Revision::SNROM) {
+        if((mmc1.chrAddress(ppu.io.chrAddressBus) >> 16) & 1) return cpu.mdr();
+      }
+      if(mmc1.ramDisable) return cpu.mdr();
+      if(prgram.size() > 0) return read(prgram, ramAddress(addr));
+    }
+
+    if(addr & 0x8000) {
+      switch(revision) {
+      default:
+        addr = mmc1.prgAddress(addr);
+        if(revision == Revision::SUROM || revision == Revision::SXROM) {
+          addr |= ((mmc1.chrAddress(ppu.io.chrAddressBus) >> 16) & 1) << 18;
+        }
+        break;
+      case Revision::SEROM:
+      case Revision::SHROM:
+      case Revision::SH1ROM:
+        break;
+      case Revision::SFEXPROM:
+        addr = mmc1.prgAddress(addr);
+        if((expLock & 0x20) && (addr & 0x7fff) == 0x0180) return 0x05;
+        break;
+      }
+      return read(prgrom, addr);
+    }
+
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000) {
+      if(revision == Revision::SNROM) {
+        if(mmc1.chrBank[0] & 0x10) return;
+      } else if(revision == Revision::SFEXPROM) {
+        expLock = data;
+      }
+      if(mmc1.ramDisable) return;
+      if(prgram.size() > 0) return write(prgram, ramAddress(addr), data);
+    }
+
+    if(addr & 0x8000) return mmc1.mmioWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(mmc1.ciramAddress(addr));
+    return Board::readCHR(mmc1.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(mmc1.ciramAddress(addr), data);
+    return Board::writeCHR(mmc1.chrAddress(addr), data);
+  }
+
+  auto power() -> void {
+    mmc1.power();
+  }
+
+  auto reset() -> void {
+    mmc1.reset();
+    expLock = 0x00;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    mmc1.serialize(s);
+    if(revision == Revision::SFEXPROM) {
+      s.integer(expLock);
+    }
+  }
+
+  enum class Revision : uint {
+    SAROM,
+    SBROM,
+    SCROM,
+    SC1ROM,
+    SEROM,
+    SFROM,
+    SF1ROM,
+    SFEXPROM,
+    SGROM,
+    SHROM,
+    SH1ROM,
+    SIROM,
+    SJROM,
+    SKROM,
+    SLROM,
+    SL1ROM,
+    SL2ROM,
+    SL3ROM,
+    SLRROM,
+    SMROM,
+    SNROM,
+    SNWEPROM,
+    SOROM,
+    SUROM,
+    SXROM,
+  } revision;
+
+  MMC1 mmc1;
+  uint8 expLock;
+};
diff --git a/higan/fc/cartridge/board/hvc-txrom.cpp b/higan/fc/cartridge/board/hvc-txrom.cpp
new file mode 100644
index 0000000..e9dd294
--- /dev/null
+++ b/higan/fc/cartridge/board/hvc-txrom.cpp
@@ -0,0 +1,106 @@
+struct HVC_TxROM : Board {
+  HVC_TxROM(Markup::Node& boardNode) : Board(boardNode), mmc3(*this, boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*TBROM"  )) revision = Revision::TBROM;
+    if(type.match("*TEROM"  )) revision = Revision::TEROM;
+    if(type.match("*TFROM"  )) revision = Revision::TFROM;
+    if(type.match("*TGROM"  )) revision = Revision::TGROM;
+    if(type.match("*TKROM"  )) revision = Revision::TKROM;
+    if(type.match("*TKEPROM")) revision = Revision::TKEPROM;
+    if(type.match("*TKSROM" )) revision = Revision::TKSROM;
+    if(type.match("*TLROM"  )) revision = Revision::TLROM;
+    if(type.match("*TL1ROM" )) revision = Revision::TL1ROM;
+    if(type.match("*TL2ROM" )) revision = Revision::TL2ROM;
+    if(type.match("*TLSROM" )) revision = Revision::TLSROM;
+    if(type.match("*TNROM"  )) revision = Revision::TNROM;
+    if(type.match("*TQROM"  )) revision = Revision::TQROM;
+    if(type.match("*TR1ROM" )) revision = Revision::TR1ROM;
+    if(type.match("*TSROM"  )) revision = Revision::TSROM;
+    if(type.match("*TVROM"  )) revision = Revision::TVROM;
+    if(type.match("*MC-ACC" )) revision = Revision::MCACC;
+  }
+
+  auto main() -> void {
+    mmc3.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0xe000) == 0x6000 && prgram.size() > 0) return mmc3.ramRead(addr);
+    if(addr & 0x8000) return read(prgrom, mmc3.prgAddress(addr));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000 && prgram.size() > 0) return mmc3.ramWrite(addr, data);
+    if(addr & 0x8000) return mmc3.regWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(revision == Revision::TR1ROM || revision == Revision::TVROM) {
+      if(addr & 0x2000) return read(chrram, addr);
+      return read(chrrom, mmc3.chrAddress(addr));
+    }
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
+    if(revision == Revision::TQROM) {
+      if(mmc3.chrAddress(addr) & (0x40 << 10))
+        return read(chrram, mmc3.chrAddress(addr));
+      else
+        return read(chrrom, mmc3.chrAddress(addr));
+    }
+    return Board::readCHR(mmc3.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(revision == Revision::TR1ROM || revision == Revision::TVROM) {
+      if(addr & 0x2000) write(chrram, addr, data);
+      return;
+    }
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
+    return Board::writeCHR(mmc3.chrAddress(addr), data);
+  }
+
+  auto ciramAddress(uint addr) -> uint {
+    switch(revision) {
+    default:
+      return mmc3.ciramAddress(addr);
+    case Revision::TKSROM:
+    case Revision::TLSROM:
+      return ((mmc3.chrAddress(addr & 0xfff) & 0x20000) >> 7) | (addr & 0x3ff);
+    }
+  }
+
+  auto power() -> void {
+    mmc3.power();
+  }
+
+  auto reset() -> void {
+    mmc3.reset();
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    mmc3.serialize(s);
+  }
+
+  enum class Revision : uint {
+    TBROM,
+    TEROM,
+    TFROM,
+    TGROM,
+    TKROM,
+    TKEPROM,
+    TKSROM,
+    TLROM,
+    TL1ROM,
+    TL2ROM,
+    TLSROM,
+    TNROM,
+    TQROM,
+    TR1ROM,
+    TSROM,
+    TVROM,
+    MCACC,
+  } revision;
+
+  MMC3 mmc3;
+};
diff --git a/higan/fc/cartridge/board/hvc-uxrom.cpp b/higan/fc/cartridge/board/hvc-uxrom.cpp
new file mode 100644
index 0000000..d5bdd38
--- /dev/null
+++ b/higan/fc/cartridge/board/hvc-uxrom.cpp
@@ -0,0 +1,87 @@
+//HVC-UNROM
+//HVC-UN1ROM
+//HVC-UOROM
+
+struct HVC_UxROM : Board {
+  HVC_UxROM(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+    string type = boardNode["id"].text();
+    if(type.match("*UNROM" )) revision = Revision::UNROM;
+    if(type.match("*UN1ROM")) revision = Revision::UN1ROM;
+    if(type.match("*UOROM" )) revision = Revision::UOROM;
+    type = boardNode["chip/type"].text();
+    if(type.match("74*32")) chipType = ChipType::_7432;
+    if(type.match("74*08")) chipType = ChipType::_7408;
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x0000) return cpu.mdr();
+    switch(chipType) {
+    case ChipType::_7432:
+      switch(addr & 0xc000) {
+      case 0x8000: return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+      case 0xc000: return read(prgrom, (   0x0f << 14) | (addr & 0x3fff));
+      }
+    case ChipType::_7408:
+      switch(addr & 0xc000) {
+      case 0x8000: return read(prgrom, (   0x00 << 14) | (addr & 0x3fff));
+      case 0xc000: return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+      }
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      if(revision != Revision::UN1ROM) prgBank = data & 0x0f;
+      if(revision == Revision::UN1ROM) prgBank = (data & 0x1c) >> 2;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    return Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+
+    s.integer(prgBank);
+  }
+
+  enum class Revision : uint {
+    UNROM,
+    UN1ROM,
+    UOROM,
+  } revision;
+
+  enum class ChipType : uint {
+    _7432,
+    _7408,
+  } chipType;
+
+  struct Settings {
+    bool mirror;    //0 = vertical, 1 = horizontal
+  } settings;
+
+  uint4 prgBank;
+};
diff --git a/higan/fc/cartridge/board/irem-74-161-161-21-138.cpp b/higan/fc/cartridge/board/irem-74-161-161-21-138.cpp
new file mode 100644
index 0000000..c0dc879
--- /dev/null
+++ b/higan/fc/cartridge/board/irem-74-161-161-21-138.cpp
@@ -0,0 +1,62 @@
+//IREM-74*161/161/21/138
+
+struct Irem74_161_161_21_138 : Board {
+  Irem74_161_161_21_138(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      prgBank = (data & 0x0f) >> 0;
+      chrBank = (data & 0xf0) >> 4;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ciramRead(addr);
+    if((addr & 0x1800) == 0x0000) return read(chrrom, (addr & 0x07ff) | (chrBank << 11));
+    return read(chrram, addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ciramWrite(addr, data);
+    if((addr & 0x1800) != 0x0000) return write(chrram, addr & 0x1fff, data);
+  }
+
+  auto ciramRead(uint addr) -> uint8 {
+    switch(addr & 0x0800) {
+    case 0x0000: return read(chrram, addr & 0x1fff);
+    case 0x0800: return ppu.readCIRAM(addr);
+    }
+  }
+
+  auto ciramWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0x0800) {
+    case 0x0000: return write(chrram, addr & 0x1fff, data);
+    case 0x0800: return ppu.writeCIRAM(addr, data);
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+  }
+
+  uint4 prgBank;
+  uint4 chrBank;
+};
diff --git a/higan/fc/cartridge/board/irem-g101.cpp b/higan/fc/cartridge/board/irem-g101.cpp
new file mode 100644
index 0000000..f28d386
--- /dev/null
+++ b/higan/fc/cartridge/board/irem-g101.cpp
@@ -0,0 +1,59 @@
+struct IremG101 : Board {
+  IremG101(Markup::Node& boardNode) : Board(boardNode), g101(*this, boardNode) {
+    if(!boardNode["mirror"]) {
+      settings.mirror = 0;
+    } else {
+      string mirror = boardNode["mirror/mode"].text();
+      if(mirror == "screen-0") settings.mirror = 1;
+      if(mirror == "screen-1") settings.mirror = 2;
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x8000) return read(prgrom, g101.prgAddress(addr));
+    if((addr & 0xe000) == 0x6000) return read(prgram, addr & 0x1fff);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0x8000) == 0x8000) return g101.regWrite(addr, data);
+    if((addr & 0xe000) == 0x6000) return write(prgram, addr & 0x1fff, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) switch(settings.mirror) {
+    case 0: return ppu.readCIRAM(g101.ciramAddress(addr));
+    case 1: return ppu.readCIRAM((addr & 0x03ff) | 0x0400);
+    case 2: return ppu.readCIRAM((addr & 0x03ff) | 0x0800);
+    }
+    return Board::readCHR(g101.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) switch(settings.mirror) {
+    case 0: return ppu.writeCIRAM(g101.ciramAddress(addr), data);
+    case 1: return ppu.writeCIRAM((addr & 0x03ff) | 0x0400, data);
+    case 2: return ppu.writeCIRAM((addr & 0x03ff) | 0x0800, data);
+    }
+    return Board::writeCHR(g101.chrAddress(addr), data);
+  }
+
+  auto power() -> void {
+    g101.power();
+  }
+
+  auto reset() -> void {
+    g101.reset();
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    g101.serialize(s);
+  }
+
+  struct Settings {
+    uint2 mirror;  //0 = G101-controlled, 1 = screen 0, 2 = screen 1
+  } settings;
+
+  G101 g101;
+};
diff --git a/higan/fc/cartridge/board/irem-h3001.cpp b/higan/fc/cartridge/board/irem-h3001.cpp
new file mode 100644
index 0000000..cf9ed66
--- /dev/null
+++ b/higan/fc/cartridge/board/irem-h3001.cpp
@@ -0,0 +1,44 @@
+struct IremH3001 : Board {
+  IremH3001(Markup::Node& boardNode) : Board(boardNode), ifh3001(*this, boardNode) {
+  }
+
+  auto main() -> void {
+    ifh3001.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x8000) return read(prgrom, ifh3001.prgAddress(addr));
+    if((addr & 0xe000) == 0x6000) return read(prgram, addr & 0x1fff);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0x8000) == 0x8000) return ifh3001.regWrite(addr, data);
+    if((addr & 0xe000) == 0x6000) return write(prgram, addr & 0x1fff, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(ifh3001.ciramAddress(addr));
+    return Board::readCHR(ifh3001.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(ifh3001.ciramAddress(addr), data);
+    return Board::writeCHR(ifh3001.chrAddress(addr), data);
+  }
+
+  auto power() -> void {
+    ifh3001.power();
+  }
+
+  auto reset() -> void {
+    ifh3001.reset();
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    ifh3001.serialize(s);
+  }
+
+  IFH3001 ifh3001;
+};
diff --git a/higan/fc/cartridge/board/irem-holydiver.cpp b/higan/fc/cartridge/board/irem-holydiver.cpp
new file mode 100644
index 0000000..ebe1bea
--- /dev/null
+++ b/higan/fc/cartridge/board/irem-holydiver.cpp
@@ -0,0 +1,59 @@
+//IREM-HOLYDIVER
+
+struct IremHolyDiver : Board {
+  IremHolyDiver(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    switch(addr & 0xc000) {
+    case 0x8000: return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+    case 0xc000: return read(prgrom, (   0x07 << 14) | (addr & 0x3fff));
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      prgBank = (data & 0x07) >> 0;
+      mirror = data & 0x08;
+      chrBank = (data & 0xf0) >> 4;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR((chrBank * 0x2000) + (addr & 0x1fff));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    Board::writeCHR((chrBank * 0x2000) + (addr & 0x1fff), data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+    mirror = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+    s.integer(mirror);
+  }
+
+  uint3 prgBank;
+  uint4 chrBank;
+  bool mirror;
+};
diff --git a/higan/fc/cartridge/board/nes-bnrom.cpp b/higan/fc/cartridge/board/irem-i-im.cpp
similarity index 55%
rename from higan/fc/cartridge/board/nes-bnrom.cpp
rename to higan/fc/cartridge/board/irem-i-im.cpp
index e0163e4..5a4098c 100644
--- a/higan/fc/cartridge/board/nes-bnrom.cpp
+++ b/higan/fc/cartridge/board/irem-i-im.cpp
@@ -1,22 +1,27 @@
-//NES-BN-ROM-01
+//IREM-BNROM
+//NES-BNROM
 
-struct NES_BNROM : Board {
-  NES_BNROM(Markup::Node& document) : Board(document) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
+struct IremIIM : Board {
+  IremIIM(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read((prgBank << 15) | (addr & 0x7fff));
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if(addr & 0x8000) prgBank = data & 0x03;
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      prgBank = data & 0x03;
+    }
   }
 
   auto readCHR(uint addr) -> uint8 {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
       return ppu.readCIRAM(addr);
     }
     return Board::readCHR(addr);
@@ -24,7 +29,7 @@ struct NES_BNROM : Board {
 
   auto writeCHR(uint addr, uint8 data) -> void {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
       return ppu.writeCIRAM(addr, data);
     }
     return Board::writeCHR(addr, data);
@@ -43,7 +48,7 @@ struct NES_BNROM : Board {
   }
 
   struct Settings {
-    bool mirror;  //0 = horizontal, 1 = vertical
+    bool mirror;  //0 = vertical, 1 = horizontal
   } settings;
 
   uint2 prgBank;
diff --git a/higan/fc/cartridge/board/irem-tam-s1.cpp b/higan/fc/cartridge/board/irem-tam-s1.cpp
new file mode 100644
index 0000000..a0d70bf
--- /dev/null
+++ b/higan/fc/cartridge/board/irem-tam-s1.cpp
@@ -0,0 +1,67 @@
+//IREM-TAM-S1
+
+struct IremTamS1 : Board {
+  IremTamS1(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x0000) return cpu.mdr();
+    switch(addr & 0xc000) {
+    case 0x8000: return read(prgrom, (   0x0f << 14) | (addr & 0x3fff));
+    case 0xc000: return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      //TODO: check for bus conflicts
+      //data &= readPRG(addr);
+      prgBank = data & 0x0f;
+      mirror = (data & 0xc0) >> 6;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      switch(mirror) {
+      case 0: addr = (0x0000              ) | (addr & 0x03ff); break;
+      case 1: addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff); break;
+      case 2: addr = ((addr & 0x0400) >> 0) | (addr & 0x03ff); break;
+      case 3: addr = (0x0400              ) | (addr & 0x03ff); break;
+      }
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      switch(mirror) {
+      case 0: addr = (0x0000              ) | (addr & 0x03ff); break;
+      case 1: addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff); break;
+      case 2: addr = ((addr & 0x0400) >> 0) | (addr & 0x03ff); break;
+      case 3: addr = (0x0400              ) | (addr & 0x03ff); break;
+      }
+      return ppu.writeCIRAM(addr, data);
+    }
+    return Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    mirror = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+
+    s.integer(prgBank);
+    s.integer(mirror);
+  }
+
+  uint4 prgBank;
+  uint2 mirror; //0 = screen 0, 1 = horizontal, 2 = vertical, 3 = screen 1
+};
diff --git a/higan/fc/cartridge/board/jaleco-jf-0x.cpp b/higan/fc/cartridge/board/jaleco-jf-0x.cpp
new file mode 100644
index 0000000..c75793d
--- /dev/null
+++ b/higan/fc/cartridge/board/jaleco-jf-0x.cpp
@@ -0,0 +1,98 @@
+//JALECO-JF-05
+//JALECO-JF-06
+//JALECO-JF-07
+//JALECO-JF-08
+//JALECO-JF-09
+//JALECO-JF-10
+//JALECO-JF-11
+//JALECO-JF-14
+
+struct JalecoJF0x : Board {
+  JalecoJF0x(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*JF-05*")) revision = Revision::JF_05;
+    if(type.match("*JF-06*")) revision = Revision::JF_06;
+    if(type.match("*JF-07*")) revision = Revision::JF_07;
+    if(type.match("*JF-08*")) revision = Revision::JF_08;
+    if(type.match("*JF-09*")) revision = Revision::JF_09;
+    if(type.match("*JF-10*")) revision = Revision::JF_10;
+    if(type.match("*JF-11*")) revision = Revision::JF_11;
+    if(type.match("*JF-14*")) revision = Revision::JF_14;
+
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000) {
+      switch(revision) {
+      case Revision::JF_05: case Revision::JF_06: case Revision::JF_07:
+      case Revision::JF_08: case Revision::JF_09: case Revision::JF_10: {
+        chrBank = ((data & 0x01) << 1) | ((data & 0x02) >> 1);
+        break;
+      }
+
+      case Revision::JF_11: case Revision::JF_14: {
+        prgBank = (data & 0x30) >> 4;
+        chrBank = (data & 0x0f) >> 0;
+        break;
+      }
+
+      }
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+  }
+
+  enum class Revision : uint {
+    JF_05,
+    JF_06,
+    JF_07,
+    JF_08,
+    JF_09,
+    JF_10,
+    JF_11,
+    JF_14,
+  } revision;
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+
+  uint2 prgBank;
+  uint4 chrBank;
+};
diff --git a/higan/fc/cartridge/board/jaleco-jf-16.cpp b/higan/fc/cartridge/board/jaleco-jf-16.cpp
new file mode 100644
index 0000000..ad62ba1
--- /dev/null
+++ b/higan/fc/cartridge/board/jaleco-jf-16.cpp
@@ -0,0 +1,59 @@
+  //JALECO-JF-16
+
+struct JalecoJF16 : Board {
+  JalecoJF16(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    switch(addr & 0xc000) {
+    case 0x8000: return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+    case 0xc000: return read(prgrom, (   0x07 << 14) | (addr & 0x3fff));
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      prgBank = (data & 0x07) >> 0;
+      nametable = data & 0x08;
+      chrBank = (data & 0xf0) >> 4;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      addr = (nametable << 10) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR((chrBank * 0x2000) + (addr & 0x1fff));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      addr = (nametable << 10) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    Board::writeCHR((chrBank * 0x2000) + (addr & 0x1fff), data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+    nametable = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+    s.integer(nametable);
+  }
+
+  uint3 prgBank;
+  uint4 chrBank;
+  bool nametable;
+};
diff --git a/higan/fc/cartridge/board/jaleco-jf-2x.cpp b/higan/fc/cartridge/board/jaleco-jf-2x.cpp
new file mode 100644
index 0000000..6435abd
--- /dev/null
+++ b/higan/fc/cartridge/board/jaleco-jf-2x.cpp
@@ -0,0 +1,65 @@
+//JALECO-JF-24
+//JALECO-JF-25
+
+struct JalecoJF2x : Board {
+  JalecoJF2x(Markup::Node& boardNode) : Board(boardNode), ss88006(*this, boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*JF-23")) revision = Revision::JF_23;
+    if(type.match("*JF-24")) revision = Revision::JF_24;
+    if(type.match("*JF-25")) revision = Revision::JF_25;
+    if(type.match("*JF-27")) revision = Revision::JF_27;
+    if(type.match("*JF-29")) revision = Revision::JF_29;
+    if(type.match("*JF-37")) revision = Revision::JF_37;
+    if(type.match("*JF-40")) revision = Revision::JF_40;
+  }
+
+  auto main() -> void {
+    ss88006.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x8000) return read(prgrom, ss88006.prgAddress(addr));
+    if((addr & 0xe000) == 0x6000) return ss88006.ramRead(addr);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0x8000) == 0x8000) return ss88006.regWrite(addr, data);
+    if((addr & 0xe000) == 0x6000) return ss88006.ramWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(ss88006.ciramAddress(addr));
+    return Board::readCHR(ss88006.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(ss88006.ciramAddress(addr), data);
+    return Board::writeCHR(ss88006.chrAddress(addr), data);
+  }
+
+  auto power() -> void {
+    ss88006.power();
+  }
+
+  auto reset() -> void {
+    ss88006.reset();
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    ss88006.serialize(s);
+  }
+
+  enum class Revision : uint {
+    JF_23,
+    JF_24,
+    JF_25,
+    JF_27,
+    JF_29,
+    JF_37,
+    JF_40,
+  } revision;
+
+  SS88006 ss88006;
+};
diff --git a/higan/fc/cartridge/board/konami-vrc1.cpp b/higan/fc/cartridge/board/konami-vrc1.cpp
index 7c2a416..82c22b6 100644
--- a/higan/fc/cartridge/board/konami-vrc1.cpp
+++ b/higan/fc/cartridge/board/konami-vrc1.cpp
@@ -1,24 +1,24 @@
 struct KonamiVRC1 : Board {
-  KonamiVRC1(Markup::Node& document) : Board(document), vrc1(*this) {
+  KonamiVRC1(Markup::Node& boardNode) : Board(boardNode), vrc1(*this) {
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read(vrc1.addrPRG(addr));
+    if(addr & 0x8000) return read(prgrom, vrc1.prgAddress(addr));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if(addr & 0x8000) return vrc1.writeIO(addr, data);
+    if(addr & 0x8000) return vrc1.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(vrc1.addrCIRAM(addr));
-    return Board::readCHR(vrc1.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(vrc1.ciramAddress(addr));
+    return Board::readCHR(vrc1.chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(vrc1.addrCIRAM(addr), data);
-    return Board::writeCHR(vrc1.addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(vrc1.ciramAddress(addr), data);
+    return Board::writeCHR(vrc1.chrAddress(addr), data);
   }
 
   auto power() -> void {
diff --git a/higan/fc/cartridge/board/konami-vrc2.cpp b/higan/fc/cartridge/board/konami-vrc2.cpp
index 00952b3..16a953e 100644
--- a/higan/fc/cartridge/board/konami-vrc2.cpp
+++ b/higan/fc/cartridge/board/konami-vrc2.cpp
@@ -1,34 +1,37 @@
 struct KonamiVRC2 : Board {
-  KonamiVRC2(Markup::Node& document) : Board(document), vrc2(*this) {
-    settings.pinout.a0 = 1 << document["board/chip/pinout/a0"].natural();
-    settings.pinout.a1 = 1 << document["board/chip/pinout/a1"].natural();
+  KonamiVRC2(Markup::Node& boardNode) : Board(boardNode), vrc2(*this) {
+    settings.pinout.a0 = 1 << boardNode["chip/pinout/a0"].natural();
+    settings.pinout.a1 = 1 << boardNode["chip/pinout/a1"].natural();
+    settings.pinout.chrShift = boardNode["chip/pinout/chr-shift"].natural();
   }
 
   auto readPRG(uint addr) -> uint8 {
     if(addr < 0x6000) return cpu.mdr();
-    if(addr < 0x8000) return vrc2.readRAM(addr);
-    return prgrom.read(vrc2.addrPRG(addr));
+    if(addr < 0x8000) return vrc2.ramRead(addr);
+    return read(prgrom, vrc2.prgAddress(addr));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr < 0x6000) return;
-    if(addr < 0x8000) return vrc2.writeRAM(addr, data);
+    if(addr < 0x8000) return vrc2.ramWrite(addr, data);
 
     bool a0 = (addr & settings.pinout.a0);
     bool a1 = (addr & settings.pinout.a1);
     addr &= 0xfff0;
     addr |= (a0 << 0) | (a1 << 1);
-    return vrc2.writeIO(addr, data);
+    return vrc2.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(vrc2.addrCIRAM(addr));
-    return Board::readCHR(vrc2.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(vrc2.ciramAddress(addr));
+    addr = vrc2.chrAddress(addr);
+    addr = ((addr >> settings.pinout.chrShift) & ~0x3ff) | (addr & 0x3ff);
+    return Board::readCHR(addr);
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(vrc2.addrCIRAM(addr), data);
-    return Board::writeCHR(vrc2.addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(vrc2.ciramAddress(addr), data);
+    return Board::writeCHR(vrc2.chrAddress(addr), data);
   }
 
   auto power() -> void {
@@ -48,6 +51,7 @@ struct KonamiVRC2 : Board {
     struct Pinout {
       uint a0;
       uint a1;
+      uint chrShift;
     } pinout;
   } settings;
 
diff --git a/higan/fc/cartridge/board/konami-vrc3.cpp b/higan/fc/cartridge/board/konami-vrc3.cpp
index f71b4a5..677ea2f 100644
--- a/higan/fc/cartridge/board/konami-vrc3.cpp
+++ b/higan/fc/cartridge/board/konami-vrc3.cpp
@@ -1,6 +1,6 @@
 struct KonamiVRC3 : Board {
-  KonamiVRC3(Markup::Node& document) : Board(document), vrc3(*this) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
+  KonamiVRC3(Markup::Node& boardNode) : Board(boardNode), vrc3(*this) {
+    settings.mirror = boardNode["mirror/mode"].text() == "vertical" ? 1 : 0;
   }
 
   auto main() -> void {
@@ -8,30 +8,30 @@ struct KonamiVRC3 : Board {
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if((addr & 0xe000) == 0x6000) return prgram.read(addr & 0x1fff);
-    if(addr & 0x8000) return prgrom.read(vrc3.addrPRG(addr));
+    if((addr & 0xe000) == 0x6000) return read(prgram, addr & 0x1fff);
+    if(addr & 0x8000) return read(prgrom, vrc3.prgAddress(addr));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if((addr & 0xe000) == 0x6000) return prgram.write(addr & 0x1fff, data);
-    if(addr & 0x8000) return vrc3.writeIO(addr, data);
+    if((addr & 0xe000) == 0x6000) return write(prgram, addr & 0x1fff, data);
+    if(addr & 0x8000) return vrc3.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
     if(addr & 0x2000) {
       if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.readCIRAM(addr & 0x07ff);
+      return ppu.readCIRAM(addr);
     }
-    return chrram.read(addr);
+    return Board::readCHR(addr);
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
     if(addr & 0x2000) {
       if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.writeCIRAM(addr & 0x07ff, data);
+      return ppu.writeCIRAM(addr, data);
     }
-    return chrram.write(addr, data);
+    return Board::writeCHR(addr, data);
   }
 
   auto power() -> void {
diff --git a/higan/fc/cartridge/board/konami-vrc4.cpp b/higan/fc/cartridge/board/konami-vrc4.cpp
index a8b9f3f..f6ef8d6 100644
--- a/higan/fc/cartridge/board/konami-vrc4.cpp
+++ b/higan/fc/cartridge/board/konami-vrc4.cpp
@@ -1,7 +1,7 @@
 struct KonamiVRC4 : Board {
-  KonamiVRC4(Markup::Node& document) : Board(document), vrc4(*this) {
-    settings.pinout.a0 = 1 << document["board/chip/pinout/a0"].natural();
-    settings.pinout.a1 = 1 << document["board/chip/pinout/a1"].natural();
+  KonamiVRC4(Markup::Node& boardNode) : Board(boardNode), vrc4(*this) {
+    settings.pinout.a0 = 1 << boardNode["chip/pinout/a0"].natural();
+    settings.pinout.a1 = 1 << boardNode["chip/pinout/a1"].natural();
   }
 
   auto main() -> void {
@@ -10,29 +10,29 @@ struct KonamiVRC4 : Board {
 
   auto readPRG(uint addr) -> uint8 {
     if(addr < 0x6000) return cpu.mdr();
-    if(addr < 0x8000) return prgram.read(addr);
-    return prgrom.read(vrc4.addrPRG(addr));
+    if(addr < 0x8000) return read(prgram, addr);
+    return read(prgrom, vrc4.prgAddress(addr));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr < 0x6000) return;
-    if(addr < 0x8000) return prgram.write(addr, data);
+    if(addr < 0x8000) return write(prgram, addr, data);
 
     bool a0 = (addr & settings.pinout.a0);
     bool a1 = (addr & settings.pinout.a1);
-    addr &= 0xfff0;
+    addr &= 0xff00;
     addr |= (a1 << 1) | (a0 << 0);
-    return vrc4.writeIO(addr, data);
+    return vrc4.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(vrc4.addrCIRAM(addr));
-    return Board::readCHR(vrc4.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(vrc4.ciramAddress(addr));
+    return Board::readCHR(vrc4.chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(vrc4.addrCIRAM(addr), data);
-    return Board::writeCHR(vrc4.addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(vrc4.ciramAddress(addr), data);
+    return Board::writeCHR(vrc4.chrAddress(addr), data);
   }
 
   auto power() -> void {
diff --git a/higan/fc/cartridge/board/konami-vrc6.cpp b/higan/fc/cartridge/board/konami-vrc6.cpp
index 00a7d6b..de3fe85 100644
--- a/higan/fc/cartridge/board/konami-vrc6.cpp
+++ b/higan/fc/cartridge/board/konami-vrc6.cpp
@@ -1,30 +1,34 @@
 struct KonamiVRC6 : Board {
-  KonamiVRC6(Markup::Node& document) : Board(document), vrc6(*this) {
+  KonamiVRC6(Markup::Node& boardNode) : Board(boardNode), vrc6(*this) {
+    settings.pinout.a0 = 1 << boardNode["chip/pinout/a0"].natural();
+    settings.pinout.a1 = 1 << boardNode["chip/pinout/a1"].natural();
   }
 
-  auto readPRG(uint addr) -> uint8{
-    if((addr & 0xe000) == 0x6000) return vrc6.readRAM(addr);
-    if(addr & 0x8000) return prgrom.read(vrc6.addrPRG(addr));
-    return cpu.mdr();
+  auto readPRG(uint addr) -> uint8 {
+    if(addr < 0x6000) return cpu.mdr();
+    if(addr < 0x8000) return vrc6.ramRead(addr);
+    return read(prgrom, vrc6.prgAddress(addr));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if((addr & 0xe000) == 0x6000) return vrc6.writeRAM(addr, data);
-    if(addr & 0x8000) {
-      addr = (addr & 0xf003);
-      if(prgram.size) addr = (addr & ~3) | ((addr & 2) >> 1) | ((addr & 1) << 1);
-      return vrc6.writeIO(addr, data);
-    }
+    if(addr < 0x6000) return;
+    if(addr < 0x8000) return vrc6.ramWrite(addr, data);
+
+    bool a0 = (addr & settings.pinout.a0);
+    bool a1 = (addr & settings.pinout.a1);
+    addr &= 0xf000;
+    addr |= (a1 << 1) | (a0 << 0);
+    return vrc6.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(vrc6.addrCIRAM(addr));
-    return Board::readCHR(vrc6.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(vrc6.ciramAddress(addr));
+    return Board::readCHR(vrc6.chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(vrc6.addrCIRAM(addr), data);
-    return Board::writeCHR(vrc6.addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(vrc6.ciramAddress(addr), data);
+    return Board::writeCHR(vrc6.chrAddress(addr), data);
   }
 
   auto serialize(serializer& s) -> void {
@@ -36,5 +40,12 @@ struct KonamiVRC6 : Board {
   auto power() -> void { vrc6.power(); }
   auto reset() -> void { vrc6.reset(); }
 
+  struct Settings {
+    struct Pinout {
+      uint a0;
+      uint a1;
+    } pinout;
+  } settings;
+
   VRC6 vrc6;
 };
diff --git a/higan/fc/cartridge/board/konami-vrc7.cpp b/higan/fc/cartridge/board/konami-vrc7.cpp
index 1f706c0..e268827 100644
--- a/higan/fc/cartridge/board/konami-vrc7.cpp
+++ b/higan/fc/cartridge/board/konami-vrc7.cpp
@@ -1,39 +1,34 @@
 struct KonamiVRC7 : Board {
-  KonamiVRC7(Markup::Node& document) : Board(document), vrc7(*this) {
-  }
-
-  auto main() -> void {
-    return vrc7.main();
+  KonamiVRC7(Markup::Node& boardNode) : Board(boardNode), vrc7(*this) {
+    settings.pinout.a0 = 1 << boardNode["chip/pinout/a0"].natural();
+    settings.pinout.a1 = 1 << boardNode["chip/pinout/a1"].natural();
   }
 
   auto readPRG(uint addr) -> uint8 {
     if(addr < 0x6000) return cpu.mdr();
-    if(addr < 0x8000) return prgram.read(addr);
-    return prgrom.read(vrc7.addrPRG(addr));
+    if(addr < 0x8000) return read(prgram, addr);
+    return read(prgrom, vrc7.prgAddress(addr));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if(addr < 0x6000) return;
-    if(addr < 0x8000) return prgram.write(addr, data);
-    return vrc7.writeIO(addr, data);
+    if(addr < 0x8000) return write(prgram, addr, data);
+
+    bool a0 = (addr & settings.pinout.a0);
+    bool a1 = (addr & settings.pinout.a1);
+    addr &= 0xf000;
+    addr |= (a1 << 1) | (a0 << 0);
+    return vrc7.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(vrc7.addrCIRAM(addr));
-    return chrram.read(vrc7.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(vrc7.ciramAddress(addr));
+    return Board::readCHR(vrc7.chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(vrc7.addrCIRAM(addr), data);
-    return chrram.write(vrc7.addrCHR(addr), data);
-  }
-
-  auto power() -> void {
-    vrc7.power();
-  }
-
-  auto reset() -> void {
-    vrc7.reset();
+    if(addr & 0x2000) return ppu.writeCIRAM(vrc7.ciramAddress(addr), data);
+    return Board::writeCHR(vrc7.chrAddress(addr), data);
   }
 
   auto serialize(serializer& s) -> void {
@@ -41,5 +36,16 @@ struct KonamiVRC7 : Board {
     vrc7.serialize(s);
   }
 
+  auto main() -> void { vrc7.main(); }
+  auto power() -> void { vrc7.power(); }
+  auto reset() -> void { vrc7.reset(); }
+
+  struct Settings {
+    struct Pinout {
+      uint a0;
+      uint a1;
+    } pinout;
+  } settings;
+
   VRC7 vrc7;
 };
diff --git a/higan/fc/cartridge/board/namco-163.cpp b/higan/fc/cartridge/board/namco-163.cpp
new file mode 100644
index 0000000..05e2e2e
--- /dev/null
+++ b/higan/fc/cartridge/board/namco-163.cpp
@@ -0,0 +1,40 @@
+struct Namco163 : Board {
+  Namco163(Markup::Node& boardNode) : Board(boardNode), n163(*this, boardNode) {
+    chip = &n163;
+  }
+
+  auto main() -> void {
+    n163.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    n163.readPRG(addr);
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    n163.writePRG(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    n163.readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    n163.writeCHR(addr, data);
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    n163.serialize(s);
+  }
+
+  auto power() -> void {
+    n163.power();
+  }
+
+  auto reset() -> void {
+    n163.reset();
+  }
+
+  N163 n163;
+};
diff --git a/higan/fc/cartridge/board/namco-34xx.cpp b/higan/fc/cartridge/board/namco-34xx.cpp
new file mode 100644
index 0000000..372b784
--- /dev/null
+++ b/higan/fc/cartridge/board/namco-34xx.cpp
@@ -0,0 +1,148 @@
+//NAMCOT-3401 (bankswitching used even if PRG is 32KB - ããã«ã®å¡/Tower of Babel)
+//NAMCOT-3406
+//NAMCOT-3407
+//NAMCOT-3413
+//NAMCOT-3414
+//NAMCOT-3415
+//NAMCOT-3416
+//NAMCOT-3417
+//NAMCOT-3425
+//NAMCOT-3443
+//NAMCOT-3446
+//NAMCOT-3451
+//NAMCOT-3453
+//NES-DEROM
+//NES-DE1ROM
+//NES-DRROM
+
+struct Namco34xx : Board {
+  Namco34xx(Markup::Node& boardNode) : Board(boardNode), n108(*this, boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*3401")) revision = Revision::Namco3401;
+    if(type.match("*3406")) revision = Revision::Namco3406;
+    if(type.match("*3407")) revision = Revision::Namco3407;
+    if(type.match("*3413")) revision = Revision::Namco3413;
+    if(type.match("*3414")) revision = Revision::Namco3414;
+    if(type.match("*3415")) revision = Revision::Namco3415;
+    if(type.match("*3416")) revision = Revision::Namco3416;
+    if(type.match("*3417")) revision = Revision::Namco3417;
+    if(type.match("*3425")) revision = Revision::Namco3425;
+    if(type.match("*3443")) revision = Revision::Namco3443;
+    if(type.match("*3446")) revision = Revision::Namco3446;
+    if(type.match("*3451")) revision = Revision::Namco3451;
+    if(type.match("*3453")) revision = Revision::Namco3453;
+    if(type.match("*DEROM")) revision = Revision::DEROM;
+    if(type.match("*DE1ROM")) revision = Revision::DE1ROM;
+    if(type.match("*DRROM")) revision = Revision::DRROM;
+    if(type == "TENGEN-800002") revision = Revision::DEROM;
+    if(type == "TENGEN-800030") revision = Revision::DE1ROM;
+    if(type == "TENGEN-800004") revision = Revision::DRROM;
+
+    if(revision != Revision::Namco3425 && revision != Revision::Namco3453)
+      settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+  }
+
+  auto prgAddress(uint addr) -> uint {
+    if(revision == Revision::Namco3401 || prgrom.size() > 0x8000) return n108.prgAddress(addr);
+    else return addr & 0x7fff;
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, prgAddress(addr));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      n108.regWrite(addr, data);
+      if(revision == Revision::Namco3453) nametable = data & 0x40;
+    }
+  }
+
+  auto chrAddress(uint addr) -> uint {
+    switch(revision) {
+    case Revision::Namco3443:
+    case Revision::Namco3453:
+      return n108.chrAddress(addr) | ((addr & 0x1000) << 4);
+    case Revision::Namco3446:
+      if(addr <= 0x07ff) return (n108.chrAddress(0x1000) << 1) | (addr & 0x07ff);
+      if(addr <= 0x0fff) return (n108.chrAddress(0x1400) << 1) | (addr & 0x07ff);
+      if(addr <= 0x17ff) return (n108.chrAddress(0x1800) << 1) | (addr & 0x07ff);
+      if(addr <= 0x1fff) return (n108.chrAddress(0x1c00) << 1) | (addr & 0x07ff);
+    default:
+      return n108.chrAddress(addr);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(revision == Revision::DRROM) {
+      if(addr & 0x2000) {
+        if(!(addr & 0x0800)) return ppu.readCIRAM(addr & 0x07ff);
+        else                 return read(chrram, addr & 0x07ff);
+      }
+      return read(chrrom, n108.chrAddress(addr));
+    }
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
+    return Board::readCHR(chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(revision == Revision::DRROM) {
+      if(addr & 0x2000) {
+        if(!(addr & 0x0800)) ppu.writeCIRAM(addr & 0x07ff, data);
+        else                 write(chrram, addr & 0x07ff, data);
+      }
+      return;
+    }
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
+    return Board::writeCHR(chrAddress(addr), data);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    switch(revision) {
+    default:
+      if(settings.mirror == 0) return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
+      if(settings.mirror == 1) return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+    case Revision::Namco3425:
+      return ((n108.chrAddress(addr & 0x1fff) & 0x8000) >> 5) | (addr & 0x03ff);
+    case Revision::Namco3453:
+      return (addr & 0x03ff) | (nametable ? 0x0400 : 0x0000);
+    }
+  }
+
+  auto reset() -> void {
+    nametable = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    if(revision == Revision::Namco3453) s.integer(nametable);
+  }
+
+  enum class Revision : uint {
+    Namco3401,
+    Namco3406,
+    Namco3407,
+    Namco3413,
+    Namco3414,
+    Namco3415,
+    Namco3416,
+    Namco3417,
+    Namco3425,
+    Namco3443,
+    Namco3446,
+    Namco3451,
+    Namco3453,
+    DEROM,
+    DE1ROM,
+    DRROM,
+  } revision;
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+
+  N108 n108;
+
+  bool nametable; // for Namco3453, used only by Devil Man
+};
diff --git a/higan/fc/cartridge/board/nes-event.cpp b/higan/fc/cartridge/board/nes-event.cpp
new file mode 100644
index 0000000..b939fae
--- /dev/null
+++ b/higan/fc/cartridge/board/nes-event.cpp
@@ -0,0 +1,101 @@
+struct NES_Event : Board {
+  NES_Event(Markup::Node& boardNode) : Board(boardNode), mmc1(*this, boardNode) {
+    dip = interface->dipSettings(BML::unserialize({
+      "setting name=Time\n",
+      "  option value=4 name=6:14.96\n",
+      "  option value=0 name=4:59.97\n",
+      "  option value=1 name=5:18.71\n",
+      "  option value=2 name=5:37.46\n",
+      "  option value=3 name=5:56.21\n",
+      "  option value=5 name=6:33.71\n",
+      "  option value=6 name=6:52.45\n",
+      "  option value=7 name=7:11.20\n",
+      "  option value=8 name=7:29.95\n",
+      "  option value=9 name=7:48.70\n",
+      "  option value=10 name=8:07.44\n",
+      "  option value=11 name=8:26.19\n",
+      "  option value=12 name=8:44.94\n",
+      "  option value=13 name=9:03.69\n",
+      "  option value=14 name=9:22.44\n",
+      "  option value=15 name=9:41.18\n",
+    }));
+  }
+
+  auto main() -> void {
+    switch(prgLock) {
+    case 0: if((mmc1.chrBank[0] & 0x10) == 0x10) prgLock++; break;
+    case 1: if((mmc1.chrBank[0] & 0x10) == 0x00) prgLock++; break;
+    case 2:
+      if((mmc1.chrBank[0] & 0x10) == 0x00) irqCounter++;
+      if((mmc1.chrBank[0] & 0x10) == 0x10) {
+        irqCounter = 0x00000000;
+        cpu.irqLine(0);
+      }
+      break;
+    }
+    if(irqCounter == (0x20000000 | (dip << 25))) cpu.irqLine(1);
+    mmc1.main();
+  }
+
+  auto prgAddress(uint addr) -> uint {
+    if(prgLock < 2) return addr & 0x7fff;
+    switch(mmc1.chrBank[0] & 0x08) {
+    case 0: return ((mmc1.chrBank[0] & 0x06) << 14) | (addr & 0x7fff);
+    case 8: return mmc1.prgAddress(addr) | 0x20000;
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0xe000) == 0x6000) {
+      if(mmc1.ramDisable) return 0x00;
+      if(prgram.size() > 0) return read(prgram, addr);
+    }
+
+    if(addr & 0x8000) {
+      return read(prgrom, prgAddress(addr));
+    }
+
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000) {
+      if(mmc1.ramDisable) return;
+      if(prgram.size() > 0) return write(prgram, addr, data);
+    }
+
+    if(addr & 0x8000) return mmc1.mmioWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(mmc1.ciramAddress(addr));
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(mmc1.ciramAddress(addr), data);
+    return Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+    mmc1.power();
+  }
+
+  auto reset() -> void {
+    mmc1.reset();
+    prgLock = 0;
+    irqCounter = 0x00000000;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    mmc1.serialize(s);
+    s.integer(prgLock);
+    s.integer(irqCounter);
+  }
+
+  MMC1 mmc1;
+  uint2 prgLock;
+  uint30 irqCounter;
+  uint4 dip;
+};
diff --git a/higan/fc/cartridge/board/nes-hkrom.cpp b/higan/fc/cartridge/board/nes-hkrom.cpp
index 35c1ac1..4275e7e 100644
--- a/higan/fc/cartridge/board/nes-hkrom.cpp
+++ b/higan/fc/cartridge/board/nes-hkrom.cpp
@@ -1,5 +1,5 @@
 struct NES_HKROM : Board {
-  NES_HKROM(Markup::Node& document) : Board(document), mmc6(*this) {
+  NES_HKROM(Markup::Node& boardNode) : Board(boardNode), mmc6(*this) {
   }
 
   auto main() -> void {
@@ -7,26 +7,26 @@ struct NES_HKROM : Board {
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if((addr & 0xf000) == 0x7000) return mmc6.readRAM(addr);
-    if(addr & 0x8000) return prgrom.read(mmc6.addrPRG(addr));
+    if((addr & 0xf000) == 0x7000) return mmc6.ramRead(addr);
+    if(addr & 0x8000) return read(prgrom, mmc6.prgAddress(addr));
     return cpu.mdr();
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
-    if((addr & 0xf000) == 0x7000) return mmc6.writeRAM(addr, data);
-    if(addr & 0x8000) return mmc6.writeIO(addr, data);
+    if((addr & 0xf000) == 0x7000) return mmc6.ramWrite(addr, data);
+    if(addr & 0x8000) return mmc6.regWrite(addr, data);
   }
 
   auto readCHR(uint addr) -> uint8 {
     mmc6.irqTest(addr);
-    if(addr & 0x2000) return ppu.readCIRAM(mmc6.addrCIRAM(addr));
-    return Board::readCHR(mmc6.addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(mmc6.ciramAddress(addr));
+    return Board::readCHR(mmc6.chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
     mmc6.irqTest(addr);
-    if(addr & 0x2000) return ppu.writeCIRAM(mmc6.addrCIRAM(addr), data);
-    return Board::writeCHR(mmc6.addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(mmc6.ciramAddress(addr), data);
+    return Board::writeCHR(mmc6.chrAddress(addr), data);
   }
 
   auto power() -> void {
diff --git a/higan/fc/cartridge/board/nes-nrom.cpp b/higan/fc/cartridge/board/nes-nrom.cpp
deleted file mode 100644
index c352f9a..0000000
--- a/higan/fc/cartridge/board/nes-nrom.cpp
+++ /dev/null
@@ -1,41 +0,0 @@
-//NES-NROM-128
-//NES-NROM-256
-
-struct NES_NROM : Board {
-  NES_NROM(Markup::Node& document) : Board(document) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
-  }
-
-  auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read(addr);
-    return cpu.mdr();
-  }
-
-  auto writePRG(uint addr, uint8 data) -> void {
-  }
-
-  auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.readCIRAM(addr & 0x07ff);
-    }
-    if(chrram.size) return chrram.read(addr);
-    return chrrom.read(addr);
-  }
-
-  auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.writeCIRAM(addr & 0x07ff, data);
-    }
-    if(chrram.size) return chrram.write(addr, data);
-  }
-
-  auto serialize(serializer& s) -> void {
-    Board::serialize(s);
-  }
-
-  struct Settings {
-    bool mirror;  //0 = horizontal, 1 = vertical
-  } settings;
-};
diff --git a/higan/fc/cartridge/board/nes-qj.cpp b/higan/fc/cartridge/board/nes-qj.cpp
new file mode 100644
index 0000000..3f4901a
--- /dev/null
+++ b/higan/fc/cartridge/board/nes-qj.cpp
@@ -0,0 +1,55 @@
+struct NES_QJ : Board {
+  NES_QJ(Markup::Node& boardNode) : Board(boardNode), mmc3(*this, boardNode) {
+  }
+
+  auto main() -> void {
+    mmc3.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) {
+      addr = (mmc3.prgAddress(addr) & 0x1ffff) | (bank << 17);
+      return read(prgrom, addr);
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000 && mmc3.ramEnable && !mmc3.ramWriteProtect) {
+      bank = data & 0x01;
+    }
+    if(addr & 0x8000) return mmc3.regWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(mmc3.ciramAddress(addr));
+    return Board::readCHR((mmc3.chrAddress(addr) & 0x1ffff) | (bank << 17));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(mmc3.ciramAddress(addr), data);
+    return Board::writeCHR((mmc3.chrAddress(addr) & 0x1ffff) | (bank << 17), data);
+  }
+
+  auto ciramAddress(uint addr) -> uint {
+    return mmc3.ciramAddress(addr);
+  }
+
+  auto power() -> void {
+    mmc3.power();
+  }
+
+  auto reset() -> void {
+    mmc3.reset();
+    bank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    mmc3.serialize(s);
+    s.integer(bank);
+  }
+
+  MMC3 mmc3;
+  bool bank;
+};
diff --git a/higan/fc/cartridge/board/nes-sxrom.cpp b/higan/fc/cartridge/board/nes-sxrom.cpp
deleted file mode 100644
index 85ca378..0000000
--- a/higan/fc/cartridge/board/nes-sxrom.cpp
+++ /dev/null
@@ -1,99 +0,0 @@
-struct NES_SxROM : Board {
-  NES_SxROM(Markup::Node& document) : Board(document), mmc1(*this) {
-    revision = Revision::SXROM;
-  }
-
-  auto main() -> void {
-    return mmc1.main();
-  }
-
-  auto addrRAM(uint addr) -> uint {
-    uint bank = 0;
-    if(revision == Revision::SOROM) bank = (mmc1.chrBank[0] & 0x08) >> 3;
-    if(revision == Revision::SUROM) bank = (mmc1.chrBank[0] & 0x0c) >> 2;
-    if(revision == Revision::SXROM) bank = (mmc1.chrBank[0] & 0x0c) >> 2;
-    return (bank << 13) | (addr & 0x1fff);
-  }
-
-  auto readPRG(uint addr) -> uint8 {
-    if((addr & 0xe000) == 0x6000) {
-      if(revision == Revision::SNROM) {
-        if(mmc1.chrBank[0] & 0x10) return cpu.mdr();
-      }
-      if(mmc1.ramDisable) return 0x00;
-      return prgram.read(addrRAM(addr));
-    }
-
-    if(addr & 0x8000) {
-      addr = mmc1.addrPRG(addr);
-      if(revision == Revision::SXROM) {
-        addr |= ((mmc1.chrBank[0] & 0x10) >> 4) << 18;
-      }
-      return prgrom.read(addr);
-    }
-
-    return cpu.mdr();
-  }
-
-  auto writePRG(uint addr, uint8 data) -> void {
-    if((addr & 0xe000) == 0x6000) {
-      if(revision == Revision::SNROM) {
-        if(mmc1.chrBank[0] & 0x10) return;
-      }
-      if(mmc1.ramDisable) return;
-      return prgram.write(addrRAM(addr), data);
-    }
-
-    if(addr & 0x8000) return mmc1.writeIO(addr, data);
-  }
-
-  auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(mmc1.addrCIRAM(addr));
-    return Board::readCHR(mmc1.addrCHR(addr));
-  }
-
-  auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(mmc1.addrCIRAM(addr), data);
-    return Board::writeCHR(mmc1.addrCHR(addr), data);
-  }
-
-  auto power() -> void {
-    mmc1.power();
-  }
-
-  auto reset() -> void {
-    mmc1.reset();
-  }
-
-  auto serialize(serializer& s) -> void {
-    Board::serialize(s);
-    mmc1.serialize(s);
-  }
-
-  enum class Revision : uint {
-    SAROM,
-    SBROM,
-    SCROM,
-    SC1ROM,
-    SEROM,
-    SFROM,
-    SGROM,
-    SHROM,
-    SH1ROM,
-    SIROM,
-    SJROM,
-    SKROM,
-    SLROM,
-    SL1ROM,
-    SL2ROM,
-    SL3ROM,
-    SLRROM,
-    SMROM,
-    SNROM,
-    SOROM,
-    SUROM,
-    SXROM,
-  } revision;
-
-  MMC1 mmc1;
-};
diff --git a/higan/fc/cartridge/board/nes-txrom.cpp b/higan/fc/cartridge/board/nes-txrom.cpp
deleted file mode 100644
index c3d8125..0000000
--- a/higan/fc/cartridge/board/nes-txrom.cpp
+++ /dev/null
@@ -1,65 +0,0 @@
-struct NES_TxROM : Board {
-  NES_TxROM(Markup::Node& document) : Board(document), mmc3(*this) {
-    revision = Revision::TLROM;
-  }
-
-  auto main() -> void {
-    mmc3.main();
-  }
-
-  auto readPRG(uint addr) -> uint8 {
-    if((addr & 0xe000) == 0x6000) return mmc3.readRAM(addr);
-    if(addr & 0x8000) return prgrom.read(mmc3.addrPRG(addr));
-    return cpu.mdr();
-  }
-
-  auto writePRG(uint addr, uint8 data) -> void {
-    if((addr & 0xe000) == 0x6000) return mmc3.writeRAM(addr, data);
-    if(addr & 0x8000) return mmc3.writeIO(addr, data);
-  }
-
-  auto readCHR(uint addr) -> uint8 {
-    mmc3.irqTest(addr);
-    if(addr & 0x2000) return ppu.readCIRAM(mmc3.addrCIRAM(addr));
-    return Board::readCHR(mmc3.addrCHR(addr));
-  }
-
-  auto writeCHR(uint addr, uint8 data) -> void {
-    mmc3.irqTest(addr);
-    if(addr & 0x2000) return ppu.writeCIRAM(mmc3.addrCIRAM(addr), data);
-    return Board::writeCHR(mmc3.addrCHR(addr), data);
-  }
-
-  auto power() -> void {
-    mmc3.power();
-  }
-
-  auto reset() -> void {
-    mmc3.reset();
-  }
-
-  auto serialize(serializer& s) -> void {
-    Board::serialize(s);
-    mmc3.serialize(s);
-  }
-
-  enum class Revision : uint {
-    TBROM,
-    TEROM,
-    TFROM,
-    TGROM,
-    TKROM,
-    TKSROM,
-    TLROM,
-    TL1ROM,
-    TL2ROM,
-    TLSROM,
-    TNROM,
-    TQROM,
-    TR1ROM,
-    TSROM,
-    TVROM,
-  } revision;
-
-  MMC3 mmc3;
-};
diff --git a/higan/fc/cartridge/board/nes-uxrom.cpp b/higan/fc/cartridge/board/nes-uxrom.cpp
deleted file mode 100644
index ff4f542..0000000
--- a/higan/fc/cartridge/board/nes-uxrom.cpp
+++ /dev/null
@@ -1,53 +0,0 @@
-//NES-UNROM
-//NES-UOROM
-
-struct NES_UxROM : Board {
-  NES_UxROM(Markup::Node& document) : Board(document) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
-  }
-
-  auto readPRG(uint addr) -> uint8 {
-    if((addr & 0xc000) == 0x8000) return prgrom.read((prgBank << 14) | (addr & 0x3fff));
-    if((addr & 0xc000) == 0xc000) return prgrom.read((   0x0f << 14) | (addr & 0x3fff));
-    return cpu.mdr();
-  }
-
-  auto writePRG(uint addr, uint8 data) -> void {
-    if(addr & 0x8000) prgBank = data & 0x0f;
-  }
-
-  auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.readCIRAM(addr);
-    }
-    return Board::readCHR(addr);
-  }
-
-  auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.writeCIRAM(addr, data);
-    }
-    return Board::writeCHR(addr, data);
-  }
-
-  auto power() -> void {
-  }
-
-  auto reset() -> void {
-    prgBank = 0;
-  }
-
-  auto serialize(serializer& s) -> void {
-    Board::serialize(s);
-
-    s.integer(prgBank);
-  }
-
-  struct Settings {
-    bool mirror;  //0 = horizontal, 1 = vertical
-  } settings;
-
-  uint4 prgBank;
-};
diff --git a/higan/fc/cartridge/board/pal-zz.cpp b/higan/fc/cartridge/board/pal-zz.cpp
new file mode 100644
index 0000000..e3efb21
--- /dev/null
+++ b/higan/fc/cartridge/board/pal-zz.cpp
@@ -0,0 +1,67 @@
+struct PAL_ZZ : Board {
+  PAL_ZZ(Markup::Node& boardNode) : Board(boardNode), mmc3(*this, boardNode) {
+  }
+
+  auto main() -> void {
+    mmc3.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) {
+      addr = (mmc3.prgAddress(addr) & (0xffff | (bank << 16))) | (bank << 17);
+      addr |= (prgA16Force == 0x03) << 16;
+      return read(prgrom, addr);
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000 && mmc3.ramEnable && !mmc3.ramWriteProtect) {
+      prgA16Force = data & 0x03;
+      bank = data & 0x04;
+    }
+    if(addr & 0x8000) return mmc3.regWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(mmc3.ciramAddress(addr));
+    return Board::readCHR((mmc3.chrAddress(addr) & 0x1ffff) | (bank << 17));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(mmc3.ciramAddress(addr), data);
+    return Board::writeCHR((mmc3.chrAddress(addr) & 0x1ffff) | (bank << 17), data);
+  }
+
+  auto ciramAddress(uint addr) -> uint {
+    return mmc3.ciramAddress(addr);
+  }
+
+  auto power() -> void {
+    mmc3.power();
+  }
+
+  auto reset() -> void {
+    mmc3.reset();
+    cicReset();
+  }
+
+  auto cicReset() -> void {
+    // this register is cleared by the CIC reset line.
+    // On a Famicom or toploader, only a power cycle can clear it.
+    //TODO: Check if Europe got the toploader.
+    prgA16Force = 0;
+    bank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    mmc3.serialize(s);
+    s.integer(prgA16Force);
+    s.integer(bank);
+  }
+
+  MMC3 mmc3;
+  uint2 prgA16Force;
+  bool bank;
+};
diff --git a/higan/fc/cartridge/board/sunsoft-4.cpp b/higan/fc/cartridge/board/sunsoft-4.cpp
new file mode 100644
index 0000000..09dd593
--- /dev/null
+++ b/higan/fc/cartridge/board/sunsoft-4.cpp
@@ -0,0 +1,85 @@
+//SUNSOFT-4
+
+struct Sunsoft4 : Board {
+  Sunsoft4(Markup::Node& boardNode) : Board(boardNode) {
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0xc000) == 0x8000) return read(prgrom, (prgBank << 14) | (addr & 0x3fff));
+    if((addr & 0xc000) == 0xc000) return read(prgrom, (    0xff << 14) | (addr & 0x3fff));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    switch(addr & 0xf000) {
+    case 0x8000: chrBank[0] = data; break;
+    case 0x9000: chrBank[1] = data; break;
+    case 0xa000: chrBank[2] = data; break;
+    case 0xb000: chrBank[3] = data; break;
+    case 0xc000: ntromBank[0] = data | 0x80; break;
+    case 0xd000: ntromBank[1] = data | 0x80; break;
+    case 0xe000:
+      mirror = data & 0x03;
+      nametableMode = data & 0x10;
+      break;
+    case 0xf000: prgBank = data; break;
+    }
+  }
+
+  auto ciramAddress(uint addr) -> uint {
+    switch(mirror) {
+    case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
+    case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+    case 2: return 0x0000 | (addr & 0x03ff);
+    case 3: return 0x0400 | (addr & 0x03ff);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      addr = ciramAddress(addr);
+      if(nametableMode) return Board::readCHR(((ntromBank[(addr & 0x0400) >> 10] | 0x80) << 10) | (addr & 0x03FF));
+      else              return ppu.readCIRAM(addr);
+    }
+    addr = (chrBank[(addr & 0x1800) >> 11] << 11) | (addr & 0x07ff);
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(nametableMode == 0) return ppu.writeCIRAM(ciramAddress(addr), data);
+    } else {
+      return Board::writeCHR(addr, data);
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    ntromBank[0] = 0;
+    ntromBank[1] = 0;
+    mirror = 0;
+    nametableMode = 0;
+    prgBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.array(chrBank);
+    s.array(ntromBank);
+    s.integer(mirror);
+    s.integer(nametableMode);
+    s.integer(prgBank);
+  }
+
+  uint8 chrBank[4];
+  uint7 ntromBank[2];
+  uint2 mirror;
+  bool nametableMode;
+  uint8 prgBank;
+};
diff --git a/higan/fc/cartridge/board/sunsoft-5b.cpp b/higan/fc/cartridge/board/sunsoft-5b.cpp
index a300798..56e0971 100644
--- a/higan/fc/cartridge/board/sunsoft-5b.cpp
+++ b/higan/fc/cartridge/board/sunsoft-5b.cpp
@@ -1,10 +1,18 @@
 //SUNSOFT-5B
 
 struct Sunsoft5B : Board {
-  Sunsoft5B(Markup::Node& document) : Board(document) {
+  Sunsoft5B(Markup::Node& boardNode) : Board(boardNode) {
   }
 
   struct Pulse {
+    bool disable;
+    uint12 frequency;
+    uint4 volume;
+
+    uint16 counter;  //12-bit countdown + 4-bit phase
+    uint1 duty;
+    uint4 output;
+
     auto clock() -> void {
       if(--counter == 0) {
         counter = frequency << 4;
@@ -33,14 +41,6 @@ struct Sunsoft5B : Board {
       s.integer(duty);
       s.integer(output);
     }
-
-    bool disable;
-    uint12 frequency;
-    uint4 volume;
-
-    uint16 counter;  //12-bit countdown + 4-bit phase
-    uint1 duty;
-    uint4 output;
   } pulse[3];
 
   auto main() -> void {
@@ -73,17 +73,16 @@ struct Sunsoft5B : Board {
     bank &= 0x3f;
 
     if(ramSelect) {
-      if(!ramEnable) return cpu.mdr();
-      return prgram.data[addr & 0x1fff];
+      if(ramEnable == false) return cpu.mdr();
+      return read(prgram, addr & 0x1fff);
     }
 
-    addr = (bank << 13) | (addr & 0x1fff);
-    return prgrom.read(addr);
+    return read(prgrom, (bank << 13) | (addr & 0x1fff));
   }
 
   auto writePRG(uint addr, uint8 data) -> void {
     if((addr & 0xe000) == 0x6000) {
-      prgram.data[addr & 0x1fff] = data;
+      write(prgram, addr & 0x1fff, data);
     }
 
     if(addr == 0x8000) {
@@ -139,12 +138,12 @@ struct Sunsoft5B : Board {
     }
   }
 
-  auto addrCHR(uint addr) -> uint {
+  auto chrAddress(uint addr) -> uint {
     uint8 bank = (addr >> 10) & 7;
     return (chrBank[bank] << 10) | (addr & 0x03ff);
   }
 
-  auto addrCIRAM(uint addr) -> uint {
+  auto ciramAddress(uint addr) -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal
@@ -154,17 +153,17 @@ struct Sunsoft5B : Board {
   }
 
   auto readCHR(uint addr) -> uint8 {
-    if(addr & 0x2000) return ppu.readCIRAM(addrCIRAM(addr));
-    return Board::readCHR(addrCHR(addr));
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
+    return Board::readCHR(chrAddress(addr));
   }
 
   auto writeCHR(uint addr, uint8 data) -> void {
-    if(addr & 0x2000) return ppu.writeCIRAM(addrCIRAM(addr), data);
-    return Board::writeCHR(addrCHR(addr), data);
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
+    return Board::writeCHR(chrAddress(addr), data);
   }
 
   auto power() -> void {
-    for(signed n : range(16)) {
+    for(int n = 0; n < 16; n++) {
       double volume = 1.0 / pow(2, 1.0 / 2 * (15 - n));
       dac[n] = volume * 8192.0;
     }
diff --git a/higan/fc/cartridge/board/taito-tc.cpp b/higan/fc/cartridge/board/taito-tc.cpp
new file mode 100644
index 0000000..bad640c
--- /dev/null
+++ b/higan/fc/cartridge/board/taito-tc.cpp
@@ -0,0 +1,42 @@
+struct TaitoTC : Board {
+  TaitoTC(Markup::Node& boardNode) : Board(boardNode), tc(*this, boardNode) {
+  }
+
+  auto main() -> void {
+    tc.main();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, tc.prgAddress(addr));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) return tc.regWrite(addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(tc.ciramAddress(addr));
+    return Board::readCHR(tc.chrAddress(addr));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(tc.ciramAddress(addr), data);
+    return Board::writeCHR(tc.chrAddress(addr), data);
+  }
+
+  auto power() -> void {
+    tc.power();
+  }
+
+  auto reset() -> void {
+    tc.reset();
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    tc.serialize(s);
+  }
+
+  TC tc;
+};
diff --git a/higan/fc/cartridge/board/unlicensed/camerica.cpp b/higan/fc/cartridge/board/unlicensed/camerica.cpp
new file mode 100644
index 0000000..a6867a8
--- /dev/null
+++ b/higan/fc/cartridge/board/unlicensed/camerica.cpp
@@ -0,0 +1,103 @@
+struct Camerica : Board {
+  Camerica(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*ALGN*"  )) revision = Revision::ALGN;
+    if(type.match("*ALGQ*"  )) revision = Revision::ALGQ;
+    if(type.match("*BF9093*")) revision = Revision::BF9093;
+    if(type.match("*BF9096*")) revision = Revision::BF9096;
+    if(type.match("*BF9097*")) revision = Revision::BF9097;
+
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if((addr & 0x8000) == 0x0000) return cpu.mdr();
+    if((addr & 0xc000) == 0x8000) {
+      return read(prgrom, (prgBlock << 16) | (prgBank << 14) | (addr & 0x3fff));
+    } else {
+      if(revision != Revision::ALGQ && revision != Revision::BF9096)
+        return read(prgrom, (0x0f << 14) | (addr & 0x3fff));
+      else
+        return read(prgrom, (prgBlock << 16) | (0x03 << 14) | (addr & 0x3fff));
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    switch(revision) {
+    case Revision::ALGQ:
+    case Revision::BF9096:
+      if((addr & 0xc000) == 0x8000) {
+        prgBlock = (data & 0x18) >> 3;
+      }
+      break;
+    case Revision::BF9097:
+      if((addr & 0xe000) == 0x8000) {
+        nametable = data & 0x10;
+      }
+      break;
+    }
+    if((addr & 0xc000) == 0xc000) {
+      switch(revision) {
+      case Revision::ALGN:
+      case Revision::BF9093: prgBank = data & 0x0f; break;
+      case Revision::ALGQ:
+      case Revision::BF9096: prgBank = data & 0x03; break;
+      case Revision::BF9097: prgBank = data & 0x07; break;
+      }
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(ciramAddress(addr));
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(ciramAddress(addr), data);
+    return Board::writeCHR(addr, data);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    if(revision != Revision::BF9097) {
+      switch(settings.mirror) {
+      case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
+      case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      }
+    } else {
+      return (addr & 0x03ff) | (nametable << 10);
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    prgBlock = 0;
+    nametable = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+
+    s.integer(prgBank);
+    s.integer(prgBlock);
+    s.integer(nametable);
+  }
+
+  enum class Revision : uint {
+    ALGN, // Aladdin Game Enhancer
+    ALGQ, // Aladdin Game Enhancer (Quattro Multicarts)
+    BF9093,
+    BF9096,
+    BF9097,
+  } revision;
+
+  struct Settings {
+    bool mirror;    //0 = vertical, 1 = horizontal
+  } settings;
+
+  uint4 prgBank;
+  uint2 prgBlock; // for ALGQ and BF9096
+  bool nametable; // for BF9097
+};
diff --git a/higan/fc/cartridge/board/unlicensed/colordreams-74-377.cpp b/higan/fc/cartridge/board/unlicensed/colordreams-74-377.cpp
new file mode 100644
index 0000000..30d0d43
--- /dev/null
+++ b/higan/fc/cartridge/board/unlicensed/colordreams-74-377.cpp
@@ -0,0 +1,62 @@
+//COLORDREAMS-74*377
+
+struct ColorDreams74_377 : Board {
+  ColorDreams74_377(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      // Bus conflicts
+      data &= readPRG(addr);
+      // PRG and CHR bits are swapped relative to NES-GxROM.
+      // Additionally, up to 16 CHR banks are available instead of 4.
+      prgBank = (data & 0x03) >> 0;
+      chrBank = (data & 0xf0) >> 4;
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.integer(chrBank);
+  }
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+
+  uint2 prgBank;
+  uint4 chrBank;
+};
diff --git a/higan/fc/cartridge/board/unlicensed/mlt-action52.cpp b/higan/fc/cartridge/board/unlicensed/mlt-action52.cpp
new file mode 100644
index 0000000..0ba2d3b
--- /dev/null
+++ b/higan/fc/cartridge/board/unlicensed/mlt-action52.cpp
@@ -0,0 +1,80 @@
+//MLT-ACTION52
+
+struct MLT_Action52 : Board {
+  MLT_Action52(Markup::Node& boardNode) : Board(boardNode) {
+    settings.connectedChips = boardNode["connected-chips"].natural();
+    uint2 chipBlock = 0;
+    for(uint chipID = 0; chipID < 4; chipID++) {
+      if(settings.connectedChips & (0x1 << chipID)) settings.chipMap[chipID] = chipBlock++;
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000 && settings.connectedChips & (1 << prgChip)) {
+      uint targetBank = prgBank;
+      targetBank |= settings.chipMap[prgChip] << 5;
+      if(prgMode) return read(prgrom, (targetBank << 14) | (addr & 0x3fff));
+      else        return read(prgrom, (targetBank << 14) | (addr & 0x7fff));
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if(addr & 0x8000) {
+      mirror  = (addr & 0x2000) >> 13;
+      prgChip = (addr & 0x1800) >> 11;
+      prgBank = (addr & 0x07c0) >> 6;
+      prgMode = (addr & 0x0020) >> 5;
+      chrBank = ((addr & 0x000f) << 2) + (data & 0x03);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(mirror) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    return Board::readCHR(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(mirror) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    addr = (chrBank * 0x2000) + (addr & 0x1fff);
+    Board::writeCHR(addr, data);
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    mirror = 0;
+    prgChip = 0;
+    prgBank = 0;
+    prgMode = 0;
+    chrBank = 0;
+  }
+
+  auto serialize(serializer &s) -> void {
+    Board::serialize(s);
+    s.integer(mirror);
+    s.integer(prgChip);
+    s.integer(prgBank);
+    s.integer(prgMode);
+    s.integer(chrBank);
+  }
+
+  struct Settings {
+    uint4 connectedChips;
+    uint2 chipMap[4];
+  } settings;
+
+  bool mirror;
+  uint2 prgChip;
+  uint5 prgBank;
+  bool prgMode;
+  uint6 chrBank;
+};
diff --git a/higan/fc/cartridge/board/unlicensed/nina.cpp b/higan/fc/cartridge/board/unlicensed/nina.cpp
new file mode 100644
index 0000000..1e75777
--- /dev/null
+++ b/higan/fc/cartridge/board/unlicensed/nina.cpp
@@ -0,0 +1,91 @@
+//AVE-NINA-01
+//AVE-NINA-02
+//AVE-NINA-03
+//AVE-NINA-06
+
+struct Nina : Board {
+  Nina(Markup::Node& boardNode) : Board(boardNode) {
+    string type = boardNode["id"].text();
+    if(type.match("*NINA-01")) revision =  1;
+    if(type.match("*NINA-02")) revision =  2;
+    if(type.match("*NINA-03")) revision =  3;
+    if(type.match("*NINA-06")) revision =  6;
+
+    if(revision ==  1 || revision ==  2) {
+      settings.mirror = 1;
+    } else {
+      settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
+    }
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, (prgBank << 15) | (addr & 0x7fff));
+    if((addr & 0xe000) == 0x6000) {
+      if(prgram.size() > 0) return read(prgram, addr);
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    switch(revision) {
+    case  1:
+    case  2:
+      switch(addr) {
+      case 0x7ffd: prgBank    = data & 0x01; break;
+      case 0x7ffe: chrBank[0] = data & 0x0f; break;
+      case 0x7fff: chrBank[1] = data & 0x0f; break;
+      }
+      break;
+    case  3:
+    case  6:
+      if((addr & 0xe100) == 0x4100) {
+        prgBank    = (data & 0x08) >> 3;
+        chrBank[0] = ((data & 0x07) << 1) | 0;
+        chrBank[1] = ((data & 0x07) << 1) | 1;
+      }
+      break;
+    }
+    if((addr & 0xe000) == 0x6000 && prgram.size() > 0) write(prgram, addr, data);
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
+    }
+    return Board::readCHR((addr & 0x0fff) | (chrBank[(addr & 0x1000) >> 12] << 12));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
+    }
+    return Board::writeCHR((addr & 0x0fff) | (chrBank[(addr & 0x1000) >> 12] << 12), data);
+  }
+
+  auto power() -> void {
+    reset();
+  }
+
+  auto reset() -> void {
+    prgBank = 0;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(prgBank);
+    s.array(chrBank);
+  }
+
+  uint revision;
+
+  struct Settings {
+    bool mirror;  //0 = vertical, 1 = horizontal
+  } settings;
+
+  bool prgBank;
+  uint4 chrBank[2];
+};
diff --git a/higan/fc/cartridge/board/nes-cnrom.cpp b/higan/fc/cartridge/board/unlicensed/noconflicts-cnrom.cpp
similarity index 52%
rename from higan/fc/cartridge/board/nes-cnrom.cpp
rename to higan/fc/cartridge/board/unlicensed/noconflicts-cnrom.cpp
index 3316320..41b311f 100644
--- a/higan/fc/cartridge/board/nes-cnrom.cpp
+++ b/higan/fc/cartridge/board/unlicensed/noconflicts-cnrom.cpp
@@ -1,12 +1,14 @@
-//NES-CNROM
+// This board is intended for homebrew games that do not account for bus
+// conflicts. Many Sachen and Panesian games require this board, but they were
+// not the reason for its inclusion.
 
-struct NES_CNROM : Board {
-  NES_CNROM(Markup::Node& document) : Board(document) {
-    settings.mirror = document["board/mirror/mode"].text() == "vertical" ? 1 : 0;
+struct NoConflicts_CNROM : Board {
+  NoConflicts_CNROM(Markup::Node& boardNode) : Board(boardNode) {
+    settings.mirror = boardNode["mirror/mode"].text() == "horizontal";
   }
 
   auto readPRG(uint addr) -> uint8 {
-    if(addr & 0x8000) return prgrom.read(addr & 0x7fff);
+    if(addr & 0x8000) return read(prgrom, addr & 0x7fff);
     return cpu.mdr();
   }
 
@@ -16,8 +18,8 @@ struct NES_CNROM : Board {
 
   auto readCHR(uint addr) -> uint8 {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.readCIRAM(addr & 0x07ff);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.readCIRAM(addr);
     }
     addr = (chrBank * 0x2000) + (addr & 0x1fff);
     return Board::readCHR(addr);
@@ -25,8 +27,8 @@ struct NES_CNROM : Board {
 
   auto writeCHR(uint addr, uint8 data) -> void {
     if(addr & 0x2000) {
-      if(settings.mirror == 0) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
-      return ppu.writeCIRAM(addr & 0x07ff, data);
+      if(settings.mirror == 1) addr = ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+      return ppu.writeCIRAM(addr, data);
     }
     addr = (chrBank * 0x2000) + (addr & 0x1fff);
     Board::writeCHR(addr, data);
@@ -45,7 +47,7 @@ struct NES_CNROM : Board {
   }
 
   struct Settings {
-    bool mirror;  //0 = horizontal, 1 = vertical
+    bool mirror;  //0 = vertical, 1 = horizontal
   } settings;
 
   uint2 chrBank;
diff --git a/higan/fc/cartridge/board/unlicensed/single-chip.cpp b/higan/fc/cartridge/board/unlicensed/single-chip.cpp
new file mode 100644
index 0000000..8ca9a14
--- /dev/null
+++ b/higan/fc/cartridge/board/unlicensed/single-chip.cpp
@@ -0,0 +1,31 @@
+struct SingleChip : Board {
+  SingleChip(Markup::Node& boardNode) : Board(boardNode) {
+    settings.va10 = boardNode["va10"].natural();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    if(addr & 0x8000) return read(prgrom, addr);
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    addr = ((addr & (1 << settings.va10)) >> (settings.va10 - 10)) | (addr & 0x03ff);
+    return ppu.readCIRAM(addr);
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    addr = ((addr & (1 << settings.va10)) >> (settings.va10 - 10)) | (addr & 0x03ff);
+    return ppu.writeCIRAM(addr, data);
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+  }
+
+  struct Settings {
+    uint4 va10;  //10 = vertical, 11 = horizontal, 12 = BLK0, 13 = BLK1
+  } settings;
+};
diff --git a/higan/fc/cartridge/board/vs.cpp b/higan/fc/cartridge/board/vs.cpp
new file mode 100644
index 0000000..7305725
--- /dev/null
+++ b/higan/fc/cartridge/board/vs.cpp
@@ -0,0 +1,155 @@
+//VS
+
+struct VS : Board {
+  VS(Markup::Node& boardNode) : Board(boardNode),
+  mmc1(*this, boardNode),
+  n108(*this, boardNode) {
+    chipType = ChipType::None;
+    string type = boardNode["chip/type"].text();
+    if(type.match("74HC32")) chipType = ChipType::_74HC32;
+    if(type.match("MMC1*" )) chipType = ChipType::MMC1;
+    if(type.match("108"   )) chipType = ChipType::N108;
+    if(type.match("109"   )) chipType = ChipType::N108;
+    if(type.match("118"   )) chipType = ChipType::N108;
+    if(type.match("119"   )) chipType = ChipType::N108;
+  }
+
+  auto main() -> void {
+    if(chipType == ChipType::MMC1) return mmc1.main();
+    tick();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    switch(chipType) {
+    case ChipType::None: {
+      if(addr & 0x8000) {
+        if(addr < 0xe000 && prgrom.size() < 0x2000) return cpu.mdr();
+        if(addr < 0xc000 && prgrom.size() < 0x4000) return cpu.mdr();
+        if(addr < 0xa000 && prgrom.size() < 0x6000) return cpu.mdr();
+        addr &= 0x7fff;
+        if(prgrom.size() > 0x8000) { // Games with oversize 1D such as VS. Gumshoe
+          if(addr >= 0x2000 || bank == 1) addr += 0x2000;
+        }
+        return read(prgrom, addr);
+      }
+      break;
+    }
+
+    case ChipType::_74HC32: {
+      if(addr & 0x8000) {
+        if((addr & 0xc000) == 0x8000)
+          return read(prgrom, (bank << 14) | (addr & 0x3fff));
+        else
+          return read(prgrom, (0x0f << 14) | (addr & 0x3fff));
+      }
+      break;
+    }
+
+    case ChipType::MMC1: {
+      if(addr & 0x8000) return read(prgrom, mmc1.prgAddress(addr));
+      //if(revision == Revision::SUROM || revision == Revision::SXROM) {
+      //  addr |= ((mmc1.chrBank[lastCHRBank] & 0x10) >> 4) << 18;
+      //}
+      break;
+    }
+
+    case ChipType::N108: {
+      if(addr & 0x8000) return read(prgrom, n108.prgAddress(addr));
+      break;
+    }
+
+    }
+    if((addr & 0xe000) == 0x6000) {
+      if(prgram.size() == 0) return vssystem.read(cpu.side, addr, cpu.mdr());
+      else                   return read(prgram, addr);
+    }
+    return cpu.mdr();
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    switch(chipType) {
+    case ChipType::None:
+      if(addr == 0x4016) bank = (data & 0x04) >> 2;
+      break;
+    case ChipType::_74HC32:
+      //TODO: Check if VS. UNROM has bus conflicts
+      //data &= readPRG(addr);
+      if(addr & 0x8000) bank = data & 0x0f;
+      break;
+    case ChipType::MMC1:
+      if(addr & 0x8000) return mmc1.mmioWrite(addr, data);
+      break;
+    case ChipType::N108:
+      if(addr & 0x8000) return n108.regWrite(addr, data);
+      break;
+    }
+    if((addr & 0xe000) == 0x6000) {
+      if(prgram.size() == 0) vssystem.write(cpu.side, addr, data);
+      else                   write(prgram, addr, data);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) return ppu.readCIRAM(addr);
+    switch(chipType) {
+    case ChipType::None:
+      if(chrrom.size() < bank << 13) return ppu.io.mdr;
+      return read(chrrom, ((bank << 13) + (addr & 0x1fff)));
+    case ChipType::_74HC32:
+      return Board::readCHR(addr);
+    case ChipType::MMC1:
+      return Board::readCHR(mmc1.chrAddress(addr));
+    case ChipType::N108:
+      return Board::readCHR(n108.chrAddress(addr));
+    }
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) return ppu.writeCIRAM(addr, data);
+    switch(chipType) {
+    case ChipType::None:
+      break;
+    case ChipType::_74HC32:
+      return Board::writeCHR(addr, data);
+    case ChipType::MMC1:
+      return Board::writeCHR(mmc1.chrAddress(addr), data);
+    case ChipType::N108:
+      return Board::writeCHR(n108.chrAddress(addr), data);
+    }
+  }
+
+  auto power() -> void {
+    switch(chipType) {
+    case ChipType::MMC1: mmc1.power(); break;
+    case ChipType::N108: n108.power(); break;
+    }
+  }
+
+  auto reset() -> void {
+    bank = 0;
+    switch(chipType) {
+    case ChipType::MMC1: mmc1.reset(); break;
+    case ChipType::N108: n108.reset(); break;
+    }
+  }
+
+  auto serialize(serializer& s) -> void {
+    Board::serialize(s);
+    s.integer(bank);
+    switch(chipType) {
+    case ChipType::MMC1: mmc1.serialize(s); break;
+    case ChipType::N108: n108.serialize(s); break;
+    }
+  }
+
+  enum class ChipType : uint {
+    None,
+    _74HC32,
+    MMC1,
+    N108,
+  } chipType;
+
+  uint4 bank;
+  MMC1 mmc1;
+  N108 n108;
+};
diff --git a/higan/fc/cartridge/cartridge.cpp b/higan/fc/cartridge/cartridge.cpp
index 6c40e57..fe8ad0f 100644
--- a/higan/fc/cartridge/cartridge.cpp
+++ b/higan/fc/cartridge/cartridge.cpp
@@ -2,10 +2,25 @@
 
 namespace Famicom {
 
+#include "load.cpp"
+#include "save.cpp"
 #include "chip/chip.cpp"
 #include "board/board.cpp"
+#include "serialization.cpp"
 Cartridge cartridge;
 
+auto Cartridge::manifest() const -> string {
+  string manifest = information.manifest.cartridge;
+  if(information.manifest.famicomDiskSystem) manifest.append("\n[[Famicom Disk System]]\n\n", information.manifest.famicomDiskSystem);
+  return manifest;
+}
+
+auto Cartridge::title() const -> string {
+  string title = information.title.cartridge;
+  if(information.title.famicomDiskSystem) title.append(" + ", information.title.famicomDiskSystem);
+  return title;
+}
+
 auto Cartridge::Enter() -> void {
   while(true) scheduler.synchronize(), cartridge.main();
 }
@@ -15,33 +30,74 @@ auto Cartridge::main() -> void {
 }
 
 auto Cartridge::load() -> bool {
-  if(auto pathID = interface->load(ID::Famicom, "Famicom", "fc")) {
-    information.pathID = pathID();
-  } else return false;
+  information = Information();
+
+  switch(system.model()) {
+  case Model::Famicom:
+    if(auto pathID = interface->load(ID::Famicom, "Famicom", "fc")) {
+      information.pathID = pathID();
+    } else return false;
+    break;
+  case Model::VSSystem:
+    if(auto pathID = interface->load(ID::VSSystem, "VS. System", "vs")) {
+      information.pathID = pathID();
+    } else return false;
+    break;
+  case Model::PlayChoice10:
+    if(auto pathID = interface->load(ID::PlayChoice10, "PlayChoice-10", "pc10")) {
+      information.pathID = pathID();
+    } else return false;
+    break;
+  //case Model::FamicomBox:
+  //  if(auto pathID = interface->load(ID::FamicomBox, "FamicomBox", "fcb")) {
+  //    information.pathID = pathID();
+  //  } else return false;
+  //  break;
+  }
 
   if(auto fp = interface->open(pathID(), "manifest.bml", File::Read, File::Required)) {
-    information.manifest = fp->reads();
-  } else {
-    return false;
+    information.manifest.cartridge = fp->reads();
+  } else return false;
+  auto document = BML::unserialize(information.manifest.cartridge);
+  loadCartridge(document);
+  if(!board) return false;
+
+  //Famicom Disk System
+  if(false) {
+
   }
 
-  Board::load(information.manifest);  //this call will set Cartridge::board if successful
-  if(!board) return false;
+  //Famicom
+  else {
+    Hash::SHA256 sha;
+    //hash each ROM image that exists; any with size() == 0 is ignored by sha256_chunk()
+    sha.input(board->prgrom.data(), board->prgrom.size());
+    sha.input(board->chrrom.data(), board->chrrom.size());
+    sha.input(board->instrom.data(), board->instrom.size());
+    sha.input(board->keyrom.data(), board->keyrom.size());
+    //finalize hash
+    information.sha256 = sha.digest();
+  }
 
-  Hash::SHA256 sha;
-  sha.input(board->prgrom.data, board->prgrom.size);
-  sha.input(board->chrrom.data, board->chrrom.size);
-  information.sha256 = sha.digest();
+  board->prgrom.writeProtect(true);
+  board->prgram.writeProtect(false);
+  board->chrrom.writeProtect(true);
+  board->chrram.writeProtect(false);
+  if(board->chip) board->chip->ram.writeProtect(false);
+  board->instrom.writeProtect(true);
+  board->keyrom.writeProtect(true);
   return true;
 }
 
 auto Cartridge::save() -> void {
-  board->save();
+  saveCartridge(BML::unserialize(information.manifest.cartridge));
 }
 
 auto Cartridge::unload() -> void {
-  delete board;
-  board = nullptr;
+  board->prgrom.reset();
+  board->chrrom.reset();
+  board->instrom.reset();
+  board->keyrom.reset();
 }
 
 auto Cartridge::power() -> void {
@@ -73,9 +129,4 @@ auto Cartridge::scanline(uint y) -> void {
   return board->scanline(y);
 }
 
-auto Cartridge::serialize(serializer& s) -> void {
-  Thread::serialize(s);
-  return board->serialize(s);
-}
-
 }
diff --git a/higan/fc/cartridge/cartridge.hpp b/higan/fc/cartridge/cartridge.hpp
index a3676cc..f6ee7de 100644
--- a/higan/fc/cartridge/cartridge.hpp
+++ b/higan/fc/cartridge/cartridge.hpp
@@ -2,13 +2,16 @@
 #include "board/board.hpp"
 
 struct Cartridge : Thread {
-  static auto Enter() -> void;
-  auto main() -> void;
+  enum class Region : uint { NTSC, PAL, Dendy };
+
+  static void Enter();
+  void main();
 
   auto pathID() const -> uint { return information.pathID; }
   auto sha256() const -> string { return information.sha256; }
-  auto manifest() const -> string { return information.manifest; }
-  auto title() const -> string { return information.title; }
+  auto region() const -> Region { return information.region; }
+  auto manifest() const -> string;
+  auto title() const -> string;
 
   auto load() -> bool;
   auto save() -> void;
@@ -22,12 +25,21 @@ struct Cartridge : Thread {
   struct Information {
     uint pathID = 0;
     string sha256;
-    string manifest;
-    string title;
+    Region region = Region::NTSC;
+
+    struct Manifest {
+      string cartridge;
+      string famicomDiskSystem;
+    } manifest;
+
+    struct Title {
+      string cartridge;
+      string famicomDiskSystem;
+    } title;
   } information;
 
 //privileged:
-  Board* board = nullptr;
+  Board* board;
 
   auto readPRG(uint addr) -> uint8;
   auto writePRG(uint addr, uint8 data) -> void;
@@ -38,6 +50,20 @@ struct Cartridge : Thread {
   //scanline() is for debugging purposes only:
   //boards must detect scanline edges on their own
   auto scanline(uint y) -> void;
+
+private:
+  //load.cpp
+  auto loadCartridge(Markup::Node) -> void;
+  auto setupVS(Markup::Node&, Markup::Node&) -> void;
+
+  auto loadMemory(MappedRAM&, Markup::Node, bool required, maybe<uint> id = nothing) -> void;
+
+  //save.cpp
+  auto saveCartridge(Markup::Node) -> void;
+
+  auto saveMemory(MappedRAM&, Markup::Node, maybe<uint> = nothing) -> void;
+
+  friend class Interface;
 };
 
 extern Cartridge cartridge;
diff --git a/higan/fc/cartridge/chip/chip.cpp b/higan/fc/cartridge/chip/chip.cpp
index 7bb7afc..11d6f9e 100644
--- a/higan/fc/cartridge/chip/chip.cpp
+++ b/higan/fc/cartridge/chip/chip.cpp
@@ -1,7 +1,14 @@
+#include "fcg.cpp"
+#include "g101.cpp"
+#include "ifh3001.cpp"
 #include "mmc1.cpp"
 #include "mmc3.cpp"
 #include "mmc5.cpp"
 #include "mmc6.cpp"
+#include "n108.cpp"
+#include "n163.cpp"
+#include "ss88006.cpp"
+#include "tc.cpp"
 #include "vrc1.cpp"
 #include "vrc2.cpp"
 #include "vrc3.cpp"
diff --git a/higan/fc/cartridge/chip/chip.hpp b/higan/fc/cartridge/chip/chip.hpp
index 028acb2..88078d0 100644
--- a/higan/fc/cartridge/chip/chip.hpp
+++ b/higan/fc/cartridge/chip/chip.hpp
@@ -5,4 +5,5 @@ struct Chip {
   auto tick() -> void;
 
   Board& board;
+  MappedRAM ram;
 };
diff --git a/higan/fc/cartridge/chip/fcg.cpp b/higan/fc/cartridge/chip/fcg.cpp
new file mode 100644
index 0000000..72ec4f4
--- /dev/null
+++ b/higan/fc/cartridge/chip/fcg.cpp
@@ -0,0 +1,128 @@
+struct FCG : Chip {
+  FCG(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip[0]/type"].text();
+    if(type == "FCG-1"  ) revision = Revision::FCG1;
+    if(type == "FCG-2"  ) revision = Revision::FCG2;
+    if(type == "LZ93D50") revision = Revision::LZ93D50;
+
+    eeprom = EEPROM::None;
+    type = boardNode["chip[1]/type"].text();
+    if(type == "24C01") eeprom = EEPROM::_24C01;
+    if(type == "24C02") eeprom = EEPROM::_24C02;
+  }
+
+  auto main() -> void {
+    if(irqCounterEnable) {
+      if(--irqCounter == 0xffff) {
+        cpu.irqLine(1);
+        irqCounterEnable = false;
+      }
+    }
+
+    tick();
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    bool region = addr & 0x4000;
+    return ((region == 0 ? prgBank : (uint8)0x0f) << 14) | (addr & 0x3fff);
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    return (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    switch(mirror) {
+    case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
+    case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+    case 2: return 0x0000 | (addr & 0x03ff);
+    case 3: return 0x0400 | (addr & 0x03ff);
+    }
+  }
+
+  auto ramRead(uint addr) -> uint8 {
+    return board.read(board.prgram, addr & 0x1fff);
+  }
+
+  auto ramWrite(uint addr, uint8 data) -> void {
+    board.write(board.prgram, addr & 0x1fff, data);
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0x0f) {
+    case 0x00: case 0x01: case 0x02: case 0x03:
+    case 0x04: case 0x05: case 0x06: case 0x07:
+      chrBank[addr & 7] = data;
+      break;
+    case 0x08:
+      prgBank = data & 0x0f;
+      break;
+    case 0x09:
+      mirror = data & 0x03;
+      break;
+    case 0x0a:
+      cpu.irqLine(0);
+      irqCounterEnable = data & 0x01;
+      irqCounter = irqLatch;
+      break;
+    case 0x0b:
+      irqLatch = (irqLatch & 0xff00) | (data << 0);
+      break;
+    case 0x0c:
+      irqLatch = (irqLatch & 0x00ff) | (data << 8);
+      break;
+    case 0x0d:
+      //TODO: serial EEPROM support
+      eepromI2C_SCL = data & 0x20;
+      eepromEnableRead = data & 0x80;
+      break;
+    }
+  }
+
+  auto power() -> void {
+    reset();
+  }
+
+  auto reset() -> void {
+    for(auto &n : chrBank) n = 0;
+    prgBank = 0;
+    mirror = 0;
+    irqCounterEnable = 0;
+    irqCounter = 0;
+    irqLatch = 0;
+    eepromI2C_SCL = 0;
+    eepromEnableRead = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.array(chrBank);
+    s.integer(prgBank);
+    s.integer(mirror);
+    s.integer(irqCounterEnable);
+    s.integer(irqCounter);
+    s.integer(irqLatch);
+    s.integer(eepromI2C_SCL);
+    s.integer(eepromEnableRead);
+  }
+
+  enum class Revision : uint {
+    FCG1,
+    FCG2,
+    LZ93D50,
+  } revision;
+
+  enum class EEPROM : uint {
+    None,
+    _24C01,
+    _24C02
+  } eeprom;
+
+  uint8 chrBank[8];
+  uint8 prgBank;
+  uint2 mirror;
+  bool irqCounterEnable;
+  uint16 irqCounter;
+  uint16 irqLatch;
+  bool eepromI2C_SCL; // When using SRAM, enables RAM chip
+  bool eepromEnableRead;
+};
diff --git a/higan/fc/cartridge/chip/g101.cpp b/higan/fc/cartridge/chip/g101.cpp
new file mode 100644
index 0000000..1245e38
--- /dev/null
+++ b/higan/fc/cartridge/chip/g101.cpp
@@ -0,0 +1,78 @@
+struct G101 : Chip {
+  G101(Board& board, Markup::Node& boardNode) : Chip(board) {
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    switch(addr & 0xe000) {
+    case 0x8000:
+      if(prgMode == 1) return (0x1e << 13) | (addr & 0x1fff);
+      return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 0xa000:
+      return (prgBank[1] << 13) | (addr & 0x1fff);
+    case 0xc000:
+      if(prgMode == 0) return (0x1e << 13) | (addr & 0x1fff);
+      return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 0xe000:
+      return (0x1f << 13) | (addr & 0x1fff);
+    }
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    return (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    switch(mirror) {
+    case 0: return (addr & 0x03ff) | ((addr & 0x0400) >> 0);
+    case 1: return (addr & 0x03ff) | ((addr & 0x0800) >> 1);
+    }
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0xf000) {
+    case 0x8000:
+      prgBank[0] = data & 0x1f;
+      break;
+    case 0x9000:
+      mirror = data & 0x01;
+      prgMode = data & 0x02;
+      break;
+    case 0xa000:
+      prgBank[1] = data & 0x1f;
+      break;
+    case 0xb000:
+      chrBank[addr & 0x0007] = data;
+      break;
+    }
+  }
+
+  auto power() -> void {
+    prgMode = 0;
+    prgBank[0] = 0x00;
+    prgBank[1] = 0x1e;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+    chrBank[6] = 0;
+    chrBank[7] = 0;
+    mirror = 0;
+  }
+
+  auto reset() -> void {
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.integer(prgMode);
+    s.array(prgBank);
+    s.array(chrBank);
+    s.integer(mirror);
+  }
+
+  bool prgMode;
+  uint5 prgBank[2];
+  uint8 chrBank[8];
+  bool mirror;
+};
diff --git a/higan/fc/cartridge/chip/ifh3001.cpp b/higan/fc/cartridge/chip/ifh3001.cpp
new file mode 100644
index 0000000..08890d5
--- /dev/null
+++ b/higan/fc/cartridge/chip/ifh3001.cpp
@@ -0,0 +1,117 @@
+struct IFH3001 : Chip {
+  IFH3001(Board& board, Markup::Node& boardNode) : Chip(board) {
+  }
+
+  auto main() -> void {
+    if(irqEnable && irqCounter) {
+      if(--irqCounter == 0) cpu.irqLine(1);
+    }
+    tick();
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    switch(addr & 0xe000) {
+    case 0x8000: return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 0xa000: return (prgBank[1] << 13) | (addr & 0x1fff);
+    case 0xc000: return (prgBank[2] << 13) | (addr & 0x1fff);
+    case 0xe000: return (0xff << 13) | (addr & 0x1fff);
+    }
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    return (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    switch(mirror) {
+    case 0: return (addr & 0x03ff) | ((addr & 0x0400) >> 0);
+    case 1: return (addr & 0x03ff) | ((addr & 0x0800) >> 1);
+    }
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0xf007) {
+    case 0x8000:
+    case 0x8001:
+    case 0x8002:
+    case 0x8003:
+    case 0x8004:
+    case 0x8005:
+    case 0x8006:
+    case 0x8007: prgBank[0] = data; break;
+    case 0x9001: mirror = data & 0x80; break;
+    case 0x9003:
+      irqEnable = data & 0x80;
+      cpu.irqLine(0);
+      break;
+    case 0x9004:
+      irqCounter = irqLatch;
+      cpu.irqLine(0);
+      break;
+    case 0x9005: irqLatch = (irqLatch & 0x00ff) | (data << 8); break;
+    case 0x9006: irqLatch = (irqLatch & 0xff00) | (data << 0); break;
+    case 0xa000:
+    case 0xa001:
+    case 0xa002:
+    case 0xa003:
+    case 0xa004:
+    case 0xa005:
+    case 0xa006:
+    case 0xa007: prgBank[1] = data; break;
+    case 0xb000: chrBank[0] = data; break;
+    case 0xb001: chrBank[1] = data; break;
+    case 0xb002: chrBank[2] = data; break;
+    case 0xb003: chrBank[3] = data; break;
+    case 0xb004: chrBank[4] = data; break;
+    case 0xb005: chrBank[5] = data; break;
+    case 0xb006: chrBank[6] = data; break;
+    case 0xb007: chrBank[7] = data; break;
+    case 0xc000:
+    case 0xc001:
+    case 0xc002:
+    case 0xc003:
+    case 0xc004:
+    case 0xc005:
+    case 0xc006:
+    case 0xc007: prgBank[2] = data; break;
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank[0] = 0x00;
+    prgBank[1] = 0x01;
+    prgBank[2] = 0xfe;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+    chrBank[6] = 0;
+    chrBank[7] = 0;
+    mirror = 0;
+    irqCounter = 0;
+    irqLatch = 0;
+    irqEnable = false;
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.array(prgBank);
+    s.array(chrBank);
+    s.integer(mirror);
+    s.integer(irqCounter);
+    s.integer(irqLatch);
+    s.integer(irqEnable);
+  }
+
+  bool prgMode;
+  uint8 prgBank[3];
+  uint8 chrBank[8];
+  bool mirror;
+  uint16 irqCounter;
+  uint16 irqLatch;
+  bool irqEnable;
+};
diff --git a/higan/fc/cartridge/chip/mmc1.cpp b/higan/fc/cartridge/chip/mmc1.cpp
index 92846b9..ff5be44 100644
--- a/higan/fc/cartridge/chip/mmc1.cpp
+++ b/higan/fc/cartridge/chip/mmc1.cpp
@@ -1,6 +1,14 @@
 struct MMC1 : Chip {
-  MMC1(Board& board) : Chip(board) {
-    revision = Revision::MMC1B2;
+  MMC1(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip/type"].text();
+
+    if(type == "MMC1"    ) revision = Revision::MMC1;
+    if(type == "MMC1A"   ) revision = Revision::MMC1A;
+    if(type == "MMC1B1"  ) revision = Revision::MMC1B1;
+    if(type == "MMC1B1-H") revision = Revision::MMC1B1;
+    if(type == "MMC1B2"  ) revision = Revision::MMC1B2;
+    if(type == "MMC1B3"  ) revision = Revision::MMC1B3;
+    if(type == "MMC1C"   ) revision = Revision::MMC1C;
   }
 
   auto main() -> void {
@@ -8,7 +16,7 @@ struct MMC1 : Chip {
     tick();
   }
 
-  auto addrPRG(uint addr) -> uint {
+  auto prgAddress(uint addr) -> uint {
     bool region = addr & 0x4000;
     uint bank = (prgBank & ~1) + region;
 
@@ -20,14 +28,14 @@ struct MMC1 : Chip {
     return (bank << 14) | (addr & 0x3fff);
   }
 
-  auto addrCHR(uint addr) -> uint {
+  auto chrAddress(uint addr) -> uint {
     bool region = addr & 0x1000;
     uint bank = chrBank[region];
     if(chrMode == 0) bank = (chrBank[0] & ~1) | region;
     return (bank << 12) | (addr & 0x0fff);
   }
 
-  auto addrCIRAM(uint addr) -> uint {
+  auto ciramAddress(uint addr) -> uint {
     switch(mirror) {
     case 0: return 0x0000 | (addr & 0x03ff);
     case 1: return 0x0400 | (addr & 0x03ff);
@@ -36,7 +44,7 @@ struct MMC1 : Chip {
     }
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto mmioWrite(uint addr, uint8 data) -> void {
     if(writedelay) return;
     writedelay = 2;
 
@@ -65,7 +73,7 @@ struct MMC1 : Chip {
           break;
 
         case 3:
-          ramDisable = (shiftdata & 0x10);
+          ramDisable = ((shiftdata & 0x10) && revision != Revision::MMC1 && revision != Revision::MMC1A);
           prgBank = (shiftdata & 0x0f);
           break;
         }
@@ -87,7 +95,7 @@ struct MMC1 : Chip {
     mirror = 0;
     chrBank[0] = 0;
     chrBank[1] = 1;
-    ramDisable = 0;
+    ramDisable = revision == Revision::MMC1C;
     prgBank = 0;
   }
 
diff --git a/higan/fc/cartridge/chip/mmc3.cpp b/higan/fc/cartridge/chip/mmc3.cpp
index e23b605..1aad131 100644
--- a/higan/fc/cartridge/chip/mmc3.cpp
+++ b/higan/fc/cartridge/chip/mmc3.cpp
@@ -1,15 +1,27 @@
 struct MMC3 : Chip {
-  MMC3(Board& board) : Chip(board) {
+  MMC3(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip/type"].text();
+    if(type == "MMC3"  ) revision = Revision::MMC3;
+    if(type == "MMC3A" ) revision = Revision::MMC3A;
+    if(type == "MMC3B" ) revision = Revision::MMC3B;
+    if(type == "MMC3C" ) revision = Revision::MMC3C;
+    if(type == "MC-ACC") revision = Revision::MC_ACC;
   }
 
   auto main() -> void {
     if(irqDelay) irqDelay--;
+    irqTest(ppu.io.chrAddressBus);
     cpu.irqLine(irqLine);
     tick();
   }
 
   auto irqTest(uint addr) -> void {
-    if(!(chrAbus & 0x1000) && (addr & 0x1000)) {
+    bool edge;
+    if(revision != Revision::MC_ACC)
+      edge = !(chrAddressBus & 0x1000) && (addr & 0x1000);
+    else
+      edge = (chrAddressBus & 0x1000) && !(addr & 0x1000);
+    if(edge) {
       if(irqDelay == 0) {
         if(irqCounter == 0) {
           irqCounter = irqLatch;
@@ -19,10 +31,10 @@ struct MMC3 : Chip {
       }
       irqDelay = 6;
     }
-    chrAbus = addr;
+    chrAddressBus = addr;
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     switch((addr >> 13) & 3) {
     case 0:
       if(prgMode == 1) return (0x3e << 13) | (addr & 0x1fff);
@@ -37,7 +49,7 @@ struct MMC3 : Chip {
     }
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     if(chrMode == 0) {
       if(addr <= 0x07ff) return (chrBank[0] << 10) | (addr & 0x07ff);
       if(addr <= 0x0fff) return (chrBank[1] << 10) | (addr & 0x07ff);
@@ -55,21 +67,21 @@ struct MMC3 : Chip {
     }
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     if(mirror == 0) return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
     if(mirror == 1) return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
   }
 
-  auto readRAM(uint addr) -> uint8 {
-    if(ramEnable) return board.prgram.data[addr & 0x1fff];
+  auto ramRead(uint addr) -> uint8 {
+    if(ramEnable) return board.read(board.prgram, addr & 0x1fff);
     return 0x00;
   }
 
-  auto writeRAM(uint addr, uint8 data) -> void {
-    if(ramEnable && !ramWriteProtect) board.prgram.data[addr & 0x1fff] = data;
+  auto ramWrite(uint addr, uint8 data) -> void {
+    if(ramEnable && !ramWriteProtect) board.write(board.prgram, addr & 0x1fff, data);
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr & 0xe001) {
     case 0x8000:
       chrMode = data & 0x80;
@@ -142,7 +154,7 @@ struct MMC3 : Chip {
     irqDelay = 0;
     irqLine = 0;
 
-    chrAbus = 0;
+    chrAddressBus = 0;
   }
 
   auto serialize(serializer& s) -> void {
@@ -160,9 +172,17 @@ struct MMC3 : Chip {
     s.integer(irqDelay);
     s.integer(irqLine);
 
-    s.integer(chrAbus);
+    s.integer(chrAddressBus);
   }
 
+  enum class Revision : uint {
+    MMC3,
+    MMC3A,
+    MMC3B,
+    MMC3C,
+    MC_ACC,
+  } revision;
+
   bool chrMode;
   bool prgMode;
   uint3 bankSelect;
@@ -177,5 +197,5 @@ struct MMC3 : Chip {
   uint irqDelay;
   bool irqLine;
 
-  uint16 chrAbus;
+  uint16 chrAddressBus;
 };
diff --git a/higan/fc/cartridge/chip/mmc5.cpp b/higan/fc/cartridge/chip/mmc5.cpp
index 1bddfa6..1c70016 100644
--- a/higan/fc/cartridge/chip/mmc5.cpp
+++ b/higan/fc/cartridge/chip/mmc5.cpp
@@ -1,6 +1,9 @@
 struct MMC5 : Chip {
-  MMC5(Board& board) : Chip(board) {
-    revision = Revision::MMC5;
+  MMC5(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip/type"].text();
+
+    if(type == "MMC5" ) revision = Revision::MMC5;
+    if(type == "MMC5B") revision = Revision::MMC5B;
   }
 
   auto main() -> void {
@@ -16,7 +19,7 @@ struct MMC5 : Chip {
   //if(y != vcounter && y <= 240) print(y, " vs ", vcounter, "\n");
   }
 
-  auto accessPRG(bool write, uint addr, uint8 data = 0x00) -> uint8 {
+  auto prgAccess(bool write, uint addr, uint8 data = 0x00) -> uint8 {
     uint bank;
 
     if((addr & 0xe000) == 0x6000) {
@@ -48,16 +51,16 @@ struct MMC5 : Chip {
 
     if(write == false) {
       if(rom) {
-        return board.prgrom.read((bank << 13) | addr);
+        return board.read(board.prgrom, (bank << 13) | addr);
       } else {
-        return board.prgram.read((bank << 13) | addr);
+        return board.read(board.prgram, (bank << 13) | addr);
       }
     } else {
       if(rom) {
-        board.prgrom.write((bank << 13) | addr, data);
+        board.write(board.prgrom, (bank << 13) | addr, data);
       } else {
         if(prgramWriteProtect[0] == 2 && prgramWriteProtect[1] == 1) {
-          board.prgram.write((bank << 13) | addr, data);
+          board.write(board.prgram, (bank << 13) | addr, data);
         }
       }
       return 0x00;
@@ -66,12 +69,12 @@ struct MMC5 : Chip {
 
   auto readPRG(uint addr) -> uint8 {
     if((addr & 0xfc00) == 0x5c00) {
-      if(exramMode >= 2) return exram[addr & 0x03ff];
+      if(exramMode >= 2) return ram.read(addr & 0x03ff);
       return cpu.mdr();
     }
 
     if(addr >= 0x6000) {
-      return accessPRG(0, addr);
+      return prgAccess(0, addr);
     }
 
     switch(addr) {
@@ -88,25 +91,27 @@ struct MMC5 : Chip {
   auto writePRG(uint addr, uint8 data) -> void {
     if((addr & 0xfc00) == 0x5c00) {
       //writes 0x00 *during* Vblank (not during screen rendering ...)
-      if(exramMode == 0 || exramMode == 1) exram[addr & 0x03ff] = inFrame ? data : (uint8)0x00;
-      if(exramMode == 2) exram[addr & 0x03ff] = data;
+      if(exramMode == 0 || exramMode == 1) ram.write(addr & 0x03ff, inFrame ? data : (uint8)0x00);
+      if(exramMode == 2) ram.write(addr & 0x03ff, data);
       return;
     }
 
     if(addr >= 0x6000) {
-      accessPRG(1, addr, data);
+      prgAccess(1, addr, data);
       return;
     }
 
     switch(addr) {
-    case 0x2000:
-      sprite8x16 = data & 0x20;
+    case 0x2000: {
+      sprite_8x16 = data & 0x20;
       break;
+    }
 
-    case 0x2001:
+    case 0x2001: {
       //if BG+sprites are disabled; enter video blanking period
       if((data & 0x18) == 0) blank();
       break;
+    }
 
     case 0x5100: prgMode = data & 3; break;
     case 0x5101: chrMode = data & 3; break;
@@ -114,31 +119,36 @@ struct MMC5 : Chip {
     case 0x5102: prgramWriteProtect[0] = data & 3; break;
     case 0x5103: prgramWriteProtect[1] = data & 3; break;
 
-    case 0x5104:
+    case 0x5104: {
       exramMode = data & 3;
       break;
+    }
 
-    case 0x5105:
+    case 0x5105: {
       nametableMode[0] = (data & 0x03) >> 0;
       nametableMode[1] = (data & 0x0c) >> 2;
       nametableMode[2] = (data & 0x30) >> 4;
       nametableMode[3] = (data & 0xc0) >> 6;
       break;
+    }
 
-    case 0x5106:
+    case 0x5106: {
       fillmodeTile = data;
       break;
+    }
 
-    case 0x5107:
+    case 0x5107: {
       fillmodeColor = data & 3;
       fillmodeColor |= fillmodeColor << 2;
       fillmodeColor |= fillmodeColor << 4;
       break;
+    }
 
-    case 0x5113:
+    case 0x5113: {
       ramSelect = data & 0x04;
       ramBank = data & 0x03;
       break;
+    }
 
     case 0x5114: prgBank[0] = data; break;
     case 0x5115: prgBank[1] = data; break;
@@ -159,43 +169,52 @@ struct MMC5 : Chip {
     case 0x512a: chrBGBank[2] = (chrBankHi << 8) | data; chrActive = 1; break;
     case 0x512b: chrBGBank[3] = (chrBankHi << 8) | data; chrActive = 1; break;
 
-    case 0x5130:
+    case 0x5130: {
       chrBankHi = data & 3;
       break;
+    }
 
-    case 0x5200:
+    case 0x5200: {
       vsEnable = data & 0x80;
       vsSide = data & 0x40;
       vsTile = data & 0x1f;
       break;
+    }
 
-    case 0x5201:
+    case 0x5201: {
       vsScroll = data;
       break;
+    }
 
-    case 0x5202:
+    case 0x5202: {
       vsBank = data;
       break;
+    }
 
-    case 0x5203:
+    case 0x5203: {
       irqLine = data;
       break;
+    }
 
-    case 0x5204:
+    case 0x5204: {
       irqEnable = data & 0x80;
       break;
+    }
 
-    case 0x5205:
+    case 0x5205: {
       multiplicand = data;
       break;
+    }
 
-    case 0x5206:
+    case 0x5206: {
       multiplier = data;
       break;
     }
+
+    }
   }
 
-  auto chrSpriteAddr(uint addr) -> uint {
+  auto chrOBJAddress(uint addr) -> uint {
     if(chrMode == 0) {
       auto bank = chrSpriteBank[7];
       return (bank * 0x2000) + (addr & 0x1fff);
@@ -217,14 +236,14 @@ struct MMC5 : Chip {
     }
   }
 
-  auto chrBGAddr(uint addr) -> uint {
-    addr &= 0x0fff;
-
+  auto chrBGAddress(uint addr) -> uint {
     if(chrMode == 0) {
       auto bank = chrBGBank[3];
-      return (bank * 0x2000) + (addr & 0x0fff);
+      return (bank * 0x2000) + (addr & 0x1fff);
     }
 
+    addr &= 0x0fff;
+
     if(chrMode == 1) {
       auto bank = chrBGBank[3];
       return (bank * 0x1000) + (addr & 0x0fff);
@@ -241,8 +260,8 @@ struct MMC5 : Chip {
     }
   }
 
-  auto chrVSAddr(uint addr) -> uint {
-    return (vsBank * 0x1000) + (addr & 0x0ff8) + (vsVpos & 7);
+  auto chrVerticalSplitAddress(uint addr) -> uint {
+    return (vsBank * 0x1000) + (addr & 0x0ff8) + (vsVPos & 7);
   }
 
   auto blank() -> void {
@@ -264,14 +283,14 @@ struct MMC5 : Chip {
     cpuCycleCounter = 0;
   }
 
-  auto readCIRAM(uint addr) -> uint8 {
-    if(vsFetch && (hcounter & 2) == 0) return exram[vsVpos / 8 * 32 + vsHpos / 8];
-    if(vsFetch && (hcounter & 2) != 0) return exram[vsVpos / 32 * 8 + vsHpos / 32 + 0x03c0];
+  auto ciramRead(uint addr) -> uint8 {
+    if(vsFetch && (hcounter & 2) == 0) return ram.read(vsVPos / 8 * 32 + vsHPos / 8);
+    if(vsFetch && (hcounter & 2) != 0) return ram.read(vsVPos / 32 * 8 + vsHPos / 32 + 0x03c0);
 
     switch(nametableMode[(addr >> 10) & 3]) {
     case 0: return ppu.readCIRAM(0x0000 | (addr & 0x03ff));
     case 1: return ppu.readCIRAM(0x0400 | (addr & 0x03ff));
-    case 2: return exramMode < 2 ? exram[addr & 0x03ff] : (uint8)0x00;
+    case 2: return exramMode < 2 ? ram.read(addr & 0x03ff) : (uint8)0x00;
     case 3: return (hcounter & 2) == 0 ? fillmodeTile : fillmodeColor;
     }
   }
@@ -290,34 +309,34 @@ struct MMC5 : Chip {
 
     if(inFrame == false) {
       vsFetch = false;
-      if(addr & 0x2000) return readCIRAM(addr);
-      return board.chrrom.read(chrActive ? chrBGAddr(addr) : chrSpriteAddr(addr));
+      if(addr & 0x2000) return ciramRead(addr);
+      return board.read(board.chrrom, (chrActive ? chrBGAddress(addr) : chrOBJAddress(addr)));
     }
 
     bool bgFetch = (hcounter < 256 || hcounter >= 320);
     uint8 result = 0x00;
 
     if((hcounter & 7) == 0) {
-      vsHpos  = hcounter >= 320 ? hcounter - 320 : hcounter + 16;
-      vsVpos  = vcounter + vsScroll;
+      vsHPos  = hcounter >= 320 ? hcounter - 320 : hcounter + 16;
+      vsVPos  = vcounter + vsScroll;
       vsFetch = vsEnable && bgFetch && exramMode < 2
-      && (vsSide ? vsHpos / 8 >= vsTile : vsHpos / 8 < vsTile);
-      if(vsVpos >= 240) vsVpos -= 240;
+      && (vsSide ? vsHPos / 8 >= vsTile : vsHPos / 8 < vsTile);
+      if(vsVPos >= 240) vsVPos -= 240;
 
-      result = readCIRAM(addr);
+      result = ciramRead(addr);
 
-      exbank = (chrBankHi << 6) | (exram[addr & 0x03ff] & 0x3f);
-      exattr = exram[addr & 0x03ff] >> 6;
+      exbank = (chrBankHi << 6) | (ram.read(addr & 0x03ff) & 0x3f);
+      exattr = ram.read(addr & 0x03ff) >> 6;
       exattr |= exattr << 2;
       exattr |= exattr << 4;
     } else if((hcounter & 7) == 2) {
-      result = readCIRAM(addr);
+      result = ciramRead(addr);
       if(bgFetch && exramMode == 1) result = exattr;
     } else {
-      if(vsFetch) result = board.chrrom.read(chrVSAddr(addr));
-      else if(sprite8x16 ? bgFetch : chrActive) result = board.chrrom.read(chrBGAddr(addr));
-      else result = board.chrrom.read(chrSpriteAddr(addr));
-      if(bgFetch && exramMode == 1) result = board.chrrom.read(exbank * 0x1000 + (addr & 0x0fff));
+      if(vsFetch) result = board.read(board.chrrom, (chrVerticalSplitAddress(addr)));
+      else if(sprite_8x16 ? bgFetch : chrActive) result = board.read(board.chrrom, (chrBGAddress(addr)));
+      else result = board.read(board.chrrom, (chrOBJAddress(addr)));
+      if(bgFetch && exramMode == 1) result = board.read(board.chrrom, (exbank * 0x1000 + (addr & 0x0fff)));
     }
 
     hcounter += 2;
@@ -329,7 +348,7 @@ struct MMC5 : Chip {
       switch(nametableMode[(addr >> 10) & 3]) {
       case 0: return ppu.writeCIRAM(0x0000 | (addr & 0x03ff), data);
       case 1: return ppu.writeCIRAM(0x0400 | (addr & 0x03ff), data);
-      case 2: exram[addr & 0x03ff] = data; break;
+      case 2: ram.write(addr & 0x03ff, data); break;
       }
     }
   }
@@ -338,7 +357,7 @@ struct MMC5 : Chip {
   }
 
   auto reset() -> void {
-    for(auto& n : exram) n = 0xff;
+    for(uint i = 0; i < ram.size(); i++) ram.write(i, 0xff);
 
     prgMode = 3;
     chrMode = 0;
@@ -374,18 +393,18 @@ struct MMC5 : Chip {
     hcounter = 0;
     for(auto& n : chrAccess) n = 0;
     chrActive = 0;
-    sprite8x16 = 0;
+    sprite_8x16 = 0;
 
     exbank = 0;
     exattr = 0;
 
     vsFetch = 0;
-    vsVpos = 0;
-    vsHpos = 0;
+    vsVPos = 0;
+    vsHPos = 0;
   }
 
   auto serialize(serializer& s) -> void {
-    s.array(exram);
+    s.array(ram.data(), ram.size());
 
     s.integer(prgMode);
     s.integer(chrMode);
@@ -419,14 +438,14 @@ struct MMC5 : Chip {
     s.integer(hcounter);
     for(auto& n : chrAccess) s.integer(n);
     s.integer(chrActive);
-    s.integer(sprite8x16);
+    s.integer(sprite_8x16);
 
     s.integer(exbank);
     s.integer(exattr);
 
     s.integer(vsFetch);
-    s.integer(vsVpos);
-    s.integer(vsHpos);
+    s.integer(vsVPos);
+    s.integer(vsHPos);
   }
 
   enum class Revision : uint {
@@ -434,8 +453,6 @@ struct MMC5 : Chip {
     MMC5B,
   } revision;
 
-  uint8 exram[1024];
-
   //programmable registers
 
   uint2 prgMode;  //$5100
@@ -448,9 +465,9 @@ struct MMC5 : Chip {
   uint8 fillmodeTile;      //$5106
   uint8 fillmodeColor;     //$5107
 
-  bool ramSelect;           //$5113
-  uint2 ramBank;            //$5113
-  uint8 prgBank[4];         //$5114-5117
+  bool ramSelect;            //$5113
+  uint2 ramBank;             //$5113
+  uint8 prgBank[4];          //$5114-5117
   uint10 chrSpriteBank[8];  //$5120-5127
   uint10 chrBGBank[4];      //$5128-512b
   uint2 chrBankHi;          //$5130
@@ -478,12 +495,12 @@ struct MMC5 : Chip {
   uint hcounter;
   uint16 chrAccess[4];
   bool chrActive;
-  bool sprite8x16;
+  bool sprite_8x16;
 
   uint8 exbank;
   uint8 exattr;
 
   bool vsFetch;
-  uint8 vsVpos;
-  uint8 vsHpos;
+  uint8 vsVPos;
+  uint8 vsHPos;
 };
diff --git a/higan/fc/cartridge/chip/mmc6.cpp b/higan/fc/cartridge/chip/mmc6.cpp
index f21c95d..3fb9b17 100644
--- a/higan/fc/cartridge/chip/mmc6.cpp
+++ b/higan/fc/cartridge/chip/mmc6.cpp
@@ -9,7 +9,7 @@ struct MMC6 : Chip {
   }
 
   auto irqTest(uint addr) -> void {
-    if(!(chrAbus & 0x1000) && (addr & 0x1000)) {
+    if(!(chrAddressBus & 0x1000) && (addr & 0x1000)) {
       if(irqDelay == 0) {
         if(irqCounter == 0) {
           irqCounter = irqLatch;
@@ -19,10 +19,10 @@ struct MMC6 : Chip {
       }
       irqDelay = 6;
     }
-    chrAbus = addr;
+    chrAddressBus = addr;
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     switch((addr >> 13) & 3) {
     case 0:
       if(prgMode == 1) return (0x3e << 13) | (addr & 0x1fff);
@@ -37,7 +37,7 @@ struct MMC6 : Chip {
     }
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     if(chrMode == 0) {
       if(addr <= 0x07ff) return (chrBank[0] << 10) | (addr & 0x07ff);
       if(addr <= 0x0fff) return (chrBank[1] << 10) | (addr & 0x07ff);
@@ -55,27 +55,27 @@ struct MMC6 : Chip {
     }
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     if(mirror == 0) return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
     if(mirror == 1) return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
   }
 
-  auto readRAM(uint addr) -> uint8 {
+  auto ramRead(uint addr) -> uint8 {
     if(ramEnable == false) return cpu.mdr();
     if(ramReadable[0] == false && ramReadable[1] == false) return cpu.mdr();
     bool region = addr & 0x0200;
     if(ramReadable[region] == false) return 0x00;
-    return board.prgram.read((region * 0x0200) + (addr & 0x01ff));
+    return board.read(board.prgram, (region * 0x0200) + (addr & 0x01ff));
   }
 
-  auto writeRAM(uint addr, uint8 data) -> void {
+  auto ramWrite(uint addr, uint8 data) -> void {
     if(ramEnable == false) return;
     bool region = addr & 0x0200;
     if(ramWritable[region] == false) return;
-    return board.prgram.write((region * 0x0200) + (addr & 0x01ff), data);
+    return board.write(board.prgram, (region * 0x0200) + (addr & 0x01ff), data);
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr & 0xe001) {
     case 0x8000:
       chrMode = data & 0x80;
@@ -151,7 +151,7 @@ struct MMC6 : Chip {
     irqDelay = 0;
     irqLine = 0;
 
-    chrAbus = 0;
+    chrAddressBus = 0;
   }
 
   auto serialize(serializer& s) -> void {
@@ -170,7 +170,7 @@ struct MMC6 : Chip {
     s.integer(irqDelay);
     s.integer(irqLine);
 
-    s.integer(chrAbus);
+    s.integer(chrAddressBus);
   }
 
   bool chrMode;
@@ -188,5 +188,5 @@ struct MMC6 : Chip {
   uint irqDelay;
   bool irqLine;
 
-  uint16 chrAbus;
+  uint16 chrAddressBus;
 };
diff --git a/higan/fc/cartridge/chip/n108.cpp b/higan/fc/cartridge/chip/n108.cpp
new file mode 100644
index 0000000..846cfaa
--- /dev/null
+++ b/higan/fc/cartridge/chip/n108.cpp
@@ -0,0 +1,81 @@
+struct N108 : Chip {
+  N108(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip/type"].text();
+
+    if(type.match("*108*")) revision = Revision::N108;
+    if(type.match("*109*")) revision = Revision::N109;
+    if(type.match("*118*")) revision = Revision::N118;
+    if(type.match("*119*")) revision = Revision::N119;
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    switch((addr >> 13) & 3) {
+    case 0: return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 1: return (prgBank[1] << 13) | (addr & 0x1fff);
+    case 2: return (0x0e << 13) | (addr & 0x1fff);
+    case 3: return (0x0f << 13) | (addr & 0x1fff);
+    }
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    if(addr <= 0x07ff) return (chrBank[0] << 10) | (addr & 0x07ff);
+    if(addr <= 0x0fff) return (chrBank[1] << 10) | (addr & 0x07ff);
+    if(addr <= 0x13ff) return (chrBank[2] << 10) | (addr & 0x03ff);
+    if(addr <= 0x17ff) return (chrBank[3] << 10) | (addr & 0x03ff);
+    if(addr <= 0x1bff) return (chrBank[4] << 10) | (addr & 0x03ff);
+    if(addr <= 0x1fff) return (chrBank[5] << 10) | (addr & 0x03ff);
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0x8001) {
+    case 0x8000:
+      bankSelect = data & 0x07;
+      break;
+
+    case 0x8001:
+      switch(bankSelect) {
+      case 0: chrBank[0] = data & 0x3e; break;
+      case 1: chrBank[1] = data & 0x3e; break;
+      case 2: chrBank[2] = data & 0x3f; break;
+      case 3: chrBank[3] = data & 0x3f; break;
+      case 4: chrBank[4] = data & 0x3f; break;
+      case 5: chrBank[5] = data & 0x3f; break;
+      case 6: prgBank[0] = data & 0x0f; break;
+      case 7: prgBank[1] = data & 0x0f; break;
+      }
+      break;
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    bankSelect = 0;
+    prgBank[0] = 0;
+    prgBank[1] = 0;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.integer(bankSelect);
+    s.array(prgBank);
+    s.array(chrBank);
+  }
+
+  enum class Revision : uint {
+    N108,
+    N109,
+    N118,
+    N119,
+  } revision;
+
+  uint3 bankSelect;
+  uint8 prgBank[2];
+  uint8 chrBank[6];
+};
diff --git a/higan/fc/cartridge/chip/n163.cpp b/higan/fc/cartridge/chip/n163.cpp
new file mode 100644
index 0000000..0f87aed
--- /dev/null
+++ b/higan/fc/cartridge/chip/n163.cpp
@@ -0,0 +1,217 @@
+struct N163 : Chip {
+  N163(Board& board, Markup::Node& boardNode) : Chip(board) {
+    string type = boardNode["chip/type"].text();
+
+    if(type == "129") revision = Revision::N129;
+    if(type == "163") revision = Revision::N163;
+    if(type == "175") revision = Revision::N175;
+    if(type == "340") revision = Revision::N340;
+  }
+
+  auto main() -> void {
+    if(!audioDisable) {
+      if(++audioChannelTimer == 15) {
+        audioChannelTimer = 0;
+      }
+    }
+    tick();
+  }
+
+  auto readPRG(uint addr) -> uint8 {
+    switch(addr & 0xf800) {
+    case 0x4800:
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        uint8 byte = ram.read(audioAddress);
+        if(audioAutoIncrement) audioAddress++;
+        return byte;
+      }
+      break;
+    case 0x5000: return irqCounter & 0xff;
+    case 0x5800: return ((irqCounter >> 8) & 0x7f) | (irqEnable << 7);
+    case 0x6000: case 0x6800: case 0x7000: case 0x7800:
+      if(ramEnable) return board.read(board.prgram, addr & 0x1fff);
+    case 0x8000: case 0x8800: case 0x9000: case 0x9800:
+    case 0xa000: case 0xa800: case 0xb000: case 0xb800:
+    case 0xc000: case 0xc800: case 0xd000: case 0xd800:
+      return board.read(board.prgrom, (prgBank[(addr & 0x6000) >> 13] << 13) | (addr & 0x1fff));
+    case 0xe000: case 0xe800: case 0xf000: case 0xf800:
+      return board.read(board.prgrom, (0x3f << 13) | (addr & 0x1fff));
+    default: return cpu.mdr();
+    }
+  }
+
+  auto writePRG(uint addr, uint8 data) -> void {
+    if((addr & 0xe000) == 0x6000) {
+      if(ramEnable) {
+        board.write(board.prgram, addr & 0x1fff, data);
+      }
+    } else regWrite(addr, data);
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0xf800) {
+    case 0x4800: // Audio
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        ram.write(audioAddress, data);
+        if(audioAutoIncrement) audioAddress++;
+      }
+      break;
+    case 0x5000: // IRQ Low
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        irqCounter = (irqCounter & 0xff00) | data;
+        cpu.irqLine(0);
+      }
+      break;
+    case 0x5800: // IRQ High
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        irqCounter = (irqCounter & 0x00ff) | ((data & 0x7f) << 8);
+        irqEnable = data & 0x80;
+        cpu.irqLine(0);
+      }
+      break;
+    case 0x8000: case 0x8800: case 0x9000: case 0x9800: // CHR Select
+    case 0xa000: case 0xa800: case 0xb000: case 0xb800:
+      chrBank[(addr & 0x7800) >> 11] = data;
+      break;
+    case 0xc000: // Nametable Select/RAM Enable
+      if(revision == Revision::N175) {
+        ramEnable = data & 0x01;
+      }
+    case 0xc800: case 0xd000: case 0xd800: // Nametable Select
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        chrBank[(addr & 0x7800) >> 11] = data;
+      }
+      break;
+    case 0xe000: // PRG Select 8000
+      prgBank[0] = data & 0x3f;
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        audioDisable = data & 0x40;
+      } else if(revision == Revision::N340) {
+        mirror = (data & 0xc0) >> 6;
+      }
+      break;
+    case 0xe800: // PRG Select A000
+      prgBank[1] = data & 0x3f;
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        chrramDisable = (data & 0xc0) >> 6;
+      }
+      break;
+    case 0xf000: // PRG Select C000
+      prgBank[2] = data & 0x3f;
+      break;
+    case 0xf800: // Sound RAM Address/Write Protection for External RAM
+      if(revision == Revision::N129 || revision == Revision::N163) {
+        audioAddress = data & 0x7f;
+        audioAutoIncrement = data & 0x80;
+      }
+      break;
+    }
+  }
+
+  auto ciramAddress(uint addr) -> uint {
+    switch(mirror) {
+    case 0: return (addr & 0x03ff) | (0x0000);
+    case 1: return (addr & 0x03ff) | ((addr & 0x400) >> 0);
+    case 2: return (addr & 0x03ff) | ((addr & 0x800) >> 1);
+    case 3: return (addr & 0x03ff) | (0x0400);
+    }
+  }
+
+  auto readCHR(uint addr) -> uint8 {
+    if(addr & 0x2000) {
+      if(revision == Revision::N175 || revision == Revision::N340) {
+        return ppu.readCIRAM(ciramAddress(addr));
+      }
+      addr &= 0x2fff;
+    }
+    uint8 bank = chrBank[(addr & 0x3c00) >> 10];
+    if(bank >= 0xe0 && ((addr & 0x2000) | !(chrramDisable & (1 << ((addr & 0x1000) >> 12))))) {
+      addr = (addr & 0x03ff) | (bank << 10);
+      if(board.chrram.size()) return board.read(board.chrram, addr);
+      else                    return ppu.readCIRAM(addr);
+    } else return board.read(board.chrrom, ((bank << 10) | (addr & 0x3ff)));
+  }
+
+  auto writeCHR(uint addr, uint8 data) -> void {
+    if(addr & 0x2000) {
+      if(revision == Revision::N175 || revision == Revision::N340) {
+        return ppu.writeCIRAM(ciramAddress(addr), data);
+      }
+      addr &= 0x2fff;
+    }
+    uint8 bank = chrBank[(addr & 0x3c00) >> 10];
+    if(bank >= 0xe0 && ((addr & 0x2000) | !(chrramDisable & (1 << ((addr & 0x1000) >> 12))))) {
+      addr = (addr & 0x03ff) | (bank << 10);
+      if(board.chrram.size()) return board.write(board.chrram, addr, data);
+      else                    return ppu.writeCIRAM(addr, data);
+    }
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.array(ram.data(), ram.size());
+
+    s.array(prgBank);
+    s.array(chrBank);
+    if(revision == Revision::N129 || revision == Revision::N163) {
+      s.integer(irqCounter);
+      s.integer(irqEnable);
+      s.integer(chrramDisable);
+      s.integer(audioDisable);
+      s.integer(audioAddress);
+      s.integer(audioAutoIncrement);
+    } else if(revision == Revision::N175) {
+      s.integer(ramEnable);
+    } else if(revision == Revision::N340) {
+      s.integer(mirror);
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank[0] = 0;
+    prgBank[1] = 0;
+    prgBank[2] = 0;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+    chrBank[6] = 0;
+    chrBank[7] = 0;
+    chrBank[8] = 0;
+    chrBank[9] = 0;
+    chrBank[10] = 0;
+    chrBank[11] = 0;
+    irqCounter = 0;
+    irqEnable = false;
+    chrramDisable = 0;
+    audioDisable = true;
+    audioAddress = 0x00;
+    audioAutoIncrement = false;
+    ramEnable = revision != Revision::N175;
+    mirror = 0;
+  }
+
+  enum class Revision : uint {
+    N129,
+    N163,
+    N175,
+    N340,
+  } revision;
+
+  uint6 prgBank[3];
+  uint8 chrBank[12];
+  uint15 irqCounter;
+  bool irqEnable;
+  uint2 chrramDisable;
+  bool audioDisable;
+  uint7 audioAddress;
+  bool audioAutoIncrement;
+  uint3 audioChannel;
+  uint4 audioChannelTimer;
+  bool ramEnable;
+  uint2 mirror;
+};
diff --git a/higan/fc/cartridge/chip/ss88006.cpp b/higan/fc/cartridge/chip/ss88006.cpp
new file mode 100644
index 0000000..7b8f1ca
--- /dev/null
+++ b/higan/fc/cartridge/chip/ss88006.cpp
@@ -0,0 +1,135 @@
+struct SS88006 : Chip {
+  SS88006(Board& board, Markup::Node& boardNode) : Chip(board) {
+  }
+
+  auto main() -> void {
+    if(irqEnable) {
+      irqCounter = (irqCounter & ~irqMask) | ((irqCounter - 1) & irqMask);
+      if((irqCounter & irqMask) == irqMask) cpu.irqLine(1);
+    }
+    tick();
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    switch((addr >> 13) & 3) {
+    case 0: return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 1: return (prgBank[1] << 13) | (addr & 0x1fff);
+    case 2: return (prgBank[2] << 13) | (addr & 0x1fff);
+    case 3: return (0xff << 13) | (addr & 0x1fff);
+    }
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    return (chrBank[addr >> 10] << 10) | (addr & 0x03ff);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    switch(mirror) {
+    case 0: return (addr & 0x03ff) | ((addr & 0x0800) >> 1);
+    case 1: return (addr & 0x03ff) | ((addr & 0x0400) >> 0);
+    case 2: return (addr & 0x03ff) | 0x0000;
+    case 3: return (addr & 0x03ff) | 0x0400;
+    }
+  }
+
+  auto ramRead(uint addr) -> uint8 {
+    if(ramEnable) return board.read(board.prgram, addr & 0x1fff);
+  }
+
+  auto ramWrite(uint addr, uint8 data) -> void {
+    if(ramEnable && ramWriteEnable) board.write(board.prgram, addr & 0x1fff, data);
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    data &= 0x0f;
+    switch(addr & 0xf003) {
+    case 0x8000: prgBank[0] = (prgBank[0] & 0xf0) | (data << 0); break;
+    case 0x8001: prgBank[0] = (prgBank[0] & 0x0f) | (data << 4); break;
+    case 0x8002: prgBank[1] = (prgBank[1] & 0xf0) | (data << 0); break;
+    case 0x8003: prgBank[1] = (prgBank[1] & 0x0f) | (data << 4); break;
+    case 0x9000: prgBank[2] = (prgBank[2] & 0xf0) | (data << 0); break;
+    case 0x9001: prgBank[2] = (prgBank[2] & 0x0f) | (data << 4); break;
+    case 0x9002:
+      ramEnable = data & 0x01;
+      ramWriteEnable = data & 0x02;
+      break;
+    case 0xa000: chrBank[0] = (chrBank[0] & 0xf0) | (data << 0); break;
+    case 0xa001: chrBank[0] = (chrBank[0] & 0x0f) | (data << 4); break;
+    case 0xa002: chrBank[1] = (chrBank[1] & 0xf0) | (data << 0); break;
+    case 0xa003: chrBank[1] = (chrBank[1] & 0x0f) | (data << 4); break;
+    case 0xb000: chrBank[2] = (chrBank[2] & 0xf0) | (data << 0); break;
+    case 0xb001: chrBank[2] = (chrBank[2] & 0x0f) | (data << 4); break;
+    case 0xb002: chrBank[3] = (chrBank[3] & 0xf0) | (data << 0); break;
+    case 0xb003: chrBank[3] = (chrBank[3] & 0x0f) | (data << 4); break;
+    case 0xc000: chrBank[4] = (chrBank[4] & 0xf0) | (data << 0); break;
+    case 0xc001: chrBank[4] = (chrBank[4] & 0x0f) | (data << 4); break;
+    case 0xc002: chrBank[5] = (chrBank[5] & 0xf0) | (data << 0); break;
+    case 0xc003: chrBank[5] = (chrBank[5] & 0x0f) | (data << 4); break;
+    case 0xd000: chrBank[6] = (chrBank[6] & 0xf0) | (data << 0); break;
+    case 0xd001: chrBank[6] = (chrBank[6] & 0x0f) | (data << 4); break;
+    case 0xd002: chrBank[7] = (chrBank[7] & 0xf0) | (data << 0); break;
+    case 0xd003: chrBank[7] = (chrBank[7] & 0x0f) | (data << 4); break;
+    case 0xe000: irqLatch = (irqLatch & 0xfff0) | (data << 0x0); break;
+    case 0xe001: irqLatch = (irqLatch & 0xff0f) | (data << 0x4); break;
+    case 0xe002: irqLatch = (irqLatch & 0xf0ff) | (data << 0x8); break;
+    case 0xe003: irqLatch = (irqLatch & 0x0fff) | (data << 0xc); break;
+    case 0xf000:
+      cpu.irqLine(0);
+      irqCounter = irqLatch;
+      break;
+    case 0xf001:
+      cpu.irqLine(0);
+      irqEnable = data & 0x01;
+      irqMask = data & 0x08 ? 0x000f : (data & 0x04 ? 0x00ff : (data & 0x02 ? 0x0fff : 0xffff));
+      break;
+    case 0xf002: mirror = data & 0x03; break;
+    case 0xf003: break; //TODO: Î¼PD7756C ADPCM sound IC
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank[0] = 0;
+    prgBank[1] = 0;
+    prgBank[2] = 0;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+    chrBank[6] = 0;
+    chrBank[7] = 0;
+    mirror = 0;
+    ramEnable = 0;
+    ramWriteEnable = 0;
+    irqCounter = 0;
+    irqLatch = 0;
+    irqEnable = false;
+    irqMask = 0xffff;
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.array(prgBank);
+    s.array(chrBank);
+    s.integer(mirror);
+    s.integer(ramEnable);
+    s.integer(ramWriteEnable);
+    s.integer(irqCounter);
+    s.integer(irqLatch);
+    s.integer(irqEnable);
+    s.integer(irqMask);
+  }
+
+  uint8 prgBank[3];
+  uint8 chrBank[8];
+  uint2 mirror;
+  bool ramEnable;
+  bool ramWriteEnable;
+  uint16 irqCounter;
+  uint16 irqLatch;
+  bool irqEnable;
+  uint16 irqMask;
+};
diff --git a/higan/fc/cartridge/chip/tc.cpp b/higan/fc/cartridge/chip/tc.cpp
new file mode 100644
index 0000000..83d7832
--- /dev/null
+++ b/higan/fc/cartridge/chip/tc.cpp
@@ -0,0 +1,160 @@
+struct TC : Chip {
+  TC(Board& board, Markup::Node& boardNode) : Chip(board) {
+    auto chip = boardNode.find("chip");
+    string type = chip(0)["type"].text();
+    if(type == "TC0190FMC") revision = Revision::TC0190FMC;
+    if(type == "TC0350FMR") revision = Revision::TC0350FMR;
+    if(type == "TC0690FMR") revision = Revision::TC0690FMR;
+    settings.pal16r4 = chip(1)["type"].text() == "PAL16R4";
+  }
+
+  auto main() -> void {
+    if(revision != Revision::TC0190FMC) {
+      if(irqDelay) irqDelay--;
+      irqTest(ppu.io.chrAddressBus);
+      cpu.irqLine(irqLine);
+    }
+    tick();
+  }
+
+  auto irqTest(uint addr) -> void {
+    bool edge;
+    // IRQs occur a little after they would on the MMC3.
+    // Do they use the MC-ACC's behavior instead?
+    edge = (chrAddressBus & 0x1000) && !(addr & 0x1000);
+    if(edge) {
+      if(irqDelay == 0) {
+        if(irqCounter == 0xff) {
+          irqCounter = irqLatch;
+        } else if(++irqCounter == 0xff) {
+          if(irqEnable) irqLine = 1;
+        }
+      }
+      irqDelay = 6;
+    }
+    chrAddressBus = addr;
+  }
+
+  auto prgAddress(uint addr) const -> uint {
+    switch((addr >> 13) & 3) {
+    case 0: return (prgBank[0] << 13) | (addr & 0x1fff);
+    case 1: return (prgBank[1] << 13) | (addr & 0x1fff);
+    case 2: return (0x3e << 13) | (addr & 0x1fff);
+    case 3: return (0x3f << 13) | (addr & 0x1fff);
+    }
+  }
+
+  auto chrAddress(uint addr) const -> uint {
+    if(addr <= 0x07ff) return (chrBank[0] << 11) | (addr & 0x07ff);
+    if(addr <= 0x0fff) return (chrBank[1] << 11) | (addr & 0x07ff);
+    if(addr <= 0x13ff) return (chrBank[2] << 10) | (addr & 0x03ff);
+    if(addr <= 0x17ff) return (chrBank[3] << 10) | (addr & 0x03ff);
+    if(addr <= 0x1bff) return (chrBank[4] << 10) | (addr & 0x03ff);
+    if(addr <= 0x1fff) return (chrBank[5] << 10) | (addr & 0x03ff);
+  }
+
+  auto ciramAddress(uint addr) const -> uint {
+    if(mirror == 0) return ((addr & 0x0400) >> 0) | (addr & 0x03ff);
+    if(mirror == 1) return ((addr & 0x0800) >> 1) | (addr & 0x03ff);
+  }
+
+  auto regWrite(uint addr, uint8 data) -> void {
+    switch(addr & 0xe003) {
+    case 0x8000:
+      prgBank[0] = data & 0x3f;
+      if(revision != Revision::TC0690FMR && !settings.pal16r4) mirror = data & 0x40;
+      break;
+    case 0x8001:
+      prgBank[1] = data & 0x3f;
+      break;
+
+    case 0x8002: chrBank[0] = data; break;
+    case 0x8003: chrBank[1] = data; break;
+    case 0xa000: chrBank[2] = data; break;
+    case 0xa001: chrBank[3] = data; break;
+    case 0xa002: chrBank[4] = data; break;
+    case 0xa003: chrBank[5] = data; break;
+
+    case 0xc000:
+      if(revision != Revision::TC0190FMC) break;
+      irqLatch = data;
+      break;
+
+    case 0xc001:
+      if(revision != Revision::TC0190FMC) break;
+      irqCounter = 0xff;
+      break;
+
+    case 0xc002:
+      if(revision != Revision::TC0190FMC) break;
+      irqEnable = true;
+      break;
+
+    case 0xc003:
+      if(revision != Revision::TC0190FMC) break;
+      irqEnable = false;
+      irqLine = 0;
+      break;
+
+    case 0xe000:
+      if(revision == Revision::TC0690FMR || settings.pal16r4) mirror = data & 0x40;
+      break;
+    }
+  }
+
+  auto power() -> void {
+  }
+
+  auto reset() -> void {
+    prgBank[0] = 0;
+    prgBank[1] = 0;
+    chrBank[0] = 0;
+    chrBank[1] = 0;
+    chrBank[2] = 0;
+    chrBank[3] = 0;
+    chrBank[4] = 0;
+    chrBank[5] = 0;
+    mirror = 0;
+    irqLatch = 0;
+    irqCounter = 0;
+    irqEnable = false;
+    irqDelay = 0;
+    irqLine = 0;
+
+    chrAddressBus = 0;
+  }
+
+  auto serialize(serializer& s) -> void {
+    s.array(prgBank);
+    s.array(chrBank);
+    s.integer(mirror);
+    s.integer(irqLatch);
+    s.integer(irqCounter);
+    s.integer(irqEnable);
+    s.integer(irqDelay);
+    s.integer(irqLine);
+
+    s.integer(chrAddressBus);
+  }
+
+  enum class Revision : uint {
+    TC0190FMC, // No IRQ
+    TC0350FMR, // identical to TC0190 except with IRQ that no game uses
+    TC0690FMR,
+  } revision;
+
+  struct Settings {
+    bool pal16r4;
+  } settings;
+
+  uint8 prgBank[2];
+  uint8 chrBank[6];
+  bool mirror;
+  uint8 irqLatch;
+  uint8 irqCounter;
+  bool irqEnable;
+  uint irqDelay;
+  bool irqLine;
+
+  uint16 chrAddressBus;
+};
diff --git a/higan/fc/cartridge/chip/vrc1.cpp b/higan/fc/cartridge/chip/vrc1.cpp
index 0d6ae0e..6f6e53b 100644
--- a/higan/fc/cartridge/chip/vrc1.cpp
+++ b/higan/fc/cartridge/chip/vrc1.cpp
@@ -2,7 +2,7 @@ struct VRC1 : Chip {
   VRC1(Board& board) : Chip(board) {
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     uint bank = 0x0f;
     if((addr & 0xe000) == 0x8000) bank = prgBank[0];
     if((addr & 0xe000) == 0xa000) bank = prgBank[1];
@@ -10,13 +10,13 @@ struct VRC1 : Chip {
     return (bank * 0x2000) + (addr & 0x1fff);
   }
 
-  auto addrCHR(uint addr) const -> uint {
-    uint bank = chrBankLo[(bool)(addr & 0x1000)];
-    bank |= chrBankHi[(bool)(addr & 0x1000)] << 4;
-    return (bank * 0x1000) + (addr & 0x0fff);  
+  auto chrAddress(uint addr) const -> uint {
+    uint bank = chrBanklo[(bool)(addr & 0x1000)];
+    bank |= chrBankhi[(bool)(addr & 0x1000)] << 4;
+    return (bank * 0x1000) + (addr & 0x0fff);
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -24,15 +24,15 @@ struct VRC1 : Chip {
     throw;
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr & 0xf000) {
     case 0x8000:
       prgBank[0] = data & 0x0f;
       break;
 
     case 0x9000:
-      chrBankHi[1] = data & 0x04;
-      chrBankHi[0] = data & 0x02;
+      chrBankhi[1] = data & 0x04;
+      chrBankhi[0] = data & 0x02;
       mirror = data & 0x01;
       break;
 
@@ -45,11 +45,11 @@ struct VRC1 : Chip {
       break;
 
     case 0xe000:
-      chrBankLo[0] = data & 0x0f;
+      chrBanklo[0] = data & 0x0f;
       break;
 
     case 0xf000:
-      chrBankLo[1] = data & 0x0f;
+      chrBanklo[1] = data & 0x0f;
       break;
     }
   }
@@ -59,20 +59,20 @@ struct VRC1 : Chip {
 
   auto reset() -> void {
     for(auto& n : prgBank) n = 0;
-    for(auto& n : chrBankLo) n = 0;
-    for(auto& n : chrBankHi) n = 0;
+    for(auto& n : chrBanklo) n = 0;
+    for(auto& n : chrBankhi) n = 0;
     mirror = 0;
   }
 
   auto serialize(serializer& s) -> void {
     for(auto& n : prgBank) s.integer(n);
-    for(auto& n : chrBankLo) s.integer(n);
-    for(auto& n : chrBankHi) s.integer(n);
+    for(auto& n : chrBanklo) s.integer(n);
+    for(auto& n : chrBankhi) s.integer(n);
     s.integer(mirror);
   }
 
   uint4 prgBank[3];
-  uint4 chrBankLo[2];
-  bool chrBankHi[2];
+  uint4 chrBanklo[2];
+  bool chrBankhi[2];
   bool mirror;
 };
diff --git a/higan/fc/cartridge/chip/vrc2.cpp b/higan/fc/cartridge/chip/vrc2.cpp
index 54e3644..bc7b04c 100644
--- a/higan/fc/cartridge/chip/vrc2.cpp
+++ b/higan/fc/cartridge/chip/vrc2.cpp
@@ -2,7 +2,7 @@ struct VRC2 : Chip {
   VRC2(Board& board) : Chip(board) {
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     uint bank;
     switch(addr & 0xe000) {
     case 0x8000: bank = prgBank[0]; break;
@@ -13,12 +13,12 @@ struct VRC2 : Chip {
     return (bank * 0x2000) + (addr & 0x1fff);
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     uint bank = chrBank[addr / 0x0400];
     return (bank * 0x0400) + (addr & 0x03ff);
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -28,23 +28,23 @@ struct VRC2 : Chip {
     throw;
   }
 
-  auto readRAM(uint addr) -> uint8 {
-    if(board.prgram.size == 0) {
+  auto ramRead(uint addr) -> uint8 {
+    if(board.prgram.size() == 0) {
       if((addr & 0xf000) == 0x6000) return cpu.mdr() | latch;
       return cpu.mdr();
     }
-    return board.prgram.read(addr & 0x1fff);
+    return board.read(board.prgram, addr & 0x1fff);
   }
 
-  auto writeRAM(uint addr, uint8 data) -> void {
-    if(board.prgram.size == 0) {
+  auto ramWrite(uint addr, uint8 data) -> void {
+    if(board.prgram.size() == 0) {
       if((addr & 0xf000) == 0x6000) latch = data & 0x01;
       return;
     }
-    return board.prgram.write(addr & 0x1fff, data);
+    return board.write(board.prgram, addr & 0x1fff, data);
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr) {
     case 0x8000: case 0x8001: case 0x8002: case 0x8003:
       prgBank[0] = data & 0x1f;
diff --git a/higan/fc/cartridge/chip/vrc3.cpp b/higan/fc/cartridge/chip/vrc3.cpp
index 60437d5..a8002ab 100644
--- a/higan/fc/cartridge/chip/vrc3.cpp
+++ b/higan/fc/cartridge/chip/vrc3.cpp
@@ -24,12 +24,12 @@ struct VRC3 : Chip {
     tick();
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     uint bank = (addr < 0xc000 ? (uint)prgBank : 0x0f);
     return (bank * 0x4000) + (addr & 0x3fff);
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr & 0xf000) {
     case 0x8000: irqLatch = (irqLatch & 0xfff0) | ((data & 0x0f) <<  0); break;
     case 0x9000: irqLatch = (irqLatch & 0xff0f) | ((data & 0x0f) <<  4); break;
diff --git a/higan/fc/cartridge/chip/vrc4.cpp b/higan/fc/cartridge/chip/vrc4.cpp
index d9488ec..ee09c62 100644
--- a/higan/fc/cartridge/chip/vrc4.cpp
+++ b/higan/fc/cartridge/chip/vrc4.cpp
@@ -31,8 +31,8 @@ struct VRC4 : Chip {
     tick();
   }
 
-  auto addrPRG(uint addr) const -> uint {
-    uint bank = 0, banks = board.prgrom.size / 0x2000;
+  auto prgAddress(uint addr) const -> uint {
+    uint bank = 0, banks = board.prgrom.size() / 0x2000;
     switch(addr & 0xe000) {
     case 0x8000: bank = prgMode == 0 ? (uint)prgBank[0] : banks - 2; break;
     case 0xa000: bank = prgBank[1]; break;
@@ -42,12 +42,12 @@ struct VRC4 : Chip {
     return (bank * 0x2000) + (addr & 0x1fff);
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     uint bank = chrBank[addr / 0x0400];
     return (bank * 0x0400) + (addr & 0x03ff);
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -57,7 +57,7 @@ struct VRC4 : Chip {
     throw;
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr) {
     case 0x8000: case 0x8001: case 0x8002: case 0x8003:
       prgBank[0] = data & 0x1f;
diff --git a/higan/fc/cartridge/chip/vrc6.cpp b/higan/fc/cartridge/chip/vrc6.cpp
index 0b23a42..3c21ede 100644
--- a/higan/fc/cartridge/chip/vrc6.cpp
+++ b/higan/fc/cartridge/chip/vrc6.cpp
@@ -3,6 +3,16 @@ struct VRC6 : Chip {
   }
 
   struct Pulse {
+    bool mode;
+    uint3 duty;
+    uint4 volume;
+    bool enable;
+    uint12 frequency;
+
+    uint12 divider;
+    uint4 cycle;
+    uint4 output;
+
     auto clock() -> void {
       if(--divider == 0) {
         divider = frequency + 1;
@@ -24,19 +34,19 @@ struct VRC6 : Chip {
       s.integer(cycle);
       s.integer(output);
     }
+  } pulse1, pulse2;
 
-    bool mode;
-    uint3 duty;
-    uint4 volume;
+  struct Sawtooth {
+    uint6 rate;
     bool enable;
     uint12 frequency;
 
     uint12 divider;
-    uint4 cycle;
-    uint4 output;
-  } pulse1, pulse2;
+    uint1 phase;
+    uint3 stage;
+    uint8 accumulator;
+    uint5 output;
 
-  struct Sawtooth {
     auto clock() -> void {
       if(--divider == 0) {
         divider = frequency + 1;
@@ -64,16 +74,6 @@ struct VRC6 : Chip {
       s.integer(accumulator);
       s.integer(output);
     }
-
-    uint6 rate;
-    bool enable;
-    uint12 frequency;
-
-    uint12 divider;
-    uint1 phase;
-    uint3 stage;
-    uint8 accumulator;
-    uint5 output;
   } sawtooth;
 
   auto main() -> void {
@@ -111,18 +111,18 @@ struct VRC6 : Chip {
     tick();
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     if((addr & 0xc000) == 0x8000) return (prgBank[0] << 14) | (addr & 0x3fff);
     if((addr & 0xe000) == 0xc000) return (prgBank[1] << 13) | (addr & 0x1fff);
-    if((addr & 0xe000) == 0xe000) return (      0xff << 13) | (addr & 0x1fff);
+    if((addr & 0xe000) == 0xe000) return (       0xff << 13) | (addr & 0x1fff);
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     uint bank = chrBank[(addr >> 10) & 7];
     return (bank << 10) | (addr & 0x03ff);
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
@@ -131,15 +131,15 @@ struct VRC6 : Chip {
     }
   }
 
-  auto readRAM(uint addr) -> uint8 {
-    return board.prgram.data[addr & 0x1fff];
+  auto ramRead(uint addr) -> uint8 {
+    return board.read(board.prgram, addr & 0x1fff);
   }
 
-  auto writeRAM(uint addr, uint8 data) -> void {
-    board.prgram.data[addr & 0x1fff] = data;
+  auto ramWrite(uint addr, uint8 data) -> void {
+    board.write(board.prgram, addr & 0x1fff, data);
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr) {
     case 0x8000: case 0x8001: case 0x8002: case 0x8003:
       prgBank[0] = data;
diff --git a/higan/fc/cartridge/chip/vrc7.cpp b/higan/fc/cartridge/chip/vrc7.cpp
index 5a5e38a..538bff6 100644
--- a/higan/fc/cartridge/chip/vrc7.cpp
+++ b/higan/fc/cartridge/chip/vrc7.cpp
@@ -34,28 +34,29 @@ struct VRC7 : Chip {
     tick();
   }
 
-  auto writeIO(uint addr, uint8 data) -> void {
+  auto regWrite(uint addr, uint8 data) -> void {
     switch(addr) {
     case 0x8000: prgBank[0] = data; break;
-    case 0x8010: prgBank[1] = data; break;
+    case 0x8001: prgBank[1] = data; break;
     case 0x9000: prgBank[2] = data; break;
-    case 0x9010: break;  //APU addr port
-    case 0x9030: break;  //APU data port
+    case 0x9001: break;  //APU addr port
+    case 0x9003: break;  //APU data port
     case 0xa000: chrBank[0] = data; break;
-    case 0xa010: chrBank[1] = data; break;
+    case 0xa001: chrBank[1] = data; break;
     case 0xb000: chrBank[2] = data; break;
-    case 0xb010: chrBank[3] = data; break;
+    case 0xb001: chrBank[3] = data; break;
     case 0xc000: chrBank[4] = data; break;
-    case 0xc010: chrBank[5] = data; break;
+    case 0xc001: chrBank[5] = data; break;
     case 0xd000: chrBank[6] = data; break;
-    case 0xd010: chrBank[7] = data; break;
+    case 0xd001: chrBank[7] = data; break;
     case 0xe000: mirror = data & 0x03; break;
 
-    case 0xe010:
+    case 0xe001: {
       irqLatch = data;
       break;
+    }
 
-    case 0xf000:
+    case 0xf000: {
       irqMode = data & 0x04;
       irqEnable = data & 0x02;
       irqAcknowledge = data & 0x01;
@@ -65,15 +66,18 @@ struct VRC7 : Chip {
       }
       irqLine = 0;
       break;
+    }
 
-    case 0xf010:
+    case 0xf001: {
       irqEnable = irqAcknowledge;
       irqLine = 0;
       break;
     }
+
+    }
   }
 
-  auto addrPRG(uint addr) const -> uint {
+  auto prgAddress(uint addr) const -> uint {
     uint bank = 0;
     switch(addr & 0xe000) {
     case 0x8000: bank = prgBank[0]; break;
@@ -84,12 +88,12 @@ struct VRC7 : Chip {
     return (bank * 0x2000) + (addr & 0x1fff);
   }
 
-  auto addrCHR(uint addr) const -> uint {
+  auto chrAddress(uint addr) const -> uint {
     uint bank = chrBank[addr / 0x0400];
     return (bank * 0x0400) + (addr & 0x03ff);
   }
 
-  auto addrCIRAM(uint addr) const -> uint {
+  auto ciramAddress(uint addr) const -> uint {
     switch(mirror) {
     case 0: return ((addr & 0x0400) >> 0) | (addr & 0x03ff);  //vertical mirroring
     case 1: return ((addr & 0x0800) >> 1) | (addr & 0x03ff);  //horizontal mirroring
diff --git a/higan/fc/cartridge/load.cpp b/higan/fc/cartridge/load.cpp
new file mode 100644
index 0000000..a3b1d96
--- /dev/null
+++ b/higan/fc/cartridge/load.cpp
@@ -0,0 +1,93 @@
+auto Cartridge::loadCartridge(Markup::Node node) -> void {
+  information.title.cartridge = node["information/title"].text();
+  auto boardNode = node["board"];
+  if(boardNode["region"].text() == "ntsc")  information.region = Region::NTSC;
+  if(boardNode["region"].text() == "pal")   information.region = Region::PAL;
+  if(boardNode["region"].text() == "dendy") information.region = Region::Dendy;
+
+  if(system.vs()) setupVS(node, boardNode);
+
+  Board::load(boardNode);  //this call will set Cartridge::board if successful
+  if(!board) return;
+  if(auto node = boardNode["prg/rom"]) loadMemory(board->prgrom, node, File::Required, pathID());
+  if(auto node = boardNode["prg/ram"]) loadMemory(board->prgram, node, File::Optional, pathID());
+  if(auto node = boardNode["chr/rom"]) loadMemory(board->chrrom, node, File::Required, pathID());
+  if(auto node = boardNode["chr/ram"]) loadMemory(board->chrram, node, File::Optional, pathID());
+  if(board->chip) if(auto node = boardNode["chip/ram"]) loadMemory(board->chip->ram, node, File::Optional, pathID());
+
+  if(system.pc10()) {
+    auto rom = boardNode["pc10"].find("rom");
+    loadMemory(board->instrom, rom(0), File::Required, pathID());
+    loadMemory(board->keyrom,  rom(1), File::Required, pathID());
+  }
+}
+
+auto Cartridge::setupVS(Markup::Node& node, Markup::Node& boardNode) -> void {
+  vssystem.gameCount = 0;
+  auto side = node.find("side");
+  bool primarySide;
+  if(side(0)["ppu"]) {
+    primarySide = 2 - side.size();
+    boardNode = side(0);
+    vssystem.gameCount++;
+  }
+  if(side(1)["ppu"]) {
+    if(vssystem.gameCount == 0) {
+      primarySide = 1;
+      boardNode = side(1);
+    }
+    vssystem.gameCount++;
+  }
+  cpu.side = primarySide;
+  apu.side = primarySide;
+  ppu.side = primarySide;
+
+  auto controller = boardNode.find("controller");
+  vssystem.swapControllers = controller(0)["port"].integer() == 2;
+  string device1 = boardNode.find("controller(port=1)/device")(0).text();
+  string device2 = boardNode.find("controller(port=2)/device")(0).text();
+  if(device1 == "gamepad") {
+    peripherals.connect(ID::Port::Controller1, ID::Device::Gamepad);
+  } else if(device1 == "none") {
+    peripherals.connect(ID::Port::Controller1, ID::Device::None);
+  }
+  if(device2 == "gamepad") {
+    peripherals.connect(ID::Port::Controller2, ID::Device::Gamepad);
+  } else if(device2 == "zapper") {
+    peripherals.connect(ID::Port::Controller2, ID::Device::Zapper);
+  } else if(device2 == "none") {
+    peripherals.connect(ID::Port::Controller2, ID::Device::None);
+  }
+  vssystem.setDip(primarySide, interface->dipSettings(boardNode));
+
+  string cpuVersion = side(0)["cpu/version"].text();
+  vssystem.forceSubRAM = cpuVersion == "RP2A04";
+
+  string ppuVersion = boardNode["ppu/version"].text();
+  if(ppuVersion == "RP2C02C")     ppu.version = PPU::Version::RP2C02C;
+  if(ppuVersion == "RP2C02G")     ppu.version = PPU::Version::RP2C02G;
+  if(ppuVersion == "RP2C03B")     ppu.version = PPU::Version::RP2C03B;
+  if(ppuVersion == "RP2C03G")     ppu.version = PPU::Version::RP2C03G;
+  if(ppuVersion == "RP2C04-0001") ppu.version = PPU::Version::RP2C04_0001;
+  if(ppuVersion == "RP2C04-0002") ppu.version = PPU::Version::RP2C04_0002;
+  if(ppuVersion == "RP2C04-0003") ppu.version = PPU::Version::RP2C04_0003;
+  if(ppuVersion == "RP2C04-0004") ppu.version = PPU::Version::RP2C04_0004;
+  if(ppuVersion == "RC2C03B")     ppu.version = PPU::Version::RC2C03B;
+  if(ppuVersion == "RC2C03C")     ppu.version = PPU::Version::RC2C03C;
+  if(ppuVersion == "RC2C05-01")   ppu.version = PPU::Version::RC2C05_01;
+  if(ppuVersion == "RC2C05-02")   ppu.version = PPU::Version::RC2C05_02;
+  if(ppuVersion == "RC2C05-03")   ppu.version = PPU::Version::RC2C05_03;
+  if(ppuVersion == "RC2C05-04")   ppu.version = PPU::Version::RC2C05_04;
+  if(ppuVersion == "RC2C05-05")   ppu.version = PPU::Version::RC2C05_05;
+}
+
+//
+
+auto Cartridge::loadMemory(MappedRAM& ram, Markup::Node node, bool required, maybe<uint> id) -> void {
+  string name = node["name"].text();
+  uint size = node["size"].natural();
+  ram.allocate(size);
+  if(auto fp = interface->open(id(), name, File::Read, required)) {
+    fp->read(ram.data(), ram.size());
+  }
+}
diff --git a/higan/fc/cartridge/save.cpp b/higan/fc/cartridge/save.cpp
new file mode 100644
index 0000000..64d89c9
--- /dev/null
+++ b/higan/fc/cartridge/save.cpp
@@ -0,0 +1,21 @@
+auto Cartridge::saveCartridge(Markup::Node node) -> void {
+  auto boardNode = node["board"];
+
+  if(auto node = boardNode["prg/ram"]) saveMemory(board->prgram, node);
+  if(auto node = boardNode["chr/ram"]) saveMemory(board->chrram, node);
+  if(board->chip) {
+    if(auto node = boardNode["chip/ram"]) saveMemory(board->chip->ram, node);
+  }
+}
+
+//
+
+auto Cartridge::saveMemory(MappedRAM& memory, Markup::Node node, maybe<uint> id) -> void {
+  if(!id) id = pathID();
+  if(!node || node["volatile"]) return;
+  auto name = node["name"].text();
+  auto size = node["size"].natural();
+  if(auto fp = interface->open(id(), name, File::Write)) {
+    fp->write(memory.data(), memory.size());
+  }
+}
diff --git a/higan/fc/cartridge/serialization.cpp b/higan/fc/cartridge/serialization.cpp
new file mode 100644
index 0000000..a74dc19
--- /dev/null
+++ b/higan/fc/cartridge/serialization.cpp
@@ -0,0 +1,4 @@
+auto Cartridge::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+  return board->serialize(s);
+}
diff --git a/higan/fc/controller/controller.cpp b/higan/fc/controller/controller.cpp
index 836861e..cec3cb8 100644
--- a/higan/fc/controller/controller.cpp
+++ b/higan/fc/controller/controller.cpp
@@ -3,6 +3,13 @@
 namespace Famicom {
 
 #include "gamepad/gamepad.cpp"
+#include "gamepad-mic/gamepad-mic.cpp"
+#include "four-score/four-score.cpp"
+#include "zapper/zapper.cpp"
+#include "power-pad/power-pad.cpp"
+#include "vaus/vaus.cpp"
+#include "snes-gamepad/snes-gamepad.cpp"
+#include "mouse/mouse.cpp"
 
 Controller::Controller(bool port) : port(port) {
   if(!handle()) create(Controller::Enter, 1);
diff --git a/higan/fc/controller/controller.hpp b/higan/fc/controller/controller.hpp
index 4515a6a..f90990d 100644
--- a/higan/fc/controller/controller.hpp
+++ b/higan/fc/controller/controller.hpp
@@ -1,4 +1,4 @@
-//Famicom controller port pinout:
+//NES/AV Famicom controller port pinout:
 //  ____
 // |    \
 // |(7)  \
@@ -9,7 +9,7 @@
 //
 // pin  name   port1           port2
 //  1:  +5v
-//  2:  clock  $4016 read      $4016.d0 write
+//  2:  clock  $4016 read      $4017 read
 //  3:  latch  $4016.d0 write  $4016.d0 write
 //  4:  data0  $4016.d0 read   $4017.d0 read
 //  5:  data3  $4016.d3 read   $4017.d3 read
@@ -17,7 +17,7 @@
 //  7:  gnd
 
 struct Controller : Thread {
-  enum : bool { Port1 = 0, Port2 = 1 };
+  enum : uint { Port1 = 0, Port2 = 1 };
 
   Controller(bool port);
   virtual ~Controller();
@@ -25,9 +25,17 @@ struct Controller : Thread {
 
   virtual auto main() -> void;
   virtual auto data() -> uint3 { return 0; }
+  virtual auto mic() -> bool { return 0; }
   virtual auto latch(bool data) -> void {}
 
   const bool port;
 };
 
 #include "gamepad/gamepad.hpp"
+#include "gamepad-mic/gamepad-mic.hpp"
+#include "four-score/four-score.hpp"
+#include "zapper/zapper.hpp"
+#include "power-pad/power-pad.hpp"
+#include "vaus/vaus.hpp"
+#include "snes-gamepad/snes-gamepad.hpp"
+#include "mouse/mouse.hpp"
diff --git a/higan/fc/controller/four-score/four-score.cpp b/higan/fc/controller/four-score/four-score.cpp
new file mode 100644
index 0000000..41f63aa
--- /dev/null
+++ b/higan/fc/controller/four-score/four-score.cpp
@@ -0,0 +1,60 @@
+FourScore::FourScore(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+}
+
+auto FourScore::data() -> uint3 {
+  if(counter >= 24) return 1;
+  if(latched) return interface->inputPoll(port, ID::Device::FourScore, 0 + A);
+
+  auto& A = gamepads[0];
+  auto& B = gamepads[1];
+
+  switch(counter++) {
+  case  0: return A.a;
+  case  1: return A.b;
+  case  2: return A.select;
+  case  3: return A.start;
+  case  4: return (A.up & !A.down);
+  case  5: return (A.down & !A.up);
+  case  6: return (A.left & !A.right);
+  case  7: return (A.right & !A.left);
+  case  8: return B.a;
+  case  9: return B.b;
+  case 10: return B.select;
+  case 11: return B.start;
+  case 12: return (B.up & !B.down);
+  case 13: return (B.down & !B.up);
+  case 14: return (B.left & !B.right);
+  case 15: return (B.right & !B.left);
+  case 16: return 0;
+  case 17: return 0;
+  case 18: return port == 1;
+  case 19: return port == 0;
+  case 20: return 0;
+  case 21: return 0;
+  case 22: return 0;
+  case 23: return 0;
+  }
+  unreachable;
+}
+
+auto FourScore::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  if(latched == 0) {
+    for(uint id : range(2)) {
+      auto& gamepad = gamepads[id];
+      gamepad.a      = interface->inputPoll(port, ID::Device::FourScore, id * 8 + A);
+      gamepad.b      = interface->inputPoll(port, ID::Device::FourScore, id * 8 + B);
+      gamepad.select = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Select);
+      gamepad.start  = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Start);
+      gamepad.up     = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Up);
+      gamepad.down   = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Down);
+      gamepad.left   = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Left);
+      gamepad.right  = interface->inputPoll(port, ID::Device::FourScore, id * 8 + Right);
+    }
+  }
+}
diff --git a/higan/fc/controller/four-score/four-score.hpp b/higan/fc/controller/four-score/four-score.hpp
new file mode 100644
index 0000000..1da2ca1
--- /dev/null
+++ b/higan/fc/controller/four-score/four-score.hpp
@@ -0,0 +1,19 @@
+struct FourScore : Controller {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Select, Start,
+  };
+
+  FourScore(bool port);
+
+  auto data() -> uint3;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  struct Gamepad {
+    boolean a, b, select, start;
+    boolean up, down, left, right;
+  } gamepads[2];
+};
diff --git a/higan/fc/controller/gamepad-mic/gamepad-mic.cpp b/higan/fc/controller/gamepad-mic/gamepad-mic.cpp
new file mode 100644
index 0000000..7181c70
--- /dev/null
+++ b/higan/fc/controller/gamepad-mic/gamepad-mic.cpp
@@ -0,0 +1,41 @@
+GamepadMic::GamepadMic(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+}
+
+auto GamepadMic::data() -> uint3 {
+  if(counter >= 8) return 1;
+  if(latched == 1) return interface->inputPoll(port, ID::Device::GamepadMic, A);
+
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
+  switch(counter++) {
+  case 0: return a;
+  case 1: return b;
+  case 2: return 0;
+  case 3: return 0;
+  case 4: return up & !down;
+  case 5: return down & !up;
+  case 6: return left & !right;
+  case 7: return right & !left;
+  }
+  unreachable;
+}
+
+auto GamepadMic::mic() -> bool {
+  return interface->inputPoll(port, ID::Device::GamepadMic, Mic) && nall::random() & 1;
+}
+
+auto GamepadMic::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  if(latched == 0) {
+    a      = interface->inputPoll(port, ID::Device::GamepadMic, A);
+    b      = interface->inputPoll(port, ID::Device::GamepadMic, B);
+    up     = interface->inputPoll(port, ID::Device::GamepadMic, Up);
+    down   = interface->inputPoll(port, ID::Device::GamepadMic, Down);
+    left   = interface->inputPoll(port, ID::Device::GamepadMic, Left);
+    right  = interface->inputPoll(port, ID::Device::GamepadMic, Right);
+  }
+}
diff --git a/higan/fc/controller/gamepad-mic/gamepad-mic.hpp b/higan/fc/controller/gamepad-mic/gamepad-mic.hpp
new file mode 100644
index 0000000..afceb5a
--- /dev/null
+++ b/higan/fc/controller/gamepad-mic/gamepad-mic.hpp
@@ -0,0 +1,18 @@
+struct GamepadMic : Controller {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Mic,
+  };
+
+  GamepadMic(bool port);
+
+  auto data() -> uint3;
+  auto mic() -> bool;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean a, b;
+  boolean up, down, left, right;
+};
diff --git a/higan/fc/controller/gamepad/gamepad.cpp b/higan/fc/controller/gamepad/gamepad.cpp
index e6621cc..b4b3f88 100644
--- a/higan/fc/controller/gamepad/gamepad.cpp
+++ b/higan/fc/controller/gamepad/gamepad.cpp
@@ -1,19 +1,22 @@
 Gamepad::Gamepad(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
 }
 
 auto Gamepad::data() -> uint3 {
   if(counter >= 8) return 1;
   if(latched == 1) return interface->inputPoll(port, ID::Device::Gamepad, A);
 
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
   switch(counter++) {
   case 0: return a;
   case 1: return b;
   case 2: return select;
   case 3: return start;
-  case 4: return up && !down;
-  case 5: return down && !up;
-  case 6: return left && !right;
-  case 7: return right && !left;
+  case 4: return up & !down;
+  case 5: return down & !up;
+  case 6: return left & !right;
+  case 7: return right & !left;
   }
   unreachable;
 }
diff --git a/higan/fc/controller/gamepad/gamepad.hpp b/higan/fc/controller/gamepad/gamepad.hpp
index 23883b5..aafdfcb 100644
--- a/higan/fc/controller/gamepad/gamepad.hpp
+++ b/higan/fc/controller/gamepad/gamepad.hpp
@@ -4,19 +4,14 @@ struct Gamepad : Controller {
   };
 
   Gamepad(bool port);
+
   auto data() -> uint3;
   auto latch(bool data) -> void;
 
 private:
-  bool latched = 0;
-  uint counter = 0;
+  bool latched;
+  uint counter;
 
-  bool a = 0;
-  bool b = 0;
-  bool select = 0;
-  bool start = 0;
-  bool up = 0;
-  bool down = 0;
-  bool left = 0;
-  bool right = 0;
+  boolean a, b, select, start;
+  boolean up, down, left, right;
 };
diff --git a/higan/fc/controller/mouse/mouse.cpp b/higan/fc/controller/mouse/mouse.cpp
new file mode 100644
index 0000000..b615fbf
--- /dev/null
+++ b/higan/fc/controller/mouse/mouse.cpp
@@ -0,0 +1,86 @@
+Mouse::Mouse(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+
+  speed = 0;
+  x = 0;
+  y = 0;
+  dx = 0;
+  dy = 0;
+  l = 0;
+  r = 0;
+}
+
+auto Mouse::data() -> uint3 {
+  if(latched == 1) {
+    speed = (speed + 1) % 3;
+    return 0;
+  }
+
+  if(counter >= 32) return 1;
+
+  switch(counter++) { default:
+  case  0: return 0;
+  case  1: return 0;
+  case  2: return 0;
+  case  3: return 0;
+  case  4: return 0;
+  case  5: return 0;
+  case  6: return 0;
+  case  7: return 0;
+
+  case  8: return r;
+  case  9: return l;
+  case 10: return (speed >> 1) & 1;
+  case 11: return (speed >> 0) & 1;
+
+  case 12: return 0;  //signature
+  case 13: return 0;  // ||
+  case 14: return 0;  // ||
+  case 15: return 1;  // ||
+
+  case 16: return dy;
+  case 17: return (y >> 6) & 1;
+  case 18: return (y >> 5) & 1;
+  case 19: return (y >> 4) & 1;
+  case 20: return (y >> 3) & 1;
+  case 21: return (y >> 2) & 1;
+  case 22: return (y >> 1) & 1;
+  case 23: return (y >> 0) & 1;
+
+  case 24: return dx;
+  case 25: return (x >> 6) & 1;
+  case 26: return (x >> 5) & 1;
+  case 27: return (x >> 4) & 1;
+  case 28: return (x >> 3) & 1;
+  case 29: return (x >> 2) & 1;
+  case 30: return (x >> 1) & 1;
+  case 31: return (x >> 0) & 1;
+  }
+}
+
+auto Mouse::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  x = interface->inputPoll(port, ID::Device::Mouse, X);  //-n = left, 0 = center, +n = right
+  y = interface->inputPoll(port, ID::Device::Mouse, Y);  //-n = up,   0 = center, +n = down
+  l = interface->inputPoll(port, ID::Device::Mouse, Left);
+  r = interface->inputPoll(port, ID::Device::Mouse, Right);
+
+  dx = x < 0;  //0 = right, 1 = left
+  dy = y < 0;  //0 = down,  1 = up
+
+  if(x < 0) x = -x;  //abs(position_x)
+  if(y < 0) y = -y;  //abs(position_y)
+
+  double multiplier = 1.0;
+  if(speed == 1) multiplier = 1.5;
+  if(speed == 2) multiplier = 2.0;
+  x = (double)x * multiplier;
+  y = (double)y * multiplier;
+
+  x = min(127, x);
+  y = min(127, y);
+}
diff --git a/higan/fc/controller/mouse/mouse.hpp b/higan/fc/controller/mouse/mouse.hpp
new file mode 100644
index 0000000..02a572b
--- /dev/null
+++ b/higan/fc/controller/mouse/mouse.hpp
@@ -0,0 +1,22 @@
+struct Mouse : Controller {
+  enum : uint {
+    X, Y, Left, Right,
+  };
+
+  Mouse(bool port);
+
+  auto data() -> uint3;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  uint speed;  //0 = slow, 1 = normal, 2 = fast
+  int x;       //x-coordinate
+  int y;       //y-coordinate
+  bool dx;     //x-direction
+  bool dy;     //y-direction
+  bool l;      //left button
+  bool r;      //right button
+};
diff --git a/higan/fc/controller/power-pad/power-pad.cpp b/higan/fc/controller/power-pad/power-pad.cpp
new file mode 100644
index 0000000..326565e
--- /dev/null
+++ b/higan/fc/controller/power-pad/power-pad.cpp
@@ -0,0 +1,46 @@
+PowerPad::PowerPad(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+
+  b1 = b2  = b3  = b4  = 0;
+  b5 = b6  = b7  = b8  = 0;
+  b9 = b10 = b11 = b12 = 0;
+}
+
+auto PowerPad::data() -> uint3 {
+  if(counter >= 8) return 0x6;
+  if(latched == 1) return (interface->inputPoll(port, ID::Device::PowerPad, 1) << 1) | (interface->inputPoll(port, ID::Device::PowerPad, 3) << 2);
+
+  switch(counter++) {
+  case  0: return (b2  << 1) | (b4  << 2);
+  case  1: return (b1  << 1) | (b3  << 2);
+  case  2: return (b5  << 1) | (b12 << 2);
+  case  3: return (b9  << 1) | (b8  << 2);
+  case  4: return (b6  << 1) | (1   << 2);
+  case  5: return (b10 << 1) | (1   << 2);
+  case  6: return (b11 << 1) | (1   << 2);
+  case  7: return (b7  << 1) | (1   << 2);
+  }
+}
+
+auto PowerPad::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  if(latched == 0) {
+    auto id = ID::Device::PowerPad;
+    b1  = interface->inputPoll(port, id,  0);
+    b2  = interface->inputPoll(port, id,  1);
+    b3  = interface->inputPoll(port, id,  2);
+    b4  = interface->inputPoll(port, id,  3);
+    b5  = interface->inputPoll(port, id,  4);
+    b6  = interface->inputPoll(port, id,  5);
+    b7  = interface->inputPoll(port, id,  6);
+    b8  = interface->inputPoll(port, id,  7);
+    b9  = interface->inputPoll(port, id,  8);
+    b10 = interface->inputPoll(port, id,  9);
+    b11 = interface->inputPoll(port, id, 10);
+    b12 = interface->inputPoll(port, id, 11);
+  }
+}
diff --git a/higan/fc/controller/power-pad/power-pad.hpp b/higan/fc/controller/power-pad/power-pad.hpp
new file mode 100644
index 0000000..0179663
--- /dev/null
+++ b/higan/fc/controller/power-pad/power-pad.hpp
@@ -0,0 +1,14 @@
+struct PowerPad : Controller {
+  PowerPad(bool port);
+
+  auto data() -> uint3;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  bool b1, b2,  b3,  b4;
+  bool b5, b6,  b7,  b8;
+  bool b9, b10, b11, b12;
+};
diff --git a/higan/fc/controller/snes-gamepad/snes-gamepad.cpp b/higan/fc/controller/snes-gamepad/snes-gamepad.cpp
new file mode 100644
index 0000000..ea2c19b
--- /dev/null
+++ b/higan/fc/controller/snes-gamepad/snes-gamepad.cpp
@@ -0,0 +1,48 @@
+SNESGamepad::SNESGamepad(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+}
+
+auto SNESGamepad::data() -> uint3 {
+  if(counter >= 16) return 1;
+  if(latched == 1) return interface->inputPoll(port, ID::Device::SNESGamepad, B);
+
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
+  switch(counter++) {
+  case  0: return b;
+  case  1: return y;
+  case  2: return select;
+  case  3: return start;
+  case  4: return up & !down;
+  case  5: return down & !up;
+  case  6: return left & !right;
+  case  7: return right & !left;
+  case  8: return a;
+  case  9: return x;
+  case 10: return l;
+  case 11: return r;
+  }
+
+  return 0;  //12-15: signature
+}
+
+auto SNESGamepad::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  if(latched == 0) {
+    b      = interface->inputPoll(port, ID::Device::SNESGamepad, B);
+    y      = interface->inputPoll(port, ID::Device::SNESGamepad, Y);
+    select = interface->inputPoll(port, ID::Device::SNESGamepad, Select);
+    start  = interface->inputPoll(port, ID::Device::SNESGamepad, Start);
+    up     = interface->inputPoll(port, ID::Device::SNESGamepad, Up);
+    down   = interface->inputPoll(port, ID::Device::SNESGamepad, Down);
+    left   = interface->inputPoll(port, ID::Device::SNESGamepad, Left);
+    right  = interface->inputPoll(port, ID::Device::SNESGamepad, Right);
+    a      = interface->inputPoll(port, ID::Device::SNESGamepad, A);
+    x      = interface->inputPoll(port, ID::Device::SNESGamepad, X);
+    l      = interface->inputPoll(port, ID::Device::SNESGamepad, L);
+    r      = interface->inputPoll(port, ID::Device::SNESGamepad, R);
+  }
+}
diff --git a/higan/fc/controller/snes-gamepad/snes-gamepad.hpp b/higan/fc/controller/snes-gamepad/snes-gamepad.hpp
new file mode 100644
index 0000000..7aa4517
--- /dev/null
+++ b/higan/fc/controller/snes-gamepad/snes-gamepad.hpp
@@ -0,0 +1,18 @@
+struct SNESGamepad : Controller {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Y, X, L, R, Select, Start,
+  };
+
+  SNESGamepad(bool port);
+
+  auto data() -> uint3;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean b, y, select, start;
+  boolean up, down, left, right;
+  boolean a, x, l, r;
+};
diff --git a/higan/fc/controller/vaus/vaus.cpp b/higan/fc/controller/vaus/vaus.cpp
new file mode 100644
index 0000000..b04c880
--- /dev/null
+++ b/higan/fc/controller/vaus/vaus.cpp
@@ -0,0 +1,41 @@
+Vaus::Vaus(bool port) : Controller(port) {
+  create(Controller::Enter, system.colorburst() * 6.0);
+  latched = 0;
+  counter = 0;
+
+  x = 0;
+  control = 0;
+
+  prev = 0;
+}
+
+auto Vaus::main() -> void {
+  uint next = ppu.vcounter() * 341 + ppu.hcounter();
+
+  if(next < prev) {
+    //Vcounter wrapped back to zero; update control knob for start of new frame
+    int nx = interface->inputPoll(port, ID::Device::Vaus, Control) * 160 / 256;
+    const uint8_t trimpot = 0x0d;
+    x = max(trimpot, min(trimpot + 0xa0, x - nx));
+  }
+
+  prev = next;
+  step(3);
+  synchronize(cpu);
+}
+
+auto Vaus::data() -> uint3 {
+  bool fire = interface->inputPoll(port, ID::Device::Vaus, Fire);
+  if(latched == 1) return fire << 1 | control.bit(7) << 2;
+  if(counter >= 8) return 0;
+
+  return fire << 1 | control.bit(7 - counter++) << 2;
+}
+
+auto Vaus::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  control = x & 0xff;
+}
diff --git a/higan/fc/controller/vaus/vaus.hpp b/higan/fc/controller/vaus/vaus.hpp
new file mode 100644
index 0000000..0c47253
--- /dev/null
+++ b/higan/fc/controller/vaus/vaus.hpp
@@ -0,0 +1,20 @@
+struct Vaus : Controller {
+  enum : uint {
+    Control, Fire,
+  };
+
+  Vaus(bool port);
+
+  auto main() -> void;
+  auto data() -> uint3;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  int x;
+  uint8 control;
+
+  uint prev;
+};
diff --git a/higan/fc/controller/zapper/zapper.cpp b/higan/fc/controller/zapper/zapper.cpp
new file mode 100644
index 0000000..90a3506
--- /dev/null
+++ b/higan/fc/controller/zapper/zapper.cpp
@@ -0,0 +1,127 @@
+Zapper::Zapper(bool port) : Controller(port) {
+  create(Controller::Enter, system.colorburst() * 6.0);
+  sprite = Emulator::video.createSprite(16, 16);
+  sprite->setPixels(Resource::Sprite::CrosshairRedSmall);
+
+  latched = 0;
+  counter = 0;
+
+  //center cursor onscreen
+  x = 256 / 2;
+  y = 240 / 2;
+
+  light       = false;
+  trigger     = false;
+  lighttime   = 0;
+  triggertime = 0;
+  offscreen   = false;
+
+  triggerlock = false;
+
+  prev = 0;
+}
+
+Zapper::~Zapper() {
+  Emulator::video.removeSprite(sprite);
+}
+
+auto Zapper::main() -> void {
+  uint next = ppu.vcounter() * 341 + ppu.hcounter();
+
+  if(lighttime > 0) {
+    lighttime -= 1;
+  }
+
+  if(!offscreen) {
+    uint target = y * 341 + x + 8;
+    if(next >= target && prev < target) {
+      //CRT raster detected
+      //light remains in the gun for 10-25 scanlines
+      if(readLight()) lighttime = 341 * 16;
+    }
+  }
+
+  if(next < prev) {
+    if(triggertime > 0) triggertime -= 1;
+    //Vcounter wrapped back to zero; update cursor coordinates for start of new frame
+    int nx = interface->inputPoll(port, ID::Device::Zapper, X);
+    int ny = interface->inputPoll(port, ID::Device::Zapper, Y);
+    nx += x;
+    ny += y;
+    x = max(-16, min(256 + 16, nx));
+    y = max(-16, min(240 + 16, ny));
+    offscreen = (x < 0 || y < 0 || x >= 256 || y >= 240);
+    sprite->setPosition(x - 8, y - 8);
+    sprite->setVisible(true);
+  }
+
+  prev = next;
+  step(3);
+  synchronize(cpu);
+}
+
+auto Zapper::data() -> uint3 {
+  if(!system.vs()) {
+    bool newtrigger = interface->inputPoll(port, ID::Device::Zapper, Trigger);
+    if(newtrigger && !triggerlock) {
+      triggertime = 3;
+      triggerlock = true;
+    } else if(!newtrigger) {
+      triggerlock = false;
+    }
+    light = lighttime > 0;
+    trigger = triggertime > 0;
+
+    return (trigger << 2) | ((!light) << 1);
+  } else {
+    if(counter >= 8) return 1;
+    if(latched == 1) return 0;
+
+    switch(counter++) {
+    case 0: return 0;
+    case 1: return 0;
+    case 2: return 0;
+    case 3: return 0;
+    case 4: return 1; // connected
+    case 5: return 0;
+    case 6: return light;
+    case 7: return trigger;
+    }
+  }
+}
+
+auto Zapper::readLight() -> bool {
+  if(offscreen) return false;
+  uint32 paletteIndex = ppu.output[y * 256 + x];
+  uint color;
+  switch(ppu.version) {
+  default:
+    return ((paletteIndex & 0x20) && ((paletteIndex & 0x0f) < 0x0d));
+  case PPU::Version::RP2C04_0001:
+    color = PPU::RP2C04_0001[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0002:
+    color = PPU::RP2C04_0002[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0003:
+    color = PPU::RP2C04_0003[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0004:
+    color = PPU::RP2C04_0004[paletteIndex & 63];
+    break;
+  }
+  if((color & 0xf00) > 0x600) return true;
+  if((color & 0x0f0) > 0x060) return true;
+  if((color & 0x00f) > 0x006) return true;
+  return false;
+}
+
+auto Zapper::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  if(system.vs() && latched == 0) {
+    counter = 0;
+    trigger = interface->inputPoll(port, ID::Device::Zapper, Trigger);
+    light = lighttime > 0;
+  }
+}
diff --git a/higan/fc/controller/zapper/zapper.hpp b/higan/fc/controller/zapper/zapper.hpp
new file mode 100644
index 0000000..98f092a
--- /dev/null
+++ b/higan/fc/controller/zapper/zapper.hpp
@@ -0,0 +1,32 @@
+struct Zapper : Controller {
+  shared_pointer<Emulator::Sprite> sprite;
+
+  enum : uint {
+    X, Y, Trigger,
+  };
+
+  Zapper(bool port);
+  ~Zapper();
+
+  auto main() -> void;
+  auto data() -> uint3;
+  auto readLight() -> bool;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter; // VS. System
+
+  int x;
+  int y;
+
+  bool light;
+  bool trigger;
+  uint lighttime;
+  uint triggertime;
+  bool offscreen;
+
+  bool triggerlock;
+
+  uint prev;
+};
diff --git a/higan/fc/cpu/cpu.cpp b/higan/fc/cpu/cpu.cpp
index c39000f..56563d9 100644
--- a/higan/fc/cpu/cpu.cpp
+++ b/higan/fc/cpu/cpu.cpp
@@ -2,10 +2,14 @@
 
 namespace Famicom {
 
+CPU cpu;
 #include "memory.cpp"
+#include "io.cpp"
 #include "timing.cpp"
 #include "serialization.cpp"
-CPU cpu;
+
+CPU::CPU() : Processor::MOS6502(false) {
+}
 
 auto CPU::Enter() -> void {
   while(true) scheduler.synchronize(), cpu.main();
@@ -16,16 +20,12 @@ auto CPU::main() -> void {
   instruction();
 }
 
-auto CPU::step(uint clocks) -> void {
-  Thread::step(clocks);
-  synchronize(apu);
-  synchronize(ppu);
-  synchronize(cartridge);
-  for(auto peripheral : peripherals) synchronize(*peripheral);
+auto CPU::load(Markup::Node node) -> bool {
+  return true;
 }
 
 auto CPU::power() -> void {
-  R6502::power();
+  MOS6502::power();
 
   for(auto addr : range(0x0800)) ram[addr] = 0xff;
   ram[0x0008] = 0xf7;
@@ -35,14 +35,36 @@ auto CPU::power() -> void {
 }
 
 auto CPU::reset() -> void {
-  R6502::reset();
-  create(CPU::Enter, system.colorburst() * 6.0);
+  MOS6502::reset();
+  create(Enter, system.colorburst() * 6.0);
+
+  function<auto (uint16, uint8) -> uint8> reader;
+  function<auto (uint16, uint8) -> void> writer;
 
-  regs.pc  = bus.read(0xfffc) << 0;
-  regs.pc |= bus.read(0xfffd) << 8;
+  reader = [](uint16 addr, uint8) -> uint8 { return cpu.ram[addr]; };
+  writer = [](uint16 addr, uint8 data) -> void { cpu.ram[addr] = data; };
+  bus.map(reader, writer, "0000-1fff", 0x800);
+
+  reader = {&CPU::readCPU, this};
+  writer = {&CPU::writeCPU, this};
+  bus.map(reader, writer, "4000-4017");
+
+  //CPU
+  r.pc  = bus.read(0xfffc, r.mdr) << 0;
+  r.pc |= bus.read(0xfffd, r.mdr) << 8;
+
+  io.interruptPending = false;
+  io.nmiPending = false;
+  io.nmiLine = 0;
+  io.irqLine = 0;
+  io.apuLine = 0;
 
-  memory::fill(&io, sizeof(IO));
   io.rdyLine = 1;
+  io.rdyAddrValid = false;
+  io.rdyAddrValue = 0x0000;
+
+  io.oamdmaPending = false;
+  io.oamdmaPage = 0x00;
 }
 
 }
diff --git a/higan/fc/cpu/cpu.hpp b/higan/fc/cpu/cpu.hpp
index a530fa7..74020ab 100644
--- a/higan/fc/cpu/cpu.hpp
+++ b/higan/fc/cpu/cpu.hpp
@@ -1,27 +1,25 @@
-struct CPU : Processor::R6502, Thread {
+struct CPU : Processor::MOS6502, Thread {
+  CPU();
+
   static auto Enter() -> void;
   auto main() -> void;
-  auto step(uint clocks) -> void;
-
+  auto load(Markup::Node) -> bool;
   auto power() -> void;
   auto reset() -> void;
 
   //memory.cpp
-  auto readRAM(uint11 addr) -> uint8;
-  auto writeRAM(uint11 addr, uint8 data) -> void;
-
-  auto readIO(uint16 addr) -> uint8;
-  auto writeIO(uint16 addr, uint8 data) -> void;
+  auto read(uint16 addr) -> uint8 override;
+  auto write(uint16 addr, uint8 data) -> void override;
+  auto readDisassembler(uint16 addr) -> uint8 override;
 
-  auto readDebugger(uint16 addr) -> uint8 override;
-
-  auto serialize(serializer&) -> void;
+  //mmio.cpp
+  auto readCPU(uint16 addr, uint8 data) -> uint8;
+  auto writeCPU(uint16 addr, uint8 data) -> void;
 
   //timing.cpp
-  auto read(uint16 addr) -> uint8 override;
-  auto write(uint16 addr, uint8 data) -> void override;
-  auto lastCycle() -> void override;
-  auto nmi(uint16& vector) -> void override;
+  auto step(uint clocks) -> void;
+  auto lastCycle() -> void;
+  auto nmi(uint16 &vector) -> void;
 
   auto oamdma() -> void;
 
@@ -32,11 +30,16 @@ struct CPU : Processor::R6502, Thread {
   auto rdyLine(bool) -> void;
   auto rdyAddr(bool valid, uint16 value = 0) -> void;
 
-//protected:
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  uint8 ram[2 * 1024];
+  vector<Thread*> coprocessors;
   vector<Thread*> peripherals;
 
-  uint8 ram[0x0800];
+  bool side; // VS. System; 0: main, 1: sub
 
+//privileged:
   struct IO {
     bool interruptPending;
     bool nmiPending;
diff --git a/higan/fc/cpu/io.cpp b/higan/fc/cpu/io.cpp
new file mode 100644
index 0000000..16c8625
--- /dev/null
+++ b/higan/fc/cpu/io.cpp
@@ -0,0 +1,50 @@
+auto CPU::readCPU(uint16 addr, uint8 data) -> uint8 {
+  switch(addr) {
+
+  case 0x4016: {
+    if(system.vs()) return vssystem.read(side, addr, data);
+    uint8 data1 = Famicom::peripherals.controllerPort1->data();
+    uint8 data2 = Famicom::peripherals.controllerPort2->mic() << 2;
+    uint8 data3 = Famicom::peripherals.expansionPort->data1() << 1;
+    data1 = data1.bit(2) << 4 | data1.bit(1) << 3 | data1.bit(0) << 0;
+    return (mdr() & 0xe0) | data1 | data2 | data3;
+  }
+
+  case 0x4017: {
+    if(system.vs()) return vssystem.read(side, addr, data);
+    uint8 data2 = Famicom::peripherals.controllerPort2->data();
+    uint8 data3 = Famicom::peripherals.expansionPort->data2();
+    data2 = data2.bit(2) << 4 | data2.bit(1) << 3 | data2.bit(0) << 0;
+    return (mdr() & 0xe0)         | data2 | data3;
+  }
+
+  }
+
+  if(system.vs() && addr >= 0x4018 && addr <= 0x5fff) return vssystem.read(side, addr, data);
+
+  return apu.readIO(addr);
+}
+
+auto CPU::writeCPU(uint16 addr, uint8 data) -> void {
+  switch(addr) {
+
+  case 0x4014: {
+    io.oamdmaPage = data;
+    io.oamdmaPending = true;
+    return;
+  }
+
+  case 0x4016: {
+    if(system.vs()) return vssystem.write(side, addr, data);
+    Famicom::peripherals.controllerPort1->latch(data.bit(0));
+    Famicom::peripherals.controllerPort2->latch(data.bit(0));
+    Famicom::peripherals.expansionPort->write(data.bits(0,2));
+    return;
+  }
+
+  }
+
+  if(system.vs() && addr >= 0x4017 && addr <= 0x5fff) vssystem.write(side, addr, data);
+
+  return apu.writeIO(addr, data);
+}
diff --git a/higan/fc/cpu/memory.cpp b/higan/fc/cpu/memory.cpp
index d174602..039f72a 100644
--- a/higan/fc/cpu/memory.cpp
+++ b/higan/fc/cpu/memory.cpp
@@ -1,49 +1,25 @@
-auto CPU::readRAM(uint11 addr) -> uint8 {
-  return ram[addr];
-}
-
-auto CPU::writeRAM(uint11 addr, uint8 data) -> void {
-  ram[addr] = data;
-}
-
-auto CPU::readIO(uint16 addr) -> uint8 {
-  switch(addr) {
-
-  case 0x4016: {
-    auto data = Famicom::peripherals.controllerPort1->data();
-    return (mdr() & 0xc0) | data.bit(2) << 4 | data.bit(1) << 3 | data.bit(0) << 0;
-  }
-
-  case 0x4017: {
-    auto data = Famicom::peripherals.controllerPort2->data();
-    return (mdr() & 0xc0) | data.bit(2) << 4 | data.bit(1) << 3 | data.bit(0) << 0;
+auto CPU::read(uint16 addr) -> uint8 {
+  if(io.oamdmaPending) {
+    io.oamdmaPending = false;
+    read(addr);
+    oamdma();
   }
 
+  while(io.rdyLine == 0) {
+    r.mdr = bus.read(io.rdyAddrValid ? io.rdyAddrValue : addr, r.mdr);
+    step(system.region() == System::Region::NTSC ? 12 : system.region() == System::Region::PAL ? 16 : 15);
   }
 
-  return apu.readIO(addr);
+  r.mdr = bus.read(addr, r.mdr);
+  step(system.region() == System::Region::NTSC ? 12 : system.region() == System::Region::PAL ? 16 : 15);
+  return r.mdr;
 }
 
-auto CPU::writeIO(uint16 addr, uint8 data) -> void {
-  switch(addr) {
-
-  case 0x4014: {
-    io.oamdmaPage = data;
-    io.oamdmaPending = true;
-    return;
-  }
-
-  case 0x4016: {
-    Famicom::peripherals.controllerPort1->latch(data.bit(0));
-    Famicom::peripherals.controllerPort2->latch(data.bit(0));
-    return;
-  }
-
-  }
-
-  return apu.writeIO(addr, data);
+auto CPU::write(uint16 addr, uint8 data) -> void {
+  bus.write(addr, r.mdr = data);
+  step(system.region() == System::Region::NTSC ? 12 : system.region() == System::Region::PAL ? 16 : 15);
 }
 
-auto CPU::readDebugger(uint16 addr) -> uint8 {
-  return bus.read(addr);
+auto CPU::readDisassembler(uint16 addr) -> uint8 {
+  return bus.read(addr, r.mdr);
 }
diff --git a/higan/fc/cpu/serialization.cpp b/higan/fc/cpu/serialization.cpp
index fbd9e64..ef9ddb8 100644
--- a/higan/fc/cpu/serialization.cpp
+++ b/higan/fc/cpu/serialization.cpp
@@ -1,5 +1,5 @@
 auto CPU::serialize(serializer& s) -> void {
-  R6502::serialize(s);
+  MOS6502::serialize(s);
   Thread::serialize(s);
 
   s.array(ram);
diff --git a/higan/fc/cpu/timing.cpp b/higan/fc/cpu/timing.cpp
index 14a864f..93f35e8 100644
--- a/higan/fc/cpu/timing.cpp
+++ b/higan/fc/cpu/timing.cpp
@@ -1,30 +1,18 @@
-auto CPU::read(uint16 addr) -> uint8 {
-  if(io.oamdmaPending) {
-    io.oamdmaPending = false;
-    read(addr);
-    oamdma();
-  }
-
-  while(io.rdyLine == 0) {
-    regs.mdr = bus.read(io.rdyAddrValid ? io.rdyAddrValue : addr);
-    step(12);
-  }
-
-  regs.mdr = bus.read(addr);
-  step(12);
-  return regs.mdr;
-}
+auto CPU::step(uint clocks) -> void {
+  Thread::step(clocks);
+  for(auto peripheral : peripherals) synchronize(*peripheral);
 
-auto CPU::write(uint16 addr, uint8 data) -> void {
-  bus.write(addr, regs.mdr = data);
-  step(12);
+  synchronize(apu);
+  synchronize(ppu);
+  synchronize(cartridge);
+  for(auto coprocessor : coprocessors) synchronize(*coprocessor);
 }
 
 auto CPU::lastCycle() -> void {
-  io.interruptPending = ((io.irqLine | io.apuLine) & ~regs.p.i) | io.nmiPending;
+  io.interruptPending = ((io.irqLine | io.apuLine) & ~r.p.i) | io.nmiPending;
 }
 
-auto CPU::nmi(uint16& vector) -> void {
+auto CPU::nmi(uint16 &vector) -> void {
   if(io.nmiPending) {
     io.nmiPending = false;
     vector = 0xfffa;
@@ -32,8 +20,8 @@ auto CPU::nmi(uint16& vector) -> void {
 }
 
 auto CPU::oamdma() -> void {
-  for(uint n : range(256)) {
-    uint8 data = read(io.oamdmaPage << 8 | n);
+  for(uint n = 0; n < 256; n++) {
+    uint8 data = read((io.oamdmaPage << 8) + n);
     write(0x2004, data);
   }
 }
diff --git a/higan/fc/expansion/beam-gun/beam-gun.cpp b/higan/fc/expansion/beam-gun/beam-gun.cpp
new file mode 100644
index 0000000..65b20fe
--- /dev/null
+++ b/higan/fc/expansion/beam-gun/beam-gun.cpp
@@ -0,0 +1,131 @@
+BeamGun::BeamGun() {
+  create(Expansion::Enter, system.colorburst() * 6.0);
+  sprite = Emulator::video.createSprite(16, 16);
+  sprite->setPixels(Resource::Sprite::CrosshairGreenSmall);
+
+  latched = 0;
+  counter = 0;
+
+  //center cursor onscreen
+  x = 256 / 2;
+  y = 240 / 2;
+
+  light       = false;
+  trigger     = false;
+  lighttime   = 0;
+  triggertime = 0;
+  offscreen   = false;
+
+  triggerlock = false;
+
+  prev = 0;
+}
+
+BeamGun::~BeamGun() {
+  Emulator::video.removeSprite(sprite);
+}
+
+auto BeamGun::main() -> void {
+  uint next = ppu.vcounter() * 341 + ppu.hcounter();
+
+  if(lighttime > 0) {
+    lighttime -= 1;
+  }
+
+  if(!offscreen) {
+    uint target = y * 341 + x + 8;
+    if(next >= target && prev < target) {
+      //CRT raster detected
+      //light remains in the gun for 10-25 scanlines
+      if(readLight()) lighttime = 341 * 16;
+    }
+  }
+
+  if(next < prev) {
+    if(triggertime > 0) triggertime -= 1;
+    //Vcounter wrapped back to zero; update cursor coordinates for start of new frame
+    int nx = interface->inputPoll(ID::Port::Expansion, ID::Device::BeamGun, X);
+    int ny = interface->inputPoll(ID::Port::Expansion, ID::Device::BeamGun, Y);
+    nx += x;
+    ny += y;
+    x = max(-16, min(256 + 16, nx));
+    y = max(-16, min(240 + 16, ny));
+    offscreen = (x < 0 || y < 0 || x >= 256 || y >= 240);
+    sprite->setPosition(x - 8, y - 8);
+    sprite->setVisible(true);
+  }
+
+  prev = next;
+  step(3);
+  synchronize(cpu);
+}
+
+auto BeamGun::data1() -> bool {
+  return 0;
+}
+
+auto BeamGun::data2() -> uint5 {
+  if(!system.vs()) {
+    bool newtrigger = interface->inputPoll(ID::Port::Expansion, ID::Device::BeamGun, Trigger);
+    if(newtrigger && !triggerlock) {
+      triggertime = 3;
+      triggerlock = true;
+    } else if(!newtrigger) {
+      triggerlock = false;
+    }
+    light = lighttime > 0;
+    trigger = triggertime > 0;
+
+    return (trigger << 4) | ((!light) << 3);
+  } else {
+    if(counter >= 8) return 1;
+    if(latched == 1) return 0;
+
+    switch(counter++) {
+    case 0: return 0;
+    case 1: return 0;
+    case 2: return 0;
+    case 3: return 0;
+    case 4: return 1; // connected
+    case 5: return 0;
+    case 6: return light;
+    case 7: return trigger;
+    }
+  }
+}
+
+auto BeamGun::readLight() -> bool {
+  if(offscreen) return false;
+  uint32 paletteIndex = ppu.output[y * 256 + x];
+  uint color;
+  switch(ppu.version) {
+  default:
+    return ((paletteIndex & 0x20) && ((paletteIndex & 0x0f) < 0x0d));
+  case PPU::Version::RP2C04_0001:
+    color = PPU::RP2C04_0001[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0002:
+    color = PPU::RP2C04_0002[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0003:
+    color = PPU::RP2C04_0003[paletteIndex & 63];
+    break;
+  case PPU::Version::RP2C04_0004:
+    color = PPU::RP2C04_0004[paletteIndex & 63];
+    break;
+  }
+  if((color & 0xf00) > 0x600) return true;
+  if((color & 0x0f0) > 0x060) return true;
+  if((color & 0x00f) > 0x006) return true;
+  return false;
+}
+
+auto BeamGun::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  if(system.vs() && latched == 0) {
+    counter = 0;
+    trigger = interface->inputPoll(ID::Port::Expansion, ID::Device::BeamGun, Trigger);
+    light = lighttime > 0;
+  }
+}
diff --git a/higan/fc/expansion/beam-gun/beam-gun.hpp b/higan/fc/expansion/beam-gun/beam-gun.hpp
new file mode 100644
index 0000000..bc7816c
--- /dev/null
+++ b/higan/fc/expansion/beam-gun/beam-gun.hpp
@@ -0,0 +1,33 @@
+struct BeamGun : Expansion {
+  shared_pointer<Emulator::Sprite> sprite;
+
+  enum : uint {
+    X, Y, Trigger,
+  };
+
+  BeamGun();
+  ~BeamGun();
+
+  auto main() -> void;
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto readLight() -> bool;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter; // VS. System
+
+  int x;
+  int y;
+
+  bool light;
+  bool trigger;
+  uint lighttime;
+  uint triggertime;
+  bool offscreen;
+
+  bool triggerlock;
+
+  uint prev;
+};
diff --git a/higan/fc/expansion/expansion.cpp b/higan/fc/expansion/expansion.cpp
new file mode 100644
index 0000000..c4039c8
--- /dev/null
+++ b/higan/fc/expansion/expansion.cpp
@@ -0,0 +1,32 @@
+#include <fc/fc.hpp>
+
+namespace Famicom {
+
+#include "gamepad/gamepad.cpp"
+#include "joypair/joypair.cpp"
+#include "four-players/four-players.cpp"
+#include "beam-gun/beam-gun.cpp"
+#include "family-keyboard/family-keyboard.cpp"
+#include "family-trainer/family-trainer.cpp"
+#include "vaus/vaus.cpp"
+#include "sfc-gamepad/sfc-gamepad.cpp"
+#include "mouse/mouse.cpp"
+
+Expansion::Expansion() {
+  if(!handle()) create(Expansion::Enter, 1);
+}
+
+Expansion::~Expansion() {
+  scheduler.remove(*this);
+}
+
+auto Expansion::Enter() -> void {
+  while(true) scheduler.synchronize(), peripherals.expansionPort->main();
+}
+
+auto Expansion::main() -> void {
+  step(1);
+  synchronize(cpu);
+}
+
+}
diff --git a/higan/fc/expansion/expansion.hpp b/higan/fc/expansion/expansion.hpp
new file mode 100644
index 0000000..20d846a
--- /dev/null
+++ b/higan/fc/expansion/expansion.hpp
@@ -0,0 +1,43 @@
+// Famicom expansion port pinout:
+//              console                             device
+// /--------------------------------\ /--------------------------------\
+// \(01)(02)(03)(04)(05)(06)(07)(08)/ \(08)(07)(06)(05)(04)(03)(02)(01)/
+//  \ (09)(10)(11)(12)(13)(14)(15) /   \ (15)(14)(13)(12)(11)(10)(09) /
+//   \----------------------------/     \----------------------------/
+// pin  name     register
+// 01:  gnd
+// 02:  sound
+// 03:  irq
+// 04:  data2.4  $4017.d4 read
+// 05:  data2.3  $4017.d3 read
+// 06:  data2.2  $4017.d2 read
+// 07:  data2.1  $4017.d1 read
+// 08:  data2.0  $4017.d0 read
+// 09:  clock 2  $4017 read
+// 10:  out 2    $4016.d2 write
+// 11:  out 1    $4016.d1 write
+// 12:  latch    $4016.d0 write
+// 13:  data1.1  $4016.d1 read
+// 14:  clock 1  $4016 read
+// 15:  +5v
+
+struct Expansion : Thread {
+  Expansion();
+  virtual ~Expansion();
+  static auto Enter() -> void;
+
+  virtual auto main() -> void;
+  virtual auto data1() -> bool { return 0; }
+  virtual auto data2() -> uint5 { return 0; }
+  virtual auto write(uint3 data) -> void {}
+};
+
+#include "gamepad/gamepad.hpp"
+#include "joypair/joypair.hpp"
+#include "four-players/four-players.hpp"
+#include "beam-gun/beam-gun.hpp"
+#include "family-keyboard/family-keyboard.hpp"
+#include "family-trainer/family-trainer.hpp"
+#include "vaus/vaus.hpp"
+#include "sfc-gamepad/sfc-gamepad.hpp"
+#include "mouse/mouse.hpp"
diff --git a/higan/fc/expansion/family-keyboard/family-keyboard.cpp b/higan/fc/expansion/family-keyboard/family-keyboard.cpp
new file mode 100644
index 0000000..33eae11
--- /dev/null
+++ b/higan/fc/expansion/family-keyboard/family-keyboard.cpp
@@ -0,0 +1,57 @@
+FamilyKeyboard::FamilyKeyboard() {
+  column = 0;
+  row    = 0;
+}
+
+auto FamilyKeyboard::data1() -> bool {
+  //Data Recorder
+  return 0;
+}
+
+auto FamilyKeyboard::data2() -> uint5 {
+  static const uint matrix0[] = {
+    F8,        RETURN,     LeftBracket, RightBracket,
+    F7,        AtSign,     Colon,       Semicolon,
+    F6,        O,          L,           K,
+    F5,        I,          U,           J,
+    F4,        Y,          G,           H,
+    F3,        T,          R,           D,
+    F2,        W,          S,           A,
+    F1,        ESC,        Q,           CTR,
+    CLR_HOME,  Up,         Right,       Left,
+  };
+  static const uint matrix1[] = {
+    Kana,      SHIFTRight, En,          STOP,
+    KanaN,     Solidus,    HyphenMinus, Circumflex,
+    FullStop,  Comma,      P,           Digit0,
+    M,         N,          Digit9,      Digit8,
+    B,         V,          Digit7,      Digit6,
+    F,         C,          Digit5,      Digit4,
+    X,         Z,          E,           Digit3,
+    SHIFTLeft, GRPH,       Digit1,      Digit2,
+    Down,      Space,      DEL,         INS,
+  };
+
+  if(row == 9) return 0x1e;
+  const uint* matrix = column ? matrix1 : matrix0;
+  uint keys[] = {
+    matrix[(row << 2) | 0],
+    matrix[(row << 2) | 1],
+    matrix[(row << 2) | 2],
+    matrix[(row << 2) | 3],
+  };
+  return (
+    !interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyKeyboard, keys[0]) << 1
+  | !interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyKeyboard, keys[1]) << 2
+  | !interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyKeyboard, keys[2]) << 3
+  | !interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyKeyboard, keys[3]) << 4
+  );
+}
+
+auto FamilyKeyboard::write(uint3 data) -> void {
+  if(data.bit(2)) {
+    if(column && !data.bit(1)) row = (row + 1) % 10;
+    column = data.bit(1);
+    if(data.bit(0)) row = 0;
+  }
+}
diff --git a/higan/fc/expansion/family-keyboard/family-keyboard.hpp b/higan/fc/expansion/family-keyboard/family-keyboard.hpp
new file mode 100644
index 0000000..bb9fcb9
--- /dev/null
+++ b/higan/fc/expansion/family-keyboard/family-keyboard.hpp
@@ -0,0 +1,23 @@
+struct FamilyKeyboard : Expansion {
+  enum : uint {
+    F1, F2, F3, F4, F5, F6, F7, F8,
+    Digit1, Digit2, Digit3, Digit4, Digit5, Digit6, Digit7, Digit8, Digit9, Digit0,
+    HyphenMinus, Circumflex, En, STOP,
+    ESC,     Q, W, E, R, T, Y, U, I, O, P, AtSign, LeftBracket, RETURN,
+    CTR,      A, S, D, F, G, H, J, K, L, Semicolon, Colon, RightBracket, Kana,
+    SHIFTLeft, Z, X, C, V, B, N, M, Comma, FullStop, Solidus, KanaN, SHIFTRight,
+    GRPH, Space,
+    CLR_HOME, INS, DEL,
+    Up, Left, Right, Down,
+  };
+
+  FamilyKeyboard();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool column;
+  uint row;
+};
diff --git a/higan/fc/expansion/family-trainer/family-trainer.cpp b/higan/fc/expansion/family-trainer/family-trainer.cpp
new file mode 100644
index 0000000..45306ec
--- /dev/null
+++ b/higan/fc/expansion/family-trainer/family-trainer.cpp
@@ -0,0 +1,46 @@
+FamilyTrainer::FamilyTrainer() {
+  latched = 0;
+  counter = 0;
+}
+
+auto FamilyTrainer::data1() -> bool {
+  return 0;
+}
+
+auto FamilyTrainer::data2() -> uint5 {
+  if(counter >= 8) return 0x18;
+  if(latched == 1) return (interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer, 1) << 1) | (interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer, 3) << 2);
+
+  switch(counter++) {
+  case 0: return (b2  << 3) | (b4  << 4);
+  case 1: return (b1  << 3) | (b3  << 4);
+  case 2: return (b5  << 3) | (b12 << 4);
+  case 3: return (b9  << 3) | (b8  << 4);
+  case 4: return (b6  << 3) | (1   << 4);
+  case 5: return (b10 << 3) | (1   << 4);
+  case 6: return (b11 << 3) | (1   << 4);
+  case 7: return (b7  << 3) | (1   << 4);
+  }
+  unreachable;
+}
+
+auto FamilyTrainer::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter = 0;
+
+  if(latched == 0) {
+    b1  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  0);
+    b2  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  1);
+    b3  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  2);
+    b4  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  3);
+    b5  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  4);
+    b6  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  5);
+    b7  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  6);
+    b8  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  7);
+    b9  = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  8);
+    b10 = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer,  9);
+    b11 = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer, 10);
+    b12 = interface->inputPoll(ID::Port::Expansion, ID::Device::FamilyTrainer, 11);
+  }
+}
diff --git a/higan/fc/expansion/family-trainer/family-trainer.hpp b/higan/fc/expansion/family-trainer/family-trainer.hpp
new file mode 100644
index 0000000..6d89389
--- /dev/null
+++ b/higan/fc/expansion/family-trainer/family-trainer.hpp
@@ -0,0 +1,15 @@
+struct FamilyTrainer : Expansion {
+  FamilyTrainer();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean b1, b2,  b3,  b4;
+  boolean b5, b6,  b7,  b8;
+  boolean b9, b10, b11, b12;
+};
diff --git a/higan/fc/expansion/four-players/four-players.cpp b/higan/fc/expansion/four-players/four-players.cpp
new file mode 100644
index 0000000..a62b70e
--- /dev/null
+++ b/higan/fc/expansion/four-players/four-players.cpp
@@ -0,0 +1,98 @@
+FourPlayers::FourPlayers() {
+  latched = 0;
+  counter1 = 0;
+  counter2 = 0;
+}
+
+auto FourPlayers::data1() -> bool {
+  if(counter1 >= 24) return 1;
+  if(latched) return interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, 0 + A);
+
+  auto& A = gamepads[0];
+  auto& B = gamepads[2];
+
+  switch(counter1++) {
+  case  0: return A.a;
+  case  1: return A.b;
+  case  2: return A.select;
+  case  3: return A.start;
+  case  4: return A.up & !A.down;
+  case  5: return A.down & !A.up;
+  case  6: return A.left & !A.right;
+  case  7: return A.right & !A.left;
+  case  8: return B.a;
+  case  9: return B.b;
+  case 10: return B.select;
+  case 11: return B.start;
+  case 12: return B.up & !B.down;
+  case 13: return B.down & !B.up;
+  case 14: return B.left & !B.right;
+  case 15: return B.right & !B.left;
+  case 16: return 0;
+  case 17: return 0;
+  case 18: return 1;
+  case 19: return 0;
+  case 20: return 0;
+  case 21: return 0;
+  case 22: return 0;
+  case 23: return 0;
+  }
+  unreachable;
+}
+
+auto FourPlayers::data2() -> uint5 {
+  if(counter2 >= 24) return 2;
+  if(latched) return interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, 8 + A) << 1;
+
+  auto& A = gamepads[1];
+  auto& B = gamepads[3];
+
+  switch(counter2++) {
+  case  0: return A.a << 1;
+  case  1: return A.b << 1;
+  case  2: return A.select << 1;
+  case  3: return A.start << 1;
+  case  4: return (A.up & !A.down) << 1;
+  case  5: return (A.down & !A.up) << 1;
+  case  6: return (A.left & !A.right) << 1;
+  case  7: return (A.right & !A.left) << 1;
+  case  8: return B.a << 1;
+  case  9: return B.b << 1;
+  case 10: return B.select << 1;
+  case 11: return B.start << 1;
+  case 12: return (B.up & !B.down) << 1;
+  case 13: return (B.down & !B.up) << 1;
+  case 14: return (B.left & !B.right) << 1;
+  case 15: return (B.right & !B.left) << 1;
+  case 16: return 0;
+  case 17: return 0;
+  case 18: return 0;
+  case 19: return 2;
+  case 20: return 0;
+  case 21: return 0;
+  case 22: return 0;
+  case 23: return 0;
+  }
+  unreachable;
+}
+
+auto FourPlayers::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter1 = 0;
+  counter2 = 0;
+
+  if(latched == 0) {
+    for(uint id : range(4)) {
+      auto& gamepad = gamepads[id];
+      gamepad.a      = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + A);
+      gamepad.b      = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + B);
+      gamepad.select = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Select);
+      gamepad.start  = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Start);
+      gamepad.up     = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Up);
+      gamepad.down   = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Down);
+      gamepad.left   = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Left);
+      gamepad.right  = interface->inputPoll(ID::Port::Expansion, ID::Device::FourPlayers, id * 8 + Right);
+    }
+  }
+}
diff --git a/higan/fc/expansion/four-players/four-players.hpp b/higan/fc/expansion/four-players/four-players.hpp
new file mode 100644
index 0000000..3c4e2a3
--- /dev/null
+++ b/higan/fc/expansion/four-players/four-players.hpp
@@ -0,0 +1,21 @@
+struct FourPlayers : Expansion {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Select, Start,
+  };
+
+  FourPlayers();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter1;
+  uint counter2;
+
+  struct Gamepad {
+    boolean a, b, select, start;
+    boolean up, down, left, right;
+  } gamepads[4];
+};
diff --git a/higan/fc/expansion/gamepad/gamepad.cpp b/higan/fc/expansion/gamepad/gamepad.cpp
new file mode 100644
index 0000000..b61adfb
--- /dev/null
+++ b/higan/fc/expansion/gamepad/gamepad.cpp
@@ -0,0 +1,43 @@
+GamepadE::GamepadE() {
+  latched = 0;
+  counter = 0;
+}
+
+auto GamepadE::data1() -> bool {
+  if(counter >= 8) return 1;
+  if(latched == 1) return interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, A);
+
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
+  switch(counter++) {
+  case 0: return a;
+  case 1: return b;
+  case 2: return select;
+  case 3: return start;
+  case 4: return up & !down;
+  case 5: return down & !up;
+  case 6: return left & !right;
+  case 7: return right & !left;
+  }
+  unreachable;
+}
+
+auto GamepadE::data2() -> uint5 {
+  return 0;
+}
+
+auto GamepadE::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter = 0;
+
+  if(latched == 0) {
+    a      = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, A);
+    b      = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, B);
+    select = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Select);
+    start  = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Start);
+    up     = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Up);
+    down   = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Down);
+    left   = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Left);
+    right  = interface->inputPoll(ID::Port::Expansion, ID::Device::GamepadE, Right);
+  }
+}
diff --git a/higan/fc/expansion/gamepad/gamepad.hpp b/higan/fc/expansion/gamepad/gamepad.hpp
new file mode 100644
index 0000000..fc7a07e
--- /dev/null
+++ b/higan/fc/expansion/gamepad/gamepad.hpp
@@ -0,0 +1,18 @@
+struct GamepadE : Expansion {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Select, Start,
+  };
+
+  GamepadE();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean a, b, select, start;
+  boolean up, down, left, right;
+};
diff --git a/higan/fc/expansion/joypair/joypair.cpp b/higan/fc/expansion/joypair/joypair.cpp
new file mode 100644
index 0000000..7c0d323
--- /dev/null
+++ b/higan/fc/expansion/joypair/joypair.cpp
@@ -0,0 +1,64 @@
+JoyPair::JoyPair() {
+  latched = 0;
+  counter1 = 0;
+  counter2 = 0;
+}
+
+auto JoyPair::data1() -> bool {
+  if(counter1 >= 8) return 1;
+  if(latched) return interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, 0 + A);
+
+  auto& A = gamepads[0];
+
+  switch(counter1++) {
+  case 0: return A.a;
+  case 1: return A.b;
+  case 2: return A.select;
+  case 3: return A.start;
+  case 4: return A.up & !A.down;
+  case 5: return A.down & !A.up;
+  case 6: return A.left & !A.right;
+  case 7: return A.right & !A.left;
+  }
+  unreachable;
+}
+
+auto JoyPair::data2() -> uint5 {
+  if(counter2 >= 8) return 2;
+  if(latched) return interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, 8 + A) << 1;
+
+  auto& B = gamepads[1];
+
+  switch(counter2++) {
+  case 0: return B.a << 1;
+  case 1: return B.b << 1;
+  case 2: return B.select << 1;
+  case 3: return B.start << 1;
+  case 4: return (B.up & !B.down) << 1;
+  case 5: return (B.down & !B.up) << 1;
+  case 6: return (B.left & !B.right) << 1;
+  case 7: return (B.right & !B.left) << 1;
+  }
+  unreachable;
+}
+
+auto JoyPair::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter1 = 0;
+  counter2 = 0;
+
+  if(latched == 0) {
+    for(uint id : range(2)) {
+      auto& gamepad = gamepads[id];
+      gamepad.a      = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + A);
+      gamepad.b      = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + B);
+      gamepad.select = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Select);
+      gamepad.start  = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Start);
+      gamepad.up     = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Up);
+      gamepad.down   = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Down);
+      gamepad.left   = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Left);
+      gamepad.right  = interface->inputPoll(ID::Port::Expansion, ID::Device::JoyPair, id * 8 + Right);
+    }
+  }
+}
diff --git a/higan/fc/expansion/joypair/joypair.hpp b/higan/fc/expansion/joypair/joypair.hpp
new file mode 100644
index 0000000..3e67c31
--- /dev/null
+++ b/higan/fc/expansion/joypair/joypair.hpp
@@ -0,0 +1,21 @@
+struct JoyPair : Expansion {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Select, Start,
+  };
+
+  JoyPair();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter1;
+  uint counter2;
+
+  struct Gamepad {
+    boolean a, b, select, start;
+    boolean up, down, left, right;
+  } gamepads[2];
+};
diff --git a/higan/fc/expansion/mouse/mouse.cpp b/higan/fc/expansion/mouse/mouse.cpp
new file mode 100644
index 0000000..c522c4e
--- /dev/null
+++ b/higan/fc/expansion/mouse/mouse.cpp
@@ -0,0 +1,90 @@
+MouseE::MouseE() {
+  latched = 0;
+  counter = 0;
+
+  speed = 0;
+  x = 0;
+  y = 0;
+  dx = 0;
+  dy = 0;
+  l = 0;
+  r = 0;
+}
+
+auto MouseE::data1() -> bool {
+  if(latched == 1) {
+    speed = (speed + 1) % 3;
+    return 0;
+  }
+
+  if(counter >= 32) return 1;
+
+  switch(counter++) { default:
+  case  0: return 0;
+  case  1: return 0;
+  case  2: return 0;
+  case  3: return 0;
+  case  4: return 0;
+  case  5: return 0;
+  case  6: return 0;
+  case  7: return 0;
+
+  case  8: return r;
+  case  9: return l;
+  case 10: return (speed >> 1) & 1;
+  case 11: return (speed >> 0) & 1;
+
+  case 12: return 0;  //signature
+  case 13: return 0;  // ||
+  case 14: return 0;  // ||
+  case 15: return 1;  // ||
+
+  case 16: return dy;
+  case 17: return (y >> 6) & 1;
+  case 18: return (y >> 5) & 1;
+  case 19: return (y >> 4) & 1;
+  case 20: return (y >> 3) & 1;
+  case 21: return (y >> 2) & 1;
+  case 22: return (y >> 1) & 1;
+  case 23: return (y >> 0) & 1;
+
+  case 24: return dx;
+  case 25: return (x >> 6) & 1;
+  case 26: return (x >> 5) & 1;
+  case 27: return (x >> 4) & 1;
+  case 28: return (x >> 3) & 1;
+  case 29: return (x >> 2) & 1;
+  case 30: return (x >> 1) & 1;
+  case 31: return (x >> 0) & 1;
+  }
+}
+
+auto MouseE::data2() -> uint5 {
+  return 0;
+}
+
+auto MouseE::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter = 0;
+
+  x = interface->inputPoll(ID::Port::Expansion, ID::Device::MouseE, X);  //-n = left, 0 = center, +n = right
+  y = interface->inputPoll(ID::Port::Expansion, ID::Device::MouseE, Y);  //-n = up,   0 = center, +n = down
+  l = interface->inputPoll(ID::Port::Expansion, ID::Device::MouseE, Left);
+  r = interface->inputPoll(ID::Port::Expansion, ID::Device::MouseE, Right);
+
+  dx = x < 0;  //0 = right, 1 = left
+  dy = y < 0;  //0 = down,  1 = up
+
+  if(x < 0) x = -x;  //abs(position_x)
+  if(y < 0) y = -y;  //abs(position_y)
+
+  double multiplier = 1.0;
+  if(speed == 1) multiplier = 1.5;
+  if(speed == 2) multiplier = 2.0;
+  x = (double)x * multiplier;
+  y = (double)y * multiplier;
+
+  x = min(127, x);
+  y = min(127, y);
+}
diff --git a/higan/fc/expansion/mouse/mouse.hpp b/higan/fc/expansion/mouse/mouse.hpp
new file mode 100644
index 0000000..7831f0f
--- /dev/null
+++ b/higan/fc/expansion/mouse/mouse.hpp
@@ -0,0 +1,23 @@
+struct MouseE : Expansion {
+  enum : uint {
+    X, Y, Left, Right,
+  };
+
+  MouseE();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  uint speed;  //0 = slow, 1 = normal, 2 = fast
+  int x;       //x-coordinate
+  int y;       //y-coordinate
+  bool dx;     //x-direction
+  bool dy;     //y-direction
+  bool l;      //left button
+  bool r;      //right button
+};
diff --git a/higan/fc/expansion/sfc-gamepad/sfc-gamepad.cpp b/higan/fc/expansion/sfc-gamepad/sfc-gamepad.cpp
new file mode 100644
index 0000000..042dc37
--- /dev/null
+++ b/higan/fc/expansion/sfc-gamepad/sfc-gamepad.cpp
@@ -0,0 +1,52 @@
+SFCGamepad::SFCGamepad() {
+  latched = 0;
+  counter = 0;
+}
+
+auto SFCGamepad::data1() -> bool {
+  if(counter >= 16) return 1;
+  if(latched == 1) return interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, 0);
+
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
+  switch(counter++) {
+  case  0: return b;
+  case  1: return y;
+  case  2: return select;
+  case  3: return start;
+  case  4: return up & !down;
+  case  5: return down & !up;
+  case  6: return left & !right;
+  case  7: return right & !left;
+  case  8: return a;
+  case  9: return x;
+  case 10: return l;
+  case 11: return r;
+  }
+
+  return 0;  //12-15: signature
+}
+
+auto SFCGamepad::data2() -> uint5 {
+  return 0;
+}
+
+auto SFCGamepad::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter = 0;
+
+  if(latched == 0) {
+    b      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, B);
+    y      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Y);
+    select = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Select);
+    start  = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Start);
+    up     = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Up);
+    down   = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Down);
+    left   = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Left);
+    right  = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, Right);
+    a      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, A);
+    x      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, X);
+    l      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, L);
+    r      = interface->inputPoll(ID::Port::Expansion, ID::Device::SFCGamepad, R);
+  }
+}
diff --git a/higan/fc/expansion/sfc-gamepad/sfc-gamepad.hpp b/higan/fc/expansion/sfc-gamepad/sfc-gamepad.hpp
new file mode 100644
index 0000000..1189058
--- /dev/null
+++ b/higan/fc/expansion/sfc-gamepad/sfc-gamepad.hpp
@@ -0,0 +1,19 @@
+struct SFCGamepad : Expansion {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Y, X, L, R, Select, Start,
+  };
+
+  SFCGamepad();
+
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean b, y, select, start;
+  boolean up, down, left, right;
+  boolean a, x, l, r;
+};
diff --git a/higan/fc/expansion/vaus/vaus.cpp b/higan/fc/expansion/vaus/vaus.cpp
new file mode 100644
index 0000000..d8b312b
--- /dev/null
+++ b/higan/fc/expansion/vaus/vaus.cpp
@@ -0,0 +1,44 @@
+VausE::VausE() {
+  create(Expansion::Enter, system.colorburst() * 6.0);
+  latched = 0;
+  counter = 0;
+
+  x = 0;
+  control = 0;
+
+  prev = 0;
+}
+
+auto VausE::main() -> void {
+  uint next = ppu.vcounter() * 341 + ppu.hcounter();
+
+  if(next < prev) {
+    //Vcounter wrapped back to zero; update control knob for start of new frame
+    int nx = interface->inputPoll(ID::Port::Expansion, ID::Device::VausE, Control) * 160 / 256;
+    const uint8_t trimpot = 0x0d;
+    x = max(trimpot, min(trimpot + 0xa0, x - nx));
+  }
+
+  prev = next;
+  step(3);
+  synchronize(cpu);
+}
+
+auto VausE::data1() -> bool {
+  return interface->inputPoll(ID::Port::Expansion, ID::Device::VausE, Fire);
+}
+
+auto VausE::data2() -> uint5 {
+  if(latched == 1) return control.bit(7) << 1;
+  if(counter >= 8) return 0;
+
+  return control.bit(7 - counter++) << 1;
+}
+
+auto VausE::write(uint3 data) -> void {
+  if(latched == data.bit(0)) return;
+  latched = data.bit(0);
+  counter = 0;
+
+  control = x & 0xff;
+}
diff --git a/higan/fc/expansion/vaus/vaus.hpp b/higan/fc/expansion/vaus/vaus.hpp
new file mode 100644
index 0000000..a2667af
--- /dev/null
+++ b/higan/fc/expansion/vaus/vaus.hpp
@@ -0,0 +1,21 @@
+struct VausE : Expansion {
+  enum : uint {
+    Control, Fire,
+  };
+
+  VausE();
+
+  auto main() -> void;
+  auto data1() -> bool;
+  auto data2() -> uint5;
+  auto write(uint3 data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  int x;
+  uint8 control;
+
+  uint prev;
+};
diff --git a/higan/fc/fc.hpp b/higan/fc/fc.hpp
index 8d241c3..4cc77e0 100644
--- a/higan/fc/fc.hpp
+++ b/higan/fc/fc.hpp
@@ -8,7 +8,8 @@
 #include <emulator/scheduler.hpp>
 #include <emulator/cheat.hpp>
 
-#include <processor/r6502/r6502.hpp>
+#include <processor/mos6502/mos6502.hpp>
+#include <processor/z80/z80.hpp>
 
 namespace Famicom {
   using File = Emulator::File;
@@ -17,6 +18,13 @@ namespace Famicom {
   extern Scheduler scheduler;
   extern Cheat cheat;
 
+  enum class Model : uint {
+    Famicom,
+    VSSystem,
+    PlayChoice10,
+    FamicomBox,
+  };
+
   struct Thread : Emulator::Thread {
     auto create(auto (*entrypoint)() -> void, double frequency) -> void {
       Emulator::Thread::create(entrypoint, frequency);
@@ -29,12 +37,21 @@ namespace Famicom {
   };
 
   #include <fc/controller/controller.hpp>
-  #include <fc/system/system.hpp>
+  #include <fc/expansion/expansion.hpp>
+
   #include <fc/memory/memory.hpp>
-  #include <fc/cartridge/cartridge.hpp>
+  #include <fc/ppu/counter/counter.hpp>
+
   #include <fc/cpu/cpu.hpp>
   #include <fc/apu/apu.hpp>
   #include <fc/ppu/ppu.hpp>
+
+  #include <fc/system/system.hpp>
+  #include <fc/arcade/arcade.hpp>
+  #include <fc/cartridge/cartridge.hpp>
+
+  #include <fc/memory/memory-inline.hpp>
+  #include <fc/ppu/counter/counter-inline.hpp>
 }
 
 #include <fc/interface/interface.hpp>
diff --git a/higan/fc/interface/interface.cpp b/higan/fc/interface/interface.cpp
index 17de2fe..16cc0dd 100644
--- a/higan/fc/interface/interface.cpp
+++ b/higan/fc/interface/interface.cpp
@@ -7,7 +7,9 @@ Settings settings;
 
 Interface::Interface() {
   interface = this;
+  system.init();
 
+  information.preAlpha     = false;
   information.manufacturer = "Nintendo";
   information.name         = "Famicom";
   information.overscan     = true;
@@ -16,14 +18,21 @@ Interface::Interface() {
   information.capability.states = true;
   information.capability.cheats = true;
 
-  media.append({ID::Famicom, "Famicom", "fc"});
+  media.append({ID::Famicom,      "Famicom",       "fc",   Domain::Home});
+  media.append({ID::VSSystem,     "VS. System",    "vs",   Domain::Arcade});
+  media.append({ID::PlayChoice10, "PlayChoice-10", "pc10", Domain::Arcade});
+//media.append({ID::FamicomBox,   "FamicomBox",    "fcb",  Domain::Arcade});
 
-  Port controllerPort1{ID::Port::Controller1, "Controller Port 1"};
-  Port controllerPort2{ID::Port::Controller2, "Controller Port 2"};
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+  Port expansionPort{ID::Port::Expansion, "Expansion Port", PlugAndPlay};
+  Port arcadePanel{ID::Port::Arcade, "Arcade Panel", Hardwired};
 
   { Device device{ID::Device::None, "None"};
     controllerPort1.devices.append(device);
     controllerPort2.devices.append(device);
+    expansionPort.devices.append(device);
+    arcadePanel.devices.append(device);
   }
 
   { Device device{ID::Device::Gamepad, "Gamepad"};
@@ -39,8 +48,266 @@ Interface::Interface() {
     controllerPort2.devices.append(device);
   }
 
+  { Device device{ID::Device::GamepadMic, "Gamepad Mic"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "Mic"   });
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::FourScore, "Four Score"};
+    for(uint p : {1,3}) {
+      device.inputs.append({0, {"Port ", p, " - ", "Up"    }});
+      device.inputs.append({0, {"Port ", p, " - ", "Down"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Left"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Right" }});
+      device.inputs.append({0, {"Port ", p, " - ", "B"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "A"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Select"}});
+      device.inputs.append({0, {"Port ", p, " - ", "Start" }});
+    }
+    controllerPort1.devices.append(device);
+  }
+
+  { Device device{ID::Device::FourScore, "Four Score"};
+    for(uint p : {2,4}) {
+      device.inputs.append({0, {"Port ", p, " - ", "Up"    }});
+      device.inputs.append({0, {"Port ", p, " - ", "Down"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Left"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Right" }});
+      device.inputs.append({0, {"Port ", p, " - ", "B"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "A"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Select"}});
+      device.inputs.append({0, {"Port ", p, " - ", "Start" }});
+    }
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Zapper, "Zapper"};
+    device.inputs.append({1, "X-axis" });
+    device.inputs.append({1, "Y-axis" });
+    device.inputs.append({0, "Trigger"});
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::PowerPad, "Power Pad"};
+    for(uint n : range(12)) {
+      device.inputs.append({0, {"Button ", n + 1}});
+    }
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Vaus, "Arkanoid Vaus"};
+    device.inputs.append({1, "Control Knob"});
+    device.inputs.append({0, "Fire Button" });
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::SNESGamepad, "SNES Gamepad"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "Y"     });
+    device.inputs.append({0, "X"     });
+    device.inputs.append({0, "L"     });
+    device.inputs.append({0, "R"     });
+    device.inputs.append({0, "Select"});
+    device.inputs.append({0, "Start" });
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Mouse, "Mouse"};
+    device.inputs.append({1, "X-axis"});
+    device.inputs.append({1, "Y-axis"});
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::GamepadE, "Gamepad"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "Select"});
+    device.inputs.append({0, "Start" });
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::JoyPair, "JoyPair"};
+    for(uint p : {3,4}) {
+      device.inputs.append({0, {"Port ", p, " - ", "Up"    }});
+      device.inputs.append({0, {"Port ", p, " - ", "Down"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Left"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Right" }});
+      device.inputs.append({0, {"Port ", p, " - ", "B"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "A"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Select"}});
+      device.inputs.append({0, {"Port ", p, " - ", "Start" }});
+    }
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::FourPlayers, "4-Players Adaptor"};
+    for(uint p : {1,2,3,4}) {
+      device.inputs.append({0, {"Port ", p, " - ", "Up"    }});
+      device.inputs.append({0, {"Port ", p, " - ", "Down"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Left"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Right" }});
+      device.inputs.append({0, {"Port ", p, " - ", "B"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "A"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Select"}});
+      device.inputs.append({0, {"Port ", p, " - ", "Start" }});
+    }
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::BeamGun, "Beam Gun"};
+    device.inputs.append({1, "X-axis" });
+    device.inputs.append({1, "Y-axis" });
+    device.inputs.append({0, "Trigger"});
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::FamilyKeyboard, "Family BASIC Keyboard"};
+    device.inputs.append({0, "F1"});
+    device.inputs.append({0, "F2"});
+    device.inputs.append({0, "F3"});
+    device.inputs.append({0, "F4"});
+    device.inputs.append({0, "F5"});
+    device.inputs.append({0, "F6"});
+    device.inputs.append({0, "F7"});
+    device.inputs.append({0, "F8"});
+    device.inputs.append({0, "1 - Exclamation Mark"});
+    device.inputs.append({0, "2 - Quotation Mark"});
+    device.inputs.append({0, "3 - Number Sign"});
+    device.inputs.append({0, "4 - Dollar Sign"});
+    device.inputs.append({0, "5 - Percent Sign"});
+    device.inputs.append({0, "6 - Ampersand"});
+    device.inputs.append({0, "7 - Apostrophe"});
+    device.inputs.append({0, "8 - Left Parenthesis"});
+    device.inputs.append({0, "9 - Right Parenthesis"});
+    device.inputs.append({0, "0"});
+    device.inputs.append({0, "Hyphen-Minus - Equals Sign"});
+    device.inputs.append({0, "Circumflex Accent"});
+    device.inputs.append({0, "En Sign"});
+    device.inputs.append({0, "STOP"});
+    device.inputs.append({0, "ESC"});
+    device.inputs.append({0, "Q"});
+    device.inputs.append({0, "W"});
+    device.inputs.append({0, "E"});
+    device.inputs.append({0, "R"});
+    device.inputs.append({0, "T"});
+    device.inputs.append({0, "Y"});
+    device.inputs.append({0, "U"});
+    device.inputs.append({0, "I"});
+    device.inputs.append({0, "O"});
+    device.inputs.append({0, "P"});
+    device.inputs.append({0, "Commercial At"});
+    device.inputs.append({0, "Left Square Bracket"});
+    device.inputs.append({0, "RETURN"});
+    device.inputs.append({0, "CTR"});
+    device.inputs.append({0, "A"});
+    device.inputs.append({0, "S"});
+    device.inputs.append({0, "D"});
+    device.inputs.append({0, "F"});
+    device.inputs.append({0, "G"});
+    device.inputs.append({0, "H"});
+    device.inputs.append({0, "J"});
+    device.inputs.append({0, "K"});
+    device.inputs.append({0, "L"});
+    device.inputs.append({0, "Semicolon - Plus Sign"});
+    device.inputs.append({0, "Colon - Asterisk"});
+    device.inputs.append({0, "Right Square Bracket"});
+    device.inputs.append({0, "Kana"});
+    device.inputs.append({0, "SHIFT Left"});
+    device.inputs.append({0, "Z"});
+    device.inputs.append({0, "X"});
+    device.inputs.append({0, "C"});
+    device.inputs.append({0, "V"});
+    device.inputs.append({0, "B"});
+    device.inputs.append({0, "N"});
+    device.inputs.append({0, "M"});
+    device.inputs.append({0, "Comma - Less-Than Sign"});
+    device.inputs.append({0, "Full Stop - Greater-Than Sign"});
+    device.inputs.append({0, "Solidus - Question Mark"});
+    device.inputs.append({0, "Kana N - Low Line"});
+    device.inputs.append({0, "SHIFT Right"});
+    device.inputs.append({0, "GRPH"});
+    device.inputs.append({0, "Spacebar"});
+    device.inputs.append({0, "CLR HOME"});
+    device.inputs.append({0, "INS"});
+    device.inputs.append({0, "DEL"});
+    device.inputs.append({0, "Up"});
+    device.inputs.append({0, "Left"});
+    device.inputs.append({0, "Right"});
+    device.inputs.append({0, "Down"});
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::FamilyTrainer, "Family Trainer"};
+    for(uint n : range(12)) {
+      device.inputs.append({0, {"Button ", n + 1}});
+    }
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::VausE, "Arkanoid Vaus"};
+    device.inputs.append({1, "Control Knob"});
+    device.inputs.append({0, "Fire Button" });
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::SFCGamepad, "SFC Gamepad"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "Y"     });
+    device.inputs.append({0, "X"     });
+    device.inputs.append({0, "L"     });
+    device.inputs.append({0, "R"     });
+    device.inputs.append({0, "Select"});
+    device.inputs.append({0, "Start" });
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::MouseE, "Mouse"};
+    device.inputs.append({1, "X-axis"});
+    device.inputs.append({1, "Y-axis"});
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::VSPanel, "VS. Panel"};
+    device.inputs.append({0, "Button 1"      });
+    device.inputs.append({0, "Button 2"      });
+    device.inputs.append({0, "Button 3"      });
+    device.inputs.append({0, "Button 4"      });
+    device.inputs.append({0, "Service Button"});
+    device.inputs.append({0, "Coin 1"        });
+    device.inputs.append({0, "Coin 2"        });
+    arcadePanel.devices.append(device);
+  }
+
   ports.append(move(controllerPort1));
   ports.append(move(controllerPort2));
+  ports.append(move(expansionPort));
+  ports.append(move(arcadePanel));
 }
 
 auto Interface::manifest() -> string {
@@ -52,77 +319,255 @@ auto Interface::title() -> string {
 }
 
 auto Interface::videoSize() -> VideoSize {
-  return {256, 240};
+  return {256 * vssystem.gameCount, 240 + playchoice10.screenConfig * 224};
 }
 
 auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
-  uint w = 256 * (arc ? 8.0 / 7.0 : 1.0);
-  uint h = 240;
-  uint m = min(width / w, height / h);
-  return {w * m, h * m};
+  double w = 256 / playchoice10.screenConfig;
+  if(arc) {
+    double squarePixelRate = system.region() == System::Region::NTSC
+    ? 135.0 / 22.0 * 1'000'000.0
+    : 7'375'000.0;
+    w *= squarePixelRate / (system.colorburst() * 6.0 / (system.region() == System::Region::NTSC ? 4.0 : 5.0));
+  }
+  uint h = 240 / vssystem.gameCount;
+  if(system.pc10() && playchoice10.screenConfig == 2) h = (240 + 224) / 2;
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
 }
 
 auto Interface::videoFrequency() -> double {
-  return 21477272.0 / (262.0 * 1364.0 - 4.0);
+  switch(system.region()) { default:
+  case System::Region::NTSC:  return (system.colorburst() * 6.0) / (262.0 * 1364.0 - 4.0);
+  case System::Region::PAL:   return (system.colorburst() * 6.0) / (312.0 * 1705.0);
+  case System::Region::Dendy: return (system.colorburst() * 6.0) / (312.0 * 1705.0);
+  }
 }
 
 auto Interface::videoColors() -> uint32 {
-  return 1 << 9;
+  return ((1 << 9) << system.vs()) + system.pc10() * (1 << 8);
 }
 
 auto Interface::videoColor(uint32 n) -> uint64 {
-  double saturation = 2.0;
-  double hue = 0.0;
-  double contrast = 1.0;
-  double brightness = 1.0;
-  double gamma = settings.colorEmulation ? 1.8 : 2.2;
-
-  int color = (n & 0x0f), level = color < 0xe ? (n >> 4) & 3 : 1;
-
-  static const double black = 0.518, white = 1.962, attenuation = 0.746;
-  static const double levels[8] = {
-    0.350, 0.518, 0.962, 1.550,
-    1.094, 1.506, 1.962, 1.962,
-  };
+  //YIQ decoder by Bisqwit (http://forums.nesdev.com/viewtopic.php?p=85060)
+  static auto generateNTSCColor = [](uint9 n, double saturation, double hue, double contrast, double brightness, double gamma) -> uint64 {
+    int color = n.bits(0,3), level = color < 0xe ? n.bits(4,5) : 1;
+
+    static const double  lowLevels[4] = {0.350, 0.518, 0.962, 1.550};
+    static const double highLevels[4] = {1.094, 1.506, 1.962, 1.962};
+
+    static const double black = lowLevels[1], white = highLevels[3];
+    static const double attenuation = 0.746;
+
+    double lo_and_hi[2] = {
+      (color == 0x0 ? highLevels : lowLevels)[level],
+      (color <  0xd ? highLevels : lowLevels)[level],
+    };
+
+    double y = 0.0, i = 0.0, q = 0.0;
+    auto wave = [](int phase, int color) -> bool { return (color + phase + 8) % 12 < 6; };
+    for(int phase : range(12)) {
+      double spot = lo_and_hi[wave(phase, color)];
+
+      if(color < 0xe && (
+         ((n.bit(6)) && wave(phase, 12))
+      || ((n.bit(7)) && wave(phase,  4))
+      || ((n.bit(8)) && wave(phase,  8))
+      )) spot *= attenuation;
+
+      double voltage = (spot - black) / (white - black);
+
+      voltage = (voltage - 0.5) * contrast + 0.5;
+      voltage *= brightness / 12.0;
 
-  double lo_and_hi[2] = {
-    levels[level + 4 * (color == 0x0)],
-    levels[level + 4 * (color <  0xd)],
+      y += voltage;
+      i += voltage * std::cos((Math::Pi / 6.0) * (phase + hue));
+      q += voltage * std::sin((Math::Pi / 6.0) * (phase + hue));
+    }
+
+    i *= saturation;
+    q *= saturation;
+
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    //This matrix is from FCC's 1953 NTSC standard.
+    //The Famicom and American NES are older than the SMPTE C standard that followed in 1987.
+    uint64 r = uclamp<16>(65535.0 * gammaAdjust(y +  0.946882 * i +  0.623557 * q));
+    uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.274788 * i + -0.635691 * q));
+    uint64 b = uclamp<16>(65535.0 * gammaAdjust(y + -1.108545 * i +  1.709007 * q));
+
+    return r << 32 | g << 16 | b << 0;
   };
 
-  double y = 0.0, i = 0.0, q = 0.0;
-  auto wave = [](int p, int color) { return (color + p + 8) % 12 < 6; };
-  for(int p : range(12)) {
-    double spot = lo_and_hi[wave(p, color)];
+  static auto generatePALColor = [](uint9 n, double saturation, double hue, double contrast, double brightness, double gamma) -> uint64 {
+    int color = n.bits(0,3), level = color < 0xe ? n.bits(4,5) : 1;
 
-    if(((n & 0x040) && wave(p, 12))
-    || ((n & 0x080) && wave(p,  4))
-    || ((n & 0x100) && wave(p,  8))
-    ) spot *= attenuation;
+    static const double  lowLevels[4] = {0.350, 0.518, 0.962, 1.550};
+    static const double highLevels[4] = {1.094, 1.506, 1.962, 1.962};
 
-    double v = (spot - black) / (white - black);
+    static const double black = lowLevels[1], white = highLevels[3];
+    static const double attenuation = 0.746;
 
-    v = (v - 0.5) * contrast + 0.5;
-    v *= brightness / 12.0;
+    double lo_and_hi[2] = {
+      (color == 0x0 ? highLevels : lowLevels)[level],
+      (color <  0xd ? highLevels : lowLevels)[level],
+    };
 
-    y += v;
-    i += v * cos((Math::Pi / 6.0) * (p + hue));
-    q += v * sin((Math::Pi / 6.0) * (p + hue));
-  }
+    double ys[2] = {0.0, 0.0}, us[2] = {0.0, 0.0}, vs[2] = {0.0, 0.0};
+    //Add 12 to work around C++ modulus implementation
+    auto wave0 = [](int phase, int color) -> bool { return (color + 10 - phase + 12) % 12 < 6; };
+    auto wave1 = [](int phase, int color) -> bool { return (color +  1 + phase +  0) % 12 < 6; };
+    for(int phase : range(12)) {
+      double spot[] = {lo_and_hi[wave0(phase, color)], lo_and_hi[wave1(phase, color)]};
+
+      //swap red and green
+      if(color < 0xe && (
+         ((n.bit(6)) && wave0(phase,  4))
+      || ((n.bit(7)) && wave0(phase, 12))
+      || ((n.bit(8)) && wave0(phase,  8))
+      )) spot[0] *= attenuation;
+
+      if(color < 0xe && (
+         ((n.bit(6)) && wave1(phase,  4))
+      || ((n.bit(7)) && wave1(phase, 12))
+      || ((n.bit(8)) && wave1(phase,  8))
+      )) spot[1] *= attenuation;
+
+      for(uint i : range(2)) {
+        double voltage = (spot[i] - black) / (white - black);
+
+        voltage = (voltage - 0.5) * contrast + 0.5;
+        voltage *= brightness / 12.0;
 
-  i *= saturation;
-  q *= saturation;
+        ys[i] += voltage;
+        us[i] += voltage * std::cos((Math::Pi / 6.0) * (phase + hue));
+        vs[i] += voltage * std::sin((Math::Pi / 6.0) * (phase + hue));
+      }
+    }
+
+    double y = (ys[0] + ys[1]) / 2.0, u = (us[0] + us[1]) / 2.0, v = (vs[0] - vs[1]) / 2.0;
+
+    u *= saturation;
+    v *= saturation;
+
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    uint64 r = uclamp<16>(65535.0 * gammaAdjust(y                 +  1.139837 * v));
+    uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.394652 * u + -0.580599 * v));
+    uint64 b = uclamp<16>(65535.0 * gammaAdjust(y +  2.032110 * u                ));
+
+    return r << 32 | g << 16 | b << 0;
+  };
+
+  static auto generateRGBColor = [](uint9 color, const uint9* palette) -> uint64 {
+    uint3 r = color.bit(6) ? 7 : palette[color.bits(5,0)] >> 6 & 7;
+    uint3 g = color.bit(7) ? 7 : palette[color.bits(5,0)] >> 3 & 7;
+    uint3 b = color.bit(8) ? 7 : palette[color.bits(5,0)] >> 0 & 7;
+
+    uint64 R = image::normalize(r, 3, 16);
+    uint64 G = image::normalize(g, 3, 16);
+    uint64 B = image::normalize(b, 3, 16);
+
+    if(settings.colorEmulation) {
+      //TODO: check how arcade displays alter the signal.
+      //The red, green, and blue channels are connected directly without any
+      //conversion to YIQ/YUV/YPbPr/etc. and back.
+      static const uint8 gammaRamp[8] = {
+        0x00, 0x0a,
+        0x2d, 0x5b,
+        0x98, 0xb8,
+        0xe0, 0xff,
+      };
+      R = gammaRamp[r] * 0x0101;
+      G = gammaRamp[g] * 0x0101;
+      B = gammaRamp[b] * 0x0101;
+    }
+
+    return R << 32 | G << 16 | B << 0;
+  };
 
-  auto gammaAdjust = [=](double f) { return f < 0.0 ? 0.0 : pow(f, 2.2 / gamma); };
-  uint64 r = uclamp<16>(65535.0 * gammaAdjust(y +  0.946882 * i +  0.623557 * q));
-  uint64 g = uclamp<16>(65535.0 * gammaAdjust(y + -0.274788 * i + -0.635691 * q));
-  uint64 b = uclamp<16>(65535.0 * gammaAdjust(y + -1.108545 * i +  1.709007 * q));
+  static auto generatePC10Color = [](uint9 color) -> uint64 {
+    uint r = 15 - playchoice10.videoCircuit.cgrom[color + 0x000];
+    uint g = 15 - playchoice10.videoCircuit.cgrom[color + 0x100];
+    uint b = 15 - playchoice10.videoCircuit.cgrom[color + 0x200];
+
+    uint64 R = image::normalize(r, 4, 16);
+    uint64 G = image::normalize(g, 4, 16);
+    uint64 B = image::normalize(b, 4, 16);
+
+    if(settings.colorEmulation) {
+      //TODO: check the menu monitor's gamma ramp
+      static const uint8 gammaRamp[16] = {
+        0x00, 0x03, 0x0a, 0x15,
+        0x24, 0x37, 0x4e, 0x69,
+        0x90, 0xa0, 0xb0, 0xc0,
+        0xd0, 0xe0, 0xf0, 0xff,
+      };
+      R = gammaRamp[r] * 0x0101;
+      G = gammaRamp[g] * 0x0101;
+      B = gammaRamp[b] * 0x0101;
+    }
+
+    return R << 32 | G << 16 | B << 0;
+  };
 
-  return r << 32 | g << 16 | b << 0;
+  if(!system.pc10() || n < (1 << 9)) {
+    if(ppu.ntsc()) { //NTSC
+      double saturation = 2.0;
+      double hue = 0.0;
+      double contrast = 1.0;
+      double brightness = 1.0;
+      double gamma = settings.colorEmulation ? 1.8 : 2.2;
+
+      return generateNTSCColor(n & 0x1ff, saturation, hue, contrast, brightness, gamma);
+
+    } else if(ppu.pal()) { //PAL
+      double saturation = 2.0;
+      double hue = 0.0;
+      double contrast = 1.0;
+      double brightness = 1.0;
+      double gamma = settings.colorEmulation ? 1.8 : 2.2;
+
+      return generatePALColor(n & 0x1ff, saturation, hue, contrast, brightness, gamma);
+
+    } else if(ppu.rgb()) { //Arcade
+      const uint9* palette = nullptr;
+      switch(ppu.version) {
+      case PPU::Version::RP2C03B:
+      case PPU::Version::RP2C03G:
+      case PPU::Version::RC2C03B:
+      case PPU::Version::RC2C03C:
+      case PPU::Version::RC2C05_01:
+      case PPU::Version::RC2C05_02:
+      case PPU::Version::RC2C05_03:
+      case PPU::Version::RC2C05_04:
+      case PPU::Version::RC2C05_05:
+        palette = PPU::RP2C03;
+        break;
+      case PPU::Version::RP2C04_0001:
+        palette = PPU::RP2C04_0001;
+        break;
+      case PPU::Version::RP2C04_0002:
+        palette = PPU::RP2C04_0002;
+        break;
+      case PPU::Version::RP2C04_0003:
+        palette = PPU::RP2C04_0003;
+        break;
+      case PPU::Version::RP2C04_0004:
+        palette = PPU::RP2C04_0004;
+        break;
+      }
+      return generateRGBColor(n & 0x1ff, palette);
+    }
+  } else {
+    return generatePC10Color(n - (1 << 9));
+  }
 }
 
 auto Interface::audioFrequency() -> double {
-  return 21477272.0 / 12.0;
+  switch(system.region()) { default:
+  case System::Region::NTSC:  return (system.colorburst() * 6.0) / 12.0;
+  case System::Region::PAL:   return (system.colorburst() * 6.0) / 16.0;
+  case System::Region::Dendy: return (system.colorburst() * 6.0) / 15.0;
+  }
 }
 
 auto Interface::loaded() -> bool {
@@ -134,7 +579,10 @@ auto Interface::sha256() -> string {
 }
 
 auto Interface::load(uint id) -> bool {
-  return system.load();
+  if(id == ID::Famicom) return system.load(Model::Famicom);
+  if(id == ID::VSSystem) return system.load(Model::VSSystem); 
+  if(id == ID::PlayChoice10) return system.load(Model::PlayChoice10);
+  if(id == ID::FamicomBox) return system.load(Model::FamicomBox);
 }
 
 auto Interface::save() -> void {
@@ -147,7 +595,32 @@ auto Interface::unload() -> void {
 }
 
 auto Interface::connect(uint port, uint device) -> void {
+  if(system.vs() || port == ID::Port::Arcade) return;
+
+  if((port == ID::Port::Controller1 && settings.controllerPort1 == ID::Device::FourScore)
+  || (port == ID::Port::Controller2 && settings.controllerPort2 == ID::Device::FourScore)) {
+    switch(port) {
+    case ID::Port::Controller1:
+      interface->deviceChanged(ID::Port::Controller2, ID::Device::None);
+      break;
+    case ID::Port::Controller2:
+      interface->deviceChanged(ID::Port::Controller1, ID::Device::None);
+      break;
+    }
+  }
+
   Famicom::peripherals.connect(port, device);
+
+  if(device == ID::Device::FourScore || device == ID::Device::FourScore) {
+    switch(port) {
+    case ID::Port::Controller1:
+      interface->deviceChanged(ID::Port::Controller2, ID::Device::FourScore);
+      break;
+    case ID::Port::Controller2:
+      interface->deviceChanged(ID::Port::Controller1, ID::Device::FourScore);
+      break;
+    }
+  }
 }
 
 auto Interface::power() -> void {
@@ -172,6 +645,7 @@ auto Interface::unserialize(serializer& s) -> bool {
 }
 
 auto Interface::cheatSet(const string_vector& list) -> void {
+  cheat.reset();
   cheat.assign(list);
 }
 
@@ -193,8 +667,29 @@ auto Interface::set(const string& name, const any& value) -> bool {
     system.configureVideoPalette();
     return true;
   }
-  if(name == "Scanline Emulation" && value.is<bool>()) return settings.scanlineEmulation = value.get<bool>(), true;
+  if(name == "Scanline Emulation" && value.is<bool>()) {
+    settings.scanlineEmulation = value.get<bool>();
+    system.configureVideoEffects();
+    return true;
+  }
   return false;
 }
 
+auto Interface::exportMemory() -> void {
+  string pathname = {path(cartridge.pathID()), "debug/"};
+  directory::create(pathname);
+
+  if(auto fp = interface->open(cartridge.pathID(), "debug/work.ram", File::Write)) fp->write(cpu.ram, 0x800);
+  if(cartridge.board->prgram.size()) if(auto fp = interface->open(cartridge.pathID(), "debug/program.ram", File::Write)) {
+    fp->write(cartridge.board->prgram.data(), cartridge.board->prgram.size());
+  }
+  if(cartridge.board->chrram.size()) if(auto fp = interface->open(cartridge.pathID(), "debug/character.ram", File::Write)) {
+    fp->write(cartridge.board->chrram.data(), cartridge.board->chrram.size());
+  }
+  if(!cartridge.board->chip) return;
+  if(cartridge.board->chip->ram.size()) if(auto fp = interface->open(cartridge.pathID(), "debug/chip.ram", File::Write)) {
+    fp->write(cartridge.board->chip->ram.data(), cartridge.board->chip->ram.size());
+  }
+}
+
 }
diff --git a/higan/fc/interface/interface.hpp b/higan/fc/interface/interface.hpp
index c710aa8..674c0cf 100644
--- a/higan/fc/interface/interface.hpp
+++ b/higan/fc/interface/interface.hpp
@@ -4,17 +4,40 @@ struct ID {
   enum : uint {
     System,
     Famicom,
+    VSSystem,
+    PlayChoice10,
+    FamicomBox,
   };
 
   struct Port { enum : uint {
     Controller1,
     Controller2,
     Expansion,
+    Arcade,
   };};
 
   struct Device { enum : uint {
     None,
     Gamepad,
+    GamepadMic,
+    FourScore,
+    Zapper,
+    PowerPad,
+    Vaus,
+    SNESGamepad,
+    Mouse,
+
+    GamepadE,
+    JoyPair,
+    FourPlayers,
+    BeamGun,
+    FamilyKeyboard,
+    FamilyTrainer,
+    VausE,
+    SFCGamepad,
+    MouseE,
+
+    VSPanel,
   };};
 };
 
@@ -53,6 +76,9 @@ struct Interface : Emulator::Interface {
   auto cap(const string& name) -> bool override;
   auto get(const string& name) -> any override;
   auto set(const string& name, const any& value) -> bool override;
+
+  //debugger functions
+  auto exportMemory() -> void override;
 };
 
 struct Settings {
@@ -62,6 +88,7 @@ struct Settings {
   uint controllerPort1 = 0;
   uint controllerPort2 = 0;
   uint expansionPort = 0;
+  uint arcadePanel = 0;
 };
 
 extern Interface* interface;
diff --git a/higan/fc/memory/memory-inline.hpp b/higan/fc/memory/memory-inline.hpp
new file mode 100644
index 0000000..7eb8b79
--- /dev/null
+++ b/higan/fc/memory/memory-inline.hpp
@@ -0,0 +1,90 @@
+//Memory
+
+auto Memory::size() const -> uint { return 0; }
+
+//StaticRAM
+
+StaticRAM::StaticRAM(uint size) : _size(size) { _data = new uint8[_size]; }
+StaticRAM::~StaticRAM() { delete[] _data; }
+
+auto StaticRAM::data() -> uint8* { return _data; }
+auto StaticRAM::size() const -> uint { return _size; }
+
+auto StaticRAM::read(uint16 addr, uint8) -> uint8 { return _data[addr]; }
+auto StaticRAM::write(uint16 addr, uint8 data) -> void { _data[addr] = data; }
+auto StaticRAM::operator[](uint16 addr) -> uint8& { return _data[addr]; }
+auto StaticRAM::operator[](uint16 addr) const -> const uint8& { return _data[addr]; }
+
+//MappedRAM
+
+auto MappedRAM::reset() -> void {
+  delete[] _data;
+  _data = nullptr;
+  _size = 0;
+  _writeProtect = false;
+}
+
+auto MappedRAM::allocate(uint size) -> void {
+  reset();
+  _data = new uint8[_size = size];
+  memory::fill(_data, _size, 0xff);
+}
+
+auto MappedRAM::writeProtect(bool writeProtect) -> void { _writeProtect = writeProtect; }
+auto MappedRAM::data() -> uint8* { return _data; }
+auto MappedRAM::size() const -> uint { return _size; }
+
+auto MappedRAM::read(uint16 addr, uint8) -> uint8 { return _data[addr]; }
+auto MappedRAM::write(uint16 addr, uint8 data) -> void { if(!_writeProtect) _data[addr] = data; }
+auto MappedRAM::operator[](uint16 addr) const -> const uint8& { return _data[addr]; }
+
+auto MappedRAM::readDirect(uint addr, uint8) -> uint8 { return _data[addr]; }
+auto MappedRAM::writeDirect(uint addr, uint8 data) -> void { if(!_writeProtect) _data[addr] = data; }
+
+//Bus
+
+auto Bus::mirror(uint addr, uint size) -> uint {
+  if(size == 0) return 0;
+  uint base = 0;
+  uint mask = 1 << 15;
+  while(addr >= size) {
+    while(!(addr & mask)) mask >>= 1;
+    addr -= mask;
+    if(size > mask) {
+      size -= mask;
+      base += mask;
+    }
+    mask >>= 1;
+  }
+  return base + addr;
+}
+
+auto Bus::reduce(uint addr, uint mask) -> uint {
+  while(mask) {
+    uint bits = (mask & -mask) - 1;
+    addr = ((addr >> 1) & ~bits) | (addr & bits);
+    mask = (mask & (mask - 1)) >> 1;
+  }
+  return addr;
+}
+
+//$0000-07ff = RAM (2KB)
+//$0800-1fff = RAM (mirror)
+//$2000-2007 = PPU
+//$2008-3fff = PPU (mirror)
+//$4000-4017 = APU + I/O
+//$4018-ffff = Cartridge
+
+auto Bus::read(uint16 addr, uint8 data) -> uint8 {
+  if(!system.fcb()) data = cartridge.readPRG(addr);
+  data = reader[lookup[addr]](target[addr], data);
+  if(cheat) {
+    if(auto result = cheat.find<1>(addr, data)) return result();
+  }
+  return data;
+}
+
+auto Bus::write(uint16 addr, uint8 data) -> void {
+  if(!system.fcb()) cartridge.writePRG(addr, data);
+  return writer[lookup[addr]](target[addr], data);
+}
diff --git a/higan/fc/memory/memory.cpp b/higan/fc/memory/memory.cpp
index e2eaa4c..7eaba57 100644
--- a/higan/fc/memory/memory.cpp
+++ b/higan/fc/memory/memory.cpp
@@ -4,31 +4,88 @@ namespace Famicom {
 
 Bus bus;
 
-//$0000-07ff = RAM (2KB)
-//$0800-1fff = RAM (mirror)
-//$2000-2007 = PPU
-//$2008-3fff = PPU (mirror)
-//$4000-4017 = APU + I/O
-//$4018-ffff = Cartridge
+Bus::~Bus() {
+  if(lookup) delete[] lookup;
+  if(target) delete[] target;
+}
 
-auto Bus::read(uint16 addr) -> uint8 {
-  uint8 data = cartridge.readPRG(addr);
-       if(addr <= 0x1fff) data = cpu.readRAM(addr);
-  else if(addr <= 0x3fff) data = ppu.readIO(addr);
-  else if(addr <= 0x4017) data = cpu.readIO(addr);
+auto Bus::reset() -> void {
+  for(auto id : range(256)) {
+    reader[id].reset();
+    writer[id].reset();
+    counter[id] = 0;
+  }
+
+  if(lookup) delete[] lookup;
+  if(target) delete[] target;
+
+  lookup = new uint8 [16 * 1024 * 1024]();
+  target = new uint32[16 * 1024 * 1024]();
 
-  if(cheat) {
-    if(auto result = cheat.find(addr, data)) return result();
+  reader[0] = [](uint16, uint8 data) -> uint8 { return data; };
+  writer[0] = [](uint16, uint8) -> void {};
+}
+
+auto Bus::map(
+  const function<uint8 (uint16, uint8)>& read,
+  const function<void (uint16, uint8)>& write,
+  const string& addr, uint size, uint base, uint mask
+) -> void {
+  uint id = 1;
+  while(counter[id]) {
+    if(++id >= 256) return print("FC error: bus map exhausted\n");
   }
 
-  return data;
+  reader[id] = read;
+  writer[id] = write;
+
+  auto addrs = addr.split(",");
+  for(auto& addr : addrs) {
+    auto addrRange = addr.split("-", 1L);
+    uint addrLo = addrRange(0).hex();
+    uint addrHi = addrRange(1, addrRange(0)).hex();
+
+    for(uint addr = addrLo; addr <= addrHi; addr++) {
+      uint pid = lookup[addr];
+      if(pid && --counter[pid] == 0) {
+        reader[pid].reset();
+        writer[pid].reset();
+      }
+
+      uint offset = reduce(addr, mask);
+      if(size) offset = base + mirror(offset, size - base);
+      lookup[addr] = id;
+      target[addr] = offset;
+      counter[id]++;
+    }
+  }
 }
 
-auto Bus::write(uint16 addr, uint8 data) -> void {
-  cartridge.writePRG(addr, data);
-  if(addr <= 0x1fff) return cpu.writeRAM(addr, data);
-  if(addr <= 0x3fff) return ppu.writeIO(addr, data);
-  if(addr <= 0x4017) return cpu.writeIO(addr, data);
+auto Bus::unmap(const string& addr) -> void {
+  auto addrs = addr.split(",");
+  for(auto& addr : addrs) {
+    auto addrRange = addr.split("-", 1L);
+    uint addrLo = addrRange(0).hex();
+    uint addrHi = addrRange(1, addrRange(1)).hex();
+
+    for(uint addr = addrLo; addr <= addrHi; addr++) {
+      uint pid = lookup[addr];
+      if(pid && --counter[pid] == 0) {
+        reader[pid].reset();
+        writer[pid].reset();
+      }
+
+      lookup[addr] = 0;
+      target[addr] = 0;
+    }
+  }
 }
 
+//$0000-07ff = RAM (2KB)
+//$0800-1fff = RAM (mirror)
+//$2000-2007 = PPU
+//$2008-3fff = PPU (mirror)
+//$4000-4017 = APU + I/O
+//$4018-ffff = Cartridge
+
 }
diff --git a/higan/fc/memory/memory.hpp b/higan/fc/memory/memory.hpp
index 5a9596a..5f69bf7 100644
--- a/higan/fc/memory/memory.hpp
+++ b/higan/fc/memory/memory.hpp
@@ -1,6 +1,71 @@
+struct Memory {
+  virtual inline auto size() const -> uint;
+  virtual auto read(uint16 addr, uint8 data = 0) -> uint8 = 0;
+  virtual auto write(uint16 addr, uint8 data) -> void = 0;
+};
+
+struct StaticRAM : Memory {
+  inline StaticRAM(uint size);
+  inline ~StaticRAM();
+
+  inline auto data() -> uint8*;
+  inline auto size() const -> uint;
+
+  inline auto read(uint16 addr, uint8 data = 0) -> uint8;
+  inline auto write(uint16 addr, uint8 data) -> void;
+  inline auto operator[](uint16 addr) -> uint8&;
+  inline auto operator[](uint16 addr) const -> const uint8&;
+
+private:
+  uint8* _data = nullptr;
+  uint _size = 0;
+};
+
+struct MappedRAM : Memory {
+  inline auto reset() -> void;
+  inline auto allocate(uint) -> void;
+
+  inline auto writeProtect(bool writeProtect) -> void;
+  inline auto data() -> uint8*;
+  inline auto size() const -> uint;
+
+  inline auto read(uint16 addr, uint8 data = 0) -> uint8;
+  inline auto write(uint16 addr, uint8 data) -> void;
+  inline auto operator[](uint16 addr) const -> const uint8&;
+
+  inline auto readDirect(uint addr, uint8 data = 0) -> uint8;
+  inline auto writeDirect(uint addr, uint8 data) -> void;
+
+private:
+  uint8* _data = nullptr;
+  uint _size = 0;
+  bool _writeProtect = false;
+};
+
 struct Bus {
-  auto read(uint16 addr) -> uint8;
-  auto write(uint16 addr, uint8 data) -> void;
+  alwaysinline static auto mirror(uint addr, uint size) -> uint;
+  alwaysinline static auto reduce(uint addr, uint mask) -> uint;
+
+  ~Bus();
+
+  alwaysinline auto read(uint16 addr, uint8 data) -> uint8;
+  alwaysinline auto write(uint16 addr, uint8 data) -> void;
+
+  auto reset() -> void;
+  auto map(
+    const function<uint8 (uint16, uint8)>& read,
+    const function<void (uint16, uint8)>& write,
+    const string& addr, uint size = 0, uint base = 0, uint mask = 0
+  ) -> void;
+  auto unmap(const string& addr) -> void;
+
+private:
+  uint8* lookup = nullptr;
+  uint32* target = nullptr;
+
+  function<auto (uint16, uint8) -> uint8> reader[256];
+  function<auto (uint16, uint8) -> void> writer[256];
+  uint16 counter[256];
 };
 
 extern Bus bus;
diff --git a/higan/fc/ppu/counter/counter-inline.hpp b/higan/fc/ppu/counter/counter-inline.hpp
new file mode 100644
index 0000000..eb72fa7
--- /dev/null
+++ b/higan/fc/ppu/counter/counter-inline.hpp
@@ -0,0 +1,40 @@
+auto PPUcounter::tick(uint clocks) -> void {
+  status.hcounter += clocks;
+  if(status.hcounter == 337) status.skip = 341 - lineclocks();
+  if(status.hcounter == 341 - status.skip) {
+    status.hcounter = 0;
+    status.skip = false;
+    vcounterTick();
+  }
+}
+
+//internal
+auto PPUcounter::vcounterTick() -> void {
+  status.vcounter++;
+
+  if((system.region() == System::Region::NTSC && status.vcounter == 262)
+  || (system.region() != System::Region::NTSC && status.vcounter == 312)
+  ) {
+    status.vcounter = 0;
+    status.field = !status.field;
+  }
+  if(scanline) scanline();
+}
+
+auto PPUcounter::field() const -> bool { return status.field; }
+auto PPUcounter::vcounter() const -> uint16 { return status.vcounter; }
+auto PPUcounter::hcounter() const -> uint16 { return status.hcounter; }
+
+//one PPU dot = 4 CPU clocks (1/3 CPU cycle)
+
+auto PPUcounter::lineclocks() const -> uint16 {
+  if(system.region() == System::Region::NTSC && ppu.ntsc() && ppu.enable() && vcounter() == 261 && field() == 1) return 340;
+  return 341;
+}
+
+auto PPUcounter::reset() -> void {
+  status.field    = 0;
+  status.vcounter = 0;
+  status.hcounter = 0;
+  status.skip     = false;
+}
diff --git a/higan/fc/ppu/counter/counter.hpp b/higan/fc/ppu/counter/counter.hpp
new file mode 100644
index 0000000..bfb8d28
--- /dev/null
+++ b/higan/fc/ppu/counter/counter.hpp
@@ -0,0 +1,23 @@
+struct PPUcounter {
+  alwaysinline auto tick(uint clocks) -> void;
+
+  alwaysinline auto field() const -> bool;
+  alwaysinline auto vcounter() const -> uint16;
+  alwaysinline auto hcounter() const -> uint16;
+  alwaysinline auto skip() const -> bool;
+  inline auto lineclocks() const -> uint16;
+
+  inline auto reset() -> void;
+  function<auto () -> void> scanline;
+  auto serialize(serializer&) -> void;
+
+//private:
+  inline auto vcounterTick() -> void;
+
+  struct {
+    bool field;
+    uint16 vcounter;
+    uint16 hcounter;
+    bool skip;
+  } status;
+};
diff --git a/higan/fc/ppu/io.cpp b/higan/fc/ppu/io.cpp
new file mode 100644
index 0000000..d757c7e
--- /dev/null
+++ b/higan/fc/ppu/io.cpp
@@ -0,0 +1,192 @@
+auto PPU::readCIRAM(uint12 addr) -> uint8 {
+  if(!system.vs()) addr &= 0x7ff;
+  return ciram[addr];
+}
+
+auto PPU::writeCIRAM(uint12 addr, uint8 data) -> void {
+  if(!system.vs()) addr &= 0x7ff;
+  ciram[addr] = data;
+}
+
+auto PPU::readCGRAM(uint5 addr) -> uint8 {
+  if((addr & 0x13) == 0x10) addr &= ~0x10;
+  uint8 data = cgram[addr];
+  if(io.grayscale) data &= 0x30;
+  return data;
+}
+
+auto PPU::writeCGRAM(uint5 addr, uint8 data) -> void {
+  if((addr & 0x13) == 0x10) addr &= ~0x10;
+  cgram[addr] = data;
+}
+
+auto PPU::readIO(uint16 addr, uint8 data) -> uint8 {
+  switch(addr.bits(0,2)) {
+
+  case 0: case 1: case 3:
+  case 5: case 6: {
+    return io.mdr;
+  }
+
+  //PPUSTATUS
+  case 2: {
+    data = 0x00;
+    switch(version) {
+    default:
+      data |= io.mdr.bits(0,4);
+      data |= io.spriteOverflow << 5;
+      break;
+    case Version::RC2C05_01:
+    case Version::RC2C05_04: data |= 0x1b; break;
+    case Version::RC2C05_02: data |= 0x3d; break;
+    case Version::RC2C05_03: data |= 0x1c; break;
+    }
+    data |= io.spriteZeroHit << 6;
+    data |= io.nmiFlag << 7;
+    io.v.latch = 0;
+    io.nmiHold = 0;
+    cpu.nmiLine(io.nmiFlag = 0);
+    return data;
+  }
+
+  //OAMDATA
+  case 4: {
+    switch(version) {
+    case Version::RP2C02C:
+      return io.mdr;
+    default:
+      io.mdr = oam[io.oamAddress];
+      for(uint i = 0; i < 8; i++) io.mdrDecay[i] = 3221591;
+      break;
+    }
+    return io.mdr;
+  }
+
+  //PPUDATA
+  case 7: {
+    if(enable() && (vcounter() <= 240 || vcounter() == (system.region() == System::Region::NTSC ? 261 : 311))) return 0x00;
+
+    addr = (uint14)io.v.address;
+    if(addr <= 0x3eff) {
+      io.mdr = io.busData;
+    } else if(addr <= 0x3fff) {
+      io.mdr = (io.mdr & 0xc0) | readCGRAM(addr);
+    }
+    io.busData = cartridge.readCHR(io.chrAddressBus = addr);
+    io.v.address += io.vramIncrement;
+    io.chrAddressBus = io.v.address;
+    return io.mdr;
+  }
+
+  }
+
+  return data;
+}
+
+auto PPU::writeIO(uint16 addr, uint8 data) -> void {
+  io.mdr = data;
+  // Decay rate can vary depending on the system and temperature.
+  // Value used here is PPU's NTSC clock rate * 0.6 rounded to nearest integer.
+  for(uint i = 0; i < 8; i++) io.mdrDecay[i] = 3221591;
+
+  switch(version) {
+  case Version::RC2C05_01:
+  case Version::RC2C05_02:
+  case Version::RC2C05_03:
+  case Version::RC2C05_04:
+  case Version::RC2C05_05: if(addr.bits(1,2) == 0) addr ^= 1; break;
+  }
+
+  switch(addr.bits(0,2)) {
+
+  //PPUCTRL
+  case 0: {
+    io.t.nametable   = data.bits(0,1);
+    io.vramIncrement = data.bit (2) ? 32 : 1;
+    io.objAddress    = data.bit (3) ? 0x1000 : 0x0000;
+    io.bgAddress     = data.bit (4) ? 0x1000 : 0x0000;
+    io.spriteHeight  = data.bit (5) ? 16 : 8;
+    io.masterSelect  = data.bit (6);
+    io.nmiEnable     = data.bit (7);
+    cpu.nmiLine(io.nmiEnable && io.nmiHold && io.nmiFlag);
+    return;
+  }
+
+  //PPUMASK
+  case 1: {
+    io.grayscale     = data.bit (0);
+    io.bgEdgeEnable  = data.bit (1);
+    io.objEdgeEnable = data.bit (2);
+    io.bgEnable      = data.bit (3);
+    io.objEnable     = data.bit (4);
+    io.emphasis      = data.bits(5,7);
+    return;
+  }
+
+  //PPUSTATUS
+  case 2: {
+    return;
+  }
+
+  //OAMADDR
+  case 3: {
+    if(version != Version::RP2C07) {
+      // below corruption code only applies for preferred CPU-PPU alignment.
+      // on an actual Famicom/NES, waiting a while after writing to OAM will
+      // make this corruption happen because the OAM will have decayed at the
+      // spot being written to.
+      for(int i = 0; i < 8; i++) oam[((addr & 0xf800) >> 8) + i] = oam[(io.oamAddress & 0xf8) + i];
+    }
+    io.oamAddress = data;
+    return;
+  }
+
+  //OAMDATA
+  case 4: {
+    if(io.oamAddress.bits(0,1) == 2) data.bits(2,4) = 0;  //clear non-existent bits (always read back as 0)
+    oam[io.oamAddress++] = data;
+    return;
+  }
+
+  //PPUSCROLL
+  case 5: {
+    if(!io.v.latch) {
+      io.v.fineX = data.bits(0,2);
+      io.t.tileX = data.bits(3,7);
+    } else {
+      io.t.fineY = data.bits(0,2);
+      io.t.tileY = data.bits(3,7);
+    }
+    io.v.latch ^= 1;
+    return;
+  }
+
+  //PPUADDR
+  case 6: {
+    if(!io.v.latch) {
+      io.t.addressHi = data.bits(0,5);
+    } else {
+      io.t.addressLo = data.bits(0,7);
+      io.chrAddressBus = io.v.address = io.t.address;
+    }
+    io.v.latch ^= 1;
+    return;
+  }
+
+  //PPUDATA
+  case 7: {
+    if(enable() && (vcounter() <= 240 || vcounter() == (system.region() != System::Region::PAL ? 261 : 311))) return;
+
+    addr = (uint14)io.v.address;
+    if(addr <= 0x3eff) {
+      cartridge.writeCHR(io.chrAddressBus = addr, data);
+    } else if(addr <= 0x3fff) {
+      writeCGRAM(addr, data);
+    }
+    io.v.address += io.vramIncrement;
+    io.chrAddressBus = io.v.address;
+    return;
+  }
+
+  }
+}
diff --git a/higan/fc/ppu/memory.cpp b/higan/fc/ppu/memory.cpp
deleted file mode 100644
index 3188b2a..0000000
--- a/higan/fc/ppu/memory.cpp
+++ /dev/null
@@ -1,144 +0,0 @@
-auto PPU::readCIRAM(uint11 addr) -> uint8 {
-  return ciram[addr];
-}
-
-auto PPU::writeCIRAM(uint11 addr, uint8 data) -> void {
-  ciram[addr] = data;
-}
-
-auto PPU::readCGRAM(uint5 addr) -> uint8 {
-  if((addr & 0x13) == 0x10) addr &= ~0x10;
-  uint8 data = cgram[addr];
-  if(io.grayscale) data &= 0x30;
-  return data;
-}
-
-auto PPU::writeCGRAM(uint5 addr, uint8 data) -> void {
-  if((addr & 0x13) == 0x10) addr &= ~0x10;
-  cgram[addr] = data;
-}
-
-auto PPU::readIO(uint16 addr) -> uint8 {
-  uint8 result = 0x00;
-
-  switch(addr.bits(0,2)) {
-
-  //PPUSTATUS
-  case 2:
-    result |= io.mdr.bits(0,4);
-    result |= io.spriteOverflow << 5;
-    result |= io.spriteZeroHit << 6;
-    result |= io.nmiFlag << 7;
-    io.v.latch = 0;
-    io.nmiHold = 0;
-    cpu.nmiLine(io.nmiFlag = 0);
-    break;
-
-  //OAMDATA
-  case 4:
-    result = oam[io.oamAddress];
-    break;
-
-  //PPUDATA
-  case 7:
-    if(enable() && (io.ly <= 240 || io.ly == 261)) return 0x00;
-
-    addr = (uint14)io.v.address;
-    if(addr <= 0x1fff) {
-      result = io.busData;
-      io.busData = cartridge.readCHR(addr);
-    } else if(addr <= 0x3eff) {
-      result = io.busData;
-      io.busData = cartridge.readCHR(addr);
-    } else if(addr <= 0x3fff) {
-      result = readCGRAM(addr);
-      io.busData = cartridge.readCHR(addr);
-    }
-    io.v.address += io.vramIncrement;
-    break;
-
-  }
-
-  return result;
-}
-
-auto PPU::writeIO(uint16 addr, uint8 data) -> void {
-  io.mdr = data;
-
-  switch(addr.bits(0,2)) {
-
-  //PPUCTRL
-  case 0:
-    io.t.nametable   = data.bits(0,1);
-    io.vramIncrement = data.bit (2) ? 32 : 1;
-    io.spriteAddress = data.bit (3) ? 0x1000 : 0x0000;
-    io.bgAddress     = data.bit (4) ? 0x1000 : 0x0000;
-    io.spriteHeight  = data.bit (5) ? 16 : 8;
-    io.masterSelect  = data.bit (6);
-    io.nmiEnable     = data.bit (7);
-    cpu.nmiLine(io.nmiEnable && io.nmiHold && io.nmiFlag);
-    break;
-
-  //PPUMASK
-  case 1:
-    io.grayscale        = data.bit (0);
-    io.bgEdgeEnable     = data.bit (1);
-    io.spriteEdgeEnable = data.bit (2);
-    io.bgEnable         = data.bit (3);
-    io.spriteEnable     = data.bit (4);
-    io.emphasis         = data.bits(5,7);
-    break;
-
-  //PPUSTATUS
-  case 2:
-    break;
-
-  //OAMADDR
-  case 3:
-    io.oamAddress = data;
-    break;
-
-  //OAMDATA
-  case 4:
-    if(io.oamAddress.bits(0,1) == 2) data.bits(2,4) = 0;  //clear non-existent bits (always read back as 0)
-    oam[io.oamAddress++] = data;
-    break;
-
-  //PPUSCROLL
-  case 5:
-    if(io.v.latch++ == 0) {
-      io.v.fineX = data.bits(0,2);
-      io.t.tileX = data.bits(3,7);
-    } else {
-      io.t.fineY = data.bits(0,2);
-      io.t.tileY = data.bits(3,7);
-    }
-    break;
-
-  //PPUADDR
-  case 6:
-    if(io.v.latch++ == 0) {
-      io.t.addressHi = data.bits(0,5);
-    } else {
-      io.t.addressLo = data.bits(0,7);
-      io.v.address = io.t.address;
-    }
-    break;
-
-  //PPUDATA
-  case 7:
-    if(enable() && (io.ly <= 240 || io.ly == 261)) return;
-
-    addr = (uint14)io.v.address;
-    if(addr <= 0x1fff) {
-      cartridge.writeCHR(addr, data);
-    } else if(addr <= 0x3eff) {
-      cartridge.writeCHR(addr, data);
-    } else if(addr <= 0x3fff) {
-      writeCGRAM(addr, data);
-    }
-    io.v.address += io.vramIncrement;
-    break;
-
-  }
-}
diff --git a/higan/fc/ppu/ppu.cpp b/higan/fc/ppu/ppu.cpp
index 299ac4b..121c675 100644
--- a/higan/fc/ppu/ppu.cpp
+++ b/higan/fc/ppu/ppu.cpp
@@ -3,70 +3,221 @@
 namespace Famicom {
 
 PPU ppu;
-#include "memory.cpp"
+
+#include "io.cpp"
 #include "render.cpp"
 #include "serialization.cpp"
 
-auto PPU::Enter() -> void {
-  while(true) scheduler.synchronize(), ppu.main();
+PPU::PPU() {
+  output = new uint32[256 * 240];
 }
 
-auto PPU::main() -> void {
-  renderScanline();
+PPU::~PPU() {
+  delete[] output;
 }
 
 auto PPU::step(uint clocks) -> void {
+  const uint vbl = system.region() != System::Region::Dendy ? 241 : 291;
+  const uint pre = system.region() == System::Region::NTSC ? 261 : 311;
+
   while(clocks--) {
-    if(io.ly == 240 && io.lx == 340) io.nmiHold = 1;
-    if(io.ly == 241 && io.lx ==   0) io.nmiFlag = io.nmiHold;
-    if(io.ly == 241 && io.lx ==   2) cpu.nmiLine(io.nmiEnable && io.nmiFlag);
+    if(vcounter() == vbl - 1 && hcounter() == 340) io.nmiHold = 1;
 
-    if(io.ly == 260 && io.lx == 340) io.spriteZeroHit = 0, io.spriteOverflow = 0;
+    if(vcounter() == vbl && hcounter() ==   0) io.chrAddressBus = (uint12)io.v.address;
+    if(vcounter() == vbl && hcounter() ==   1) io.nmiFlag = io.nmiHold;
+    if(vcounter() == vbl && hcounter() ==   2) cpu.nmiLine(io.nmiEnable && io.nmiFlag);
 
-    if(io.ly == 260 && io.lx == 340) io.nmiHold = 0;
-    if(io.ly == 261 && io.lx ==   0) io.nmiFlag = io.nmiHold;
-    if(io.ly == 261 && io.lx ==   2) cpu.nmiLine(io.nmiEnable && io.nmiFlag);
+    if(vcounter() == pre - 1 && hcounter() == 340) io.nmiHold = 0;
+    if(vcounter() == pre     && hcounter() ==   1) io.nmiFlag = io.nmiHold;
+    if(vcounter() == pre     && hcounter() ==   1) io.spriteZeroHit = 0, io.spriteOverflow = 0;
+    if(vcounter() == pre     && hcounter() ==   2) cpu.nmiLine(io.nmiEnable && io.nmiFlag);
 
-    Thread::step(4);
+    Thread::step(system.region() == System::Region::NTSC ? 4 : 5);
     synchronize(cpu);
 
-    io.lx++;
+    for(uint i = 0; i < 8; i++) {
+      if(--io.mdrDecay[i] == 0) io.mdr &= ~(1 << i);
+    }
+
+    tick(1);
+  }
+}
+
+auto PPU::Enter() -> void {
+  while(true) scheduler.synchronize(), ppu.main();
+}
+
+auto PPU::main() -> void {
+  renderScanline();
+}
+
+auto PPU::load(Markup::Node node) -> bool {
+  if(system.vs()) return true;
+
+  string versionString;
+  if(system.fc()) {
+    if(system.region() == System::Region::NTSC)  versionString = node["ppu/ntsc-version"].text();
+    if(system.region() == System::Region::PAL)   versionString = node["ppu/pal-version"].text();
+    if(system.region() == System::Region::Dendy) versionString = node["ppu/dendy-version"].text();
+  } else {
+    versionString = node["ppu/version"].text();
   }
+
+  //YIQ
+  if(versionString == "RP2C02C")     version = Version::RP2C02C;
+  if(versionString == "RP2C02G")     version = Version::RP2C02G;
+
+  //RGB
+  if(versionString == "RP2C03B")     version = Version::RP2C03B;
+  if(versionString == "RP2C03G")     version = Version::RP2C03G;
+  if(versionString == "RP2C04-0001") version = Version::RP2C04_0001;
+  if(versionString == "RP2C04-0002") version = Version::RP2C04_0002;
+  if(versionString == "RP2C04-0003") version = Version::RP2C04_0003;
+  if(versionString == "RP2C04-0004") version = Version::RP2C04_0004;
+  if(versionString == "RC2C03B")     version = Version::RC2C03B;
+  if(versionString == "RC2C03C")     version = Version::RC2C03C;
+  if(versionString == "RC2C05-01")   version = Version::RC2C05_01;
+  if(versionString == "RC2C05-02")   version = Version::RC2C05_02;
+  if(versionString == "RC2C05-03")   version = Version::RC2C05_03;
+  if(versionString == "RC2C05-04")   version = Version::RC2C05_04;
+  if(versionString == "RC2C05-05")   version = Version::RC2C05_05;
+
+  //YUV
+  if(versionString == "RP2C07")      version = Version::RP2C07;
+  if(versionString == "UA6538")      version = Version::UA6538;
+
+  return true;
+}
+
+auto PPU::power() -> void {
+  io.v.address = 0x0000;
+
+  io.nmiHold = 0;
+  io.nmiFlag = 1;
+
+  //$2003  OAMADDR
+  io.oamAddress = 0x00;
+
+  for(auto& n : ciram) n = 0xff;
+}
+
+auto PPU::reset() -> void {
+  create(Enter, system.colorburst() * 6.0);
+  PPUcounter::reset();
+  memory::fill(output, 256 * 240 * sizeof(uint32));
+
+  function<auto (uint16, uint8) -> uint8> reader{&PPU::readIO, this};
+  function<auto (uint16, uint8) -> void> writer{&PPU::writeIO, this};
+  bus.map(reader, writer, "2000-3fff");
+
+  io.mdr = 0x00;
+  io.busData = 0x00;
+  io.v.latch = 0;
+  io.v.fineX = 0;
+  io.t.tileX = 0;
+  io.t.fineY = 0;
+  io.t.tileY = 0;
+  io.t.address = 0x0000;
+
+  //$2000  PPUCTRL
+  io.nmiEnable = false;
+  io.masterSelect = 0;
+  io.spriteHeight = 8;
+  io.bgAddress = 0x0000;
+  io.objAddress = 0x0000;
+  io.vramIncrement = 1;
+
+  //$2001  PPUMASK
+  io.emphasis = 0;
+  io.objEnable = false;
+  io.bgEnable = false;
+  io.objEdgeEnable = false;
+  io.bgEdgeEnable = false;
+  io.grayscale = false;
+
+  //$2002  PPUSTATUS
+  io.spriteZeroHit = 0;
+  io.spriteOverflow = 0;
+
+  _extOut = 0;
+
+  for(auto& n : cgram) n = 0;
+  for(auto& n : oam) n = 0;
 }
 
 auto PPU::scanline() -> void {
-  io.lx = 0;
-  if(++io.ly == 262) {
-    io.ly = 0;
-    frame();
+  if(vcounter() == 0) frame();
+  cartridge.scanline(vcounter());
+
+  if(vcounter() == 241) {
+    scheduler.exit(Scheduler::Event::Frame);
   }
-  cartridge.scanline(io.ly);
 }
 
 auto PPU::frame() -> void {
-  io.field++;
-  scheduler.exit(Scheduler::Event::Frame);
+  //TODO: Verify whether putting the scheduler exit event at vcounter() == 241 reduces lag as opposed to here
 }
 
-auto PPU::refresh() -> void {
-  Emulator::video.refresh(buffer, 256 * sizeof(uint32), 256, 240);
+auto PPU::originX() -> uint {
+  return (system.vs() && vssystem.gameCount == 2) ? side * 256 : 0;
 }
 
-auto PPU::power() -> void {
+auto PPU::originY() -> uint {
+  return system.pc10() ? (playchoice10.screenConfig - 1) * 224 : 0;
 }
 
-auto PPU::reset() -> void {
-  create(PPU::Enter, system.colorburst() * 6.0);
+auto PPU::refresh() -> void {
+  auto output = this->output;
+  Emulator::video.refreshRegion(output, 256 * sizeof(uint32), originX(), originY(), 256, 240);
+}
 
-  memory::fill(&io, sizeof(IO));
-  memory::fill(&latch, sizeof(Latches));
-  io.vramIncrement = 1;
+//
 
-  for(auto& n : ciram ) n = 0;
-  for(auto& n : cgram ) n = 0;
-  for(auto& n : oam   ) n = 0;
+auto PPU::extIn() -> uint4 {
+  if( io.masterSelect) return 0;  //always 0 in slave mode
+  if(!io.masterSelect) return 0;  //EXT pins are tied to ground
+}
 
-  for(auto& n : buffer) n = 0;
+auto PPU::extOut() -> uint4 {
+  if( io.masterSelect) return _extOut;
+  if(!io.masterSelect) return 0;  //does not output anything in master mode
 }
 
+// Arcade RGB palettes
+
+const uint9 PPU::RP2C03[16 * 4] = {
+  0333,0014,0006,0326,0403,0503,0510,0420,0320,0120,0031,0040,0022,0000,0000,0000,
+  0555,0036,0027,0407,0507,0704,0700,0630,0430,0140,0040,0053,0044,0000,0000,0000,
+  0777,0357,0447,0637,0707,0737,0740,0750,0660,0360,0070,0276,0077,0000,0000,0000,
+  0777,0567,0657,0757,0747,0755,0764,0772,0773,0572,0473,0276,0467,0000,0000,0000,
+};
+
+const uint9 PPU::RP2C04_0001[16 * 4] = {
+  0755,0637,0700,0447,0044,0120,0222,0704,0777,0333,0750,0503,0403,0660,0320,0777,
+  0357,0653,0310,0360,0467,0657,0764,0027,0760,0276,0000,0200,0666,0444,0707,0014,
+  0003,0567,0757,0070,0077,0022,0053,0507,0000,0420,0747,0510,0407,0006,0740,0000,
+  0000,0140,0555,0031,0572,0326,0770,0630,0020,0036,0040,0111,0773,0737,0430,0473,
+};
+
+const uint9 PPU::RP2C04_0002[16 * 4] = {
+  0000,0750,0430,0572,0473,0737,0044,0567,0700,0407,0773,0747,0777,0637,0467,0040,
+  0020,0357,0510,0666,0053,0360,0200,0447,0222,0707,0003,0276,0657,0320,0000,0326,
+  0403,0764,0740,0757,0036,0310,0555,0006,0507,0760,0333,0120,0027,0000,0660,0777,
+  0653,0111,0070,0630,0022,0014,0704,0140,0000,0077,0420,0770,0755,0503,0031,0444,
+};
+
+const uint9 PPU::RP2C04_0003[16 * 4] = {
+  0507,0737,0473,0555,0040,0777,0567,0120,0014,0000,0764,0320,0704,0666,0653,0467,
+  0447,0044,0503,0027,0140,0430,0630,0053,0333,0326,0000,0006,0700,0510,0747,0755,
+  0637,0020,0003,0770,0111,0750,0740,0777,0360,0403,0357,0707,0036,0444,0000,0310,
+  0077,0200,0572,0757,0420,0070,0660,0222,0031,0000,0657,0773,0407,0276,0760,0022,
+};
+
+const uint9 PPU::RP2C04_0004[16 * 4] = {
+  0430,0326,0044,0660,0000,0755,0014,0630,0555,0310,0070,0003,0764,0770,0040,0572,
+  0737,0200,0027,0747,0000,0222,0510,0740,0653,0053,0447,0140,0403,0000,0473,0357,
+  0503,0031,0420,0006,0407,0507,0333,0704,0022,0666,0036,0020,0111,0773,0444,0707,
+  0757,0777,0320,0700,0760,0276,0777,0467,0000,0750,0637,0567,0360,0657,0077,0120,
+};
+
 }
diff --git a/higan/fc/ppu/ppu.hpp b/higan/fc/ppu/ppu.hpp
index 21b7341..c0797f2 100644
--- a/higan/fc/ppu/ppu.hpp
+++ b/higan/fc/ppu/ppu.hpp
@@ -1,28 +1,70 @@
-struct PPU : Thread {
+struct PPU : Thread, PPUcounter {
+  enum class Version : uint {
+    //YIQ
+    RP2C02C,
+    RP2C02G,
+
+    //RGB
+    RP2C03B,
+    RP2C03G,
+    RP2C04_0001,
+    RP2C04_0002,
+    RP2C04_0003,
+    RP2C04_0004,
+    RC2C03B,
+    RC2C03C,
+    RC2C05_01,
+    RC2C05_02,
+    RC2C05_03,
+    RC2C05_04,
+    RC2C05_05,
+
+    //YUV
+    RP2C07,
+    UA6538,
+  } version;
+
+  alwaysinline auto ntsc() const -> bool { return version >= Version::RP2C02C && version <= Version::RP2C02G; }
+  alwaysinline auto pal()  const -> bool { return version >= Version::RP2C07  && version <= Version::UA6538;  }
+  alwaysinline auto rgb()  const -> bool { return version >= Version::RP2C03B && version <= Version::RC2C05_05; }
+
+  PPU();
+  ~PPU();
+
+  alwaysinline auto step(uint clocks) -> void;
+
   static auto Enter() -> void;
   auto main() -> void;
-  auto step(uint clocks) -> void;
-
-  auto scanline() -> void;
-  auto frame() -> void;
-  auto refresh() -> void;
-
+  auto load(Markup::Node) -> bool;
   auto power() -> void;
   auto reset() -> void;
 
-  //memory.cpp
-  auto readCIRAM(uint11 addr) -> uint8;
-  auto writeCIRAM(uint11 addr, uint8 data) -> void;
+  alwaysinline auto originX() -> uint;
+  alwaysinline auto originY() -> uint;
+
+  auto extIn() -> uint4;
+  auto extOut() -> uint4;
+
+  //mmio.cpp
+  auto readCIRAM(uint12 addr) -> uint8;
+  auto writeCIRAM(uint12 addr, uint8 data) -> void;
 
-  auto readCGRAM(uint5 addr) -> uint8;
-  auto writeCGRAM(uint5 addr, uint8 data) -> void;
+  alwaysinline auto readCGRAM(uint5 addr) -> uint8;
+  alwaysinline auto writeCGRAM(uint5 addr, uint8 data) -> void;
 
-  auto readIO(uint16 addr) -> uint8;
+  auto readIO(uint16 addr, uint8 data) -> uint8;
   auto writeIO(uint16 addr, uint8 data) -> void;
 
   //render.cpp
   auto enable() const -> bool;
-  auto loadCHR(uint16 addr) -> uint8;
+  auto nametableAddress() const -> uint;
+  auto scrollX() const -> uint;
+  auto scrollY() const -> uint;
+
+  auto loadCHR(uint14 addr) -> uint8;
+
+  auto scrollX_increment() -> void;
+  auto scrollY_increment() -> void;
 
   auto renderPixel() -> void;
   auto renderSprite() -> void;
@@ -31,13 +73,22 @@ struct PPU : Thread {
   //serialization.cpp
   auto serialize(serializer&) -> void;
 
+  uint8 ciram[4096];  //2048 in Famicom and PlayChoice-10
+  uint8 cgram[32];
+  uint8 oam[256];
+
+  bool side;  //VS. System; 0: main, 1: sub
+
+  static const uint9 RP2C03[16 * 4];
+  static const uint9 RP2C04_0001[16 * 4];
+  static const uint9 RP2C04_0002[16 * 4];
+  static const uint9 RP2C04_0003[16 * 4];
+  static const uint9 RP2C04_0004[16 * 4];
+
   struct IO {
-    //internal
+    uint14 chrAddressBus;
     uint8 mdr;
-
-    uint1 field;
-    uint lx;
-    uint ly;
+    uint mdrDecay[8];
 
     uint8 busData;
 
@@ -59,27 +110,27 @@ struct PPU : Thread {
     bool nmiHold;
     bool nmiFlag;
 
-    //$2000
-    uint vramIncrement;
-    uint spriteAddress;
-    uint bgAddress;
-    uint spriteHeight;
-    bool masterSelect;
+    //$2000  PPUCTRL
     bool nmiEnable;
+    bool masterSelect;
+    uint spriteHeight;
+    uint bgAddress;
+    uint objAddress;
+    uint vramIncrement;
 
-    //$2001
-    bool grayscale;
-    bool bgEdgeEnable;
-    bool spriteEdgeEnable;
-    bool bgEnable;
-    bool spriteEnable;
+    //$2001  PPUMASK
     uint3 emphasis;
+    bool objEnable;
+    bool bgEnable;
+    bool objEdgeEnable;
+    bool bgEdgeEnable;
+    bool grayscale;
 
-    //$2002
-    bool spriteOverflow;
+    //$2002  PPUSTATUS
     bool spriteZeroHit;
+    bool spriteOverflow;
 
-    //$2003
+    //$2003  OAMADDR
     uint8 oamAddress;
   } io;
 
@@ -108,13 +159,20 @@ struct PPU : Thread {
 
     OAM oam[8];   //primary
     OAM soam[8];  //secondary
-  } latch;
+  } l;
 
-  uint8 ciram[2048];
-  uint8 cgram[32];
-  uint8 oam[256];
+privileged:
+  uint32* output = nullptr;
+
+  uint4 _extOut;
+
+  auto scanline() -> void;
+  auto frame() -> void;
+  auto refresh() -> void;
 
-  uint32 buffer[256 * 262];
+  friend class Zapper;
+  friend class BeamGun;
+  friend class System;
 };
 
 extern PPU ppu;
diff --git a/higan/fc/ppu/render.cpp b/higan/fc/ppu/render.cpp
index ec5863b..935a068 100644
--- a/higan/fc/ppu/render.cpp
+++ b/higan/fc/ppu/render.cpp
@@ -1,24 +1,23 @@
 auto PPU::enable() const -> bool {
-  return io.bgEnable || io.spriteEnable;
+  return io.bgEnable || io.objEnable;
 }
 
-auto PPU::loadCHR(uint16 addr) -> uint8 {
-  return enable() ? cartridge.readCHR(addr) : (uint8)0x00;
+auto PPU::loadCHR(uint14 addr) -> uint8 {
+  return enable() ? cartridge.readCHR(io.chrAddressBus = addr) : (uint8)0x00;
 }
 
 auto PPU::renderPixel() -> void {
-  uint32* output = buffer + io.ly * 256;
-
-  uint x = io.lx - 1;
+  if(vcounter() >= 240) return;
+  uint x = hcounter() - 1;
   uint mask = 0x8000 >> (io.v.fineX + (x & 7));
   uint palette = 0;
   uint objectPalette = 0;
   bool objectPriority = 0;
 
-  palette |= latch.tiledataLo & mask ? 1 : 0;
-  palette |= latch.tiledataHi & mask ? 2 : 0;
+  palette |= l.tiledataLo & mask ? 1 : 0;
+  palette |= l.tiledataHi & mask ? 2 : 0;
   if(palette) {
-    uint attr = latch.attribute;
+    uint attr = l.attribute;
     if(mask >= 256) attr >>= 2;
     palette |= (attr & 3) << 2;
   }
@@ -26,25 +25,25 @@ auto PPU::renderPixel() -> void {
   if(!io.bgEnable) palette = 0;
   if(!io.bgEdgeEnable && x < 8) palette = 0;
 
-  if(io.spriteEnable)
+  if(io.objEnable)
   for(int sprite = 7; sprite >= 0; sprite--) {
-    if(!io.spriteEdgeEnable && x < 8) continue;
-    if(latch.oam[sprite].id == 64) continue;
+    if(!io.objEdgeEnable && x < 8) continue;
+    if(l.oam[sprite].id == 64) continue;
 
-    uint spriteX = x - latch.oam[sprite].x;
+    uint spriteX = x - l.oam[sprite].x;
     if(spriteX >= 8) continue;
 
-    if(latch.oam[sprite].attr & 0x40) spriteX ^= 7;
+    if(l.oam[sprite].attr & 0x40) spriteX ^= 7;
     uint mask = 0x80 >> spriteX;
     uint spritePalette = 0;
-    spritePalette |= latch.oam[sprite].tiledataLo & mask ? 1 : 0;
-    spritePalette |= latch.oam[sprite].tiledataHi & mask ? 2 : 0;
+    spritePalette |= l.oam[sprite].tiledataLo & mask ? 1 : 0;
+    spritePalette |= l.oam[sprite].tiledataHi & mask ? 2 : 0;
     if(spritePalette == 0) continue;
 
-    if(latch.oam[sprite].id == 0 && palette && x != 255) io.spriteZeroHit = 1;
-    spritePalette |= (latch.oam[sprite].attr & 3) << 2;
+    if(l.oam[sprite].id == 0 && palette && x != 255) io.spriteZeroHit = 1;
+    spritePalette |= (l.oam[sprite].attr & 3) << 2;
 
-    objectPriority = latch.oam[sprite].attr & 0x20;
+    objectPriority = l.oam[sprite].attr & 0x20;
     objectPalette = 16 + spritePalette;
   }
 
@@ -52,24 +51,35 @@ auto PPU::renderPixel() -> void {
     if(palette == 0 || objectPriority == 0) palette = objectPalette;
   }
 
-  if(!enable()) palette = 0;
-  output[x] = io.emphasis << 6 | readCGRAM(palette);
+  if(version >= Version::RP2C07 && (x < 2 || x >= 254 || vcounter() <= 0)) {
+    output[vcounter() * 256 + x] = (io.emphasis << 6) | 0x1d;
+    return;
+  } else if(!enable()) {
+    if((io.v.addressHi & 0x3f) != 0x3f) palette = extIn();
+    else palette = io.v.addressLo;
+    _extOut = io.v.addressLo;
+  } else {
+    if(!palette) palette = extIn();
+    _extOut = 0;
+  }
+  output[vcounter() * 256 + x] = io.emphasis << 6 | readCGRAM(palette);
 }
 
 auto PPU::renderSprite() -> void {
   if(!enable()) return;
 
-  uint n = latch.oamIterator++;
-  int ly = io.ly == 261 ? -1 : io.ly;
+  uint n = l.oamIterator++;
+  uint lastScanline = system.region() == System::Region::NTSC ? 261 : 311;
+  int ly = vcounter() == lastScanline ? -1 : (int)vcounter();
   uint y = ly - oam[n * 4 + 0];
 
   if(y >= io.spriteHeight) return;
-  if(latch.oamCounter == 8) {
+  if(l.oamCounter == 8) {
     io.spriteOverflow = 1;
     return;
   }
 
-  auto& o = latch.soam[latch.oamCounter++];
+  auto& o = l.soam[l.oamCounter++];
   o.id   = n;
   o.y    = oam[n * 4 + 0];
   o.tile = oam[n * 4 + 1];
@@ -78,13 +88,14 @@ auto PPU::renderSprite() -> void {
 }
 
 auto PPU::renderScanline() -> void {
+  uint lastScanline = system.region() == System::Region::NTSC ? 261 : 311;
   //Vblank
-  if(io.ly >= 240 && io.ly <= 260) return step(341), scanline();
+  if((vcounter() >= 240 && vcounter() < lastScanline)) return step(341), scanline();
 
-  latch.oamIterator = 0;
-  latch.oamCounter = 0;
+  l.oamIterator = 0;
+  l.oamCounter = 0;
 
-  for(auto n : range(8)) latch.soam[n] = {};
+  for(auto n : range(8)) l.soam[n] = {};
 
   //  0
   step(1);
@@ -105,8 +116,8 @@ auto PPU::renderScanline() -> void {
     renderPixel();
     step(1);
 
-    if(enable() && ++io.v.tileX == 0) io.v.nametableX++;
-    if(enable() && tile == 31 && ++io.v.fineY == 0 && ++io.v.tileY == 30) io.v.nametableY++, io.v.tileY = 0;
+    if(enable() && ++io.v.tileX == 0) io.v.nametableX ^= 1;
+    if(enable() && tile == 31 && ++io.v.fineY == 0 && ++io.v.tileY == 30) io.v.nametableY ^= 1, io.v.tileY = 0;
     renderPixel();
     renderSprite();
     step(1);
@@ -126,13 +137,13 @@ auto PPU::renderScanline() -> void {
     renderSprite();
     step(1);
 
-    latch.nametable = latch.nametable << 8 | nametable;
-    latch.attribute = latch.attribute << 2 | (attribute & 3);
-    latch.tiledataLo = latch.tiledataLo << 8 | tiledataLo;
-    latch.tiledataHi = latch.tiledataHi << 8 | tiledataHi;
+    l.nametable = l.nametable << 8 | nametable;
+    l.attribute = l.attribute << 2 | (attribute & 3);
+    l.tiledataLo = l.tiledataLo << 8 | tiledataLo;
+    l.tiledataHi = l.tiledataHi << 8 | tiledataHi;
   }
 
-  for(auto n : range(8)) latch.oam[n] = latch.soam[n];
+  for(auto n : range(8)) l.oam[n] = l.soam[n];
 
   //257-320
   for(uint sprite : range(8)) {
@@ -148,21 +159,21 @@ auto PPU::renderScanline() -> void {
 
     uint attribute = loadCHR(0x23c0 | io.v.nametable << 10 | (io.v.tileY >> 2) << 3 | io.v.tileX >> 2);
     uint tileaddr = io.spriteHeight == 8
-    ? io.spriteAddress + latch.oam[sprite].tile * 16
-    : (latch.oam[sprite].tile & ~1) * 16 + (latch.oam[sprite].tile & 1) * 0x1000;
+    ? io.objAddress + l.oam[sprite].tile * 16
+    : (l.oam[sprite].tile & ~1) * 16 + (l.oam[sprite].tile & 1) * 0x1000;
     step(2);
 
-    uint spriteY = (io.ly - latch.oam[sprite].y) & (io.spriteHeight - 1);
-    if(latch.oam[sprite].attr & 0x80) spriteY ^= io.spriteHeight - 1;
+    uint spriteY = (vcounter() - l.oam[sprite].y) & (io.spriteHeight - 1);
+    if(l.oam[sprite].attr & 0x80) spriteY ^= io.spriteHeight - 1;
     tileaddr += spriteY + (spriteY & 8);
 
-    latch.oam[sprite].tiledataLo = loadCHR(tileaddr + 0);
+    l.oam[sprite].tiledataLo = loadCHR(tileaddr + 0);
     step(2);
 
-    latch.oam[sprite].tiledataHi = loadCHR(tileaddr + 8);
+    l.oam[sprite].tiledataHi = loadCHR(tileaddr + 8);
     step(2);
 
-    if(enable() && sprite == 6 && io.ly == 261) {
+    if(enable() && sprite == 6 && vcounter() == lastScanline) {
       //305
       io.v.address = io.t.address;
     }
@@ -179,7 +190,7 @@ auto PPU::renderScanline() -> void {
     if(io.v.tileX & 2) attribute >>= 2;
     step(1);
 
-    if(enable() && ++io.v.tileX == 0) io.v.nametableX++;
+    if(enable() && ++io.v.tileX == 0) io.v.nametableX ^= 1;
     step(1);
 
     uint tiledataLo = loadCHR(tileaddr + 0);
@@ -188,24 +199,22 @@ auto PPU::renderScanline() -> void {
     uint tiledataHi = loadCHR(tileaddr + 8);
     step(2);
 
-    latch.nametable = latch.nametable << 8 | nametable;
-    latch.attribute = latch.attribute << 2 | (attribute & 3);
-    latch.tiledataLo = latch.tiledataLo << 8 | tiledataLo;
-    latch.tiledataHi = latch.tiledataHi << 8 | tiledataHi;
+    l.nametable = l.nametable << 8 | nametable;
+    l.attribute = l.attribute << 2 | (attribute & 3);
+    l.tiledataLo = l.tiledataLo << 8 | tiledataLo;
+    l.tiledataHi = l.tiledataHi << 8 | tiledataHi;
   }
 
   //337-338
   loadCHR(0x2000 | (uint12)io.v.address);
-  step(1);
-  bool skip = enable() && io.field == 1 && io.ly == 261;
-  step(1);
+  step(2);
 
   //339
   loadCHR(0x2000 | (uint12)io.v.address);
   step(1);
 
   //340
-  if(!skip) step(1);
+  if(hcounter() > 0) step(1);
 
   return scanline();
 }
diff --git a/higan/fc/ppu/serialization.cpp b/higan/fc/ppu/serialization.cpp
index 15ea30f..e58fef8 100644
--- a/higan/fc/ppu/serialization.cpp
+++ b/higan/fc/ppu/serialization.cpp
@@ -1,11 +1,16 @@
+auto PPUcounter::serialize(serializer& s) -> void {
+  s.integer(status.field);
+  s.integer(status.hcounter);
+  s.integer(status.vcounter);
+}
+
 auto PPU::serialize(serializer& s) -> void {
   Thread::serialize(s);
+  PPUcounter::serialize(s);
 
+  s.integer(io.chrAddressBus);
   s.integer(io.mdr);
-
-  s.integer(io.field);
-  s.integer(io.lx);
-  s.integer(io.ly);
+  s.array(io.mdrDecay);
 
   s.integer(io.busData);
 
@@ -16,7 +21,7 @@ auto PPU::serialize(serializer& s) -> void {
   s.integer(io.nmiFlag);
 
   s.integer(io.vramIncrement);
-  s.integer(io.spriteAddress);
+  s.integer(io.objAddress);
   s.integer(io.bgAddress);
   s.integer(io.spriteHeight);
   s.integer(io.masterSelect);
@@ -24,9 +29,9 @@ auto PPU::serialize(serializer& s) -> void {
 
   s.integer(io.grayscale);
   s.integer(io.bgEdgeEnable);
-  s.integer(io.spriteEdgeEnable);
+  s.integer(io.objEdgeEnable);
   s.integer(io.bgEnable);
-  s.integer(io.spriteEnable);
+  s.integer(io.objEnable);
   s.integer(io.emphasis);
 
   s.integer(io.spriteOverflow);
@@ -34,22 +39,20 @@ auto PPU::serialize(serializer& s) -> void {
 
   s.integer(io.oamAddress);
 
-  s.integer(latch.nametable);
-  s.integer(latch.attribute);
-  s.integer(latch.tiledataLo);
-  s.integer(latch.tiledataHi);
+  s.integer(l.nametable);
+  s.integer(l.attribute);
+  s.integer(l.tiledataLo);
+  s.integer(l.tiledataHi);
 
-  s.integer(latch.oamIterator);
-  s.integer(latch.oamCounter);
+  s.integer(l.oamIterator);
+  s.integer(l.oamCounter);
 
-  for(auto& o : latch.oam) o.serialize(s);
-  for(auto& o : latch.soam) o.serialize(s);
+  for(auto& o : l.oam) o.serialize(s);
+  for(auto& o : l.soam) o.serialize(s);
 
-  s.array(ciram);
+  s.array(ciram, !system.vs() ? 0x0800 : 0x1000);
   s.array(cgram);
   s.array(oam);
-
-  s.array(buffer);
 }
 
 auto PPU::OAM::serialize(serializer& s) -> void {
diff --git a/higan/fc/system/peripherals.cpp b/higan/fc/system/peripherals.cpp
index 35aab59..08c96b0 100644
--- a/higan/fc/system/peripherals.cpp
+++ b/higan/fc/system/peripherals.cpp
@@ -3,13 +3,17 @@ Peripherals peripherals;
 auto Peripherals::unload() -> void {
   delete controllerPort1;
   delete controllerPort2;
+  delete expansionPort;
   controllerPort1 = nullptr;
   controllerPort2 = nullptr;
+  expansionPort = nullptr;
 }
 
 auto Peripherals::reset() -> void {
   connect(ID::Port::Controller1, settings.controllerPort1);
   connect(ID::Port::Controller2, settings.controllerPort2);
+  connect(ID::Port::Expansion, settings.expansionPort);
+  connect(ID::Port::Arcade, settings.arcadePanel);
 }
 
 auto Peripherals::connect(uint port, uint device) -> void {
@@ -19,8 +23,17 @@ auto Peripherals::connect(uint port, uint device) -> void {
 
     delete controllerPort1;
     switch(device) { default:
-    case ID::Device::None: controllerPort1 = new Controller(0); break;
-    case ID::Device::Gamepad: controllerPort1 = new Gamepad(0); break;
+    case ID::Device::None:        controllerPort1 = new Controller(0); break;
+    case ID::Device::Gamepad:     controllerPort1 = new Gamepad(0); break;
+    case ID::Device::FourScore:   controllerPort1 = new FourScore(0); break;
+    case ID::Device::SNESGamepad: controllerPort1 = new SNESGamepad(0); break;
+    case ID::Device::Mouse:       controllerPort1 = new Mouse(0); break;
+    }
+
+    if(device == ID::Device::FourScore && settings.controllerPort2 != ID::Device::FourScore) {
+      connect(ID::Port::Controller2, ID::Device::FourScore);
+    } else if(device != ID::Device::FourScore && settings.controllerPort2 == ID::Device::FourScore) {
+      connect(ID::Port::Controller2, ID::Device::None);
     }
   }
 
@@ -30,17 +43,50 @@ auto Peripherals::connect(uint port, uint device) -> void {
 
     delete controllerPort2;
     switch(device) { default:
-    case ID::Device::None: controllerPort2 = new Controller(1); break;
-    case ID::Device::Gamepad: controllerPort2 = new Gamepad(1); break;
+    case ID::Device::None:        controllerPort2 = new Controller(1); break;
+    case ID::Device::Gamepad:     controllerPort2 = new Gamepad(1); break;
+    case ID::Device::GamepadMic:  controllerPort2 = new GamepadMic(1); break;
+    case ID::Device::FourScore:   controllerPort2 = new FourScore(1); break;
+    case ID::Device::Zapper:      controllerPort2 = new Zapper(1); break;
+    case ID::Device::PowerPad:    controllerPort2 = new PowerPad(1); break;
+    case ID::Device::Vaus:        controllerPort2 = new Vaus(1); break;
+    case ID::Device::SNESGamepad: controllerPort2 = new SNESGamepad(1); break;
+    case ID::Device::Mouse:       controllerPort2 = new Mouse(1); break;
+    }
+
+    if(device == ID::Device::FourScore && settings.controllerPort1 != ID::Device::FourScore) {
+      connect(ID::Port::Controller1, ID::Device::FourScore);
+    } else if(device != ID::Device::FourScore && settings.controllerPort1 == ID::Device::FourScore) {
+      connect(ID::Port::Controller1, ID::Device::None);
     }
   }
 
   if(port == ID::Port::Expansion) {
     settings.expansionPort = device;
     if(!system.loaded()) return;
+
+    delete expansionPort;
+    switch(device) { default:
+    case ID::Device::None:           expansionPort = new Expansion; break;
+    case ID::Device::GamepadE:       expansionPort = new GamepadE; break;
+    case ID::Device::JoyPair:        expansionPort = new JoyPair; break;
+    case ID::Device::FourPlayers:    expansionPort = new FourPlayers; break;
+    case ID::Device::BeamGun:        expansionPort = new BeamGun; break;
+    case ID::Device::FamilyKeyboard: expansionPort = new FamilyKeyboard; break;
+    case ID::Device::FamilyTrainer:  expansionPort = new FamilyTrainer; break;
+    case ID::Device::VausE:          expansionPort = new VausE; break;
+    case ID::Device::SFCGamepad:     expansionPort = new SFCGamepad; break;
+    case ID::Device::MouseE:         expansionPort = new MouseE; break;
+    }
+  }
+
+  if(port == ID::Port::Arcade) {
+    settings.arcadePanel = device;
+    if(!system.loaded()) return;
   }
 
   cpu.peripherals.reset();
   cpu.peripherals.append(controllerPort1);
   cpu.peripherals.append(controllerPort2);
+  cpu.peripherals.append(expansionPort);
 }
diff --git a/higan/fc/system/serialization.cpp b/higan/fc/system/serialization.cpp
index ddfe098..b5be797 100644
--- a/higan/fc/system/serialization.cpp
+++ b/higan/fc/system/serialization.cpp
@@ -1,10 +1,10 @@
 auto System::serialize() -> serializer {
-  serializer s(_serializeSize);
+  serializer s(serializeSize);
 
   uint signature = 0x31545342;
-  char version[16] = {0};
-  char hash[64] = {0};
-  char description[512] = {0};
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
   memory::copy(&version, (const char*)Emulator::SerializerVersion, Emulator::SerializerVersion.size());
   memory::copy(&hash, (const char*)cartridge.sha256(), 64);
 
@@ -18,10 +18,10 @@ auto System::serialize() -> serializer {
 }
 
 auto System::unserialize(serializer& s) -> bool {
-  uint signature;
-  char version[16];
-  char hash[64];
-  char description[512];
+  uint signature = 0;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
 
   s.integer(signature);
   s.array(version);
@@ -36,24 +36,33 @@ auto System::unserialize(serializer& s) -> bool {
   return true;
 }
 
+//internal
+
 auto System::serialize(serializer& s) -> void {
+  s.integer((uint&)information.region);
 }
 
 auto System::serializeAll(serializer& s) -> void {
-  system.serialize(s);
   cartridge.serialize(s);
+  system.serialize(s);
   cpu.serialize(s);
   apu.serialize(s);
   ppu.serialize(s);
+
+  if(model() == Model::VSSystem) vssystem.serialize(s);
+  if(model() == Model::PlayChoice10) playchoice10.serialize(s);
 }
 
+//perform dry-run state save:
+//determines exactly how many bytes are needed to save state for this cartridge,
+//as amount varies per game (eg different RAM sizes, etc.)
 auto System::serializeInit() -> void {
   serializer s;
 
   uint signature = 0;
-  char version[16];
-  char hash[64];
-  char description[512];
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
 
   s.integer(signature);
   s.array(version);
@@ -61,5 +70,5 @@ auto System::serializeInit() -> void {
   s.array(description);
 
   serializeAll(s);
-  _serializeSize = s.size();
+  serializeSize = s.size();
 }
diff --git a/higan/fc/system/system.cpp b/higan/fc/system/system.cpp
index 05ae377..c67dcbc 100644
--- a/higan/fc/system/system.cpp
+++ b/higan/fc/system/system.cpp
@@ -2,15 +2,18 @@
 
 namespace Famicom {
 
-#include "peripherals.cpp"
-#include "video.cpp"
-#include "serialization.cpp"
 System system;
 Scheduler scheduler;
 Cheat cheat;
+#include "video.cpp"
+#include "peripherals.cpp"
+#include "serialization.cpp"
 
 auto System::run() -> void {
-  if(scheduler.enter() == Scheduler::Event::Frame) ppu.refresh();
+  if(scheduler.enter() == Scheduler::Event::Frame) {
+    ppu.refresh();
+    if(pc10()) playchoice10.videoCircuit.refresh();
+  }
 }
 
 auto System::runToSave() -> void {
@@ -18,30 +21,99 @@ auto System::runToSave() -> void {
   scheduler.synchronize(apu);
   scheduler.synchronize(ppu);
   scheduler.synchronize(cartridge);
+  for(auto coprocessor : cpu.coprocessors) scheduler.synchronize(*coprocessor);
   for(auto peripheral : cpu.peripherals) scheduler.synchronize(*peripheral);
 }
 
-auto System::load() -> bool {
+auto System::init() -> void {
+  assert(interface != nullptr);
+
+  vssystem.init();
+  playchoice10.init();
+  famicombox.init();
+}
+
+auto System::term() -> void {
+}
+
+auto System::load(Model model) -> bool {
   information = Information();
+
+  information.model = model;
+
   if(auto fp = interface->open(ID::System, "manifest.bml", File::Read, File::Required)) {
     information.manifest = fp->reads();
-  } else {
-    return false;
-  }
+  } else return false;
+
   auto document = BML::unserialize(information.manifest);
+  auto system = document["system"];
+
+  bus.reset();
   if(!cartridge.load()) return false;
-  information.colorburst = Emulator::Constants::Colorburst::NTSC;
+
+  switch(cartridge.region()) {
+  case Cartridge::Region::NTSC:  information.region = Region::NTSC;  break;
+  case Cartridge::Region::PAL:   information.region = Region::PAL;   break;
+  case Cartridge::Region::Dendy: information.region = Region::Dendy; break;
+  }
+  if(system["region"].text() == "NTSC" ) information.region = Region::NTSC;
+  if(system["region"].text() == "PAL"  ) information.region = Region::PAL;
+  if(system["region"].text() == "Dendy") information.region = Region::Dendy;
+
+  if(!cpu.load(system)) return false;
+  if(!apu.load(system)) return false;
+  if(!ppu.load(system)) return false;
+
+  information.colorburst = region() == Region::NTSC
+  ? Emulator::Constants::Colorburst::NTSC
+  : Emulator::Constants::Colorburst::PAL;
+
+  switch(model) {
+
+  case Model::Famicom: {
+    peripherals.connect(ID::Port::Arcade, ID::Device::None);
+    break;
+  }
+
+  case Model::VSSystem: {
+    vssystem.load();
+    peripherals.connect(ID::Port::Arcade, ID::Device::VSPanel);
+    break;
+  }
+
+  case Model::PlayChoice10: {
+    if(!playchoice10.load(system)) return false;
+    peripherals.connect(ID::Port::Arcade, ID::Device::None);
+    break;
+  }
+
+  case Model::FamicomBox: {
+    if(!famicombox.load(system)) return false;
+    peripherals.connect(ID::Port::Arcade, ID::Device::None);
+    break;
+  }
+
+  }
+
   serializeInit();
   return information.loaded = true;
 }
 
 auto System::save() -> void {
+  if(!loaded()) return;
   cartridge.save();
 }
 
 auto System::unload() -> void {
   if(!loaded()) return;
   peripherals.unload();
+
+  switch(model()) {
+  case Model::VSSystem:     vssystem.unload(); break;
+  case Model::PlayChoice10: playchoice10.unload(); break;
+  case Model::FamicomBox:   famicombox.unload(); break;
+  }
+
   cartridge.unload();
   information.loaded = false;
 }
@@ -51,12 +123,21 @@ auto System::power() -> void {
   cpu.power();
   apu.power();
   ppu.power();
+
+  switch(model()) {
+  case Model::VSSystem:     vssystem.power(); break;
+  case Model::PlayChoice10: playchoice10.power(); break;
+  case Model::FamicomBox:   famicombox.power(); break;
+  }
+
+//ppu.reset();
   reset();
 }
 
 auto System::reset() -> void {
   Emulator::video.reset();
   Emulator::video.setInterface(interface);
+  //Emulator::video.resize() is called in configureVideoEffects()
   configureVideoPalette();
   configureVideoEffects();
 
@@ -67,16 +148,24 @@ auto System::reset() -> void {
   cartridge.reset();
   cpu.reset();
   apu.reset();
+  //Only the NES front-loader's PPU will reset. The Famicom's and NES top-loader's PPU will not.
+  //Because of a limitation of the Scheduler, the PPU must reset when the system resets.
   ppu.reset();
-  scheduler.primary(cpu);
-  peripherals.reset();
-}
 
-auto System::init() -> void {
-  assert(interface != nullptr);
-}
+  switch(model()) {
+  case Model::VSSystem:     vssystem.reset(); break;
+  case Model::PlayChoice10: playchoice10.reset(); break;
+  case Model::FamicomBox:   famicombox.reset(); break;
+  }
 
-auto System::term() -> void {
+  switch(model()) {
+  case Model::VSSystem:     cpu.coprocessors.append(&vssystem); break;
+  case Model::PlayChoice10: cpu.coprocessors.append(&playchoice10.pc10cpu); break;
+  case Model::FamicomBox:   cpu.coprocessors.append(&famicombox); break;
+  }
+
+  scheduler.primary(cpu);
+  peripherals.reset();
 }
 
 }
diff --git a/higan/fc/system/system.hpp b/higan/fc/system/system.hpp
index c28aec4..fd0e54b 100644
--- a/higan/fc/system/system.hpp
+++ b/higan/fc/system/system.hpp
@@ -1,19 +1,29 @@
+struct Interface;
+
 struct System {
-  auto loaded() const -> bool { return information.loaded; }
-  auto colorburst() const -> double { return information.colorburst; }
+  enum class Region : uint { NTSC = 0, PAL = 1, Dendy = 2 };
+
+  inline auto loaded() const -> bool { return information.loaded; }
+  inline auto model() const -> Model { return information.model; }
+  inline auto region() const -> Region { return information.region; }
+  inline auto colorburst() const -> double { return information.colorburst; }
+
+  inline auto fc()   const { return information.model == Model::Famicom; }
+  inline auto vs()   const { return information.model == Model::VSSystem; }
+  inline auto pc10() const { return information.model == Model::PlayChoice10; }
+  inline auto fcb()  const { return information.model == Model::FamicomBox; }
 
   auto run() -> void;
   auto runToSave() -> void;
 
-  auto load() -> bool;
+  auto init() -> void;
+  auto term() -> void;
+  auto load(Model) -> bool;
   auto save() -> void;
   auto unload() -> void;
   auto power() -> void;
   auto reset() -> void;
 
-  auto init() -> void;
-  auto term() -> void;
-
   //video.cpp
   auto configureVideoPalette() -> void;
   auto configureVideoEffects() -> void;
@@ -22,18 +32,22 @@ struct System {
   auto serialize() -> serializer;
   auto unserialize(serializer&) -> bool;
 
-  auto serialize(serializer&) -> void;
-  auto serializeAll(serializer&) -> void;
-  auto serializeInit() -> void;
-
+private:
   struct Information {
+    string manifest;
     bool loaded = false;
+    Model model = Model::Famicom;
+    Region region = Region::NTSC;
     double colorburst = 0.0;
-    string manifest;
   } information;
 
-private:
-  uint _serializeSize = 0;
+  uint serializeSize = 0;
+
+  auto serialize(serializer&) -> void;
+  auto serializeAll(serializer&) -> void;
+  auto serializeInit() -> void;
+
+  friend class Cartridge;
 };
 
 struct Peripherals {
@@ -43,6 +57,7 @@ struct Peripherals {
 
   Controller* controllerPort1 = nullptr;
   Controller* controllerPort2 = nullptr;
+  Expansion* expansionPort = nullptr;
 };
 
 extern System system;
diff --git a/higan/fc/system/video.cpp b/higan/fc/system/video.cpp
index 66d0929..e6804b9 100644
--- a/higan/fc/system/video.cpp
+++ b/higan/fc/system/video.cpp
@@ -3,4 +3,12 @@ auto System::configureVideoPalette() -> void {
 }
 
 auto System::configureVideoEffects() -> void {
+  Emulator::video.setEffect(Emulator::Video::Effect::Scanlines, settings.scanlineEmulation);
+  if(fc() || fcb()) {
+    Emulator::video.resize(256, 240);
+  } else if(vs()) {
+    Emulator::video.resize(256 * vssystem.gameCount, 240);
+  } else if(pc10()) {
+    Emulator::video.resize(256, 240 + (playchoice10.screenConfig - 1) * 224);
+  }
 }
diff --git a/higan/gb/interface/interface.cpp b/higan/gb/interface/interface.cpp
index 354c25f..1f122a7 100644
--- a/higan/gb/interface/interface.cpp
+++ b/higan/gb/interface/interface.cpp
@@ -9,6 +9,7 @@ Interface::Interface() {
   interface = this;
   hook = nullptr;
 
+  information.preAlpha     = false;
   information.manufacturer = "Nintendo";
   information.name         = "Game Boy";
   information.overscan     = false;
@@ -17,10 +18,10 @@ Interface::Interface() {
   information.capability.states = true;
   information.capability.cheats = true;
 
-  media.append({ID::GameBoy,      "Game Boy",       "gb" });
-  media.append({ID::GameBoyColor, "Game Boy Color", "gbc"});
+  media.append({ID::GameBoy,      "Game Boy",       "gb",  Domain::Portable});
+  media.append({ID::GameBoyColor, "Game Boy Color", "gbc", Domain::Portable});
 
-  Port hardwarePort{ID::Port::Hardware, "Hardware"};
+  Port hardwarePort{ID::Port::Hardware, "Hardware", Hardwired};
 
   { Device device{ID::Device::Controls, "Controls"};
     device.inputs.append({0, "Up"    });
@@ -214,4 +215,15 @@ auto Interface::set(const string& name, const any& value) -> bool {
   return false;
 }
 
+auto Interface::exportMemory() -> void {
+  string pathname = {path(cartridge.pathID()), "debug/"};
+  directory::create(pathname);
+
+  if(auto fp = interface->open(cartridge.pathID(), "debug/work.ram", File::Write)) fp->write(cpu.wram, !system.cgb() ? 8192 : 32768);
+  if(auto fp = interface->open(cartridge.pathID(), "debug/internal.ram", File::Write)) fp->write(cpu.hram, 128);
+  if(cartridge.ram.size) if(auto fp = interface->open(cartridge.pathID(), "debug/program-save.ram", File::Write)) {
+    fp->write(cartridge.ram.data, cartridge.ram.size);
+  }
+}
+
 }
diff --git a/higan/gb/interface/interface.hpp b/higan/gb/interface/interface.hpp
index fce0be5..408e659 100644
--- a/higan/gb/interface/interface.hpp
+++ b/higan/gb/interface/interface.hpp
@@ -63,6 +63,9 @@ struct Interface : Emulator::Interface {
   auto lcdScanline() -> void;
   auto lcdOutput(uint2 color) -> void;
   auto joypWrite(bool p15, bool p14) -> void;
+
+  //debugger functions
+  auto exportMemory() -> void override;
 };
 
 struct Settings {
diff --git a/higan/gb/memory/memory.cpp b/higan/gb/memory/memory.cpp
index 51ad6ad..66ca132 100644
--- a/higan/gb/memory/memory.cpp
+++ b/higan/gb/memory/memory.cpp
@@ -39,7 +39,7 @@ auto Bus::read(uint16 addr) -> uint8 {
   uint8 data = mmio[addr]->readIO(addr);
 
   if(cheat) {
-    if(auto result = cheat.find(addr, data)) return result();
+    if(auto result = cheat.find<1>(addr, data)) return result();
   }
 
   return data;
diff --git a/higan/gba/cpu/bus.cpp b/higan/gba/cpu/bus.cpp
index 1c89df6..f7ba991 100644
--- a/higan/gba/cpu/bus.cpp
+++ b/higan/gba/cpu/bus.cpp
@@ -32,6 +32,12 @@ auto CPU::_read(uint mode, uint32 addr) -> uint32 {
     prefetchStep(1);
   }
 
+  if(cheat) {
+    if(mode & Byte) if(auto result = cheat.find<1>(addr, word)) return result();
+    if(mode & Half) if(auto result = cheat.find<2>(addr, word)) return result();
+    if(mode & Word) if(auto result = cheat.find<4>(addr, word)) return result();
+  }
+
   return word;
 }
 
diff --git a/higan/gba/cpu/io.cpp b/higan/gba/cpu/io.cpp
index cf68375..c6abf4d 100644
--- a/higan/gba/cpu/io.cpp
+++ b/higan/gba/cpu/io.cpp
@@ -61,19 +61,25 @@ auto CPU::readIO(uint32 addr) -> uint8 {
 
   //KEYINPUT
   case 0x04000130: {
-    static const uint lookup[] = {5, 4, 8, 9, 3, 2, 0, 1};
+    uint port = ID::Port::Hardware;
+    uint device = !system.orientation() ? ID::Device::HorizontalControls : ID::Device::VerticalControls;
+    static const uint lookupHorizontal[] = {5, 4, 8, 9, 3, 2, 0, 1};
+    static const uint lookupVertical[]   = {5, 4, 8, 9, 0, 1, 2, 3};
+    const uint* lookup = !system.orientation() ? lookupHorizontal : lookupVertical;
     if(auto result = player.keyinput()) return result() >> 0;
     uint8 result = 0;
-    for(uint n = 0; n < 8; n++) result |= interface->inputPoll(0, 0, lookup[n]) << n;
+    for(uint n = 0; n < 8; n++) result |= interface->inputPoll(port, device, lookup[n]) << n;
     if((result & 0xc0) == 0xc0) result &= (uint8)~0xc0;  //up+down cannot be pressed simultaneously
     if((result & 0x30) == 0x30) result &= (uint8)~0x30;  //left+right cannot be pressed simultaneously
     return result ^ 0xff;
   }
   case 0x04000131: {
     if(auto result = player.keyinput()) return result() >> 8;
+    uint port = ID::Port::Hardware;
+    uint device = !system.orientation() ? ID::Device::HorizontalControls : ID::Device::VerticalControls;
     uint8 result = 0;
-    result |= interface->inputPoll(0, 0, 7) << 0;
-    result |= interface->inputPoll(0, 0, 6) << 1;
+    result |= interface->inputPoll(port, device, 7) << 0;
+    result |= interface->inputPoll(port, device, 6) << 1;
     return result ^ 0x03;
   }
 
diff --git a/higan/gba/gba.hpp b/higan/gba/gba.hpp
index 55eddfa..9e7334d 100644
--- a/higan/gba/gba.hpp
+++ b/higan/gba/gba.hpp
@@ -6,13 +6,16 @@
 #include <emulator/emulator.hpp>
 #include <emulator/thread.hpp>
 #include <emulator/scheduler.hpp>
+#include <emulator/cheat.hpp>
 
 #include <processor/arm/arm.hpp>
 
 namespace GameBoyAdvance {
   using File = Emulator::File;
   using Scheduler = Emulator::Scheduler;
+  using Cheat = Emulator::Cheat;
   extern Scheduler scheduler;
+  extern Cheat cheat;
 
   enum : uint {           //mode flags for bus read, write:
     Nonsequential =   1,  //N cycle
diff --git a/higan/gba/interface/interface.cpp b/higan/gba/interface/interface.cpp
index cb1a480..139eddb 100644
--- a/higan/gba/interface/interface.cpp
+++ b/higan/gba/interface/interface.cpp
@@ -8,19 +8,35 @@ Settings settings;
 Interface::Interface() {
   interface = this;
 
+  information.preAlpha     = false;
   information.manufacturer = "Nintendo";
   information.name         = "Game Boy Advance";
   information.overscan     = false;
   information.resettable   = false;
 
   information.capability.states = true;
-  information.capability.cheats = false;
+  information.capability.cheats = true;
 
-  media.append({ID::GameBoyAdvance, "Game Boy Advance", "gba"});
+  media.append({ID::GameBoyAdvance, "Game Boy Advance", "gba", Domain::Portable});
 
-  Port hardwarePort{ID::Port::Hardware, "Hardware"};
+  Port hardwarePort{ID::Port::Hardware, "Hardware", PlugAndPlay};
 
-  { Device device{ID::Device::Controls, "Controls"};
+  { Device device{ID::Device::HorizontalControls, "Horizontal Controls"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "L"     });
+    device.inputs.append({0, "R"     });
+    device.inputs.append({0, "Select"});
+    device.inputs.append({0, "Start" });
+    device.inputs.append({2, "Rumble"});
+    hardwarePort.devices.append(device);
+  }
+
+  { Device device{ID::Device::VerticalControls, "Vertical Controls"};
     device.inputs.append({0, "Up"    });
     device.inputs.append({0, "Down"  });
     device.inputs.append({0, "Left"  });
@@ -47,12 +63,12 @@ auto Interface::title() -> string {
 }
 
 auto Interface::videoSize() -> VideoSize {
-  return {240, 160};
+  return {240, 240};
 }
 
 auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
   uint w = 240;
-  uint h = 160;
+  uint h = 240;
   uint m = min(width / w, height / h);
   return {w * m, h * m};
 }
@@ -108,11 +124,11 @@ auto Interface::unload() -> void {
   system.unload();
 }
 
-auto Interface::power() -> void {
-  system.power();
+auto Interface::connect(uint port, uint device) -> void {
+  if(port == 0 && system.orientation() != device) system.rotate();
 }
 
-auto Interface::reset() -> void {
+auto Interface::power() -> void {
   system.power();
 }
 
@@ -120,6 +136,11 @@ auto Interface::run() -> void {
   system.run();
 }
 
+auto Interface::rotate() -> void {
+  system.rotate();
+  deviceChanged(0, system.orientation());
+}
+
 auto Interface::serialize() -> serializer {
   system.runToSave();
   return system.serialize();
@@ -129,6 +150,10 @@ auto Interface::unserialize(serializer& s) -> bool {
   return system.unserialize(s);
 }
 
+auto Interface::cheatSet(const string_vector& list) -> void {
+  cheat.assign(list);
+}
+
 auto Interface::cap(const string& name) -> bool {
   if(name == "Blur Emulation") return true;
   if(name == "Color Emulation") return true;
@@ -157,4 +182,21 @@ auto Interface::set(const string& name, const any& value) -> bool {
   return false;
 }
 
+auto Interface::exportMemory() -> void {
+  string pathname = {path(cartridge.pathID()), "debug/"};
+  directory::create(pathname);
+
+  if(auto fp = interface->open(cartridge.pathID(), "debug/i-work.ram", File::Write)) fp->write(cpu.iwram, 32 * 1024);
+  if(auto fp = interface->open(cartridge.pathID(), "debug/e-work.ram", File::Write)) fp->write(cpu.ewram, 256 * 1024);
+  if(cartridge.sram.size) if(auto fp = interface->open(cartridge.pathID(), "debug/save-static.ram", File::Write)) {
+    fp->write(cartridge.sram.data, cartridge.sram.size);
+  }
+  if(cartridge.eeprom.size) if(auto fp = interface->open(cartridge.pathID(), "debug/save-eeprom.ram", File::Write)) {
+    fp->write(cartridge.eeprom.data, cartridge.eeprom.size);
+  }
+  if(cartridge.flash.size) if(auto fp = interface->open(cartridge.pathID(), "debug/save-flash.ram", File::Write)) {
+    fp->write(cartridge.flash.data, cartridge.flash.size);
+  }
+}
+
 }
diff --git a/higan/gba/interface/interface.hpp b/higan/gba/interface/interface.hpp
index f5eee4b..94b7fa7 100644
--- a/higan/gba/interface/interface.hpp
+++ b/higan/gba/interface/interface.hpp
@@ -11,7 +11,8 @@ struct ID {
   };};
 
   struct Device { enum : uint {
-    Controls,
+    HorizontalControls,
+    VerticalControls,
   };};
 };
 
@@ -36,16 +37,22 @@ struct Interface : Emulator::Interface {
   auto save() -> void override;
   auto unload() -> void override;
 
+  auto connect(uint port, uint device) -> void override;
   auto power() -> void override;
-  auto reset() -> void override;
   auto run() -> void override;
+  auto rotate() -> void override;
 
   auto serialize() -> serializer override;
   auto unserialize(serializer&) -> bool override;
 
+  auto cheatSet(const string_vector&) -> void override;
+
   auto cap(const string& name) -> bool override;
   auto get(const string& name) -> any override;
   auto set(const string& name, const any& value) -> bool override;
+
+  //debugger functions
+  auto exportMemory() -> void override;
 };
 
 struct Settings {
diff --git a/higan/gba/ppu/ppu.cpp b/higan/gba/ppu/ppu.cpp
index 7b926d0..553845b 100644
--- a/higan/gba/ppu/ppu.cpp
+++ b/higan/gba/ppu/ppu.cpp
@@ -182,7 +182,7 @@ auto PPU::frame() -> void {
 }
 
 auto PPU::refresh() -> void {
-  Emulator::video.refresh(output, 240 * sizeof(uint32), 240, 160);
+  Emulator::video.refreshRegion(output, 240 * sizeof(uint32), 0, (240 - 160) / 2, 240, 160);
 }
 
 }
diff --git a/higan/gba/system/system.cpp b/higan/gba/system/system.cpp
index dfc66e3..83fbfee 100644
--- a/higan/gba/system/system.cpp
+++ b/higan/gba/system/system.cpp
@@ -8,6 +8,7 @@ namespace GameBoyAdvance {
 BIOS bios;
 System system;
 Scheduler scheduler;
+Cheat cheat;
 
 auto System::init() -> void {
 }
@@ -18,6 +19,7 @@ auto System::term() -> void {
 auto System::power() -> void {
   Emulator::video.reset();
   Emulator::video.setInterface(interface);
+  Emulator::video.resize(240, 240);
   configureVideoPalette();
   configureVideoEffects();
 
@@ -48,6 +50,7 @@ auto System::load() -> bool {
 
   if(!cartridge.load()) return false;
   serializeInit();
+  _orientation = 0;
   return _loaded = true;
 }
 
@@ -72,4 +75,9 @@ auto System::runToSave() -> void {
   scheduler.synchronize(apu);
 }
 
+auto System::rotate() -> void {
+  _orientation = !_orientation;
+  configureVideoEffects();
+}
+
 }
diff --git a/higan/gba/system/system.hpp b/higan/gba/system/system.hpp
index 78cdd9d..63396f8 100644
--- a/higan/gba/system/system.hpp
+++ b/higan/gba/system/system.hpp
@@ -16,6 +16,7 @@ struct BIOS {
 
 struct System {
   auto loaded() const -> bool { return _loaded; }
+  auto orientation() const -> bool { return _orientation; }
 
   auto init() -> void;
   auto term() -> void;
@@ -25,6 +26,7 @@ struct System {
   auto power() -> void;
   auto run() -> void;
   auto runToSave() -> void;
+  auto rotate() -> void;
 
   //video.cpp
   auto configureVideoPalette() -> void;
@@ -43,6 +45,7 @@ struct System {
   } information;
 
   bool _loaded = false;
+  bool _orientation = 0;  //0 = horizontal, 1 = vertical
   uint _serializeSize = 0;
 };
 
diff --git a/higan/gba/system/video.cpp b/higan/gba/system/video.cpp
index f77e7ae..d981e15 100644
--- a/higan/gba/system/video.cpp
+++ b/higan/gba/system/video.cpp
@@ -4,4 +4,6 @@ auto System::configureVideoPalette() -> void {
 
 auto System::configureVideoEffects() -> void {
   Emulator::video.setEffect(Emulator::Video::Effect::InterframeBlending, settings.blurEmulation);
+  Emulator::video.setEffect(Emulator::Video::Effect::Rotation, !orientation() ? 0 : 3);
+  Emulator::video.clear();
 }
diff --git a/higan/md/bus/bus.cpp b/higan/md/bus/bus.cpp
index c69c180..7a6602c 100644
--- a/higan/md/bus/bus.cpp
+++ b/higan/md/bus/bus.cpp
@@ -51,6 +51,8 @@ auto BusCPU::writeWord(uint24 addr, uint16 data) -> void {
 
 auto BusCPU::readIO(uint24 addr) -> uint16 {
   switch(addr & ~1) {
+  case 0xa10000: return 0x00a0;  //Overseas NTSC (North America), no Mega-CD
+
   case 0xa10002: return peripherals.controllerPort1->readData();
   case 0xa10004: return peripherals.controllerPort2->readData();
   case 0xa10006: return peripherals.extensionPort->readData();
diff --git a/higan/md/controller/control-pad/control-pad.cpp b/higan/md/controller/control-pad/control-pad.cpp
new file mode 100644
index 0000000..e7995d5
--- /dev/null
+++ b/higan/md/controller/control-pad/control-pad.cpp
@@ -0,0 +1,31 @@
+ControlPad::ControlPad(uint port) : Controller(port) {
+  select = 1;
+}
+
+auto ControlPad::readData() -> uint8 {
+  uint6 data;
+
+  if(select == 0) {
+    data.bit(0) = interface->inputPoll(port, ID::Device::ControlPad, Up);
+    data.bit(1) = interface->inputPoll(port, ID::Device::ControlPad, Down);
+    data.bit(2) = 1;
+    data.bit(3) = 1;
+    data.bit(4) = interface->inputPoll(port, ID::Device::ControlPad, A);
+    data.bit(5) = interface->inputPoll(port, ID::Device::ControlPad, Start);
+  } else {
+    data.bit(0) = interface->inputPoll(port, ID::Device::ControlPad, Up);
+    data.bit(1) = interface->inputPoll(port, ID::Device::ControlPad, Down);
+    data.bit(2) = interface->inputPoll(port, ID::Device::ControlPad, Left);
+    data.bit(3) = interface->inputPoll(port, ID::Device::ControlPad, Right);
+    data.bit(4) = interface->inputPoll(port, ID::Device::ControlPad, B);
+    data.bit(5) = interface->inputPoll(port, ID::Device::ControlPad, C);
+  }
+
+  data = ~data;
+  return latch << 7 | select << 6 | data;
+}
+
+auto ControlPad::writeData(uint8 data) -> void {
+  select = data.bit(6);
+  latch  = data.bit(7);
+}
diff --git a/higan/md/controller/gamepad/gamepad.hpp b/higan/md/controller/control-pad/control-pad.hpp
similarity index 58%
rename from higan/md/controller/gamepad/gamepad.hpp
rename to higan/md/controller/control-pad/control-pad.hpp
index f0e9311..6bd061f 100644
--- a/higan/md/controller/gamepad/gamepad.hpp
+++ b/higan/md/controller/control-pad/control-pad.hpp
@@ -1,9 +1,9 @@
-struct Gamepad : Controller {
+struct ControlPad : Controller {
   enum : uint {
-    Up, Down, Left, Right, A, B, C, X, Y, Z, Start,
+    Up, Down, Left, Right, A, B, C, Start,
   };
 
-  Gamepad(uint port);
+  ControlPad(uint port);
 
   auto readData() -> uint8 override;
   auto writeData(uint8 data) -> void override;
diff --git a/higan/md/controller/controller.cpp b/higan/md/controller/controller.cpp
index 96195fb..4a734df 100644
--- a/higan/md/controller/controller.cpp
+++ b/higan/md/controller/controller.cpp
@@ -2,13 +2,15 @@
 
 namespace MegaDrive {
 
-#include "gamepad/gamepad.cpp"
+#include "control-pad/control-pad.cpp"
+#include "fighting-pad-6b/fighting-pad-6b.cpp"
 
 Controller::Controller(uint port) : port(port) {
   if(!handle()) create(Controller::Enter, 100);
 }
 
 Controller::~Controller() {
+  scheduler.remove(*this);
 }
 
 auto Controller::Enter() -> void {
diff --git a/higan/md/controller/controller.hpp b/higan/md/controller/controller.hpp
index a2f2301..41bc35d 100644
--- a/higan/md/controller/controller.hpp
+++ b/higan/md/controller/controller.hpp
@@ -1,9 +1,26 @@
+//Mega Drive controller port pinout:
+//  ___________________
+// /(1) (2) (3) (4) (5)\
+//  \ (6) (7) (8) (9) /
+//   \---------------/
+//
+// pin  name   port1        port2
+//  1:  up     $a10003.d0   $a10005.d0
+//  2:  down   $a10003.d1   $a10005.d1
+//  3:  left   $a10003.d2   $a10005.d2
+//  4:  right  $a10003.d3   $a10005.d3
+//  5:  +5v
+//  6:  tl     $a10003.d4   $a10005.d4
+//  7:  th     $a10003.d6   $a10005.d6
+//  8:  gnd
+//  9:  tr     $a10003.d5   $a10005.d5
+
 struct Controller : Thread {
   Controller(uint port);
   virtual ~Controller();
 
   static auto Enter() -> void;
-  auto main() -> void;
+  virtual auto main() -> void;
 
   virtual auto readData() -> uint8 { return 0xff; }
   virtual auto writeData(uint8 data) -> void {}
@@ -14,4 +31,5 @@ struct Controller : Thread {
   const uint port;
 };
 
-#include "gamepad/gamepad.hpp"
+#include "control-pad/control-pad.hpp"
+#include "fighting-pad-6b/fighting-pad-6b.hpp"
diff --git a/higan/md/controller/fighting-pad-6b/fighting-pad-6b.cpp b/higan/md/controller/fighting-pad-6b/fighting-pad-6b.cpp
new file mode 100644
index 0000000..a7052e2
--- /dev/null
+++ b/higan/md/controller/fighting-pad-6b/fighting-pad-6b.cpp
@@ -0,0 +1,55 @@
+FightingPad6B::FightingPad6B(uint port) : Controller(port) {
+  create(Controller::Enter, 1'000'000.0);
+  select = 1;
+}
+
+auto FightingPad6B::main() -> void {
+  if(timeout) timeout -= 1;
+  else        counter  = 0;
+  step(1);
+  synchronize(cpu);
+}
+
+auto FightingPad6B::readData() -> uint8 {
+  uint6 data;
+
+  if(select == 0) {
+    if(counter != 2 && counter != 3) {
+      data.bit(0) = interface->inputPoll(port, ID::Device::FightingPad6B, Up);
+      data.bit(1) = interface->inputPoll(port, ID::Device::FightingPad6B, Down);
+      data.bits(2,3) = ~0;
+    } else if(counter == 2) {
+      data.bits(0,3) = ~0;  //needed for controller detection
+    } else if(counter == 3) {
+      data.bits(0,3) =  0;
+    }
+    data.bit(4) = interface->inputPoll(port, ID::Device::FightingPad6B, A);
+    data.bit(5) = interface->inputPoll(port, ID::Device::FightingPad6B, Start);
+  } else if(select == 1) {
+    if(counter != 3) {
+      data.bit(0) = interface->inputPoll(port, ID::Device::FightingPad6B, Up);
+      data.bit(1) = interface->inputPoll(port, ID::Device::FightingPad6B, Down);
+      data.bit(2) = interface->inputPoll(port, ID::Device::FightingPad6B, Left);
+      data.bit(3) = interface->inputPoll(port, ID::Device::FightingPad6B, Right);
+      data.bit(4) = interface->inputPoll(port, ID::Device::FightingPad6B, B);
+      data.bit(5) = interface->inputPoll(port, ID::Device::FightingPad6B, C);
+    } else {
+      data.bit(0) = interface->inputPoll(port, ID::Device::FightingPad6B, Z);
+      data.bit(1) = interface->inputPoll(port, ID::Device::FightingPad6B, Y);
+      data.bit(2) = interface->inputPoll(port, ID::Device::FightingPad6B, X);
+      data.bit(3) = interface->inputPoll(port, ID::Device::FightingPad6B, Mode);
+      data.bits(4,5) = 0;
+    }
+  }
+
+  data = ~data;
+  return latch << 7 | select << 6 | data;
+}
+
+auto FightingPad6B::writeData(uint8 data) -> void {
+  if(!select && data.bit(6)) counter = (counter + 1) % 5;
+  select = data.bit(6);
+  timeout = 1607;
+
+  latch  = data.bit(7);
+}
diff --git a/higan/md/controller/fighting-pad-6b/fighting-pad-6b.hpp b/higan/md/controller/fighting-pad-6b/fighting-pad-6b.hpp
new file mode 100644
index 0000000..ebe5fef
--- /dev/null
+++ b/higan/md/controller/fighting-pad-6b/fighting-pad-6b.hpp
@@ -0,0 +1,16 @@
+struct FightingPad6B : Controller {
+  enum : uint {
+    Up, Down, Left, Right, A, B, C, X, Y, Z, Start, Mode,
+  };
+
+  FightingPad6B(uint port);
+
+  auto main() -> void override;
+  auto readData() -> uint8 override;
+  auto writeData(uint8 data) -> void override;
+
+  boolean select;
+  boolean latch;
+  uint3 counter;
+  uint timeout;
+};
diff --git a/higan/md/controller/gamepad/gamepad.cpp b/higan/md/controller/gamepad/gamepad.cpp
deleted file mode 100644
index 516dd61..0000000
--- a/higan/md/controller/gamepad/gamepad.cpp
+++ /dev/null
@@ -1,30 +0,0 @@
-Gamepad::Gamepad(uint port) : Controller(port) {
-}
-
-auto Gamepad::readData() -> uint8 {
-  uint6 data;
-
-  if(select == 0) {
-    data.bit(0) = interface->inputPoll(port, ID::Device::Gamepad, Up);
-    data.bit(1) = interface->inputPoll(port, ID::Device::Gamepad, Down);
-    data.bit(2) = 1;
-    data.bit(3) = 1;
-    data.bit(4) = interface->inputPoll(port, ID::Device::Gamepad, A);
-    data.bit(5) = interface->inputPoll(port, ID::Device::Gamepad, Start);
-  } else {
-    data.bit(0) = interface->inputPoll(port, ID::Device::Gamepad, Up);
-    data.bit(1) = interface->inputPoll(port, ID::Device::Gamepad, Down);
-    data.bit(2) = interface->inputPoll(port, ID::Device::Gamepad, Left);
-    data.bit(3) = interface->inputPoll(port, ID::Device::Gamepad, Right);
-    data.bit(4) = interface->inputPoll(port, ID::Device::Gamepad, B);
-    data.bit(5) = interface->inputPoll(port, ID::Device::Gamepad, C);
-  }
-
-  data = ~data;
-  return latch << 7 | select << 6 | data;
-}
-
-auto Gamepad::writeData(uint8 data) -> void {
-  select = data.bit(6);
-  latch  = data.bit(7);
-}
diff --git a/higan/md/interface/interface.cpp b/higan/md/interface/interface.cpp
index 757d1d2..b44014a 100644
--- a/higan/md/interface/interface.cpp
+++ b/higan/md/interface/interface.cpp
@@ -7,7 +7,9 @@ Settings settings;
 
 Interface::Interface() {
   interface = this;
+  system.init();
 
+  information.preAlpha     = true;
   information.manufacturer = "Sega";
   information.name         = "Mega Drive";
   information.overscan     = true;
@@ -16,11 +18,11 @@ Interface::Interface() {
   information.capability.states = false;
   information.capability.cheats = false;
 
-  media.append({ID::MegaDrive, "Mega Drive", "md"});
+  media.append({ID::MegaDrive, "Mega Drive", "md", Domain::Home});
 
-  Port controllerPort1{ID::Port::Controller1, "Controller Port 1"};
-  Port controllerPort2{ID::Port::Controller2, "Controller Port 2"};
-  Port extensionPort{ID::Port::Extension, "Extension Port"};
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+  Port extensionPort{ID::Port::Extension, "Extension Port", PlugAndPlay};
 
   { Device device{ID::Device::None, "None"};
     controllerPort1.devices.append(device);
@@ -28,7 +30,20 @@ Interface::Interface() {
     extensionPort.devices.append(device);
   }
 
-  { Device device{ID::Device::Gamepad, "Gamepad"};
+  { Device device{ID::Device::ControlPad, "Control Pad"};
+    device.inputs.append({0, "Up"   });
+    device.inputs.append({0, "Down" });
+    device.inputs.append({0, "Left" });
+    device.inputs.append({0, "Right"});
+    device.inputs.append({0, "A"    });
+    device.inputs.append({0, "B"    });
+    device.inputs.append({0, "C"    });
+    device.inputs.append({0, "Start"});
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::FightingPad6B, "Fighting Pad 6B"};
     device.inputs.append({0, "Up"   });
     device.inputs.append({0, "Down" });
     device.inputs.append({0, "Left" });
@@ -40,6 +55,7 @@ Interface::Interface() {
     device.inputs.append({0, "Y"    });
     device.inputs.append({0, "Z"    });
     device.inputs.append({0, "Start"});
+    device.inputs.append({0, "Mode" });
     controllerPort1.devices.append(device);
     controllerPort2.devices.append(device);
   }
@@ -62,10 +78,14 @@ auto Interface::videoSize() -> VideoSize {
 }
 
 auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
-  uint w = 320;
+  double w = 320;
+  if(arc) {
+    double squarePixelRate = 135.0 / 22.0 * 1'000'000.0;
+    w *= squarePixelRate / (system.colorburst() * 15.0 / 8.0);
+  }
   uint h = 240;
-  uint m = min(width / w, height / h);
-  return {w * m, h * m};
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
 }
 
 auto Interface::videoFrequency() -> double {
@@ -73,17 +93,33 @@ auto Interface::videoFrequency() -> double {
 }
 
 auto Interface::videoColors() -> uint32 {
-  return 1 << 9;
+  return (1 << 9) * 3;
 }
 
 auto Interface::videoColor(uint32 color) -> uint64 {
   uint R = color.bits(0,2);
   uint G = color.bits(3,5);
   uint B = color.bits(6,8);
+  uint intensity = color.bits(9,10);
+
+  switch(intensity) {
+  case 0:  //shadow
+    break;
+  case 1:  //normal
+    R <<= 1;
+    G <<= 1;
+    B <<= 1;
+    break;
+  case 2:  //highlight
+    R += 7;
+    G += 7;
+    B += 7;
+    break;
+  }
 
-  uint64 r = image::normalize(R, 3, 16);
-  uint64 g = image::normalize(G, 3, 16);
-  uint64 b = image::normalize(B, 3, 16);
+  uint64 r = image::normalize(R, 4, 16) + image::normalize(R, 4, 16) / 14;
+  uint64 g = image::normalize(G, 4, 16) + image::normalize(G, 4, 16) / 14;
+  uint64 b = image::normalize(B, 4, 16) + image::normalize(B, 4, 16) / 14;
 
   return r << 32 | g << 16 | b << 0;
 }
diff --git a/higan/md/interface/interface.hpp b/higan/md/interface/interface.hpp
index 2eda14c..8b76de7 100644
--- a/higan/md/interface/interface.hpp
+++ b/higan/md/interface/interface.hpp
@@ -14,7 +14,8 @@ struct ID {
 
   struct Device { enum : uint {
     None,
-    Gamepad,
+    ControlPad,
+    FightingPad6B,
   };};
 };
 
diff --git a/higan/md/system/peripherals.cpp b/higan/md/system/peripherals.cpp
index 1afb147..9e0d186 100644
--- a/higan/md/system/peripherals.cpp
+++ b/higan/md/system/peripherals.cpp
@@ -22,8 +22,9 @@ auto Peripherals::connect(uint port, uint device) -> void {
 
     delete controllerPort1;
     switch(device) { default:
-    case ID::Device::None:    controllerPort1 = new Controller(0); break;
-    case ID::Device::Gamepad: controllerPort1 = new Gamepad(0); break;
+    case ID::Device::None:          controllerPort1 = new Controller(0); break;
+    case ID::Device::ControlPad:    controllerPort1 = new ControlPad(0); break;
+    case ID::Device::FightingPad6B: controllerPort1 = new FightingPad6B(0); break;
     }
   }
 
@@ -33,8 +34,9 @@ auto Peripherals::connect(uint port, uint device) -> void {
 
     delete controllerPort2;
     switch(device) { default:
-    case ID::Device::None:    controllerPort2 = new Controller(1); break;
-    case ID::Device::Gamepad: controllerPort2 = new Gamepad(1); break;
+    case ID::Device::None:          controllerPort2 = new Controller(1); break;
+    case ID::Device::ControlPad:    controllerPort2 = new ControlPad(1); break;
+    case ID::Device::FightingPad6B: controllerPort2 = new FightingPad6B(1); break;
     }
   }
 
diff --git a/higan/md/system/system.cpp b/higan/md/system/system.cpp
index 5ad4ccb..21e0d5d 100644
--- a/higan/md/system/system.cpp
+++ b/higan/md/system/system.cpp
@@ -10,6 +10,10 @@ auto System::run() -> void {
   if(scheduler.enter() == Scheduler::Event::Frame) vdp.refresh();
 }
 
+auto System::init() -> void {
+  assert(interface != nullptr);
+}
+
 auto System::load() -> bool {
   information = Information();
   if(auto fp = interface->open(ID::System, "manifest.bml", File::Read, File::Required)) {
@@ -22,12 +26,16 @@ auto System::load() -> bool {
 }
 
 auto System::save() -> void {
+  if(!loaded()) return;
   cartridge.save();
 }
 
 auto System::unload() -> void {
+  if(!loaded()) return;
   peripherals.unload();
+
   cartridge.unload();
+  information.loaded = false;
 }
 
 auto System::power() -> void {
diff --git a/higan/md/system/system.hpp b/higan/md/system/system.hpp
index ae3d905..21242e0 100644
--- a/higan/md/system/system.hpp
+++ b/higan/md/system/system.hpp
@@ -4,6 +4,7 @@ struct System {
 
   auto run() -> void;
 
+  auto init() -> void;
   auto load() -> bool;
   auto save() -> void;
   auto unload() -> void;
diff --git a/higan/md/vdp/render.cpp b/higan/md/vdp/render.cpp
index ea456bb..b5ec5d2 100644
--- a/higan/md/vdp/render.cpp
+++ b/higan/md/vdp/render.cpp
@@ -24,6 +24,7 @@ auto VDP::run() -> void {
   sprite.run(state.x, state.y);
 
   auto output = io.backgroundColor;
+  uint2 intensity = 1;
   if(auto color = planeB.output.color) output = color;
   if(auto color = planeA.output.color) output = color;
   if(auto color = sprite.output.color) output = color;
@@ -31,14 +32,15 @@ auto VDP::run() -> void {
   if(planeA.output.priority) if(auto color = planeA.output.color) output = color;
   if(sprite.output.priority) if(auto color = sprite.output.color) output = color;
 
-  outputPixel(cram[output]);
+  outputPixel(cram[output] | intensity << 9);
   state.x++;
 }
 
-auto VDP::outputPixel(uint9 color) -> void {
-  for(auto n : range(4)) {
+auto VDP::outputPixel(uint11 color) -> void {
+  uint pixelWidth = screenWidth() == 256 ? 5 : 4;
+  for(auto n : range(pixelWidth)) {
     state.output[   0 + n] = color;
     state.output[1280 + n] = color;
   }
-  state.output += 4;
+  state.output += pixelWidth;
 }
diff --git a/higan/md/vdp/vdp.cpp b/higan/md/vdp/vdp.cpp
index 5ebf734..200010a 100644
--- a/higan/md/vdp/vdp.cpp
+++ b/higan/md/vdp/vdp.cpp
@@ -20,9 +20,9 @@ auto VDP::main() -> void {
       cpu.lower(CPU::Interrupt::VerticalBlank);
     }
     cpu.lower(CPU::Interrupt::HorizontalBlank);
-    for(uint x : range(320)) {
+    for(uint x : range(screenWidth())) {
       run();
-      step(4);
+      step(screenWidth() == 256 ? 5 : 4);
     }
     if(io.horizontalBlankInterruptEnable) {
       cpu.raise(CPU::Interrupt::HorizontalBlank);
diff --git a/higan/md/vdp/vdp.hpp b/higan/md/vdp/vdp.hpp
index 8eb1ec3..4422264 100644
--- a/higan/md/vdp/vdp.hpp
+++ b/higan/md/vdp/vdp.hpp
@@ -28,7 +28,7 @@ struct VDP : Thread {
   //render.cpp
   auto scanline() -> void;
   auto run() -> void;
-  auto outputPixel(uint9 color) -> void;
+  auto outputPixel(uint11 color) -> void;
 
   //background.cpp
   struct Background {
diff --git a/higan/ms/GNUmakefile b/higan/ms/GNUmakefile
index 4ee4a38..9f09f3d 100644
--- a/higan/ms/GNUmakefile
+++ b/higan/ms/GNUmakefile
@@ -3,11 +3,13 @@ processors += z80
 objects += ms-interface
 objects += ms-cpu ms-vdp ms-psg
 objects += ms-system ms-cartridge ms-bus
+objects += ms-controller
 
-obj/ms-interface.o: ms/interface/interface.cpp $(call rwildcard,ms/interface)
-obj/ms-cpu.o:       ms/cpu/cpu.cpp $(call rwildcard,ms/cpu)
-obj/ms-vdp.o:       ms/vdp/vdp.cpp $(call rwildcard,ms/vdp)
-obj/ms-psg.o:       ms/psg/psg.cpp $(call rwildcard,ms/psg)
-obj/ms-system.o:    ms/system/system.cpp $(call rwildcard,ms/system)
-obj/ms-cartridge.o: ms/cartridge/cartridge.cpp $(call rwildcard,ms/cartridge)
-obj/ms-bus.o:       ms/bus/bus.cpp $(call rwildcard,ms/bus)
+obj/ms-interface.o:  ms/interface/interface.cpp $(call rwildcard,ms/interface)
+obj/ms-cpu.o:        ms/cpu/cpu.cpp $(call rwildcard,ms/cpu)
+obj/ms-vdp.o:        ms/vdp/vdp.cpp $(call rwildcard,ms/vdp)
+obj/ms-psg.o:        ms/psg/psg.cpp $(call rwildcard,ms/psg)
+obj/ms-system.o:     ms/system/system.cpp $(call rwildcard,ms/system)
+obj/ms-cartridge.o:  ms/cartridge/cartridge.cpp $(call rwildcard,ms/cartridge)
+obj/ms-bus.o:        ms/bus/bus.cpp $(call rwildcard,ms/bus)
+obj/ms-controller.o: ms/controller/controller.cpp $(call rwildcard,ms/controller)
diff --git a/higan/ms/bus/bus.cpp b/higan/ms/bus/bus.cpp
index 2ff3c58..a2eed83 100644
--- a/higan/ms/bus/bus.cpp
+++ b/higan/ms/bus/bus.cpp
@@ -5,24 +5,225 @@ namespace MasterSystem {
 Bus bus;
 
 auto Bus::read(uint16 addr) -> uint8 {
-  if(addr < 0xc000) return cartridge.read(addr);
-  return ram[addr & 0x1fff];
+  if(addr < 0xc000 || disableRAM) return cartridge.read(addr);
+  return ram[addr & ramMask];
 }
 
 auto Bus::write(uint16 addr, uint8 data) -> void {
-  if(addr < 0xc000) return cartridge.write(addr, data);
-  ram[addr & 0x1fff] = data;
+  if(addr < 0xc000 || disableRAM) return cartridge.write(addr, data);
+  ram[addr & ramMask] = data;
 }
 
 auto Bus::in(uint8 addr) -> uint8 {
   switch(addr) {
-  case 0x7e: return vdp.in(addr);
-  case 0x7f: return vdp.in(addr);
+
+  case 0x00: case 0x02: case 0x04:
+    //Gear to Gear Cable
+    if(system.model() == Model::GameGear) return 0x00;
+  case 0x06:
+  case 0x08: case 0x0a: case 0x0c: case 0x0e:
+  case 0x10: case 0x12: case 0x14: case 0x16:
+  case 0x18: case 0x1a: case 0x1c: case 0x1e:
+  case 0x20: case 0x22: case 0x24: case 0x26:
+  case 0x28: case 0x2a: case 0x2c: case 0x2e:
+  case 0x30: case 0x32: case 0x34: case 0x36:
+  case 0x38: case 0x3a: case 0x3c: case 0x3e: { //port $3e
+    uint8 data = 0x00;
+    data.bit(2) = disableIO;
+    data.bit(3) = disableBIOS;
+    data.bit(4) = disableRAM;
+    data.bit(5) = disableMyCard;
+    data.bit(6) = disableCartridge;
+    data.bit(7) = disableExpansion;
+    return data;
+  }
+
+  case 0x01: case 0x03: case 0x05:
+    //Gear to Gear Cable
+    if(system.model() == Model::GameGear) return 0x00;
+  case 0x07:
+  case 0x09: case 0x0b: case 0x0d: case 0x0f:
+  case 0x11: case 0x13: case 0x15: case 0x17:
+  case 0x19: case 0x1b: case 0x1d: case 0x1f:
+  case 0x21: case 0x23: case 0x25: case 0x27:
+  case 0x29: case 0x2b: case 0x2d: case 0x2f:
+  case 0x31: case 0x33: case 0x35: case 0x37:
+  case 0x39: case 0x3b: case 0x3d: case 0x3f: { //port $3f
+    return 0x00;
+  }
+
+  case 0x40: case 0x41: case 0x42: case 0x43:
+  case 0x44: case 0x45: case 0x46: case 0x47:
+  case 0x48: case 0x49: case 0x4a: case 0x4b:
+  case 0x4c: case 0x4d: case 0x4e: case 0x4f:
+  case 0x50: case 0x51: case 0x52: case 0x53:
+  case 0x54: case 0x55: case 0x56: case 0x57:
+  case 0x58: case 0x59: case 0x5a: case 0x5b:
+  case 0x5c: case 0x5d: case 0x5e: case 0x5f:
+  case 0x60: case 0x61: case 0x62: case 0x63:
+  case 0x64: case 0x65: case 0x66: case 0x67:
+  case 0x68: case 0x69: case 0x6a: case 0x6b:
+  case 0x6c: case 0x6d: case 0x6e: case 0x6f:
+  case 0x70: case 0x71: case 0x72: case 0x73:
+  case 0x74: case 0x75: case 0x76: case 0x77:
+  case 0x78: case 0x79: case 0x7a: case 0x7b:
+  case 0x7c: case 0x7d: case 0x7e: case 0x7f:
+  case 0x80: case 0x81: case 0x82: case 0x83:
+  case 0x84: case 0x85: case 0x86: case 0x87:
+  case 0x88: case 0x89: case 0x8a: case 0x8b:
+  case 0x8c: case 0x8d: case 0x8e: case 0x8f:
+  case 0x90: case 0x91: case 0x92: case 0x93:
+  case 0x94: case 0x95: case 0x96: case 0x97:
+  case 0x98: case 0x99: case 0x9a: case 0x9b:
+  case 0x9c: case 0x9d: case 0x9e: case 0x9f:
+  case 0xa0: case 0xa1: case 0xa2: case 0xa3:
+  case 0xa4: case 0xa5: case 0xa6: case 0xa7:
+  case 0xa8: case 0xa9: case 0xaa: case 0xab:
+  case 0xac: case 0xad: case 0xae: case 0xaf:
+  case 0xb0: case 0xb1: case 0xb2: case 0xb3:
+  case 0xb4: case 0xb5: case 0xb6: case 0xb7:
+  case 0xb8: case 0xb9: case 0xba: case 0xbb:
+  case 0xbc: case 0xbd: case 0xbe: case 0xbf: { //port $7e, $7f, $be, and $bf
+    return vdp.in(addr);
+  }
+
+  case 0xc2: case 0xc4: case 0xc6:
+  case 0xc8: case 0xca: case 0xcc: case 0xce:
+  case 0xd0: case 0xd2: case 0xd4: case 0xd6:
+  case 0xd8: case 0xda: case 0xde:
+  case 0xe0: case 0xe2: case 0xe4: case 0xe6:
+  case 0xe8: case 0xea: case 0xec: case 0xee:
+  case 0xf0: case 0xf2: case 0xf4: case 0xf6:
+  case 0xf8: case 0xfa: case 0xfc: case 0xfe:
+    if(system.model() == Model::GameGear) return 0x00;
+  case 0xc0: case 0xdc: { //port $dc
+    uint7 data0 = MasterSystem::peripherals.controllerPort1->readData();
+    uint7 data1 = MasterSystem::peripherals.controllerPort2->readData();
+    uint8 data = 0x00;
+    data.bits(0,5) = (uint)data0.bits(0,5);
+    data.bits(6,7) = (uint)data1.bits(0,1);
+    return data;
+  }
+
+  case 0xc3: case 0xc5: case 0xc7:
+  case 0xc9: case 0xcb: case 0xcd: case 0xcf:
+  case 0xd1: case 0xd3: case 0xd5: case 0xd7:
+  case 0xd9: case 0xdb: case 0xdf:
+  case 0xe1: case 0xe3: case 0xe5: case 0xe7:
+  case 0xe9: case 0xeb: case 0xed: case 0xef:
+  case 0xf1: case 0xf3: case 0xf5: case 0xf7:
+  case 0xf9: case 0xfb: case 0xfd: case 0xff:
+    if(system.model() == Model::GameGear) return 0x00;
+  case 0xc1: case 0xdd: { //port $dd
+    uint7 data0 = MasterSystem::peripherals.controllerPort1->readData();
+    uint7 data1 = MasterSystem::peripherals.controllerPort2->readData();
+    uint8 data = 0x00;
+    data.bits(0,3) = (uint)data1.bits(2,5);
+    data.bit (  4) = 1;  //reset button
+    data.bit (  5) = 1;  //cartridge CONT pin
+    data.bit (  6) = (bool)data0.bit (6);
+    data.bit (  7) = (bool)data1.bit (6);
+    return data;
+  }
+
   }
   return 0x00;
 }
 
 auto Bus::out(uint8 addr, uint8 data) -> void {
+  switch(addr) {
+
+  case 0x00: case 0x02: case 0x04:
+    //Gear to Gear Cable
+    if(system.model() == Model::GameGear) return;
+  case 0x06:
+  case 0x08: case 0x0a: case 0x0c: case 0x0e:
+  case 0x10: case 0x12: case 0x14: case 0x16:
+  case 0x18: case 0x1a: case 0x1c: case 0x1e:
+  case 0x20: case 0x22: case 0x24: case 0x26:
+  case 0x28: case 0x2a: case 0x2c: case 0x2e:
+  case 0x30: case 0x32: case 0x34: case 0x36:
+  case 0x38: case 0x3a: case 0x3c: case 0x3e: {  //port $3e
+    disableIO        = data.bit(2);
+    disableBIOS      = data.bit(3);
+    disableRAM       = data.bit(4);
+    disableMyCard    = data.bit(5);
+    disableCartridge = data.bit(6);
+    disableExpansion = data.bit(7);
+    break;
+  }
+
+  case 0x01: case 0x03: case 0x05:
+    //Gear to Gear Cable
+    if(system.model() == Model::GameGear) return;
+  case 0x07:
+  case 0x09: case 0x0b: case 0x0d: case 0x0f:
+  case 0x11: case 0x13: case 0x15: case 0x17:
+  case 0x19: case 0x1b: case 0x1d: case 0x1f:
+  case 0x21: case 0x23: case 0x25: case 0x27:
+  case 0x29: case 0x2b: case 0x2d: case 0x2f:
+  case 0x31: case 0x33: case 0x35: case 0x37:
+  case 0x39: case 0x3b: case 0x3d: case 0x3f: {  //port $3f
+    //Writing to TH lines has no effect in Japanese systems.
+    uint7 control1;
+    uint7 control2;
+    uint7 data1;
+    uint7 data2;
+    control1.bit(5) = data.bit(0);
+    control1.bit(6) = data.bit(1);
+    control2.bit(5) = data.bit(2);
+    control2.bit(6) = data.bit(3);
+    data1.bit(5) = data.bit(4);
+    data1.bit(6) = data.bit(5);
+    data2.bit(5) = data.bit(6);
+    data2.bit(6) = data.bit(7);
+    MasterSystem::peripherals.controllerPort1->writeControl(control1);
+    MasterSystem::peripherals.controllerPort2->writeControl(control2);
+    MasterSystem::peripherals.controllerPort1->writeData(data1);
+    MasterSystem::peripherals.controllerPort2->writeData(data2);
+    break;
+  }
+
+  case 0x40: case 0x41: case 0x42: case 0x43:
+  case 0x44: case 0x45: case 0x46: case 0x47:
+  case 0x48: case 0x49: case 0x4a: case 0x4b:
+  case 0x4c: case 0x4d: case 0x4e: case 0x4f:
+  case 0x50: case 0x51: case 0x52: case 0x53:
+  case 0x54: case 0x55: case 0x56: case 0x57:
+  case 0x58: case 0x59: case 0x5a: case 0x5b:
+  case 0x5c: case 0x5d: case 0x5e: case 0x5f:
+  case 0x60: case 0x61: case 0x62: case 0x63:
+  case 0x64: case 0x65: case 0x66: case 0x67:
+  case 0x68: case 0x69: case 0x6a: case 0x6b:
+  case 0x6c: case 0x6d: case 0x6e: case 0x6f:
+  case 0x70: case 0x71: case 0x72: case 0x73:
+  case 0x74: case 0x75: case 0x76: case 0x77:
+  case 0x78: case 0x79: case 0x7a: case 0x7b:
+  case 0x7c: case 0x7d: case 0x7e: case 0x7f: {  //port $7f;
+    psg.out(addr, data);
+  }
+
+  case 0x80: case 0x81: case 0x82: case 0x83:
+  case 0x84: case 0x85: case 0x86: case 0x87:
+  case 0x88: case 0x89: case 0x8a: case 0x8b:
+  case 0x8c: case 0x8d: case 0x8e: case 0x8f:
+  case 0x90: case 0x91: case 0x92: case 0x93:
+  case 0x94: case 0x95: case 0x96: case 0x97:
+  case 0x98: case 0x99: case 0x9a: case 0x9b:
+  case 0x9c: case 0x9d: case 0x9e: case 0x9f:
+  case 0xa0: case 0xa1: case 0xa2: case 0xa3:
+  case 0xa4: case 0xa5: case 0xa6: case 0xa7:
+  case 0xa8: case 0xa9: case 0xaa: case 0xab:
+  case 0xac: case 0xad: case 0xae: case 0xaf:
+  case 0xb0: case 0xb1: case 0xb2: case 0xb3:
+  case 0xb4: case 0xb5: case 0xb6: case 0xb7:
+  case 0xb8: case 0xb9: case 0xba: case 0xbb:
+  case 0xbc: case 0xbd: case 0xbe: case 0xbf: {  //ports $be and $bf
+    vdp.out(addr, data);
+    break;
+  }
+
+  }
 }
 
 }
diff --git a/higan/ms/bus/bus.hpp b/higan/ms/bus/bus.hpp
index c8826a3..69d2769 100644
--- a/higan/ms/bus/bus.hpp
+++ b/higan/ms/bus/bus.hpp
@@ -5,8 +5,26 @@ struct Bus : Processor::Z80::Bus {
   auto in(uint8 addr) -> uint8 override;
   auto out(uint8 addr, uint8 data) -> void override;
 
+  uint ramMask;
+
+  bool disableIO;
+  bool disableBIOS;
+  bool disableRAM;
+  bool disableMyCard;
+  bool disableCartridge;
+  bool disableExpansion;
+
+  struct IO {
+    struct Port {
+      bool trDirection;
+      bool thDirection;
+      bool trOutput;
+      bool thOutput;
+    } port[2];
+  } io;
+
 private:
-  uint8 ram[0x2000];
+  uint8 ram[0x2000];  //SG-1000 = 1KB, MS/GG = 8KB
 };
 
 extern Bus bus;
diff --git a/higan/ms/cartridge/cartridge.cpp b/higan/ms/cartridge/cartridge.cpp
index 2d5330d..7581be1 100644
--- a/higan/ms/cartridge/cartridge.cpp
+++ b/higan/ms/cartridge/cartridge.cpp
@@ -8,6 +8,11 @@ auto Cartridge::load() -> bool {
   information = {};
 
   switch(system.model()) {
+  case Model::SG1000:
+    if(auto pathID = interface->load(ID::SG1000, "SG-1000", "sg")) {
+      information.pathID = pathID();
+    } else return false;
+    break;
   case Model::MasterSystem:
     if(auto pathID = interface->load(ID::MasterSystem, "Master System", "ms")) {
       information.pathID = pathID();
diff --git a/higan/ms/controller/controller.cpp b/higan/ms/controller/controller.cpp
new file mode 100644
index 0000000..22d87ca
--- /dev/null
+++ b/higan/ms/controller/controller.cpp
@@ -0,0 +1,28 @@
+#include <ms/ms.hpp>
+
+namespace MasterSystem {
+
+#include "gamepad/gamepad.cpp"
+
+Controller::Controller(bool port) : port(port) {
+  if(!handle()) create(Controller::Enter, 1);
+}
+
+Controller::~Controller() {
+  scheduler.remove(*this);
+}
+
+auto Controller::Enter() -> void {
+  while(true) {
+    scheduler.synchronize();
+    if(peripherals.controllerPort1->active()) peripherals.controllerPort1->main();
+    if(peripherals.controllerPort2->active()) peripherals.controllerPort2->main();
+  }
+}
+
+auto Controller::main() -> void {
+  step(1);
+  synchronize(cpu);
+}
+
+}
diff --git a/higan/ms/controller/controller.hpp b/higan/ms/controller/controller.hpp
new file mode 100644
index 0000000..c6ef429
--- /dev/null
+++ b/higan/ms/controller/controller.hpp
@@ -0,0 +1,34 @@
+//Master System controller port pinout:
+//  ___________________
+// /(1) (2) (3) (4) (5)\
+//  \ (6) (7) (8) (9) /
+//   \---------------/
+//
+// pin  name   port1    port2
+//  1:  up     $dc.d0   $dc.d6
+//  2:  down   $dc.d1   $dc.d7
+//  3:  left   $dc.d2   $dd.d0
+//  4:  right  $dc.d3   $dd.d1
+//  5:  +5v
+//  6:  tl     $dc.d4   $dd.d2
+//  7:  th     $dd.d6   $dd.d7
+//  8:  gnd
+//  9:  tr     $dc.d5   $dd.d3
+
+struct Controller : Thread {
+  Controller(bool port);
+  virtual ~Controller();
+
+  static auto Enter() -> void;
+  virtual auto main() -> void;
+
+  virtual auto readData() -> uint7 { return 0x7f; }
+  virtual auto writeData(uint7 data) -> void {}
+
+  virtual auto readControl() -> uint7 { return 0x00; }
+  virtual auto writeControl(uint7 data) -> void {}
+
+  const bool port;
+};
+
+#include "gamepad/gamepad.hpp"
diff --git a/higan/ms/controller/gamepad/gamepad.cpp b/higan/ms/controller/gamepad/gamepad.cpp
new file mode 100644
index 0000000..928d88c
--- /dev/null
+++ b/higan/ms/controller/gamepad/gamepad.cpp
@@ -0,0 +1,20 @@
+Gamepad::Gamepad(bool port) : Controller(port) {
+}
+
+auto Gamepad::readData() -> uint7 {
+  uint6 data;
+
+  data.bit(0) = interface->inputPoll(port, ID::Device::Gamepad, Up);
+  data.bit(1) = interface->inputPoll(port, ID::Device::Gamepad, Down);
+  data.bit(2) = interface->inputPoll(port, ID::Device::Gamepad, Left);
+  data.bit(3) = interface->inputPoll(port, ID::Device::Gamepad, Right);
+  data.bit(4) = interface->inputPoll(port, ID::Device::Gamepad, I);
+  data.bit(5) = interface->inputPoll(port, ID::Device::Gamepad, II);
+
+  data = ~data;
+  return latch << 6 | data;
+}
+
+auto Gamepad::writeData(uint7 data) -> void {
+  latch  = data.bit(6);
+}
diff --git a/higan/ms/controller/gamepad/gamepad.hpp b/higan/ms/controller/gamepad/gamepad.hpp
new file mode 100644
index 0000000..11d2bbe
--- /dev/null
+++ b/higan/ms/controller/gamepad/gamepad.hpp
@@ -0,0 +1,12 @@
+struct Gamepad : Controller {
+  enum : uint {
+    Up, Down, Left, Right, I, II,
+  };
+
+  Gamepad(bool port);
+
+  auto readData() -> uint7 override;
+  auto writeData(uint7 data) -> void override;
+
+  boolean latch;
+};
diff --git a/higan/ms/cpu/cpu.cpp b/higan/ms/cpu/cpu.cpp
index 80b3652..d6e51f8 100644
--- a/higan/ms/cpu/cpu.cpp
+++ b/higan/ms/cpu/cpu.cpp
@@ -25,7 +25,7 @@ auto CPU::power() -> void {
 
 auto CPU::reset() -> void {
   Z80::reset();
-  create(CPU::Enter, system.colorburst());
+  create(CPU::Enter, system.colorburst() * 6.0);
 }
 
 }
diff --git a/higan/ms/cpu/cpu.hpp b/higan/ms/cpu/cpu.hpp
index 127e7d4..009350a 100644
--- a/higan/ms/cpu/cpu.hpp
+++ b/higan/ms/cpu/cpu.hpp
@@ -7,6 +7,8 @@ struct CPU : Processor::Z80, Thread {
 
   auto power() -> void;
   auto reset() -> void;
+
+  vector<Thread*> peripherals;
 };
 
 extern CPU cpu;
diff --git a/higan/ms/interface/interface.cpp b/higan/ms/interface/interface.cpp
index 61b2749..b03a90d 100644
--- a/higan/ms/interface/interface.cpp
+++ b/higan/ms/interface/interface.cpp
@@ -7,7 +7,9 @@ Settings settings;
 
 Interface::Interface() {
   interface = this;
+  system.init();
 
+  information.preAlpha     = true;
   information.manufacturer = "Sega";
   information.name         = "Master System";
   information.overscan     = true;
@@ -16,11 +18,16 @@ Interface::Interface() {
   information.capability.states = false;
   information.capability.cheats = false;
 
-  media.append({ID::MasterSystem, "Master System", "ms"});
-  media.append({ID::GameGear,     "Game Gear",     "gg"});
+  media.append({ID::SG1000,       "SG-1000",       "sg", Domain::Home});
+  media.append({ID::MasterSystem, "Master System", "ms", Domain::Home});
+  media.append({ID::GameGear,     "Game Gear",     "gg", Domain::Portable});
 
-  Port controllerPort1{ID::Port::Controller1, "Controller Port 1"};
-  Port controllerPort2{ID::Port::Controller2, "Controller Port 2"};
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+
+  { Device device{ID::Device::None, "None"};
+    controllerPort2.devices.append(device);
+  }
 
   { Device device{ID::Device::Gamepad, "Gamepad"};
     device.inputs.append({0, "Up"});
@@ -46,15 +53,25 @@ auto Interface::title() -> string {
 }
 
 auto Interface::videoSize() -> VideoSize {
-  return {256, 240};
+  switch(system.model()) {
+  case Model::SG1000:       return {256, 192};
+  case Model::MasterSystem: return {256, 240};
+  case Model::GameGear:     return {160, 144};
+  }
+  unreachable;
 }
 
 auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
-  auto a = arc ? 8.0 / 7.0 : 1.0;
-  uint w = 256;
-  uint h = 240;
-  uint m = min(width / (w * a), height / h);
-  return {uint(w * a * m), uint(h * m)};
+  double w = system.model() != Model::GameGear ? 256 : 160;
+  if(arc && system.model() != Model::GameGear) {
+    double squarePixelRate = system.region() == System::Region::NTSC
+    ? 135.0 / 22.0 * 1'000'000.0
+    : 7'375'000.0;
+    w *= squarePixelRate / (system.colorburst() * 6.0 / (system.region() == System::Region::NTSC ? 4.0 : 4.0));
+  }
+  uint h = system.model() == Model::SG1000 ? 192 : system.model() == Model::MasterSystem ? 240 : 144;
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
 }
 
 auto Interface::videoFrequency() -> double {
@@ -62,11 +79,73 @@ auto Interface::videoFrequency() -> double {
 }
 
 auto Interface::videoColors() -> uint32 {
-  return 1 << 6;
+  switch(system.model()) {
+  case Model::SG1000:       return 1 <<  4;
+  case Model::MasterSystem: return 1 <<  6;
+  case Model::GameGear:     return 1 << 12;
+  }
+  unreachable;
 }
 
 auto Interface::videoColor(uint32 color) -> uint64 {
-  return 0;
+  uint64 r;
+  uint64 g;
+  uint64 b;
+
+  if(system.model() == Model::SG1000) {
+    double gamma = settings.colorEmulation ? 1.8 : 2.2;
+
+    static double Y[] = {
+      0.00, 0.00, 0.53, 0.67,
+      0.40, 0.53, 0.47, 0.67,
+      0.53, 0.67, 0.73, 0.80,
+      0.46, 0.53, 0.80, 1.00,
+    };
+    static double Saturation[] = {
+      0.000, 0.000, 0.267, 0.200,
+      0.300, 0.267, 0.233, 0.300,
+      0.300, 0.300, 0.233, 0.167,
+      0.233, 0.200, 0.000, 0.000,
+    };
+    static uint Phase[] = {
+        0,   0, 237, 235,
+      354, 354, 114, 295,
+      114, 114, 173, 173,
+      235,  53,   0,   0,
+    };
+    double y = Y[color];
+    double i = Saturation[color] * std::sin((Phase[color] - 33) * Math::Pi / 180.0);
+    double q = Saturation[color] * std::cos((Phase[color] - 33) * Math::Pi / 180.0);
+
+    auto gammaAdjust = [=](double f) -> double { return f < 0.0 ? 0.0 : std::pow(f, 2.2 / gamma); };
+    //This matrix is from FCC's 1953 NTSC standard.
+    //The SG-1000, ColecoVision, and MSX are older than the SMPTE C standard that followed in 1987.
+    r = uclamp<16>(65535.0 * gammaAdjust(y +  0.946882 * i +  0.623557 * q));
+    g = uclamp<16>(65535.0 * gammaAdjust(y + -0.274788 * i + -0.635691 * q));
+    b = uclamp<16>(65535.0 * gammaAdjust(y + -1.108545 * i +  1.709007 * q));
+  }
+
+  if(system.model() == Model::MasterSystem) {
+    uint R = color.bits(0,1);
+    uint G = color.bits(2,3);
+    uint B = color.bits(4,5);
+
+    r = image::normalize(R, 2, 16);
+    g = image::normalize(G, 2, 16);
+    b = image::normalize(B, 2, 16);
+  }
+
+  if(system.model() == Model::GameGear) {
+    uint R = color.bits( 0, 3);
+    uint G = color.bits( 4, 7);
+    uint B = color.bits( 8,11);
+
+    r = image::normalize(R, 4, 16);
+    g = image::normalize(G, 4, 16);
+    b = image::normalize(B, 4, 16);
+  }
+
+  return r << 32 | g << 16 | b << 0;
 }
 
 auto Interface::audioFrequency() -> double {
@@ -78,6 +157,7 @@ auto Interface::loaded() -> bool {
 }
 
 auto Interface::load(uint id) -> bool {
+  if(id == ID::SG1000) return system.load(Model::SG1000);
   if(id == ID::MasterSystem) return system.load(Model::MasterSystem);
   if(id == ID::GameGear) return system.load(Model::GameGear);
   return false;
diff --git a/higan/ms/interface/interface.hpp b/higan/ms/interface/interface.hpp
index 076e575..b571868 100644
--- a/higan/ms/interface/interface.hpp
+++ b/higan/ms/interface/interface.hpp
@@ -3,6 +3,7 @@ namespace MasterSystem {
 struct ID {
   enum : uint {
     System,
+    SG1000,
     MasterSystem,
     GameGear,
   };
@@ -13,6 +14,7 @@ struct ID {
   };};
 
   struct Device { enum : uint {
+    None,
     Gamepad,
   };};
 };
@@ -51,6 +53,10 @@ struct Interface : Emulator::Interface {
 };
 
 struct Settings {
+  bool colorEmulation = true;
+
+  uint controllerPort1 = ID::Device::None;
+  uint controllerPort2 = ID::Device::None;
 };
 
 extern Interface* interface;
diff --git a/higan/ms/ms.hpp b/higan/ms/ms.hpp
index 471ade7..a3242d2 100644
--- a/higan/ms/ms.hpp
+++ b/higan/ms/ms.hpp
@@ -15,6 +15,7 @@ namespace MasterSystem {
   extern Scheduler scheduler;
 
   enum class Model : uint {
+    SG1000,
     MasterSystem,
     GameGear,
   };
@@ -30,6 +31,8 @@ namespace MasterSystem {
     }
   };
 
+  #include <ms/controller/controller.hpp>
+
   #include <ms/cpu/cpu.hpp>
   #include <ms/vdp/vdp.hpp>
   #include <ms/psg/psg.hpp>
diff --git a/higan/ms/psg/psg.cpp b/higan/ms/psg/psg.cpp
index 7d08d9e..58c979c 100644
--- a/higan/ms/psg/psg.cpp
+++ b/higan/ms/psg/psg.cpp
@@ -17,6 +17,9 @@ auto PSG::step(uint clocks) -> void {
   synchronize(cpu);
 }
 
+auto PSG::out(uint8 addr, uint8 data) -> void {
+}
+
 auto PSG::power() -> void {
 }
 
diff --git a/higan/ms/psg/psg.hpp b/higan/ms/psg/psg.hpp
index f9d2093..6164530 100644
--- a/higan/ms/psg/psg.hpp
+++ b/higan/ms/psg/psg.hpp
@@ -5,6 +5,8 @@ struct PSG : Thread {
   auto main() -> void;
   auto step(uint clocks) -> void;
 
+  auto out(uint8 addr, uint8 data) -> void;
+
   auto power() -> void;
   auto reset() -> void;
 };
diff --git a/higan/ms/system/peripherals.cpp b/higan/ms/system/peripherals.cpp
new file mode 100644
index 0000000..7af8613
--- /dev/null
+++ b/higan/ms/system/peripherals.cpp
@@ -0,0 +1,30 @@
+Peripherals peripherals;
+
+auto Peripherals::unload() -> void {
+  delete controllerPort1;
+  delete controllerPort2;
+  controllerPort1 = nullptr;
+  controllerPort2 = nullptr;
+}
+
+auto Peripherals::reset() -> void {
+  connect(ID::Port::Controller1, settings.controllerPort1);
+  connect(ID::Port::Controller2, settings.controllerPort2);
+}
+
+auto Peripherals::connect(uint port, uint device) -> void {
+  if(port == ID::Port::Controller2) {
+    settings.controllerPort2 = device;
+    if(!system.loaded()) return;
+
+    delete controllerPort2;
+    switch(device) { default:
+    case ID::Device::None:    controllerPort1 = new Controller(1); break;
+    case ID::Device::Gamepad: controllerPort1 = new Gamepad(1); break;
+    }
+  }
+
+  cpu.peripherals.reset();
+  cpu.peripherals.append(controllerPort1);
+  cpu.peripherals.append(controllerPort2);
+}
diff --git a/higan/ms/system/system.cpp b/higan/ms/system/system.cpp
index 469c0f6..e5534b3 100644
--- a/higan/ms/system/system.cpp
+++ b/higan/ms/system/system.cpp
@@ -2,6 +2,7 @@
 
 namespace MasterSystem {
 
+#include "peripherals.cpp"
 System system;
 Scheduler scheduler;
 
@@ -9,6 +10,10 @@ auto System::run() -> void {
   if(scheduler.enter() == Scheduler::Event::Frame) vdp.refresh();
 }
 
+auto System::init() -> void {
+  assert(interface != nullptr);
+}
+
 auto System::load(Model model) -> bool {
   information = {};
   information.model = model;
@@ -17,6 +22,8 @@ auto System::load(Model model) -> bool {
     information.manifest = fp->reads();
   } else return false;
 
+  bus.ramMask = system.model() == Model::SG1000 ? 0x3ff : 0x1fff;
+
   auto document = BML::unserialize(information.manifest);
   if(!cartridge.load()) return false;
 
@@ -25,11 +32,16 @@ auto System::load(Model model) -> bool {
 }
 
 auto System::save() -> void {
+  if(!loaded()) return;
   cartridge.save();
 }
 
 auto System::unload() -> void {
+  if(!loaded()) return;
+  peripherals.unload();
+
   cartridge.unload();
+  information.loaded = false;
 }
 
 auto System::power() -> void {
@@ -54,6 +66,8 @@ auto System::reset() -> void {
   vdp.reset();
   psg.reset();
   scheduler.primary(cpu);
+
+  peripherals.reset();
 }
 
 }
diff --git a/higan/ms/system/system.hpp b/higan/ms/system/system.hpp
index dfc6c96..10b17b5 100644
--- a/higan/ms/system/system.hpp
+++ b/higan/ms/system/system.hpp
@@ -1,10 +1,14 @@
 struct System {
+  enum class Region : uint { NTSC = 0, PAL = 1 };
+
   auto loaded() const -> bool { return information.loaded; }
   auto model() const -> Model { return information.model; }
+  auto region() const -> Region { return information.region; }
   auto colorburst() const -> double { return information.colorburst; }
 
   auto run() -> void;
 
+  auto init() -> void;
   auto load(Model model) -> bool;
   auto save() -> void;
   auto unload() -> void;
@@ -14,11 +18,22 @@ struct System {
 
 private:
   struct Information {
-    bool loaded = false;
-    Model model = Model::MasterSystem;
     string manifest;
+    bool loaded = false;
+    Model model = Model::SG1000;
+    Region region = Region::NTSC;
     double colorburst = 0.0;
   } information;
 };
 
+struct Peripherals {
+  auto unload() -> void;
+  auto reset() -> void;
+  auto connect(uint port, uint device) -> void;
+
+  Controller* controllerPort1 = nullptr;
+  Controller* controllerPort2 = nullptr;
+};
+
 extern System system;
+extern Peripherals peripherals;
diff --git a/higan/ms/vdp/io.cpp b/higan/ms/vdp/io.cpp
new file mode 100644
index 0000000..201c433
--- /dev/null
+++ b/higan/ms/vdp/io.cpp
@@ -0,0 +1,126 @@
+auto VDP::readData() -> uint8 {
+  switch(io.controlCode) {
+  case 0: {  //VRAM read
+    return vram[io.controlAddress++];
+  }
+
+  case 1: {  //VRAM write
+    return vram[io.controlAddress++];
+  }
+
+  case 2: {  //register
+    return vram[io.controlAddress++];
+  }
+
+  case 3: {  //CRAM write
+    return cram[(io.controlAddress++) & 0x3f];
+  }
+
+  }
+  unreachable;
+}
+
+auto VDP::writeData(uint8 data) -> void {
+  switch(io.controlCode) {
+  case 0: {  //VRAM read
+    vram[io.controlAddress++] = data;
+    break;
+  }
+
+  case 1: {  //VRAM write
+    vram[io.controlAddress++] = data;
+    break;
+  }
+
+  case 2: {  //register
+    switch((io.controlAddress++) & (system.model() == Model::SG1000 ? 7 : 15)) {
+    case 0x00:
+      io.externalVDP = data.bit(0);
+      io.mode3       = data.bit(1);
+      if(system.model() != Model::SG1000) {
+        io.mode4           = data.bit(2);
+        io.spriteShiftLeft = data.bit(3);
+        io.lineInterrupt   = data.bit(4);
+        io.hideLeft        = data.bit(5);
+        io.horizontalLock  = data.bit(6);
+        io.verticalLock    = data.bit(7);
+      }
+      break;
+    case 0x01:
+      io.spriteMag  = data.bit(0);
+      io.spriteSize = data.bit(1);
+      io.mode2      = data.bit(3);
+      io.mode1      = data.bit(4);
+      io.interrupt  = data.bit(5);
+      io.blank      = data.bit(6);
+      io.ramSize    = data.bit(7);
+      break;
+    case 0x02:
+      io.nametableMask    = data.bit (  0);
+      io.nametableAddress = data.bits(1,3) << 11;
+      break;
+    case 0x03:
+      io.colorAddress = data << 6;
+      break;
+    case 0x04:
+      io.patternAddress = data.bits(0,2) << 11;
+      break;
+    case 0x05:
+      io.spriteAttributeMask    = data.bit (  0);
+      io.spriteAttributeAddress = data.bits(1,6) << 8;
+      break;
+    case 0x06:
+      io.spritePatternMask    = data.bit (  0);
+      io.spritePatternAddress = data.bits(1,2) << 12;
+      break;
+    case 0x07:
+      io.backColor = data.bits(0,3);
+      io.textColor = data.bits(4,7);
+      break;
+    case 0x08:
+      io.scrollX = data;
+      break;
+    case 0x09:
+      io.scrollY = data;
+      break;
+    case 0x0a:
+      io.lineCounter = data;
+      break;
+    case 0x0b: case 0x0c: case 0x0d: case 0x0e: case 0x0f:
+      break;
+    }
+    break;
+  }
+
+  case 3: {  //CRAM write
+    cram[(io.controlAddress++) & 0x3f];
+    break;
+  }
+
+  }
+}
+
+auto VDP::readControl() -> uint8 {
+  io.controlLatch = false;
+  uint8 data = (
+    (io.fifthSprite) +  //Modes 1, 2, 3; undefined in Mode 4
+    (io.spriteCollision << 5) +
+    (io.spriteOverflow << 6) +
+    (vblank() << 7)
+  );
+  io.fifthSprite     = 0;
+  io.spriteCollision = false;
+  io.spriteOverflow  = false;
+  return data;
+}
+
+auto VDP::writeControl(uint8 data) -> void {
+  if(!io.controlLatch) {
+    io.controlAddress.bits( 0, 7) = data;
+    io.controlLatch = true;
+  } else {
+    io.controlAddress.bits( 8,13) = (uint)data.bits(0,5);
+    io.controlCode                =       data.bits(6,7);
+    io.controlLatch = false;
+  }
+}
diff --git a/higan/ms/vdp/render.cpp b/higan/ms/vdp/render.cpp
new file mode 100644
index 0000000..44ec326
--- /dev/null
+++ b/higan/ms/vdp/render.cpp
@@ -0,0 +1,30 @@
+auto VDP::scanline() -> void {
+  state.x = 0;
+  if(++state.y >= 262) state.y = 0;
+
+  if(state.y < activeHeight()) {
+  }
+
+  if(state.y == screenY() + screenHeight()) scheduler.exit(Scheduler::Event::Frame);
+
+  state.output = buffer + (state.y - screenY()) * 256;
+}
+
+auto VDP::run() -> void {
+  uint32 color;
+  switch(system.model()) {
+  case Model::SG1000: color = state.x / 16; break;
+  case Model::MasterSystem: color = state.x / 16 | (state.y / (screenHeight() / 4)) << 4; break;
+  case Model::GameGear: color = ((state.x - screenX()) * 64 / 160) | ((state.y - screenY()) * 64 / 144) << 6; break;
+  }
+  outputPixel(color);
+  state.x++;
+}
+
+auto VDP::outputPixel(uint12 color) -> void {
+  if(system.model() == Model::GameGear) {
+    if((state.x < screenX() || state.x >= screenX() + screenWidth())) return;
+    if((state.y < screenY() || state.y >= screenY() + screenHeight())) return;
+  }
+  *(state.output++) = color;
+}
diff --git a/higan/ms/vdp/vdp.cpp b/higan/ms/vdp/vdp.cpp
index a899837..0d069ab 100644
--- a/higan/ms/vdp/vdp.cpp
+++ b/higan/ms/vdp/vdp.cpp
@@ -3,17 +3,24 @@
 namespace MasterSystem {
 
 VDP vdp;
+#include "io.cpp"
+#include "render.cpp"
 
 auto VDP::Enter() -> void {
   while(true) scheduler.synchronize(), vdp.main();
 }
 
 auto VDP::main() -> void {
-  for(uint y : range(262)) {
-    for(uint x : range(342)) {
-      step(1);
+  scanline();
+  if(state.y < activeHeight()) {
+    for(uint x : range(activeWidth())) {
+      run();
+      step(4);
     }
-    if(y == 240) scheduler.exit(Scheduler::Event::Frame);
+    step(344);
+    if(state.y == screenY() + screenHeight()) scheduler.exit(Scheduler::Event::Frame);
+  } else {
+    step(1368);
   }
 }
 
@@ -23,11 +30,48 @@ auto VDP::step(uint clocks) -> void {
 }
 
 auto VDP::refresh() -> void {
-  Emulator::video.refresh(buffer, 256 * sizeof(uint32), 256, 240);
+  Emulator::video.refresh(buffer, 256 * sizeof(uint32), screenWidth(), screenHeight());
 }
 
 auto VDP::in(uint8 addr) -> uint8 {
   switch(addr) {
+
+  case 0x40: case 0x42: case 0x44: case 0x46:
+  case 0x48: case 0x4a: case 0x4c: case 0x4e:
+  case 0x50: case 0x52: case 0x54: case 0x56:
+  case 0x58: case 0x5a: case 0x5c: case 0x5e:
+  case 0x60: case 0x62: case 0x64: case 0x66:
+  case 0x68: case 0x6a: case 0x6c: case 0x6e:
+  case 0x70: case 0x72: case 0x74: case 0x76:
+  case 0x78: case 0x7a: case 0x7c: case 0x7e:  //port $7e
+    return 0xb0/*hcounter*/;
+  case 0x41: case 0x43: case 0x45: case 0x47:
+  case 0x49: case 0x4b: case 0x4d: case 0x4f:
+  case 0x51: case 0x53: case 0x55: case 0x57:
+  case 0x59: case 0x5b: case 0x5d: case 0x5f:
+  case 0x61: case 0x63: case 0x65: case 0x67:
+  case 0x69: case 0x6b: case 0x6d: case 0x6f:
+  case 0x71: case 0x73: case 0x75: case 0x77:
+  case 0x79: case 0x7b: case 0x7d: case 0x7f:  //port $7f
+    return 0xb0/*vcounter*/;
+  case 0x80: case 0x82: case 0x84: case 0x86:
+  case 0x88: case 0x8a: case 0x8c: case 0x8e:
+  case 0x90: case 0x92: case 0x94: case 0x96:
+  case 0x98: case 0x9a: case 0x9c: case 0x9e:
+  case 0xa0: case 0xa2: case 0xa4: case 0xa6:
+  case 0xa8: case 0xaa: case 0xac: case 0xae:
+  case 0xb0: case 0xb2: case 0xb4: case 0xb6:
+  case 0xb8: case 0xba: case 0xbc: case 0xbe:  //port $be
+    return readData();
+  case 0x81: case 0x83: case 0x85: case 0x87:
+  case 0x89: case 0x8b: case 0x8d: case 0x8f:
+  case 0x91: case 0x93: case 0x95: case 0x97:
+  case 0x99: case 0x9b: case 0x9d: case 0x9f:
+  case 0xa1: case 0xa3: case 0xa5: case 0xa7:
+  case 0xa9: case 0xab: case 0xad: case 0xaf:
+  case 0xb1: case 0xb3: case 0xb5: case 0xb7:
+  case 0xb9: case 0xbb: case 0xbd: case 0xbf:  //port $bf
+    return readControl();
   }
 
   return 0xb0;
@@ -35,6 +79,31 @@ auto VDP::in(uint8 addr) -> uint8 {
 
 auto VDP::out(uint8 addr, uint8 data) -> void {
   switch(addr) {
+
+  case 0x80: case 0x82: case 0x84: case 0x86:
+  case 0x88: case 0x8a: case 0x8c: case 0x8e:
+  case 0x90: case 0x92: case 0x94: case 0x96:
+  case 0x98: case 0x9a: case 0x9c: case 0x9e:
+  case 0xa0: case 0xa2: case 0xa4: case 0xa6:
+  case 0xa8: case 0xaa: case 0xac: case 0xae:
+  case 0xb0: case 0xb2: case 0xb4: case 0xb6:
+  case 0xb8: case 0xba: case 0xbc: case 0xbe: {  //port $be
+    writeData(data);
+    break;
+  }
+
+  case 0x81: case 0x83: case 0x85: case 0x87:
+  case 0x89: case 0x8b: case 0x8d: case 0x8f:
+  case 0x91: case 0x93: case 0x95: case 0x97:
+  case 0x99: case 0x9b: case 0x9d: case 0x9f:
+  case 0xa1: case 0xa3: case 0xa5: case 0xa7:
+  case 0xa9: case 0xab: case 0xad: case 0xaf:
+  case 0xb1: case 0xb3: case 0xb5: case 0xb7:
+  case 0xb9: case 0xbb: case 0xbd: case 0xbf: {  //port $bf
+    writeControl(data);
+    break;
+  }
+
   }
 }
 
@@ -42,7 +111,39 @@ auto VDP::power() -> void {
 }
 
 auto VDP::reset() -> void {
-  create(VDP::Enter, system.colorburst());
+  create(VDP::Enter, system.colorburst() * 6.0);
+}
+
+auto VDP::vblank() -> bool {
+  return false;
+}
+
+inline auto VDP::screenX() -> uint {
+  return system.model() != Model::GameGear ? 0 : (256 - 160) / 2;
+}
+
+inline auto VDP::screenY() -> uint {
+  return system.model() != Model::GameGear ? 0 : (240 - 144) / 2;
+}
+
+inline auto VDP::screenWidth() -> uint {
+  return system.model() != Model::GameGear ? 256 : 160;
+}
+
+inline auto VDP::screenHeight() -> uint {
+  switch(system.model()) {
+  case Model::SG1000: return 192;
+  case Model::MasterSystem: return 240;
+  case Model::GameGear: return 144;
+  }
+}
+
+inline auto VDP::activeWidth() -> uint {
+  return 256;
+}
+
+inline auto VDP::activeHeight() -> uint {
+  return system.model() == Model::SG1000 ? 192 : 240;
 }
 
 }
diff --git a/higan/ms/vdp/vdp.hpp b/higan/ms/vdp/vdp.hpp
index b0fb8fe..a1c30a4 100644
--- a/higan/ms/vdp/vdp.hpp
+++ b/higan/ms/vdp/vdp.hpp
@@ -12,8 +12,87 @@ struct VDP : Thread {
   auto power() -> void;
   auto reset() -> void;
 
+  auto vblank() -> bool;
+
+  //io.cpp
+  auto readData() -> uint8;
+  auto writeData(uint8 data) -> void;
+
+  auto readControl() -> uint8;
+  auto writeControl(uint8 data) -> void;
+
+  //render.cpp
+  auto scanline() -> void;
+  auto run() -> void;
+  auto outputPixel(uint12 color) -> void;
+
 private:
-  uint32 buffer[256 * 240];
+  inline auto screenX() -> uint;
+  inline auto screenY() -> uint;
+  inline auto screenWidth() -> uint;
+  inline auto screenHeight() -> uint;
+  inline auto activeWidth() -> uint;
+  inline auto activeHeight() -> uint;
+
+  uint8 vram[16 * 1024];
+  uint8 cram[64];  //SG-1000: 0, MS: 32, GG: 64
+
+  struct IO {
+    uint14 controlAddress;
+    uint2 controlCode;
+    bool controlLatch;
+
+    bool externalVDP;
+    bool mode3;
+    bool mode4;
+    bool spriteShiftLeft;
+    bool lineInterrupt;
+    bool hideLeft;
+    bool horizontalLock;
+    bool verticalLock;
+
+    bool spriteMag;
+    bool spriteSize;
+    bool mode2;
+    bool mode1;
+    bool interrupt;
+    bool blank;
+    bool ramSize;
+
+    bool nametableMask;
+    uint14 nametableAddress;
+
+    uint14 colorAddress;
+
+    uint14 patternAddress;
+
+    uint14 spriteAttributeMask;
+    uint14 spriteAttributeAddress;
+
+    uint14 spritePatternMask;
+    uint14 spritePatternAddress;
+
+    uint4 backColor;
+    uint4 textColor;
+
+    uint8 scrollX;
+
+    uint8 scrollY;
+
+    uint8 lineCounter;
+
+    uint5 fifthSprite;
+    bool spriteCollision;
+    bool spriteOverflow;
+  } io;
+
+  struct State {
+    uint32* output = nullptr;
+    uint x;
+    uint y;
+  } state;
+
+  uint32 buffer[256 * 240];  //SG-1000: 256 * 192
 };
 
 extern VDP vdp;
diff --git a/higan/processor/GNUmakefile b/higan/processor/GNUmakefile
index 2aaa74f..b5c518b 100644
--- a/higan/processor/GNUmakefile
+++ b/higan/processor/GNUmakefile
@@ -5,11 +5,11 @@ objects += $(if $(findstring gsu,$(processors)),processor-gsu)
 objects += $(if $(findstring hg51b,$(processors)),processor-hg51b)
 objects += $(if $(findstring lr35902,$(processors)),processor-lr35902)
 objects += $(if $(findstring m68k,$(processors)),processor-m68k)
-objects += $(if $(findstring r6502,$(processors)),processor-r6502)
-objects += $(if $(findstring r65816,$(processors)),processor-r65816)
+objects += $(if $(findstring mos6502,$(processors)),processor-mos6502)
 objects += $(if $(findstring spc700,$(processors)),processor-spc700)
 objects += $(if $(findstring upd96050,$(processors)),processor-upd96050)
 objects += $(if $(findstring v30mz,$(processors)),processor-v30mz)
+objects += $(if $(findstring wdc65816,$(processors)),processor-wdc65816)
 objects += $(if $(findstring z80,$(processors)),processor-z80)
 
 obj/processor-arm.o:      processor/arm/arm.cpp $(call rwildcard,processor/arm)
@@ -17,9 +17,9 @@ obj/processor-gsu.o:      processor/gsu/gsu.cpp $(call rwildcard,processor/gsu)
 obj/processor-hg51b.o:    processor/hg51b/hg51b.cpp $(call rwildcard,processor/hg51b)
 obj/processor-lr35902.o:  processor/lr35902/lr35902.cpp $(call rwildcard,processor/lr35902)
 obj/processor-m68k.o:     processor/m68k/m68k.cpp $(call rwildcard,processor/m68k)
-obj/processor-r6502.o:    processor/r6502/r6502.cpp $(call rwildcard,processor/r6502)
-obj/processor-r65816.o:   processor/r65816/r65816.cpp $(call rwildcard,processor/r65816)
+obj/processor-mos6502.o:  processor/mos6502/mos6502.cpp $(call rwildcard,processor/mos6502)
 obj/processor-spc700.o:   processor/spc700/spc700.cpp $(call rwildcard,processor/spc700)
 obj/processor-upd96050.o: processor/upd96050/upd96050.cpp $(call rwildcard,processor/upd96050)
 obj/processor-v30mz.o:    processor/v30mz/v30mz.cpp $(call rwildcard,processor/v30mz)
+obj/processor-wdc65816.o: processor/wdc65816/wdc65816.cpp $(call rwildcard,processor/wdc65816)
 obj/processor-z80.o:      processor/z80/z80.cpp $(call rwildcard,processor/z80)
diff --git a/higan/processor/mos6502/algorithms.cpp b/higan/processor/mos6502/algorithms.cpp
new file mode 100644
index 0000000..a4a1dc2
--- /dev/null
+++ b/higan/processor/mos6502/algorithms.cpp
@@ -0,0 +1,189 @@
+//opcode functions
+//================
+
+auto MOS6502::fp_adc() {
+  int result;
+
+  if(!allowBCD || !r.p.d) {
+    result = r.a + rd + r.p.c;
+  } else {
+    result = (r.a & 0x0f) + (rd & 0x0f) + (r.p.c << 0);
+    if(result > 0x09) result += 0x06;
+    r.p.c = result > 0x0f;
+    result = (r.a & 0xf0) + (rd & 0xf0) + (r.p.c << 4) + (result & 0x0f);
+  }
+
+  r.p.v = ~(r.a ^ rd) & (r.a ^ result) & 0x80;
+  r.p.c = (result > 0xff);
+  r.p.n = (result & 0x80);
+  r.p.z = ((uint8)result == 0);
+  r.a = result;
+}
+
+auto MOS6502::fp_and() {
+  r.a &= rd;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_asl() {
+  r.p.c = rd & 0x80;
+  rd <<= 1;
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_bit() {
+  r.p.n = (rd & 0x80);
+  r.p.v = (rd & 0x40);
+  r.p.z = ((rd & r.a) == 0);
+}
+
+auto MOS6502::fp_cmp() {
+  int result = r.a - rd;
+  r.p.n = (result & 0x80);
+  r.p.z = (uint8)(result == 0);
+  r.p.c = (result >= 0);
+}
+
+auto MOS6502::fp_cpx() {
+  int result = r.x - rd;
+  r.p.n = (result & 0x80);
+  r.p.z = (uint8)(result == 0);
+  r.p.c = (result >= 0);
+}
+
+auto MOS6502::fp_cpy() {
+  int result = r.y - rd;
+  r.p.n = (result & 0x80);
+  r.p.z = (uint8)(result == 0);
+  r.p.c = (result >= 0);
+}
+
+auto MOS6502::fp_dec() {
+  rd--;
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_eor() {
+  r.a ^= rd;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_inc() {
+  rd++;
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_lda() {
+  r.a = rd;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_ldx() {
+  r.x = rd;
+  r.p.n = (r.x & 0x80);
+  r.p.z = (r.x == 0);
+}
+
+auto MOS6502::fp_ldy() {
+  r.y = rd;
+  r.p.n = (r.y & 0x80);
+  r.p.z = (r.y == 0);
+}
+
+auto MOS6502::fp_lsr() {
+  r.p.c = rd & 0x01;
+  rd >>= 1;
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_ora() {
+  r.a |= rd;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_rla() {
+  uint carry = (uint)r.p.c;
+  r.p.c = r.a & 0x80;
+  r.a = (r.a << 1) | carry;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_rol() {
+  uint carry = (uint)r.p.c;
+  r.p.c = rd & 0x80;
+  rd = (rd << 1) | carry;
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_ror() {
+  uint carry = (uint)r.p.c << 7;
+  r.p.c = rd & 0x01;
+  rd = carry | (rd >> 1);
+  r.p.n = (rd & 0x80);
+  r.p.z = (rd == 0);
+}
+
+auto MOS6502::fp_rra() {
+  uint carry = (uint)r.p.c << 7;
+  r.p.c = r.a & 0x01;
+  r.a = carry | (r.a >> 1);
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_sbc() {
+  int result;
+  rd ^= 0xff;
+
+  if(!allowBCD || !r.p.d) {
+    result = r.a + rd + r.p.c;
+  } else {
+    result = (r.a & 0x0f) + (rd & 0x0f) + (r.p.c << 0);
+    if(result <= 0x0f) result -= 0x06;
+    r.p.c = result > 0x0f;
+    result = (r.a & 0xf0) + (rd & 0xf0) + (r.p.c << 4) + (result & 0x0f);
+  }
+
+  r.p.v = ~(r.a ^ rd) & (r.a ^ result) & 0x80;
+  r.p.c = (result > 0xff);
+  r.p.n = (result & 0x80);
+  r.p.z = ((uint8)result == 0);
+  r.a = result;
+}
+
+auto MOS6502::fp_sla() {
+  r.p.c = r.a & 0x80;
+  r.a <<= 1;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::fp_sra() {
+  r.p.c = r.a & 0x01;
+  r.a >>= 1;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+//illegal opcode functions
+//========================
+
+auto MOS6502::fp_dcp() {
+  fp_dec();
+  fp_cmp();
+}
+
+auto MOS6502::fp_lax() {
+  fp_lda();
+  r.x = r.a;
+}
diff --git a/higan/processor/mos6502/disassembler.cpp b/higan/processor/mos6502/disassembler.cpp
new file mode 100644
index 0000000..90481aa
--- /dev/null
+++ b/higan/processor/mos6502/disassembler.cpp
@@ -0,0 +1,299 @@
+auto MOS6502::disassemble() -> string {
+  return disassemble(r.pc);
+}
+
+auto MOS6502::disassemble(uint16 addr) -> string {
+  string output = {hex(addr, 4L), "  "};
+
+  auto abs = [&]() -> string { return {"$", hex(readDisassembler(addr + 2), 2L), hex(readDisassembler(addr + 1), 2L)}; };
+  auto abx = [&]() -> string { return {"$", hex(readDisassembler(addr + 2), 2L), hex(readDisassembler(addr + 1), 2L), ",x"}; };
+  auto aby = [&]() -> string { return {"$", hex(readDisassembler(addr + 2), 2L), hex(readDisassembler(addr + 1), 2L), ",y"}; };
+  auto iab = [&]() -> string { return {"($", hex(readDisassembler(addr + 2), 2L), hex(readDisassembler(addr + 1), 2L), ")"}; };
+  auto imm = [&]() -> string { return {"#$", hex(readDisassembler(addr + 1), 2L)}; };
+  auto imp = [&]() -> string { return {""}; };
+  auto izx = [&]() -> string { return {"($", hex(readDisassembler(addr + 1), 2L), ",x)"}; };
+  auto izy = [&]() -> string { return {"($", hex(readDisassembler(addr + 1), 2L), "),y"}; };
+  auto rel = [&]() -> string { return {"$", hex((addr + 2) + (int8)readDisassembler(addr + 1), 4L)}; };
+  auto zpg = [&]() -> string { return {"$", hex(readDisassembler(addr + 1), 2L)}; };
+  auto zpx = [&]() -> string { return {"$", hex(readDisassembler(addr + 1), 2L), ",x"}; };
+  auto zpy = [&]() -> string { return {"$", hex(readDisassembler(addr + 1), 2L), ",y"}; };
+
+  #define op(byte, prefix, mode) \
+    case byte: output.append(#prefix, " ", mode()); \
+    break
+
+  uint8 opcode = readDisassembler(addr);
+  switch(opcode) {
+    op(0x00, brk, imm);
+    op(0x01, ora, izx);
+    op(0x02, stp, imp); // I
+    op(0x03, slo, izx); // I
+    op(0x04, nop, zpg); // I
+    op(0x05, ora, zpg);
+    op(0x06, asl, zpg);
+    op(0x07, slo, zpg); // I
+    op(0x08, php, imp);
+    op(0x09, ora, imm);
+    op(0x0a, asl, imp);
+    op(0x0b, anc, imm); // I
+    op(0x0c, nop, abs); // I
+    op(0x0d, ora, abs);
+    op(0x0e, asl, abs);
+    op(0x0f, slo, abs); // I
+    op(0x10, bpl, rel);
+    op(0x11, ora, izy);
+    op(0x12, stp, imp); // I
+    op(0x13, slo, izy); // I
+    op(0x14, nop, zpx); // I
+    op(0x15, ora, zpx);
+    op(0x16, asl, zpx);
+    op(0x17, slo, zpx); // I
+    op(0x18, clc, imp);
+    op(0x19, ora, aby);
+    op(0x1a, nop, imp); // I
+    op(0x1b, slo, aby); // I
+    op(0x1c, nop, abx); // I
+    op(0x1d, ora, abx);
+    op(0x1e, asl, abx);
+    op(0x1f, slo, abx); // I
+    op(0x20, jsr, abs);
+    op(0x21, and, izx);
+    op(0x22, stp, imp); // I
+    op(0x23, rla, izx); // I
+    op(0x24, bit, zpg);
+    op(0x25, and, zpg);
+    op(0x26, rol, zpg);
+    op(0x27, rla, zpg); // I
+    op(0x28, plp, imp);
+    op(0x29, and, imm);
+    op(0x2a, rol, imp);
+    op(0x2b, anc, imm); // I
+    op(0x2c, bit, abs);
+    op(0x2d, and, abs);
+    op(0x2e, rol, abs);
+    op(0x2f, rla, abs); // I
+    op(0x30, bmi, rel);
+    op(0x31, and, izy);
+    op(0x32, stp, imp); // I
+    op(0x33, rla, izy); // I
+    op(0x34, nop, zpx); // I
+    op(0x35, and, zpx);
+    op(0x36, rol, zpx);
+    op(0x37, rla, zpx); // I
+    op(0x38, sec, imp);
+    op(0x39, and, aby);
+    op(0x3a, nop, imp); // I
+    op(0x3b, rla, aby); // I
+    op(0x3c, nop, abx); // I
+    op(0x3d, and, abx);
+    op(0x3e, rol, abx);
+    op(0x3f, rla, abx); // I
+    op(0x40, rti, imp);
+    op(0x41, eor, izx);
+    op(0x42, stp, imp); // I
+    op(0x43, sre, izx); // I
+    op(0x44, nop, zpg); // I
+    op(0x45, eor, zpg);
+    op(0x46, lsr, zpg);
+    op(0x47, sre, zpg); // I
+    op(0x48, pha, imp);
+    op(0x49, eor, imm);
+    op(0x4a, lsr, imp);
+    op(0x4b, alr, imm); // I
+    op(0x4c, jmp, abs);
+    op(0x4d, eor, abs);
+    op(0x4e, lsr, abs);
+    op(0x4f, sre, abs); // I
+    op(0x50, bvc, rel);
+    op(0x51, eor, izy);
+    op(0x52, stp, imp); // I
+    op(0x53, sre, izy); // I
+    op(0x54, nop, zpx); // I
+    op(0x55, eor, zpx);
+    op(0x56, lsr, zpx);
+    op(0x57, sre, zpx); // I
+    op(0x58, cli, imp);
+    op(0x59, eor, aby);
+    op(0x5a, nop, imp); // I
+    op(0x5b, sre, aby); // I
+    op(0x5c, nop, abx); // I
+    op(0x5d, eor, abx);
+    op(0x5e, lsr, abx);
+    op(0x5f, sre, abx); // I
+    op(0x60, rts, imp);
+    op(0x61, adc, izx);
+    op(0x62, stp, imp); // I
+    op(0x63, rra, izx); // I
+    op(0x64, nop, zpg); // I
+    op(0x65, adc, zpg);
+    op(0x66, ror, zpg);
+    op(0x67, rra, zpg); // I
+    op(0x68, pla, imp);
+    op(0x69, adc, imm);
+    op(0x6a, ror, imp);
+    op(0x6b, arr, imm); // I
+    op(0x6c, jmp, iab);
+    op(0x6d, adc, abs);
+    op(0x6e, ror, abs);
+    op(0x6f, rra, abs); // I
+    op(0x70, bvs, rel);
+    op(0x71, adc, izy);
+    op(0x72, stp, imp); // I
+    op(0x73, rra, izy); // I
+    op(0x74, nop, zpx); // I
+    op(0x75, adc, zpx);
+    op(0x76, ror, zpx);
+    op(0x77, rra, zpx); // I
+    op(0x78, sei, imp);
+    op(0x79, adc, aby);
+    op(0x7a, nop, imp); // I
+    op(0x7b, rra, aby); // I
+    op(0x7c, nop, abx); // I
+    op(0x7d, adc, abx);
+    op(0x7e, ror, abx);
+    op(0x7f, rra, abx); // I
+    op(0x80, nop, imm); // I
+    op(0x81, sta, izx);
+    op(0x82, nop, imm); // I
+    op(0x83, sax, izx); // I
+    op(0x84, sty, zpg);
+    op(0x85, sta, zpg);
+    op(0x86, stx, zpg);
+    op(0x87, sax, zpg); // I
+    op(0x88, dey, imp);
+    op(0x89, nop, imm); // I
+    op(0x8a, txa, imp);
+    op(0x8b, xaa, imm); // I
+    op(0x8c, sty, abs);
+    op(0x8d, sta, abs);
+    op(0x8e, stx, abs);
+    op(0x8f, sax, abs); // I
+    op(0x90, bcc, rel);
+    op(0x91, sta, izy);
+    op(0x92, stp, imp); // I
+    op(0x93, sha, izy); // I
+    op(0x94, sty, zpx);
+    op(0x95, sta, zpx);
+    op(0x96, stx, zpy);
+    op(0x97, sax, zpy); // I
+    op(0x98, tya, imp);
+    op(0x99, sta, aby);
+    op(0x9a, txs, imp);
+    op(0x9b, tas, aby); // I
+    op(0x9c, shy, abx); // I
+    op(0x9d, sta, abx);
+    op(0x9e, shx, imm); // I
+    op(0x9f, sha, imm); // I
+    op(0xa0, ldy, imm);
+    op(0xa1, lda, izx);
+    op(0xa2, ldx, imm);
+    op(0xa3, lax, izx); // I
+    op(0xa4, ldy, zpg);
+    op(0xa5, lda, zpg);
+    op(0xa6, ldx, zpg);
+    op(0xa7, lax, zpg); // I
+    op(0xa8, tay, imp);
+    op(0xa9, lda, imm);
+    op(0xaa, tax, imp);
+    op(0xab, lxa, imm); // I
+    op(0xac, ldy, abs);
+    op(0xad, lda, abs);
+    op(0xae, ldx, abs);
+    op(0xaf, lax, abs); // I
+    op(0xb0, bcs, rel);
+    op(0xb1, lda, izy);
+    op(0xb2, stp, imp); // I
+    op(0xb3, lax, izy); // I
+    op(0xb4, ldy, zpx);
+    op(0xb5, lda, zpx);
+    op(0xb6, ldx, zpy);
+    op(0xb7, lax, zpy); // I
+    op(0xb8, clv, imp);
+    op(0xb9, lda, aby);
+    op(0xba, tsx, imp);
+    op(0xbb, las, aby); // I
+    op(0xbc, ldy, abx);
+    op(0xbd, lda, abx);
+    op(0xbe, ldx, aby);
+    op(0xbf, lax, aby); // I
+    op(0xc0, cpy, imm);
+    op(0xc1, cmp, izx);
+    op(0xc2, nop, imm); // I
+    op(0xc3, dcp, izx); // I
+    op(0xc4, cpy, zpg);
+    op(0xc5, cmp, zpg);
+    op(0xc6, dec, zpg);
+    op(0xc7, dcp, zpg); // I
+    op(0xc8, iny, imp);
+    op(0xc9, cmp, imm);
+    op(0xca, dex, imp);
+    op(0xcb, axs, imm); // I
+    op(0xcc, cpy, abs);
+    op(0xcd, cmp, abs);
+    op(0xce, dec, abs);
+    op(0xcf, dcp, abs); // I
+    op(0xd0, bne, rel);
+    op(0xd1, cmp, izy);
+    op(0xd2, stp, imp); // I
+    op(0xd3, dcp, izy); // I
+    op(0xd4, nop, zpx); // I
+    op(0xd5, cmp, zpx);
+    op(0xd6, dec, zpx);
+    op(0xd7, dcp, zpx); // I
+    op(0xd8, cld, imp);
+    op(0xd9, cmp, aby);
+    op(0xda, nop, imp); // I
+    op(0xdb, dcp, aby); // I
+    op(0xdc, nop, abx); // I
+    op(0xdd, cmp, abx);
+    op(0xde, dec, abx);
+    op(0xdf, dcp, abs); // I
+    op(0xe0, cpx, imm);
+    op(0xe1, sbc, izx);
+    op(0xe2, nop, imm); // I
+    op(0xe3, isc, zpx); // I
+    op(0xe4, cpx, zpg);
+    op(0xe5, sbc, zpg);
+    op(0xe6, inc, zpg);
+    op(0xe7, isc, zpg); // I
+    op(0xe8, inx, imp);
+    op(0xe9, sbc, imm);
+    op(0xea, nop, imp);
+    op(0xeb, sbc, imm); // I
+    op(0xec, cpx, abs);
+    op(0xed, sbc, abs);
+    op(0xee, inc, abs);
+    op(0xef, isc, abs); // I
+    op(0xf0, beq, rel);
+    op(0xf1, sbc, izy);
+    op(0xf2, stp, imp); // I
+    op(0xf3, isc, izy); // I
+    op(0xf4, nop, zpx); // I
+    op(0xf5, sbc, zpx);
+    op(0xf6, inc, zpx);
+    op(0xf7, isc, zpx); // I
+    op(0xf8, sed, imp);
+    op(0xf9, sbc, aby);
+    op(0xfa, nop, imp);
+    op(0xfb, isc, aby);
+    op(0xfc, nop, abx); // I
+    op(0xfd, sbc, abx);
+    op(0xfe, inc, abx);
+    op(0xff, isc, abx); // I
+
+    default: output.append("$", hex(opcode, 2L)); break;
+  }
+
+  #undef op
+
+  output.append("                ");
+  output.resize(20);
+
+  output.append(
+    "A:", hex(r.a, 2L), " X:", hex(r.x, 2L), " Y:", hex(r.y, 2L), " S:", hex(r.s, 2L), " ",
+    r.p.n ? "N" : "n", r.p.v ? "V" : "v", r.p.d ? "D" : "d",
+    r.p.i ? "I" : "i", r.p.z ? "Z" : "z", r.p.c ? "C" : "c"
+  );
+
+  return output;
+}
diff --git a/higan/processor/mos6502/instructions-illegal.cpp b/higan/processor/mos6502/instructions-illegal.cpp
new file mode 100644
index 0000000..f7e3efd
--- /dev/null
+++ b/higan/processor/mos6502/instructions-illegal.cpp
@@ -0,0 +1,230 @@
+auto MOS6502::op_nop_immediate() {
+L rd = readPC();
+}
+
+auto MOS6502::op_nop_absolute() {
+  abs.l = readPC();
+  abs.h = readPC();
+L idle();
+}
+
+auto MOS6502::op_nop_absolute_x() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPage(abs.w, abs.w + r.x);
+L idle();
+}
+
+auto MOS6502::op_nop_zero_page() {
+  zp = readPC();
+L readZP(zp);
+}
+
+auto MOS6502::op_nop_zero_page_x() {
+  zp = readPC();
+  readZP(zp);
+L readZP(zp + r.x);
+}
+
+auto MOS6502::op_stp() {
+  while(true) idle();
+}
+
+auto MOS6502::op_rmwr_absolute(fp opw, fp opr) {
+  abs.l = readPC();
+  abs.h = readPC();
+  rd = read(abs.w);
+  write(abs.w, rd);
+  call(opw);
+L write(abs.w, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_absolute_x(fp opw, fp opr) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.x);
+  rd = read(abs.w + r.x);
+  write(abs.w + r.x, rd);
+  call(opw);
+L write(abs.w + r.x, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_absolute_y(fp opw, fp opr) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+  rd = read(abs.w + r.y);
+  write(abs.w + r.y, rd);
+  call(opw);
+L write(abs.w + r.y, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_indirect_zero_page_x(fp opw, fp opr) {
+  zp = readPC();
+  readZP(zp);
+  abs.l = readZP(zp++ + r.x);
+  abs.h = readZP(zp++ + r.x);
+  rd = read(abs.w);
+  write(abs.w, rd);
+  call(opw);
+L write(abs.w, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_indirect_zero_page_y(fp opw, fp opr) {
+  rd = readPC();
+  abs.l = readZP(rd++);
+  abs.h = readZP(rd++);
+  ioPageAlways(abs.w, abs.w + r.y);
+  rd = read(abs.w + r.y);
+  write(abs.w + r.y, rd);
+  call(opw);
+L write(abs.w + r.y, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_zero_page(fp opw, fp opr) {
+  zp = readPC();
+  rd = readZP(zp);
+  writeZP(zp, rd);
+  call(opw);
+L writeZP(zp, rd);
+  call(opr);
+}
+
+auto MOS6502::op_rmwr_zero_page_x(fp opw, fp opr) {
+  zp = readPC();
+  readZP(zp);
+  rd = readZP(zp + r.x);
+  writeZP(zp + r.x, rd);
+  call(opw);
+L writeZP(zp + r.x, rd);
+  call(opr);
+}
+
+auto MOS6502::op_alr_immediate() {
+  op_read_immediate(&MOS6502::fp_and);
+  fp_sra();
+}
+
+auto MOS6502::op_anc_immediate() {
+L rd = readPC();
+  fp_and();
+  r.p.c = r.p.n;
+}
+
+auto MOS6502::op_arr_immediate() {
+L rd = readPC();
+  r.a &= rd;
+  r.a = (r.p.c << 7) | (r.a >> 1);
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+  r.p.c = (r.a & 0x40);
+  r.p.v = r.p.c ^ ((r.a >> 5) & 1);
+}
+
+auto MOS6502::op_axs_immediate() {
+L rd = readPC();
+  int result = (r.a & r.x) - rd;
+  r.p.n = (result & 0x80);
+  r.p.z = ((uint8)result == 0);
+  r.p.c = (result >= 0);
+  r.x = result;
+}
+
+auto MOS6502::op_dcp_absolute_y() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+  rd = read(abs.w + r.y);
+  write(abs.w + r.y, rd);
+  fp_dcp();
+L write(abs.w + r.y, rd);
+}
+
+auto MOS6502::op_dcp_indirect_zero_page_x() {
+  zp = readPC();
+  readZP(zp);
+  abs.l = readZP(zp++ + r.x);
+  abs.h = readZP(zp++ + r.x);
+  rd = read(abs.w);
+  write(abs.w, rd);
+  fp_dcp();
+L write(abs.w, rd);
+}
+
+auto MOS6502::op_dcp_indirect_zero_page_y() {
+  rd = readPC();
+  abs.l = readZP(rd++);
+  abs.h = readZP(rd++);
+  ioPageAlways(abs.w, abs.w + r.y);
+  rd = read(abs.w + r.y);
+  write(abs.w + r.y, rd);
+  fp_dcp();
+L write(abs.w + r.y, rd);
+}
+
+auto MOS6502::op_las_absolute_y() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPage(abs.w, abs.w + r.y);
+L rd = read(abs.w + r.y);
+  r.a = r.x = r.s = rd & r.s;
+}
+
+auto MOS6502::op_lxa_immediate() {
+L rd = readPC();
+  //While other LAX opcodes decode to LDA and LDX, this one decodes
+  //to LDA, LDX, and TAX, causing line noise on the data bus to interfere.
+  //http://atariage.com/forums/topic/168616-lxa-stable/
+  r.a = r.x = (r.a | (rand() & 0xff)) & rd;
+  r.p.n = (r.a & 0x80);
+  r.p.z = (r.a == 0);
+}
+
+auto MOS6502::op_sha_absolute_y() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+L write(abs.w + r.y, r.a & r.x & (abs.h + 1));
+}
+
+auto MOS6502::op_sha_indirect_zero_page_y() {
+  rd = readPC();
+  abs.l = readZP(rd++);
+  abs.h = readZP(rd++);
+  ioPageAlways(abs.w, abs.w + r.y);
+L write(abs.w + r.y, r.a & r.x & (abs.h + 1));
+}
+
+auto MOS6502::op_shx_absolute_y() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+  if(abs.h != (abs.w + r.y) >> 8) abs.h &= r.x;
+L write(abs.w + r.y, r.x & (abs.h + 1));
+}
+
+auto MOS6502::op_shy_absolute_x() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.x);
+  if(abs.h != (abs.w + r.x) >> 8) abs.h &= r.y;
+L write(abs.w + r.x, r.y & (abs.h + 1));
+}
+
+auto MOS6502::op_tas_absolute_y() {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+  r.s = r.a & r.x;
+L write(abs.w + r.y, r.a & r.x & (abs.h + 1));
+}
+
+auto MOS6502::op_xaa_immediate() {
+  rd = readPC();
+  r.a = (r.a | (rand() & 0xff)) & r.x & rd;
+}
diff --git a/higan/processor/mos6502/instructions-misc.cpp b/higan/processor/mos6502/instructions-misc.cpp
new file mode 100644
index 0000000..4fb20ae
--- /dev/null
+++ b/higan/processor/mos6502/instructions-misc.cpp
@@ -0,0 +1,58 @@
+auto MOS6502::op_nop() {
+L idle();
+}
+
+auto MOS6502::op_brk() {
+  readPC();
+  writeSP(r.pc >> 8);
+  writeSP(r.pc >> 0);
+  uint16 vector = 0xfffe;
+  nmi(vector);
+  writeSP(r.p | 0x30);
+  abs.l = read(vector + 0);
+  r.p.i = 1;
+L abs.h = read(vector + 1);
+  r.pc = abs.w;
+}
+
+auto MOS6502::op_set_flag(uint bit) {
+L idle();
+  r.p |= 1 << bit;
+}
+
+auto MOS6502::op_clear_flag(uint bit) {
+L idle();
+  r.p &= ~(1 << bit);
+}
+
+auto MOS6502::op_transfer(uint8& s, uint8& d, bool flag) {
+L idle();
+  d = s;
+  if(flag == false) return;
+  r.p.n = (d & 0x80);
+  r.p.z = (d == 0);
+}
+
+auto MOS6502::op_push(uint8& reg) {
+  idle();
+L writeSP(reg);
+}
+
+auto MOS6502::op_php() {
+  idle();
+L writeSP(r.p | 0x30);
+}
+
+auto MOS6502::op_pull(uint8& reg) {
+  idle();
+  idle();
+L reg = readSP();
+  r.p.n = (reg & 0x80);
+  r.p.z = (reg == 0);
+}
+
+auto MOS6502::op_plp() {
+  idle();
+  idle();
+L r.p = readSP();
+}
diff --git a/higan/processor/mos6502/instructions-pc.cpp b/higan/processor/mos6502/instructions-pc.cpp
new file mode 100644
index 0000000..dedbff4
--- /dev/null
+++ b/higan/processor/mos6502/instructions-pc.cpp
@@ -0,0 +1,53 @@
+auto MOS6502::op_branch(bool flag, bool value) {
+  if(flag != value) {
+L   rd = readPC();
+  } else {
+    rd = readPC();
+    aa = r.pc + (int8)rd;
+    ioPage(r.pc, aa);
+L   idle();
+    r.pc = aa;
+  }
+}
+
+auto MOS6502::op_jmp_absolute() {
+  abs.l = readPC();
+L abs.h = readPC();
+  r.pc = abs.w;
+}
+
+auto MOS6502::op_jmp_indirect_absolute() {
+  abs.l = readPC();
+  abs.h = readPC();
+  iabs.l = read(abs.w); abs.l++;
+L iabs.h = read(abs.w); abs.l++;
+  r.pc = iabs.w;
+}
+
+auto MOS6502::op_jsr_absolute() {
+  abs.l = readPC();
+  abs.h = readPC();
+  idle();
+  r.pc.w--;
+  writeSP(r.pc >> 8);
+L writeSP(r.pc >> 0);
+  r.pc.w = abs.w;
+}
+
+auto MOS6502::op_rti() {
+  idle();
+  idle();
+  r.p = readSP();
+  abs.l = readSP();
+L abs.h = readSP();
+  r.pc = abs.w;
+}
+
+auto MOS6502::op_rts() {
+  idle();
+  idle();
+  abs.l = readSP();
+  abs.h = readSP();
+L idle();
+  r.pc = ++abs.w;
+}
diff --git a/higan/processor/mos6502/instructions-read.cpp b/higan/processor/mos6502/instructions-read.cpp
new file mode 100644
index 0000000..323720d
--- /dev/null
+++ b/higan/processor/mos6502/instructions-read.cpp
@@ -0,0 +1,65 @@
+auto MOS6502::op_read_immediate(fp op) {
+L rd = readPC();
+  call(op);
+}
+
+auto MOS6502::op_read_absolute(fp op) {
+  abs.l = readPC();
+  abs.h = readPC();
+L rd = read(abs.w);
+  call(op);
+}
+
+auto MOS6502::op_read_absolute_x(fp op) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPage(abs.w, abs.w + r.x);
+L rd = read(abs.w + r.x);
+  call(op);
+}
+
+auto MOS6502::op_read_absolute_y(fp op) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPage(abs.w, abs.w + r.y);
+L rd = read(abs.w + r.y);
+  call(op);
+}
+
+auto MOS6502::op_read_zero_page(fp op) {
+  zp = readPC();
+L rd = readZP(zp);
+  call(op);
+}
+
+auto MOS6502::op_read_zero_page_x(fp op) {
+  zp = readPC();
+  readZP(zp);
+L rd = readZP(zp + r.x);
+  call(op);
+}
+
+auto MOS6502::op_read_zero_page_y(fp op) {
+  zp = readPC();
+  readZP(zp);
+L rd = readZP(zp + r.y);
+  call(op);
+}
+
+auto MOS6502::op_read_indirect_zero_page_x(fp op) {
+  zp = readPC();
+  readZP(zp);
+  abs.l = readZP(zp++ + r.x);
+  abs.h = readZP(zp++ + r.x);
+L rd = read(abs.w);
+  call(op);
+}
+
+auto MOS6502::op_read_indirect_zero_page_y(fp op) {
+  rd = readPC();
+  abs.l = readZP(rd++);
+  abs.h = readZP(rd++);
+  ioPage(abs.w, abs.w + r.y);
+L rd = read(abs.w + r.y);
+  call(op);
+}
diff --git a/higan/processor/mos6502/instructions-rmw.cpp b/higan/processor/mos6502/instructions-rmw.cpp
new file mode 100644
index 0000000..b7c111e
--- /dev/null
+++ b/higan/processor/mos6502/instructions-rmw.cpp
@@ -0,0 +1,54 @@
+auto MOS6502::op_increment(uint8& reg) {
+L idle();
+  reg++;
+  r.p.n = (reg & 0x80);
+  r.p.z = (reg == 0);
+}
+
+auto MOS6502::op_decrement(uint8& reg) {
+L idle();
+  reg--;
+  r.p.n = (reg & 0x80);
+  r.p.z = (reg == 0);
+}
+
+auto MOS6502::op_shift(fp op) {
+L idle();
+  call(op);
+}
+
+auto MOS6502::op_rmw_absolute(fp op) {
+  abs.l = readPC();
+  abs.h = readPC();
+  rd = read(abs.w);
+  write(abs.w, rd);
+  call(op);
+L write(abs.w, rd);
+}
+
+auto MOS6502::op_rmw_absolute_x(fp op) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.x);
+  rd = read(abs.w + r.x);
+  write(abs.w + r.x, rd);
+  call(op);
+L write(abs.w + r.x, rd);
+}
+
+auto MOS6502::op_rmw_zero_page(fp op) {
+  zp = readPC();
+  rd = readZP(zp);
+  writeZP(zp, rd);
+  call(op);
+L writeZP(zp, rd);
+}
+
+auto MOS6502::op_rmw_zero_page_x(fp op) {
+  zp = readPC();
+  readZP(zp);
+  rd = readZP(zp + r.x);
+  writeZP(zp + r.x, rd);
+  call(op);
+L writeZP(zp + r.x, rd);
+}
diff --git a/higan/processor/mos6502/instructions-write.cpp b/higan/processor/mos6502/instructions-write.cpp
new file mode 100644
index 0000000..c7ef049
--- /dev/null
+++ b/higan/processor/mos6502/instructions-write.cpp
@@ -0,0 +1,52 @@
+auto MOS6502::op_store_absolute(uint8 reg) {
+  abs.l = readPC();
+  abs.h = readPC();
+L write(abs.w, reg);
+}
+
+auto MOS6502::op_store_absolute_x(uint8& reg) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.x);
+L write(abs.w + r.x, reg);
+}
+
+auto MOS6502::op_store_absolute_y(uint8& reg) {
+  abs.l = readPC();
+  abs.h = readPC();
+  ioPageAlways(abs.w, abs.w + r.y);
+L write(abs.w + r.y, reg);
+}
+
+auto MOS6502::op_store_zero_page(uint8 reg) {
+  zp = readPC();
+L writeZP(zp, reg);
+}
+
+auto MOS6502::op_store_zero_page_x(uint8 reg) {
+  zp = readPC();
+  readZP(zp);
+L writeZP(zp + r.x, reg);
+}
+
+auto MOS6502::op_store_zero_page_y(uint8 reg) {
+  zp = readPC();
+  readZP(zp);
+L writeZP(zp + r.y, reg);
+}
+
+auto MOS6502::op_store_indirect_zero_page_x(uint8 reg) {
+  zp = readPC();
+  readZP(zp);
+  abs.l = readZP(zp++ + r.x);
+  abs.h = readZP(zp++ + r.x);
+L write(abs.w, reg);
+}
+
+auto MOS6502::op_store_indirect_zero_page_y(uint8& reg) {
+  rd = readPC();
+  abs.l = readZP(rd++);
+  abs.h = readZP(rd++);
+  ioPageAlways(abs.w, abs.w + r.y);
+L write(abs.w + r.y, reg);
+}
diff --git a/higan/processor/mos6502/memory.hpp b/higan/processor/mos6502/memory.hpp
new file mode 100644
index 0000000..6da1498
--- /dev/null
+++ b/higan/processor/mos6502/memory.hpp
@@ -0,0 +1,31 @@
+alwaysinline auto idle() -> uint8 {
+  return read(r.pc);
+}
+
+alwaysinline auto readPC() -> uint8 {
+  return read(r.pc.w++);
+}
+
+alwaysinline auto readSP() -> uint8 {
+  return read(0x0100 | ++r.s);
+}
+
+alwaysinline auto readZP(uint8 addr) -> uint8 {
+  return read(addr);
+}
+
+alwaysinline auto writeSP(uint8 data) -> void {
+  write(0x0100 | r.s--, data);
+}
+
+alwaysinline auto writeZP(uint8 addr, uint8 data) -> void {
+  write(addr, data);
+}
+
+alwaysinline auto ioPage(uint16 x, uint16 y) -> void {
+  if((x & 0xff00) != (y & 0xff00)) read((x & 0xff00) | (y & 0x00ff));
+}
+
+alwaysinline auto ioPageAlways(uint16 x, uint16 y) -> void {
+  read((x & 0xff00) | (y & 0x00ff));
+}
diff --git a/higan/processor/mos6502/mos6502.cpp b/higan/processor/mos6502/mos6502.cpp
new file mode 100644
index 0000000..55ae23a
--- /dev/null
+++ b/higan/processor/mos6502/mos6502.cpp
@@ -0,0 +1,59 @@
+#include <processor/processor.hpp>
+#include "mos6502.hpp"
+
+namespace Processor {
+
+#include "algorithms.cpp"
+#include "disassembler.cpp"
+#include "serialization.cpp"
+
+#define L lastCycle();
+#define call(op) (this->*op)()
+
+#include "instructions-read.cpp"
+#include "instructions-write.cpp"
+#include "instructions-rmw.cpp"
+#include "instructions-pc.cpp"
+#include "instructions-misc.cpp"
+#include "instructions-illegal.cpp"
+#include "switch.cpp"
+
+MOS6502::MOS6502(bool allowBCD) : allowBCD(allowBCD) {
+}
+
+auto MOS6502::interrupt() -> void {
+  idle();
+  idle();
+  writeSP(r.pc.h);
+  writeSP(r.pc.l);
+  uint16 vector = 0xfffe;  //IRQ
+  nmi(vector);
+  writeSP(r.p | 0x20);
+  abs.l = read(vector + 0);
+  r.p.i = 1;
+L abs.h = read(vector + 1);
+  r.pc = abs.w;
+}
+
+auto MOS6502::mdr() const -> uint8 {
+  return r.mdr;
+}
+
+auto MOS6502::power() -> void {
+  r.a = 0x00;
+  r.x = 0x00;
+  r.y = 0x00;
+  r.s = 0x00;
+  r.p = 0x04;
+}
+
+auto MOS6502::reset() -> void {
+  r.mdr = 0x00;
+  r.s -= 3;
+  r.p.i = 1;
+}
+
+#undef L
+#undef call
+
+}
diff --git a/higan/processor/r6502/r6502.hpp b/higan/processor/mos6502/mos6502.hpp
similarity index 54%
rename from higan/processor/r6502/r6502.hpp
rename to higan/processor/mos6502/mos6502.hpp
index 9dd6206..97c4f17 100644
--- a/higan/processor/r6502/r6502.hpp
+++ b/higan/processor/mos6502/mos6502.hpp
@@ -1,4 +1,5 @@
-//Ricoh 6502
+//MOS 6502
+//* MOS 6507
 //* Ricoh 2A03
 //* Ricoh 2A07
 
@@ -6,35 +7,28 @@
 
 namespace Processor {
 
-struct R6502 {
+struct MOS6502 {
+  #include "registers.hpp"
+  #include "memory.hpp"
+
+  using fp = auto (MOS6502::*)() -> void;
+
+  MOS6502(bool allowBCD);
+
   virtual auto read(uint16 addr) -> uint8 = 0;
   virtual auto write(uint16 addr, uint8 data) -> void = 0;
   virtual auto lastCycle() -> void = 0;
   virtual auto nmi(uint16& vector) -> void = 0;
-  virtual auto readDebugger(uint16 addr) -> uint8 { return 0u; }
 
+  virtual auto readDisassembler(uint16 addr) -> uint8 { return 0; }
+
+  //mos6502.cpp
+  auto interrupt() -> void;
   auto mdr() const -> uint8;
   auto power() -> void;
   auto reset() -> void;
-  auto interrupt() -> void;
-  auto instruction() -> void;
-
-  auto serialize(serializer&) -> void;
-
-  //memory.cpp
-  auto io() -> uint8;
-  auto readPC() -> uint8;
-  auto readSP() -> uint8;
-  auto readZP(uint8 addr) -> uint8;
 
-  auto writeSP(uint8 data) -> void;
-  auto writeZP(uint8 addr, uint8 data) -> void;
-
-  auto ioPage(uint16 x, uint16 y) -> void;
-  auto ioPageAlways(uint16 x, uint16 y) -> void;
-
-  //instructions.cpp
-  using fp = auto (R6502::*)() -> void;
+  //algorithms.cpp
   auto fp_asl();
   auto fp_adc();
   auto fp_and();
@@ -57,60 +51,104 @@ struct R6502 {
   auto fp_sbc();
   auto fp_sla();
   auto fp_sra();
+  auto fp_dcp();
+  auto fp_lax();
 
-  auto op_branch(bool condition);
-  auto op_clear_flag(uint bit);
-  auto op_decrement(uint8& r);
-  auto op_increment(uint8& r);
-  auto op_pull(uint8& r);
-  auto op_push(uint8& r);
+  //opcode_read.cpp
+  auto op_read_immediate(fp);
   auto op_read_absolute(fp);
   auto op_read_absolute_x(fp);
   auto op_read_absolute_y(fp);
-  auto op_read_immediate(fp);
-  auto op_read_indirect_zero_page_x(fp);
-  auto op_read_indirect_zero_page_y(fp);
   auto op_read_zero_page(fp);
   auto op_read_zero_page_x(fp);
   auto op_read_zero_page_y(fp);
+  auto op_read_indirect_zero_page_x(fp);
+  auto op_read_indirect_zero_page_y(fp);
+
+  //opcode_write.cpp
+  auto op_store_absolute(uint8);
+  auto op_store_absolute_x(uint8&);
+  auto op_store_absolute_y(uint8&);
+  auto op_store_zero_page(uint8);
+  auto op_store_zero_page_x(uint8);
+  auto op_store_zero_page_y(uint8);
+  auto op_store_indirect_zero_page_x(uint8);
+  auto op_store_indirect_zero_page_y(uint8&);
+
+  //opcode_rmw.cpp
+  auto op_increment(uint8& r);
+  auto op_decrement(uint8& r);
+  auto op_shift(fp);
   auto op_rmw_absolute(fp);
   auto op_rmw_absolute_x(fp);
   auto op_rmw_zero_page(fp);
   auto op_rmw_zero_page_x(fp);
-  auto op_set_flag(uint bit);
-  auto op_shift(fp);
-  auto op_store_absolute(uint8& r);
-  auto op_store_absolute_x(uint8& r);
-  auto op_store_absolute_y(uint8& r);
-  auto op_store_indirect_zero_page_x(uint8& r);
-  auto op_store_indirect_zero_page_y(uint8& r);
-  auto op_store_zero_page(uint8& r);
-  auto op_store_zero_page_x(uint8& r);
-  auto op_store_zero_page_y(uint8& r);
-  auto op_transfer(uint8& s, uint8& d, bool flag);
 
-  auto op_brk();
+  //opcode_pc.cpp
+  auto op_branch(bool flag, bool value);
   auto op_jmp_absolute();
   auto op_jmp_indirect_absolute();
   auto op_jsr_absolute();
+  auto op_rti();
+  auto op_rts();
+
+  //opcode_misc.cpp
   auto op_nop();
+  auto op_brk();
+  auto op_set_flag(uint bit);
+  auto op_clear_flag(uint bit);
+  auto op_transfer(uint8& s, uint8& d, bool flag);
+  auto op_push(uint8& r);
   auto op_php();
+  auto op_pull(uint8& r);
   auto op_plp();
-  auto op_rti();
-  auto op_rts();
 
-  auto op_arr_immediate();
+  //opcode_illegal.cpp
+  auto op_nop_immediate();
   auto op_nop_absolute();
   auto op_nop_absolute_x();
-  auto op_nop_immediate();
-  auto op_nop_implied();
   auto op_nop_zero_page();
   auto op_nop_zero_page_x();
+  auto op_stp();
+  auto op_rmwr_absolute(fp, fp);
+  auto op_rmwr_absolute_x(fp, fp);
+  auto op_rmwr_absolute_y(fp, fp);
+  auto op_rmwr_indirect_zero_page_x(fp, fp);
+  auto op_rmwr_indirect_zero_page_y(fp, fp);
+  auto op_rmwr_zero_page(fp, fp);
+  auto op_rmwr_zero_page_x(fp, fp);
+  auto op_alr_immediate();
+  auto op_anc_immediate();
+  auto op_arr_immediate();
+  auto op_axs_immediate();
+  auto op_dcp_absolute_y();
+  auto op_dcp_indirect_zero_page_x();
+  auto op_dcp_indirect_zero_page_y();
+  auto op_las_absolute_y();
+  auto op_lxa_immediate();
+  auto op_sha_absolute_y();
+  auto op_sha_indirect_zero_page_y();
+  auto op_shx_absolute_y();
+  auto op_shy_absolute_x();
+  auto op_tas_absolute_y();
+  auto op_xaa_immediate();
+
+  //switch.cpp
+  auto instruction() -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
 
   //disassembler.cpp
   auto disassemble() -> string;
+  auto disassemble(uint16 addr) -> string;
 
-  #include "registers.hpp"
+  Registers r;
+  Reg16 abs, iabs;
+  uint8 rd, zp;
+  uint16 aa;
+
+  const bool allowBCD;
 };
 
 }
diff --git a/higan/processor/mos6502/registers.hpp b/higan/processor/mos6502/registers.hpp
new file mode 100644
index 0000000..3594e4a
--- /dev/null
+++ b/higan/processor/mos6502/registers.hpp
@@ -0,0 +1,45 @@
+struct Flags {
+  union {
+    uint8_t b = 0;
+    BooleanBitField<uint8_t, 7> n;
+    BooleanBitField<uint8_t, 6> v;
+    BooleanBitField<uint8_t, 3> d;
+    BooleanBitField<uint8_t, 2> i;
+    BooleanBitField<uint8_t, 1> z;
+    BooleanBitField<uint8_t, 0> c;
+  };
+
+  inline operator uint() const { return b; }
+  inline auto operator =(uint value) -> uint { return b  = value; }
+  inline auto operator&=(uint value) -> uint { return b &= value; }
+  inline auto operator|=(uint value) -> uint { return b |= value; }
+  inline auto operator^=(uint value) -> uint { return b ^= value; }
+};
+
+struct Reg16 {
+  union {
+    uint16_t w;
+    NaturalBitField<uint16_t, 0,  7> l;
+    NaturalBitField<uint16_t, 8, 15> h;
+  };
+
+  inline operator uint() const { return w; }
+  inline auto operator  =(uint value) -> uint { return w   = value; }
+  inline auto operator |=(uint value) -> uint { return w  |= value; }
+  inline auto operator ^=(uint value) -> uint { return w  ^= value; }
+  inline auto operator &=(uint value) -> uint { return w  &= value; }
+  inline auto operator<<=(uint value) -> uint { return w <<= value; }
+  inline auto operator>>=(uint value) -> uint { return w >>= value; }
+  inline auto operator +=(uint value) -> uint { return w  += value; }
+  inline auto operator -=(uint value) -> uint { return w  -= value; }
+  inline auto operator *=(uint value) -> uint { return w  *= value; }
+  inline auto operator /=(uint value) -> uint { return w  /= value; }
+  inline auto operator %=(uint value) -> uint { return w  %= value; }
+};
+
+struct Registers {
+  uint8 mdr;
+  Reg16 pc;
+  uint8 a, x, y, s;
+  Flags p;
+};
diff --git a/higan/processor/mos6502/serialization.cpp b/higan/processor/mos6502/serialization.cpp
new file mode 100644
index 0000000..13f9fc1
--- /dev/null
+++ b/higan/processor/mos6502/serialization.cpp
@@ -0,0 +1,15 @@
+auto MOS6502::serialize(serializer& s) -> void {
+  s.integer(r.mdr);
+  s.integer(r.pc.w);
+  s.integer(r.a);
+  s.integer(r.x);
+  s.integer(r.y);
+  s.integer(r.s);
+  s.integer(r.p.b);
+
+  s.integer(abs.w);
+  s.integer(iabs.w);
+  s.integer(rd);
+  s.integer(zp);
+  s.integer(aa);
+}
diff --git a/higan/processor/mos6502/switch.cpp b/higan/processor/mos6502/switch.cpp
new file mode 100644
index 0000000..20215c1
--- /dev/null
+++ b/higan/processor/mos6502/switch.cpp
@@ -0,0 +1,268 @@
+#define I  //prefix highlights illegal instructions
+#define op(id, name, ...) case id: return op_##name(__VA_ARGS__);
+#define fp(name) &MOS6502::fp_##name
+
+auto MOS6502::instruction() -> void {
+  switch(readPC()) {
+  op(0x00, brk)
+  op(0x01, read_indirect_zero_page_x, fp(ora))
+I op(0x02, stp)
+I op(0x03, rmwr_indirect_zero_page_x, fp(asl), fp(ora))
+I op(0x04, nop_zero_page)
+  op(0x05, read_zero_page, fp(ora))
+  op(0x06, rmw_zero_page, fp(asl))
+I op(0x07, rmwr_zero_page, fp(asl), fp(ora))
+  op(0x08, php)
+  op(0x09, read_immediate, fp(ora))
+  op(0x0a, shift, fp(sla))
+I op(0x0b, anc_immediate)
+I op(0x0c, nop_absolute)
+  op(0x0d, read_absolute, fp(ora))
+  op(0x0e, rmw_absolute, fp(asl))
+I op(0x0f, rmwr_absolute, fp(asl), fp(ora))
+  op(0x10, branch, r.p.n, 0)
+  op(0x11, read_indirect_zero_page_y, fp(ora))
+I op(0x12, stp)
+I op(0x13, rmwr_indirect_zero_page_y, fp(asl), fp(ora))
+I op(0x14, nop_zero_page_x)
+  op(0x15, read_zero_page_x, fp(ora))
+  op(0x16, rmw_zero_page_x, fp(asl))
+I op(0x17, rmwr_zero_page_x, fp(asl), fp(ora))
+  op(0x18, clear_flag, r.p.c.bit)
+  op(0x19, read_absolute_y, fp(ora))
+I op(0x1a, nop)
+I op(0x1b, rmwr_absolute_y, fp(asl), fp(ora))
+I op(0x1c, nop_absolute_x)
+  op(0x1d, read_absolute_x, fp(ora))
+  op(0x1e, rmw_absolute_x, fp(asl))
+I op(0x1f, rmwr_absolute_x, fp(asl), fp(ora))
+  op(0x20, jsr_absolute)
+  op(0x21, read_indirect_zero_page_x, fp(and))
+I op(0x22, stp)
+I op(0x23, rmwr_indirect_zero_page_x, fp(rol), fp(and))
+  op(0x24, read_zero_page, fp(bit))
+  op(0x25, read_zero_page, fp(and))
+  op(0x26, rmw_zero_page, fp(rol))
+I op(0x27, rmwr_zero_page, fp(rol), fp(and))
+  op(0x28, plp)
+  op(0x29, read_immediate, fp(and))
+  op(0x2a, shift, fp(rla))
+I op(0x2b, anc_immediate)
+  op(0x2c, read_absolute, fp(bit))
+  op(0x2d, read_absolute, fp(and))
+  op(0x2e, rmw_absolute, fp(rol))
+I op(0x2f, rmwr_absolute, fp(rol), fp(and))
+  op(0x30, branch, r.p.n, 1)
+  op(0x31, read_indirect_zero_page_y, fp(and))
+I op(0x32, stp)
+I op(0x33, rmwr_indirect_zero_page_y, fp(rol), fp(and))
+I op(0x34, nop_zero_page_x)
+  op(0x35, read_zero_page_x, fp(and))
+  op(0x36, rmw_zero_page_x, fp(rol))
+I op(0x37, rmwr_zero_page_x, fp(rol), fp(and))
+  op(0x38, set_flag, r.p.c.bit)
+  op(0x39, read_absolute_y, fp(and))
+I op(0x3a, nop)
+I op(0x3b, rmwr_absolute_y, fp(rol), fp(and))
+I op(0x3c, nop_absolute_x)
+  op(0x3d, read_absolute_x, fp(and))
+  op(0x3e, rmw_absolute_x, fp(rol))
+I op(0x3f, rmwr_absolute_x, fp(rol), fp(and))
+  op(0x40, rti)
+  op(0x41, read_indirect_zero_page_x, fp(eor))
+I op(0x42, stp)
+I op(0x43, rmwr_indirect_zero_page_x, fp(lsr), fp(eor))
+I op(0x44, nop_zero_page)
+  op(0x45, read_zero_page, fp(eor))
+  op(0x46, rmw_zero_page, fp(lsr))
+I op(0x47, rmwr_zero_page, fp(lsr), fp(eor))
+  op(0x48, push, r.a)
+  op(0x49, read_immediate, fp(eor))
+  op(0x4a, shift, fp(sra))
+I op(0x4b, alr_immediate)
+  op(0x4c, jmp_absolute)
+  op(0x4d, read_absolute, fp(eor))
+  op(0x4e, rmw_absolute, fp(lsr))
+I op(0x4f, rmwr_absolute, fp(lsr), fp(eor))
+  op(0x50, branch, r.p.v, 0)
+  op(0x51, read_indirect_zero_page_y, fp(eor))
+I op(0x52, stp)
+I op(0x53, rmwr_indirect_zero_page_y, fp(lsr), fp(eor))
+I op(0x54, nop_zero_page_x)
+  op(0x55, read_zero_page_x, fp(eor))
+  op(0x56, rmw_zero_page_x, fp(lsr))
+I op(0x57, rmwr_zero_page_x, fp(lsr), fp(eor))
+  op(0x58, clear_flag, r.p.i.bit)
+  op(0x59, read_absolute_y, fp(eor))
+I op(0x5a, nop)
+I op(0x5b, rmwr_absolute_y, fp(lsr), fp(eor))
+I op(0x5c, nop_absolute_x)
+  op(0x5d, read_absolute_x, fp(eor))
+  op(0x5e, rmw_absolute_x, fp(lsr))
+I op(0x5f, rmwr_absolute_x, fp(lsr), fp(eor))
+  op(0x60, rts)
+  op(0x61, read_indirect_zero_page_x, fp(adc))
+I op(0x62, stp)
+I op(0x63, rmwr_indirect_zero_page_x, fp(ror), fp(adc))
+I op(0x64, nop_zero_page)
+  op(0x65, read_zero_page, fp(adc))
+  op(0x66, rmw_zero_page, fp(ror))
+I op(0x67, rmwr_zero_page, fp(ror), fp(adc))
+  op(0x68, pull, r.a)
+  op(0x69, read_immediate, fp(adc))
+  op(0x6a, shift, fp(rra))
+I op(0x6b, arr_immediate)
+  op(0x6c, jmp_indirect_absolute)
+  op(0x6d, read_absolute, fp(adc))
+  op(0x6e, rmw_absolute, fp(ror))
+I op(0x6f, rmwr_absolute, fp(ror), fp(adc))
+  op(0x70, branch, r.p.v, 1)
+  op(0x71, read_indirect_zero_page_y, fp(adc))
+I op(0x72, stp)
+I op(0x73, rmwr_indirect_zero_page_y, fp(ror), fp(adc))
+I op(0x74, nop_zero_page_x)
+  op(0x75, read_zero_page_x, fp(adc))
+  op(0x76, rmw_zero_page_x, fp(ror))
+I op(0x77, rmwr_zero_page_x, fp(ror), fp(adc))
+  op(0x78, set_flag, r.p.i.bit)
+  op(0x79, read_absolute_y, fp(adc))
+I op(0x7a, nop)
+I op(0x7b, rmwr_absolute_y, fp(ror), fp(adc))
+I op(0x7c, nop_absolute_x)
+  op(0x7d, read_absolute_x, fp(adc))
+  op(0x7e, rmw_absolute_x, fp(ror))
+I op(0x7f, rmwr_absolute_x, fp(ror), fp(adc))
+I op(0x80, nop_immediate) // r.y
+  op(0x81, store_indirect_zero_page_x, r.a)
+I op(0x82, nop_immediate) // r.x
+I op(0x83, store_indirect_zero_page_x, r.a & r.x)
+  op(0x84, store_zero_page, r.y)
+  op(0x85, store_zero_page, r.a)
+  op(0x86, store_zero_page, r.x)
+I op(0x87, store_zero_page, r.a & r.x)
+  op(0x88, decrement, r.y)
+I op(0x89, nop_immediate) // r.a
+  op(0x8a, transfer, r.x, r.a, 1)
+I op(0x8b, xaa_immediate)
+  op(0x8c, store_absolute, r.y)
+  op(0x8d, store_absolute, r.a)
+  op(0x8e, store_absolute, r.x)
+I op(0x8f, store_absolute, r.a & r.x)
+  op(0x90, branch, r.p.c, 0)
+  op(0x91, store_indirect_zero_page_y, r.a)
+I op(0x92, stp)
+I op(0x93, sha_indirect_zero_page_y)
+  op(0x94, store_zero_page_x, r.y)
+  op(0x95, store_zero_page_x, r.a)
+  op(0x96, store_zero_page_y, r.x)
+I op(0x97, store_zero_page_y, r.a & r.x)
+  op(0x98, transfer, r.y, r.a, 1)
+  op(0x99, store_absolute_y, r.a)
+  op(0x9a, transfer, r.x, r.s, 0)
+I op(0x9b, tas_absolute_y)
+I op(0x9c, shy_absolute_x)
+  op(0x9d, store_absolute_x, r.a)
+I op(0x9e, shx_absolute_y)
+I op(0x9f, sha_absolute_y)
+  op(0xa0, read_immediate, fp(ldy))
+  op(0xa1, read_indirect_zero_page_x, fp(lda))
+  op(0xa2, read_immediate, fp(ldx))
+I op(0xa3, read_indirect_zero_page_x, fp(lax))
+  op(0xa4, read_zero_page, fp(ldy))
+  op(0xa5, read_zero_page, fp(lda))
+  op(0xa6, read_zero_page, fp(ldx))
+I op(0xa7, read_zero_page, fp(lax))
+  op(0xa8, transfer, r.a, r.y, 1)
+  op(0xa9, read_immediate, fp(lda))
+  op(0xaa, transfer, r.a, r.x, 1)
+I op(0xab, lxa_immediate)
+  op(0xac, read_absolute, fp(ldy))
+  op(0xad, read_absolute, fp(lda))
+  op(0xae, read_absolute, fp(ldx))
+I op(0xaf, read_absolute, fp(lax))
+  op(0xb0, branch, r.p.c, 1)
+  op(0xb1, read_indirect_zero_page_y, fp(lda))
+I op(0xb2, stp)
+I op(0xb3, read_indirect_zero_page_y, fp(lax))
+  op(0xb4, read_zero_page_x, fp(ldy))
+  op(0xb5, read_zero_page_x, fp(lda))
+  op(0xb6, read_zero_page_y, fp(ldx))
+I op(0xb7, read_zero_page_y, fp(lax))
+  op(0xb8, clear_flag, r.p.v.bit)
+  op(0xb9, read_absolute_y, fp(lda))
+  op(0xba, transfer, r.s, r.x, 1)
+I op(0xbb, las_absolute_y)
+  op(0xbc, read_absolute_x, fp(ldy))
+  op(0xbd, read_absolute_x, fp(lda))
+  op(0xbe, read_absolute_y, fp(ldx))
+I op(0xbf, read_absolute_y, fp(lax))
+  op(0xc0, read_immediate, fp(cpy))
+  op(0xc1, read_indirect_zero_page_x, fp(cmp))
+I op(0xc2, nop_immediate)
+I op(0xc3, dcp_indirect_zero_page_x)
+  op(0xc4, read_zero_page, fp(cpy))
+  op(0xc5, read_zero_page, fp(cmp))
+  op(0xc6, rmw_zero_page, fp(dec))
+I op(0xc7, rmw_zero_page, fp(dcp))
+  op(0xc8, increment, r.y)
+  op(0xc9, read_immediate, fp(cmp))
+  op(0xca, decrement, r.x)
+I op(0xcb, axs_immediate)
+  op(0xcc, read_absolute, fp(cpy))
+  op(0xcd, read_absolute, fp(cmp))
+  op(0xce, rmw_absolute, fp(dec))
+I op(0xcf, rmw_absolute, fp(dcp))
+  op(0xd0, branch, r.p.z, 0)
+  op(0xd1, read_indirect_zero_page_y, fp(cmp))
+I op(0xd2, stp)
+I op(0xd3, dcp_indirect_zero_page_y)
+I op(0xd4, nop_zero_page_x)
+  op(0xd5, read_zero_page_x, fp(cmp))
+  op(0xd6, rmw_zero_page_x, fp(dec))
+I op(0xd7, rmw_zero_page_x, fp(dcp))
+  op(0xd8, clear_flag, r.p.d.bit)
+  op(0xd9, read_absolute_y, fp(cmp))
+I op(0xda, nop)
+I op(0xdb, dcp_absolute_y)
+I op(0xdc, nop_absolute_x)
+  op(0xdd, read_absolute_x, fp(cmp))
+  op(0xde, rmw_absolute_x, fp(dec))
+I op(0xdf, rmw_absolute_x, fp(dcp))
+  op(0xe0, read_immediate, fp(cpx))
+  op(0xe1, read_indirect_zero_page_x, fp(sbc))
+I op(0xe2, nop_immediate)
+I op(0xe3, rmwr_indirect_zero_page_x, fp(inc), fp(sbc))
+  op(0xe4, read_zero_page, fp(cpx))
+  op(0xe5, read_zero_page, fp(sbc))
+  op(0xe6, rmw_zero_page, fp(inc))
+I op(0xe7, rmwr_zero_page, fp(inc), fp(sbc))
+  op(0xe8, increment, r.x)
+  op(0xe9, read_immediate, fp(sbc))
+  op(0xea, nop)
+I op(0xeb, read_immediate, fp(sbc))
+  op(0xec, read_absolute, fp(cpx))
+  op(0xed, read_absolute, fp(sbc))
+  op(0xee, rmw_absolute, fp(inc))
+I op(0xef, rmwr_absolute, fp(inc), fp(sbc))
+  op(0xf0, branch, r.p.z, 1)
+  op(0xf1, read_indirect_zero_page_y, fp(sbc))
+I op(0xf2, stp)
+I op(0xf3, rmwr_indirect_zero_page_y, fp(inc), fp(sbc))
+I op(0xf4, nop_zero_page_x)
+  op(0xf5, read_zero_page_x, fp(sbc))
+  op(0xf6, rmw_zero_page_x, fp(inc))
+I op(0xf7, rmwr_zero_page_x, fp(inc), fp(sbc))
+  op(0xf8, set_flag, r.p.d.bit)
+  op(0xf9, read_absolute_y, fp(sbc))
+I op(0xfa, nop)
+I op(0xfb, rmwr_absolute_y, fp(inc), fp(sbc))
+I op(0xfc, nop_absolute_x)
+  op(0xfd, read_absolute_x, fp(sbc))
+  op(0xfe, rmw_absolute_x, fp(inc))
+I op(0xff, rmwr_absolute_x, fp(inc), fp(sbc))
+  }
+}
+
+#undef I
+#undef op
+#undef fp
diff --git a/higan/processor/r6502/algorithms.cpp b/higan/processor/r6502/algorithms.cpp
deleted file mode 100644
index 27c786e..0000000
--- a/higan/processor/r6502/algorithms.cpp
+++ /dev/null
@@ -1,148 +0,0 @@
-auto R6502::fp_adc() {
-  int result = regs.a + rd + regs.p.c;
-  regs.p.v = ~(regs.a ^ rd) & (regs.a ^ result) & 0x80;
-  regs.p.c = (result > 0xff);
-  regs.p.n = (result & 0x80);
-  regs.p.z = ((uint8)result == 0);
-  regs.a = result;
-}
-
-auto R6502::fp_and() {
-  regs.a &= rd;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_asl() {
-  regs.p.c = rd & 0x80;
-  rd <<= 1;
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_bit() {
-  regs.p.n = (rd & 0x80);
-  regs.p.v = (rd & 0x40);
-  regs.p.z = ((rd & regs.a) == 0);
-}
-
-auto R6502::fp_cmp() {
-  int r = regs.a - rd;
-  regs.p.n = (r & 0x80);
-  regs.p.z = (uint8)(r == 0);
-  regs.p.c = (r >= 0);
-}
-
-auto R6502::fp_cpx() {
-  int r = regs.x - rd;
-  regs.p.n = (r & 0x80);
-  regs.p.z = (uint8)(r == 0);
-  regs.p.c = (r >= 0);
-}
-
-auto R6502::fp_cpy() {
-  int r = regs.y - rd;
-  regs.p.n = (r & 0x80);
-  regs.p.z = (uint8)(r == 0);
-  regs.p.c = (r >= 0);
-}
-
-auto R6502::fp_dec() {
-  rd--;
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_eor() {
-  regs.a ^= rd;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_inc() {
-  rd++;
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_lda() {
-  regs.a = rd;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_ldx() {
-  regs.x = rd;
-  regs.p.n = (regs.x & 0x80);
-  regs.p.z = (regs.x == 0);
-}
-
-auto R6502::fp_ldy() {
-  regs.y = rd;
-  regs.p.n = (regs.y & 0x80);
-  regs.p.z = (regs.y == 0);
-}
-
-auto R6502::fp_lsr() {
-  regs.p.c = rd & 0x01;
-  rd >>= 1;
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_ora() {
-  regs.a |= rd;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_rla() {
-  uint carry = (uint)regs.p.c;
-  regs.p.c = regs.a & 0x80;
-  regs.a = (regs.a << 1) | carry;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_rol() {
-  uint carry = (uint)regs.p.c;
-  regs.p.c = rd & 0x80;
-  rd = (rd << 1) | carry;
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_ror() {
-  uint carry = (uint)regs.p.c << 7;
-  regs.p.c = rd & 0x01;
-  rd = carry | (rd >> 1);
-  regs.p.n = (rd & 0x80);
-  regs.p.z = (rd == 0);
-}
-
-auto R6502::fp_rra() {
-  uint carry = (uint)regs.p.c << 7;
-  regs.p.c = regs.a & 0x01;
-  regs.a = carry | (regs.a >> 1);
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_sbc() {
-  rd ^= 0xff;
-  return fp_adc();
-}
-
-auto R6502::fp_sla() {
-  regs.p.c = regs.a & 0x80;
-  regs.a <<= 1;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
-
-auto R6502::fp_sra() {
-  regs.p.c = regs.a & 0x01;
-  regs.a >>= 1;
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-}
diff --git a/higan/processor/r6502/disassembler.cpp b/higan/processor/r6502/disassembler.cpp
deleted file mode 100644
index c9ee6b0..0000000
--- a/higan/processor/r6502/disassembler.cpp
+++ /dev/null
@@ -1,193 +0,0 @@
-auto R6502::disassemble() -> string {
-  string output = {hex(regs.pc, 4L), "  "};
-
-  auto abs = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 2), 2L), hex(readDebugger(regs.pc + 1), 2L)}; };
-  auto abx = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 2), 2L), hex(readDebugger(regs.pc + 1), 2L), ",x"}; };
-  auto aby = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 2), 2L), hex(readDebugger(regs.pc + 1), 2L), ",y"}; };
-  auto iab = [&]() -> string { return {"($", hex(readDebugger(regs.pc + 2), 2L), hex(readDebugger(regs.pc + 1), 2L), ")"}; };
-  auto imm = [&]() -> string { return {"#$", hex(readDebugger(regs.pc + 1), 2L)}; };
-  auto imp = [&]() -> string { return {""}; };
-  auto izx = [&]() -> string { return {"($", hex(readDebugger(regs.pc + 1), 2L), ",x)"}; };
-  auto izy = [&]() -> string { return {"($", hex(readDebugger(regs.pc + 1), 2L), "),y"}; };
-  auto rel = [&]() -> string { return {"$", hex((regs.pc + 2) + (int8)readDebugger(regs.pc + 1), 4L)}; };
-  auto zpg = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 1), 2L)}; };
-  auto zpx = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 1), 2L), ",x"}; };
-  auto zpy = [&]() -> string { return {"$", hex(readDebugger(regs.pc + 1), 2L), ",y"}; };
-
-  #define op(byte, prefix, mode) \
-    case byte: output.append(#prefix, " ", mode()); \
-    break
-
-  switch(auto opcode = readDebugger(regs.pc)) {
-  op(0x00, brk, imm);
-  op(0x01, ora, izx);
-  op(0x05, ora, zpg);
-  op(0x06, asl, zpg);
-  op(0x08, php, imp);
-  op(0x09, ora, imm);
-  op(0x0a, asl, imp);
-  op(0x0d, ora, abs);
-  op(0x0e, asl, abs);
-  op(0x10, bpl, rel);
-  op(0x11, ora, izy);
-  op(0x15, ora, zpx);
-  op(0x16, asl, zpx);
-  op(0x18, clc, imp);
-  op(0x19, ora, aby);
-  op(0x1d, ora, abx);
-  op(0x1e, asl, abx);
-  op(0x20, jsr, abs);
-  op(0x21, and, izx);
-  op(0x24, bit, zpg);
-  op(0x25, and, zpg);
-  op(0x26, rol, zpg);
-  op(0x28, plp, imp);
-  op(0x29, and, imm);
-  op(0x2a, rol, imp);
-  op(0x2c, bit, abs);
-  op(0x2d, and, abs);
-  op(0x2e, rol, abs);
-  op(0x30, bmi, rel);
-  op(0x31, and, izy);
-  op(0x35, and, zpx);
-  op(0x36, rol, zpx);
-  op(0x38, sec, imp);
-  op(0x39, and, aby);
-  op(0x3d, and, abx);
-  op(0x3e, rol, abx);
-  op(0x40, rti, imp);
-  op(0x41, eor, izx);
-  op(0x45, eor, zpg);
-  op(0x46, lsr, zpg);
-  op(0x48, pha, imp);
-  op(0x49, eor, imm);
-  op(0x4a, lsr, imp);
-  op(0x4c, jmp, abs);
-  op(0x4d, eor, abs);
-  op(0x4e, lsr, abs);
-  op(0x50, bvc, rel);
-  op(0x51, eor, izy);
-  op(0x55, eor, zpx);
-  op(0x56, lsr, zpx);
-  op(0x58, cli, imp);
-  op(0x59, eor, aby);
-  op(0x5a, phy, imp);
-  op(0x5d, eor, abx);
-  op(0x5e, lsr, abx);
-  op(0x60, rts, imp);
-  op(0x61, adc, izx);
-  op(0x65, adc, zpg);
-  op(0x66, ror, zpg);
-  op(0x68, pla, imp);
-  op(0x69, adc, imm);
-  op(0x6a, ror, imp);
-  op(0x6c, jmp, iab);
-  op(0x6d, adc, abs);
-  op(0x6e, ror, abs);
-  op(0x70, bvs, rel);
-  op(0x71, adc, izy);
-  op(0x75, adc, zpx);
-  op(0x76, ror, zpx);
-  op(0x78, sei, imp);
-  op(0x79, adc, aby);
-  op(0x7a, ply, imp);
-  op(0x7d, adc, abx);
-  op(0x7e, ror, abx);
-  op(0x81, sta, izx);
-  op(0x84, sty, zpg);
-  op(0x85, sta, zpg);
-  op(0x86, stx, zpg);
-  op(0x88, dey, imp);
-  op(0x8a, txa, imp);
-  op(0x8c, sty, abs);
-  op(0x8d, sta, abs);
-  op(0x8e, stx, abs);
-  op(0x90, bcc, rel);
-  op(0x91, sta, izy);
-  op(0x94, sty, zpx);
-  op(0x95, sta, zpx);
-  op(0x96, stx, zpy);
-  op(0x98, tya, imp);
-  op(0x99, sta, aby);
-  op(0x9a, txs, imp);
-  op(0x9d, sta, abx);
-  op(0xa0, ldy, imm);
-  op(0xa1, lda, izx);
-  op(0xa2, ldx, imm);
-  op(0xa4, ldy, zpg);
-  op(0xa5, lda, zpg);
-  op(0xa6, ldx, zpg);
-  op(0xa8, tay, imp);
-  op(0xa9, lda, imm);
-  op(0xaa, tax, imp);
-  op(0xac, ldy, abs);
-  op(0xad, lda, abs);
-  op(0xae, ldx, abs);
-  op(0xb0, bcs, rel);
-  op(0xb1, lda, izy);
-  op(0xb4, ldy, zpx);
-  op(0xb5, lda, zpx);
-  op(0xb6, ldx, zpy);
-  op(0xb8, clv, imp);
-  op(0xb9, lda, aby);
-  op(0xba, tsx, imp);
-  op(0xbc, ldy, abx);
-  op(0xbd, lda, abx);
-  op(0xbe, ldx, aby);
-  op(0xc0, cpy, imm);
-  op(0xc1, cmp, izx);
-  op(0xc4, cpy, zpg);
-  op(0xc5, cmp, zpg);
-  op(0xc6, dec, zpg);
-  op(0xc8, iny, imp);
-  op(0xc9, cmp, imm);
-  op(0xca, dex, imp);
-  op(0xcc, cpy, abs);
-  op(0xcd, cmp, abs);
-  op(0xce, dec, abs);
-  op(0xd0, bne, rel);
-  op(0xd1, cmp, izy);
-  op(0xd5, cmp, zpx);
-  op(0xd6, dec, zpx);
-  op(0xd8, cld, imp);
-  op(0xd9, cmp, aby);
-  op(0xda, phx, imp);
-  op(0xdd, cmp, abx);
-  op(0xde, dec, abx);
-  op(0xe0, cpx, imm);
-  op(0xe1, sbc, izx);
-  op(0xe4, cpx, zpg);
-  op(0xe5, sbc, zpg);
-  op(0xe6, inc, zpg);
-  op(0xe8, inx, imp);
-  op(0xe9, sbc, imm);
-  op(0xea, nop, imp);
-  op(0xec, cpx, abs);
-  op(0xed, sbc, abs);
-  op(0xee, inc, abs);
-  op(0xf0, beq, rel);
-  op(0xf1, sbc, izy);
-  op(0xf5, sbc, zpx);
-  op(0xf6, inc, zpx);
-  op(0xf8, sed, imp);
-  op(0xf9, sbc, aby);
-  op(0xfa, plx, imp);
-  op(0xfd, sbc, abx);
-  op(0xfe, inc, abx);
-
-  default: output.append("$", hex(opcode, 2L)); break;
-  }
-
-  #undef op
-
-  output.append("                ");
-  output.resize(20);
-
-  output.append(
-    "A:", hex(regs.a, 2L), " X:", hex(regs.x, 2L), " Y:", hex(regs.y, 2L), " S:", hex(regs.s, 2L), " ",
-    regs.p.n ? "N" : "n", regs.p.v ? "V" : "v", regs.p.d ? "D" : "d",
-    regs.p.i ? "I" : "i", regs.p.z ? "Z" : "z", regs.p.c ? "C" : "c"
-  );
-
-  return output;
-}
diff --git a/higan/processor/r6502/instructions.cpp b/higan/processor/r6502/instructions.cpp
deleted file mode 100644
index 7c87352..0000000
--- a/higan/processor/r6502/instructions.cpp
+++ /dev/null
@@ -1,332 +0,0 @@
-auto R6502::op_branch(bool condition) {
-  if(!condition) {
-L   rd = readPC();
-  } else {
-    rd = readPC();
-    aa = regs.pc + (int8)rd;
-    ioPage(regs.pc, aa);
-L   io();
-    regs.pc = aa;
-  }
-}
-
-auto R6502::op_clear_flag(uint bit) {
-L io();
-  regs.p &= ~(1 << bit);
-}
-
-auto R6502::op_decrement(uint8& r) {
-L io();
-  r--;
-  regs.p.n = (r & 0x80);
-  regs.p.z = (r == 0);
-}
-
-auto R6502::op_increment(uint8& r) {
-L io();
-  r++;
-  regs.p.n = (r & 0x80);
-  regs.p.z = (r == 0);
-}
-
-auto R6502::op_pull(uint8& r) {
-  io();
-  io();
-L r = readSP();
-  regs.p.n = (r & 0x80);
-  regs.p.z = (r == 0);
-}
-
-auto R6502::op_push(uint8& r) {
-  io();
-L writeSP(r);
-}
-
-auto R6502::op_read_absolute(fp op) {
-  abs.l = readPC();
-  abs.h = readPC();
-L rd = read(abs.w);
-  call(op);
-}
-
-auto R6502::op_read_absolute_x(fp op) {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPage(abs.w, abs.w + regs.x);
-L rd = read(abs.w + regs.x);
-  call(op);
-}
-
-auto R6502::op_read_absolute_y(fp op) {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPage(abs.w, abs.w + regs.y);
-L rd = read(abs.w + regs.y);
-  call(op);
-}
-
-auto R6502::op_read_immediate(fp op) {
-L rd = readPC();
-  call(op);
-}
-
-auto R6502::op_read_indirect_zero_page_x(fp op) {
-  zp = readPC();
-  readZP(zp);
-  abs.l = readZP(zp++ + regs.x);
-  abs.h = readZP(zp++ + regs.x);
-L rd = read(abs.w);
-  call(op);
-}
-
-auto R6502::op_read_indirect_zero_page_y(fp op) {
-  rd = readPC();
-  abs.l = readZP(rd++);
-  abs.h = readZP(rd++);
-  ioPage(abs.w, abs.w + regs.y);
-L rd = read(abs.w + regs.y);
-  call(op);
-}
-
-auto R6502::op_read_zero_page(fp op) {
-  zp = readPC();
-L rd = readZP(zp);
-  call(op);
-}
-
-auto R6502::op_read_zero_page_x(fp op) {
-  zp = readPC();
-  readZP(zp);
-L rd = readZP(zp + regs.x);
-  call(op);
-}
-
-auto R6502::op_read_zero_page_y(fp op) {
-  zp = readPC();
-  readZP(zp);
-L rd = readZP(zp + regs.y);
-  call(op);
-}
-
-auto R6502::op_rmw_absolute(fp op) {
-  abs.l = readPC();
-  abs.h = readPC();
-  rd = read(abs.w);
-  write(abs.w, rd);
-  call(op);
-L write(abs.w, rd);
-}
-
-auto R6502::op_rmw_absolute_x(fp op) {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPageAlways(abs.w, abs.w + regs.x);
-  rd = read(abs.w + regs.x);
-  write(abs.w + regs.x, rd);
-  call(op);
-L write(abs.w + regs.x, rd);
-}
-
-auto R6502::op_rmw_zero_page(fp op) {
-  zp = readPC();
-  rd = readZP(zp);
-  writeZP(zp, rd);
-  call(op);
-L writeZP(zp, rd);
-}
-
-auto R6502::op_rmw_zero_page_x(fp op) {
-  zp = readPC();
-  readZP(zp);
-  rd = readZP(zp + regs.x);
-  writeZP(zp + regs.x, rd);
-  call(op);
-L writeZP(zp + regs.x, rd);
-}
-
-auto R6502::op_set_flag(uint bit) {
-L io();
-  regs.p |= 1 << bit;
-}
-
-auto R6502::op_shift(fp op) {
-L io();
-  call(op);
-}
-
-auto R6502::op_store_absolute(uint8& r) {
-  abs.l = readPC();
-  abs.h = readPC();
-L write(abs.w, r);
-}
-
-auto R6502::op_store_absolute_x(uint8& r) {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPageAlways(abs.w, abs.w + regs.x);
-L write(abs.w + regs.x, r);
-}
-
-auto R6502::op_store_absolute_y(uint8& r) {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPageAlways(abs.w, abs.w + regs.y);
-L write(abs.w + regs.y, r);
-}
-
-auto R6502::op_store_indirect_zero_page_x(uint8& r) {
-  zp = readPC();
-  readZP(zp);
-  abs.l = readZP(zp++ + regs.x);
-  abs.h = readZP(zp++ + regs.x);
-L write(abs.w, r);
-}
-
-auto R6502::op_store_indirect_zero_page_y(uint8& r) {
-  rd = readPC();
-  abs.l = readZP(rd++);
-  abs.h = readZP(rd++);
-  ioPageAlways(abs.w, abs.w + regs.y);
-L write(abs.w + regs.y, r);
-}
-
-auto R6502::op_store_zero_page(uint8& r) {
-  zp = readPC();
-L writeZP(zp, r);
-}
-
-auto R6502::op_store_zero_page_x(uint8& r) {
-  zp = readPC();
-  readZP(zp);
-L writeZP(zp + regs.x, r);
-}
-
-auto R6502::op_store_zero_page_y(uint8& r) {
-  zp = readPC();
-  readZP(zp);
-L writeZP(zp + regs.y, r);
-}
-
-auto R6502::op_transfer(uint8& s, uint8& d, bool flag) {
-L io();
-  d = s;
-  if(!flag) return;
-  regs.p.n = (d & 0x80);
-  regs.p.z = (d == 0);
-}
-
-//
-
-auto R6502::op_brk() {
-  readPC();
-  writeSP(regs.pc >> 8);
-  writeSP(regs.pc >> 0);
-  writeSP(regs.p | 0x30);
-  abs.l = read(0xfffe);
-  regs.p.i = 1;
-  regs.p.d = 0;
-L abs.h = read(0xffff);
-  regs.pc = abs.w;
-}
-
-auto R6502::op_jmp_absolute() {
-  abs.l = readPC();
-L abs.h = readPC();
-  regs.pc = abs.w;
-}
-
-auto R6502::op_jmp_indirect_absolute() {
-  abs.l = readPC();
-  abs.h = readPC();
-  iabs.l = read(abs.w); abs.l++;
-L iabs.h = read(abs.w); abs.l++;
-  regs.pc = iabs.w;
-}
-
-auto R6502::op_jsr_absolute() {
-  abs.l = readPC();
-  abs.h = readPC();
-  io();
-  regs.pc--;
-  writeSP(regs.pc >> 8);
-L writeSP(regs.pc >> 0);
-  regs.pc = abs.w;
-}
-
-auto R6502::op_nop() {
-L io();
-}
-
-auto R6502::op_php() {
-  io();
-L writeSP(regs.p | 0x30);
-}
-
-auto R6502::op_plp() {
-  io();
-  io();
-L regs.p = readSP();
-}
-
-auto R6502::op_rti() {
-  io();
-  io();
-  regs.p = readSP();
-  abs.l = readSP();
-L abs.h = readSP();
-  regs.pc = abs.w;
-}
-
-auto R6502::op_rts() {
-  io();
-  io();
-  abs.l = readSP();
-  abs.h = readSP();
-L io();
-  regs.pc = ++abs.w;
-}
-
-//illegal opcodes
-//===============
-
-auto R6502::op_arr_immediate() {
-L rd = readPC();
-  regs.a &= rd;
-  regs.a = (regs.p.c << 7) | (regs.a >> 1);
-  regs.p.n = (regs.a & 0x80);
-  regs.p.z = (regs.a == 0);
-  regs.p.c = (regs.a & 0x40);
-  regs.p.v = regs.p.c ^ ((regs.a >> 5) & 1);
-}
-
-auto R6502::op_nop_absolute() {
-  abs.l = readPC();
-  abs.h = readPC();
-L io();
-}
-
-auto R6502::op_nop_absolute_x() {
-  abs.l = readPC();
-  abs.h = readPC();
-  ioPage(abs.w, abs.w + regs.x);
-L io();
-}
-
-auto R6502::op_nop_immediate() {
-L io();
-}
-
-auto R6502::op_nop_implied() {
-L io();
-}
-
-auto R6502::op_nop_zero_page() {
-  zp = readPC();
-L readZP(zp);
-}
-
-auto R6502::op_nop_zero_page_x() {
-  zp = readPC();
-  readZP(zp);
-L readZP(zp + regs.x);
-}
diff --git a/higan/processor/r6502/memory.cpp b/higan/processor/r6502/memory.cpp
deleted file mode 100644
index 7814124..0000000
--- a/higan/processor/r6502/memory.cpp
+++ /dev/null
@@ -1,36 +0,0 @@
-auto R6502::io() -> uint8 {
-  return read(regs.pc);
-}
-
-auto R6502::readPC() -> uint8 {
-  return read(regs.pc++);
-}
-
-auto R6502::readSP() -> uint8 {
-  return read(0x0100 | ++regs.s);
-}
-
-auto R6502::readZP(uint8 addr) -> uint8 {
-  return read(addr);
-}
-
-//
-
-auto R6502::writeSP(uint8 data) -> void {
-  write(0x0100 | regs.s--, data);
-}
-
-auto R6502::writeZP(uint8 addr, uint8 data) -> void {
-  write(addr, data);
-}
-
-//
-
-auto R6502::ioPage(uint16 x, uint16 y) -> void {
-  if(x >> 8 == y >> 8) return;
-  read((x & 0xff00) | (y & 0x00ff));
-}
-
-auto R6502::ioPageAlways(uint16 x, uint16 y) -> void {
-  read((x & 0xff00) | (y & 0x00ff));
-}
diff --git a/higan/processor/r6502/r6502.cpp b/higan/processor/r6502/r6502.cpp
deleted file mode 100644
index 0616425..0000000
--- a/higan/processor/r6502/r6502.cpp
+++ /dev/null
@@ -1,52 +0,0 @@
-#include <processor/processor.hpp>
-#include "r6502.hpp"
-
-namespace Processor {
-
-#define L lastCycle();
-#define call(op) (this->*op)()
-
-#include "memory.cpp"
-#include "algorithms.cpp"
-#include "instructions.cpp"
-#include "switch.cpp"
-#include "disassembler.cpp"
-#include "serialization.cpp"
-
-auto R6502::mdr() const -> uint8 {
-  return regs.mdr;
-}
-
-auto R6502::power() -> void {
-  regs.a = 0x00;
-  regs.x = 0x00;
-  regs.y = 0x00;
-  regs.s = 0x00;
-  regs.p = 0x04;
-}
-
-auto R6502::reset() -> void {
-  regs.mdr = 0x00;
-  regs.s -= 3;
-  regs.p.i = 1;
-}
-
-auto R6502::interrupt() -> void {
-  io();
-  io();
-  writeSP(regs.pc >> 8);
-  writeSP(regs.pc >> 0);
-  writeSP(regs.p | 0x20);
-  uint16 vector = 0xfffe;  //IRQ
-  nmi(vector);
-  abs.l = read(vector++);
-  regs.p.i = 1;
-  regs.p.d = 0;
-L abs.h = read(vector++);
-  regs.pc = abs.w;
-}
-
-#undef L
-#undef call
-
-}
diff --git a/higan/processor/r6502/registers.hpp b/higan/processor/r6502/registers.hpp
deleted file mode 100644
index 9389faa..0000000
--- a/higan/processor/r6502/registers.hpp
+++ /dev/null
@@ -1,36 +0,0 @@
-struct Flags {
-  union {
-    uint8_t data = 0;
-    BooleanBitField<uint8_t, 7> n;
-    BooleanBitField<uint8_t, 6> v;
-    BooleanBitField<uint8_t, 3> d;
-    BooleanBitField<uint8_t, 2> i;
-    BooleanBitField<uint8_t, 1> z;
-    BooleanBitField<uint8_t, 0> c;
-  };
-
-  inline operator uint() { return data; }
-  inline auto& operator =(uint value) { return data  = value, *this; }
-  inline auto& operator&=(uint value) { return data &= value, *this; }
-  inline auto& operator|=(uint value) { return data |= value, *this; }
-  inline auto& operator^=(uint value) { return data ^= value, *this; }
-};
-
-struct Registers {
-  uint8  mdr;
-  uint16 pc;
-  uint8  a, x, y, s;
-  Flags  p;
-} regs;
-
-struct Register16 {
-  union {
-    uint16_t w;
-    NaturalBitField<uint16_t, 0,  7> l;
-    NaturalBitField<uint16_t, 8, 15> h;
-  };
-} abs, iabs;
-
-uint8 rd;
-uint8 zp;
-uint16 aa;
diff --git a/higan/processor/r6502/serialization.cpp b/higan/processor/r6502/serialization.cpp
deleted file mode 100644
index ab5452c..0000000
--- a/higan/processor/r6502/serialization.cpp
+++ /dev/null
@@ -1,15 +0,0 @@
-auto R6502::serialize(serializer& s) -> void {
-  s.integer(regs.mdr);
-  s.integer(regs.pc);
-  s.integer(regs.a);
-  s.integer(regs.x);
-  s.integer(regs.y);
-  s.integer(regs.s);
-  s.integer(regs.p.data);
-
-  s.integer(abs.w);
-  s.integer(iabs.w);
-  s.integer(rd);
-  s.integer(zp);
-  s.integer(aa);
-}
diff --git a/higan/processor/r6502/switch.cpp b/higan/processor/r6502/switch.cpp
deleted file mode 100644
index 1dd9e74..0000000
--- a/higan/processor/r6502/switch.cpp
+++ /dev/null
@@ -1,195 +0,0 @@
-#define I  //prefix highlights illegal instructions
-#define op(id, name, ...) case id: return op_##name(__VA_ARGS__);
-#define fp(name) &R6502::fp_##name
-
-auto R6502::instruction() -> void {
-  switch(readPC()) {
-  op(0x00, brk)
-  op(0x01, read_indirect_zero_page_x, fp(ora))
-I op(0x04, nop_zero_page)
-  op(0x05, read_zero_page, fp(ora))
-  op(0x06, rmw_zero_page, fp(asl))
-  op(0x08, php)
-  op(0x09, read_immediate, fp(ora))
-  op(0x0a, shift, fp(sla))
-I op(0x0c, nop_absolute)
-  op(0x0d, read_absolute, fp(ora))
-  op(0x0e, rmw_absolute, fp(asl))
-  op(0x10, branch, regs.p.n == 0)
-  op(0x11, read_indirect_zero_page_y, fp(ora))
-I op(0x14, nop_zero_page_x)
-  op(0x15, read_zero_page_x, fp(ora))
-  op(0x16, rmw_zero_page_x, fp(asl))
-  op(0x18, clear_flag, regs.p.c.bit)
-  op(0x19, read_absolute_y, fp(ora))
-I op(0x1a, nop_implied)
-I op(0x1c, nop_absolute_x)
-  op(0x1d, read_absolute_x, fp(ora))
-  op(0x1e, rmw_absolute_x, fp(asl))
-  op(0x20, jsr_absolute)
-  op(0x21, read_indirect_zero_page_x, fp(and))
-  op(0x24, read_zero_page, fp(bit))
-  op(0x25, read_zero_page, fp(and))
-  op(0x26, rmw_zero_page, fp(rol))
-  op(0x28, plp)
-  op(0x29, read_immediate, fp(and))
-  op(0x2a, shift, fp(rla))
-  op(0x2c, read_absolute, fp(bit))
-  op(0x2d, read_absolute, fp(and))
-  op(0x2e, rmw_absolute, fp(rol))
-  op(0x30, branch, regs.p.n == 1)
-  op(0x31, read_indirect_zero_page_y, fp(and))
-I op(0x34, nop_zero_page_x)
-  op(0x35, read_zero_page_x, fp(and))
-  op(0x36, rmw_zero_page_x, fp(rol))
-  op(0x38, set_flag, regs.p.c.bit)
-  op(0x39, read_absolute_y, fp(and))
-I op(0x3a, nop_implied)
-I op(0x3c, nop_absolute_x)
-  op(0x3d, read_absolute_x, fp(and))
-  op(0x3e, rmw_absolute_x, fp(rol))
-  op(0x40, rti)
-  op(0x41, read_indirect_zero_page_x, fp(eor))
-I op(0x44, nop_zero_page)
-  op(0x45, read_zero_page, fp(eor))
-  op(0x46, rmw_zero_page, fp(lsr))
-  op(0x48, push, regs.a)
-  op(0x49, read_immediate, fp(eor))
-  op(0x4a, shift, fp(sra))
-  op(0x4c, jmp_absolute)
-  op(0x4d, read_absolute, fp(eor))
-  op(0x4e, rmw_absolute, fp(lsr))
-  op(0x50, branch, regs.p.v == 0)
-  op(0x51, read_indirect_zero_page_y, fp(eor))
-I op(0x54, nop_zero_page_x)
-  op(0x55, read_zero_page_x, fp(eor))
-  op(0x56, rmw_zero_page_x, fp(lsr))
-  op(0x58, clear_flag, regs.p.i.bit)
-  op(0x59, read_absolute_y, fp(eor))
-I op(0x5a, nop_implied)
-I op(0x5c, nop_absolute_x)
-  op(0x5d, read_absolute_x, fp(eor))
-  op(0x5e, rmw_absolute_x, fp(lsr))
-  op(0x60, rts)
-  op(0x61, read_indirect_zero_page_x, fp(adc))
-I op(0x64, nop_zero_page)
-  op(0x65, read_zero_page, fp(adc))
-  op(0x66, rmw_zero_page, fp(ror))
-  op(0x68, pull, regs.a)
-  op(0x69, read_immediate, fp(adc))
-  op(0x6a, shift, fp(rra))
-I op(0x6b, arr_immediate)
-  op(0x6c, jmp_indirect_absolute)
-  op(0x6d, read_absolute, fp(adc))
-  op(0x6e, rmw_absolute, fp(ror))
-  op(0x70, branch, regs.p.v == 1)
-  op(0x71, read_indirect_zero_page_y, fp(adc))
-I op(0x74, nop_zero_page_x)
-  op(0x75, read_zero_page_x, fp(adc))
-  op(0x76, rmw_zero_page_x, fp(ror))
-  op(0x78, set_flag, regs.p.i.bit)
-  op(0x79, read_absolute_y, fp(adc))
-I op(0x7a, nop_implied)
-I op(0x7c, nop_absolute_x)
-  op(0x7d, read_absolute_x, fp(adc))
-  op(0x7e, rmw_absolute_x, fp(ror))
-I case 0x80: return op_nop_absolute();
-  case 0x81: return op_store_indirect_zero_page_x(regs.a);
-I case 0x82: return op_nop_immediate();
-  case 0x84: return op_store_zero_page(regs.y);
-  case 0x85: return op_store_zero_page(regs.a);
-  case 0x86: return op_store_zero_page(regs.x);
-  case 0x88: return op_decrement(regs.y);
-I case 0x89: return op_nop_immediate();
-  case 0x8a: return op_transfer(regs.x, regs.a, 1);
-  case 0x8c: return op_store_absolute(regs.y);
-  case 0x8d: return op_store_absolute(regs.a);
-  case 0x8e: return op_store_absolute(regs.x);
-  case 0x90: return op_branch(regs.p.c == 0);
-  case 0x91: return op_store_indirect_zero_page_y(regs.a);
-  case 0x94: return op_store_zero_page_x(regs.y);
-  case 0x95: return op_store_zero_page_x(regs.a);
-  case 0x96: return op_store_zero_page_y(regs.x);
-  case 0x98: return op_transfer(regs.y, regs.a, 1);
-  case 0x99: return op_store_absolute_y(regs.a);
-  case 0x9a: return op_transfer(regs.x, regs.s, 0);
-  case 0x9d: return op_store_absolute_x(regs.a);
-  case 0xa0: return op_read_immediate(fp(ldy));
-  case 0xa1: return op_read_indirect_zero_page_x(fp(lda));
-  case 0xa2: return op_read_immediate(fp(ldx));
-  case 0xa4: return op_read_zero_page(fp(ldy));
-  case 0xa5: return op_read_zero_page(fp(lda));
-  case 0xa6: return op_read_zero_page(fp(ldx));
-  case 0xa8: return op_transfer(regs.a, regs.y, 1);
-  case 0xa9: return op_read_immediate(fp(lda));
-  case 0xaa: return op_transfer(regs.a, regs.x, 1);
-  case 0xac: return op_read_absolute(fp(ldy));
-  case 0xad: return op_read_absolute(fp(lda));
-  case 0xae: return op_read_absolute(fp(ldx));
-  case 0xb0: return op_branch(regs.p.c == 1);
-  case 0xb1: return op_read_indirect_zero_page_y(fp(lda));
-  case 0xb4: return op_read_zero_page_x(fp(ldy));
-  case 0xb5: return op_read_zero_page_x(fp(lda));
-  case 0xb6: return op_read_zero_page_y(fp(ldx));
-  case 0xb8: return op_clear_flag(regs.p.v.bit);
-  case 0xb9: return op_read_absolute_y(fp(lda));
-  case 0xba: return op_transfer(regs.s, regs.x, 1);
-  case 0xbc: return op_read_absolute_x(fp(ldy));
-  case 0xbd: return op_read_absolute_x(fp(lda));
-  case 0xbe: return op_read_absolute_y(fp(ldx));
-  case 0xc0: return op_read_immediate(fp(cpy));
-  case 0xc1: return op_read_indirect_zero_page_x(fp(cmp));
-I case 0xc2: return op_nop_immediate();
-  case 0xc4: return op_read_zero_page(fp(cpy));
-  case 0xc5: return op_read_zero_page(fp(cmp));
-  case 0xc6: return op_rmw_zero_page(fp(dec));
-  case 0xc8: return op_increment(regs.y);
-  case 0xc9: return op_read_immediate(fp(cmp));
-  case 0xca: return op_decrement(regs.x);
-  case 0xcc: return op_read_absolute(fp(cpy));
-  case 0xcd: return op_read_absolute(fp(cmp));
-  case 0xce: return op_rmw_absolute(fp(dec));
-  case 0xd0: return op_branch(regs.p.z == 0);
-  case 0xd1: return op_read_indirect_zero_page_y(fp(cmp));
-I case 0xd4: return op_nop_zero_page_x();
-  case 0xd5: return op_read_zero_page_x(fp(cmp));
-  case 0xd6: return op_rmw_zero_page_x(fp(dec));
-  case 0xd8: return op_clear_flag(regs.p.d.bit);
-  case 0xd9: return op_read_absolute_y(fp(cmp));
-I case 0xda: return op_nop_implied();
-I case 0xdc: return op_nop_absolute_x();
-  case 0xdd: return op_read_absolute_x(fp(cmp));
-  case 0xde: return op_rmw_absolute_x(fp(dec));
-  case 0xe0: return op_read_immediate(fp(cpx));
-  case 0xe1: return op_read_indirect_zero_page_x(fp(sbc));
-I case 0xe2: return op_nop_immediate();
-  case 0xe4: return op_read_zero_page(fp(cpx));
-  case 0xe5: return op_read_zero_page(fp(sbc));
-  case 0xe6: return op_rmw_zero_page(fp(inc));
-  case 0xe8: return op_increment(regs.x);
-  case 0xe9: return op_read_immediate(fp(sbc));
-  case 0xea: return op_nop();
-I case 0xeb: return op_read_immediate(fp(sbc));
-  case 0xec: return op_read_absolute(fp(cpx));
-  case 0xed: return op_read_absolute(fp(sbc));
-  case 0xee: return op_rmw_absolute(fp(inc));
-  case 0xf0: return op_branch(regs.p.z == 1);
-  case 0xf1: return op_read_indirect_zero_page_y(fp(sbc));
-I case 0xf4: return op_nop_zero_page_x();
-  case 0xf5: return op_read_zero_page_x(fp(sbc));
-  case 0xf6: return op_rmw_zero_page_x(fp(inc));
-  case 0xf8: return op_set_flag(regs.p.d.bit);
-  case 0xf9: return op_read_absolute_y(fp(sbc));
-I case 0xfa: return op_nop_implied();
-I case 0xfc: return op_nop_absolute_x();
-  case 0xfd: return op_read_absolute_x(fp(sbc));
-  case 0xfe: return op_rmw_absolute_x(fp(inc));
-  }
-
-  //unimplemented opcode
-  return op_nop();
-}
-
-#undef I
-#undef op
-#undef fp
diff --git a/higan/processor/r65816/algorithms.cpp b/higan/processor/wdc65816/algorithms.cpp
similarity index 83%
rename from higan/processor/r65816/algorithms.cpp
rename to higan/processor/wdc65816/algorithms.cpp
index f6e691c..cce3ad3 100644
--- a/higan/processor/r65816/algorithms.cpp
+++ b/higan/processor/wdc65816/algorithms.cpp
@@ -1,4 +1,4 @@
-auto R65816::op_adc_b() {
+auto WDC65816::op_adc_b() {
   int result;
 
   if(!r.p.d) {
@@ -19,7 +19,7 @@ auto R65816::op_adc_b() {
   r.a.l = result;
 }
 
-auto R65816::op_adc_w() {
+auto WDC65816::op_adc_w() {
   int result;
 
   if(!r.p.d) {
@@ -46,133 +46,133 @@ auto R65816::op_adc_w() {
   r.a.w = result;
 }
 
-auto R65816::op_and_b() {
+auto WDC65816::op_and_b() {
   r.a.l &= rd.l;
   r.p.n = r.a.l & 0x80;
   r.p.z = r.a.l == 0;
 }
 
-auto R65816::op_and_w() {
+auto WDC65816::op_and_w() {
   r.a.w &= rd.w;
   r.p.n = r.a.w & 0x8000;
   r.p.z = r.a.w == 0;
 }
 
-auto R65816::op_bit_b() {
+auto WDC65816::op_bit_b() {
   r.p.n = rd.l & 0x80;
   r.p.v = rd.l & 0x40;
   r.p.z = (rd.l & r.a.l) == 0;
 }
 
-auto R65816::op_bit_w() {
+auto WDC65816::op_bit_w() {
   r.p.n = rd.w & 0x8000;
   r.p.v = rd.w & 0x4000;
   r.p.z = (rd.w & r.a.w) == 0;
 }
 
-auto R65816::op_cmp_b() {
+auto WDC65816::op_cmp_b() {
   int result = r.a.l - rd.l;
   r.p.n = result & 0x80;
   r.p.z = (uint8)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_cmp_w() {
+auto WDC65816::op_cmp_w() {
   int result = r.a.w - rd.w;
   r.p.n = result & 0x8000;
   r.p.z = (uint16)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_cpx_b() {
+auto WDC65816::op_cpx_b() {
   int result = r.x.l - rd.l;
   r.p.n = result & 0x80;
   r.p.z = (uint8)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_cpx_w() {
+auto WDC65816::op_cpx_w() {
   int result = r.x.w - rd.w;
   r.p.n = result & 0x8000;
   r.p.z = (uint16)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_cpy_b() {
+auto WDC65816::op_cpy_b() {
   int result = r.y.l - rd.l;
   r.p.n = result & 0x80;
   r.p.z = (uint8)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_cpy_w() {
+auto WDC65816::op_cpy_w() {
   int result = r.y.w - rd.w;
   r.p.n = result & 0x8000;
   r.p.z = (uint16)result == 0;
   r.p.c = result >= 0;
 }
 
-auto R65816::op_eor_b() {
+auto WDC65816::op_eor_b() {
   r.a.l ^= rd.l;
   r.p.n = r.a.l & 0x80;
   r.p.z = r.a.l == 0;
 }
 
-auto R65816::op_eor_w() {
+auto WDC65816::op_eor_w() {
   r.a.w ^= rd.w;
   r.p.n = r.a.w & 0x8000;
   r.p.z = r.a.w == 0;
 }
 
-auto R65816::op_lda_b() {
+auto WDC65816::op_lda_b() {
   r.a.l = rd.l;
   r.p.n = r.a.l & 0x80;
   r.p.z = r.a.l == 0;
 }
 
-auto R65816::op_lda_w() {
+auto WDC65816::op_lda_w() {
   r.a.w = rd.w;
   r.p.n = r.a.w & 0x8000;
   r.p.z = r.a.w == 0;
 }
 
-auto R65816::op_ldx_b() {
+auto WDC65816::op_ldx_b() {
   r.x.l = rd.l;
   r.p.n = r.x.l & 0x80;
   r.p.z = r.x.l == 0;
 }
 
-auto R65816::op_ldx_w() {
+auto WDC65816::op_ldx_w() {
   r.x.w = rd.w;
   r.p.n = r.x.w & 0x8000;
   r.p.z = r.x.w == 0;
 }
 
-auto R65816::op_ldy_b() {
+auto WDC65816::op_ldy_b() {
   r.y.l = rd.l;
   r.p.n = r.y.l & 0x80;
   r.p.z = r.y.l == 0;
 }
 
-auto R65816::op_ldy_w() {
+auto WDC65816::op_ldy_w() {
   r.y.w = rd.w;
   r.p.n = r.y.w & 0x8000;
   r.p.z = r.y.w == 0;
 }
 
-auto R65816::op_ora_b() {
+auto WDC65816::op_ora_b() {
   r.a.l |= rd.l;
   r.p.n = r.a.l & 0x80;
   r.p.z = r.a.l == 0;
 }
 
-auto R65816::op_ora_w() {
+auto WDC65816::op_ora_w() {
   r.a.w |= rd.w;
   r.p.n = r.a.w & 0x8000;
   r.p.z = r.a.w == 0;
 }
 
-auto R65816::op_sbc_b() {
+auto WDC65816::op_sbc_b() {
   int result;
   rd.l ^= 0xff;
 
@@ -194,7 +194,7 @@ auto R65816::op_sbc_b() {
   r.a.l = result;
 }
 
-auto R65816::op_sbc_w() {
+auto WDC65816::op_sbc_w() {
   int result;
   rd.w ^= 0xffff;
 
@@ -222,59 +222,59 @@ auto R65816::op_sbc_w() {
   r.a.w = result;
 }
 
-auto R65816::op_inc_b() {
+auto WDC65816::op_inc_b() {
   rd.l++;
   r.p.n = rd.l & 0x80;
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_inc_w() {
+auto WDC65816::op_inc_w() {
   rd.w++;
   r.p.n = rd.w & 0x8000;
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_dec_b() {
+auto WDC65816::op_dec_b() {
   rd.l--;
   r.p.n = rd.l & 0x80;
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_dec_w() {
+auto WDC65816::op_dec_w() {
   rd.w--;
   r.p.n = rd.w & 0x8000;
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_asl_b() {
+auto WDC65816::op_asl_b() {
   r.p.c = rd.l & 0x80;
   rd.l <<= 1;
   r.p.n = rd.l & 0x80;
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_asl_w() {
+auto WDC65816::op_asl_w() {
   r.p.c = rd.w & 0x8000;
   rd.w <<= 1;
   r.p.n = rd.w & 0x8000;
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_lsr_b() {
+auto WDC65816::op_lsr_b() {
   r.p.c = rd.l & 1;
   rd.l >>= 1;
   r.p.n = rd.l & 0x80;
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_lsr_w() {
+auto WDC65816::op_lsr_w() {
   r.p.c = rd.w & 1;
   rd.w >>= 1;
   r.p.n = rd.w & 0x8000;
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_rol_b() {
+auto WDC65816::op_rol_b() {
   auto carry = (uint)r.p.c;
   r.p.c = rd.l & 0x80;
   rd.l = (rd.l << 1) | carry;
@@ -282,7 +282,7 @@ auto R65816::op_rol_b() {
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_rol_w() {
+auto WDC65816::op_rol_w() {
   auto carry = (uint)r.p.c;
   r.p.c = rd.w & 0x8000;
   rd.w = (rd.w << 1) | carry;
@@ -290,7 +290,7 @@ auto R65816::op_rol_w() {
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_ror_b() {
+auto WDC65816::op_ror_b() {
   auto carry = (uint)r.p.c << 7;
   r.p.c = rd.l & 1;
   rd.l = carry | (rd.l >> 1);
@@ -298,7 +298,7 @@ auto R65816::op_ror_b() {
   r.p.z = rd.l == 0;
 }
 
-auto R65816::op_ror_w() {
+auto WDC65816::op_ror_w() {
   auto carry = (uint)r.p.c << 15;
   r.p.c = rd.w & 1;
   rd.w = carry | (rd.w >> 1);
@@ -306,22 +306,22 @@ auto R65816::op_ror_w() {
   r.p.z = rd.w == 0;
 }
 
-auto R65816::op_trb_b() {
+auto WDC65816::op_trb_b() {
   r.p.z = (rd.l & r.a.l) == 0;
   rd.l &= ~r.a.l;
 }
 
-auto R65816::op_trb_w() {
+auto WDC65816::op_trb_w() {
   r.p.z = (rd.w & r.a.w) == 0;
   rd.w &= ~r.a.w;
 }
 
-auto R65816::op_tsb_b() {
+auto WDC65816::op_tsb_b() {
   r.p.z = (rd.l & r.a.l) == 0;
   rd.l |= r.a.l;
 }
 
-auto R65816::op_tsb_w() {
+auto WDC65816::op_tsb_w() {
   r.p.z = (rd.w & r.a.w) == 0;
   rd.w |= r.a.w;
 }
diff --git a/higan/processor/r65816/disassembler.cpp b/higan/processor/wdc65816/disassembler.cpp
similarity index 72%
rename from higan/processor/r65816/disassembler.cpp
rename to higan/processor/wdc65816/disassembler.cpp
index c7c0c8a..028e499 100644
--- a/higan/processor/r65816/disassembler.cpp
+++ b/higan/processor/wdc65816/disassembler.cpp
@@ -2,7 +2,7 @@ static auto hex(uintmax value, long precision = 0, char padchar = '0') -> string
   return nall::hex(value, precision, padchar);
 }
 
-auto R65816::dreadb(uint24 addr) -> uint8 {
+auto WDC65816::dreadb(uint24 addr) -> uint8 {
   if((addr & 0x40ffff) >= 0x2000 && (addr & 0x40ffff) <= 0x5fff) {
     //$00-3f|80-bf:2000-5fff
     //do not read MMIO registers within debugger
@@ -11,14 +11,14 @@ auto R65816::dreadb(uint24 addr) -> uint8 {
   return readDisassembler(addr);
 }
 
-auto R65816::dreadw(uint24 addr) -> uint16 {
+auto WDC65816::dreadw(uint24 addr) -> uint16 {
   uint16 data;
   data.byte(0) = dreadb(addr++);
   data.byte(1) = dreadb(addr++);
   return data;
 }
 
-auto R65816::dreadl(uint24 addr) -> uint24 {
+auto WDC65816::dreadl(uint24 addr) -> uint24 {
   uint24 data;
   data.byte(0) = dreadb(addr++);
   data.byte(1) = dreadb(addr++);
@@ -26,91 +26,91 @@ auto R65816::dreadl(uint24 addr) -> uint24 {
   return data;
 }
 
-auto R65816::decode(uint8 mode, uint24 addr) -> uint24 {
+auto WDC65816::decode(uint8 mode, uint24 addr, uint24 arg) -> uint24 {
   uint24 a = 0;
 
   switch(mode) {
   case OPTYPE_DP:
-    a = (r.d + (addr & 0xffff)) & 0xffff;
+    a = (r.d + (arg & 0xffff)) & 0xffff;
     break;
   case OPTYPE_DPX:
-    a = (r.d + r.x + (addr & 0xffff)) & 0xffff;
+    a = (r.d + r.x + (arg & 0xffff)) & 0xffff;
     break;
   case OPTYPE_DPY:
-    a = (r.d + r.y + (addr & 0xffff)) & 0xffff;
+    a = (r.d + r.y + (arg & 0xffff)) & 0xffff;
     break;
   case OPTYPE_IDP:
-    addr = (r.d + (addr & 0xffff)) & 0xffff;
-    a = (r.db << 16) + dreadw(addr);
+    arg = (r.d + (arg & 0xffff)) & 0xffff;
+    a = (r.db << 16) + dreadw(arg);
     break;
   case OPTYPE_IDPX:
-    addr = (r.d + r.x + (addr & 0xffff)) & 0xffff;
-    a = (r.db << 16) + dreadw(addr);
+    arg = (r.d + r.x + (arg & 0xffff)) & 0xffff;
+    a = (r.db << 16) + dreadw(arg);
     break;
   case OPTYPE_IDPY:
-    addr = (r.d + (addr & 0xffff)) & 0xffff;
-    a = (r.db << 16) + dreadw(addr) + r.y;
+    arg = (r.d + (arg & 0xffff)) & 0xffff;
+    a = (r.db << 16) + dreadw(arg) + r.y;
     break;
   case OPTYPE_ILDP:
-    addr = (r.d + (addr & 0xffff)) & 0xffff;
-    a = dreadl(addr);
+    arg = (r.d + (arg & 0xffff)) & 0xffff;
+    a = dreadl(arg);
     break;
   case OPTYPE_ILDPY:
-    addr = (r.d + (addr & 0xffff)) & 0xffff;
-    a = dreadl(addr) + r.y;
+    arg = (r.d + (arg & 0xffff)) & 0xffff;
+    a = dreadl(arg) + r.y;
     break;
   case OPTYPE_ADDR:
-    a = (r.db << 16) + (addr & 0xffff);
+    a = (r.db << 16) + (arg & 0xffff);
     break;
   case OPTYPE_ADDR_PC:
-    a = (r.pc.b << 16) + (addr & 0xffff);
+    a = addr.bits(23,16) + (arg & 0xffff);
     break;
   case OPTYPE_ADDRX:
-    a = (r.db << 16) + (addr & 0xffff) + r.x;
+    a = (r.db << 16) + (arg & 0xffff) + r.x;
     break;
   case OPTYPE_ADDRY:
-    a = (r.db << 16) + (addr & 0xffff) + r.y;
+    a = (r.db << 16) + (arg & 0xffff) + r.y;
     break;
   case OPTYPE_IADDR_PC:
-    a = (r.pc.b << 16) + (addr & 0xffff);
+    a = addr.bits(23,16) + (arg & 0xffff);
     break;
   case OPTYPE_IADDRX:
-    a = (r.pc.b << 16) + ((addr + r.x) & 0xffff);
+    a = addr.bits(23,16) + ((arg + r.x) & 0xffff);
     break;
   case OPTYPE_ILADDR:
-    a = addr;
+    a = arg;
     break;
   case OPTYPE_LONG:
-    a = addr;
+    a = arg;
     break;
   case OPTYPE_LONGX:
-    a = (addr + r.x);
+    a = (arg + r.x);
     break;
   case OPTYPE_SR:
-    a = (r.s + (addr & 0xff)) & 0xffff;
+    a = (r.s + (arg & 0xff)) & 0xffff;
     break;
   case OPTYPE_ISRY:
-    addr = (r.s + (addr & 0xff)) & 0xffff;
-    a = (r.db << 16) + dreadw(addr) + r.y;
+    arg = (r.s + (arg & 0xff)) & 0xffff;
+    a = (r.db << 16) + dreadw(arg) + r.y;
     break;
   case OPTYPE_RELB:
-    a  = (r.pc.b << 16) + ((r.pc.w + 2) & 0xffff);
-    a += int8(addr);
+    a  = addr.bits(23,16) + ((addr + 2) & 0xffff);
+    a += int8(arg);
     break;
   case OPTYPE_RELW:
-    a  = (r.pc.b << 16) + ((r.pc.w + 3) & 0xffff);
-    a += (int16)addr;
+    a  = addr.bits(23,16) + ((addr + 3) & 0xffff);
+    a += (int16)arg;
     break;
   }
 
   return a;
 }
 
-auto R65816::disassemble() -> string {
+auto WDC65816::disassemble() -> string {
   return disassemble(r.pc.d, r.e, r.p.m, r.p.x);
 }
 
-auto R65816::disassemble(uint24 addr, bool e, bool m, bool x) -> string {
+auto WDC65816::disassemble(uint24 addr, bool e, bool m, bool x) -> string {
   string s;
 
   Reg24 pc;
@@ -131,273 +131,273 @@ auto R65816::disassemble(uint24 addr, bool e, bool m, bool x) -> string {
   char t[256];
   switch(op) {
   case 0x00: sprintf(t, "brk #$%.2x              ", op8); break;
-  case 0x01: sprintf(t, "ora ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
+  case 0x01: sprintf(t, "ora ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
   case 0x02: sprintf(t, "cop #$%.2x              ", op8); break;
-  case 0x03: sprintf(t, "ora $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0x04: sprintf(t, "tsb $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x05: sprintf(t, "ora $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x06: sprintf(t, "asl $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x07: sprintf(t, "ora [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0x03: sprintf(t, "ora $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0x04: sprintf(t, "tsb $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x05: sprintf(t, "ora $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x06: sprintf(t, "asl $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x07: sprintf(t, "ora [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0x08: sprintf(t, "php                   "); break;
   case 0x09: if(a8)sprintf(t, "ora #$%.2x              ", op8);
              else  sprintf(t, "ora #$%.4x            ", op16); break;
   case 0x0a: sprintf(t, "asl a                 "); break;
   case 0x0b: sprintf(t, "phd                   "); break;
-  case 0x0c: sprintf(t, "tsb $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x0d: sprintf(t, "ora $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x0e: sprintf(t, "asl $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x0f: sprintf(t, "ora $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x10: sprintf(t, "bpl $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x11: sprintf(t, "ora ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0x12: sprintf(t, "ora ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0x13: sprintf(t, "ora ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0x14: sprintf(t, "trb $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x15: sprintf(t, "ora $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x16: sprintf(t, "asl $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x17: sprintf(t, "ora [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0x0c: sprintf(t, "tsb $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x0d: sprintf(t, "ora $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x0e: sprintf(t, "asl $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x0f: sprintf(t, "ora $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x10: sprintf(t, "bpl $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x11: sprintf(t, "ora ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0x12: sprintf(t, "ora ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0x13: sprintf(t, "ora ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0x14: sprintf(t, "trb $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x15: sprintf(t, "ora $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x16: sprintf(t, "asl $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x17: sprintf(t, "ora [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0x18: sprintf(t, "clc                   "); break;
-  case 0x19: sprintf(t, "ora $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0x19: sprintf(t, "ora $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0x1a: sprintf(t, "inc                   "); break;
   case 0x1b: sprintf(t, "tcs                   "); break;
-  case 0x1c: sprintf(t, "trb $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x1d: sprintf(t, "ora $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x1e: sprintf(t, "asl $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x1f: sprintf(t, "ora $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
-  case 0x20: sprintf(t, "jsr $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR_PC, op16)); break;
-  case 0x21: sprintf(t, "and ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
-  case 0x22: sprintf(t, "jsl $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x23: sprintf(t, "and $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0x24: sprintf(t, "bit $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x25: sprintf(t, "and $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x26: sprintf(t, "rol $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x27: sprintf(t, "and [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0x1c: sprintf(t, "trb $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x1d: sprintf(t, "ora $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x1e: sprintf(t, "asl $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x1f: sprintf(t, "ora $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
+  case 0x20: sprintf(t, "jsr $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR_PC, addr, op16)); break;
+  case 0x21: sprintf(t, "and ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
+  case 0x22: sprintf(t, "jsl $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x23: sprintf(t, "and $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0x24: sprintf(t, "bit $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x25: sprintf(t, "and $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x26: sprintf(t, "rol $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x27: sprintf(t, "and [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0x28: sprintf(t, "plp                   "); break;
   case 0x29: if(a8)sprintf(t, "and #$%.2x              ", op8);
              else  sprintf(t, "and #$%.4x            ", op16); break;
   case 0x2a: sprintf(t, "rol a                 "); break;
   case 0x2b: sprintf(t, "pld                   "); break;
-  case 0x2c: sprintf(t, "bit $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x2d: sprintf(t, "and $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x2e: sprintf(t, "rol $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x2f: sprintf(t, "and $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x30: sprintf(t, "bmi $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x31: sprintf(t, "and ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0x32: sprintf(t, "and ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0x33: sprintf(t, "and ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0x34: sprintf(t, "bit $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x35: sprintf(t, "and $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x36: sprintf(t, "rol $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x37: sprintf(t, "and [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0x2c: sprintf(t, "bit $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x2d: sprintf(t, "and $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x2e: sprintf(t, "rol $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x2f: sprintf(t, "and $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x30: sprintf(t, "bmi $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x31: sprintf(t, "and ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0x32: sprintf(t, "and ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0x33: sprintf(t, "and ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0x34: sprintf(t, "bit $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x35: sprintf(t, "and $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x36: sprintf(t, "rol $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x37: sprintf(t, "and [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0x38: sprintf(t, "sec                   "); break;
-  case 0x39: sprintf(t, "and $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0x39: sprintf(t, "and $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0x3a: sprintf(t, "dec                   "); break;
   case 0x3b: sprintf(t, "tsc                   "); break;
-  case 0x3c: sprintf(t, "bit $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x3d: sprintf(t, "and $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x3e: sprintf(t, "rol $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x3f: sprintf(t, "and $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0x3c: sprintf(t, "bit $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x3d: sprintf(t, "and $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x3e: sprintf(t, "rol $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x3f: sprintf(t, "and $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   case 0x40: sprintf(t, "rti                   "); break;
-  case 0x41: sprintf(t, "eor ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
+  case 0x41: sprintf(t, "eor ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
   case 0x42: sprintf(t, "wdm                   "); break;
-  case 0x43: sprintf(t, "eor $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
+  case 0x43: sprintf(t, "eor $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
   case 0x44: sprintf(t, "mvp $%.2x,$%.2x           ", op1, op8); break;
-  case 0x45: sprintf(t, "eor $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x46: sprintf(t, "lsr $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x47: sprintf(t, "eor [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0x45: sprintf(t, "eor $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x46: sprintf(t, "lsr $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x47: sprintf(t, "eor [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0x48: sprintf(t, "pha                   "); break;
   case 0x49: if(a8)sprintf(t, "eor #$%.2x              ", op8);
              else  sprintf(t, "eor #$%.4x            ", op16); break;
   case 0x4a: sprintf(t, "lsr a                 "); break;
   case 0x4b: sprintf(t, "phk                   "); break;
-  case 0x4c: sprintf(t, "jmp $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR_PC, op16)); break;
-  case 0x4d: sprintf(t, "eor $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x4e: sprintf(t, "lsr $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x4f: sprintf(t, "eor $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x50: sprintf(t, "bvc $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x51: sprintf(t, "eor ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0x52: sprintf(t, "eor ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0x53: sprintf(t, "eor ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
+  case 0x4c: sprintf(t, "jmp $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR_PC, addr, op16)); break;
+  case 0x4d: sprintf(t, "eor $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x4e: sprintf(t, "lsr $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x4f: sprintf(t, "eor $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x50: sprintf(t, "bvc $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x51: sprintf(t, "eor ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0x52: sprintf(t, "eor ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0x53: sprintf(t, "eor ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
   case 0x54: sprintf(t, "mvn $%.2x,$%.2x           ", op1, op8); break;
-  case 0x55: sprintf(t, "eor $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x56: sprintf(t, "lsr $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x57: sprintf(t, "eor [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0x55: sprintf(t, "eor $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x56: sprintf(t, "lsr $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x57: sprintf(t, "eor [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0x58: sprintf(t, "cli                   "); break;
-  case 0x59: sprintf(t, "eor $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0x59: sprintf(t, "eor $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0x5a: sprintf(t, "phy                   "); break;
   case 0x5b: sprintf(t, "tcd                   "); break;
-  case 0x5c: sprintf(t, "jml $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x5d: sprintf(t, "eor $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x5e: sprintf(t, "lsr $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x5f: sprintf(t, "eor $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0x5c: sprintf(t, "jml $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x5d: sprintf(t, "eor $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x5e: sprintf(t, "lsr $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x5f: sprintf(t, "eor $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   case 0x60: sprintf(t, "rts                   "); break;
-  case 0x61: sprintf(t, "adc ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
-  case 0x62: sprintf(t, "per $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x63: sprintf(t, "adc $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0x64: sprintf(t, "stz $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x65: sprintf(t, "adc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x66: sprintf(t, "ror $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x67: sprintf(t, "adc [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0x61: sprintf(t, "adc ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
+  case 0x62: sprintf(t, "per $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x63: sprintf(t, "adc $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0x64: sprintf(t, "stz $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x65: sprintf(t, "adc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x66: sprintf(t, "ror $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x67: sprintf(t, "adc [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0x68: sprintf(t, "pla                   "); break;
   case 0x69: if(a8)sprintf(t, "adc #$%.2x              ", op8);
              else  sprintf(t, "adc #$%.4x            ", op16); break;
   case 0x6a: sprintf(t, "ror a                 "); break;
   case 0x6b: sprintf(t, "rtl                   "); break;
-  case 0x6c: sprintf(t, "jmp ($%.4x)   [%.6x]", op16, decode(OPTYPE_IADDR_PC, op16)); break;
-  case 0x6d: sprintf(t, "adc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x6e: sprintf(t, "ror $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x6f: sprintf(t, "adc $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x70: sprintf(t, "bvs $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x71: sprintf(t, "adc ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0x72: sprintf(t, "adc ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0x73: sprintf(t, "adc ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0x74: sprintf(t, "stz $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x75: sprintf(t, "adc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x76: sprintf(t, "ror $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x77: sprintf(t, "adc [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0x6c: sprintf(t, "jmp ($%.4x)   [%.6x]", op16, decode(OPTYPE_IADDR_PC, addr, op16)); break;
+  case 0x6d: sprintf(t, "adc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x6e: sprintf(t, "ror $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x6f: sprintf(t, "adc $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x70: sprintf(t, "bvs $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x71: sprintf(t, "adc ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0x72: sprintf(t, "adc ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0x73: sprintf(t, "adc ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0x74: sprintf(t, "stz $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x75: sprintf(t, "adc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x76: sprintf(t, "ror $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x77: sprintf(t, "adc [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0x78: sprintf(t, "sei                   "); break;
-  case 0x79: sprintf(t, "adc $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0x79: sprintf(t, "adc $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0x7a: sprintf(t, "ply                   "); break;
   case 0x7b: sprintf(t, "tdc                   "); break;
-  case 0x7c: sprintf(t, "jmp ($%.4x,x) [%.6x]", op16, decode(OPTYPE_IADDRX, op16)); break;
-  case 0x7d: sprintf(t, "adc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x7e: sprintf(t, "ror $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x7f: sprintf(t, "adc $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
-  case 0x80: sprintf(t, "bra $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x81: sprintf(t, "sta ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
-  case 0x82: sprintf(t, "brl $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELW, op16)), decode(OPTYPE_RELW, op16)); break;
-  case 0x83: sprintf(t, "sta $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0x84: sprintf(t, "sty $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x85: sprintf(t, "sta $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x86: sprintf(t, "stx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0x87: sprintf(t, "sta [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0x7c: sprintf(t, "jmp ($%.4x,x) [%.6x]", op16, decode(OPTYPE_IADDRX, addr, op16)); break;
+  case 0x7d: sprintf(t, "adc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x7e: sprintf(t, "ror $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x7f: sprintf(t, "adc $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
+  case 0x80: sprintf(t, "bra $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x81: sprintf(t, "sta ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
+  case 0x82: sprintf(t, "brl $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELW, addr, op16)), decode(OPTYPE_RELW, addr, op16)); break;
+  case 0x83: sprintf(t, "sta $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0x84: sprintf(t, "sty $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x85: sprintf(t, "sta $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x86: sprintf(t, "stx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0x87: sprintf(t, "sta [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0x88: sprintf(t, "dey                   "); break;
   case 0x89: if(a8)sprintf(t, "bit #$%.2x              ", op8);
              else  sprintf(t, "bit #$%.4x            ", op16); break;
   case 0x8a: sprintf(t, "txa                   "); break;
   case 0x8b: sprintf(t, "phb                   "); break;
-  case 0x8c: sprintf(t, "sty $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x8d: sprintf(t, "sta $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x8e: sprintf(t, "stx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x8f: sprintf(t, "sta $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0x90: sprintf(t, "bcc $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0x91: sprintf(t, "sta ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0x92: sprintf(t, "sta ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0x93: sprintf(t, "sta ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0x94: sprintf(t, "sty $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x95: sprintf(t, "sta $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0x96: sprintf(t, "stx $%.2x,y     [%.6x]", op8, decode(OPTYPE_DPY, op8)); break;
-  case 0x97: sprintf(t, "sta [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0x8c: sprintf(t, "sty $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x8d: sprintf(t, "sta $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x8e: sprintf(t, "stx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x8f: sprintf(t, "sta $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0x90: sprintf(t, "bcc $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0x91: sprintf(t, "sta ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0x92: sprintf(t, "sta ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0x93: sprintf(t, "sta ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0x94: sprintf(t, "sty $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x95: sprintf(t, "sta $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0x96: sprintf(t, "stx $%.2x,y     [%.6x]", op8, decode(OPTYPE_DPY, addr, op8)); break;
+  case 0x97: sprintf(t, "sta [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0x98: sprintf(t, "tya                   "); break;
-  case 0x99: sprintf(t, "sta $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0x99: sprintf(t, "sta $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0x9a: sprintf(t, "txs                   "); break;
   case 0x9b: sprintf(t, "txy                   "); break;
-  case 0x9c: sprintf(t, "stz $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0x9d: sprintf(t, "sta $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x9e: sprintf(t, "stz $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0x9f: sprintf(t, "sta $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0x9c: sprintf(t, "stz $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0x9d: sprintf(t, "sta $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x9e: sprintf(t, "stz $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0x9f: sprintf(t, "sta $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   case 0xa0: if(x8)sprintf(t, "ldy #$%.2x              ", op8);
              else  sprintf(t, "ldy #$%.4x            ", op16); break;
-  case 0xa1: sprintf(t, "lda ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
+  case 0xa1: sprintf(t, "lda ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
   case 0xa2: if(x8)sprintf(t, "ldx #$%.2x              ", op8);
              else  sprintf(t, "ldx #$%.4x            ", op16); break;
-  case 0xa3: sprintf(t, "lda $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0xa4: sprintf(t, "ldy $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xa5: sprintf(t, "lda $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xa6: sprintf(t, "ldx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xa7: sprintf(t, "lda [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0xa3: sprintf(t, "lda $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0xa4: sprintf(t, "ldy $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xa5: sprintf(t, "lda $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xa6: sprintf(t, "ldx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xa7: sprintf(t, "lda [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0xa8: sprintf(t, "tay                   "); break;
   case 0xa9: if(a8)sprintf(t, "lda #$%.2x              ", op8);
              else  sprintf(t, "lda #$%.4x            ", op16); break;
   case 0xaa: sprintf(t, "tax                   "); break;
   case 0xab: sprintf(t, "plb                   "); break;
-  case 0xac: sprintf(t, "ldy $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xad: sprintf(t, "lda $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xae: sprintf(t, "ldx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xaf: sprintf(t, "lda $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0xb0: sprintf(t, "bcs $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0xb1: sprintf(t, "lda ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0xb2: sprintf(t, "lda ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0xb3: sprintf(t, "lda ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0xb4: sprintf(t, "ldy $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xb5: sprintf(t, "lda $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xb6: sprintf(t, "ldx $%.2x,y     [%.6x]", op8, decode(OPTYPE_DPY, op8)); break;
-  case 0xb7: sprintf(t, "lda [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0xac: sprintf(t, "ldy $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xad: sprintf(t, "lda $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xae: sprintf(t, "ldx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xaf: sprintf(t, "lda $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0xb0: sprintf(t, "bcs $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0xb1: sprintf(t, "lda ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0xb2: sprintf(t, "lda ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0xb3: sprintf(t, "lda ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0xb4: sprintf(t, "ldy $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xb5: sprintf(t, "lda $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xb6: sprintf(t, "ldx $%.2x,y     [%.6x]", op8, decode(OPTYPE_DPY, addr, op8)); break;
+  case 0xb7: sprintf(t, "lda [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0xb8: sprintf(t, "clv                   "); break;
-  case 0xb9: sprintf(t, "lda $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0xb9: sprintf(t, "lda $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0xba: sprintf(t, "tsx                   "); break;
   case 0xbb: sprintf(t, "tyx                   "); break;
-  case 0xbc: sprintf(t, "ldy $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xbd: sprintf(t, "lda $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xbe: sprintf(t, "ldx $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
-  case 0xbf: sprintf(t, "lda $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0xbc: sprintf(t, "ldy $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xbd: sprintf(t, "lda $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xbe: sprintf(t, "ldx $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
+  case 0xbf: sprintf(t, "lda $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   case 0xc0: if(x8)sprintf(t, "cpy #$%.2x              ", op8);
              else  sprintf(t, "cpy #$%.4x            ", op16); break;
-  case 0xc1: sprintf(t, "cmp ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
+  case 0xc1: sprintf(t, "cmp ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
   case 0xc2: sprintf(t, "rep #$%.2x              ", op8); break;
-  case 0xc3: sprintf(t, "cmp $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0xc4: sprintf(t, "cpy $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xc5: sprintf(t, "cmp $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xc6: sprintf(t, "dec $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xc7: sprintf(t, "cmp [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0xc3: sprintf(t, "cmp $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0xc4: sprintf(t, "cpy $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xc5: sprintf(t, "cmp $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xc6: sprintf(t, "dec $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xc7: sprintf(t, "cmp [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0xc8: sprintf(t, "iny                   "); break;
   case 0xc9: if(a8)sprintf(t, "cmp #$%.2x              ", op8);
              else  sprintf(t, "cmp #$%.4x            ", op16); break;
   case 0xca: sprintf(t, "dex                   "); break;
   case 0xcb: sprintf(t, "wai                   "); break;
-  case 0xcc: sprintf(t, "cpy $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xcd: sprintf(t, "cmp $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xce: sprintf(t, "dec $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xcf: sprintf(t, "cmp $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0xd0: sprintf(t, "bne $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0xd1: sprintf(t, "cmp ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0xd2: sprintf(t, "cmp ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0xd3: sprintf(t, "cmp ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0xd4: sprintf(t, "pei ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0xd5: sprintf(t, "cmp $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xd6: sprintf(t, "dec $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xd7: sprintf(t, "cmp [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0xcc: sprintf(t, "cpy $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xcd: sprintf(t, "cmp $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xce: sprintf(t, "dec $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xcf: sprintf(t, "cmp $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0xd0: sprintf(t, "bne $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0xd1: sprintf(t, "cmp ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0xd2: sprintf(t, "cmp ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0xd3: sprintf(t, "cmp ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0xd4: sprintf(t, "pei ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0xd5: sprintf(t, "cmp $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xd6: sprintf(t, "dec $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xd7: sprintf(t, "cmp [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0xd8: sprintf(t, "cld                   "); break;
-  case 0xd9: sprintf(t, "cmp $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0xd9: sprintf(t, "cmp $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0xda: sprintf(t, "phx                   "); break;
   case 0xdb: sprintf(t, "stp                   "); break;
-  case 0xdc: sprintf(t, "jmp [$%.4x]   [%.6x]", op16, decode(OPTYPE_ILADDR, op16)); break;
-  case 0xdd: sprintf(t, "cmp $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xde: sprintf(t, "dec $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xdf: sprintf(t, "cmp $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0xdc: sprintf(t, "jmp [$%.4x]   [%.6x]", op16, decode(OPTYPE_ILADDR, addr, op16)); break;
+  case 0xdd: sprintf(t, "cmp $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xde: sprintf(t, "dec $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xdf: sprintf(t, "cmp $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   case 0xe0: if(x8)sprintf(t, "cpx #$%.2x              ", op8);
              else  sprintf(t, "cpx #$%.4x            ", op16); break;
-  case 0xe1: sprintf(t, "sbc ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, op8)); break;
+  case 0xe1: sprintf(t, "sbc ($%.2x,x)   [%.6x]", op8, decode(OPTYPE_IDPX, addr, op8)); break;
   case 0xe2: sprintf(t, "sep #$%.2x              ", op8); break;
-  case 0xe3: sprintf(t, "sbc $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, op8)); break;
-  case 0xe4: sprintf(t, "cpx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xe5: sprintf(t, "sbc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xe6: sprintf(t, "inc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, op8)); break;
-  case 0xe7: sprintf(t, "sbc [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, op8)); break;
+  case 0xe3: sprintf(t, "sbc $%.2x,s     [%.6x]", op8, decode(OPTYPE_SR, addr, op8)); break;
+  case 0xe4: sprintf(t, "cpx $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xe5: sprintf(t, "sbc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xe6: sprintf(t, "inc $%.2x       [%.6x]", op8, decode(OPTYPE_DP, addr, op8)); break;
+  case 0xe7: sprintf(t, "sbc [$%.2x]     [%.6x]", op8, decode(OPTYPE_ILDP, addr, op8)); break;
   case 0xe8: sprintf(t, "inx                   "); break;
   case 0xe9: if(a8)sprintf(t, "sbc #$%.2x              ", op8);
              else  sprintf(t, "sbc #$%.4x            ", op16); break;
   case 0xea: sprintf(t, "nop                   "); break;
   case 0xeb: sprintf(t, "xba                   "); break;
-  case 0xec: sprintf(t, "cpx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xed: sprintf(t, "sbc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xee: sprintf(t, "inc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xef: sprintf(t, "sbc $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, op24)); break;
-  case 0xf0: sprintf(t, "beq $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, op8)), decode(OPTYPE_RELB, op8)); break;
-  case 0xf1: sprintf(t, "sbc ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, op8)); break;
-  case 0xf2: sprintf(t, "sbc ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, op8)); break;
-  case 0xf3: sprintf(t, "sbc ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, op8)); break;
-  case 0xf4: sprintf(t, "pea $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, op16)); break;
-  case 0xf5: sprintf(t, "sbc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xf6: sprintf(t, "inc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, op8)); break;
-  case 0xf7: sprintf(t, "sbc [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, op8)); break;
+  case 0xec: sprintf(t, "cpx $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xed: sprintf(t, "sbc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xee: sprintf(t, "inc $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xef: sprintf(t, "sbc $%.6x   [%.6x]", op24, decode(OPTYPE_LONG, addr, op24)); break;
+  case 0xf0: sprintf(t, "beq $%.4x     [%.6x]", uint16_t(decode(OPTYPE_RELB, addr, op8)), decode(OPTYPE_RELB, addr, op8)); break;
+  case 0xf1: sprintf(t, "sbc ($%.2x),y   [%.6x]", op8, decode(OPTYPE_IDPY, addr, op8)); break;
+  case 0xf2: sprintf(t, "sbc ($%.2x)     [%.6x]", op8, decode(OPTYPE_IDP, addr, op8)); break;
+  case 0xf3: sprintf(t, "sbc ($%.2x,s),y [%.6x]", op8, decode(OPTYPE_ISRY, addr, op8)); break;
+  case 0xf4: sprintf(t, "pea $%.4x     [%.6x]", op16, decode(OPTYPE_ADDR, addr, op16)); break;
+  case 0xf5: sprintf(t, "sbc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xf6: sprintf(t, "inc $%.2x,x     [%.6x]", op8, decode(OPTYPE_DPX, addr, op8)); break;
+  case 0xf7: sprintf(t, "sbc [$%.2x],y   [%.6x]", op8, decode(OPTYPE_ILDPY, addr, op8)); break;
   case 0xf8: sprintf(t, "sed                   "); break;
-  case 0xf9: sprintf(t, "sbc $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, op16)); break;
+  case 0xf9: sprintf(t, "sbc $%.4x,y   [%.6x]", op16, decode(OPTYPE_ADDRY, addr, op16)); break;
   case 0xfa: sprintf(t, "plx                   "); break;
   case 0xfb: sprintf(t, "xce                   "); break;
-  case 0xfc: sprintf(t, "jsr ($%.4x,x) [%.6x]", op16, decode(OPTYPE_IADDRX, op16)); break;
-  case 0xfd: sprintf(t, "sbc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xfe: sprintf(t, "inc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, op16)); break;
-  case 0xff: sprintf(t, "sbc $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, op24)); break;
+  case 0xfc: sprintf(t, "jsr ($%.4x,x) [%.6x]", op16, decode(OPTYPE_IADDRX, addr, op16)); break;
+  case 0xfd: sprintf(t, "sbc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xfe: sprintf(t, "inc $%.4x,x   [%.6x]", op16, decode(OPTYPE_ADDRX, addr, op16)); break;
+  case 0xff: sprintf(t, "sbc $%.6x,x [%.6x]", op24, decode(OPTYPE_LONGX, addr, op24)); break;
   }
 
   #undef op8
diff --git a/higan/processor/r65816/disassembler.hpp b/higan/processor/wdc65816/disassembler.hpp
similarity index 93%
rename from higan/processor/r65816/disassembler.hpp
rename to higan/processor/wdc65816/disassembler.hpp
index 3d1e44d..662e668 100644
--- a/higan/processor/r65816/disassembler.hpp
+++ b/higan/processor/wdc65816/disassembler.hpp
@@ -27,4 +27,4 @@ auto disassemble(uint24 addr, bool e, bool m, bool x) -> string;
 auto dreadb(uint24 addr) -> uint8;
 auto dreadw(uint24 addr) -> uint16;
 auto dreadl(uint24 addr) -> uint24;
-auto decode(uint8 mode, uint24 addr) -> uint24;
+auto decode(uint8 mode, uint24 addr, uint24 arg) -> uint24;
diff --git a/higan/processor/r65816/instructions-misc.cpp b/higan/processor/wdc65816/instructions-misc.cpp
similarity index 73%
rename from higan/processor/r65816/instructions-misc.cpp
rename to higan/processor/wdc65816/instructions-misc.cpp
index 58b383f..60fd8c2 100644
--- a/higan/processor/r65816/instructions-misc.cpp
+++ b/higan/processor/wdc65816/instructions-misc.cpp
@@ -1,12 +1,12 @@
-auto R65816::op_nop() {
+auto WDC65816::op_nop() {
 L idleIRQ();
 }
 
-auto R65816::op_wdm() {
+auto WDC65816::op_wdm() {
 L readPC();
 }
 
-auto R65816::op_xba() {
+auto WDC65816::op_xba() {
   idle();
 L idle();
   r.a.w = r.a.w >> 8 | r.a.w << 8;
@@ -14,7 +14,7 @@ L idle();
   r.p.z = (r.a.l == 0);
 }
 
-auto R65816::op_move_b(int adjust) {
+auto WDC65816::op_move_b(int adjust) {
   dp = readPC();
   sp = readPC();
   r.db = dp;
@@ -27,7 +27,7 @@ L idle();
   if(r.a.w--) r.pc.w -= 3;
 }
 
-auto R65816::op_move_w(int adjust) {
+auto WDC65816::op_move_w(int adjust) {
   dp = readPC();
   sp = readPC();
   r.db = dp;
@@ -40,7 +40,7 @@ L idle();
   if(r.a.w--) r.pc.w -= 3;
 }
 
-auto R65816::op_interrupt(uint16 vector) {
+auto WDC65816::op_interrupt(uint16 vector) {
   readPC();
 N writeSP(r.pc.b);
   writeSP(r.pc.h);
@@ -53,13 +53,13 @@ L r.pc.h = readLong(vector + 1);
   r.pc.b = 0x00;
 }
 
-auto R65816::op_stp() {
+auto WDC65816::op_stp() {
   while(r.wai = true) {
 L   idle();
   }
 }
 
-auto R65816::op_wai() {
+auto WDC65816::op_wai() {
   r.wai = true;
   while(r.wai) {
 L   idle();
@@ -67,7 +67,7 @@ L   idle();
   idle();
 }
 
-auto R65816::op_xce() {
+auto WDC65816::op_xce() {
 L idleIRQ();
   bool carry = r.p.c;
   r.p.c = r.e;
@@ -81,17 +81,17 @@ L idleIRQ();
   }
 }
 
-auto R65816::op_set_flag(uint bit) {
+auto WDC65816::op_set_flag(uint bit) {
 L idleIRQ();
   r.p |= 1 << bit;
 }
 
-auto R65816::op_clear_flag(uint bit) {
+auto WDC65816::op_clear_flag(uint bit) {
 L idleIRQ();
   r.p &= ~(1 << bit);
 }
 
-auto R65816::op_pflag(bool mode) {
+auto WDC65816::op_pflag(bool mode) {
   rd.l = readPC();
 L idle();
   r.p = (mode ? r.p | rd.l : r.p & ~rd.l);
@@ -102,80 +102,80 @@ E r.p.m = 1, r.p.x = 1;
   }
 }
 
-auto R65816::op_transfer_b(Reg16& from, Reg16& to) {
+auto WDC65816::op_transfer_b(Reg16& from, Reg16& to) {
 L idleIRQ();
   to.l = from.l;
   r.p.n = (to.l & 0x80);
   r.p.z = (to.l == 0);
 }
 
-auto R65816::op_transfer_w(Reg16& from, Reg16& to) {
+auto WDC65816::op_transfer_w(Reg16& from, Reg16& to) {
 L idleIRQ();
   to.w = from.w;
   r.p.n = (to.w & 0x8000);
   r.p.z = (to.w == 0);
 }
 
-auto R65816::op_tcs() {
+auto WDC65816::op_tcs() {
 L idleIRQ();
   r.s.w = r.a.w;
 E r.s.h = 0x01;
 }
 
-auto R65816::op_tsx_b() {
+auto WDC65816::op_tsx_b() {
 L idleIRQ();
   r.x.l = r.s.l;
   r.p.n = (r.x.l & 0x80);
   r.p.z = (r.x.l == 0);
 }
 
-auto R65816::op_tsx_w() {
+auto WDC65816::op_tsx_w() {
 L idleIRQ();
   r.x.w = r.s.w;
   r.p.n = (r.x.w & 0x8000);
   r.p.z = (r.x.w == 0);
 }
 
-auto R65816::op_txs() {
+auto WDC65816::op_txs() {
 L idleIRQ();
 E r.s.l = r.x.l;
 N r.s.w = r.x.w;
 }
 
-auto R65816::op_push_b(Reg16& reg) {
+auto WDC65816::op_push_b(Reg16& reg) {
   idle();
 L writeSP(reg.l);
 }
 
-auto R65816::op_push_w(Reg16& reg) {
+auto WDC65816::op_push_w(Reg16& reg) {
   idle();
   writeSP(reg.h);
 L writeSP(reg.l);
 }
 
-auto R65816::op_phd() {
+auto WDC65816::op_phd() {
   idle();
   writeSPn(r.d.h);
 L writeSPn(r.d.l);
 E r.s.h = 0x01;
 }
 
-auto R65816::op_phb() {
+auto WDC65816::op_phb() {
   idle();
 L writeSP(r.db);
 }
 
-auto R65816::op_phk() {
+auto WDC65816::op_phk() {
   idle();
 L writeSP(r.pc.b);
 }
 
-auto R65816::op_php() {
+auto WDC65816::op_php() {
   idle();
 L writeSP(r.p);
 }
 
-auto R65816::op_pull_b(Reg16& reg) {
+auto WDC65816::op_pull_b(Reg16& reg) {
   idle();
   idle();
 L reg.l = readSP();
@@ -183,7 +183,7 @@ L reg.l = readSP();
   r.p.z = (reg.l == 0);
 }
 
-auto R65816::op_pull_w(Reg16& reg) {
+auto WDC65816::op_pull_w(Reg16& reg) {
   idle();
   idle();
   reg.l = readSP();
@@ -192,7 +192,7 @@ L reg.h = readSP();
   r.p.z = (reg.w == 0);
 }
 
-auto R65816::op_pld() {
+auto WDC65816::op_pld() {
   idle();
   idle();
   r.d.l = readSPn();
@@ -202,7 +202,7 @@ L r.d.h = readSPn();
 E r.s.h = 0x01;
 }
 
-auto R65816::op_plb() {
+auto WDC65816::op_plb() {
   idle();
   idle();
 L r.db = readSP();
@@ -210,7 +210,7 @@ L r.db = readSP();
   r.p.z = (r.db == 0);
 }
 
-auto R65816::op_plp() {
+auto WDC65816::op_plp() {
   idle();
   idle();
 L r.p = readSP();
@@ -221,7 +221,7 @@ E r.p.m = 1, r.p.x = 1;
   }
 }
 
-auto R65816::op_pea() {
+auto WDC65816::op_pea() {
   aa.l = readPC();
   aa.h = readPC();
   writeSPn(aa.h);
@@ -229,7 +229,7 @@ L writeSPn(aa.l);
 E r.s.h = 0x01;
 }
 
-auto R65816::op_pei() {
+auto WDC65816::op_pei() {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -239,7 +239,7 @@ L writeSPn(aa.l);
 E r.s.h = 0x01;
 }
 
-auto R65816::op_per() {
+auto WDC65816::op_per() {
   aa.l = readPC();
   aa.h = readPC();
   idle();
diff --git a/higan/processor/r65816/instructions-pc.cpp b/higan/processor/wdc65816/instructions-pc.cpp
similarity index 80%
rename from higan/processor/r65816/instructions-pc.cpp
rename to higan/processor/wdc65816/instructions-pc.cpp
index e1cfb32..24aef8e 100644
--- a/higan/processor/r65816/instructions-pc.cpp
+++ b/higan/processor/wdc65816/instructions-pc.cpp
@@ -1,4 +1,4 @@
-auto R65816::op_branch(bool flag, bool value) {
+auto WDC65816::op_branch(bool flag, bool value) {
   if(flag != value) {
 L   rd.l = readPC();
   } else {
@@ -10,7 +10,7 @@ L   idle();
   }
 }
 
-auto R65816::op_bra() {
+auto WDC65816::op_bra() {
   rd.l = readPC();
   aa.w = r.pc.d + (int8)rd.l;
   idle6(aa.w);
@@ -18,27 +18,27 @@ L idle();
   r.pc.w = aa.w;
 }
 
-auto R65816::op_brl() {
+auto WDC65816::op_brl() {
   rd.l = readPC();
   rd.h = readPC();
 L idle();
   r.pc.w = r.pc.d + (int16)rd.w;
 }
 
-auto R65816::op_jmp_addr() {
+auto WDC65816::op_jmp_addr() {
   rd.l = readPC();
 L rd.h = readPC();
   r.pc.w = rd.w;
 }
 
-auto R65816::op_jmp_long() {
+auto WDC65816::op_jmp_long() {
   rd.l = readPC();
   rd.h = readPC();
 L rd.b = readPC();
   r.pc.d = rd.d;
 }
 
-auto R65816::op_jmp_iaddr() {
+auto WDC65816::op_jmp_iaddr() {
   aa.l = readPC();
   aa.h = readPC();
   rd.l = readAddr(aa.w + 0);
@@ -46,7 +46,7 @@ L rd.h = readAddr(aa.w + 1);
   r.pc.w = rd.w;
 }
 
-auto R65816::op_jmp_iaddrx() {
+auto WDC65816::op_jmp_iaddrx() {
   aa.l = readPC();
   aa.h = readPC();
   idle();
@@ -55,7 +55,7 @@ L rd.h = readPB(aa.w + r.x.w + 1);
   r.pc.w = rd.w;
 }
 
-auto R65816::op_jmp_iladdr() {
+auto WDC65816::op_jmp_iladdr() {
   aa.l = readPC();
   aa.h = readPC();
   rd.l = readAddr(aa.w + 0);
@@ -64,7 +64,7 @@ L rd.b = readAddr(aa.w + 2);
   r.pc.d = rd.d;
 }
 
-auto R65816::op_jsr_addr() {
+auto WDC65816::op_jsr_addr() {
   aa.l = readPC();
   aa.h = readPC();
   idle();
@@ -74,7 +74,7 @@ L writeSP(r.pc.l);
   r.pc.w = aa.w;
 }
 
-auto R65816::op_jsr_long() {
+auto WDC65816::op_jsr_long() {
   aa.l = readPC();
   aa.h = readPC();
   writeSPn(r.pc.b);
@@ -87,7 +87,7 @@ L writeSPn(r.pc.l);
 E r.s.h = 0x01;
 }
 
-auto R65816::op_jsr_iaddrx() {
+auto WDC65816::op_jsr_iaddrx() {
   aa.l = readPC();
   writeSPn(r.pc.h);
   writeSPn(r.pc.l);
@@ -99,7 +99,7 @@ L rd.h = readPB(aa.w + r.x.w + 1);
 E r.s.h = 0x01;
 }
 
-auto R65816::op_rti() {
+auto WDC65816::op_rti() {
   idle();
   idle();
   r.p = readSP();
@@ -117,7 +117,7 @@ E r.p.m = 1, r.p.x = 1;
   }
 }
 
-auto R65816::op_rts() {
+auto WDC65816::op_rts() {
   idle();
   idle();
   rd.l = readSP();
@@ -126,7 +126,7 @@ L idle();
   r.pc.w = ++rd.w;
 }
 
-auto R65816::op_rtl() {
+auto WDC65816::op_rtl() {
   idle();
   idle();
   rd.l = readSPn();
diff --git a/higan/processor/r65816/instructions-read.cpp b/higan/processor/wdc65816/instructions-read.cpp
similarity index 75%
rename from higan/processor/r65816/instructions-read.cpp
rename to higan/processor/wdc65816/instructions-read.cpp
index 5644717..ba18ecf 100644
--- a/higan/processor/r65816/instructions-read.cpp
+++ b/higan/processor/wdc65816/instructions-read.cpp
@@ -1,33 +1,33 @@
-auto R65816::op_read_const_b(fp op) {
+auto WDC65816::op_read_const_b(fp op) {
 L rd.l = readPC();
   call(op);
 }
 
-auto R65816::op_read_const_w(fp op) {
+auto WDC65816::op_read_const_w(fp op) {
   rd.l = readPC();
 L rd.h = readPC();
   call(op);
 }
 
-auto R65816::op_read_bit_const_b() {
+auto WDC65816::op_read_bit_const_b() {
 L rd.l = readPC();
   r.p.z = ((rd.l & r.a.l) == 0);
 }
 
-auto R65816::op_read_bit_const_w() {
+auto WDC65816::op_read_bit_const_w() {
   rd.l = readPC();
 L rd.h = readPC();
   r.p.z = ((rd.w & r.a.w) == 0);
 }
 
-auto R65816::op_read_addr_b(fp op) {
+auto WDC65816::op_read_addr_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
 L rd.l = readDB(aa.w);
   call(op);
 }
 
-auto R65816::op_read_addr_w(fp op) {
+auto WDC65816::op_read_addr_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   rd.l = readDB(aa.w + 0);
@@ -35,7 +35,7 @@ L rd.h = readDB(aa.w + 1);
   call(op);
 }
 
-auto R65816::op_read_addrx_b(fp op) {
+auto WDC65816::op_read_addrx_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle4(aa.w, aa.w + r.x.w);
@@ -43,7 +43,7 @@ L rd.l = readDB(aa.w + r.x.w);
   call(op);
 }
 
-auto R65816::op_read_addrx_w(fp op) {
+auto WDC65816::op_read_addrx_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle4(aa.w, aa.w + r.x.w);
@@ -52,7 +52,7 @@ L rd.h = readDB(aa.w + r.x.w + 1);
   call(op);
 }
 
-auto R65816::op_read_addry_b(fp op) {
+auto WDC65816::op_read_addry_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle4(aa.w, aa.w + r.y.w);
@@ -60,7 +60,7 @@ L rd.l = readDB(aa.w + r.y.w);
   call(op);
 }
 
-auto R65816::op_read_addry_w(fp op) {
+auto WDC65816::op_read_addry_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle4(aa.w, aa.w + r.y.w);
@@ -69,7 +69,7 @@ L rd.h = readDB(aa.w + r.y.w + 1);
   call(op);
 }
 
-auto R65816::op_read_long_b(fp op) {
+auto WDC65816::op_read_long_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
@@ -77,7 +77,7 @@ L rd.l = readLong(aa.d);
   call(op);
 }
 
-auto R65816::op_read_long_w(fp op) {
+auto WDC65816::op_read_long_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
@@ -86,7 +86,7 @@ L rd.h = readLong(aa.d + 1);
   call(op);
 }
 
-auto R65816::op_read_longx_b(fp op) {
+auto WDC65816::op_read_longx_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
@@ -94,7 +94,7 @@ L rd.l = readLong(aa.d + r.x.w);
   call(op);
 }
 
-auto R65816::op_read_longx_w(fp op) {
+auto WDC65816::op_read_longx_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
@@ -103,14 +103,14 @@ L rd.h = readLong(aa.d + r.x.w + 1);
   call(op);
 }
 
-auto R65816::op_read_dp_b(fp op) {
+auto WDC65816::op_read_dp_b(fp op) {
   dp = readPC();
   idle2();
 L rd.l = readDP(dp);
   call(op);
 }
 
-auto R65816::op_read_dp_w(fp op) {
+auto WDC65816::op_read_dp_w(fp op) {
   dp = readPC();
   idle2();
   rd.l = readDP(dp + 0);
@@ -118,7 +118,7 @@ L rd.h = readDP(dp + 1);
   call(op);
 }
 
-auto R65816::op_read_dpr_b(fp op, Reg16& reg) {
+auto WDC65816::op_read_dpr_b(fp op, Reg16& reg) {
   dp = readPC();
   idle2();
   idle();
@@ -126,7 +126,7 @@ L rd.l = readDP(dp + reg.w);
   call(op);
 }
 
-auto R65816::op_read_dpr_w(fp op, Reg16& reg) {
+auto WDC65816::op_read_dpr_w(fp op, Reg16& reg) {
   dp = readPC();
   idle2();
   idle();
@@ -135,7 +135,7 @@ L rd.h = readDP(dp + reg.w + 1);
   call(op);
 }
 
-auto R65816::op_read_idp_b(fp op) {
+auto WDC65816::op_read_idp_b(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -144,7 +144,7 @@ L rd.l = readDB(aa.w);
   call(op);
 }
 
-auto R65816::op_read_idp_w(fp op) {
+auto WDC65816::op_read_idp_w(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -154,7 +154,7 @@ L rd.h = readDB(aa.w + 1);
   call(op);
 }
 
-auto R65816::op_read_idpx_b(fp op) {
+auto WDC65816::op_read_idpx_b(fp op) {
   dp = readPC();
   idle2();
   idle();
@@ -164,7 +164,7 @@ L rd.l = readDB(aa.w);
   call(op);
 }
 
-auto R65816::op_read_idpx_w(fp op) {
+auto WDC65816::op_read_idpx_w(fp op) {
   dp = readPC();
   idle2();
   idle();
@@ -175,7 +175,7 @@ L rd.h = readDB(aa.w + 1);
   call(op);
 }
 
-auto R65816::op_read_idpy_b(fp op) {
+auto WDC65816::op_read_idpy_b(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -185,7 +185,7 @@ L rd.l = readDB(aa.w + r.y.w);
   call(op);
 }
 
-auto R65816::op_read_idpy_w(fp op) {
+auto WDC65816::op_read_idpy_w(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -196,7 +196,7 @@ L rd.h = readDB(aa.w + r.y.w + 1);
   call(op);
 }
 
-auto R65816::op_read_ildp_b(fp op) {
+auto WDC65816::op_read_ildp_b(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -206,7 +206,7 @@ L rd.l = readLong(aa.d);
   call(op);
 }
 
-auto R65816::op_read_ildp_w(fp op) {
+auto WDC65816::op_read_ildp_w(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -217,7 +217,7 @@ L rd.h = readLong(aa.d + 1);
   call(op);
 }
 
-auto R65816::op_read_ildpy_b(fp op) {
+auto WDC65816::op_read_ildpy_b(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -227,7 +227,7 @@ L rd.l = readLong(aa.d + r.y.w);
   call(op);
 }
 
-auto R65816::op_read_ildpy_w(fp op) {
+auto WDC65816::op_read_ildpy_w(fp op) {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -238,14 +238,14 @@ L rd.h = readLong(aa.d + r.y.w + 1);
   call(op);
 }
 
-auto R65816::op_read_sr_b(fp op) {
+auto WDC65816::op_read_sr_b(fp op) {
   sp = readPC();
   idle();
 L rd.l = readSP(sp);
   call(op);
 }
 
-auto R65816::op_read_sr_w(fp op) {
+auto WDC65816::op_read_sr_w(fp op) {
   sp = readPC();
   idle();
   rd.l = readSP(sp + 0);
@@ -253,7 +253,7 @@ L rd.h = readSP(sp + 1);
   call(op);
 }
 
-auto R65816::op_read_isry_b(fp op) {
+auto WDC65816::op_read_isry_b(fp op) {
   sp = readPC();
   idle();
   aa.l = readSP(sp + 0);
@@ -263,7 +263,7 @@ L rd.l = readDB(aa.w + r.y.w);
   call(op);
 }
 
-auto R65816::op_read_isry_w(fp op) {
+auto WDC65816::op_read_isry_w(fp op) {
   sp = readPC();
   idle();
   aa.l = readSP(sp + 0);
diff --git a/higan/processor/r65816/instructions-rmw.cpp b/higan/processor/wdc65816/instructions-rmw.cpp
similarity index 77%
rename from higan/processor/r65816/instructions-rmw.cpp
rename to higan/processor/wdc65816/instructions-rmw.cpp
index da9d11d..259c7c2 100644
--- a/higan/processor/r65816/instructions-rmw.cpp
+++ b/higan/processor/wdc65816/instructions-rmw.cpp
@@ -1,18 +1,18 @@
-auto R65816::op_adjust_imm_b(Reg16& reg, int adjust) {
+auto WDC65816::op_adjust_imm_b(Reg16& reg, int adjust) {
 L idleIRQ();
   reg.l += adjust;
   r.p.n = (reg.l & 0x80);
   r.p.z = (reg.l == 0);
 }
 
-auto R65816::op_adjust_imm_w(Reg16& reg, int adjust) {
+auto WDC65816::op_adjust_imm_w(Reg16& reg, int adjust) {
 L idleIRQ();
   reg.w += adjust;
   r.p.n = (reg.w & 0x8000);
   r.p.z = (reg.w == 0);
 }
 
-auto R65816::op_asl_imm_b() {
+auto WDC65816::op_asl_imm_b() {
 L idleIRQ();
   r.p.c = (r.a.l & 0x80);
   r.a.l <<= 1;
@@ -20,7 +20,7 @@ L idleIRQ();
   r.p.z = (r.a.l == 0);
 }
 
-auto R65816::op_asl_imm_w() {
+auto WDC65816::op_asl_imm_w() {
 L idleIRQ();
   r.p.c = (r.a.w & 0x8000);
   r.a.w <<= 1;
@@ -28,7 +28,7 @@ L idleIRQ();
   r.p.z = (r.a.w == 0);
 }
 
-auto R65816::op_lsr_imm_b() {
+auto WDC65816::op_lsr_imm_b() {
 L idleIRQ();
   r.p.c = (r.a.l & 0x01);
   r.a.l >>= 1;
@@ -36,7 +36,7 @@ L idleIRQ();
   r.p.z = (r.a.l == 0);
 }
 
-auto R65816::op_lsr_imm_w() {
+auto WDC65816::op_lsr_imm_w() {
 L idleIRQ();
   r.p.c = (r.a.w & 0x0001);
   r.a.w >>= 1;
@@ -44,7 +44,7 @@ L idleIRQ();
   r.p.z = (r.a.w == 0);
 }
 
-auto R65816::op_rol_imm_b() {
+auto WDC65816::op_rol_imm_b() {
 L idleIRQ();
   bool carry = r.p.c;
   r.p.c = (r.a.l & 0x80);
@@ -53,7 +53,7 @@ L idleIRQ();
   r.p.z = (r.a.l == 0);
 }
 
-auto R65816::op_rol_imm_w() {
+auto WDC65816::op_rol_imm_w() {
 L idleIRQ();
   bool carry = r.p.c;
   r.p.c = (r.a.w & 0x8000);
@@ -62,7 +62,7 @@ L idleIRQ();
   r.p.z = (r.a.w == 0);
 }
 
-auto R65816::op_ror_imm_b() {
+auto WDC65816::op_ror_imm_b() {
 L idleIRQ();
   bool carry = r.p.c;
   r.p.c = (r.a.l & 0x01);
@@ -71,7 +71,7 @@ L idleIRQ();
   r.p.z = (r.a.l == 0);
 }
 
-auto R65816::op_ror_imm_w() {
+auto WDC65816::op_ror_imm_w() {
 L idleIRQ();
   bool carry = r.p.c;
   r.p.c = (r.a.w & 0x0001);
@@ -80,7 +80,7 @@ L idleIRQ();
   r.p.z = (r.a.w == 0);
 }
 
-auto R65816::op_adjust_addr_b(fp op) {
+auto WDC65816::op_adjust_addr_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   rd.l = readDB(aa.w);
@@ -89,7 +89,7 @@ auto R65816::op_adjust_addr_b(fp op) {
 L writeDB(aa.w, rd.l);
 }
 
-auto R65816::op_adjust_addr_w(fp op) {
+auto WDC65816::op_adjust_addr_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   rd.l = readDB(aa.w + 0);
@@ -100,7 +100,7 @@ auto R65816::op_adjust_addr_w(fp op) {
 L writeDB(aa.w + 0, rd.l);
 }
 
-auto R65816::op_adjust_addrx_b(fp op) {
+auto WDC65816::op_adjust_addrx_b(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle();
@@ -110,7 +110,7 @@ auto R65816::op_adjust_addrx_b(fp op) {
 L writeDB(aa.w + r.x.w, rd.l);
 }
 
-auto R65816::op_adjust_addrx_w(fp op) {
+auto WDC65816::op_adjust_addrx_w(fp op) {
   aa.l = readPC();
   aa.h = readPC();
   idle();
@@ -122,7 +122,7 @@ auto R65816::op_adjust_addrx_w(fp op) {
 L writeDB(aa.w + r.x.w + 0, rd.l);
 }
 
-auto R65816::op_adjust_dp_b(fp op) {
+auto WDC65816::op_adjust_dp_b(fp op) {
   dp = readPC();
   idle2();
   rd.l = readDP(dp);
@@ -131,7 +131,7 @@ auto R65816::op_adjust_dp_b(fp op) {
 L writeDP(dp, rd.l);
 }
 
-auto R65816::op_adjust_dp_w(fp op) {
+auto WDC65816::op_adjust_dp_w(fp op) {
   dp = readPC();
   idle2();
   rd.l = readDP(dp + 0);
@@ -142,7 +142,7 @@ auto R65816::op_adjust_dp_w(fp op) {
 L writeDP(dp + 0, rd.l);
 }
 
-auto R65816::op_adjust_dpx_b(fp op) {
+auto WDC65816::op_adjust_dpx_b(fp op) {
   dp = readPC();
   idle2();
   idle();
@@ -152,7 +152,7 @@ auto R65816::op_adjust_dpx_b(fp op) {
 L writeDP(dp + r.x.w, rd.l);
 }
 
-auto R65816::op_adjust_dpx_w(fp op) {
+auto WDC65816::op_adjust_dpx_w(fp op) {
   dp = readPC();
   idle2();
   idle();
diff --git a/higan/processor/r65816/instructions-write.cpp b/higan/processor/wdc65816/instructions-write.cpp
similarity index 74%
rename from higan/processor/r65816/instructions-write.cpp
rename to higan/processor/wdc65816/instructions-write.cpp
index 0a63af6..3b0f6c9 100644
--- a/higan/processor/r65816/instructions-write.cpp
+++ b/higan/processor/wdc65816/instructions-write.cpp
@@ -1,24 +1,24 @@
-auto R65816::op_write_addr_b(Reg16& reg) {
+auto WDC65816::op_write_addr_b(Reg16& reg) {
   aa.l = readPC();
   aa.h = readPC();
 L writeDB(aa.w, reg);
 }
 
-auto R65816::op_write_addr_w(Reg16& reg) {
+auto WDC65816::op_write_addr_w(Reg16& reg) {
   aa.l = readPC();
   aa.h = readPC();
   writeDB(aa.w + 0, reg >> 0);
 L writeDB(aa.w + 1, reg >> 8);
 }
 
-auto R65816::op_write_addrr_b(Reg16& reg, Reg16& idx) {
+auto WDC65816::op_write_addrr_b(Reg16& reg, Reg16& idx) {
   aa.l = readPC();
   aa.h = readPC();
   idle();
 L writeDB(aa.w + idx, reg);
 }
 
-auto R65816::op_write_addrr_w(Reg16& reg, Reg16& idx) {
+auto WDC65816::op_write_addrr_w(Reg16& reg, Reg16& idx) {
   aa.l = readPC();
   aa.h = readPC();
   idle();
@@ -26,14 +26,14 @@ auto R65816::op_write_addrr_w(Reg16& reg, Reg16& idx) {
 L writeDB(aa.w + idx + 1, reg >> 8);
 }
 
-auto R65816::op_write_longr_b(Reg16& idx) {
+auto WDC65816::op_write_longr_b(Reg16& idx) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
 L writeLong(aa.d + idx, r.a.l);
 }
 
-auto R65816::op_write_longr_w(Reg16& idx) {
+auto WDC65816::op_write_longr_w(Reg16& idx) {
   aa.l = readPC();
   aa.h = readPC();
   aa.b = readPC();
@@ -41,27 +41,27 @@ auto R65816::op_write_longr_w(Reg16& idx) {
 L writeLong(aa.d + idx + 1, r.a.h);
 }
 
-auto R65816::op_write_dp_b(Reg16& reg) {
+auto WDC65816::op_write_dp_b(Reg16& reg) {
   dp = readPC();
   idle2();
 L writeDP(dp, reg);
 }
 
-auto R65816::op_write_dp_w(Reg16& reg) {
+auto WDC65816::op_write_dp_w(Reg16& reg) {
   dp = readPC();
   idle2();
   writeDP(dp + 0, reg >> 0);
 L writeDP(dp + 1, reg >> 8);
 }
 
-auto R65816::op_write_dpr_b(Reg16& reg, Reg16& idx) {
+auto WDC65816::op_write_dpr_b(Reg16& reg, Reg16& idx) {
   dp = readPC();
   idle2();
   idle();
 L writeDP(dp + idx, reg);
 }
 
-auto R65816::op_write_dpr_w(Reg16& reg, Reg16& idx) {
+auto WDC65816::op_write_dpr_w(Reg16& reg, Reg16& idx) {
   dp = readPC();
   idle2();
   idle();
@@ -69,7 +69,7 @@ auto R65816::op_write_dpr_w(Reg16& reg, Reg16& idx) {
 L writeDP(dp + idx + 1, reg >> 8);
 }
 
-auto R65816::op_sta_idp_b() {
+auto WDC65816::op_sta_idp_b() {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -77,7 +77,7 @@ auto R65816::op_sta_idp_b() {
 L writeDB(aa.w, r.a.l);
 }
 
-auto R65816::op_sta_idp_w() {
+auto WDC65816::op_sta_idp_w() {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -86,7 +86,7 @@ auto R65816::op_sta_idp_w() {
 L writeDB(aa.w + 1, r.a.h);
 }
 
-auto R65816::op_sta_ildp_b() {
+auto WDC65816::op_sta_ildp_b() {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -95,7 +95,7 @@ auto R65816::op_sta_ildp_b() {
 L writeLong(aa.d, r.a.l);
 }
 
-auto R65816::op_sta_ildp_w() {
+auto WDC65816::op_sta_ildp_w() {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -105,7 +105,7 @@ auto R65816::op_sta_ildp_w() {
 L writeLong(aa.d + 1, r.a.h);
 }
 
-auto R65816::op_sta_idpx_b() {
+auto WDC65816::op_sta_idpx_b() {
   dp = readPC();
   idle2();
   idle();
@@ -114,7 +114,7 @@ auto R65816::op_sta_idpx_b() {
 L writeDB(aa.w, r.a.l);
 }
 
-auto R65816::op_sta_idpx_w() {
+auto WDC65816::op_sta_idpx_w() {
   dp = readPC();
   idle2();
   idle();
@@ -124,7 +124,7 @@ auto R65816::op_sta_idpx_w() {
 L writeDB(aa.w + 1, r.a.h);
 }
 
-auto R65816::op_sta_idpy_b() {
+auto WDC65816::op_sta_idpy_b() {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -133,7 +133,7 @@ auto R65816::op_sta_idpy_b() {
 L writeDB(aa.w + r.y.w, r.a.l);
 }
 
-auto R65816::op_sta_idpy_w() {
+auto WDC65816::op_sta_idpy_w() {
   dp = readPC();
   idle2();
   aa.l = readDP(dp + 0);
@@ -143,7 +143,7 @@ auto R65816::op_sta_idpy_w() {
 L writeDB(aa.w + r.y.w + 1, r.a.h);
 }
 
-auto R65816::op_sta_ildpy_b() {
+auto WDC65816::op_sta_ildpy_b() {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -152,7 +152,7 @@ auto R65816::op_sta_ildpy_b() {
 L writeLong(aa.d + r.y.w, r.a.l);
 }
 
-auto R65816::op_sta_ildpy_w() {
+auto WDC65816::op_sta_ildpy_w() {
   dp = readPC();
   idle2();
   aa.l = readDPn(dp + 0);
@@ -162,20 +162,20 @@ auto R65816::op_sta_ildpy_w() {
 L writeLong(aa.d + r.y.w + 1, r.a.h);
 }
 
-auto R65816::op_sta_sr_b() {
+auto WDC65816::op_sta_sr_b() {
   sp = readPC();
   idle();
 L writeSP(sp, r.a.l);
 }
 
-auto R65816::op_sta_sr_w() {
+auto WDC65816::op_sta_sr_w() {
   sp = readPC();
   idle();
   writeSP(sp + 0, r.a.l);
 L writeSP(sp + 1, r.a.h);
 }
 
-auto R65816::op_sta_isry_b() {
+auto WDC65816::op_sta_isry_b() {
   sp = readPC();
   idle();
   aa.l = readSP(sp + 0);
@@ -184,7 +184,7 @@ auto R65816::op_sta_isry_b() {
 L writeDB(aa.w + r.y.w, r.a.l);
 }
 
-auto R65816::op_sta_isry_w() {
+auto WDC65816::op_sta_isry_w() {
   sp = readPC();
   idle();
   aa.l = readSP(sp + 0);
diff --git a/higan/processor/r65816/memory.hpp b/higan/processor/wdc65816/memory.hpp
similarity index 100%
rename from higan/processor/r65816/memory.hpp
rename to higan/processor/wdc65816/memory.hpp
diff --git a/higan/processor/r65816/registers.hpp b/higan/processor/wdc65816/registers.hpp
similarity index 100%
rename from higan/processor/r65816/registers.hpp
rename to higan/processor/wdc65816/registers.hpp
diff --git a/higan/processor/r65816/serialization.cpp b/higan/processor/wdc65816/serialization.cpp
similarity index 87%
rename from higan/processor/r65816/serialization.cpp
rename to higan/processor/wdc65816/serialization.cpp
index d3f20a9..f62266b 100644
--- a/higan/processor/r65816/serialization.cpp
+++ b/higan/processor/wdc65816/serialization.cpp
@@ -1,4 +1,4 @@
-auto R65816::serialize(serializer& s) -> void {
+auto WDC65816::serialize(serializer& s) -> void {
   s.integer(r.pc.d);
 
   s.integer(r.a.w);
diff --git a/higan/processor/r65816/switch.cpp b/higan/processor/wdc65816/switch.cpp
similarity index 94%
rename from higan/processor/r65816/switch.cpp
rename to higan/processor/wdc65816/switch.cpp
index 9168754..897ee8e 100644
--- a/higan/processor/r65816/switch.cpp
+++ b/higan/processor/wdc65816/switch.cpp
@@ -1,15 +1,15 @@
-auto R65816::instruction() -> void {
+auto WDC65816::instruction() -> void {
   #define opA(  n, o      ) case n: return op_##o();
   #define opAI( n, o, i   ) case n: return op_##o(i);
   #define opAII(n, o, i, j) case n: return op_##o(i, j);
   #define opM(  n, o      ) case n: return r.p.m ? op_##o##_b() : op_##o##_w();
-  #define opMF( n, o, f   ) case n: return r.p.m ? op_##o##_b(&R65816::op_##f##_b) : op_##o##_w(&R65816::op_##f##_w);
-  #define opMFI(n, o, f, i) case n: return r.p.m ? op_##o##_b(&R65816::op_##f##_b, i) : op_##o##_w(&R65816::op_##f##_w, i);
+  #define opMF( n, o, f   ) case n: return r.p.m ? op_##o##_b(&WDC65816::op_##f##_b) : op_##o##_w(&WDC65816::op_##f##_w);
+  #define opMFI(n, o, f, i) case n: return r.p.m ? op_##o##_b(&WDC65816::op_##f##_b, i) : op_##o##_w(&WDC65816::op_##f##_w, i);
   #define opMI( n, o, i   ) case n: return r.p.m ? op_##o##_b(i) : op_##o##_w(i);
   #define opMII(n, o, i, j) case n: return r.p.m ? op_##o##_b(i, j) : op_##o##_w(i, j);
   #define opX(  n, o)       case n: return r.p.x ? op_##o##_b() : op_##o##_w();
-  #define opXF( n, o, f   ) case n: return r.p.x ? op_##o##_b(&R65816::op_##f##_b) : op_##o##_w(&R65816::op_##f##_w);
-  #define opXFI(n, o, f, i) case n: return r.p.x ? op_##o##_b(&R65816::op_##f##_b, i) : op_##o##_w(&R65816::op_##f##_w, i);
+  #define opXF( n, o, f   ) case n: return r.p.x ? op_##o##_b(&WDC65816::op_##f##_b) : op_##o##_w(&WDC65816::op_##f##_w);
+  #define opXFI(n, o, f, i) case n: return r.p.x ? op_##o##_b(&WDC65816::op_##f##_b, i) : op_##o##_w(&WDC65816::op_##f##_w, i);
   #define opXI( n, o, i   ) case n: return r.p.x ? op_##o##_b(i) : op_##o##_w(i);
   #define opXII(n, o, i, j) case n: return r.p.x ? op_##o##_b(i, j) : op_##o##_w(i, j);
 
diff --git a/higan/processor/r65816/r65816.cpp b/higan/processor/wdc65816/wdc65816.cpp
similarity index 85%
rename from higan/processor/r65816/r65816.cpp
rename to higan/processor/wdc65816/wdc65816.cpp
index e261a1d..64362dc 100644
--- a/higan/processor/r65816/r65816.cpp
+++ b/higan/processor/wdc65816/wdc65816.cpp
@@ -1,5 +1,5 @@
 #include <processor/processor.hpp>
-#include "r65816.hpp"
+#include "wdc65816.hpp"
 
 namespace Processor {
 
@@ -19,7 +19,7 @@ namespace Processor {
 #include "instructions-misc.cpp"
 #include "switch.cpp"
 
-auto R65816::interrupt() -> void {
+auto WDC65816::interrupt() -> void {
   read(r.pc.d);
   idle();
 N writeSP(r.pc.b);
@@ -41,7 +41,7 @@ N writeSP(r.pc.b);
 //  tcd, tcs, tdc, tsc, tsx, txs,
 //  inc, inx, iny, dec, dex, dey,
 //  asl, lsr, rol, ror, nop, xce.
-auto R65816::idleIRQ() -> void {
+auto WDC65816::idleIRQ() -> void {
   if(interruptPending()) {
     //modify I/O cycle to bus read cycle, do not increment PC
     read(r.pc.d);
@@ -50,19 +50,19 @@ auto R65816::idleIRQ() -> void {
   }
 }
 
-auto R65816::idle2() -> void {
+auto WDC65816::idle2() -> void {
   if(r.d.l != 0x00) {
     idle();
   }
 }
 
-auto R65816::idle4(uint16 x, uint16 y) -> void {
+auto WDC65816::idle4(uint16 x, uint16 y) -> void {
   if(!r.p.x || (x & 0xff00) != (y & 0xff00)) {
     idle();
   }
 }
 
-auto R65816::idle6(uint16 addr) -> void {
+auto WDC65816::idle6(uint16 addr) -> void {
   if(r.e && (r.pc.w & 0xff00) != (addr & 0xff00)) {
     idle();
   }
diff --git a/higan/processor/r65816/r65816.hpp b/higan/processor/wdc65816/wdc65816.hpp
similarity index 98%
rename from higan/processor/r65816/r65816.hpp
rename to higan/processor/wdc65816/wdc65816.hpp
index c1827a6..023695f 100644
--- a/higan/processor/r65816/r65816.hpp
+++ b/higan/processor/wdc65816/wdc65816.hpp
@@ -6,12 +6,12 @@
 
 namespace Processor {
 
-struct R65816 {
+struct WDC65816 {
   #include "registers.hpp"
   #include "memory.hpp"
   #include "disassembler.hpp"
 
-  using fp = auto (R65816::*)() -> void;
+  using fp = auto (WDC65816::*)() -> void;
 
   virtual auto idle() -> void = 0;
   virtual auto read(uint24 addr) -> uint8 = 0;
@@ -22,7 +22,7 @@ struct R65816 {
 
   virtual auto readDisassembler(uint24 addr) -> uint8 { return 0; }
 
-  //r65816.cpp
+  //wdc65816.cpp
   alwaysinline auto idleIRQ() -> void;
   alwaysinline auto idle2() -> void;
   alwaysinline auto idle4(uint16 x, uint16 y) -> void;
diff --git a/higan/processor/z80/serialization.cpp b/higan/processor/z80/serialization.cpp
new file mode 100644
index 0000000..e621e87
--- /dev/null
+++ b/higan/processor/z80/serialization.cpp
@@ -0,0 +1,16 @@
+void Z80::serialize(serializer& s) {
+  s.integer(r.af.word); s.integer(r.af_.word);
+  s.integer(r.bc.word); s.integer(r.bc_.word);
+  s.integer(r.de.word); s.integer(r.de_.word);
+  s.integer(r.hl.word); s.integer(r.hl_.word);
+  s.integer(r.ix.word);
+  s.integer(r.iy.word);
+  s.integer(r.ir.word);
+  s.integer(r.sp);
+  s.integer(r.pc);
+
+  r.halt.serialize(s);
+  r.iff1.serialize(s);
+  r.iff2.serialize(s);
+  s.integer(r.im);
+}
diff --git a/higan/processor/z80/z80.cpp b/higan/processor/z80/z80.cpp
index 7c5117c..aded2bc 100644
--- a/higan/processor/z80/z80.cpp
+++ b/higan/processor/z80/z80.cpp
@@ -8,6 +8,7 @@ namespace Processor {
 #include "memory.cpp"
 #include "instruction.cpp"
 #include "instructions.cpp"
+#include "serialization.cpp"
 
 auto Z80::power() -> void {
 }
diff --git a/higan/processor/z80/z80.hpp b/higan/processor/z80/z80.hpp
index 3942ed3..339ca59 100644
--- a/higan/processor/z80/z80.hpp
+++ b/higan/processor/z80/z80.hpp
@@ -186,6 +186,8 @@ struct Z80 {
   auto disassembleCB(uint16 pc, uint8 prefix, uint8 code) -> string;
   auto disassembleED(uint16 pc, uint8 prefix, uint8 code) -> string;
 
+  auto serialize(serializer&) -> void;
+
   struct Registers {
     union Pair {
       Pair() : word(0) {}
diff --git a/higan/resource/resource.bml b/higan/resource/resource.bml
index 17dae5a..a2fdecb 100644
--- a/higan/resource/resource.bml
+++ b/higan/resource/resource.bml
@@ -5,3 +5,8 @@ namespace name=Resource
     binary name=CrosshairRed file=sprite/crosshair-red.png
     binary name=CrosshairGreen file=sprite/crosshair-green.png
     binary name=CrosshairBlue file=sprite/crosshair-blue.png
+    binary name=CrosshairTurbo file=sprite/crosshair-turbo.png
+    binary name=CrosshairRedSmall file=sprite/crosshair-red-small.png
+    binary name=CrosshairGreenSmall file=sprite/crosshair-green-small.png
+    binary name=CrosshairBlueSmall file=sprite/crosshair-blue-small.png
+    binary name=CrosshairTurboSmall file=sprite/crosshair-turbo-small.png
diff --git a/higan/resource/resource.cpp b/higan/resource/resource.cpp
index 71a6b93..12a3c69 100644
--- a/higan/resource/resource.cpp
+++ b/higan/resource/resource.cpp
@@ -2528,6 +2528,176 @@ const nall::vector<uint8_t> higan = {  //size: 80706
   103,97,110,47,108,111,103,111,47,104,105,103,97,110,46,115,118,103,214,196,144,254,0,0,0,0,73,69,78,68,174,66,
   96,130,
 };
+const nall::vector<uint8_t> higan = {  //size: 5353
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,1,0,0,0,0,96,8,6,0,0,0,242,241,172,
+  136,0,0,20,176,73,68,65,84,120,94,237,157,11,148,20,213,157,198,63,121,137,188,149,103,16,20,69,16,20,121,8,
+  8,190,199,229,161,172,144,25,4,21,34,65,36,8,232,194,113,34,174,202,137,102,198,160,184,138,138,138,10,70,215,81,
+  241,17,31,48,34,65,226,186,202,250,138,27,209,176,198,163,36,49,66,212,227,122,212,77,200,234,49,174,162,231,238,119,
+  187,170,166,91,248,247,173,91,221,213,221,213,61,183,206,249,125,93,117,235,254,255,247,78,79,221,175,110,221,30,26,40,
+  165,28,5,128,91,75,210,165,247,177,24,49,120,26,38,141,191,17,181,83,31,194,205,51,159,194,134,217,207,99,219,188,
+  87,241,69,117,3,150,72,177,14,71,177,16,11,29,118,232,1,78,250,13,158,133,154,227,234,176,112,194,42,212,79,93,
+  143,198,233,27,177,125,230,179,248,235,133,59,161,46,254,43,212,101,127,135,186,252,75,168,165,95,65,253,228,107,168,43,
+  118,67,93,249,45,212,252,215,177,91,202,235,112,20,11,177,208,145,134,219,225,189,70,225,228,97,23,97,78,213,173,88,
+  126,106,3,238,153,242,56,182,84,111,192,215,179,182,226,155,133,31,66,45,250,20,106,241,95,160,46,226,96,175,221,5,
+  245,227,255,133,90,242,25,212,37,159,67,253,243,23,217,13,96,193,111,117,19,114,187,14,71,49,16,11,155,11,220,218,
+  181,239,137,30,93,71,162,234,200,11,48,123,100,29,46,173,90,131,134,241,15,224,217,73,235,176,99,202,38,168,31,254,
+  30,234,188,247,160,126,244,62,212,188,15,160,206,231,128,95,240,223,80,11,63,130,186,224,99,168,127,250,196,25,128,163,
+  124,17,11,43,9,110,7,119,29,133,209,7,159,129,154,225,245,168,27,115,35,110,59,126,53,26,79,252,87,124,124,218,
+  38,124,89,253,50,212,217,111,67,205,216,14,53,243,15,80,231,252,17,106,214,59,28,248,239,66,157,187,3,106,14,167,
+  241,206,0,28,149,138,88,88,78,112,235,64,134,31,56,21,211,7,44,194,162,161,203,176,114,228,45,216,120,204,106,252,
+  118,236,207,241,245,36,14,240,211,127,3,53,229,117,168,106,14,184,154,109,80,83,223,128,154,246,59,168,233,111,66,157,
+  249,150,51,0,71,243,69,44,76,18,220,58,183,239,143,35,59,143,198,184,131,23,162,118,224,82,92,127,196,213,184,127,
+  232,45,216,118,244,106,124,50,230,65,168,83,158,135,26,247,2,212,248,23,161,38,112,192,159,250,107,168,211,94,129,154,
+  196,129,127,250,171,80,147,183,58,3,112,56,36,196,194,98,194,173,13,233,215,101,28,38,247,156,129,185,125,23,163,190,
+  127,61,30,27,112,53,94,62,124,57,62,25,190,22,223,142,126,2,106,236,102,168,99,159,134,58,254,223,160,78,120,6,
+  234,196,103,161,78,126,14,170,106,139,51,0,135,35,87,196,194,184,225,214,171,85,111,28,123,192,25,152,211,115,1,234,
+  123,95,140,53,125,175,196,150,126,87,225,163,67,175,195,238,35,127,1,117,212,227,80,195,214,67,13,111,132,26,177,1,
+  106,228,147,80,163,54,66,141,222,4,53,230,41,103,0,14,71,33,16,11,163,192,173,53,233,210,106,0,198,180,159,128,
+  25,157,207,66,109,215,197,104,232,182,4,155,123,46,197,182,222,63,131,58,232,86,168,254,247,67,29,182,22,106,0,167,
+  236,135,63,4,53,232,97,168,193,143,64,29,249,40,212,144,199,104,0,235,156,1,56,28,197,70,44,220,19,110,221,208,
+  17,3,219,28,139,154,182,103,226,178,118,115,112,83,199,11,209,216,105,49,118,238,127,57,254,214,253,58,168,158,183,67,
+  125,111,13,84,239,159,67,245,185,11,170,239,221,28,248,247,64,245,107,128,58,228,62,103,0,206,0,28,73,36,189,3,
+  12,195,32,76,104,49,17,243,91,206,196,202,214,115,177,174,205,124,188,210,246,2,124,221,238,10,124,219,241,122,168,78,
+  55,65,117,89,9,181,255,205,80,7,240,174,222,109,21,84,247,219,160,122,220,1,213,107,181,51,0,103,0,142,114,3,
+  168,198,146,125,22,96,119,139,171,160,90,45,131,106,125,53,84,155,229,80,109,175,133,218,239,95,160,218,113,224,119,88,
+  1,213,241,6,103,0,206,0,28,149,6,192,193,191,79,61,84,11,62,171,59,3,112,6,208,44,208,19,95,27,168,149,
+  14,176,16,202,25,128,51,128,102,131,52,208,77,80,43,25,103,0,206,0,236,144,6,71,38,212,178,64,234,187,9,106,
+  37,83,145,6,112,18,243,140,99,221,138,48,0,233,162,204,6,53,118,164,118,76,80,19,141,212,103,19,212,74,166,172,
+  13,224,4,150,253,227,53,80,63,157,6,117,239,8,168,231,91,121,124,197,95,220,123,45,210,199,235,15,129,90,115,50,
+  212,165,23,208,8,216,191,26,154,65,98,13,96,207,11,48,31,168,121,35,229,53,65,77,52,82,159,77,80,43,153,130,
+  25,192,216,90,14,134,113,80,15,30,4,245,194,126,80,219,248,102,102,242,92,39,168,135,251,113,80,76,224,96,102,187,
+  182,6,112,220,175,120,151,103,159,86,114,64,111,99,222,189,126,97,22,252,166,3,212,138,233,28,252,52,160,196,24,128,
+  208,207,216,160,230,132,148,203,6,106,98,145,250,107,130,90,201,20,196,0,230,157,14,245,127,210,155,153,133,207,246,225,
+  244,156,134,17,102,0,147,216,167,245,52,141,221,66,142,92,208,237,222,89,69,3,96,59,37,51,0,161,95,5,131,26,
+  9,41,135,13,212,196,34,245,215,4,181,146,41,136,1,60,208,151,185,165,55,211,192,3,135,101,55,128,227,248,232,112,
+  203,152,104,166,18,133,247,219,67,93,124,101,51,48,0,13,213,26,41,222,6,106,98,145,250,107,130,90,201,36,198,0,
+  54,245,144,13,224,204,75,161,182,231,56,213,143,194,55,228,14,206,92,102,242,113,192,25,128,143,20,111,3,53,177,72,
+  253,53,65,173,100,18,107,0,35,184,95,55,177,112,119,253,108,60,112,10,212,15,104,2,206,0,136,20,111,3,53,177,
+  72,253,53,65,173,100,18,105,0,35,239,135,90,59,68,174,87,12,86,204,114,6,144,66,138,183,129,154,88,164,254,154,
+  160,86,50,137,51,128,145,247,66,253,251,65,114,157,98,161,31,7,46,186,198,25,64,10,41,135,9,106,162,145,250,108,
+  130,90,201,36,202,0,70,112,240,63,147,67,108,33,120,107,127,168,153,175,57,3,16,115,152,160,38,26,169,207,38,168,
+  149,76,98,12,224,233,78,188,243,39,100,240,7,172,56,55,65,6,64,53,34,197,72,80,115,66,202,149,9,181,44,144,
+  250,110,130,90,201,36,198,0,146,200,95,200,217,47,150,216,0,168,145,145,242,4,80,155,53,210,123,98,130,90,201,56,
+  3,8,225,234,11,75,104,0,212,188,40,68,206,114,71,122,79,76,80,43,25,103,0,33,252,186,7,31,3,222,45,83,
+  3,8,136,59,95,57,147,249,254,218,64,173,100,202,218,0,244,63,250,217,69,94,107,231,189,254,221,47,143,19,221,198,
+  204,245,37,48,0,170,163,0,72,239,181,9,106,37,83,150,6,240,210,254,28,92,51,160,78,98,251,199,55,66,85,61,
+  11,117,226,147,80,167,220,203,129,121,1,212,115,223,147,227,114,101,249,2,103,0,21,131,244,94,155,160,86,50,101,101,
+  0,127,106,207,233,248,124,239,159,4,155,190,15,96,34,89,122,14,212,223,132,28,185,240,200,49,206,0,18,131,244,94,
+  101,66,53,34,197,152,160,22,28,169,221,108,80,227,164,108,12,160,177,63,148,254,111,192,162,124,35,208,121,252,185,190,
+  22,114,69,101,107,23,168,185,127,110,198,6,32,245,79,130,90,16,164,182,108,160,238,133,84,207,4,181,32,72,109,69,
+  133,154,47,137,55,0,253,79,127,111,27,203,193,191,41,183,175,4,187,110,138,156,55,10,31,144,217,219,155,169,1,72,
+  125,51,65,141,13,41,127,84,168,121,229,164,198,138,212,70,190,80,115,37,209,6,160,255,36,247,199,103,67,29,195,193,
+  159,235,119,2,78,96,204,142,125,229,252,81,168,126,180,200,6,160,161,150,28,169,95,38,168,121,35,229,205,23,106,78,
+  185,169,177,32,229,142,27,106,84,18,109,0,245,19,115,251,78,192,61,191,20,244,250,106,57,127,20,106,249,126,20,221,
+  0,52,212,146,34,245,201,4,53,47,164,156,113,65,21,203,77,80,243,70,202,91,40,168,81,72,172,1,220,118,12,212,
+  200,13,241,24,192,233,236,147,158,77,72,237,216,114,89,93,137,12,64,67,45,25,82,127,76,80,115,70,202,87,106,168,
+  57,35,229,43,6,84,91,18,105,0,27,15,134,58,250,137,240,47,5,181,53,128,73,44,127,187,141,220,150,45,87,94,
+  86,66,3,208,80,75,130,212,23,19,212,156,145,242,149,26,106,206,72,249,138,5,213,134,196,25,192,103,100,24,115,216,
+  124,43,176,173,1,232,175,5,95,59,84,110,207,150,219,207,44,177,1,4,80,139,138,212,7,19,212,156,144,114,37,1,
+  106,78,72,185,138,13,53,140,196,25,128,254,139,190,163,238,143,223,0,86,77,144,219,179,37,49,6,16,64,45,10,82,
+  219,38,168,145,145,242,36,5,106,100,164,60,54,80,179,34,213,15,131,26,70,179,49,128,75,231,203,237,217,146,56,3,
+  200,132,90,48,164,246,76,80,35,35,229,73,10,212,72,72,57,194,160,90,35,197,155,160,154,112,6,96,73,162,13,32,
+  128,26,59,82,59,38,168,145,144,114,68,129,186,23,82,189,92,161,70,66,202,97,130,26,25,41,79,54,168,38,156,1,
+  88,82,22,6,16,64,141,13,41,191,9,106,36,164,28,54,80,67,145,226,162,66,181,70,138,55,65,205,25,41,95,54,
+  168,217,112,6,96,73,89,25,64,0,53,111,164,188,38,168,145,144,114,132,65,181,70,138,143,2,213,26,41,62,27,212,
+  188,144,114,102,131,154,13,103,0,150,148,165,1,104,168,121,33,229,52,65,181,70,138,15,131,26,25,41,143,45,84,107,
+  164,248,108,80,243,66,202,153,13,106,54,156,1,88,82,182,6,16,64,205,9,41,151,9,170,53,82,124,24,212,156,144,
+  114,217,64,181,66,138,53,65,205,27,41,175,4,53,27,206,0,44,41,123,3,208,80,35,35,229,49,65,181,70,138,55,
+  65,205,11,41,103,24,84,43,164,216,108,80,99,65,202,157,13,170,132,51,0,75,10,102,0,204,158,66,104,179,32,80,
+  35,33,229,48,65,181,70,138,55,65,205,27,41,175,9,170,21,82,108,54,168,177,32,229,206,6,85,194,25,128,37,5,
+  55,0,141,208,110,65,160,90,35,197,155,160,90,33,197,134,65,205,27,41,175,9,170,21,82,108,54,168,177,32,229,206,
+  6,85,194,25,128,37,69,49,128,0,161,253,88,161,90,35,197,155,160,90,33,197,154,160,198,130,148,219,4,53,20,41,
+  46,105,80,37,156,1,88,82,84,3,200,68,232,75,44,80,173,144,98,77,80,173,144,98,77,80,99,65,202,109,130,26,
+  138,20,151,52,168,18,206,0,44,41,153,1,4,8,125,202,27,106,40,82,156,9,170,21,82,172,9,106,44,72,185,77,
+  80,67,145,226,146,6,85,194,25,128,37,37,55,128,0,161,111,57,67,13,69,138,51,65,181,66,138,53,65,141,5,41,
+  183,9,106,40,82,92,210,160,74,56,3,176,36,49,6,16,32,244,49,50,212,80,164,56,19,84,43,164,88,19,212,88,
+  144,114,155,160,134,34,197,37,13,170,132,51,0,75,18,103,0,1,66,95,35,65,53,34,197,152,160,90,33,197,154,160,
+  198,130,148,219,4,53,20,41,46,105,80,37,156,1,88,146,88,3,208,8,253,181,134,106,68,138,49,65,181,66,138,53,
+  65,141,5,41,183,9,106,40,82,92,146,160,102,195,25,128,37,137,54,0,141,208,103,43,168,70,164,24,19,84,43,164,
+  88,19,212,88,144,114,155,160,134,34,197,37,5,170,9,103,0,150,56,3,176,132,106,133,20,107,130,26,11,82,110,19,
+  212,80,164,56,19,212,164,224,12,192,146,196,27,128,70,232,119,40,84,35,82,140,9,170,21,82,172,9,106,44,72,185,
+  77,80,67,145,226,76,80,147,130,51,0,75,156,1,88,66,181,66,138,53,65,141,5,41,183,9,106,40,82,156,9,106,
+  82,112,6,96,137,51,0,75,168,86,72,177,97,80,243,70,202,107,130,26,138,20,103,130,154,20,156,1,88,226,12,192,
+  18,170,21,82,108,24,212,188,145,242,154,160,90,33,197,154,160,38,1,103,0,150,56,3,176,132,106,141,20,111,130,154,
+  23,82,206,48,168,86,72,177,38,168,73,192,25,128,37,137,55,0,161,207,161,80,67,145,226,76,80,173,145,226,195,160,
+  230,132,148,203,6,170,21,82,172,9,106,18,112,6,96,137,51,0,75,168,214,72,241,97,80,35,35,229,177,133,106,133,
+  20,27,6,181,212,56,3,176,36,209,6,32,244,215,10,106,40,82,156,9,170,53,82,188,13,84,107,164,248,40,80,173,
+  145,226,77,80,75,141,51,0,75,10,102,0,58,63,53,103,246,232,167,53,84,43,164,88,19,212,72,72,57,108,160,134,
+  34,197,69,133,106,141,20,31,6,53,118,34,228,119,6,96,73,65,13,32,19,106,40,123,198,228,2,213,10,41,214,4,
+  53,18,82,14,91,168,34,82,221,92,161,90,35,197,219,66,205,11,41,167,134,106,194,25,128,37,69,51,128,98,64,181,
+  70,138,55,65,141,132,148,35,73,80,35,33,229,136,2,213,10,41,86,130,106,194,25,128,37,206,0,44,161,70,70,202,
+  147,20,168,145,144,114,148,18,170,9,103,0,150,84,140,1,80,35,33,229,48,65,205,9,41,87,18,160,70,70,202,83,
+  42,168,38,156,1,88,82,17,6,64,141,140,148,199,4,53,39,164,92,133,130,42,150,75,80,115,66,202,85,10,168,38,
+  156,1,88,82,246,6,64,205,9,41,151,9,106,206,72,249,226,134,26,169,45,106,206,72,249,138,13,213,132,51,0,75,
+  202,218,0,168,57,35,229,51,65,205,11,41,103,92,80,35,183,67,205,11,41,103,49,161,154,112,6,96,73,89,26,0,
+  53,111,164,188,38,168,121,35,229,205,23,106,78,109,80,243,70,202,91,12,168,97,52,27,3,152,191,84,110,207,150,178,
+  51,0,106,44,72,185,77,80,99,65,202,157,11,84,17,169,174,4,53,54,164,252,133,130,106,67,65,12,224,146,147,152,
+  91,234,148,5,107,134,67,141,120,34,126,3,152,204,92,111,28,32,183,25,198,255,180,230,128,127,172,12,12,128,90,16,
+  164,182,36,168,177,35,181,99,3,53,20,41,46,19,106,65,144,218,138,3,106,84,10,98,0,7,222,9,245,15,115,161,
+  110,24,6,245,100,119,168,87,246,243,238,236,18,175,183,133,250,85,87,168,59,88,247,236,243,161,134,62,66,3,216,16,
+  191,1,76,121,157,199,255,193,129,184,0,234,23,108,235,165,142,80,59,57,176,165,62,125,216,18,234,229,78,80,191,28,
+  0,181,138,119,254,217,108,251,71,239,23,200,0,50,127,33,108,59,18,212,102,133,244,30,100,66,45,75,164,159,37,12,
+  106,28,20,196,0,250,220,5,213,247,110,168,131,238,129,234,215,0,117,8,233,119,59,95,89,239,80,214,235,207,122,3,
+  104,18,3,89,239,136,135,161,134,240,238,122,212,58,168,97,235,161,134,55,22,206,0,170,57,224,106,182,65,77,125,3,
+  106,218,239,120,252,159,80,223,103,76,245,75,44,99,220,25,140,153,198,178,179,88,239,135,239,66,157,187,3,106,206,78,
+  168,243,222,43,146,1,56,28,69,166,56,6,112,31,7,61,159,235,15,91,203,129,255,32,212,225,15,65,13,226,192,31,
+  204,187,253,145,143,150,206,0,166,191,9,117,230,91,156,121,188,13,53,99,59,212,204,63,64,157,243,71,168,89,239,56,
+  3,112,52,15,156,1,56,3,168,40,80,135,69,168,199,78,190,142,207,114,190,27,185,130,204,145,206,23,11,182,127,24,
+  251,217,152,234,43,95,165,58,54,248,121,222,36,43,164,243,97,0,11,240,149,51,0,103,0,149,2,7,194,139,68,113,
+  96,156,32,158,175,195,37,169,243,245,120,69,58,95,44,216,254,54,191,31,91,200,42,169,142,13,252,121,230,249,121,114,
+  52,128,106,44,217,103,1,118,183,184,202,25,128,51,128,242,135,3,225,243,212,128,168,67,7,241,124,29,6,145,122,50,
+  68,58,95,12,216,246,9,254,160,125,70,58,31,5,230,88,229,255,188,211,165,243,97,164,119,128,97,124,107,38,180,152,
+  136,249,45,103,98,101,235,185,88,215,102,1,94,110,187,24,187,218,253,4,95,117,184,198,25,128,51,128,226,195,11,187,
+  11,209,119,237,85,124,173,33,163,136,30,192,123,13,112,150,13,73,13,6,125,119,213,245,234,177,146,92,203,253,94,25,
+  117,102,144,239,196,115,127,22,75,116,254,75,72,240,136,48,57,227,124,159,84,153,206,87,135,42,50,94,31,103,156,215,
+  113,147,73,63,214,89,230,231,170,10,206,103,194,242,211,120,94,79,253,83,179,16,30,103,230,25,207,178,107,201,106,238,
+  215,146,46,25,231,198,18,221,239,94,212,21,122,63,85,94,143,173,68,27,192,97,126,189,121,126,189,212,113,24,98,225,
+  158,112,235,136,182,232,219,114,32,106,218,78,195,101,237,230,224,166,142,23,162,177,243,197,120,123,255,165,248,184,27,103,
+  14,61,105,4,206,0,156,1,196,137,190,136,121,41,127,148,186,192,211,124,144,122,205,24,28,25,245,245,64,214,117,244,
+  115,245,110,127,95,211,116,167,229,254,119,226,185,223,224,215,9,240,218,243,7,38,95,199,242,216,155,85,120,232,188,186,
+  206,46,255,124,23,191,92,79,229,119,249,251,154,93,60,183,183,73,213,99,123,70,29,141,94,175,104,197,215,135,253,99,
+  157,63,104,239,77,158,107,235,199,173,245,203,188,71,28,254,76,126,220,151,196,235,139,103,30,94,157,44,51,160,61,17,
+  11,163,192,173,5,105,141,78,24,221,246,4,204,232,124,22,106,187,46,70,67,183,37,216,220,115,41,182,245,254,25,141,
+  128,179,5,103,0,206,0,162,194,11,89,15,42,125,65,235,59,111,55,190,174,246,143,223,201,82,95,223,241,245,249,207,
+  89,95,223,233,39,251,199,59,83,231,189,187,103,83,60,143,167,251,199,219,185,223,143,232,193,254,105,170,204,187,163,235,
+  1,246,142,127,172,239,242,58,62,184,123,167,76,133,101,250,174,173,143,53,203,120,172,77,43,120,12,233,23,244,45,128,
+  101,125,120,46,200,169,103,51,122,198,81,155,58,246,6,174,158,241,180,229,190,103,20,156,49,164,226,188,133,190,160,175,
+  167,145,33,100,184,95,166,205,32,51,135,213,224,215,136,133,113,195,173,87,171,222,56,246,128,51,48,167,231,2,212,247,
+  190,24,107,250,94,137,45,135,92,131,63,31,122,35,62,27,204,25,194,81,143,59,3,112,164,225,69,60,200,191,160,63,
+  224,126,43,191,44,24,208,143,237,89,63,117,62,189,0,88,155,58,222,227,89,155,199,53,254,113,42,94,151,167,142,89,
+  158,145,35,24,156,122,96,234,233,186,174,223,180,96,200,50,253,41,131,46,75,45,186,241,56,88,84,220,156,145,67,207,
+  4,190,228,185,84,191,51,97,89,7,191,254,167,77,101,233,54,135,103,148,121,230,231,25,89,16,179,155,251,131,154,234,
+  164,23,0,189,89,77,196,193,175,17,11,139,9,183,86,164,123,187,33,56,189,219,247,49,183,239,98,212,247,231,47,104,
+  224,114,60,63,248,6,236,28,122,55,190,25,69,115,112,6,208,188,72,93,248,222,69,189,186,169,44,152,1,112,208,101,
+  214,205,56,175,239,188,122,144,164,6,65,198,0,241,6,171,247,124,222,20,207,253,239,44,24,242,181,201,116,252,227,203,
+  253,243,151,235,99,63,102,179,95,150,90,116,227,254,99,254,113,202,68,248,170,103,0,58,199,214,32,38,19,158,15,76,
+  105,163,127,28,204,74,62,250,78,61,239,49,70,231,29,158,17,243,157,69,67,30,123,11,128,204,229,191,110,201,60,111,
+  131,88,152,36,184,181,110,211,17,3,247,237,129,113,7,47,68,237,192,165,184,254,136,171,113,255,208,91,176,237,232,213,
+  248,100,12,31,41,156,1,84,30,188,232,235,253,139,122,153,127,172,7,167,126,222,213,131,98,175,207,248,89,214,180,0,
+  216,84,150,94,33,159,229,31,123,3,197,91,196,211,211,123,93,159,167,82,241,250,216,27,220,254,231,242,124,245,214,7,
+  104,36,126,157,42,255,188,46,243,22,221,210,119,111,111,77,33,253,88,113,151,62,222,19,158,247,166,234,233,53,134,192,
+  48,82,166,227,151,5,3,62,120,84,9,166,247,169,247,162,169,94,122,1,80,255,236,193,218,133,184,248,152,13,177,176,
+  156,224,214,129,12,63,112,42,166,15,88,132,69,67,151,97,229,200,91,176,113,204,157,216,122,220,125,216,53,145,51,133,
+  73,47,57,3,40,55,120,33,7,11,122,122,128,233,197,45,253,108,30,24,128,105,1,176,105,224,113,223,251,172,221,255,
+  200,143,251,222,34,93,122,1,48,88,180,187,139,232,41,183,183,112,152,30,156,122,229,95,159,215,3,77,175,47,232,25,
+  67,122,209,45,189,0,216,180,38,193,125,111,29,130,143,10,65,89,38,60,231,45,230,249,159,50,240,85,63,239,7,51,
+  17,189,122,175,31,41,244,207,170,103,50,193,243,127,16,147,126,84,241,12,43,179,47,65,95,35,205,2,196,194,74,130,
+  91,247,46,3,48,172,235,49,168,25,254,83,212,141,185,17,183,29,191,26,141,85,15,98,199,169,79,226,243,201,52,8,
+  103,0,201,131,23,116,122,33,204,123,158,214,51,2,189,16,182,93,172,175,63,26,243,6,201,194,140,50,111,69,93,15,
+  22,111,241,77,231,106,138,103,89,240,60,175,121,133,4,51,132,96,112,234,233,121,240,41,132,94,213,95,200,87,61,88,
+  83,207,251,60,14,102,4,15,55,229,76,175,43,140,13,202,50,225,57,111,49,175,14,221,154,202,60,243,202,252,4,225,
+  29,150,165,63,134,244,98,180,33,244,201,136,9,22,0,131,190,232,69,210,192,72,154,114,135,33,22,54,23,184,181,68,
+  87,116,220,183,51,170,6,204,198,236,145,117,184,180,106,13,26,198,63,128,103,39,173,195,142,41,155,104,4,191,119,6,
+  80,74,120,49,235,213,249,189,238,248,113,161,115,19,253,57,191,94,104,243,102,25,25,11,105,220,215,230,161,251,16,105,
+  113,77,34,149,199,31,224,89,207,103,12,242,98,32,22,58,210,112,59,188,215,40,156,60,236,34,204,169,186,21,203,79,
+  109,192,61,83,30,199,150,105,79,99,215,57,175,226,203,121,127,114,6,80,142,112,160,5,83,111,253,177,158,126,214,247,
+  22,221,248,184,33,213,207,23,230,213,159,243,7,127,131,144,250,148,34,9,136,133,14,59,184,181,39,221,251,156,140,154,
+  209,75,176,112,194,42,212,79,93,143,198,179,159,198,127,205,122,1,31,158,255,22,205,128,230,144,205,0,230,191,134,175,
+  164,188,142,194,195,65,168,239,248,250,217,95,63,223,235,71,141,205,44,43,216,63,16,98,126,61,141,223,202,54,244,95,
+  25,238,245,241,96,169,16,11,29,249,195,109,31,210,186,125,15,28,117,224,24,76,26,127,35,106,167,62,132,155,103,62,
+  133,13,179,159,199,182,121,175,226,139,234,6,44,145,98,29,142,226,160,240,255,212,184,2,250,100,230,1,225,0,0,0,
+  0,73,69,78,68,174,66,96,130,
+};
 }
 namespace Sprite {
 const nall::vector<uint8_t> CrosshairRed = {  //size: 342
@@ -2569,5 +2739,50 @@ const nall::vector<uint8_t> CrosshairBlue = {  //size: 332
   239,5,0,215,26,167,231,123,124,103,130,53,221,140,94,113,55,100,131,9,242,151,139,31,79,50,234,237,105,206,30,22,
   0,0,0,0,73,69,78,68,174,66,96,130,
 };
+const nall::vector<uint8_t> CrosshairTurbo = {  //size: 322
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,32,0,0,0,32,8,6,0,0,0,115,122,122,
+  244,0,0,1,9,73,68,65,84,88,71,205,151,107,18,130,48,12,132,185,147,119,242,78,158,182,178,73,131,105,161,47,
+  154,20,191,153,136,147,77,55,43,252,193,109,39,92,148,7,197,61,33,124,84,189,83,209,8,242,213,123,208,99,73,7,
+  192,144,103,0,21,2,61,150,36,128,12,160,94,166,33,200,47,241,63,5,208,34,134,61,2,100,33,208,103,153,161,198,
+  49,136,138,61,82,239,67,62,218,23,189,88,151,144,72,135,26,131,157,228,94,221,126,195,7,10,152,248,220,49,152,94,
+  170,25,125,28,86,143,47,161,215,212,101,185,208,50,119,93,46,84,3,196,90,134,44,91,186,84,56,110,183,92,169,187,
+  152,255,88,254,104,136,236,186,132,218,175,173,105,38,180,110,183,235,227,232,53,119,9,49,106,106,30,226,142,217,116,0,
+  49,152,50,217,25,246,161,225,253,195,234,54,230,94,69,63,18,245,187,155,58,52,3,7,80,190,232,197,58,72,222,86,
+  179,65,11,126,1,212,30,244,89,198,192,227,255,11,16,64,133,64,143,37,51,146,229,229,0,49,4,122,44,153,145,44,
+  71,161,199,18,127,201,203,131,85,123,70,216,182,47,167,247,142,26,210,103,109,186,0,0,0,0,73,69,78,68,174,66,
+  96,130,
+};
+const nall::vector<uint8_t> CrosshairRedSmall = {  //size: 175
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,
+  97,0,0,0,118,73,68,65,84,56,79,157,140,11,14,192,48,8,66,189,255,165,183,74,70,131,171,246,247,18,107,5,
+  212,38,60,82,71,96,169,61,189,168,185,185,34,44,105,231,223,67,21,26,98,80,251,244,72,101,14,115,145,75,141,93,
+  45,15,122,137,30,60,209,1,4,17,251,172,245,247,190,25,12,66,3,179,232,193,19,189,147,30,217,212,64,101,12,115,
+  145,3,106,50,160,125,186,76,16,98,80,59,255,30,90,17,150,188,168,185,121,194,245,226,1,102,47,106,193,169,87,229,
+  12,178,159,0,0,0,0,73,69,78,68,174,66,96,130,
+};
+const nall::vector<uint8_t> CrosshairGreenSmall = {  //size: 170
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,
+  97,0,0,0,113,73,68,65,84,56,79,157,140,137,13,192,48,8,3,217,127,170,110,214,39,200,194,36,128,160,39,69,
+  4,63,72,193,77,111,132,150,46,122,131,67,190,196,211,14,165,112,8,65,158,229,145,204,60,247,228,72,100,116,181,80,
+  212,221,116,239,109,121,21,56,140,157,223,238,233,190,56,132,23,11,227,111,68,249,80,236,106,139,204,56,247,228,192,7,
+  155,8,240,44,203,64,67,8,242,108,148,129,47,89,177,85,102,126,23,7,136,60,58,85,158,68,189,62,255,165,0,0,
+  0,0,73,69,78,68,174,66,96,130,
+};
+const nall::vector<uint8_t> CrosshairBlueSmall = {  //size: 175
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,
+  97,0,0,0,118,73,68,65,84,56,79,157,140,139,13,192,32,8,68,29,209,253,151,177,133,120,230,16,176,216,151,16,
+  229,62,180,3,131,230,10,45,245,62,214,64,19,243,11,83,226,151,14,165,112,8,65,126,143,71,50,211,237,217,145,200,
+  168,106,113,80,134,116,227,237,121,21,56,140,157,103,247,230,174,56,225,101,133,241,23,113,18,229,227,35,69,77,201,12,
+  183,103,7,4,54,17,224,247,88,6,26,66,144,223,74,25,152,18,21,75,101,230,119,241,130,214,30,28,30,197,119,250,
+  76,119,142,0,0,0,0,73,69,78,68,174,66,96,130,
+};
+const nall::vector<uint8_t> CrosshairTurboSmall = {  //size: 188
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,16,0,0,0,16,8,6,0,0,0,31,243,255,
+  97,0,0,0,131,73,68,65,84,56,79,181,146,1,14,128,48,8,3,247,39,255,228,159,124,237,4,42,204,49,107,212,
+  197,75,48,210,118,53,81,139,80,211,220,113,153,173,117,107,163,59,228,1,154,107,198,138,81,13,86,16,30,47,240,192,
+  66,10,68,63,151,168,6,11,196,97,27,152,30,176,61,60,201,169,6,171,199,12,11,31,247,166,142,154,235,148,28,204,
+  251,255,228,39,230,157,98,33,185,124,122,7,83,95,97,250,63,64,193,169,68,53,88,65,119,152,23,36,35,65,115,190,
+  116,34,225,77,246,9,165,236,9,154,231,229,206,54,206,157,0,0,0,0,73,69,78,68,174,66,96,130,
+};
 }
 }
diff --git a/higan/resource/resource.hpp b/higan/resource/resource.hpp
index 533006c..6f099a4 100644
--- a/higan/resource/resource.hpp
+++ b/higan/resource/resource.hpp
@@ -1,10 +1,16 @@
 namespace Resource {
 namespace Logo {
 extern const nall::vector<uint8_t> higan;
+extern const nall::vector<uint8_t> higan;
 }
 namespace Sprite {
 extern const nall::vector<uint8_t> CrosshairRed;
 extern const nall::vector<uint8_t> CrosshairGreen;
 extern const nall::vector<uint8_t> CrosshairBlue;
+extern const nall::vector<uint8_t> CrosshairTurbo;
+extern const nall::vector<uint8_t> CrosshairRedSmall;
+extern const nall::vector<uint8_t> CrosshairGreenSmall;
+extern const nall::vector<uint8_t> CrosshairBlueSmall;
+extern const nall::vector<uint8_t> CrosshairTurboSmall;
 }
 }
diff --git a/higan/sfc-balanced/GNUmakefile b/higan/sfc-balanced/GNUmakefile
new file mode 100644
index 0000000..6f5c121
--- /dev/null
+++ b/higan/sfc-balanced/GNUmakefile
@@ -0,0 +1,54 @@
+processors += wdc65816 spc700 arm gsu hg51b upd96050
+
+objects += sfc-balanced-interface sfc-balanced-system sfc-balanced-controller
+objects += sfc-balanced-cartridge sfc-balanced-memory
+objects += sfc-balanced-cpu sfc-balanced-smp sfc-balanced-dsp sfc-balanced-ppu
+objects += sfc-balanced-expansion sfc-balanced-satellaview sfc-balanced-21fx
+objects += sfc-balanced-icd2 sfc-balanced-mcc sfc-balanced-nss sfc-balanced-event
+objects += sfc-balanced-sa1 sfc-balanced-superfx
+objects += sfc-balanced-armdsp sfc-balanced-hitachidsp sfc-balanced-necdsp
+objects += sfc-balanced-epsonrtc sfc-balanced-sharprtc
+objects += sfc-balanced-spc7110 sfc-balanced-sdd1
+objects += sfc-balanced-obc1 sfc-balanced-msu1
+objects += sfc-balanced-bsmemory sfc-balanced-sufamiturbo
+
+flags += -DPROFILE_BALANCED
+
+obj/sfc-balanced-interface.o:   sfc-balanced/interface/interface.cpp $(call rwildcard,sfc-balanced/interface)
+obj/sfc-balanced-system.o:      sfc-balanced/system/system.cpp $(call rwildcard,sfc-balanced/system/)
+obj/sfc-balanced-controller.o:  sfc-balanced/controller/controller.cpp $(call rwildcard,sfc-balanced/controller/)
+obj/sfc-balanced-cartridge.o:   sfc-balanced/cartridge/cartridge.cpp $(call rwildcard,sfc-balanced/cartridge/)
+obj/sfc-balanced-memory.o:      sfc-balanced/memory/memory.cpp $(call rwildcard,sfc-balanced/memory/)
+
+obj/sfc-balanced-cpu.o:         sfc-balanced/cpu/cpu.cpp $(call rwildcard,sfc-balanced/cpu/)
+obj/sfc-balanced-smp.o:         sfc-balanced/smp/smp.cpp $(call rwildcard,sfc-balanced/smp/)
+obj/sfc-balanced-dsp.o:         sfc-balanced/dsp/dsp.cpp $(call rwildcard,sfc-balanced/dsp/)
+obj/sfc-balanced-ppu.o:         sfc-balanced/ppu/ppu.cpp $(call rwildcard,sfc-balanced/ppu/)
+
+obj/sfc-balanced-expansion.o:   sfc-balanced/expansion/expansion.cpp $(call rwildcard,sfc-balanced/expansion/)
+obj/sfc-balanced-satellaview.o: sfc-balanced/expansion/satellaview/satellaview.cpp $(call rwildcard,sfc-balanced/expansion/satellaview/)
+obj/sfc-balanced-21fx.o:        sfc-balanced/expansion/21fx/21fx.cpp $(call rwildcard,sfc-balanced/expansion/21fx/)
+
+obj/sfc-balanced-icd2.o:        sfc-balanced/coprocessor/icd2/icd2.cpp $(call rwildcard,sfc-balanced/coprocessor/icd2/)
+obj/sfc-balanced-mcc.o:         sfc-balanced/coprocessor/mcc/mcc.cpp $(call rwildcard,sfc-balanced/coprocessor/mcc/)
+obj/sfc-balanced-nss.o:         sfc-balanced/coprocessor/nss/nss.cpp $(call rwildcard,sfc-balanced/coprocessor/nss/)
+obj/sfc-balanced-event.o:       sfc-balanced/coprocessor/event/event.cpp $(call rwildcard,sfc-balanced/coprocessor/event/)
+
+obj/sfc-balanced-sa1.o:         sfc-balanced/coprocessor/sa1/sa1.cpp $(call rwildcard,sfc-balanced/coprocessor/sa1/)
+obj/sfc-balanced-superfx.o:     sfc-balanced/coprocessor/superfx/superfx.cpp $(call rwildcard,sfc-balanced/coprocessor/superfx/)
+
+obj/sfc-balanced-armdsp.o:      sfc-balanced/coprocessor/armdsp/armdsp.cpp $(call rwildcard,sfc-balanced/coprocessor/armdsp/)
+obj/sfc-balanced-hitachidsp.o:  sfc-balanced/coprocessor/hitachidsp/hitachidsp.cpp $(call rwildcard,sfc-balanced/coprocessor/hitachidsp/)
+obj/sfc-balanced-necdsp.o:      sfc-balanced/coprocessor/necdsp/necdsp.cpp $(call rwildcard,sfc-balanced/coprocessor/necdsp/)
+
+obj/sfc-balanced-epsonrtc.o:    sfc-balanced/coprocessor/epsonrtc/epsonrtc.cpp $(call rwildcard,sfc-balanced/coprocessor/epsonrtc/)
+obj/sfc-balanced-sharprtc.o:    sfc-balanced/coprocessor/sharprtc/sharprtc.cpp $(call rwildcard,sfc-balanced/coprocessor/sharprtc/)
+
+obj/sfc-balanced-spc7110.o:     sfc-balanced/coprocessor/spc7110/spc7110.cpp $(call rwildcard,sfc-balanced/coprocessor/spc7110/)
+obj/sfc-balanced-sdd1.o:        sfc-balanced/coprocessor/sdd1/sdd1.cpp $(call rwildcard,sfc-balanced/coprocessor/sdd1/)
+obj/sfc-balanced-obc1.o:        sfc-balanced/coprocessor/obc1/obc1.cpp $(call rwildcard,sfc-balanced/coprocessor/obc1/)
+
+obj/sfc-balanced-msu1.o:        sfc-balanced/coprocessor/msu1/msu1.cpp $(call rwildcard,sfc-balanced/coprocessor/msu1/)
+
+obj/sfc-balanced-bsmemory.o:    sfc-balanced/slot/bsmemory/bsmemory.cpp $(call rwildcard,sfc-balanced/slot/bsmemory/)
+obj/sfc-balanced-sufamiturbo.o: sfc-balanced/slot/sufamiturbo/sufamiturbo.cpp $(call rwildcard,sfc-balanced/slot/sufamiturbo/)
diff --git a/higan/sfc-balanced/cartridge/cartridge.cpp b/higan/sfc-balanced/cartridge/cartridge.cpp
new file mode 100644
index 0000000..3586b78
--- /dev/null
+++ b/higan/sfc-balanced/cartridge/cartridge.cpp
@@ -0,0 +1,138 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "load.cpp"
+#include "save.cpp"
+#include "serialization.cpp"
+Cartridge cartridge;
+
+auto Cartridge::manifest() const -> string {
+  string manifest = information.manifest.cartridge;
+  if(information.manifest.gameBoy) manifest.append("\n[[Game Boy]]\n\n", information.manifest.gameBoy);
+  if(information.manifest.bsMemory) manifest.append("\n[[BS Memory]]\n\n", information.manifest.bsMemory);
+  if(information.manifest.sufamiTurboA) manifest.append("\n[[Sufami Turbo - Slot A]]\n\n", information.manifest.sufamiTurboA);
+  if(information.manifest.sufamiTurboB) manifest.append("\n[[Sufami Turbo - Slot B]]\n\n", information.manifest.sufamiTurboB);
+  return manifest;
+}
+
+auto Cartridge::title() const -> string {
+  string title = information.title.cartridge;
+  if(information.title.gameBoy) title.append(" + ", information.title.gameBoy);
+  if(information.title.bsMemory) title.append(" + ", information.title.bsMemory);
+  if(information.title.sufamiTurboA) title.append(" + ", information.title.sufamiTurboA);
+  if(information.title.sufamiTurboB) title.append(" + ", information.title.sufamiTurboB);
+  return title;
+}
+
+auto Cartridge::load() -> bool {
+  information = Information();
+  has = Has();
+
+  if(auto pathID = interface->load(ID::SuperFamicom, "Super Famicom", "sfc")) {
+    information.pathID = pathID();
+  } else return false;
+
+  if(auto fp = interface->open(ID::SuperFamicom, "manifest.bml", File::Read, File::Required)) {
+    information.manifest.cartridge = fp->reads();
+  } else return false;
+  auto document = BML::unserialize(information.manifest.cartridge);
+  loadCartridge(document);
+
+  //Game Boy
+  if(cartridge.has.ICD2) {
+    information.sha256 = "";  //Game Boy cartridge not loaded yet: set later via loadGameBoy()
+  }
+
+  //BS Memory
+  else if(cartridge.has.MCC && cartridge.has.BSMemorySlot) {
+    information.sha256 = Hash::SHA256(bsmemory.memory.data(), bsmemory.memory.size()).digest();
+  }
+
+  //Sufami Turbo
+  else if(cartridge.has.SufamiTurboSlots) {
+    Hash::SHA256 sha;
+    sha.input(sufamiturboA.rom.data(), sufamiturboA.rom.size());
+    sha.input(sufamiturboB.rom.data(), sufamiturboB.rom.size());
+    information.sha256 = sha.digest();
+  }
+
+  //Super Famicom
+  else {
+    Hash::SHA256 sha;
+    //hash each ROM image that exists; any with size() == 0 is ignored by sha256_chunk()
+    sha.input(rom.data(), rom.size());
+    sha.input(mcc.rom.data(), mcc.rom.size());
+    sha.input(sa1.rom.data(), sa1.rom.size());
+    sha.input(superfx.rom.data(), superfx.rom.size());
+    sha.input(hitachidsp.rom.data(), hitachidsp.rom.size());
+    sha.input(spc7110.prom.data(), spc7110.prom.size());
+    sha.input(spc7110.drom.data(), spc7110.drom.size());
+    sha.input(sdd1.rom.data(), sdd1.rom.size());
+    //hash all firmware that exists
+    vector<uint8> buffer;
+    buffer = armdsp.firmware();
+    sha.input(buffer.data(), buffer.size());
+    buffer = hitachidsp.firmware();
+    sha.input(buffer.data(), buffer.size());
+    buffer = necdsp.firmware();
+    sha.input(buffer.data(), buffer.size());
+    //finalize hash
+    information.sha256 = sha.digest();
+  }
+
+  rom.writeProtect(true);
+  ram.writeProtect(false);
+  return true;
+}
+
+auto Cartridge::loadGameBoy() -> bool {
+  #if defined(SFC_SUPERGAMEBOY)
+  //invoked from ICD2::load()
+  information.sha256 = GameBoy::interface->sha256();
+  information.manifest.gameBoy = GameBoy::interface->manifest();
+  information.title.gameBoy = GameBoy::interface->title();
+  loadGameBoy(BML::unserialize(information.manifest.gameBoy));
+  return true;
+  #endif
+  return false;
+}
+
+auto Cartridge::loadBSMemory() -> bool {
+  if(auto fp = interface->open(bsmemory.pathID, "manifest.bml", File::Read, File::Required)) {
+    information.manifest.bsMemory = fp->reads();
+  } else return false;
+  loadBSMemory(BML::unserialize(information.manifest.bsMemory));
+  return true;
+}
+
+auto Cartridge::loadSufamiTurboA() -> bool {
+  if(auto fp = interface->open(sufamiturboA.pathID, "manifest.bml", File::Read, File::Required)) {
+    information.manifest.sufamiTurboA = fp->reads();
+  } else return false;
+  loadSufamiTurboA(BML::unserialize(information.manifest.sufamiTurboA));
+  return true;
+}
+
+auto Cartridge::loadSufamiTurboB() -> bool {
+  if(auto fp = interface->open(sufamiturboB.pathID, "manifest.bml", File::Read, File::Required)) {
+    information.manifest.sufamiTurboB = fp->reads();
+  } else return false;
+  loadSufamiTurboB(BML::unserialize(information.manifest.sufamiTurboB));
+  return true;
+}
+
+auto Cartridge::save() -> void {
+  saveCartridge(BML::unserialize(information.manifest.cartridge));
+  saveGameBoy(BML::unserialize(information.manifest.gameBoy));
+  saveBSMemory(BML::unserialize(information.manifest.bsMemory));
+  saveSufamiTurboA(BML::unserialize(information.manifest.sufamiTurboA));
+  saveSufamiTurboB(BML::unserialize(information.manifest.sufamiTurboB));
+}
+
+auto Cartridge::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+}
diff --git a/higan/sfc-balanced/cartridge/cartridge.hpp b/higan/sfc-balanced/cartridge/cartridge.hpp
new file mode 100644
index 0000000..22eda2f
--- /dev/null
+++ b/higan/sfc-balanced/cartridge/cartridge.hpp
@@ -0,0 +1,128 @@
+struct Cartridge {
+  enum class Region : uint { NTSC, PAL };
+
+  auto pathID() const -> uint { return information.pathID; }
+  auto sha256() const -> string { return information.sha256; }
+  auto region() const -> Region { return information.region; }
+  auto manifest() const -> string;
+  auto title() const -> string;
+
+  auto load() -> bool;
+  auto save() -> void;
+  auto unload() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  MappedRAM rom;
+  MappedRAM ram;
+
+  struct Information {
+    uint pathID = 0;
+    string sha256;
+    Region region = Region::NTSC;
+
+    struct Manifest {
+      string cartridge;
+      string gameBoy;
+      string bsMemory;
+      string sufamiTurboA;
+      string sufamiTurboB;
+    } manifest;
+
+    struct Title {
+      string cartridge;
+      string gameBoy;
+      string bsMemory;
+      string sufamiTurboA;
+      string sufamiTurboB;
+    } title;
+  } information;
+
+  struct Has {
+    boolean ICD2;
+    boolean MCC;
+    boolean NSSDIP;
+    boolean Event;
+    boolean SA1;
+    boolean SuperFX;
+    boolean ARMDSP;
+    boolean HitachiDSP;
+    boolean NECDSP;
+    boolean EpsonRTC;
+    boolean SharpRTC;
+    boolean SPC7110;
+    boolean SDD1;
+    boolean OBC1;
+    boolean MSU1;
+
+    boolean GameBoySlot;
+    boolean BSMemorySlot;
+    boolean SufamiTurboSlots;
+  } has;
+
+private:
+  //cartridge.cpp
+  auto loadGameBoy() -> bool;
+  auto loadBSMemory() -> bool;
+  auto loadSufamiTurboA() -> bool;
+  auto loadSufamiTurboB() -> bool;
+
+  //load.cpp
+  auto loadCartridge(Markup::Node) -> void;
+  auto loadGameBoy(Markup::Node) -> void;
+  auto loadBSMemory(Markup::Node) -> void;
+  auto loadSufamiTurboA(Markup::Node) -> void;
+  auto loadSufamiTurboB(Markup::Node) -> void;
+
+  auto loadROM(Markup::Node) -> void;
+  auto loadRAM(Markup::Node) -> void;
+  auto loadICD2(Markup::Node) -> void;
+  auto loadMCC(Markup::Node) -> void;
+  auto loadBSMemoryPack(Markup::Node) -> void;
+  auto loadSufamiTurbo(Markup::Node, bool slot) -> void;
+  auto loadNSS(Markup::Node) -> void;
+  auto loadEvent(Markup::Node) -> void;
+  auto loadSA1(Markup::Node) -> void;
+  auto loadSuperFX(Markup::Node) -> void;
+  auto loadARMDSP(Markup::Node) -> void;
+  auto loadHitachiDSP(Markup::Node, uint roms) -> void;
+  auto loadNECDSP(Markup::Node) -> void;
+  auto loadEpsonRTC(Markup::Node) -> void;
+  auto loadSharpRTC(Markup::Node) -> void;
+  auto loadSPC7110(Markup::Node) -> void;
+  auto loadSDD1(Markup::Node) -> void;
+  auto loadOBC1(Markup::Node) -> void;
+  auto loadMSU1(Markup::Node) -> void;
+
+  auto loadMemory(MappedRAM&, Markup::Node, bool required, maybe<uint> id = nothing) -> void;
+  auto loadMap(Markup::Node, SuperFamicom::Memory&) -> void;
+  auto loadMap(Markup::Node, const function<uint8 (uint24, uint8)>&, const function<void (uint24, uint8)>&) -> void;
+
+  //save.cpp
+  auto saveCartridge(Markup::Node) -> void;
+  auto saveGameBoy(Markup::Node) -> void;
+  auto saveBSMemory(Markup::Node) -> void;
+  auto saveSufamiTurboA(Markup::Node) -> void;
+  auto saveSufamiTurboB(Markup::Node) -> void;
+
+  auto saveRAM(Markup::Node) -> void;
+  auto saveMCC(Markup::Node) -> void;
+  auto saveEvent(Markup::Node) -> void;
+  auto saveSA1(Markup::Node) -> void;
+  auto saveSuperFX(Markup::Node) -> void;
+  auto saveARMDSP(Markup::Node) -> void;
+  auto saveHitachiDSP(Markup::Node) -> void;
+  auto saveNECDSP(Markup::Node) -> void;
+  auto saveEpsonRTC(Markup::Node) -> void;
+  auto saveSharpRTC(Markup::Node) -> void;
+  auto saveSPC7110(Markup::Node) -> void;
+  auto saveSDD1(Markup::Node) -> void;
+  auto saveOBC1(Markup::Node) -> void;
+
+  auto saveMemory(MappedRAM&, Markup::Node, maybe<uint> = nothing) -> void;
+
+  friend class Interface;
+  friend class ICD2;
+};
+
+extern Cartridge cartridge;
diff --git a/higan/sfc-balanced/cartridge/load.cpp b/higan/sfc-balanced/cartridge/load.cpp
new file mode 100644
index 0000000..ed97741
--- /dev/null
+++ b/higan/sfc-balanced/cartridge/load.cpp
@@ -0,0 +1,350 @@
+auto Cartridge::loadCartridge(Markup::Node node) -> void {
+  information.title.cartridge = node["information/title"].text();
+  auto board = node["board"];
+  information.region = board["region"].text() == "pal" ? Region::PAL : Region::NTSC;
+
+  if(board["mcc"] || board["bsmemory"]) {
+    if(auto pathID = interface->load(ID::BSMemory, "BS Memory", "bs")) {
+      bsmemory.pathID = pathID();
+      loadBSMemory();
+    }
+  }
+  if(board["sufamiturbo"]) {
+    if(auto pathID = interface->load(ID::SufamiTurboA, "Sufami Turbo", "st")) {
+      sufamiturboA.pathID = pathID();
+      loadSufamiTurboA();
+    }
+  }
+
+  if(auto node = board["rom"]) loadROM(node);
+  if(auto node = board["ram"]) loadRAM(node);
+  if(auto node = board["icd2"]) loadICD2(node);
+  if(auto node = board["mcc"]) loadMCC(node);
+  if(auto node = board["bsmemory"]) loadBSMemoryPack(node);
+  if(auto node = board.find("sufamiturbo")) if(node(0)) loadSufamiTurbo(node(0), 0);
+  if(auto node = board.find("sufamiturbo")) if(node(1)) loadSufamiTurbo(node(1), 1);
+  if(auto node = board["nss"]) loadNSS(node);
+  if(auto node = board["event"]) loadEvent(node);
+  if(auto node = board["sa1"]) loadSA1(node);
+  if(auto node = board["superfx"]) loadSuperFX(node);
+  if(auto node = board["armdsp"]) loadARMDSP(node);
+  if(auto node = board["hitachidsp"]) loadHitachiDSP(node, node["information/board"].text().match("2DC*") ? 2 : 1);
+  if(auto node = board["necdsp"]) loadNECDSP(node);
+  if(auto node = board["epsonrtc"]) loadEpsonRTC(node);
+  if(auto node = board["sharprtc"]) loadSharpRTC(node);
+  if(auto node = board["spc7110"]) loadSPC7110(node);
+  if(auto node = board["sdd1"]) loadSDD1(node);
+  if(auto node = board["obc1"]) loadOBC1(node);
+  if(auto node = board["msu1"]) loadMSU1(node);
+}
+
+auto Cartridge::loadGameBoy(Markup::Node node) -> void {
+}
+
+auto Cartridge::loadBSMemory(Markup::Node node) -> void {
+  information.title.bsMemory = node["information/title"].text();
+  bsmemory.readonly = (node["board/rom/type"].text() == "mrom");
+
+  loadMemory(bsmemory.memory, node["board/rom"], File::Required, bsmemory.pathID);
+}
+
+auto Cartridge::loadSufamiTurboA(Markup::Node node) -> void {
+  information.title.sufamiTurboA = node["information/title"].text();
+
+  loadMemory(sufamiturboA.rom, node["board/rom"], File::Required, sufamiturboA.pathID);
+  loadMemory(sufamiturboA.ram, node["board/ram"], File::Optional, sufamiturboA.pathID);
+
+  if(node["board/linkable"]) {
+    if(auto pathID = interface->load(ID::SufamiTurboB, "Sufami Turbo", "st")) {
+      sufamiturboB.pathID = pathID();
+      loadSufamiTurboB();
+    }
+  }
+}
+
+auto Cartridge::loadSufamiTurboB(Markup::Node node) -> void {
+  information.title.sufamiTurboB = node["information/title"].text();
+
+  loadMemory(sufamiturboB.rom, node["board/rom"], File::Required, sufamiturboB.pathID);
+  loadMemory(sufamiturboB.ram, node["board/ram"], File::Optional, sufamiturboB.pathID);
+}
+
+//
+
+auto Cartridge::loadROM(Markup::Node node) -> void {
+  loadMemory(rom, node, File::Required);
+  for(auto leaf : node.find("map")) loadMap(leaf, rom);
+}
+
+auto Cartridge::loadRAM(Markup::Node node) -> void {
+  loadMemory(ram, node, File::Optional);
+  for(auto leaf : node.find("map")) loadMap(leaf, ram);
+}
+
+auto Cartridge::loadICD2(Markup::Node node) -> void {
+  has.GameBoySlot = true;
+  has.ICD2 = true;
+  icd2.revision = max(1, node["revision"].natural());
+
+  //Game Boy core loads data through ICD2 interface
+  for(auto leaf : node.find("map")) loadMap(leaf, {&ICD2::readIO, &icd2}, {&ICD2::writeIO, &icd2});
+}
+
+auto Cartridge::loadMCC(Markup::Node node) -> void {
+  has.BSMemorySlot = true;
+  has.MCC = true;
+
+  loadMemory(mcc.rom, node["rom"], File::Required);
+  loadMemory(mcc.ram, node["ram"], File::Optional);
+
+  for(auto leaf : node.find("map")) leaf.text() == "mcu"
+  ? loadMap(leaf, {&MCC::mcuRead, &mcc}, {&MCC::mcuWrite, &mcc})
+  : loadMap(leaf, {&MCC::read, &mcc}, {&MCC::write, &mcc});
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, mcc.ram);
+}
+
+auto Cartridge::loadBSMemoryPack(Markup::Node node) -> void {
+  has.BSMemorySlot = true;
+
+  for(auto leaf : node.find("map")) {
+    if(bsmemory.memory.size() == 0) continue;
+    loadMap(leaf, bsmemory);
+  }
+}
+
+auto Cartridge::loadSufamiTurbo(Markup::Node node, bool slot) -> void {
+  has.SufamiTurboSlots = true;
+
+  for(auto leaf : node["rom"].find("map")) {
+    auto& cart = (slot == 0 ? sufamiturboA : sufamiturboB);
+    if(cart.rom.size() == 0) continue;
+    loadMap(leaf, cart.rom);
+  }
+
+  for(auto leaf : node["ram"].find("map")) {
+    auto& cart = (slot == 0 ? sufamiturboA : sufamiturboB);
+    if(cart.ram.size() == 0) continue;
+    loadMap(leaf, cart.ram);
+  }
+}
+
+auto Cartridge::loadNSS(Markup::Node node) -> void {
+  has.NSSDIP = true;
+  nss.dip = interface->dipSettings(node);
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&NSS::read, &nss}, {&NSS::write, &nss});
+}
+
+auto Cartridge::loadEvent(Markup::Node node) -> void {
+  auto roms = node.find("rom");
+  if(roms.size() != 4) return;
+
+  has.Event = true;
+
+  for(uint n : range(4)) loadMemory(event.rom[n], roms[n], File::Required);
+  loadMemory(event.ram, node["ram"], File::Optional);
+
+  event.board = Event::Board::CampusChallenge92;
+  if(node.text() == "CC92") event.board = Event::Board::CampusChallenge92;
+  if(node.text() == "PF94") event.board = Event::Board::Powerfest94;
+  event.timer = node["timer"].natural();
+
+  for(auto leaf : node.find("map")) leaf.text() == "mcu"
+  ? loadMap(leaf, {&Event::mcuRead, &event}, {&Event::mcuWrite, &event})
+  : loadMap(leaf, {&Event::read, &event}, {&Event::write, &event});
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, event.ram);
+}
+
+auto Cartridge::loadSA1(Markup::Node node) -> void {
+  has.SA1 = true;
+
+  loadMemory(sa1.rom, node["rom"], File::Required);
+  loadMemory(sa1.bwram, node["bwram"], File::Optional);
+  loadMemory(sa1.iram, node["iram"], File::Optional);
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&SA1::readIO, &sa1}, {&SA1::writeIO, &sa1});
+  for(auto leaf : node["rom"].find("map")) loadMap(leaf, {&SA1::mmcromRead, &sa1}, {&SA1::mmcromWrite, &sa1});
+  for(auto leaf : node["bwram"].find("map")) loadMap(leaf, {&SA1::mmcbwramRead, &sa1}, {&SA1::mmcbwramWrite, &sa1});
+  for(auto leaf : node["iram"].find("map")) loadMap(leaf, sa1.cpuiram);
+}
+
+auto Cartridge::loadSuperFX(Markup::Node node) -> void {
+  has.SuperFX = true;
+
+  loadMemory(superfx.rom, node["rom"], File::Required);
+  loadMemory(superfx.ram, node["ram"], File::Optional);
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&SuperFX::readIO, &superfx}, {&SuperFX::writeIO, &superfx});
+  for(auto leaf : node["rom"].find("map")) loadMap(leaf, superfx.cpurom);
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, superfx.cpuram);
+}
+
+auto Cartridge::loadARMDSP(Markup::Node node) -> void {
+  has.ARMDSP = true;
+
+  if(auto fp = interface->open(ID::SuperFamicom, node["prom"]["name"].text(), File::Read, File::Required)) {
+    for(auto n : range(128 * 1024)) armdsp.programROM[n] = fp->read();
+  }
+  if(auto fp = interface->open(ID::SuperFamicom, node["drom"]["name"].text(), File::Read, File::Required)) {
+    for(auto n : range( 32 * 1024)) armdsp.dataROM[n] = fp->read();
+  }
+  if(auto fp = interface->open(ID::SuperFamicom, node["ram"]["name"].text(), File::Read)) {
+    for(auto n : range( 16 * 1024)) armdsp.programRAM[n] = fp->read();
+  }
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&ArmDSP::read, &armdsp}, {&ArmDSP::write, &armdsp});
+}
+
+auto Cartridge::loadHitachiDSP(Markup::Node node, uint roms) -> void {
+  has.HitachiDSP = true;
+
+  hitachidsp.Frequency = node["frequency"].natural();
+  if(hitachidsp.Frequency == 0) hitachidsp.Frequency = 20'000'000;
+  hitachidsp.Roms = roms;  //1 or 2
+
+  loadMemory(hitachidsp.rom, node["rom"], File::Required);
+  loadMemory(hitachidsp.ram, node["ram"], File::Optional);
+
+  for(auto& word : hitachidsp.dataROM) word = 0x000000;
+  for(auto& word : hitachidsp.dataRAM) word = 0x00;
+
+  if(auto fp = interface->open(ID::SuperFamicom, node["drom"]["name"].text(), File::Read, File::Required)) {
+    for(auto n : range(1 * 1024)) hitachidsp.dataROM[n] = fp->readl(3);
+  }
+  if(auto fp = interface->open(ID::SuperFamicom, node["dram"]["name"].text(), File::Read)) {
+    for(auto n : range(3 * 1024)) hitachidsp.dataRAM[n] = fp->readl(1);
+  }
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&HitachiDSP::dspRead, &hitachidsp}, {&HitachiDSP::dspWrite, &hitachidsp});
+  for(auto leaf : node["rom"].find("map")) loadMap(leaf, {&HitachiDSP::romRead, &hitachidsp}, {&HitachiDSP::romWrite, &hitachidsp});
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, {&HitachiDSP::ramRead, &hitachidsp}, {&HitachiDSP::ramWrite, &hitachidsp});
+  for(auto leaf : node["dram"].find("map")) loadMap(leaf, {&HitachiDSP::dramRead, &hitachidsp}, {&HitachiDSP::dramWrite, &hitachidsp});
+}
+
+auto Cartridge::loadNECDSP(Markup::Node node) -> void {
+  has.NECDSP = true;
+
+  necdsp.Frequency = node["frequency"].natural();
+  if(necdsp.Frequency == 0) necdsp.Frequency = 8000000;
+  necdsp.revision
+  = node["model"].text() == "uPD7725"  ? NECDSP::Revision::uPD7725
+  : node["model"].text() == "uPD96050" ? NECDSP::Revision::uPD96050
+  : NECDSP::Revision::uPD7725;
+
+  for(auto& word : necdsp.programROM) word = 0x000000;
+  for(auto& word : necdsp.dataROM) word = 0x0000;
+  for(auto& word : necdsp.dataRAM) word = 0x0000;
+
+  uint size[3] = {0};
+  if(necdsp.revision == NECDSP::Revision::uPD7725 ) memory::assign(size,  2048, 1024,  256);
+  if(necdsp.revision == NECDSP::Revision::uPD96050) memory::assign(size, 16384, 2048, 2048);
+
+  if(auto fp = interface->open(ID::SuperFamicom, node["prom"]["name"].text(), File::Read, File::Required)) {
+    for(auto n : range(size[0])) necdsp.programROM[n] = fp->readl(3);
+  }
+  if(auto fp = interface->open(ID::SuperFamicom, node["drom"]["name"].text(), File::Read, File::Required)) {
+    for(auto n : range(size[1])) necdsp.dataROM[n] = fp->readl(2);
+  }
+  if(auto fp = interface->open(ID::SuperFamicom, node["dram"]["name"].text(), File::Read)) {
+    for(auto n : range(size[2])) necdsp.dataRAM[n] = fp->readl(2);
+  }
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&NECDSP::read, &necdsp}, {&NECDSP::write, &necdsp});
+  for(auto leaf : node["dram"].find("map")) loadMap(leaf, {&NECDSP::readRAM, &necdsp}, {&NECDSP::writeRAM, &necdsp});
+}
+
+auto Cartridge::loadEpsonRTC(Markup::Node node) -> void {
+  has.EpsonRTC = true;
+
+  if(auto fp = interface->open(ID::SuperFamicom, node["ram"]["name"].text(), File::Read)) {
+    uint8 data[16] = {0};
+    for(auto& byte : data) fp->read();
+    epsonrtc.load(data);
+  }
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&EpsonRTC::read, &epsonrtc}, {&EpsonRTC::write, &epsonrtc});
+}
+
+auto Cartridge::loadSharpRTC(Markup::Node node) -> void {
+  has.SharpRTC = true;
+
+  if(auto fp = interface->open(ID::SuperFamicom, node["ram"]["name"].text(), File::Read)) {
+    uint8 data[16] = {0};
+    for(auto& byte : data) fp->read();
+    sharprtc.load(data);
+  }
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&SharpRTC::read, &sharprtc}, {&SharpRTC::write, &sharprtc});
+}
+
+auto Cartridge::loadSPC7110(Markup::Node node) -> void {
+  has.SPC7110 = true;
+
+  loadMemory(spc7110.prom, node["prom"], File::Required);
+  loadMemory(spc7110.drom, node["drom"], File::Required);
+  loadMemory(spc7110.ram, node["ram"], File::Optional);
+
+  for(auto leaf : node.find("map")) leaf.text() == "mcu"
+  ? loadMap(leaf, {&SPC7110::mcuromRead, &spc7110}, {&SPC7110::mcuromWrite, &spc7110})
+  : loadMap(leaf, {&SPC7110::read, &spc7110}, {&SPC7110::write, &spc7110});
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, {&SPC7110::mcuramRead, &spc7110}, {&SPC7110::mcuramWrite, &spc7110});
+}
+
+auto Cartridge::loadSDD1(Markup::Node node) -> void {
+  has.SDD1 = true;
+
+  loadMemory(sdd1.rom, node["rom"], File::Required);
+  loadMemory(sdd1.ram, node["ram"], File::Optional);
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&SDD1::read, &sdd1}, {&SDD1::write, &sdd1});
+  for(auto leaf : node["rom"].find("map")) loadMap(leaf, {&SDD1::mcuromRead, &sdd1}, {&SDD1::mcuromWrite, &sdd1});
+  for(auto leaf : node["ram"].find("map")) loadMap(leaf, {&SDD1::mcuramRead, &sdd1}, {&SDD1::mcuramWrite, &sdd1});
+}
+
+auto Cartridge::loadOBC1(Markup::Node node) -> void {
+  has.OBC1 = true;
+
+  loadMemory(obc1.ram, node["ram"], File::Optional);
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&OBC1::read, &obc1}, {&OBC1::write, &obc1});
+}
+
+auto Cartridge::loadMSU1(Markup::Node node) -> void {
+  has.MSU1 = true;
+
+  for(auto leaf : node.find("map")) loadMap(leaf, {&MSU1::readIO, &msu1}, {&MSU1::writeIO, &msu1});
+}
+
+//
+
+auto Cartridge::loadMemory(MappedRAM& ram, Markup::Node node, bool required, maybe<uint> id) -> void {
+  if(!id) id = pathID();
+  auto name = node["name"].text();
+  auto size = node["size"].natural();
+  ram.allocate(size);
+  if(auto fp = interface->open(id(), name, File::Read, required)) {
+    fp->read(ram.data(), ram.size());
+  }
+}
+
+auto Cartridge::loadMap(Markup::Node map, SuperFamicom::Memory& memory) -> void {
+  auto addr = map["address"].text();
+  auto size = map["size"].natural();
+  auto base = map["base"].natural();
+  auto mask = map["mask"].natural();
+  if(size == 0) size = memory.size();
+  if(size == 0) return;
+  bus.map({&SuperFamicom::Memory::read, &memory}, {&SuperFamicom::Memory::write, &memory}, addr, size, base, mask);
+}
+
+auto Cartridge::loadMap(
+  Markup::Node map,
+  const function<uint8 (uint24, uint8)>& reader,
+  const function<void (uint24, uint8)>& writer
+) -> void {
+  auto addr = map["address"].text();
+  auto size = map["size"].natural();
+  auto base = map["base"].natural();
+  auto mask = map["mask"].natural();
+  bus.map(reader, writer, addr, size, base, mask);
+}
diff --git a/higan/sfc-balanced/cartridge/save.cpp b/higan/sfc-balanced/cartridge/save.cpp
new file mode 100644
index 0000000..40993b6
--- /dev/null
+++ b/higan/sfc-balanced/cartridge/save.cpp
@@ -0,0 +1,135 @@
+auto Cartridge::saveCartridge(Markup::Node node) -> void {
+  auto board = node["board"];
+
+  if(auto node = board["ram"]) saveRAM(node);
+  if(auto node = board["mcc"]) saveMCC(node);
+  if(auto node = board["event"]) saveEvent(node);
+  if(auto node = board["sa1"]) saveSA1(node);
+  if(auto node = board["superfx"]) saveSuperFX(node);
+  if(auto node = board["armdsp"]) saveARMDSP(node);
+  if(auto node = board["hitachidsp"]) saveHitachiDSP(node);
+  if(auto node = board["necdsp"]) saveNECDSP(node);
+  if(auto node = board["epsonrtc"]) saveEpsonRTC(node);
+  if(auto node = board["sharprtc"]) saveSharpRTC(node);
+  if(auto node = board["spc7110"]) saveSPC7110(node);
+  if(auto node = board["sdd1"]) saveSDD1(node);
+  if(auto node = board["obc1"]) saveOBC1(node);
+}
+
+auto Cartridge::saveGameBoy(Markup::Node node) -> void {
+}
+
+auto Cartridge::saveBSMemory(Markup::Node node) -> void {
+}
+
+auto Cartridge::saveSufamiTurboA(Markup::Node node) -> void {
+  saveMemory(sufamiturboA.ram, node["board/ram"], sufamiturboA.pathID);
+}
+
+auto Cartridge::saveSufamiTurboB(Markup::Node node) -> void {
+  saveMemory(sufamiturboB.ram, node["board/ram"], sufamiturboB.pathID);
+}
+
+//
+
+auto Cartridge::saveRAM(Markup::Node node) -> void {
+  saveMemory(ram, node);
+}
+
+auto Cartridge::saveMCC(Markup::Node node) -> void {
+  saveMemory(mcc.ram, node["ram"]);
+}
+
+auto Cartridge::saveEvent(Markup::Node node) -> void {
+  saveMemory(event.ram, node["ram"]);
+}
+
+auto Cartridge::saveSA1(Markup::Node node) -> void {
+  saveMemory(sa1.bwram, node["bwram"]);
+  saveMemory(sa1.iram, node["iram"]);
+}
+
+auto Cartridge::saveSuperFX(Markup::Node node) -> void {
+  saveMemory(superfx.ram, node["ram"]);
+}
+
+auto Cartridge::saveARMDSP(Markup::Node node) -> void {
+  if(!node["ram/volatile"]) {
+    if(auto name = node["ram/name"].text()) {
+      if(auto fp = interface->open(ID::SuperFamicom, name, File::Write)) {
+        for(auto n : range(16 * 1024)) fp->write(armdsp.programRAM[n]);
+      }
+    }
+  }
+}
+
+auto Cartridge::saveHitachiDSP(Markup::Node node) -> void {
+  saveMemory(hitachidsp.ram, node["ram"]);
+
+  if(!node["dram/volatile"]) {
+    if(auto name = node["dram/name"].text()) {
+      if(auto fp = interface->open(ID::SuperFamicom, name, File::Write)) {
+        for(auto n : range(3 * 1024)) fp->write(hitachidsp.dataRAM[n]);
+      }
+    }
+  }
+}
+
+auto Cartridge::saveNECDSP(Markup::Node node) -> void {
+  if(!node["dram/volatile"]) {
+    uint size = necdsp.revision == NECDSP::Revision::uPD7725 ? 256 : 2048;
+    if(auto name = node["dram/name"].text()) {
+      if(auto fp = interface->open(ID::SuperFamicom, name, File::Write)) {
+        for(auto n : range(size)) fp->writel(necdsp.dataRAM[n], 2);
+      }
+    }
+  }
+}
+
+auto Cartridge::saveEpsonRTC(Markup::Node node) -> void {
+  if(!node["ram/volatile"]) {
+    if(auto name = node["ram/name"].text()) {
+      if(auto fp = interface->open(ID::SuperFamicom, name, File::Write)) {
+        uint8 data[16] = {0};
+        epsonrtc.save(data);
+        fp->write(data, 16);
+      }
+    }
+  }
+}
+
+auto Cartridge::saveSharpRTC(Markup::Node node) -> void {
+  if(!node["ram/volatile"]) {
+    if(auto name = node["ram/name"].text()) {
+      if(auto fp = interface->open(ID::SuperFamicom, name, File::Write)) {
+        uint8 data[16] = {0};
+        sharprtc.save(data);
+        fp->write(data, 16);
+      }
+    }
+  }
+}
+
+auto Cartridge::saveSPC7110(Markup::Node node) -> void {
+  saveMemory(spc7110.ram, node["ram"]);
+}
+
+auto Cartridge::saveSDD1(Markup::Node node) -> void {
+  saveMemory(sdd1.ram, node["ram"]);
+}
+
+auto Cartridge::saveOBC1(Markup::Node node) -> void {
+  saveMemory(obc1.ram, node["ram"]);
+}
+
+//
+
+auto Cartridge::saveMemory(MappedRAM& memory, Markup::Node node, maybe<uint> id) -> void {
+  if(!id) id = pathID();
+  if(!node || node["volatile"]) return;
+  auto name = node["name"].text();
+  auto size = node["size"].natural();
+  if(auto fp = interface->open(id(), name, File::Write)) {
+    fp->write(memory.data(), memory.size());
+  }
+}
diff --git a/higan/sfc-balanced/cartridge/serialization.cpp b/higan/sfc-balanced/cartridge/serialization.cpp
new file mode 100644
index 0000000..1509ab4
--- /dev/null
+++ b/higan/sfc-balanced/cartridge/serialization.cpp
@@ -0,0 +1,3 @@
+auto Cartridge::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+}
diff --git a/higan/sfc-balanced/controller/controller.cpp b/higan/sfc-balanced/controller/controller.cpp
new file mode 100644
index 0000000..51a91f6
--- /dev/null
+++ b/higan/sfc-balanced/controller/controller.cpp
@@ -0,0 +1,46 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "gamepad/gamepad.cpp"
+#include "mouse/mouse.cpp"
+#include "super-multitap/super-multitap.cpp"
+#include "super-scope/super-scope.cpp"
+#include "justifier/justifier.cpp"
+
+Controller::Controller(bool port) : port(port) {
+  if(!handle()) create(Controller::Enter, 1);
+}
+
+Controller::~Controller() {
+  scheduler.remove(*this);
+}
+
+auto Controller::Enter() -> void {
+  while(true) {
+    scheduler.synchronize();
+    if(peripherals.controllerPort1->active()) peripherals.controllerPort1->main();
+    if(peripherals.controllerPort2->active()) peripherals.controllerPort2->main();
+  }
+}
+
+auto Controller::main() -> void {
+  step(1);
+  synchronize(cpu);
+}
+
+auto Controller::iobit() -> bool {
+  switch(port) {
+  case Controller::Port1: return cpu.pio() & 0x40;
+  case Controller::Port2: return cpu.pio() & 0x80;
+  }
+}
+
+auto Controller::iobit(bool data) -> void {
+  switch(port) {
+  case Controller::Port1: bus.write(0x4201, (cpu.pio() & ~0x40) | (data << 6)); break;
+  case Controller::Port2: bus.write(0x4201, (cpu.pio() & ~0x80) | (data << 7)); break;
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/controller/controller.hpp b/higan/sfc-balanced/controller/controller.hpp
new file mode 100644
index 0000000..6c18e2d
--- /dev/null
+++ b/higan/sfc-balanced/controller/controller.hpp
@@ -0,0 +1,34 @@
+// SNES controller port pinout:
+//  -------------------------------
+// | (1) (2) (3) (4) | (5) (6) (7) )
+//  -------------------------------
+// pin    name     port1                            port2
+//  1:    +5v
+//  2:    clock    $4016 read                       $4017 read
+//  3:    latch    $4016.d0 write                   $4016.d0 write
+//  4:    data1    $4016.d0 read                    $4017.d0 read
+//  5:    data2    $4016.d1 read                    $4017.d1 read
+//  6:    iobit    $4201.d6 write; $4213.d6 read    $4201.d7 write; $4213.d7 read
+//  7:    gnd
+
+struct Controller : Thread {
+  enum : bool { Port1 = 0, Port2 = 1 };
+
+  Controller(bool port);
+  virtual ~Controller();
+  static auto Enter() -> void;
+
+  virtual auto main() -> void;
+  auto iobit() -> bool;
+  auto iobit(bool data) -> void;
+  virtual auto data() -> uint2 { return 0; }
+  virtual auto latch(bool data) -> void {}
+
+  const bool port;
+};
+
+#include "gamepad/gamepad.hpp"
+#include "mouse/mouse.hpp"
+#include "super-multitap/super-multitap.hpp"
+#include "super-scope/super-scope.hpp"
+#include "justifier/justifier.hpp"
diff --git a/higan/sfc-balanced/controller/gamepad/gamepad.cpp b/higan/sfc-balanced/controller/gamepad/gamepad.cpp
new file mode 100644
index 0000000..9505782
--- /dev/null
+++ b/higan/sfc-balanced/controller/gamepad/gamepad.cpp
@@ -0,0 +1,48 @@
+Gamepad::Gamepad(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+}
+
+auto Gamepad::data() -> uint2 {
+  if(counter >= 16) return 1;
+  if(latched == 1) return interface->inputPoll(port, ID::Device::Gamepad, B);
+
+  //note: D-pad physically prevents up+down and left+right from being pressed at the same time
+  switch(counter++) {
+  case  0: return b;
+  case  1: return y;
+  case  2: return select;
+  case  3: return start;
+  case  4: return up & !down;
+  case  5: return down & !up;
+  case  6: return left & !right;
+  case  7: return right & !left;
+  case  8: return a;
+  case  9: return x;
+  case 10: return l;
+  case 11: return r;
+  }
+
+  return 0;  //12-15: signature
+}
+
+auto Gamepad::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  if(latched == 0) {
+    b      = interface->inputPoll(port, ID::Device::Gamepad, B);
+    y      = interface->inputPoll(port, ID::Device::Gamepad, Y);
+    select = interface->inputPoll(port, ID::Device::Gamepad, Select);
+    start  = interface->inputPoll(port, ID::Device::Gamepad, Start);
+    up     = interface->inputPoll(port, ID::Device::Gamepad, Up);
+    down   = interface->inputPoll(port, ID::Device::Gamepad, Down);
+    left   = interface->inputPoll(port, ID::Device::Gamepad, Left);
+    right  = interface->inputPoll(port, ID::Device::Gamepad, Right);
+    a      = interface->inputPoll(port, ID::Device::Gamepad, A);
+    x      = interface->inputPoll(port, ID::Device::Gamepad, X);
+    l      = interface->inputPoll(port, ID::Device::Gamepad, L);
+    r      = interface->inputPoll(port, ID::Device::Gamepad, R);
+  }
+}
diff --git a/higan/sfc-balanced/controller/gamepad/gamepad.hpp b/higan/sfc-balanced/controller/gamepad/gamepad.hpp
new file mode 100644
index 0000000..f96808a
--- /dev/null
+++ b/higan/sfc-balanced/controller/gamepad/gamepad.hpp
@@ -0,0 +1,18 @@
+struct Gamepad : Controller {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Y, X, L, R, Select, Start,
+  };
+
+  Gamepad(bool port);
+
+  auto data() -> uint2;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  boolean b, y, select, start;
+  boolean up, down, left, right;
+  boolean a, x, l, r;
+};
diff --git a/higan/sfc-balanced/controller/justifier/justifier.cpp b/higan/sfc-balanced/controller/justifier/justifier.cpp
new file mode 100644
index 0000000..520c72b
--- /dev/null
+++ b/higan/sfc-balanced/controller/justifier/justifier.cpp
@@ -0,0 +1,140 @@
+Justifier::Justifier(bool port, bool chained):
+Controller(port),
+chained(chained),
+device(!chained ? ID::Device::Justifier : ID::Device::Justifiers)
+{
+  create(Controller::Enter, 21'477'272);
+  latched = 0;
+  counter = 0;
+  active = 0;
+  prev = 0;
+
+  player1.sprite = Emulator::video.createSprite(32, 32);
+  player1.sprite->setPixels(Resource::Sprite::CrosshairBlue);
+  player1.x = 256 / 2;
+  player1.y = 240 / 2;
+  player1.trigger = false;
+  player2.start = false;
+
+  player2.sprite = Emulator::video.createSprite(32, 32);
+  player2.sprite->setPixels(Resource::Sprite::CrosshairRed);
+  player2.x = 256 / 2;
+  player2.y = 240 / 2;
+  player2.trigger = false;
+  player2.start = false;
+
+  if(chained == false) {
+    player2.x = -1;
+    player2.y = -1;
+  } else {
+    player1.x -= 16;
+    player2.x += 16;
+  }
+}
+
+Justifier::~Justifier() {
+  Emulator::video.removeSprite(player1.sprite);
+  Emulator::video.removeSprite(player2.sprite);
+}
+
+auto Justifier::main() -> void {
+  uint next = cpu.vcounter() * 1364 + cpu.hcounter();
+
+  int x = (active == 0 ? player1.x : player2.x), y = (active == 0 ? player1.y : player2.y);
+  bool offscreen = (x < 0 || y < 0 || x >= 256 || y >= ppu.vdisp());
+
+  if(!offscreen) {
+    uint target = y * 1364 + (x + 24) * 4;
+    if(next >= target && prev < target) {
+      //CRT raster detected, toggle iobit to latch counters
+      iobit(0);
+      iobit(1);
+    }
+  }
+
+  if(next < prev) {
+    int nx1 = interface->inputPoll(port, device, 0 + X);
+    int ny1 = interface->inputPoll(port, device, 0 + Y);
+    nx1 += player1.x;
+    ny1 += player1.y;
+    player1.x = max(-16, min(256 + 16, nx1));
+    player1.y = max(-16, min(240 + 16, ny1));
+    player1.sprite->setPosition(player1.x * 2 - 16, player1.y * 2 - 16);
+    player1.sprite->setVisible(true);
+  }
+
+  if(next < prev && chained) {
+    int nx2 = interface->inputPoll(port, device, 4 + X);
+    int ny2 = interface->inputPoll(port, device, 4 + Y);
+    nx2 += player2.x;
+    ny2 += player2.y;
+    player2.x = max(-16, min(256 + 16, nx2));
+    player2.y = max(-16, min(240 + 16, ny2));
+    player2.sprite->setPosition(player2.x * 2 - 16, player2.y * 2 - 16);
+    player2.sprite->setVisible(true);
+  }
+
+  prev = next;
+  step(2);
+  synchronize(cpu);
+}
+
+auto Justifier::data() -> uint2 {
+  if(counter >= 32) return 1;
+
+  if(counter == 0) {
+    player1.trigger = interface->inputPoll(port, device, 0 + Trigger);
+    player1.start   = interface->inputPoll(port, device, 0 + Start);
+  }
+
+  if(counter == 0 && chained) {
+    player2.trigger = interface->inputPoll(port, device, 4 + Trigger);
+    player2.start   = interface->inputPoll(port, device, 4 + Start);
+  }
+
+  switch(counter++) {
+  case  0: return 0;
+  case  1: return 0;
+  case  2: return 0;
+  case  3: return 0;
+  case  4: return 0;
+  case  5: return 0;
+  case  6: return 0;
+  case  7: return 0;
+  case  8: return 0;
+  case  9: return 0;
+  case 10: return 0;
+  case 11: return 0;
+
+  case 12: return 1;  //signature
+  case 13: return 1;  // ||
+  case 14: return 1;  // ||
+  case 15: return 0;  // ||
+
+  case 16: return 0;
+  case 17: return 1;
+  case 18: return 0;
+  case 19: return 1;
+  case 20: return 0;
+  case 21: return 1;
+  case 22: return 0;
+  case 23: return 1;
+
+  case 24: return player1.trigger;
+  case 25: return player2.trigger;
+  case 26: return player1.start;
+  case 27: return player2.start;
+  case 28: return active;
+
+  case 29: return 0;
+  case 30: return 0;
+  case 31: return 0;
+  }
+}
+
+auto Justifier::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+  if(latched == 0) active = !active;  //toggle between both controllers, even when unchained
+}
diff --git a/higan/sfc-balanced/controller/justifier/justifier.hpp b/higan/sfc-balanced/controller/justifier/justifier.hpp
new file mode 100644
index 0000000..6b99b10
--- /dev/null
+++ b/higan/sfc-balanced/controller/justifier/justifier.hpp
@@ -0,0 +1,28 @@
+struct Justifier : Controller {
+  enum : uint {
+    X, Y, Trigger, Start,
+  };
+
+  Justifier(bool port, bool chained);
+  ~Justifier();
+
+  auto main() -> void;
+  auto data() -> uint2;
+  auto latch(bool data) -> void;
+
+//private:
+  const bool chained;  //true if the second justifier is attached to the first
+  const uint device;
+  bool latched;
+  uint counter;
+  uint prev;
+
+  bool active;
+  struct Player {
+    shared_pointer<Emulator::Sprite> sprite;
+    int x;
+    int y;
+    bool trigger;
+    bool start;
+  } player1, player2;
+};
diff --git a/higan/sfc-balanced/controller/mouse/mouse.cpp b/higan/sfc-balanced/controller/mouse/mouse.cpp
new file mode 100644
index 0000000..f9a3f59
--- /dev/null
+++ b/higan/sfc-balanced/controller/mouse/mouse.cpp
@@ -0,0 +1,86 @@
+Mouse::Mouse(bool port) : Controller(port) {
+  latched = 0;
+  counter = 0;
+
+  speed = 0;
+  x = 0;
+  y = 0;
+  dx = 0;
+  dy = 0;
+  l = 0;
+  r = 0;
+}
+
+auto Mouse::data() -> uint2 {
+  if(latched == 1) {
+    speed = (speed + 1) % 3;
+    return 0;
+  }
+
+  if(counter >= 32) return 1;
+
+  switch(counter++) { default:
+  case  0: return 0;
+  case  1: return 0;
+  case  2: return 0;
+  case  3: return 0;
+  case  4: return 0;
+  case  5: return 0;
+  case  6: return 0;
+  case  7: return 0;
+
+  case  8: return r;
+  case  9: return l;
+  case 10: return (speed >> 1) & 1;
+  case 11: return (speed >> 0) & 1;
+
+  case 12: return 0;  //signature
+  case 13: return 0;  // ||
+  case 14: return 0;  // ||
+  case 15: return 1;  // ||
+
+  case 16: return dy;
+  case 17: return (y >> 6) & 1;
+  case 18: return (y >> 5) & 1;
+  case 19: return (y >> 4) & 1;
+  case 20: return (y >> 3) & 1;
+  case 21: return (y >> 2) & 1;
+  case 22: return (y >> 1) & 1;
+  case 23: return (y >> 0) & 1;
+
+  case 24: return dx;
+  case 25: return (x >> 6) & 1;
+  case 26: return (x >> 5) & 1;
+  case 27: return (x >> 4) & 1;
+  case 28: return (x >> 3) & 1;
+  case 29: return (x >> 2) & 1;
+  case 30: return (x >> 1) & 1;
+  case 31: return (x >> 0) & 1;
+  }
+}
+
+auto Mouse::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+
+  x = interface->inputPoll(port, ID::Device::Mouse, X);  //-n = left, 0 = center, +n = right
+  y = interface->inputPoll(port, ID::Device::Mouse, Y);  //-n = up,   0 = center, +n = down
+  l = interface->inputPoll(port, ID::Device::Mouse, Left);
+  r = interface->inputPoll(port, ID::Device::Mouse, Right);
+
+  dx = x < 0;  //0 = right, 1 = left
+  dy = y < 0;  //0 = down,  1 = up
+
+  if(x < 0) x = -x;  //abs(position_x)
+  if(y < 0) y = -y;  //abs(position_y)
+
+  double multiplier = 1.0;
+  if(speed == 1) multiplier = 1.5;
+  if(speed == 2) multiplier = 2.0;
+  x = (double)x * multiplier;
+  y = (double)y * multiplier;
+
+  x = min(127, x);
+  y = min(127, y);
+}
diff --git a/higan/sfc-balanced/controller/mouse/mouse.hpp b/higan/sfc-balanced/controller/mouse/mouse.hpp
new file mode 100644
index 0000000..2ab71a5
--- /dev/null
+++ b/higan/sfc-balanced/controller/mouse/mouse.hpp
@@ -0,0 +1,22 @@
+struct Mouse : Controller {
+  enum : uint {
+    X, Y, Left, Right,
+  };
+
+  Mouse(bool port);
+
+  auto data() -> uint2;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  uint speed;  //0 = slow, 1 = normal, 2 = fast
+  int  x;      //x-coordinate
+  int  y;      //y-coordinate
+  bool dx;     //x-direction
+  bool dy;     //y-direction
+  bool l;      //left button
+  bool r;      //right button
+};
diff --git a/higan/sfc-balanced/controller/super-multitap/super-multitap.cpp b/higan/sfc-balanced/controller/super-multitap/super-multitap.cpp
new file mode 100644
index 0000000..b24f9df
--- /dev/null
+++ b/higan/sfc-balanced/controller/super-multitap/super-multitap.cpp
@@ -0,0 +1,70 @@
+SuperMultitap::SuperMultitap(bool port) : Controller(port) {
+  latched = 0;
+  counter1 = 0;
+  counter2 = 0;
+}
+
+auto SuperMultitap::data() -> uint2 {
+  if(latched) return 2;  //device detection
+  uint counter, a, b;
+
+  if(iobit()) {
+    counter = counter1;
+    if(counter >= 16) return 3;
+    counter1++;
+    if(counter >= 12) return 0;
+    a = 0;  //controller 2
+    b = 1;  //controller 3
+  } else {
+    counter = counter2;
+    if(counter >= 16) return 3;
+    counter2++;
+    if(counter >= 12) return 0;
+    a = 2;  //controller 4
+    b = 3;  //controller 5
+  }
+
+  auto& A = gamepads[a];
+  auto& B = gamepads[b];
+
+  switch(counter) {
+  case  0: return A.b << 0 | B.b << 1;
+  case  1: return A.y << 0 | B.y << 1;
+  case  2: return A.select << 0 | B.select << 1;
+  case  3: return A.start << 0 | B.start << 1;
+  case  4: return (A.up & !A.down) << 0 | (B.up & !B.down) << 1;
+  case  5: return (A.down & !A.up) << 0 | (B.down & !B.up) << 1;
+  case  6: return (A.left & !A.right) << 0 | (B.left & !B.right) << 1;
+  case  7: return (A.right & !A.left) << 0 | (B.right & !B.left) << 1;
+  case  8: return A.a << 0 | B.a << 1;
+  case  9: return A.x << 0 | B.x << 1;
+  case 10: return A.l << 0 | B.l << 1;
+  case 11: return A.r << 0 | B.r << 1;
+  }
+  unreachable;
+}
+
+auto SuperMultitap::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter1 = 0;
+  counter2 = 0;
+
+  if(latched == 0) {
+    for(uint id : range(4)) {
+      auto& gamepad = gamepads[id];
+      gamepad.b      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + B);
+      gamepad.y      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Y);
+      gamepad.select = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Select);
+      gamepad.start  = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Start);
+      gamepad.up     = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Up);
+      gamepad.down   = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Down);
+      gamepad.left   = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Left);
+      gamepad.right  = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + Right);
+      gamepad.a      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + A);
+      gamepad.x      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + X);
+      gamepad.l      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + L);
+      gamepad.r      = interface->inputPoll(port, ID::Device::SuperMultitap, id * 12 + R);
+    }
+  }
+}
diff --git a/higan/sfc-balanced/controller/super-multitap/super-multitap.hpp b/higan/sfc-balanced/controller/super-multitap/super-multitap.hpp
new file mode 100644
index 0000000..f49dfc2
--- /dev/null
+++ b/higan/sfc-balanced/controller/super-multitap/super-multitap.hpp
@@ -0,0 +1,21 @@
+struct SuperMultitap : Controller {
+  enum : uint {
+    Up, Down, Left, Right, B, A, Y, X, L, R, Select, Start,
+  };
+
+  SuperMultitap(bool port);
+
+  auto data() -> uint2;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter1;
+  uint counter2;
+
+  struct Gamepad {
+    boolean b, y, select, start;
+    boolean up, down, left, right;
+    boolean a, x, l, r;
+  } gamepads[4];
+};
diff --git a/higan/sfc-balanced/controller/super-scope/super-scope.cpp b/higan/sfc-balanced/controller/super-scope/super-scope.cpp
new file mode 100644
index 0000000..a66aa47
--- /dev/null
+++ b/higan/sfc-balanced/controller/super-scope/super-scope.cpp
@@ -0,0 +1,127 @@
+//The Super Scope is a light-gun: it detects the CRT beam cannon position,
+//and latches the counters by toggling iobit. This only works on controller
+//port 2, as iobit there is connected to the PPU H/V counter latch.
+//(PIO $4201.d7)
+
+//It is obviously not possible to perfectly simulate an IR light detecting
+//a CRT beam cannon, hence this class will read the PPU raster counters.
+
+//A Super Scope can still technically be used in port 1, however it would
+//require manual polling of PIO ($4201.d6) to determine when iobit was written.
+//Note that no commercial game ever utilizes a Super Scope in port 1.
+
+SuperScope::SuperScope(bool port) : Controller(port) {
+  create(Controller::Enter, 21'477'272);
+  sprite = Emulator::video.createSprite(32, 32);
+  sprite->setPixels(Resource::Sprite::CrosshairGreen);
+
+  latched = 0;
+  counter = 0;
+
+  //center cursor onscreen
+  x = 256 / 2;
+  y = 240 / 2;
+
+  trigger   = false;
+  cursor    = false;
+  turbo     = false;
+  pause     = false;
+  offscreen = false;
+
+  oldturbo    = false;
+  triggerlock = false;
+  pauselock   = false;
+
+  prev = 0;
+}
+
+SuperScope::~SuperScope() {
+  Emulator::video.removeSprite(sprite);
+}
+
+auto SuperScope::main() -> void {
+  uint next = cpu.vcounter() * 1364 + cpu.hcounter();
+
+  if(!offscreen) {
+    uint target = y * 1364 + (x + 24) * 4;
+    if(next >= target && prev < target) {
+      //CRT raster detected, toggle iobit to latch counters
+      iobit(0);
+      iobit(1);
+    }
+  }
+
+  if(next < prev) {
+    //Vcounter wrapped back to zero; update cursor coordinates for start of new frame
+    int nx = interface->inputPoll(port, ID::Device::SuperScope, X);
+    int ny = interface->inputPoll(port, ID::Device::SuperScope, Y);
+    nx += x;
+    ny += y;
+    x = max(-16, min(256 + 16, nx));
+    y = max(-16, min(240 + 16, ny));
+    offscreen = (x < 0 || y < 0 || x >= 256 || y >= ppu.vdisp());
+    sprite->setPosition(x * 2 - 16, y * 2 - 16);
+    sprite->setVisible(true);
+  }
+
+  prev = next;
+  step(2);
+  synchronize(cpu);
+}
+
+auto SuperScope::data() -> uint2 {
+  if(counter >= 8) return 1;
+
+  if(counter == 0) {
+    //turbo is a switch; toggle is edge sensitive
+    bool newturbo = interface->inputPoll(port, ID::Device::SuperScope, Turbo);
+    if(newturbo && !oldturbo) {
+      turbo = !turbo;  //toggle state
+      sprite->setPixels(turbo ? Resource::Sprite::CrosshairTurbo : Resource::Sprite::CrosshairGreen);
+    }
+    oldturbo = newturbo;
+
+    //trigger is a button
+    //if turbo is active, trigger is level sensitive; otherwise, it is edge sensitive
+    trigger = false;
+    bool newtrigger = interface->inputPoll(port, ID::Device::SuperScope, Trigger);
+    if(newtrigger && (turbo || !triggerlock)) {
+      trigger = true;
+      triggerlock = true;
+    } else if(!newtrigger) {
+      triggerlock = false;
+    }
+
+    //cursor is a button; it is always level sensitive
+    cursor = interface->inputPoll(port, ID::Device::SuperScope, Cursor);
+
+    //pause is a button; it is always edge sensitive
+    pause = false;
+    bool newpause = interface->inputPoll(port, ID::Device::SuperScope, Pause);
+    if(newpause && !pauselock) {
+      pause = true;
+      pauselock = true;
+    } else if(!newpause) {
+      pauselock = false;
+    }
+
+    offscreen = (x < 0 || y < 0 || x >= 256 || y >= ppu.vdisp());
+  }
+
+  switch(counter++) {
+  case 0: return offscreen ? 0 : trigger;
+  case 1: return cursor;
+  case 2: return turbo;
+  case 3: return pause;
+  case 4: return 0;
+  case 5: return 0;
+  case 6: return offscreen;
+  case 7: return 0;  //noise (1 = yes)
+  }
+}
+
+auto SuperScope::latch(bool data) -> void {
+  if(latched == data) return;
+  latched = data;
+  counter = 0;
+}
diff --git a/higan/sfc-balanced/controller/super-scope/super-scope.hpp b/higan/sfc-balanced/controller/super-scope/super-scope.hpp
new file mode 100644
index 0000000..bcf467b
--- /dev/null
+++ b/higan/sfc-balanced/controller/super-scope/super-scope.hpp
@@ -0,0 +1,33 @@
+struct SuperScope : Controller {
+  shared_pointer<Emulator::Sprite> sprite;
+
+  enum : uint {
+    X, Y, Trigger, Cursor, Turbo, Pause,
+  };
+
+  SuperScope(bool port);
+  ~SuperScope();
+
+  auto main() -> void;
+  auto data() -> uint2;
+  auto latch(bool data) -> void;
+
+private:
+  bool latched;
+  uint counter;
+
+  int x;
+  int y;
+
+  bool trigger;
+  bool cursor;
+  bool turbo;
+  bool pause;
+  bool offscreen;
+
+  bool oldturbo;
+  bool triggerlock;
+  bool pauselock;
+
+  uint prev;
+};
diff --git a/higan/sfc-balanced/coprocessor/armdsp/armdsp.cpp b/higan/sfc-balanced/coprocessor/armdsp/armdsp.cpp
new file mode 100644
index 0000000..2ed5fcd
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/armdsp/armdsp.cpp
@@ -0,0 +1,132 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "memory.cpp"
+#include "serialization.cpp"
+ArmDSP armdsp;
+
+ArmDSP::ArmDSP() {
+  programROM = new uint8[128 * 1024];
+  dataROM = new uint8[32 * 1024];
+  programRAM = new uint8[16 * 1024];
+}
+
+ArmDSP::~ArmDSP() {
+  delete[] programROM;
+  delete[] dataROM;
+  delete[] programRAM;
+}
+
+auto ArmDSP::Enter() -> void {
+  armdsp.boot();
+  while(true) scheduler.synchronize(), armdsp.main();
+}
+
+auto ArmDSP::boot() -> void {
+  //reset hold delay
+  while(bridge.reset) {
+    step(1);
+    continue;
+  }
+
+  //reset sequence delay
+  if(bridge.ready == false) {
+    step(65'536);
+    bridge.ready = true;
+  }
+}
+
+auto ArmDSP::main() -> void {
+  if(crash) {
+    print(disassembleRegisters(), "\n");
+    print(disassembleInstructionARM(pipeline.execute.address), "\n");
+    print("Executed: ", instructions, "\n");
+    while(true) step(21'477'272);
+  }
+
+  stepARM();
+}
+
+auto ArmDSP::step(uint clocks) -> void {
+  if(bridge.timer && --bridge.timer == 0);
+  Thread::step(clocks);
+  synchronize(cpu);
+}
+
+//MMIO: 00-3f,80-bf:3800-38ff
+//3800-3807 mirrored throughout
+//a0 ignored
+
+auto ArmDSP::read(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(*this);
+
+  uint8 data = 0x00;
+  addr &= 0xff06;
+
+  if(addr == 0x3800) {
+    if(bridge.armtocpu.ready) {
+      bridge.armtocpu.ready = false;
+      data = bridge.armtocpu.data;
+    }
+  }
+
+  if(addr == 0x3802) {
+    bridge.signal = false;
+  }
+
+  if(addr == 0x3804) {
+    data = bridge.status();
+  }
+
+  return data;
+}
+
+auto ArmDSP::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+
+  addr &= 0xff06;
+
+  if(addr == 0x3802) {
+    bridge.cputoarm.ready = true;
+    bridge.cputoarm.data = data;
+  }
+
+  if(addr == 0x3804) {
+    data &= 1;
+    if(!bridge.reset && data) resetARM();
+    bridge.reset = data;
+  }
+}
+
+auto ArmDSP::init() -> void {
+}
+
+auto ArmDSP::load() -> void {
+}
+
+auto ArmDSP::unload() -> void {
+}
+
+auto ArmDSP::power() -> void {
+  for(auto n : range(16 * 1024)) programRAM[n] = random(0x00);
+}
+
+auto ArmDSP::reset() -> void {
+  bridge.reset = false;
+  resetARM();
+}
+
+auto ArmDSP::resetARM() -> void {
+  create(ArmDSP::Enter, 21'477'272);
+  ARM::power();
+
+  bridge.ready = false;
+  bridge.signal = false;
+  bridge.timer = 0;
+  bridge.timerlatch = 0;
+  bridge.cputoarm.ready = false;
+  bridge.armtocpu.ready = false;
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/armdsp/armdsp.hpp b/higan/sfc-balanced/coprocessor/armdsp/armdsp.hpp
new file mode 100644
index 0000000..68d71bb
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/armdsp/armdsp.hpp
@@ -0,0 +1,36 @@
+//ARMv3 (ARM60)
+
+struct ArmDSP : Processor::ARM, Thread {
+  #include "registers.hpp"
+
+  ArmDSP();
+  ~ArmDSP();
+
+  static auto Enter() -> void;
+  auto boot() -> void;
+  auto main() -> void;
+
+  auto step(uint clocks) -> void override;
+  auto _idle() -> void override;
+  auto _read(uint mode, uint32 addr) -> uint32 override;
+  auto _write(uint mode, uint32 addr, uint32 word) -> void override;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+  auto resetARM() -> void;
+
+  auto firmware() const -> nall::vector<uint8>;
+  auto serialize(serializer&) -> void;
+
+  uint8* programROM;
+  uint8* dataROM;
+  uint8* programRAM;
+};
+
+extern ArmDSP armdsp;
diff --git a/higan/sfc-balanced/coprocessor/armdsp/memory.cpp b/higan/sfc-balanced/coprocessor/armdsp/memory.cpp
new file mode 100644
index 0000000..ceb0d4e
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/armdsp/memory.cpp
@@ -0,0 +1,91 @@
+//note: timings are completely unverified
+//due to the ST018 chip design (on-die ROM), testing is nearly impossible
+
+auto ArmDSP::_idle() -> void {
+  step(1);
+}
+
+auto ArmDSP::_read(uint mode, uint32 addr) -> uint32 {
+  step(1);
+
+  static auto memory = [&](const uint8* memory, uint mode, uint32 addr) -> uint32 {
+    if(mode & Word) {
+      memory += addr & ~3;
+      return memory[0] << 0 | memory[1] << 8 | memory[2] << 16 | memory[3] << 24;
+    } else if(mode & Byte) {
+      return memory[addr];
+    } else {
+      return 0;  //should never occur
+    }
+  };
+
+  switch(addr & 0xe000'0000) {
+  case 0x0000'0000: return memory(programROM, mode, addr & 0x1ffff);
+  case 0x2000'0000: return pipeline.fetch.instruction;
+  case 0x4000'0000: break;
+  case 0x6000'0000: return 0x40404001;
+  case 0x8000'0000: return pipeline.fetch.instruction;
+  case 0xa000'0000: return memory(dataROM, mode, addr & 0x7fff);
+  case 0xc000'0000: return pipeline.fetch.instruction;
+  case 0xe000'0000: return memory(programRAM, mode, addr & 0x3fff);
+  }
+
+  addr &= 0xe000'003f;
+
+  if(addr == 0x4000'0010) {
+    if(bridge.cputoarm.ready) {
+      bridge.cputoarm.ready = false;
+      return bridge.cputoarm.data;
+    }
+  }
+
+  if(addr == 0x4000'0020) {
+    return bridge.status();
+  }
+
+  return 0;
+}
+
+auto ArmDSP::_write(uint mode, uint32 addr, uint32 word) -> void {
+  step(1);
+
+  static auto memory = [](uint8* memory, uint mode, uint32 addr, uint32 word) {
+    if(mode & Word) {
+      memory += addr & ~3;
+      *memory++ = word >>  0;
+      *memory++ = word >>  8;
+      *memory++ = word >> 16;
+      *memory++ = word >> 24;
+    } else if(mode & Byte) {
+      memory += addr;
+      *memory++ = word >>  0;
+    }
+  };
+
+  switch(addr & 0xe000'0000) {
+  case 0x0000'0000: return;
+  case 0x2000'0000: return;
+  case 0x4000'0000: break;
+  case 0x6000'0000: return;
+  case 0x8000'0000: return;
+  case 0xa000'0000: return;
+  case 0xc000'0000: return;
+  case 0xe000'0000: return memory(programRAM, mode, addr & 0x3fff, word);
+  }
+
+  addr &= 0xe000'003f;
+  word &= 0x0000'00ff;
+
+  if(addr == 0x4000'0000) {
+    bridge.armtocpu.ready = true;
+    bridge.armtocpu.data = word;
+  }
+
+  if(addr == 0x4000'0010) bridge.signal = true;
+
+  if(addr == 0x4000'0020) bridge.timerlatch.byte(0) = word;
+  if(addr == 0x4000'0024) bridge.timerlatch.byte(1) = word;
+  if(addr == 0x4000'0028) bridge.timerlatch.byte(2) = word;
+
+  if(addr == 0x4000'002c) bridge.timer = bridge.timerlatch;
+}
diff --git a/higan/sfc-balanced/coprocessor/armdsp/registers.hpp b/higan/sfc-balanced/coprocessor/armdsp/registers.hpp
new file mode 100644
index 0000000..c05a097
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/armdsp/registers.hpp
@@ -0,0 +1,22 @@
+struct Bridge {
+  struct Buffer {
+    bool ready;
+    uint8 data;
+  };
+  Buffer cputoarm;
+  Buffer armtocpu;
+  uint32 timer;
+  uint32 timerlatch;
+  bool reset;
+  bool ready;
+  bool signal;
+
+  auto status() const -> uint8 {
+    return (
+      armtocpu.ready << 0
+    | signal         << 2
+    | cputoarm.ready << 3
+    | ready          << 7
+    );
+  }
+} bridge;
diff --git a/higan/sfc-balanced/coprocessor/armdsp/serialization.cpp b/higan/sfc-balanced/coprocessor/armdsp/serialization.cpp
new file mode 100644
index 0000000..fbfba45
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/armdsp/serialization.cpp
@@ -0,0 +1,25 @@
+auto ArmDSP::firmware() const -> nall::vector<uint8> {
+  nall::vector<uint8> buffer;
+  if(!cartridge.has.ARMDSP) return buffer;
+  buffer.reserve(128 * 1024 + 32 * 1024);
+  for(auto n : range(128 * 1024)) buffer.append(programROM[n]);
+  for(auto n : range( 32 * 1024)) buffer.append(dataROM[n]);
+  return buffer;
+}
+
+auto ArmDSP::serialize(serializer& s) -> void {
+  ARM::serialize(s);
+  Thread::serialize(s);
+
+  s.array(programRAM, 16 * 1024);
+
+  s.integer(bridge.cputoarm.ready);
+  s.integer(bridge.cputoarm.data);
+  s.integer(bridge.armtocpu.ready);
+  s.integer(bridge.armtocpu.data);
+  s.integer(bridge.timer);
+  s.integer(bridge.timerlatch);
+  s.integer(bridge.reset);
+  s.integer(bridge.ready);
+  s.integer(bridge.signal);
+}
diff --git a/higan/sfc-balanced/coprocessor/coprocessor.hpp b/higan/sfc-balanced/coprocessor/coprocessor.hpp
new file mode 100644
index 0000000..47061bf
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/coprocessor.hpp
@@ -0,0 +1,20 @@
+#include <sfc-balanced/coprocessor/icd2/icd2.hpp>
+#include <sfc-balanced/coprocessor/mcc/mcc.hpp>
+#include <sfc-balanced/coprocessor/nss/nss.hpp>
+#include <sfc-balanced/coprocessor/event/event.hpp>
+
+#include <sfc-balanced/coprocessor/sa1/sa1.hpp>
+#include <sfc-balanced/coprocessor/superfx/superfx.hpp>
+
+#include <sfc-balanced/coprocessor/armdsp/armdsp.hpp>
+#include <sfc-balanced/coprocessor/hitachidsp/hitachidsp.hpp>
+#include <sfc-balanced/coprocessor/necdsp/necdsp.hpp>
+
+#include <sfc-balanced/coprocessor/epsonrtc/epsonrtc.hpp>
+#include <sfc-balanced/coprocessor/sharprtc/sharprtc.hpp>
+
+#include <sfc-balanced/coprocessor/spc7110/spc7110.hpp>
+#include <sfc-balanced/coprocessor/sdd1/sdd1.hpp>
+#include <sfc-balanced/coprocessor/obc1/obc1.hpp>
+
+#include <sfc-balanced/coprocessor/msu1/msu1.hpp>
diff --git a/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.cpp b/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.cpp
new file mode 100644
index 0000000..a88f4f5
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.cpp
@@ -0,0 +1,203 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "memory.cpp"
+#include "time.cpp"
+#include "serialization.cpp"
+EpsonRTC epsonrtc;
+
+auto EpsonRTC::Enter() -> void {
+  while(true) scheduler.synchronize(), epsonrtc.main();
+}
+
+auto EpsonRTC::main() -> void {
+  if(wait) { if(--wait == 0) ready = 1; }
+
+  clocks++;
+  if((clocks & ~0x00ff) == 0) roundSeconds();  //125 microseconds
+  if((clocks & ~0x3fff) == 0) duty();  //1/128th second
+  if((clocks & ~0x7fff) == 0) irq(0);  //1/64th second
+  if(clocks == 0) {  //1 second
+    seconds++;
+    irq(1);
+    if(seconds %   60 == 0) irq(2);  //1 minute
+    if(seconds % 1440 == 0) irq(3), seconds = 0;  //1 hour
+    tick();
+  }
+
+  step(1);
+  synchronize(cpu);
+}
+
+auto EpsonRTC::init() -> void {
+}
+
+auto EpsonRTC::load() -> void {
+  secondlo = 0;
+  secondhi = 0;
+  batteryfailure = 1;
+
+  minutelo = 0;
+  minutehi = 0;
+  resync = 0;
+
+  hourlo = 0;
+  hourhi = 0;
+  meridian = 0;
+
+  daylo = 0;
+  dayhi = 0;
+  dayram = 0;
+
+  monthlo = 0;
+  monthhi = 0;
+  monthram = 0;
+
+  yearlo = 0;
+  yearhi = 0;
+
+  weekday = 0;
+
+  hold = 0;
+  calendar = 0;
+  irqflag = 0;
+  roundseconds = 0;
+
+  irqmask = 0;
+  irqduty = 0;
+  irqperiod = 0;
+
+  pause = 0;
+  stop = 0;
+  atime = 0;
+  test = 0;
+}
+
+auto EpsonRTC::unload() -> void {
+}
+
+auto EpsonRTC::power() -> void {
+}
+
+auto EpsonRTC::reset() -> void {
+  create(EpsonRTC::Enter, 32'768 * 64);
+
+  clocks = 0;
+  seconds = 0;
+
+  chipselect = 0;
+  state = State::Mode;
+  offset = 0;
+  wait = 0;
+  ready = 0;
+  holdtick = 0;
+}
+
+auto EpsonRTC::sync() -> void {
+  time_t systime = time(0);
+  tm* timeinfo = localtime(&systime);
+
+  uint second = min(59, timeinfo->tm_sec);
+  secondlo = second % 10;
+  secondhi = second / 10;
+
+  uint minute = timeinfo->tm_min;
+  minutelo = minute % 10;
+  minutehi = minute / 10;
+
+  uint hour = timeinfo->tm_hour;
+  if(atime) {
+    hourlo = hour % 10;
+    hourhi = hour / 10;
+  } else {
+    meridian = hour >= 12;
+    hour %= 12;
+    if(hour == 0) hour = 12;
+    hourlo = hour % 10;
+    hourhi = hour / 10;
+  }
+
+  uint day = timeinfo->tm_mday;
+  daylo = day % 10;
+  dayhi = day / 10;
+
+  uint month = 1 + timeinfo->tm_mon;
+  monthlo = month % 10;
+  monthhi = month / 10;
+
+  uint year = timeinfo->tm_year % 100;
+  yearlo = year % 10;
+  yearhi = year / 10;
+
+  weekday = timeinfo->tm_wday;
+
+  resync = true;  //alert program that time has changed
+}
+
+auto EpsonRTC::read(uint24 addr, uint8 data) -> uint8 {
+  cpu.synchronize(*this);
+  addr &= 3;
+
+  if(addr == 0) {
+    return chipselect;
+  }
+
+  if(addr == 1) {
+    if(chipselect != 1) return 0;
+    if(ready == 0) return 0;
+    if(state == State::Write) return mdr;
+    if(state != State::Read) return 0;
+    ready = 0;
+    wait = 8;
+    return rtcRead(offset++);
+  }
+
+  if(addr == 2) {
+    return ready << 7;
+  }
+
+  return data;
+}
+
+auto EpsonRTC::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+  addr &= 3, data &= 15;
+
+  if(addr == 0) {
+    chipselect = data;
+    if(chipselect != 1) rtcReset();
+    ready = 1;
+  }
+
+  if(addr == 1) {
+    if(chipselect != 1) return;
+    if(ready == 0) return;
+
+    if(state == State::Mode) {
+      if(data != 0x03 && data != 0x0c) return;
+      state = State::Seek;
+      ready = 0;
+      wait = 8;
+      mdr = data;
+    }
+
+    else if(state == State::Seek) {
+      if(mdr == 0x03) state = State::Write;
+      if(mdr == 0x0c) state = State::Read;
+      offset = data;
+      ready = 0;
+      wait = 8;
+      mdr = data;
+    }
+
+    else if(state == State::Write) {
+      rtcWrite(offset++, data);
+      ready = 0;
+      wait = 8;
+      mdr = data;
+    }
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.hpp b/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.hpp
new file mode 100644
index 0000000..4a40313
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/epsonrtc/epsonrtc.hpp
@@ -0,0 +1,91 @@
+//Epson RTC-4513 Real-Time Clock
+
+struct EpsonRTC : Thread {
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+  auto sync() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  uint21 clocks;
+  uint seconds;
+
+  uint2 chipselect;
+  enum class State : uint { Mode, Seek, Read, Write } state;
+  uint4 mdr;
+  uint4 offset;
+  uint wait;
+  uint1 ready;
+  uint1 holdtick;
+
+  uint4 secondlo;
+  uint3 secondhi;
+  uint1 batteryfailure;
+
+  uint4 minutelo;
+  uint3 minutehi;
+  uint1 resync;
+
+  uint4 hourlo;
+  uint2 hourhi;
+  uint1 meridian;
+
+  uint4 daylo;
+  uint2 dayhi;
+  uint1 dayram;
+
+  uint4 monthlo;
+  uint1 monthhi;
+  uint2 monthram;
+
+  uint4 yearlo;
+  uint4 yearhi;
+
+  uint3 weekday;
+
+  uint1 hold;
+  uint1 calendar;
+  uint1 irqflag;
+  uint1 roundseconds;
+
+  uint1 irqmask;
+  uint1 irqduty;
+  uint2 irqperiod;
+
+  uint1 pause;
+  uint1 stop;
+  uint1 atime;  //astronomical time (24-hour mode)
+  uint1 test;
+
+  //memory.cpp
+  auto rtcReset() -> void;
+  auto rtcRead(uint4 addr) -> uint4;
+  auto rtcWrite(uint4 addr, uint4 data) -> void;
+
+  auto load(const uint8* data) -> void;
+  auto save(uint8* data) -> void;
+
+  //time.cpp
+  auto irq(uint2 period) -> void;
+  auto duty() -> void;
+  auto roundSeconds() -> void;
+  auto tick() -> void;
+
+  auto tickSecond() -> void;
+  auto tickMinute() -> void;
+  auto tickHour() -> void;
+  auto tickDay() -> void;
+  auto tickMonth() -> void;
+  auto tickYear() -> void;
+};
+
+extern EpsonRTC epsonrtc;
diff --git a/higan/sfc-balanced/coprocessor/epsonrtc/memory.cpp b/higan/sfc-balanced/coprocessor/epsonrtc/memory.cpp
new file mode 100644
index 0000000..f3ab59e
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/epsonrtc/memory.cpp
@@ -0,0 +1,180 @@
+auto EpsonRTC::rtcReset() -> void {
+  state = State::Mode;
+  offset = 0;
+
+  resync = 0;
+  pause = 0;
+  test = 0;
+}
+
+auto EpsonRTC::rtcRead(uint4 addr) -> uint4 {
+  switch(addr) { default:
+  case  0: return secondlo;
+  case  1: return secondhi | batteryfailure << 3;
+  case  2: return minutelo;
+  case  3: return minutehi | resync << 3;
+  case  4: return hourlo;
+  case  5: return hourhi | meridian << 2 | resync << 3;
+  case  6: return daylo;
+  case  7: return dayhi | dayram << 2 | resync << 3;
+  case  8: return monthlo;
+  case  9: return monthhi | monthram << 1 | resync << 3;
+  case 10: return yearlo;
+  case 11: return yearhi;
+  case 12: return weekday | resync << 3;
+  case 13: {
+    uint1 readflag = irqflag & !irqmask;
+    irqflag = 0;
+    return hold | calendar << 1 | readflag << 2 | roundseconds << 3;
+  }
+  case 14: return irqmask | irqduty << 1 | irqperiod << 2;
+  case 15: return pause | stop << 1 | atime << 2 | test << 3;
+  }
+}
+
+auto EpsonRTC::rtcWrite(uint4 addr, uint4 data) -> void {
+  switch(addr) {
+  case 0:
+    secondlo = data;
+    break;
+  case 1:
+    secondhi = data;
+    batteryfailure = data >> 3;
+    break;
+  case 2:
+    minutelo = data;
+    break;
+  case 3:
+    minutehi = data;
+    break;
+  case 4:
+    hourlo = data;
+    break;
+  case 5:
+    hourhi = data;
+    meridian = data >> 2;
+    if(atime == 1) meridian = 0;
+    if(atime == 0) hourhi &= 1;
+    break;
+  case 6:
+    daylo = data;
+    break;
+  case 7:
+    dayhi = data;
+    dayram = data >> 2;
+    break;
+  case 8:
+    monthlo = data;
+    break;
+  case 9:
+    monthhi = data;
+    monthram = data >> 1;
+    break;
+  case 10:
+    yearlo = data;
+    break;
+  case 11:
+    yearhi = data;
+    break;
+  case 12:
+    weekday = data;
+    break;
+  case 13: {
+    bool held = hold;
+    hold = data;
+    calendar = data >> 1;
+    roundseconds = data >> 3;
+    if(held == 1 && hold == 0 && holdtick == 1) {
+      //if a second has passed during hold, increment one second upon resuming
+      holdtick = 0;
+      tickSecond();
+    }
+  } break;
+  case 14:
+    irqmask = data;
+    irqduty = data >> 1;
+    irqperiod = data >> 2;
+    break;
+  case 15:
+    pause = data;
+    stop = data >> 1;
+    atime = data >> 2;
+    test = data >> 3;
+    if(atime == 1) meridian = 0;
+    if(atime == 0) hourhi &= 1;
+    if(pause) {
+      secondlo = 0;
+      secondhi = 0;
+    }
+    break;
+  }
+}
+
+auto EpsonRTC::load(const uint8* data) -> void {
+  secondlo = data[0] >> 0;
+  secondhi = data[0] >> 4;
+  batteryfailure = data[0] >> 7;
+
+  minutelo = data[1] >> 0;
+  minutehi = data[1] >> 4;
+  resync = data[1] >> 7;
+
+  hourlo = data[2] >> 0;
+  hourhi = data[2] >> 4;
+  meridian = data[2] >> 6;
+
+  daylo = data[3] >> 0;
+  dayhi = data[3] >> 4;
+  dayram = data[3] >> 6;
+
+  monthlo = data[4] >> 0;
+  monthhi = data[4] >> 4;
+  monthram = data[4] >> 5;
+
+  yearlo = data[5] >> 0;
+  yearhi = data[5] >> 4;
+
+  weekday = data[6] >> 0;
+
+  hold = data[6] >> 4;
+  calendar = data[6] >> 5;
+  irqflag = data[6] >> 6;
+  roundseconds = data[6] >> 7;
+
+  irqmask = data[7] >> 0;
+  irqduty = data[7] >> 1;
+  irqperiod = data[7] >> 2;
+
+  pause = data[7] >> 4;
+  stop = data[7] >> 5;
+  atime = data[7] >> 6;
+  test = data[7] >> 7;
+
+  uint64 timestamp = 0;
+  for(auto byte : range(8)) {
+    timestamp |= data[8 + byte] << (byte * 8);
+  }
+
+  uint64 diff = (uint64)time(0) - timestamp;
+  while(diff >= 60 * 60 * 24) { tickDay(); diff -= 60 * 60 * 24; }
+  while(diff >= 60 * 60) { tickHour(); diff -= 60 * 60; }
+  while(diff >= 60) { tickMinute(); diff -= 60; }
+  while(diff--) tickSecond();
+}
+
+auto EpsonRTC::save(uint8* data) -> void {
+  data[0] = secondlo << 0 | secondhi << 4 | batteryfailure << 7;
+  data[1] = minutelo << 0 | minutehi << 4 | resync << 7;
+  data[2] = hourlo << 0 | hourhi << 4 | meridian << 6 | resync << 7;
+  data[3] = daylo << 0 | dayhi << 4 | dayram << 6 | resync << 7;
+  data[4] = monthlo << 0 | monthhi << 4 | monthram << 5 | resync << 7;
+  data[5] = yearlo << 0 | yearhi << 4;
+  data[6] = weekday << 0 | resync << 3 | hold << 4 | calendar << 5 | irqflag << 6 | roundseconds << 7;
+  data[7] = irqmask << 0 | irqduty << 1 | irqperiod << 2 | pause << 4 | stop << 5 | atime << 6 | test << 7;
+
+  uint64 timestamp = (uint64)time(0);
+  for(auto byte : range(8)) {
+    data[8 + byte] = timestamp;
+    timestamp >>= 8;
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/epsonrtc/serialization.cpp b/higan/sfc-balanced/coprocessor/epsonrtc/serialization.cpp
new file mode 100644
index 0000000..0b75af6
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/epsonrtc/serialization.cpp
@@ -0,0 +1,53 @@
+auto EpsonRTC::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+
+  s.integer(clocks);
+  s.integer(seconds);
+
+  s.integer(chipselect);
+  s.integer((uint&)state);
+  s.integer(mdr);
+  s.integer(offset);
+  s.integer(wait);
+  s.integer(ready);
+  s.integer(holdtick);
+
+  s.integer(secondlo);
+  s.integer(secondhi);
+  s.integer(batteryfailure);
+
+  s.integer(minutelo);
+  s.integer(minutehi);
+  s.integer(resync);
+
+  s.integer(hourlo);
+  s.integer(hourhi);
+  s.integer(meridian);
+
+  s.integer(daylo);
+  s.integer(dayhi);
+  s.integer(dayram);
+
+  s.integer(monthlo);
+  s.integer(monthhi);
+  s.integer(monthram);
+
+  s.integer(yearlo);
+  s.integer(yearhi);
+
+  s.integer(weekday);
+
+  s.integer(hold);
+  s.integer(calendar);
+  s.integer(irqflag);
+  s.integer(roundseconds);
+
+  s.integer(irqmask);
+  s.integer(irqduty);
+  s.integer(irqperiod);
+
+  s.integer(pause);
+  s.integer(stop);
+  s.integer(atime);
+  s.integer(test);
+}
diff --git a/higan/sfc-balanced/coprocessor/epsonrtc/time.cpp b/higan/sfc-balanced/coprocessor/epsonrtc/time.cpp
new file mode 100644
index 0000000..08c13a4
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/epsonrtc/time.cpp
@@ -0,0 +1,182 @@
+auto EpsonRTC::irq(uint2 period) -> void {
+  if(stop || pause) return;
+
+  if(period == irqperiod) irqflag = 1;
+}
+
+auto EpsonRTC::duty() -> void {
+  if(irqduty) irqflag = 0;
+}
+
+auto EpsonRTC::roundSeconds() -> void {
+  if(roundseconds == 0) return;
+  roundseconds = 0;
+
+  if(secondhi >= 3) tickMinute();
+  secondlo = 0;
+  secondhi = 0;
+}
+
+auto EpsonRTC::tick() -> void {
+  if(stop || pause) return;
+
+  if(hold) {
+    holdtick = 1;
+    return;
+  }
+
+  resync = 1;
+  tickSecond();
+}
+
+//below code provides bit-perfect emulation of invalid BCD values on the RTC-4513
+//code makes extensive use of variable-length integers (see epsonrtc.hpp for sizes)
+
+auto EpsonRTC::tickSecond() -> void {
+  if(secondlo <= 8 || secondlo == 12) {
+    secondlo++;
+  } else {
+    secondlo = 0;
+    if(secondhi < 5) {
+      secondhi++;
+    } else {
+      secondhi = 0;
+      tickMinute();
+    }
+  }
+}
+
+auto EpsonRTC::tickMinute() -> void {
+  if(minutelo <= 8 || minutelo == 12) {
+    minutelo++;
+  } else {
+    minutelo = 0;
+    if(minutehi < 5) {
+      minutehi++;
+    } else {
+      minutehi = 0;
+      tickHour();
+    }
+  }
+}
+
+auto EpsonRTC::tickHour() -> void {
+  if(atime) {
+    if(hourhi < 2) {
+      if(hourlo <= 8 || hourlo == 12) {
+        hourlo++;
+      } else {
+        hourlo = !(hourlo & 1);
+        hourhi++;
+      }
+    } else {
+      if(hourlo != 3 && !(hourlo & 4)) {
+        if(hourlo <= 8 || hourlo >= 12) {
+          hourlo++;
+        } else {
+          hourlo = !(hourlo & 1);
+          hourhi++;
+        }
+      } else {
+        hourlo = !(hourlo & 1);
+        hourhi = 0;
+        tickDay();
+      }
+    }
+  } else {
+    if(hourhi == 0) {
+      if(hourlo <= 8 || hourlo == 12) {
+        hourlo++;
+      } else {
+        hourlo = !(hourlo & 1);
+        hourhi ^= 1;
+      }
+    } else {
+      if(hourlo & 1) meridian ^= 1;
+      if(hourlo < 2 || hourlo == 4 || hourlo == 5 || hourlo == 8 || hourlo == 12) {
+        hourlo++;
+      } else {
+        hourlo = !(hourlo & 1);
+        hourhi ^= 1;
+      }
+      if(meridian == 0 && !(hourlo & 1)) tickDay();
+    }
+  }
+}
+
+auto EpsonRTC::tickDay() -> void {
+  if(calendar == 0) return;
+  weekday = (weekday + 1) + (weekday == 6);
+
+  //January - December = 0x01 - 0x09; 0x10 - 0x12
+  static const uint daysinmonth[32] = {
+    30, 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31, 30, 31, 30,
+    31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30, 31, 30,
+  };
+
+  uint days = daysinmonth[monthhi << 4 | monthlo];
+  if(days == 28) {
+    //add one day for leap years
+    if((yearhi & 1) == 0 && ((yearlo - 0) & 3) == 0) days++;
+    if((yearhi & 1) == 1 && ((yearlo - 2) & 3) == 0) days++;
+  }
+
+  if(days == 28 && (dayhi == 3 || (dayhi == 2 && daylo >= 8))) {
+    daylo = 1;
+    dayhi = 0;
+    return tickMonth();
+  }
+
+  if(days == 29 && (dayhi == 3 || (dayhi == 2 && (daylo > 8 && daylo != 12)))) {
+    daylo = 1;
+    dayhi = 0;
+    return tickMonth();
+  }
+
+  if(days == 30 && (dayhi == 3 || (dayhi == 2 && (daylo == 10 || daylo == 14)))) {
+    daylo = 1;
+    dayhi = 0;
+    return tickMonth();
+  }
+
+  if(days == 31 && (dayhi == 3 && (daylo & 3))) {
+    daylo = 1;
+    dayhi = 0;
+    return tickMonth();
+  }
+
+  if(daylo <= 8 || daylo == 12) {
+    daylo++;
+  } else {
+    daylo = !(daylo & 1);
+    dayhi++;
+  }
+}
+
+auto EpsonRTC::tickMonth() -> void {
+  if(monthhi == 0 || !(monthlo & 2)) {
+    if(monthlo <= 8 || monthlo == 12) {
+      monthlo++;
+    } else {
+      monthlo = !(monthlo & 1);
+      monthhi ^= 1;
+    }
+  } else {
+    monthlo = !(monthlo & 1);
+    monthhi = 0;
+    tickYear();
+  }
+}
+
+auto EpsonRTC::tickYear() -> void {
+  if(yearlo <= 8 || yearlo == 12) {
+    yearlo++;
+  } else {
+    yearlo = !(yearlo & 1);
+    if(yearhi <= 8 || yearhi == 12) {
+      yearhi++;
+    } else {
+      yearhi = !(yearhi & 1);
+    }
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/event/event.cpp b/higan/sfc-balanced/coprocessor/event/event.cpp
new file mode 100644
index 0000000..d4ce1ae
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/event/event.cpp
@@ -0,0 +1,127 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+Event event;
+
+auto Event::Enter() -> void {
+  while(true) scheduler.synchronize(), event.main();
+}
+
+auto Event::main() -> void {
+  if(scoreActive && scoreSecondsRemaining) {
+    if(--scoreSecondsRemaining == 0) {
+      scoreActive = false;
+    }
+  }
+
+  if(timerActive && timerSecondsRemaining) {
+    if(--timerSecondsRemaining == 0) {
+      timerActive = false;
+      status |= 0x02;  //time over
+      scoreActive = true;
+      scoreSecondsRemaining = 5;
+    }
+  }
+
+  step(1);
+  synchronize(cpu);
+}
+
+auto Event::init() -> void {
+}
+
+auto Event::load() -> void {
+}
+
+auto Event::unload() -> void {
+  rom[0].reset();
+  rom[1].reset();
+  rom[2].reset();
+  rom[3].reset();
+  ram.reset();
+}
+
+auto Event::power() -> void {
+}
+
+auto Event::reset() -> void {
+  create(Event::Enter, 1);
+
+  for(auto n : range(ram.size())) ram.write(n, 0x00);
+  status = 0x00;
+  select = 0x00;
+  timerActive = false;
+  scoreActive = false;
+  timerSecondsRemaining = 0;
+  scoreSecondsRemaining = 0;
+}
+
+auto Event::mcuRead(uint24 addr, uint8 data) -> uint8 {
+  if(board == Board::CampusChallenge92) {
+    uint id = 0;
+    if(select == 0x09) id = 1;
+    if(select == 0x05) id = 2;
+    if(select == 0x03) id = 3;
+    if((addr & 0x808000) == 0x808000) id = 0;
+
+    if(addr & 0x008000) {
+      addr = ((addr & 0x7f0000) >> 1) | (addr & 0x7fff);
+      return rom[id].read(bus.mirror(addr, rom[id].size()), data);
+    }
+  }
+
+  if(board == Board::Powerfest94) {
+    uint id = 0;
+    if(select == 0x09) id = 1;
+    if(select == 0x0c) id = 2;
+    if(select == 0x0a) id = 3;
+    if((addr & 0x208000) == 0x208000) id = 0;
+
+    if(addr & 0x400000) {
+      addr &= 0x3fffff;
+      return rom[id].read(bus.mirror(addr, rom[id].size()), data);
+    }
+
+    if(addr & 0x008000) {
+      addr &= 0x1fffff;
+      if(id != 2) addr = ((addr & 0x1f0000) >> 1) | (addr & 0x7fff);
+      return rom[id].read(bus.mirror(addr, rom[id].size()), data);
+    }
+  }
+
+  return data;
+}
+
+auto Event::mcuWrite(uint24 addr, uint8 data) -> void {
+}
+
+auto Event::read(uint24 addr, uint8 data) -> uint8 {
+  if(addr == 0x106000 || addr == 0xc00000) {
+    return status;
+  }
+  return data;
+}
+
+auto Event::write(uint24 addr, uint8 data) -> void {
+  if(addr == 0x206000 || addr == 0xe00000) {
+    select = data;
+    if(timer && data == 0x09) {
+      timerActive = true;
+      timerSecondsRemaining = timer;
+    }
+  }
+}
+
+auto Event::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+  s.array(ram.data(), ram.size());
+  s.integer(status);
+  s.integer(select);
+  s.integer(timerActive);
+  s.integer(scoreActive);
+  s.integer(timerSecondsRemaining);
+  s.integer(scoreSecondsRemaining);
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/event/event.hpp b/higan/sfc-balanced/coprocessor/event/event.hpp
new file mode 100644
index 0000000..5373ac4
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/event/event.hpp
@@ -0,0 +1,39 @@
+//SNES-EVENT board emulation:
+//* Campus Challenge '92
+//* Powerfest '94
+
+struct Event : Thread {
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto mcuRead(uint24 addr, uint8) -> uint8;
+  auto mcuWrite(uint24 addr, uint8) -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  MappedRAM rom[4];
+  MappedRAM ram;
+
+  enum class Board : uint { CampusChallenge92, Powerfest94 } board;
+  uint timer;
+
+privileged:
+  uint8 status;
+  uint8 select;
+
+  bool timerActive;
+  bool scoreActive;
+
+  uint timerSecondsRemaining;
+  uint scoreSecondsRemaining;
+};
+
+extern Event event;
diff --git a/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.cpp b/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.cpp
new file mode 100644
index 0000000..c832001
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.cpp
@@ -0,0 +1,60 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "memory.cpp"
+#include "serialization.cpp"
+HitachiDSP hitachidsp;
+
+auto HitachiDSP::Enter() -> void {
+  while(true) scheduler.synchronize(), hitachidsp.main();
+}
+
+auto HitachiDSP::main() -> void {
+  if(mmio.dma) {
+    for(auto n : range(mmio.dmaLength)) {
+      write(mmio.dmaTarget + n, read(mmio.dmaSource + n));
+      step(2);
+      synchronize(cpu);
+    }
+    mmio.dma = false;
+  }
+
+  exec(mmio.programOffset);
+  step(1);
+  synchronize(cpu);
+}
+
+auto HitachiDSP::init() -> void {
+}
+
+auto HitachiDSP::load() -> void {
+}
+
+auto HitachiDSP::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+auto HitachiDSP::power() -> void {
+  mmio.dma = false;
+
+  mmio.dmaSource = 0x000000;
+  mmio.dmaLength = 0x0000;
+  mmio.dmaTarget = 0x000000;
+  mmio.r1f48 = 0x00;
+  mmio.programOffset = 0x000000;
+  mmio.r1f4c = 0x00;
+  mmio.pageNumber = 0x0000;
+  mmio.programCounter = 0x00;
+  mmio.r1f50 = 0x33;
+  mmio.r1f51 = 0x00;
+  mmio.r1f52 = 0x01;
+}
+
+auto HitachiDSP::reset() -> void {
+  create(HitachiDSP::Enter, Frequency);
+  HG51B::power();
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.hpp b/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.hpp
new file mode 100644
index 0000000..586652f
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/hitachidsp/hitachidsp.hpp
@@ -0,0 +1,58 @@
+struct HitachiDSP : Processor::HG51B, Thread {
+  MappedRAM rom;
+  MappedRAM ram;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //HG51B read/write
+  auto read(uint24 addr) -> uint8 override;
+  auto write(uint24 addr, uint8 data) -> void override;
+
+  //CPU ROM read/write
+  auto romRead(uint24 addr, uint8 data) -> uint8;
+  auto romWrite(uint24 addr, uint8 data) -> void;
+
+  //CPU RAM read/write
+  auto ramRead(uint24 addr, uint8 data) -> uint8;
+  auto ramWrite(uint24 addr, uint8 data) -> void;
+
+  //HG51B data RAM read/write
+  auto dramRead(uint24 addr, uint8 data) -> uint8;
+  auto dramWrite(uint24 addr, uint8 data) -> void;
+
+  //CPU MMIO read/write
+  auto dspRead(uint24 addr, uint8 data) -> uint8;
+  auto dspWrite(uint24 addr, uint8 data) -> void;
+
+  auto firmware() const -> vector<uint8>;
+  auto serialize(serializer&) -> void;
+
+  uint Frequency;
+  uint Roms;
+
+  struct MMIO {
+    bool dma;  //true during DMA transfers
+
+    uint24 dmaSource;       //$1f40-$1f42
+    uint24 dmaLength;       //$1f43-$1f44
+    uint24 dmaTarget;       //$1f45-$1f47
+    uint8  r1f48;           //$1f48
+    uint24 programOffset;   //$1f49-$1f4b
+    uint8  r1f4c;           //$1f4c
+    uint16 pageNumber;      //$1f4d-$1f4e
+    uint8  programCounter;  //$1f4f
+    uint8  r1f50;           //$1f50
+    uint8  r1f51;           //$1f51
+    uint8  r1f52;           //$1f52
+    uint8  vector[32];      //$1f60-$1f7f
+  } mmio;
+};
+
+extern HitachiDSP hitachidsp;
diff --git a/higan/sfc-balanced/coprocessor/hitachidsp/memory.cpp b/higan/sfc-balanced/coprocessor/hitachidsp/memory.cpp
new file mode 100644
index 0000000..167c9f3
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/hitachidsp/memory.cpp
@@ -0,0 +1,166 @@
+auto HitachiDSP::read(uint24 addr) -> uint8 {
+  if((addr & 0x40ec00) == 0x006c00) {  //$00-3f,80-bf:6c00-6cff,7c00-7cff
+    return dspRead(addr, 0x00);
+  }
+  if((addr & 0x40e000) == 0x006000) {  //$00-3f,80-bf:6000-6bff,7000-7bff
+    return dramRead(addr, 0x00);
+  }
+  if((addr & 0x408000) == 0x008000) {  //$00-3f,80-bf:8000-ffff
+    if(rom.size() == 0) return 0x00;
+    addr = ((addr & 0x3f0000) >> 1) | (addr & 0x7fff);
+    addr = Bus::mirror(addr, rom.size());
+    return rom.read(addr, 0);
+  }
+  if((addr & 0xf88000) == 0x700000) {  //$70-77:0000-7fff
+    if(ram.size() == 0) return 0x00;
+    addr = ((addr & 0x070000) >> 1) | (addr & 0x7fff);
+    addr = Bus::mirror(addr, ram.size());
+    return ram.read(addr);
+  }
+  return 0x00;
+}
+
+auto HitachiDSP::write(uint24 addr, uint8 data) -> void {
+  if((addr & 0x40ec00) == 0x006c00) {  //$00-3f,80-bf:6c00-6fff,7c00-7fff
+    return dspWrite(addr, data);
+  }
+  if((addr & 0x40e000) == 0x006000) {  //$00-3f,80-bf:6000-6bff,7000-7bff
+    return dramWrite(addr, data);
+  }
+  if((addr & 0xf88000) == 0x700000) {  //$70-77:0000-7fff
+    if(ram.size() == 0) return;
+    addr = ((addr & 0x070000) >> 1) | (addr & 0x7fff);
+    addr = Bus::mirror(addr, ram.size());
+    return ram.write(addr, data);
+  }
+}
+
+auto HitachiDSP::romRead(uint24 addr, uint8 data) -> uint8 {
+  if(hitachidsp.active() || regs.halt) {
+    addr = Bus::mirror(addr, rom.size());
+  //if(Roms == 2 && mmio.r1f52 == 1 && addr >= (bit::round(rom.size()) >> 1)) return 0x00;
+    return rom.read(addr, data);
+  }
+  if((addr & 0x40ffe0) == 0x00ffe0) return mmio.vector[addr & 0x1f];
+  return data;
+}
+
+auto HitachiDSP::romWrite(uint24 addr, uint8 data) -> void {
+}
+
+auto HitachiDSP::ramRead(uint24 addr, uint8 data) -> uint8 {
+  if(ram.size() == 0) return 0x00;  //not open bus
+  return ram.read(Bus::mirror(addr, ram.size()), data);
+}
+
+auto HitachiDSP::ramWrite(uint24 addr, uint8 data) -> void {
+  if(ram.size() == 0) return;
+  return ram.write(Bus::mirror(addr, ram.size()), data);
+}
+
+auto HitachiDSP::dramRead(uint24 addr, uint8 data) -> uint8 {
+  addr &= 0xfff;
+  if(addr >= 0xc00) return data;
+  return dataRAM[addr];
+}
+
+auto HitachiDSP::dramWrite(uint24 addr, uint8 data) -> void {
+  addr &= 0xfff;
+  if(addr >= 0xc00) return;
+  dataRAM[addr] = data;
+}
+
+auto HitachiDSP::dspRead(uint24 addr, uint8) -> uint8 {
+  addr = 0x7c00 | (addr & 0x03ff);
+
+  //MMIO
+  switch(addr) {
+  case 0x7f40: return mmio.dmaSource >>  0;
+  case 0x7f41: return mmio.dmaSource >>  8;
+  case 0x7f42: return mmio.dmaSource >> 16;
+  case 0x7f43: return mmio.dmaLength >>  0;
+  case 0x7f44: return mmio.dmaLength >>  8;
+  case 0x7f45: return mmio.dmaTarget >>  0;
+  case 0x7f46: return mmio.dmaTarget >>  8;
+  case 0x7f47: return mmio.dmaTarget >> 16;
+  case 0x7f48: return mmio.r1f48;
+  case 0x7f49: return mmio.programOffset >>  0;
+  case 0x7f4a: return mmio.programOffset >>  8;
+  case 0x7f4b: return mmio.programOffset >> 16;
+  case 0x7f4c: return mmio.r1f4c;
+  case 0x7f4d: return mmio.pageNumber >> 0;
+  case 0x7f4e: return mmio.pageNumber >> 8;
+  case 0x7f4f: return mmio.programCounter;
+  case 0x7f50: return mmio.r1f50;
+  case 0x7f51: return mmio.r1f51;
+  case 0x7f52: return mmio.r1f52;
+  case 0x7f53: case 0x7f54: case 0x7f55: case 0x7f56:
+  case 0x7f57: case 0x7f58: case 0x7f59: case 0x7f5a:
+  case 0x7f5b: case 0x7f5c: case 0x7f5d: case 0x7f5e:
+  case 0x7f5f: return ((regs.halt == false) << 6) | ((regs.halt == true) << 1);
+  }
+
+  //Vector
+  if(addr >= 0x7f60 && addr <= 0x7f7f) {
+    return mmio.vector[addr & 0x1f];
+  }
+
+  //GPRs
+  if((addr >= 0x7f80 && addr <= 0x7faf) || (addr >= 0x7fc0 && addr <= 0x7fef)) {
+    uint index = (addr & 0x3f) / 3;        //0..15
+    uint shift = ((addr & 0x3f) % 3) * 8;  //0, 8, 16
+    return regs.gpr[index] >> shift;
+  }
+
+  return 0x00;
+}
+
+auto HitachiDSP::dspWrite(uint24 addr, uint8 data) -> void {
+  addr = 0x7c00 | (addr & 0x03ff);
+
+  //MMIO
+  switch(addr) {
+  case 0x7f40: mmio.dmaSource = (mmio.dmaSource & 0xffff00) | (data <<  0); return;
+  case 0x7f41: mmio.dmaSource = (mmio.dmaSource & 0xff00ff) | (data <<  8); return;
+  case 0x7f42: mmio.dmaSource = (mmio.dmaSource & 0x00ffff) | (data << 16); return;
+  case 0x7f43: mmio.dmaLength = (mmio.dmaLength &   0xff00) | (data <<  0); return;
+  case 0x7f44: mmio.dmaLength = (mmio.dmaLength &   0x00ff) | (data <<  8); return;
+  case 0x7f45: mmio.dmaTarget = (mmio.dmaTarget & 0xffff00) | (data <<  0); return;
+  case 0x7f46: mmio.dmaTarget = (mmio.dmaTarget & 0xff00ff) | (data <<  8); return;
+  case 0x7f47: mmio.dmaTarget = (mmio.dmaTarget & 0x00ffff) | (data << 16);
+    if(regs.halt) mmio.dma = true;
+    return;
+  case 0x7f48: mmio.r1f48 = data & 0x01; return;
+  case 0x7f49: mmio.programOffset = (mmio.programOffset & 0xffff00) | (data <<  0); return;
+  case 0x7f4a: mmio.programOffset = (mmio.programOffset & 0xff00ff) | (data <<  8); return;
+  case 0x7f4b: mmio.programOffset = (mmio.programOffset & 0x00ffff) | (data << 16); return;
+  case 0x7f4c: mmio.r1f4c = data & 0x03; return;
+  case 0x7f4d: mmio.pageNumber = (mmio.pageNumber & 0x7f00) | ((data & 0xff) << 0); return;
+  case 0x7f4e: mmio.pageNumber = (mmio.pageNumber & 0x00ff) | ((data & 0x7f) << 8); return;
+  case 0x7f4f: mmio.programCounter = data;
+    if(regs.halt) {
+      regs.pc = mmio.pageNumber * 256 + mmio.programCounter;
+      regs.halt = false;
+    }
+    return;
+  case 0x7f50: mmio.r1f50 = data & 0x77; return;
+  case 0x7f51: mmio.r1f51 = data & 0x01; return;
+  case 0x7f52: mmio.r1f52 = data & 0x01; return;
+  }
+
+  //Vector
+  if(addr >= 0x7f60 && addr <= 0x7f7f) {
+    mmio.vector[addr & 0x1f] = data;
+    return;
+  }
+
+  //GPRs
+  if((addr >= 0x7f80 && addr <= 0x7faf) || (addr >= 0x7fc0 && addr <= 0x7fef)) {
+    uint index = (addr & 0x3f) / 3;
+    switch((addr & 0x3f) % 3) {
+    case 0: regs.gpr[index] = (regs.gpr[index] & 0xffff00) | (data <<  0); return;
+    case 1: regs.gpr[index] = (regs.gpr[index] & 0xff00ff) | (data <<  8); return;
+    case 2: regs.gpr[index] = (regs.gpr[index] & 0x00ffff) | (data << 16); return;
+    }
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/hitachidsp/serialization.cpp b/higan/sfc-balanced/coprocessor/hitachidsp/serialization.cpp
new file mode 100644
index 0000000..6ac657b
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/hitachidsp/serialization.cpp
@@ -0,0 +1,30 @@
+auto HitachiDSP::firmware() const -> vector<uint8> {
+  vector<uint8> buffer;
+  if(!cartridge.has.HitachiDSP) return buffer;
+  buffer.reserve(1024 * 3);
+  for(auto n : range(1024)) {
+    buffer.append(dataROM[n] >>  0);
+    buffer.append(dataROM[n] >>  8);
+    buffer.append(dataROM[n] >> 16);
+  }
+  return buffer;
+}
+
+auto HitachiDSP::serialize(serializer& s) -> void {
+  HG51B::serialize(s);
+  Thread::serialize(s);
+
+  s.integer(mmio.dma);
+  s.integer(mmio.dmaSource);
+  s.integer(mmio.dmaLength);
+  s.integer(mmio.dmaTarget);
+  s.integer(mmio.r1f48);
+  s.integer(mmio.programOffset);
+  s.integer(mmio.r1f4c);
+  s.integer(mmio.pageNumber);
+  s.integer(mmio.programCounter);
+  s.integer(mmio.r1f50);
+  s.integer(mmio.r1f51);
+  s.integer(mmio.r1f52);
+  s.array(mmio.vector);
+}
diff --git a/higan/sfc-balanced/coprocessor/icd2/icd2.cpp b/higan/sfc-balanced/coprocessor/icd2/icd2.cpp
new file mode 100644
index 0000000..7d95288
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/icd2/icd2.cpp
@@ -0,0 +1,85 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+ICD2 icd2;
+
+#if defined(SFC_SUPERGAMEBOY)
+
+#include "interface.cpp"
+#include "io.cpp"
+#include "serialization.cpp"
+
+auto ICD2::Enter() -> void {
+  while(true) {
+    if(scheduler.synchronizing()) GameBoy::system.runToSave();
+    scheduler.synchronize();
+    icd2.main();
+  }
+}
+
+auto ICD2::main() -> void {
+  if(r6003 & 0x80) {
+    GameBoy::system.run();
+    step(GameBoy::system._clocksExecuted);
+    GameBoy::system._clocksExecuted = 0;
+  } else {  //DMG halted
+    stream->sample(0.0, 0.0);
+    step(2);  //two clocks per audio sample
+  }
+  synchronize(cpu);
+}
+
+auto ICD2::init() -> void {
+}
+
+auto ICD2::load() -> bool {
+  bind = GameBoy::interface->bind;
+  hook = GameBoy::interface->hook;
+  GameBoy::interface->bind = this;
+  GameBoy::interface->hook = this;
+  GameBoy::interface->load(GameBoy::ID::SuperGameBoy);
+  return cartridge.loadGameBoy();
+}
+
+auto ICD2::unload() -> void {
+  GameBoy::interface->unload();
+  GameBoy::interface->bind = bind;
+  GameBoy::interface->hook = hook;
+}
+
+auto ICD2::power() -> void {
+}
+
+auto ICD2::reset(bool soft) -> void {
+  auto frequency = system.colorburst() * 6.0;
+  create(ICD2::Enter, frequency / 5);
+  if(!soft) stream = Emulator::audio.createStream(2, frequency / 10);
+
+  r6003 = 0x00;
+  r6004 = 0xff;
+  r6005 = 0xff;
+  r6006 = 0xff;
+  r6007 = 0xff;
+  for(auto& r : r7000) r = 0x00;
+  mltReq = 0;
+
+  for(auto& n : output) n = 0xff;
+  readBank = 0;
+  readAddress = 0;
+  writeBank = 0;
+  writeAddress = 0;
+
+  packetSize = 0;
+  joypID = 3;
+  joyp15Lock = 0;
+  joyp14Lock = 0;
+  pulseLock = true;
+
+  GameBoy::system.init();
+  GameBoy::system.power();
+}
+
+#endif
+
+}
diff --git a/higan/sfc-balanced/coprocessor/icd2/icd2.hpp b/higan/sfc-balanced/coprocessor/icd2/icd2.hpp
new file mode 100644
index 0000000..d80e5bb
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/icd2/icd2.hpp
@@ -0,0 +1,91 @@
+#if defined(SFC_SUPERGAMEBOY)
+
+struct ICD2 : Emulator::Interface::Bind, GameBoy::Interface::Hook, Thread {
+  shared_pointer<Emulator::Stream> stream;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load() -> bool;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset(bool soft = false) -> void;
+
+  //interface.cpp
+  auto lcdScanline() -> void override;
+  auto lcdOutput(uint2 color) -> void override;
+  auto joypWrite(bool p15, bool p14) -> void override;
+
+  auto open(uint id, string name, vfs::file::mode mode, bool required) -> vfs::shared::file override;
+  auto load(uint id, string name, string type) -> maybe<uint> override;
+
+  auto videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void override;
+  auto audioSample(const double* samples, uint channels) -> void override;
+  auto inputPoll(uint port, uint device, uint id) -> int16 override;
+
+  //io.cpp
+  auto readIO(uint24 addr, uint8 data) -> uint8;
+  auto writeIO(uint24 addr, uint8 data) -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  uint revision;
+
+private:
+  Emulator::Interface::Bind* bind = nullptr;
+  GameBoy::Interface::Hook* hook = nullptr;
+
+  struct Packet {
+    auto operator[](uint addr) -> uint8& { return data[addr & 15]; }
+    uint8 data[16];
+  };
+  Packet packet[64];
+  uint packetSize;
+
+  uint joypID;
+  bool joyp15Lock;
+  bool joyp14Lock;
+  bool pulseLock;
+  bool strobeLock;
+  bool packetLock;
+  Packet joypPacket;
+  uint8 packetOffset;
+  uint8 bitData, bitOffset;
+
+  uint8 r6003;      //control port
+  uint8 r6004;      //joypad 1
+  uint8 r6005;      //joypad 2
+  uint8 r6006;      //joypad 3
+  uint8 r6007;      //joypad 4
+  uint8 r7000[16];  //JOYP packet data
+  uint8 mltReq;     //number of active joypads
+
+  uint8 output[4 * 512];
+  uint readBank;
+  uint readAddress;
+  uint writeBank;
+  uint writeAddress;
+};
+
+#else
+
+struct ICD2 : Thread {
+  auto init() -> void {}
+  auto load() -> void {}
+  auto unload() -> void {}
+  auto power() -> void {}
+  auto reset() -> void {}
+
+  auto readIO(uint24, uint8) -> uint8 { return 0; }
+  auto writeIO(uint24, uint8) -> void { return; }
+
+  auto serialize(serializer&) -> void {}
+
+  uint revision;
+};
+
+#endif
+
+extern ICD2 icd2;
diff --git a/higan/sfc-balanced/coprocessor/icd2/interface.cpp b/higan/sfc-balanced/coprocessor/icd2/interface.cpp
new file mode 100644
index 0000000..a4ca83c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/icd2/interface.cpp
@@ -0,0 +1,129 @@
+auto ICD2::lcdScanline() -> void {
+  if(GameBoy::ppu.status.ly > 143) return;  //Vblank
+  if((GameBoy::ppu.status.ly & 7) == 0) {
+    writeBank = (writeBank + 1) & 3;
+    writeAddress = 0;
+  }
+}
+
+auto ICD2::lcdOutput(uint2 color) -> void {
+  uint y = writeAddress / 160;
+  uint x = writeAddress % 160;
+  uint addr = writeBank * 512 + y * 2 + x / 8 * 16;
+  output[addr + 0] = (output[addr + 0] << 1) | (bool)(color & 1);
+  output[addr + 1] = (output[addr + 1] << 1) | (bool)(color & 2);
+  writeAddress = (writeAddress + 1) % 1280;
+}
+
+auto ICD2::joypWrite(bool p15, bool p14) -> void {
+  //joypad handling
+  if(p15 == 1 && p14 == 1) {
+    if(joyp15Lock == 0 && joyp14Lock == 0) {
+      joyp15Lock = 1;
+      joyp14Lock = 1;
+      joypID = (joypID + 1) & 3;
+    }
+  }
+
+  if(p15 == 0 && p14 == 1) joyp15Lock = 0;
+  if(p15 == 1 && p14 == 0) joyp14Lock = 0;
+
+  //packet handling
+  if(p15 == 0 && p14 == 0) {  //pulse
+    pulseLock = false;
+    packetOffset = 0;
+    bitOffset = 0;
+    strobeLock = true;
+    packetLock = false;
+    return;
+  }
+
+  if(pulseLock) return;
+
+  if(p15 == 1 && p14 == 1) {
+    strobeLock = false;
+    return;
+  }
+
+  if(strobeLock) {
+    if(p15 == 1 || p14 == 1) {  //malformed packet
+      packetLock = false;
+      pulseLock = true;
+      bitOffset = 0;
+      packetOffset = 0;
+    } else {
+      return;
+    }
+  }
+
+  //p15:1, p14:0 = 0
+  //p15:0, p14:1 = 1
+  bool bit = (p15 == 0);
+  strobeLock = true;
+
+  if(packetLock) {
+    if(p15 == 1 && p14 == 0) {
+      if((joypPacket[0] >> 3) == 0x11) {
+        mltReq = joypPacket[1] & 3;
+        if(mltReq == 2) mltReq = 3;
+        joypID = 0;
+      }
+
+      if(packetSize < 64) packet[packetSize++] = joypPacket;
+      packetLock = false;
+      pulseLock = true;
+    }
+    return;
+  }
+
+  bitData = (bit << 7) | (bitData >> 1);
+  if(++bitOffset < 8) return;
+
+  bitOffset = 0;
+  joypPacket[packetOffset] = bitData;
+  if(++packetOffset < 16) return;
+  packetLock = true;
+}
+
+auto ICD2::open(uint id, string name, vfs::file::mode mode, bool required) -> vfs::shared::file {
+  //redirect system folder to cartridge folder:
+  //expects "GameBoy.sys"; but this would be "Super Famicom.sys"; redirect to "Super Game Boy.sfc/"
+  if(id == ID::System) id = cartridge.pathID();
+  return interface->open(id, name, mode, required);
+}
+
+auto ICD2::load(uint id, string name, string type) -> maybe<uint> {
+  return interface->load(id, name, type);
+}
+
+auto ICD2::videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void {
+}
+
+auto ICD2::audioSample(const double* samples, uint channels) -> void {
+  stream->write(samples);
+}
+
+auto ICD2::inputPoll(uint port, uint device, uint id) -> int16 {
+  GameBoy::cpu.status.mltReq = joypID & mltReq;
+
+  uint data = 0x00;
+  switch(joypID & mltReq) {
+  case 0: data = ~r6004; break;
+  case 1: data = ~r6005; break;
+  case 2: data = ~r6006; break;
+  case 3: data = ~r6007; break;
+  }
+
+  switch((GameBoy::Input)id) {
+  case GameBoy::Input::Start:  return (bool)(data & 0x80);
+  case GameBoy::Input::Select: return (bool)(data & 0x40);
+  case GameBoy::Input::B:      return (bool)(data & 0x20);
+  case GameBoy::Input::A:      return (bool)(data & 0x10);
+  case GameBoy::Input::Down:   return (bool)(data & 0x08);
+  case GameBoy::Input::Up:     return (bool)(data & 0x04);
+  case GameBoy::Input::Left:   return (bool)(data & 0x02);
+  case GameBoy::Input::Right:  return (bool)(data & 0x01);
+  }
+
+  return 0;
+}
diff --git a/higan/sfc-balanced/coprocessor/icd2/io.cpp b/higan/sfc-balanced/coprocessor/icd2/io.cpp
new file mode 100644
index 0000000..5155182
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/icd2/io.cpp
@@ -0,0 +1,74 @@
+auto ICD2::readIO(uint24 addr, uint8 data) -> uint8 {
+  addr &= 0x40ffff;
+
+  //LY counter
+  if(addr == 0x6000) {
+    uint y = min((uint8)143, GameBoy::ppu.status.ly);
+    return (y & ~7) | writeBank;
+  }
+
+  //command ready port
+  if(addr == 0x6002) {
+    data = packetSize > 0;
+    if(data) {
+      for(auto n : range(16)) r7000[n] = packet[0][n];
+      packetSize--;
+      for(auto n : range(packetSize)) packet[n] = packet[n + 1];
+    }
+    return data;
+  }
+
+  //ICD2 revision
+  if(addr == 0x600f) {
+    return 0x21;
+  }
+
+  //command port
+  if((addr & 0x40fff0) == 0x7000) {
+    return r7000[addr & 15];
+  }
+
+  //VRAM port
+  if(addr == 0x7800) {
+    data = output[readBank * 512 + readAddress];
+    readAddress = (readAddress + 1) & 511;
+    return data;
+  }
+
+  return 0x00;
+}
+
+auto ICD2::writeIO(uint24 addr, uint8 data) -> void {
+  addr &= 0xffff;
+
+  //VRAM port
+  if(addr == 0x6001) {
+    readBank = data & 3;
+    readAddress = 0;
+    return;
+  }
+
+  //control port
+  //d7: 0 = halt, 1 = reset
+  //d5,d4: 0 = 1-player, 1 = 2-player, 2 = 4-player, 3 = ???
+  //d1,d0: 0 = frequency divider (clock rate adjust)
+  if(addr == 0x6003) {
+    if((r6003 & 0x80) == 0x00 && (data & 0x80) == 0x80) {
+      reset(true);
+    }
+    auto frequency = system.colorburst() * 6.0;
+    switch(data & 3) {
+    case 0: setFrequency(frequency / 4); break;  //fast (glitchy, even on real hardware)
+    case 1: setFrequency(frequency / 5); break;  //normal
+    case 2: setFrequency(frequency / 7); break;  //slow
+    case 3: setFrequency(frequency / 9); break;  //very slow
+    }
+    r6003 = data;
+    return;
+  }
+
+  if(addr == 0x6004) { r6004 = data; return; }  //joypad 1
+  if(addr == 0x6005) { r6005 = data; return; }  //joypad 2
+  if(addr == 0x6006) { r6006 = data; return; }  //joypad 3
+  if(addr == 0x6007) { r6007 = data; return; }  //joypad 4
+}
diff --git a/higan/sfc-balanced/coprocessor/icd2/serialization.cpp b/higan/sfc-balanced/coprocessor/icd2/serialization.cpp
new file mode 100644
index 0000000..10e0f67
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/icd2/serialization.cpp
@@ -0,0 +1,32 @@
+auto ICD2::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+  GameBoy::system.serializeAll(s);
+
+  for(auto n : range(64)) s.array(packet[n].data);
+  s.integer(packetSize);
+
+  s.integer(joypID);
+  s.integer(joyp15Lock);
+  s.integer(joyp14Lock);
+  s.integer(pulseLock);
+  s.integer(strobeLock);
+  s.integer(packetLock);
+  s.array(joypPacket.data);
+  s.integer(packetOffset);
+  s.integer(bitData);
+  s.integer(bitOffset);
+
+  s.integer(r6003);
+  s.integer(r6004);
+  s.integer(r6005);
+  s.integer(r6006);
+  s.integer(r6007);
+  s.array(r7000);
+  s.integer(mltReq);
+
+  s.array(output);
+  s.integer(readBank);
+  s.integer(readAddress);
+  s.integer(writeBank);
+  s.integer(writeAddress);
+}
diff --git a/higan/sfc-balanced/coprocessor/mcc/mcc.cpp b/higan/sfc-balanced/coprocessor/mcc/mcc.cpp
new file mode 100644
index 0000000..8ffcfed
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/mcc/mcc.cpp
@@ -0,0 +1,136 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "serialization.cpp"
+MCC mcc;
+
+auto MCC::init() -> void {
+}
+
+auto MCC::load() -> void {
+}
+
+auto MCC::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+auto MCC::power() -> void {
+}
+
+auto MCC::reset() -> void {
+  for(auto n : range(16)) r[n] = 0x00;
+  r[0x07] = 0x80;
+  r[0x08] = 0x80;
+  commit();
+}
+
+auto MCC::memoryAccess(bool write, Memory& memory, uint24 addr, uint8 data) -> uint8 {
+  addr = bus.mirror(addr, memory.size());
+  if(!write) {
+    return memory.read(addr, data);
+  } else {
+    memory.write(addr, data);
+  }
+}
+
+//map address=00-3f,80-bf:8000-ffff mask=0x408000
+//map address=40-7d,c0-ff:0000-ffff
+auto MCC::mcuAccess(bool write, uint24 addr, uint8 data) -> uint8 {
+  if(addr < 0x400000) {
+    //note: manifest maps 00-3f,80-bf:8000-ffff mask=0x408000 => 00-3f:0000-ffff
+    //the intention is consistency in pre-decoding as much as possible
+    //however, the MCC code is intended to be rewritten; and is too convoluted
+    //so for right now, I'm simply transforming it back to its original state
+    //this is very wasteful; but will be addressed once things are rewritten
+    addr = ((addr & 0x200000) << 2) | ((addr & 0x1f8000) << 1) | 0x8000 | (addr & 0x7fff);
+  }
+
+  if((addr & 0xe08000) == 0x008000) {  //$00-1f:8000-ffff
+    if(r07 == 1) {
+      addr = ((addr & 0x1f0000) >> 1) | (addr & 0x7fff);
+      return memoryAccess(write, rom, addr, data);
+    }
+  }
+
+  if((addr & 0xe08000) == 0x808000) {  //$80-9f:8000-ffff
+    if(r08 == 1) {
+      addr = ((addr & 0x1f0000) >> 1) | (addr & 0x7fff);
+      return memoryAccess(write, rom, addr, data);
+    }
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    if(r05 == 0) return memoryAccess(write, ram, addr & 0x0fffff, data);
+  }
+
+  if((addr & 0xf00000) == 0x500000) {  //$50-5f:0000-ffff
+    if(r06 == 0) return memoryAccess(write, ram, addr & 0x0fffff, data);
+  }
+
+  if((addr & 0xf00000) == 0x600000) {  //$60-6f:0000-ffff
+    if(r03 == 1) return memoryAccess(write, ram, addr & 0x0fffff, data);
+  }
+
+  if((addr & 0xf80000) == 0x700000) {  //$70-77:0000-ffff
+    return memoryAccess(write, ram, addr & 0x07ffff, data);
+  }
+
+  if(((addr & 0x408000) == 0x008000)  //$00-3f,80-bf:8000-ffff
+  || ((addr & 0x400000) == 0x400000)  //$40-7f,c0-ff:0000-ffff
+  ) {
+    if(r02 == 0) addr = ((addr & 0x7f0000) >> 1) | (addr & 0x7fff);
+    Memory& memory = (r01 == 0 ? (Memory&)bsmemory : (Memory&)ram);
+    return memoryAccess(write, memory, addr & 0x7fffff, data);
+  }
+
+  return 0x00;
+}
+
+auto MCC::mcuRead(uint24 addr, uint8 data) -> uint8 {
+  return mcuAccess(false, addr, data);
+}
+
+auto MCC::mcuWrite(uint24 addr, uint8 data) -> void {
+  mcuAccess(true, addr, data);
+}
+
+auto MCC::read(uint24 addr, uint8 data) -> uint8 {
+  if((addr & 0xf0ffff) == 0x005000) {  //$00-0f:5000
+    uint8 n = (addr >> 16) & 15;
+    return r[n];
+  }
+
+  return data;
+}
+
+auto MCC::write(uint24 addr, uint8 data) -> void {
+  if((addr & 0xf0ffff) == 0x005000) {  //$00-0f:5000
+    uint8 n = (addr >> 16) & 15;
+    r[n] = data;
+    if(n == 0x0e && data & 0x80) commit();
+    return;
+  }
+}
+
+auto MCC::commit() -> void {
+  r00 = r[0x00] & 0x80;
+  r01 = r[0x01] & 0x80;
+  r02 = r[0x02] & 0x80;
+  r03 = r[0x03] & 0x80;
+  r04 = r[0x04] & 0x80;
+  r05 = r[0x05] & 0x80;
+  r06 = r[0x06] & 0x80;
+  r07 = r[0x07] & 0x80;
+  r08 = r[0x08] & 0x80;
+  r09 = r[0x09] & 0x80;
+  r0a = r[0x0a] & 0x80;
+  r0b = r[0x0b] & 0x80;
+  r0c = r[0x0c] & 0x80;
+  r0d = r[0x0d] & 0x80;
+  r0e = r[0x0e] & 0x80;
+  r0f = r[0x0f] & 0x80;
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/mcc/mcc.hpp b/higan/sfc-balanced/coprocessor/mcc/mcc.hpp
new file mode 100644
index 0000000..0558b3c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/mcc/mcc.hpp
@@ -0,0 +1,34 @@
+//the MCC is the custom logic chip inside the BS-X Satellaview cartridge
+
+struct MCC {
+  MappedRAM rom;
+  MappedRAM ram;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto memoryAccess(bool write, Memory& memory, uint24 addr, uint8 data) -> uint8;
+  auto mcuAccess(bool write, uint24 addr, uint8 data) -> uint8;
+
+  auto mcuRead(uint24 addr, uint8 data) -> uint8;
+  auto mcuWrite(uint24 addr, uint8 data) -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto commit() -> void;
+
+  auto serialize(serializer&) -> void;
+
+private:
+  uint8 r[16];
+  bool r00, r01, r02, r03;
+  bool r04, r05, r06, r07;
+  bool r08, r09, r0a, r0b;
+  bool r0c, r0d, r0e, r0f;
+};
+
+extern MCC mcc;
diff --git a/higan/sfc-balanced/coprocessor/mcc/serialization.cpp b/higan/sfc-balanced/coprocessor/mcc/serialization.cpp
new file mode 100644
index 0000000..4558f4d
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/mcc/serialization.cpp
@@ -0,0 +1,3 @@
+auto MCC::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+}
diff --git a/higan/sfc-balanced/coprocessor/msu1/msu1.cpp b/higan/sfc-balanced/coprocessor/msu1/msu1.cpp
new file mode 100644
index 0000000..f933409
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/msu1/msu1.cpp
@@ -0,0 +1,185 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+MSU1 msu1;
+
+#include "serialization.cpp"
+
+auto MSU1::Enter() -> void {
+  while(true) scheduler.synchronize(), msu1.main();
+}
+
+auto MSU1::main() -> void {
+  double left = 0.0;
+  double right = 0.0;
+
+  if(io.audioPlay) {
+    if(audioFile) {
+      if(audioFile->end()) {
+        if(!io.audioRepeat) {
+          io.audioPlay = false;
+          audioFile->seek(io.audioPlayOffset = 8);
+        } else {
+          audioFile->seek(io.audioPlayOffset = io.audioLoopOffset);
+        }
+      } else {
+        io.audioPlayOffset += 4;
+        left  = (double)(int16)audioFile->readl(2) / 32768.0 * (double)io.audioVolume / 255.0;
+        right = (double)(int16)audioFile->readl(2) / 32768.0 * (double)io.audioVolume / 255.0;
+        if(dsp.mute()) left = 0, right = 0;
+      }
+    } else {
+      io.audioPlay = false;
+    }
+  }
+
+  stream->sample(left, right);
+  step(1);
+  synchronize(cpu);
+}
+
+auto MSU1::init() -> void {
+}
+
+auto MSU1::load() -> void {
+}
+
+auto MSU1::unload() -> void {
+  dataFile.reset();
+  audioFile.reset();
+}
+
+auto MSU1::power() -> void {
+}
+
+auto MSU1::reset() -> void {
+  create(MSU1::Enter, 44100);
+  stream = Emulator::audio.createStream(2, 44100.0);
+
+  io.dataSeekOffset = 0;
+  io.dataReadOffset = 0;
+
+  io.audioPlayOffset = 0;
+  io.audioLoopOffset = 0;
+
+  io.audioTrack = 0;
+  io.audioVolume = 0;
+
+  io.audioResumeTrack = ~0;  //no resume
+  io.audioResumeOffset = 0;
+
+  io.audioError = false;
+  io.audioPlay = false;
+  io.audioRepeat = false;
+  io.audioBusy = false;
+  io.dataBusy = false;
+
+  dataOpen();
+  audioOpen();
+}
+
+auto MSU1::dataOpen() -> void {
+  dataFile.reset();
+  auto document = BML::unserialize(cartridge.information.manifest.cartridge);
+  string name = document["board/msu1/rom/name"].text();
+  if(!name) name = "msu1.rom";
+  if(dataFile = interface->open(ID::SuperFamicom, name, File::Read)) {
+    dataFile->seek(io.dataReadOffset);
+  }
+}
+
+auto MSU1::audioOpen() -> void {
+  audioFile.reset();
+  auto document = BML::unserialize(cartridge.information.manifest.cartridge);
+  string name = {"track-", io.audioTrack, ".pcm"};
+  for(auto track : document.find("board/msu1/track")) {
+    if(track["number"].natural() != io.audioTrack) continue;
+    name = track["name"].text();
+    break;
+  }
+  if(audioFile = interface->open(ID::SuperFamicom, name, File::Read)) {
+    if(audioFile->size() >= 8) {
+      uint32 header = audioFile->readm(4);
+      if(header == 0x4d535531) {  //"MSU1"
+        io.audioLoopOffset = 8 + audioFile->readl(4) * 4;
+        if(io.audioLoopOffset > audioFile->size()) io.audioLoopOffset = 8;
+        io.audioError = false;
+        audioFile->seek(io.audioPlayOffset);
+        return;
+      }
+    }
+    audioFile.reset();
+  }
+  io.audioError = true;
+}
+
+auto MSU1::readIO(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(*this);
+
+  switch(0x2000 | (addr & 7)) {
+  case 0x2000:
+    return (
+      Revision       << 0
+    | io.audioError  << 3
+    | io.audioPlay   << 4
+    | io.audioRepeat << 5
+    | io.audioBusy   << 6
+    | io.dataBusy    << 7
+    );
+  case 0x2001:
+    if(io.dataBusy) return 0x00;
+    if(!dataFile) return 0x00;
+    if(dataFile->end()) return 0x00;
+    io.dataReadOffset++;
+    return dataFile->read();
+  case 0x2002: return 'S';
+  case 0x2003: return '-';
+  case 0x2004: return 'M';
+  case 0x2005: return 'S';
+  case 0x2006: return 'U';
+  case 0x2007: return '1';
+  }
+}
+
+auto MSU1::writeIO(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+
+  switch(0x2000 | (addr & 7)) {
+  case 0x2000: io.dataSeekOffset.byte(0) = data; break;
+  case 0x2001: io.dataSeekOffset.byte(1) = data; break;
+  case 0x2002: io.dataSeekOffset.byte(2) = data; break;
+  case 0x2003: io.dataSeekOffset.byte(3) = data;
+    io.dataReadOffset = io.dataSeekOffset;
+    if(dataFile) dataFile->seek(io.dataReadOffset);
+    break;
+  case 0x2004: io.audioTrack.byte(0) = data; break;
+  case 0x2005: io.audioTrack.byte(1) = data;
+    io.audioPlay = false;
+    io.audioRepeat = false;
+    io.audioPlayOffset = 8;
+    if(io.audioTrack == io.audioResumeTrack) {
+      io.audioPlayOffset = io.audioResumeOffset;
+      io.audioResumeTrack = ~0;  //erase resume track
+      io.audioResumeOffset = 0;
+    }
+    audioOpen();
+    break;
+  case 0x2006:
+    io.audioVolume = data;
+    break;
+  case 0x2007:
+    if(io.audioBusy) break;
+    if(io.audioError) break;
+    io.audioPlay = data.bit(0);
+    io.audioRepeat = data.bit(1);
+    bool audioResume = data.bit(2);
+    if(!io.audioPlay && audioResume) {
+      io.audioResumeTrack = io.audioTrack;
+      io.audioResumeOffset = io.audioPlayOffset;
+    }
+    break;
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/msu1/msu1.hpp b/higan/sfc-balanced/coprocessor/msu1/msu1.hpp
new file mode 100644
index 0000000..22a2f65
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/msu1/msu1.hpp
@@ -0,0 +1,54 @@
+struct MSU1 : Thread {
+  shared_pointer<Emulator::Stream> stream;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto dataOpen() -> void;
+  auto audioOpen() -> void;
+
+  auto readIO(uint24 addr, uint8 data) -> uint8;
+  auto writeIO(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+private:
+  vfs::shared::file dataFile;
+  vfs::shared::file audioFile;
+
+  enum Flag : uint {
+    Revision       = 0x02,  //max: 0x07
+    AudioError     = 0x08,
+    AudioPlaying   = 0x10,
+    AudioRepeating = 0x20,
+    AudioBusy      = 0x40,
+    DataBusy       = 0x80,
+  };
+
+  struct IO {
+    uint32 dataSeekOffset;
+    uint32 dataReadOffset;
+
+    uint32 audioPlayOffset;
+    uint32 audioLoopOffset;
+
+    uint16 audioTrack;
+    uint8 audioVolume;
+
+    uint32 audioResumeTrack;
+    uint32 audioResumeOffset;
+
+    bool audioError;
+    bool audioPlay;
+    bool audioRepeat;
+    bool audioBusy;
+    bool dataBusy;
+  } io;
+};
+
+extern MSU1 msu1;
diff --git a/higan/sfc-balanced/coprocessor/msu1/serialization.cpp b/higan/sfc-balanced/coprocessor/msu1/serialization.cpp
new file mode 100644
index 0000000..798cf6c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/msu1/serialization.cpp
@@ -0,0 +1,24 @@
+auto MSU1::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+
+  s.integer(io.dataSeekOffset);
+  s.integer(io.dataReadOffset);
+
+  s.integer(io.audioPlayOffset);
+  s.integer(io.audioLoopOffset);
+
+  s.integer(io.audioTrack);
+  s.integer(io.audioVolume);
+
+  s.integer(io.audioResumeTrack);
+  s.integer(io.audioResumeOffset);
+
+  s.integer(io.audioError);
+  s.integer(io.audioPlay);
+  s.integer(io.audioRepeat);
+  s.integer(io.audioBusy);
+  s.integer(io.dataBusy);
+
+  dataOpen();
+  audioOpen();
+}
diff --git a/higan/sfc-balanced/coprocessor/necdsp/necdsp.cpp b/higan/sfc-balanced/coprocessor/necdsp/necdsp.cpp
new file mode 100644
index 0000000..7e37868
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/necdsp/necdsp.cpp
@@ -0,0 +1,63 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "serialization.cpp"
+NECDSP necdsp;
+
+auto NECDSP::Enter() -> void {
+  while(true) scheduler.synchronize(), necdsp.main();
+}
+
+auto NECDSP::main() -> void {
+  exec();
+  step(1);
+  synchronize(cpu);
+}
+
+auto NECDSP::read(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(*this);
+  if(addr & 1) {
+    return uPD96050::readSR();
+  } else {
+    return uPD96050::readDR();
+  }
+}
+
+auto NECDSP::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+  if(addr & 1) {
+    return uPD96050::writeSR(data);
+  } else {
+    return uPD96050::writeDR(data);
+  }
+}
+
+auto NECDSP::readRAM(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(*this);
+  return uPD96050::readDP(addr);
+}
+
+auto NECDSP::writeRAM(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+  return uPD96050::writeDP(addr, data);
+}
+
+auto NECDSP::init() -> void {
+}
+
+auto NECDSP::load() -> void {
+}
+
+auto NECDSP::unload() -> void {
+}
+
+auto NECDSP::power() -> void {
+}
+
+auto NECDSP::reset() -> void {
+  create(NECDSP::Enter, Frequency);
+  uPD96050::power();
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/necdsp/necdsp.hpp b/higan/sfc-balanced/coprocessor/necdsp/necdsp.hpp
new file mode 100644
index 0000000..9967b21
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/necdsp/necdsp.hpp
@@ -0,0 +1,23 @@
+struct NECDSP : Processor::uPD96050, Thread {
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto readRAM(uint24 addr, uint8 data) -> uint8;
+  auto writeRAM(uint24 addr, uint8 data) -> void;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto firmware() const -> vector<uint8>;
+  auto serialize(serializer&) -> void;
+
+  uint Frequency = 0;
+};
+
+extern NECDSP necdsp;
diff --git a/higan/sfc-balanced/coprocessor/necdsp/serialization.cpp b/higan/sfc-balanced/coprocessor/necdsp/serialization.cpp
new file mode 100644
index 0000000..8708471
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/necdsp/serialization.cpp
@@ -0,0 +1,25 @@
+auto NECDSP::firmware() const -> vector<uint8> {
+  vector<uint8> buffer;
+  if(!cartridge.has.NECDSP) return buffer;
+  uint plength = 2048, dlength = 1024;
+  if(revision == Revision::uPD96050) plength = 16384, dlength = 2048;
+  buffer.reserve(plength * 3 + dlength * 2);
+
+  for(auto n : range(plength)) {
+    buffer.append(programROM[n] >>  0);
+    buffer.append(programROM[n] >>  8);
+    buffer.append(programROM[n] >> 16);
+  }
+
+  for(auto n : range(dlength)) {
+    buffer.append(dataROM[n] >> 0);
+    buffer.append(dataROM[n] >> 8);
+  }
+
+  return buffer;
+}
+
+auto NECDSP::serialize(serializer& s) -> void {
+  uPD96050::serialize(s);
+  Thread::serialize(s);
+}
diff --git a/higan/sfc-balanced/coprocessor/nss/nss.cpp b/higan/sfc-balanced/coprocessor/nss/nss.cpp
new file mode 100644
index 0000000..8e97901
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/nss/nss.cpp
@@ -0,0 +1,33 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+NSS nss;
+
+auto NSS::init() -> void {
+}
+
+auto NSS::load() -> void {
+}
+
+auto NSS::unload() -> void {
+}
+
+auto NSS::power() -> void {
+}
+
+auto NSS::reset() -> void {
+}
+
+auto NSS::setDip(uint16 dip) -> void {
+  this->dip = dip;
+}
+
+auto NSS::read(uint24, uint8) -> uint8 {
+  return dip;
+}
+
+auto NSS::write(uint24, uint8) -> void {
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/nss/nss.hpp b/higan/sfc-balanced/coprocessor/nss/nss.hpp
new file mode 100644
index 0000000..cbdb0cd
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/nss/nss.hpp
@@ -0,0 +1,15 @@
+struct NSS {
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto setDip(uint16 dip) -> void;
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  uint8 dip = 0x00;
+};
+
+extern NSS nss;
diff --git a/higan/sfc-balanced/coprocessor/obc1/obc1.cpp b/higan/sfc-balanced/coprocessor/obc1/obc1.cpp
new file mode 100644
index 0000000..dcf9109
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/obc1/obc1.cpp
@@ -0,0 +1,79 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "serialization.cpp"
+OBC1 obc1;
+
+auto OBC1::init() -> void {
+}
+
+auto OBC1::load() -> void {
+}
+
+auto OBC1::unload() -> void {
+  ram.reset();
+}
+
+auto OBC1::power() -> void {
+}
+
+auto OBC1::reset() -> void {
+  status.baseptr = (ramRead(0x1ff5) & 1) ? 0x1800 : 0x1c00;
+  status.address = (ramRead(0x1ff6) & 0x7f);
+  status.shift   = (ramRead(0x1ff6) & 3) << 1;
+}
+
+auto OBC1::read(uint24 addr, uint8) -> uint8 {
+  addr &= 0x1fff;
+
+  switch(addr) {
+  case 0x1ff0: return ramRead(status.baseptr + (status.address << 2) + 0);
+  case 0x1ff1: return ramRead(status.baseptr + (status.address << 2) + 1);
+  case 0x1ff2: return ramRead(status.baseptr + (status.address << 2) + 2);
+  case 0x1ff3: return ramRead(status.baseptr + (status.address << 2) + 3);
+  case 0x1ff4: return ramRead(status.baseptr + (status.address >> 2) + 0x200);
+  }
+
+  return ramRead(addr);
+}
+
+auto OBC1::write(uint24 addr, uint8 data) -> void {
+  addr &= 0x1fff;
+
+  switch(addr) {
+  case 0x1ff0: ramWrite(status.baseptr + (status.address << 2) + 0, data); return;
+  case 0x1ff1: ramWrite(status.baseptr + (status.address << 2) + 1, data); return;
+  case 0x1ff2: ramWrite(status.baseptr + (status.address << 2) + 2, data); return;
+  case 0x1ff3: ramWrite(status.baseptr + (status.address << 2) + 3, data); return;
+  case 0x1ff4: {
+    uint8 temp = ramRead(status.baseptr + (status.address >> 2) + 0x200);
+    temp = (temp & ~(3 << status.shift)) | ((data & 3) << status.shift);
+    ramWrite(status.baseptr + (status.address >> 2) + 0x200, temp);
+  } return;
+  case 0x1ff5:
+    status.baseptr = (data & 1) ? 0x1800 : 0x1c00;
+    ramWrite(addr, data);
+    return;
+  case 0x1ff6:
+    status.address = (data & 0x7f);
+    status.shift   = (data & 3) << 1;
+    ramWrite(addr, data);
+    return;
+  case 0x1ff7:
+    ramWrite(addr, data);
+    return;
+  }
+
+  return ramWrite(addr, data);
+}
+
+auto OBC1::ramRead(uint addr) -> uint8 {
+  return ram.read(addr & 0x1fff);
+}
+
+auto OBC1::ramWrite(uint addr, uint8 data) -> void {
+  ram.write(addr & 0x1fff, data);
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/obc1/obc1.hpp b/higan/sfc-balanced/coprocessor/obc1/obc1.hpp
new file mode 100644
index 0000000..9ada171
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/obc1/obc1.hpp
@@ -0,0 +1,26 @@
+struct OBC1 {
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  MappedRAM ram;
+
+private:
+  auto ramRead(uint addr) -> uint8;
+  auto ramWrite(uint addr, uint8 data) -> void;
+
+  struct {
+    uint16 address;
+    uint16 baseptr;
+    uint16 shift;
+  } status;
+};
+
+extern OBC1 obc1;
diff --git a/higan/sfc-balanced/coprocessor/obc1/serialization.cpp b/higan/sfc-balanced/coprocessor/obc1/serialization.cpp
new file mode 100644
index 0000000..851a16d
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/obc1/serialization.cpp
@@ -0,0 +1,7 @@
+auto OBC1::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+
+  s.integer(status.address);
+  s.integer(status.baseptr);
+  s.integer(status.shift);
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/bus.cpp b/higan/sfc-balanced/coprocessor/sa1/bus.cpp
new file mode 100644
index 0000000..02861f3
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/bus.cpp
@@ -0,0 +1,30 @@
+//ROM / RAM access from the S-CPU
+
+auto SA1::CPUIRAM::size() const -> uint {
+  return sa1.iram.size();
+}
+
+auto SA1::CPUIRAM::read(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(sa1);
+  return sa1.iram.read(addr & 0x07ff);
+}
+
+auto SA1::CPUIRAM::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(sa1);
+  sa1.iram.write(addr & 0x07ff, data);
+}
+
+auto SA1::CPUBWRAM::size() const -> uint {
+  return sa1.bwram.size();
+}
+
+auto SA1::CPUBWRAM::read(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(sa1);
+  if(dma) return sa1.dmaCC1Read(addr);
+  return sa1.bwram.read(addr);
+}
+
+auto SA1::CPUBWRAM::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(sa1);
+  sa1.bwram.write(addr, data);
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/dma.cpp b/higan/sfc-balanced/coprocessor/sa1/dma.cpp
new file mode 100644
index 0000000..944d9a3
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/dma.cpp
@@ -0,0 +1,135 @@
+//====================
+//direct data transfer
+//====================
+
+auto SA1::dmaNormal() -> void {
+  while(mmio.dtc--) {
+    uint8 data = r.mdr;
+    uint32 dsa = mmio.dsa++;
+    uint32 dda = mmio.dda++;
+
+    //source and destination cannot be the same
+    if(mmio.sd == DMA::SourceBWRAM && mmio.dd == DMA::DestBWRAM) continue;
+    if(mmio.sd == DMA::SourceIRAM  && mmio.dd == DMA::DestIRAM ) continue;
+
+    switch(mmio.sd) {
+    case DMA::SourceROM:
+      if((dsa & 0x408000) == 0x008000 || (dsa & 0xc00000) == 0xc00000) {
+        data = busRead(dsa, data);
+      }
+      break;
+
+    case DMA::SourceBWRAM:
+      if((dsa & 0x40e000) == 0x006000 || (dsa & 0xf00000) == 0x400000) {
+        data = busRead(dsa, data);
+      }
+      break;
+
+    case DMA::SourceIRAM:
+      data = iram.read(dsa & 0x07ff);
+      break;
+    }
+
+    switch(mmio.dd) {
+    case DMA::DestBWRAM:
+      if((dda & 0x40e000) == 0x006000 || (dda & 0xf00000) == 0x400000) {
+        busWrite(dda, data);
+      }
+      break;
+
+    case DMA::DestIRAM:
+      iram.write(dda & 0x07ff, data);
+      break;
+    }
+  }
+
+  mmio.dma_irqfl = true;
+  if(mmio.dma_irqen) mmio.dma_irqcl = 0;
+}
+
+//((byte & 6) << 3) + (byte & 1) explanation:
+//transforms a byte index (0-7) into a planar index:
+//result[] = {  0,  1, 16, 17, 32, 33, 48, 49 };
+//works for 2bpp, 4bpp and 8bpp modes
+
+//===========================
+//type-1 character conversion
+//===========================
+
+auto SA1::dmaCC1() -> void {
+  cpubwram.dma = true;
+  mmio.chdma_irqfl = true;
+  if(mmio.chdma_irqen) {
+    mmio.chdma_irqcl = 0;
+    cpu.r.irq = 1;
+  }
+}
+
+auto SA1::dmaCC1Read(uint addr) -> uint8 {
+  //16 bytes/char (2bpp); 32 bytes/char (4bpp); 64 bytes/char (8bpp)
+  uint charmask = (1 << (6 - mmio.dmacb)) - 1;
+
+  if((addr & charmask) == 0) {
+    //buffer next character to I-RAM
+    uint bpp = 2 << (2 - mmio.dmacb);
+    uint bpl = (8 << mmio.dmasize) >> mmio.dmacb;
+    uint bwmask = bwram.size() - 1;
+    uint tile = ((addr - mmio.dsa) & bwmask) >> (6 - mmio.dmacb);
+    uint ty = (tile >> mmio.dmasize);
+    uint tx = tile & ((1 << mmio.dmasize) - 1);
+    uint bwaddr = mmio.dsa + ty * 8 * bpl + tx * bpp;
+
+    for(auto y : range(8)) {
+      uint64 data = 0;
+      for(auto byte : range(bpp)) {
+        data |= (uint64)bwram.read((bwaddr + byte) & bwmask) << (byte << 3);
+      }
+      bwaddr += bpl;
+
+      uint8 out[] = {0, 0, 0, 0, 0, 0, 0, 0};
+      for(auto x : range(8)) {
+        out[0] |= (data & 1) << (7 - x); data >>= 1;
+        out[1] |= (data & 1) << (7 - x); data >>= 1;
+        if(mmio.dmacb == 2) continue;
+        out[2] |= (data & 1) << (7 - x); data >>= 1;
+        out[3] |= (data & 1) << (7 - x); data >>= 1;
+        if(mmio.dmacb == 1) continue;
+        out[4] |= (data & 1) << (7 - x); data >>= 1;
+        out[5] |= (data & 1) << (7 - x); data >>= 1;
+        out[6] |= (data & 1) << (7 - x); data >>= 1;
+        out[7] |= (data & 1) << (7 - x); data >>= 1;
+      }
+
+      for(auto byte : range(bpp)) {
+        uint p = mmio.dda + (y << 1) + ((byte & 6) << 3) + (byte & 1);
+        iram.write(p & 0x07ff, out[byte]);
+      }
+    }
+  }
+
+  return iram.read((mmio.dda + (addr & charmask)) & 0x07ff);
+}
+
+//===========================
+//type-2 character conversion
+//===========================
+
+auto SA1::dmaCC2() -> void {
+  //select register file index (0-7 or 8-15)
+  const uint8* brf = &mmio.brf[(dma.line & 1) << 3];
+  uint bpp = 2 << (2 - mmio.dmacb);
+  uint addr = mmio.dda & 0x07ff;
+  addr &= ~((1 << (7 - mmio.dmacb)) - 1);
+  addr += (dma.line & 8) * bpp;
+  addr += (dma.line & 7) * 2;
+
+  for(auto byte : range(bpp)) {
+    uint8 output = 0;
+    for(auto bit : range(8)) {
+      output |= ((brf[bit] >> byte) & 1) << (7 - bit);
+    }
+    iram.write(addr + ((byte & 6) << 3) + (byte & 1), output);
+  }
+
+  dma.line = (dma.line + 1) & 15;
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/io.cpp b/higan/sfc-balanced/coprocessor/sa1/io.cpp
new file mode 100644
index 0000000..7cfe6e4
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/io.cpp
@@ -0,0 +1,489 @@
+auto SA1::readIO(uint24 addr, uint8) -> uint8 {
+  cpu.active() ? cpu.synchronize(sa1) : synchronize(cpu);
+
+  switch(0x2300 | addr.bits(0,7)) {
+
+  //(SFR) S-CPU flag read
+  case 0x2300: {
+    uint8 data;
+    data  = mmio.cpu_irqfl   << 7;
+    data |= mmio.cpu_ivsw    << 6;
+    data |= mmio.chdma_irqfl << 5;
+    data |= mmio.cpu_nvsw    << 4;
+    data |= mmio.cmeg;
+    return data;
+  }
+
+  //(CFR) SA-1 flag read
+  case 0x2301: {
+    uint8 data;
+    data  = mmio.sa1_irqfl   << 7;
+    data |= mmio.timer_irqfl << 6;
+    data |= mmio.dma_irqfl   << 5;
+    data |= mmio.sa1_nmifl   << 4;
+    data |= mmio.smeg;
+    return data;
+  }
+
+  //(HCR) hcounter read
+  case 0x2302: {
+    //latch counters
+    mmio.hcr = status.hcounter >> 2;
+    mmio.vcr = status.vcounter;
+    return mmio.hcr >> 0;
+  }
+
+  case 0x2303: {
+    return mmio.hcr >> 8;
+  }
+
+  //(VCR) vcounter read
+  case 0x2304: return mmio.vcr >> 0;
+  case 0x2305: return mmio.vcr >> 8;
+
+  //(MR) arithmetic result
+  case 0x2306: return mmio.mr >>  0;
+  case 0x2307: return mmio.mr >>  8;
+  case 0x2308: return mmio.mr >> 16;
+  case 0x2309: return mmio.mr >> 24;
+  case 0x230a: return mmio.mr >> 32;
+
+  //(OF) arithmetic overflow flag
+  case 0x230b: return mmio.overflow << 7;
+
+  //(VDPL) variable-length data read port low
+  case 0x230c: {
+    uint24 data;
+    data.byte(0) = vbrRead(mmio.va + 0);
+    data.byte(1) = vbrRead(mmio.va + 1);
+    data.byte(2) = vbrRead(mmio.va + 2);
+    data >>= mmio.vbit;
+
+    return data >> 0;
+  }
+
+  //(VDPH) variable-length data read port high
+  case 0x230d: {
+    uint24 data;
+    data.byte(0) = vbrRead(mmio.va + 0);
+    data.byte(1) = vbrRead(mmio.va + 1);
+    data.byte(2) = vbrRead(mmio.va + 2);
+    data >>= mmio.vbit;
+
+    if(mmio.hl == 1) {
+      //auto-increment mode
+      mmio.vbit += mmio.vb;
+      mmio.va += (mmio.vbit >> 3);
+      mmio.vbit &= 7;
+    }
+
+    return data >> 8;
+  }
+
+  //(VC) version code register
+  case 0x230e: {
+    return 0x01;  //true value unknown
+  }
+
+  }
+
+  return 0x00;
+}
+
+auto SA1::writeIO(uint24 addr, uint8 data) -> void {
+  cpu.active() ? cpu.synchronize(sa1) : synchronize(cpu);
+
+  switch(0x2200 | addr.bits(0,7)) {
+
+  //(CCNT) SA-1 control
+  case 0x2200: {
+    if(mmio.sa1_resb && !(data & 0x80)) {
+      //reset SA-1 CPU
+      r.pc.w = mmio.crv;
+      r.pc.b = 0x00;
+    }
+
+    mmio.sa1_irq  = (data & 0x80);
+    mmio.sa1_rdyb = (data & 0x40);
+    mmio.sa1_resb = (data & 0x20);
+    mmio.sa1_nmi  = (data & 0x10);
+    mmio.smeg     = (data & 0x0f);
+
+    if(mmio.sa1_irq) {
+      mmio.sa1_irqfl = true;
+      if(mmio.sa1_irqen) mmio.sa1_irqcl = 0;
+    }
+
+    if(mmio.sa1_nmi) {
+      mmio.sa1_nmifl = true;
+      if(mmio.sa1_nmien) mmio.sa1_nmicl = 0;
+    }
+
+    return;
+  }
+
+  //(SIE) S-CPU interrupt enable
+  case 0x2201: {
+    if(!mmio.cpu_irqen && (data & 0x80)) {
+      if(mmio.cpu_irqfl) {
+        mmio.cpu_irqcl = 0;
+        cpu.r.irq = 1;
+      }
+    }
+
+    if(!mmio.chdma_irqen && (data & 0x20)) {
+      if(mmio.chdma_irqfl) {
+        mmio.chdma_irqcl = 0;
+        cpu.r.irq = 1;
+      }
+    }
+
+    mmio.cpu_irqen   = (data & 0x80);
+    mmio.chdma_irqen = (data & 0x20);
+    return;
+  }
+
+  //(SIC) S-CPU interrupt clear
+  case 0x2202: {
+    mmio.cpu_irqcl   = (data & 0x80);
+    mmio.chdma_irqcl = (data & 0x20);
+
+    if(mmio.cpu_irqcl  ) mmio.cpu_irqfl   = false;
+    if(mmio.chdma_irqcl) mmio.chdma_irqfl = false;
+
+    if(!mmio.cpu_irqfl && !mmio.chdma_irqfl) cpu.r.irq = 0;
+    return;
+  }
+
+  //(CRV) SA-1 reset vector
+  case 0x2203: { mmio.crv = (mmio.crv & 0xff00) | data; return; }
+  case 0x2204: { mmio.crv = (data << 8) | (mmio.crv & 0xff); return; }
+
+  //(CNV) SA-1 NMI vector
+  case 0x2205: { mmio.cnv = (mmio.cnv & 0xff00) | data; return; }
+  case 0x2206: { mmio.cnv = (data << 8) | (mmio.cnv & 0xff); return; }
+
+  //(CIV) SA-1 IRQ vector
+  case 0x2207: { mmio.civ = (mmio.civ & 0xff00) | data; return; }
+  case 0x2208: { mmio.civ = (data << 8) | (mmio.civ & 0xff); return; }
+
+  //(SCNT) S-CPU control
+  case 0x2209: {
+    mmio.cpu_irq  = (data & 0x80);
+    mmio.cpu_ivsw = (data & 0x40);
+    mmio.cpu_nvsw = (data & 0x10);
+    mmio.cmeg     = (data & 0x0f);
+
+    if(mmio.cpu_irq) {
+      mmio.cpu_irqfl = true;
+      if(mmio.cpu_irqen) {
+        mmio.cpu_irqcl = 0;
+        cpu.r.irq = 1;
+      }
+    }
+
+    return;
+  }
+
+  //(CIE) SA-1 interrupt enable
+  case 0x220a: {
+    if(!mmio.sa1_irqen   && (data & 0x80) && mmio.sa1_irqfl  ) mmio.sa1_irqcl   = 0;
+    if(!mmio.timer_irqen && (data & 0x40) && mmio.timer_irqfl) mmio.timer_irqcl = 0;
+    if(!mmio.dma_irqen   && (data & 0x20) && mmio.dma_irqfl  ) mmio.dma_irqcl   = 0;
+    if(!mmio.sa1_nmien   && (data & 0x10) && mmio.sa1_nmifl  ) mmio.sa1_nmicl   = 0;
+
+    mmio.sa1_irqen   = (data & 0x80);
+    mmio.timer_irqen = (data & 0x40);
+    mmio.dma_irqen   = (data & 0x20);
+    mmio.sa1_nmien   = (data & 0x10);
+    return;
+  }
+
+  //(CIC) SA-1 interrupt clear
+  case 0x220b: {
+    mmio.sa1_irqcl   = (data & 0x80);
+    mmio.timer_irqcl = (data & 0x40);
+    mmio.dma_irqcl   = (data & 0x20);
+    mmio.sa1_nmicl   = (data & 0x10);
+
+    if(mmio.sa1_irqcl)   mmio.sa1_irqfl   = false;
+    if(mmio.timer_irqcl) mmio.timer_irqfl = false;
+    if(mmio.dma_irqcl)   mmio.dma_irqfl   = false;
+    if(mmio.sa1_nmicl)   mmio.sa1_nmifl   = false;
+    return;
+  }
+
+  //(SNV) S-CPU NMI vector
+  case 0x220c: { mmio.snv = (mmio.snv & 0xff00) | data; return; }
+  case 0x220d: { mmio.snv = (data << 8) | (mmio.snv & 0xff); return; }
+
+  //(SIV) S-CPU IRQ vector
+  case 0x220e: { mmio.siv = (mmio.siv & 0xff00) | data; return; }
+  case 0x220f: { mmio.siv = (data << 8) | (mmio.siv & 0xff); return; }
+
+  //(TMC) H/V timer control
+  case 0x2210: {
+    mmio.hvselb = (data & 0x80);
+    mmio.ven    = (data & 0x02);
+    mmio.hen    = (data & 0x01);
+    return;
+  }
+
+  //(CTR) SA-1 timer restart
+  case 0x2211: {
+    status.vcounter = 0;
+    status.hcounter = 0;
+    return;
+  }
+
+  //(HCNT) H-count
+  case 0x2212: { mmio.hcnt = (mmio.hcnt & 0xff00) | (data << 0); return; }
+  case 0x2213: { mmio.hcnt = (mmio.hcnt & 0x00ff) | (data << 8); return; }
+
+  //(VCNT) V-count
+  case 0x2214: { mmio.vcnt = (mmio.vcnt & 0xff00) | (data << 0); return; }
+  case 0x2215: { mmio.vcnt = (mmio.vcnt & 0x00ff) | (data << 8); return; }
+
+  //(CXB) Super MMC bank C
+  case 0x2220: {
+    mmio.cbmode = (data & 0x80);
+    mmio.cb     = (data & 0x07);
+    return;
+  }
+
+  //(DXB) Super MMC bank D
+  case 0x2221: {
+    mmio.dbmode = (data & 0x80);
+    mmio.db     = (data & 0x07);
+    return;
+  }
+
+  //(EXB) Super MMC bank E
+  case 0x2222: {
+    mmio.ebmode = (data & 0x80);
+    mmio.eb     = (data & 0x07);
+    return;
+  }
+
+  //(FXB) Super MMC bank F
+  case 0x2223: {
+    mmio.fbmode = (data & 0x80);
+    mmio.fb     = (data & 0x07);
+    return;
+  }
+
+  //(BMAPS) S-CPU BW-RAM address mapping
+  case 0x2224: {
+    mmio.sbm = (data & 0x1f);
+    return;
+  }
+
+  //(BMAP) SA-1 BW-RAM address mapping
+  case 0x2225: {
+    mmio.sw46 = (data & 0x80);
+    mmio.cbm  = (data & 0x7f);
+    return;
+  }
+
+  //(SWBE) S-CPU BW-RAM write enable
+  case 0x2226: {
+    mmio.swen = (data & 0x80);
+    return;
+  }
+
+  //(CWBE) SA-1 BW-RAM write enable
+  case 0x2227: {
+    mmio.cwen = (data & 0x80);
+    return;
+  }
+
+  //(BWPA) BW-RAM write-protected area
+  case 0x2228: {
+    mmio.bwp = (data & 0x0f);
+    return;
+  }
+
+  //(SIWP) S-CPU I-RAM write protection
+  case 0x2229: {
+    mmio.siwp = data;
+    return;
+  }
+
+  //(CIWP) SA-1 I-RAM write protection
+  case 0x222a: {
+    mmio.ciwp = data;
+    return;
+  }
+
+  //(DCNT) DMA control
+  case 0x2230: {
+    mmio.dmaen = (data & 0x80);
+    mmio.dprio = (data & 0x40);
+    mmio.cden  = (data & 0x20);
+    mmio.cdsel = (data & 0x10);
+    mmio.dd    = (data & 0x04);
+    mmio.sd    = (data & 0x03);
+
+    if(mmio.dmaen == 0) dma.line = 0;
+    return;
+  }
+
+  //(CDMA) character conversion DMA parameters
+  case 0x2231: {
+    mmio.chdend  = (data & 0x80);
+    mmio.dmasize = (data >> 2) & 7;
+    mmio.dmacb   = (data & 0x03);
+
+    if(mmio.chdend) cpubwram.dma = false;
+    if(mmio.dmasize > 5) mmio.dmasize = 5;
+    if(mmio.dmacb   > 2) mmio.dmacb   = 2;
+    return;
+  }
+
+  //(SDA) DMA source device start address
+  case 0x2232: { mmio.dsa = (mmio.dsa & 0xffff00) | (data <<  0); return; }
+  case 0x2233: { mmio.dsa = (mmio.dsa & 0xff00ff) | (data <<  8); return; }
+  case 0x2234: { mmio.dsa = (mmio.dsa & 0x00ffff) | (data << 16); return; }
+
+  //(DDA) DMA destination start address
+  case 0x2235: { mmio.dda = (mmio.dda & 0xffff00) | (data <<  0); return; }
+  case 0x2236: { mmio.dda = (mmio.dda & 0xff00ff) | (data <<  8);
+    if(mmio.dmaen) {
+      if(mmio.cden == 0 && mmio.dd == DMA::DestIRAM) {
+        dmaNormal();
+      } else if(mmio.cden == 1 && mmio.cdsel == 1) {
+        dmaCC1();
+      }
+    }
+    return;
+  }
+  case 0x2237: { mmio.dda = (mmio.dda & 0x00ffff) | (data << 16);
+    if(mmio.dmaen) {
+      if(mmio.cden == 0 && mmio.dd == DMA::DestBWRAM) {
+        dmaNormal();
+      }
+    }
+    return;
+  }
+
+  //(DTC) DMA terminal counter
+  case 0x2238: { mmio.dtc = (mmio.dtc & 0xff00) | (data << 0); return; }
+  case 0x2239: { mmio.dtc = (mmio.dtc & 0x00ff) | (data << 8); return; }
+
+  //(BBF) BW-RAM bitmap format
+  case 0x223f: { mmio.bbf = (data & 0x80); return; }
+
+  //(BRF) bitmap register files
+  case 0x2240: { mmio.brf[ 0] = data; return; }
+  case 0x2241: { mmio.brf[ 1] = data; return; }
+  case 0x2242: { mmio.brf[ 2] = data; return; }
+  case 0x2243: { mmio.brf[ 3] = data; return; }
+  case 0x2244: { mmio.brf[ 4] = data; return; }
+  case 0x2245: { mmio.brf[ 5] = data; return; }
+  case 0x2246: { mmio.brf[ 6] = data; return; }
+  case 0x2247: { mmio.brf[ 7] = data;
+    if(mmio.dmaen) {
+      if(mmio.cden == 1 && mmio.cdsel == 0) {
+        dmaCC2();
+      }
+    }
+    return;
+  }
+  case 0x2248: { mmio.brf[ 8] = data; return; }
+  case 0x2249: { mmio.brf[ 9] = data; return; }
+  case 0x224a: { mmio.brf[10] = data; return; }
+  case 0x224b: { mmio.brf[11] = data; return; }
+  case 0x224c: { mmio.brf[12] = data; return; }
+  case 0x224d: { mmio.brf[13] = data; return; }
+  case 0x224e: { mmio.brf[14] = data; return; }
+  case 0x224f: { mmio.brf[15] = data;
+    if(mmio.dmaen) {
+      if(mmio.cden == 1 && mmio.cdsel == 0) {
+        dmaCC2();
+      }
+    }
+    return;
+  }
+
+  //(MCNT) arithmetic control
+  case 0x2250: {
+    mmio.acm = (data & 0x02);
+    mmio.md  = (data & 0x01);
+
+    if(mmio.acm) mmio.mr = 0;
+    return;
+  }
+
+  //(MAL) multiplicand / dividend low
+  case 0x2251: {
+    mmio.ma = (mmio.ma & 0xff00) | data;
+    return;
+  }
+
+  //(MAH) multiplicand / dividend high
+  case 0x2252: {
+    mmio.ma = (data << 8) | (mmio.ma & 0x00ff);
+    return;
+  }
+
+  //(MBL) multiplier / divisor low
+  case 0x2253: {
+    mmio.mb = (mmio.mb & 0xff00) | data;
+    return;
+  }
+
+  //(MBH) multiplier / divisor high
+  //multiplication / cumulative sum only resets MB
+  //division resets both MA and MB
+  case 0x2254: {
+    mmio.mb = (data << 8) | (mmio.mb & 0x00ff);
+
+    if(mmio.acm == 0) {
+      if(mmio.md == 0) {
+        //signed multiplication
+        mmio.mr = (int16)mmio.ma * (int16)mmio.mb;
+        mmio.mb = 0;
+      } else {
+        //unsigned division
+        if(mmio.mb == 0) {
+          mmio.mr = 0;
+        } else {
+          int16  quotient  = (int16)mmio.ma / (uint16)mmio.mb;
+          uint16 remainder = (int16)mmio.ma % (uint16)mmio.mb;
+          mmio.mr = (remainder << 16) | quotient;
+        }
+        mmio.ma = 0;
+        mmio.mb = 0;
+      }
+    } else {
+      //sigma (accumulative multiplication)
+      mmio.mr += (int16)mmio.ma * (int16)mmio.mb;
+      mmio.overflow = (mmio.mr >= (1ULL << 40));
+      mmio.mr &= (1ULL << 40) - 1;
+      mmio.mb = 0;
+    }
+    return;
+  }
+
+  //(VBD) variable-length bit processing
+  case 0x2258: {
+    mmio.hl = (data & 0x80);
+    mmio.vb = (data & 0x0f);
+    if(mmio.vb == 0) mmio.vb = 16;
+
+    if(mmio.hl == 0) {
+      //fixed mode
+      mmio.vbit += mmio.vb;
+      mmio.va += (mmio.vbit >> 3);
+      mmio.vbit &= 7;
+    }
+    return;
+  }
+
+  //(VDA) variable-length bit game pak ROM start address
+  case 0x2259: { mmio.va = (mmio.va & 0xffff00) | (data <<  0); return; }
+  case 0x225a: { mmio.va = (mmio.va & 0xff00ff) | (data <<  8); return; }
+  case 0x225b: { mmio.va = (mmio.va & 0x00ffff) | (data << 16); mmio.vbit = 0; return; }
+
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/memory.cpp b/higan/sfc-balanced/coprocessor/sa1/memory.cpp
new file mode 100644
index 0000000..e59b94c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/memory.cpp
@@ -0,0 +1,268 @@
+auto SA1::busRead(uint24 addr, uint8 data) -> uint8 {
+  if((addr & 0x40fe00) == 0x002200) {  //$00-3f,80-bf:2200-23ff
+    return readIO(addr, data);
+  }
+
+  if((addr & 0x408000) == 0x008000) {  //$00-3f,80-bf:8000-ffff
+    addr = ((addr & 0x800000) >> 2) | ((addr & 0x3f0000) >> 1) | (addr & 0x7fff);
+    return mmcromRead(addr, data);
+  }
+
+  if((addr & 0xc00000) == 0xc00000) {  //$c0-ff:0000-ffff
+    return mmcromRead(addr, data);
+  }
+
+  if((addr & 0x40e000) == 0x006000) {  //$00-3f,80-bf:6000-7fff
+    return mmcSA1Read(addr, data);
+  }
+
+  if((addr & 0x40f800) == 0x000000) {  //$00-3f,80-bf:0000-07ff
+    synchronize(cpu);
+    return iram.read(addr & 2047, data);
+  }
+
+  if((addr & 0x40f800) == 0x003000) {  //$00-3f,80-bf:3000-37ff
+    synchronize(cpu);
+    return iram.read(addr & 2047, data);
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    synchronize(cpu);
+    return bwram.read(addr & (bwram.size() - 1), data);
+  }
+
+  if((addr & 0xf00000) == 0x600000) {  //$60-6f:0000-ffff
+    synchronize(cpu);
+    return bitmapRead(addr & 0x0fffff, data);
+  }
+
+  //unmapped region
+  return data;
+}
+
+auto SA1::busWrite(uint24 addr, uint8 data) -> void {
+  if((addr & 0x40fe00) == 0x002200) {  //$00-3f,80-bf:2200-23ff
+    return writeIO(addr, data);
+  }
+
+  if((addr & 0x40e000) == 0x006000) {  //$00-3f,80-bf:6000-7fff
+    return mmcSA1Write(addr, data);
+  }
+
+  if((addr & 0x40f800) == 0x000000) {  //$00-3f,80-bf:0000-07ff
+    synchronize(cpu);
+    return iram.write(addr & 2047, data);
+  }
+
+  if((addr & 0x40f800) == 0x003000) {  //$00-3f,80-bf:3000-37ff
+    synchronize(cpu);
+    return iram.write(addr & 2047, data);
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    synchronize(cpu);
+    return bwram.write(addr & (bwram.size() - 1), data);
+  }
+
+  if((addr & 0xf00000) == 0x600000) {  //$60-6f:0000-ffff
+    synchronize(cpu);
+    return bitmapWrite(addr & 0x0fffff, data);
+  }
+}
+
+//$230c (VDPL), $230d (VDPH) use this bus to read variable-length data.
+//this is used both to keep VBR-reads from accessing MMIO registers, and
+//to avoid syncing the S-CPU and SA-1*; as both chips are able to access
+//these ports.
+auto SA1::vbrRead(uint24 addr, uint8 data) -> uint8 {
+  if((addr & 0x408000) == 0x008000) {  //$00-3f,80-bf:8000-ffff
+    addr = ((addr & 0x800000) >> 2) | ((addr & 0x3f0000) >> 1) | (addr & 0x7fff);
+    return mmcromRead(addr, data);
+  }
+
+  if((addr & 0xc00000) == 0xc00000) {  //$c0-ff:0000-ffff
+    return mmcromRead(addr, data);
+  }
+
+  if((addr & 0x40e000) == 0x006000) {  //$00-3f,80-bf:6000-7fff
+    return bwram.read(addr & (bwram.size() - 1), data);
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    return bwram.read(addr & (bwram.size() - 1), data);
+  }
+
+  if((addr & 0x40f800) == 0x000000) {  //$00-3f,80-bf:0000-07ff
+    return iram.read(addr & 2047, data);
+  }
+
+  if((addr & 0x40f800) == 0x003000) {  //$00-3f,80-bf:3000-37ff
+    return iram.read(addr & 2047, data);
+  }
+
+  return 0x00;
+}
+
+//ROM, I-RAM and MMIO registers are accessed at ~10.74MHz (2 clock ticks)
+//BW-RAM is accessed at ~5.37MHz (4 clock ticks)
+//tick() == 2 clock ticks
+//note: bus conflict delays are not emulated at this time
+
+auto SA1::idle() -> void {
+  tick();
+}
+
+auto SA1::read(uint24 addr) -> uint8 {
+  tick();
+  if(((addr & 0x40e000) == 0x006000) || ((addr & 0xd00000) == 0x400000)) tick();
+  return busRead(addr, r.mdr);
+}
+
+auto SA1::write(uint24 addr, uint8 data) -> void {
+  tick();
+  if(((addr & 0x40e000) == 0x006000) || ((addr & 0xd00000) == 0x400000)) tick();
+  busWrite(addr, r.mdr = data);
+}
+
+//note: addresses are translated prior to invoking this function:
+//$00-3f,80-bf:8000-ffff mask=0x408000 => $00-3f:0000-ffff
+//$c0-ff:0000-ffff mask=0
+auto SA1::mmcromRead(uint24 addr, uint8) -> uint8 {
+  //reset vector overrides
+  if((addr & 0xffffe0) == 0x007fe0) {  //$00:ffe0-ffef
+    if(addr == 0x7fea && sa1.mmio.cpu_nvsw) return sa1.mmio.snv >> 0;
+    if(addr == 0x7feb && sa1.mmio.cpu_nvsw) return sa1.mmio.snv >> 8;
+    if(addr == 0x7fee && sa1.mmio.cpu_ivsw) return sa1.mmio.siv >> 0;
+    if(addr == 0x7fef && sa1.mmio.cpu_ivsw) return sa1.mmio.siv >> 8;
+  }
+
+  static auto read = [](uint addr) {
+    return sa1.rom.read(bus.mirror(addr, sa1.rom.size()));
+  };
+
+  bool lo = addr < 0x400000;  //*bmode==0 only applies to $00-3f,80-bf:8000-ffff
+  addr &= 0x3fffff;
+
+  if(addr < 0x100000) {  //$00-1f,8000-ffff; $c0-cf:0000-ffff
+    if(lo && mmio.cbmode == 0) return read(addr);
+    return read((mmio.cb << 20) | (addr & 0x0fffff));
+  }
+
+  if(addr < 0x200000) {  //$20-3f,8000-ffff; $d0-df:0000-ffff
+    if(lo && mmio.dbmode == 0) return read(addr);
+    return read((mmio.db << 20) | (addr & 0x0fffff));
+  }
+
+  if(addr < 0x300000) {  //$80-9f,8000-ffff; $e0-ef:0000-ffff
+    if(lo && mmio.ebmode == 0) return read(addr);
+    return read((mmio.eb << 20) | (addr & 0x0fffff));
+  }
+
+  if(addr < 0x400000) {  //$a0-bf,8000-ffff; $f0-ff:0000-ffff
+    if(lo && mmio.fbmode == 0) return read(addr);
+    return read((mmio.fb << 20) | (addr & 0x0fffff));
+  }
+
+  return 0x00;
+}
+
+auto SA1::mmcromWrite(uint24 addr, uint8 data) -> void {
+}
+
+auto SA1::mmcbwramRead(uint24 addr, uint8 data) -> uint8 {
+  if(addr < 0x2000) {  //$00-3f,80-bf:6000-7fff
+    cpu.synchronize(sa1);
+    addr = bus.mirror(mmio.sbm * 0x2000 + (addr & 0x1fff), cpubwram.size());
+    return cpubwram.read(addr);
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    return cpubwram.read(addr & 0x0fffff);
+  }
+
+  return data;
+}
+
+auto SA1::mmcbwramWrite(uint24 addr, uint8 data) -> void {
+  if(addr < 0x2000) {  //$00-3f,80-bf:6000-7fff
+    cpu.synchronize(sa1);
+    addr = bus.mirror(mmio.sbm * 0x2000 + (addr & 0x1fff), cpubwram.size());
+    return cpubwram.write(addr, data);
+  }
+
+  if((addr & 0xf00000) == 0x400000) {  //$40-4f:0000-ffff
+    return cpubwram.write(addr & 0x0fffff, data);
+  }
+}
+
+auto SA1::mmcSA1Read(uint addr, uint8 data) -> uint8 {
+  synchronize(cpu);
+  if(mmio.sw46 == 0) {
+    //$40-43:0000-ffff x  32 projection
+    addr = bus.mirror((mmio.cbm & 0x1f) * 0x2000 + (addr & 0x1fff), bwram.size());
+    return bwram.read(addr, data);
+  } else {
+    //$60-6f:0000-ffff x 128 projection
+    addr = bus.mirror(mmio.cbm * 0x2000 + (addr & 0x1fff), 0x100000);
+    return bitmapRead(addr, data);
+  }
+}
+
+auto SA1::mmcSA1Write(uint addr, uint8 data) -> void {
+  synchronize(cpu);
+  if(mmio.sw46 == 0) {
+    //$40-43:0000-ffff x  32 projection
+    addr = bus.mirror((mmio.cbm & 0x1f) * 0x2000 + (addr & 0x1fff), bwram.size());
+    bwram.write(addr, data);
+  } else {
+    //$60-6f:0000-ffff x 128 projection
+    addr = bus.mirror(mmio.cbm * 0x2000 + (addr & 0x1fff), 0x100000);
+    bitmapWrite(addr, data);
+  }
+}
+
+auto SA1::bitmapRead(uint addr, uint8 data) -> uint8 {
+  if(mmio.bbf == 0) {
+    //4bpp
+    uint shift = addr & 1;
+    addr = (addr >> 1) & (bwram.size() - 1);
+    switch(shift) {
+    case 0: return (bwram.read(addr) >> 0) & 15;
+    case 1: return (bwram.read(addr) >> 4) & 15;
+    }
+  } else {
+    //2bpp
+    uint shift = addr & 3;
+    addr = (addr >> 2) & (bwram.size() - 1);
+    switch(shift) {
+    case 0: return (bwram.read(addr) >> 0) & 3;
+    case 1: return (bwram.read(addr) >> 2) & 3;
+    case 2: return (bwram.read(addr) >> 4) & 3;
+    case 3: return (bwram.read(addr) >> 6) & 3;
+    }
+  }
+}
+
+auto SA1::bitmapWrite(uint addr, uint8 data) -> void {
+  if(mmio.bbf == 0) {
+    //4bpp
+    uint shift = addr & 1;
+    addr = (addr >> 1) & (bwram.size() - 1);
+    switch(shift) {
+    case 0: data = (bwram.read(addr) & 0xf0) | ((data & 15) << 0); break;
+    case 1: data = (bwram.read(addr) & 0x0f) | ((data & 15) << 4); break;
+    }
+  } else {
+    //2bpp
+    uint shift = addr & 3;
+    addr = (addr >> 2) & (bwram.size() - 1);
+    switch(shift) {
+    case 0: data = (bwram.read(addr) & 0xfc) | ((data &  3) << 0); break;
+    case 1: data = (bwram.read(addr) & 0xf3) | ((data &  3) << 2); break;
+    case 2: data = (bwram.read(addr) & 0xcf) | ((data &  3) << 4); break;
+    case 3: data = (bwram.read(addr) & 0x3f) | ((data &  3) << 6); break;
+    }
+  }
+
+  bwram.write(addr, data);
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/sa1.cpp b/higan/sfc-balanced/coprocessor/sa1/sa1.cpp
new file mode 100644
index 0000000..d4b1969
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/sa1.cpp
@@ -0,0 +1,324 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "bus.cpp"
+#include "dma.cpp"
+#include "memory.cpp"
+#include "io.cpp"
+#include "serialization.cpp"
+SA1 sa1;
+
+auto SA1::Enter() -> void {
+  while(true) scheduler.synchronize(), sa1.main();
+}
+
+auto SA1::main() -> void {
+  if(mmio.sa1_rdyb || mmio.sa1_resb) {
+    //SA-1 co-processor is asleep
+    tick();
+    synchronize(cpu);
+    return;
+  }
+
+  if(status.interruptPending) {
+    status.interruptPending = false;
+    interrupt();
+    return;
+  }
+
+  instruction();
+}
+
+//override WDC65816::interrupt() to support SA-1 vector location IO registers
+auto SA1::interrupt() -> void {
+  read(r.pc.d);
+  idle();
+  if(!r.e) writeSP(r.pc.b);
+  writeSP(r.pc.h);
+  writeSP(r.pc.l);
+  writeSP(r.e ? (r.p & ~0x10) : r.p);
+  r.pc.w = r.vector;
+  r.pc.b = 0x00;
+  r.p.i = 1;
+  r.p.d = 0;
+}
+
+auto SA1::lastCycle() -> void {
+  if(mmio.sa1_nmi && !mmio.sa1_nmicl) {
+    status.interruptPending = true;
+    r.vector = mmio.cnv;
+    mmio.sa1_nmifl = true;
+    mmio.sa1_nmicl = 1;
+    r.wai = false;
+  } else if(!r.p.i) {
+    if(mmio.timer_irqen && !mmio.timer_irqcl) {
+      status.interruptPending = true;
+      r.vector = mmio.civ;
+      mmio.timer_irqfl = true;
+      r.wai = false;
+    } else if(mmio.dma_irqen && !mmio.dma_irqcl) {
+      status.interruptPending = true;
+      r.vector = mmio.civ;
+      mmio.dma_irqfl = true;
+      r.wai = false;
+    } else if(mmio.sa1_irq && !mmio.sa1_irqcl) {
+      status.interruptPending = true;
+      r.vector = mmio.civ;
+      mmio.sa1_irqfl = true;
+      r.wai = false;
+    }
+  }
+}
+
+auto SA1::interruptPending() const -> bool {
+  return status.interruptPending;
+}
+
+auto SA1::tick() -> void {
+  step(2);
+  if(++status.counter == 0) synchronize(cpu);
+
+  //adjust counters:
+  //note that internally, status counters are in clocks;
+  //whereas MMIO register counters are in dots (4 clocks = 1 dot)
+  if(mmio.hvselb == 0) {
+    //HV timer
+    status.hcounter += 2;
+    if(status.hcounter >= 1364) {
+      status.hcounter = 0;
+      if(++status.vcounter >= status.scanlines) status.vcounter = 0;
+    }
+  } else {
+    //linear timer
+    status.hcounter += 2;
+    status.vcounter += (status.hcounter >> 11);
+    status.hcounter &= 0x07ff;
+    status.vcounter &= 0x01ff;
+  }
+
+  //test counters for timer IRQ
+  switch((mmio.ven << 1) + (mmio.hen << 0)) {
+  case 0: break;
+  case 1: if(status.hcounter == (mmio.hcnt << 2)) triggerIRQ(); break;
+  case 2: if(status.vcounter == mmio.vcnt && status.hcounter == 0) triggerIRQ(); break;
+  case 3: if(status.vcounter == mmio.vcnt && status.hcounter == (mmio.hcnt << 2)) triggerIRQ(); break;
+  }
+}
+
+auto SA1::triggerIRQ() -> void {
+  mmio.timer_irqfl = true;
+  if(mmio.timer_irqen) mmio.timer_irqcl = 0;
+}
+
+auto SA1::init() -> void {
+}
+
+auto SA1::load() -> void {
+}
+
+auto SA1::unload() -> void {
+  rom.reset();
+  iram.reset();
+  bwram.reset();
+}
+
+auto SA1::power() -> void {
+  r.a = 0x0000;
+  r.x = 0x0000;
+  r.y = 0x0000;
+  r.s = 0x01ff;
+}
+
+auto SA1::reset() -> void {
+  create(SA1::Enter, system.colorburst() * 6.0);
+
+  cpubwram.dma = false;
+  for(auto addr : range(iram.size())) {
+    iram.write(addr, 0x00);
+  }
+
+  r.pc.d   = 0x000000;
+  r.x.h    = 0x00;
+  r.y.h    = 0x00;
+  r.s.h    = 0x01;
+  r.d      = 0x0000;
+  r.db     = 0x00;
+  r.p      = 0x34;
+  r.e      = 1;
+  r.mdr    = 0x00;
+  r.wai    = false;
+  r.vector = 0x0000;
+
+  status.counter = 0;
+
+  status.interruptPending = false;
+
+  status.scanlines = (system.region() == System::Region::NTSC ? 262 : 312);
+  status.vcounter  = 0;
+  status.hcounter  = 0;
+
+  dma.line = 0;
+
+  //$2200 CCNT
+  mmio.sa1_irq  = false;
+  mmio.sa1_rdyb = false;
+  mmio.sa1_resb = true;
+  mmio.sa1_nmi  = false;
+  mmio.smeg     = 0;
+
+  //$2201 SIE
+  mmio.cpu_irqen   = false;
+  mmio.chdma_irqen = false;
+
+  //$2202 SIC
+  mmio.cpu_irqcl   = false;
+  mmio.chdma_irqcl = false;
+
+  //$2203,$2204 CRV
+  mmio.crv = 0x0000;
+
+  //$2205,$2206 CNV
+  mmio.cnv = 0x0000;
+
+  //$2207,$2208 CIV
+  mmio.civ = 0x0000;
+
+  //$2209 SCNT
+  mmio.cpu_irq  = false;
+  mmio.cpu_ivsw = false;
+  mmio.cpu_nvsw = false;
+  mmio.cmeg     = 0;
+
+  //$220a CIE
+  mmio.sa1_irqen   = false;
+  mmio.timer_irqen = false;
+  mmio.dma_irqen   = false;
+  mmio.sa1_nmien   = false;
+
+  //$220b CIC
+  mmio.sa1_irqcl   = false;
+  mmio.timer_irqcl = false;
+  mmio.dma_irqcl   = false;
+  mmio.sa1_nmicl   = false;
+
+  //$220c,$220d SNV
+  mmio.snv = 0x0000;
+
+  //$220e,$220f SIV
+  mmio.siv = 0x0000;
+
+  //$2210
+  mmio.hvselb = false;
+  mmio.ven    = false;
+  mmio.hen    = false;
+
+  //$2212,$2213 HCNT
+  mmio.hcnt = 0x0000;
+
+  //$2214,$2215 VCNT
+  mmio.vcnt = 0x0000;
+
+  //$2220-2223 CXB, DXB, EXB, FXB
+  mmio.cbmode = 0;
+  mmio.dbmode = 0;
+  mmio.ebmode = 0;
+  mmio.fbmode = 0;
+
+  mmio.cb = 0x00;
+  mmio.db = 0x01;
+  mmio.eb = 0x02;
+  mmio.fb = 0x03;
+
+  //$2224 BMAPS
+  mmio.sbm = 0x00;
+
+  //$2225 BMAP
+  mmio.sw46 = false;
+  mmio.cbm  = 0x00;
+
+  //$2226 SWBE
+  mmio.swen = false;
+
+  //$2227 CWBE
+  mmio.cwen = false;
+
+  //$2228 BWPA
+  mmio.bwp = 0x0f;
+
+  //$2229 SIWP
+  mmio.siwp = 0x00;
+
+  //$222a CIWP
+  mmio.ciwp = 0x00;
+
+  //$2230 DCNT
+  mmio.dmaen = false;
+  mmio.dprio = false;
+  mmio.cden  = false;
+  mmio.cdsel = false;
+  mmio.dd    = 0;
+  mmio.sd    = 0;
+
+  //$2231 CDMA
+  mmio.chdend  = false;
+  mmio.dmasize = 0;
+  mmio.dmacb   = 0;
+
+  //$2232-$2234 SDA
+  mmio.dsa = 0x000000;
+
+  //$2235-$2237 DDA
+  mmio.dda = 0x000000;
+
+  //$2238,$2239 DTC
+  mmio.dtc = 0x0000;
+
+  //$223f BBF
+  mmio.bbf = 0;
+
+  //$2240-$224f BRF
+  for(auto& n : mmio.brf) n = 0x00;
+
+  //$2250 MCNT
+  mmio.acm = 0;
+  mmio.md  = 0;
+
+  //$2251,$2252 MA
+  mmio.ma = 0x0000;
+
+  //$2253,$2254 MB
+  mmio.mb = 0x0000;
+
+  //$2258 VBD
+  mmio.hl = false;
+  mmio.vb = 16;
+
+  //$2259-$225b
+  mmio.va   = 0x000000;
+  mmio.vbit = 0;
+
+  //$2300 SFR
+  mmio.cpu_irqfl   = false;
+  mmio.chdma_irqfl = false;
+
+  //$2301 CFR
+  mmio.sa1_irqfl   = false;
+  mmio.timer_irqfl = false;
+  mmio.dma_irqfl   = false;
+  mmio.sa1_nmifl   = false;
+
+  //$2302,$2303 HCR
+  mmio.hcr = 0x0000;
+
+  //$2304,$2305 VCR
+  mmio.vcr = 0x0000;
+
+  //$2306-$230a MR
+  mmio.mr = 0;
+
+  //$230b
+  mmio.overflow = false;
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/sa1/sa1.hpp b/higan/sfc-balanced/coprocessor/sa1/sa1.hpp
new file mode 100644
index 0000000..4df67be
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/sa1.hpp
@@ -0,0 +1,261 @@
+struct SA1 : Processor::WDC65816, Thread {
+  //sa1.cpp
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto tick() -> void;
+  auto interrupt() -> void override;
+
+  alwaysinline auto triggerIRQ() -> void;
+  alwaysinline auto lastCycle() -> void override;
+  alwaysinline auto interruptPending() const -> bool override;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //bus.cpp
+  struct CPUIRAM : Memory {
+    auto size() const -> uint;
+    alwaysinline auto read(uint24, uint8 = 0) -> uint8;
+    alwaysinline auto write(uint24, uint8) -> void;
+  };
+
+  struct CPUBWRAM : Memory {
+    auto size() const -> uint;
+    alwaysinline auto read(uint24, uint8 = 0) -> uint8;
+    alwaysinline auto write(uint24, uint8) -> void;
+    bool dma;
+  };
+
+  //dma.cpp
+  struct DMA {
+    enum CDEN : uint { DmaNormal = 0, DmaCharConversion = 1 };
+    enum SD : uint { SourceROM = 0, SourceBWRAM = 1, SourceIRAM = 2 };
+    enum DD : uint { DestIRAM = 0, DestBWRAM = 1 };
+    uint line;
+  };
+
+  auto dmaNormal() -> void;
+  auto dmaCC1() -> void;
+  auto dmaCC1Read(uint addr) -> uint8;
+  auto dmaCC2() -> void;
+
+  //memory.cpp
+  auto busRead(uint24 addr, uint8 data) -> uint8;
+  auto busWrite(uint24 addr, uint8 data) -> void;
+  auto vbrRead(uint24 addr, uint8 data = 0) -> uint8;
+
+  alwaysinline auto idle() -> void override;
+  alwaysinline auto read(uint24 addr) -> uint8 override;
+  alwaysinline auto write(uint24 addr, uint8 data) -> void override;
+
+  auto mmcromRead(uint24 addr, uint8 data) -> uint8;
+  auto mmcromWrite(uint24 addr, uint8 data) -> void;
+
+  auto mmcbwramRead(uint24 addr, uint8 data) -> uint8;
+  auto mmcbwramWrite(uint24 addr, uint8 data) -> void;
+
+  auto mmcSA1Read(uint addr, uint8 data) -> uint8;
+  auto mmcSA1Write(uint addr, uint8 data) -> void;
+
+  auto bitmapRead(uint addr, uint8 data) -> uint8;
+  auto bitmapWrite(uint addr, uint8 data) -> void;
+
+  //io.cpp
+  auto readIO(uint24 addr, uint8 data) -> uint8;
+  auto writeIO(uint24 addr, uint8 data) -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  MappedRAM rom;
+  MappedRAM iram;
+  MappedRAM bwram;
+
+  CPUIRAM cpuiram;
+  CPUBWRAM cpubwram;
+
+private:
+  DMA dma;
+
+  struct Status {
+    uint8 counter;
+
+    bool interruptPending;
+
+    uint16 scanlines;
+    uint16 vcounter;
+    uint16 hcounter;
+  } status;
+
+  struct MMIO {
+    //$2200 CCNT
+    bool sa1_irq;
+    bool sa1_rdyb;
+    bool sa1_resb;
+    bool sa1_nmi;
+    uint8 smeg;
+
+    //$2201 SIE
+    bool cpu_irqen;
+    bool chdma_irqen;
+
+    //$2202 SIC
+    bool cpu_irqcl;
+    bool chdma_irqcl;
+
+    //$2203,$2204 CRV
+    uint16 crv;
+
+    //$2205,$2206 CNV
+    uint16 cnv;
+
+    //$2207,$2208 CIV
+    uint16 civ;
+
+    //$2209 SCNT
+    bool cpu_irq;
+    bool cpu_ivsw;
+    bool cpu_nvsw;
+    uint8 cmeg;
+
+    //$220a CIE
+    bool sa1_irqen;
+    bool timer_irqen;
+    bool dma_irqen;
+    bool sa1_nmien;
+
+    //$220b CIC
+    bool sa1_irqcl;
+    bool timer_irqcl;
+    bool dma_irqcl;
+    bool sa1_nmicl;
+
+    //$220c,$220d SNV
+    uint16 snv;
+
+    //$220e,$220f SIV
+    uint16 siv;
+
+    //$2210 TMC
+    bool hvselb;
+    bool ven;
+    bool hen;
+
+    //$2212,$2213
+    uint16 hcnt;
+
+    //$2214,$2215
+    uint16 vcnt;
+
+    //$2220 CXB
+    bool cbmode;
+    uint cb;
+
+    //$2221 DXB
+    bool dbmode;
+    uint db;
+
+    //$2222 EXB
+    bool ebmode;
+    uint eb;
+
+    //$2223 FXB
+    bool fbmode;
+    uint fb;
+
+    //$2224 BMAPS
+    uint8 sbm;
+
+    //$2225 BMAP
+    bool sw46;
+    uint8 cbm;
+
+    //$2226 SBWE
+    bool swen;
+
+    //$2227 CBWE
+    bool cwen;
+
+    //$2228 BWPA
+    uint8 bwp;
+
+    //$2229 SIWP
+    uint8 siwp;
+
+    //$222a CIWP
+    uint8 ciwp;
+
+    //$2230 DCNT
+    bool dmaen;
+    bool dprio;
+    bool cden;
+    bool cdsel;
+    bool dd;
+    uint8 sd;
+
+    //$2231 CDMA
+    bool chdend;
+    uint8 dmasize;
+    uint8 dmacb;
+
+    //$2232-$2234 SDA
+    uint32 dsa;
+
+    //$2235-$2237 DDA
+    uint32 dda;
+
+    //$2238,$2239 DTC
+    uint16 dtc;
+
+    //$223f BBF
+    bool bbf;
+
+    //$2240-224f BRF
+    uint8 brf[16];
+
+    //$2250 MCNT
+    bool acm;
+    bool md;
+
+    //$2251,$2252 MA
+    uint16 ma;
+
+    //$2253,$2254 MB
+    uint16 mb;
+
+    //$2258 VBD
+    bool hl;
+    uint8 vb;
+
+    //$2259-$225b VDA
+    uint32 va;
+    uint8 vbit;
+
+    //$2300 SFR
+    bool cpu_irqfl;
+    bool chdma_irqfl;
+
+    //$2301 CFR
+    bool sa1_irqfl;
+    bool timer_irqfl;
+    bool dma_irqfl;
+    bool sa1_nmifl;
+
+    //$2302,$2303 HCR
+    uint16 hcr;
+
+    //$2304,$2305 VCR
+    uint16 vcr;
+
+    //$2306-230a MR
+    uint64 mr;
+
+    //$230b OF
+    bool overflow;
+  } mmio;
+};
+
+extern SA1 sa1;
diff --git a/higan/sfc-balanced/coprocessor/sa1/serialization.cpp b/higan/sfc-balanced/coprocessor/sa1/serialization.cpp
new file mode 100644
index 0000000..5ab0688
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sa1/serialization.cpp
@@ -0,0 +1,147 @@
+auto SA1::serialize(serializer& s) -> void {
+  WDC65816::serialize(s);
+  Thread::serialize(s);
+
+  s.array(iram.data(), iram.size());
+  s.array(bwram.data(), bwram.size());
+
+  //sa1.hpp
+  s.integer(status.counter);
+
+  s.integer(status.interruptPending);
+
+  s.integer(status.scanlines);
+  s.integer(status.vcounter);
+  s.integer(status.hcounter);
+
+  //bus/bus.hpp
+  s.array(iram.data(), iram.size());
+
+  s.integer(cpubwram.dma);
+
+  //dma/dma.hpp
+  s.integer(dma.line);
+
+  //mmio/mmio.hpp
+  s.integer(mmio.sa1_irq);
+  s.integer(mmio.sa1_rdyb);
+  s.integer(mmio.sa1_resb);
+  s.integer(mmio.sa1_nmi);
+  s.integer(mmio.smeg);
+
+  s.integer(mmio.cpu_irqen);
+  s.integer(mmio.chdma_irqen);
+
+  s.integer(mmio.cpu_irqcl);
+  s.integer(mmio.chdma_irqcl);
+
+  s.integer(mmio.crv);
+
+  s.integer(mmio.cnv);
+
+  s.integer(mmio.civ);
+
+  s.integer(mmio.cpu_irq);
+  s.integer(mmio.cpu_ivsw);
+  s.integer(mmio.cpu_nvsw);
+  s.integer(mmio.cmeg);
+
+  s.integer(mmio.sa1_irqen);
+  s.integer(mmio.timer_irqen);
+  s.integer(mmio.dma_irqen);
+  s.integer(mmio.sa1_nmien);
+
+  s.integer(mmio.sa1_irqcl);
+  s.integer(mmio.timer_irqcl);
+  s.integer(mmio.dma_irqcl);
+  s.integer(mmio.sa1_nmicl);
+
+  s.integer(mmio.snv);
+
+  s.integer(mmio.siv);
+
+  s.integer(mmio.hvselb);
+  s.integer(mmio.ven);
+  s.integer(mmio.hen);
+
+  s.integer(mmio.hcnt);
+
+  s.integer(mmio.vcnt);
+
+  s.integer(mmio.cbmode);
+  s.integer(mmio.cb);
+
+  s.integer(mmio.dbmode);
+  s.integer(mmio.db);
+
+  s.integer(mmio.ebmode);
+  s.integer(mmio.eb);
+
+  s.integer(mmio.fbmode);
+  s.integer(mmio.fb);
+
+  s.integer(mmio.sbm);
+
+  s.integer(mmio.sw46);
+  s.integer(mmio.cbm);
+
+  s.integer(mmio.swen);
+
+  s.integer(mmio.cwen);
+
+  s.integer(mmio.bwp);
+
+  s.integer(mmio.siwp);
+
+  s.integer(mmio.ciwp);
+
+  s.integer(mmio.dmaen);
+  s.integer(mmio.dprio);
+  s.integer(mmio.cden);
+  s.integer(mmio.cdsel);
+  s.integer(mmio.dd);
+  s.integer(mmio.sd);
+
+  s.integer(mmio.chdend);
+  s.integer(mmio.dmasize);
+  s.integer(mmio.dmacb);
+
+  s.integer(mmio.dsa);
+
+  s.integer(mmio.dda);
+
+  s.integer(mmio.dtc);
+
+  s.integer(mmio.bbf);
+
+  s.array(mmio.brf);
+
+  s.integer(mmio.acm);
+  s.integer(mmio.md);
+
+  s.integer(mmio.ma);
+
+  s.integer(mmio.mb);
+
+  s.integer(mmio.hl);
+  s.integer(mmio.vb);
+
+  s.integer(mmio.va);
+  s.integer(mmio.vbit);
+
+  s.integer(mmio.cpu_irqfl);
+  s.integer(mmio.chdma_irqfl);
+
+  s.integer(mmio.sa1_irqfl);
+  s.integer(mmio.timer_irqfl);
+  s.integer(mmio.dma_irqfl);
+  s.integer(mmio.sa1_nmifl);
+
+  s.integer(mmio.hcr);
+
+  s.integer(mmio.vcr);
+
+  s.integer(mmio.mr);
+
+  s.integer(mmio.overflow);
+}
diff --git a/higan/sfc-balanced/coprocessor/sdd1/decompressor.cpp b/higan/sfc-balanced/coprocessor/sdd1/decompressor.cpp
new file mode 100644
index 0000000..66fb609
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sdd1/decompressor.cpp
@@ -0,0 +1,284 @@
+//S-DD1 decompression algorithm implementation
+//original code written by Andreas Naive (public domain license)
+//bsnes port written by byuu
+
+//note: decompression module does not need to be serialized with bsnes
+//this is because decompression only runs during DMA, and bsnes will complete
+//any pending DMA transfers prior to serialization.
+
+//input manager
+
+auto SDD1::Decompressor::IM::init(uint offset_) -> void {
+  offset = offset_;
+  bitCount = 4;
+}
+
+auto SDD1::Decompressor::IM::getCodeWord(uint8 codeLength) -> uint8 {
+  uint8 codeWord;
+  uint8 compCount;
+
+  codeWord = sdd1.mmcRead(offset) << bitCount;
+  bitCount++;
+
+  if(codeWord & 0x80) {
+    codeWord |= sdd1.mmcRead(offset + 1) >> (9 - bitCount);
+    bitCount += codeLength;
+  }
+
+  if(bitCount & 0x08) {
+    offset++;
+    bitCount &= 0x07;
+  }
+
+  return codeWord;
+}
+
+//golomb-code decoder
+
+const uint8 SDD1::Decompressor::GCD::runCount[] = {
+  0x00, 0x00, 0x01, 0x00, 0x03, 0x01, 0x02, 0x00,
+  0x07, 0x03, 0x05, 0x01, 0x06, 0x02, 0x04, 0x00,
+  0x0f, 0x07, 0x0b, 0x03, 0x0d, 0x05, 0x09, 0x01,
+  0x0e, 0x06, 0x0a, 0x02, 0x0c, 0x04, 0x08, 0x00,
+  0x1f, 0x0f, 0x17, 0x07, 0x1b, 0x0b, 0x13, 0x03,
+  0x1d, 0x0d, 0x15, 0x05, 0x19, 0x09, 0x11, 0x01,
+  0x1e, 0x0e, 0x16, 0x06, 0x1a, 0x0a, 0x12, 0x02,
+  0x1c, 0x0c, 0x14, 0x04, 0x18, 0x08, 0x10, 0x00,
+  0x3f, 0x1f, 0x2f, 0x0f, 0x37, 0x17, 0x27, 0x07,
+  0x3b, 0x1b, 0x2b, 0x0b, 0x33, 0x13, 0x23, 0x03,
+  0x3d, 0x1d, 0x2d, 0x0d, 0x35, 0x15, 0x25, 0x05,
+  0x39, 0x19, 0x29, 0x09, 0x31, 0x11, 0x21, 0x01,
+  0x3e, 0x1e, 0x2e, 0x0e, 0x36, 0x16, 0x26, 0x06,
+  0x3a, 0x1a, 0x2a, 0x0a, 0x32, 0x12, 0x22, 0x02,
+  0x3c, 0x1c, 0x2c, 0x0c, 0x34, 0x14, 0x24, 0x04,
+  0x38, 0x18, 0x28, 0x08, 0x30, 0x10, 0x20, 0x00,
+  0x7f, 0x3f, 0x5f, 0x1f, 0x6f, 0x2f, 0x4f, 0x0f,
+  0x77, 0x37, 0x57, 0x17, 0x67, 0x27, 0x47, 0x07,
+  0x7b, 0x3b, 0x5b, 0x1b, 0x6b, 0x2b, 0x4b, 0x0b,
+  0x73, 0x33, 0x53, 0x13, 0x63, 0x23, 0x43, 0x03,
+  0x7d, 0x3d, 0x5d, 0x1d, 0x6d, 0x2d, 0x4d, 0x0d,
+  0x75, 0x35, 0x55, 0x15, 0x65, 0x25, 0x45, 0x05,
+  0x79, 0x39, 0x59, 0x19, 0x69, 0x29, 0x49, 0x09,
+  0x71, 0x31, 0x51, 0x11, 0x61, 0x21, 0x41, 0x01,
+  0x7e, 0x3e, 0x5e, 0x1e, 0x6e, 0x2e, 0x4e, 0x0e,
+  0x76, 0x36, 0x56, 0x16, 0x66, 0x26, 0x46, 0x06,
+  0x7a, 0x3a, 0x5a, 0x1a, 0x6a, 0x2a, 0x4a, 0x0a,
+  0x72, 0x32, 0x52, 0x12, 0x62, 0x22, 0x42, 0x02,
+  0x7c, 0x3c, 0x5c, 0x1c, 0x6c, 0x2c, 0x4c, 0x0c,
+  0x74, 0x34, 0x54, 0x14, 0x64, 0x24, 0x44, 0x04,
+  0x78, 0x38, 0x58, 0x18, 0x68, 0x28, 0x48, 0x08,
+  0x70, 0x30, 0x50, 0x10, 0x60, 0x20, 0x40, 0x00,
+};
+
+auto SDD1::Decompressor::GCD::getRunCount(uint8 codeNumber, uint8& mpsCount, bool& lpsIndex) -> void {
+  uint8 codeWord = self.im.getCodeWord(codeNumber);
+
+  if(codeWord & 0x80) {
+    lpsIndex = 1;
+    mpsCount = runCount[codeWord >> (codeNumber ^ 0x07)];
+  } else {
+    mpsCount = 1 << codeNumber;
+  }
+}
+
+//bits generator
+
+auto SDD1::Decompressor::BG::init() -> void {
+  mpsCount = 0;
+  lpsIndex = 0;
+}
+
+auto SDD1::Decompressor::BG::getBit(bool& endOfRun) -> uint8 {
+  if(!(mpsCount || lpsIndex)) self.gcd.getRunCount(codeNumber, mpsCount, lpsIndex);
+
+  uint8 bit;
+  if(mpsCount) {
+    bit = 0;
+    mpsCount--;
+  } else {
+    bit = 1;
+    lpsIndex = 0;
+  }
+
+  endOfRun = !(mpsCount || lpsIndex);
+  return bit;
+}
+
+//probability estimation module
+
+const SDD1::Decompressor::PEM::State SDD1::Decompressor::PEM::evolutionTable[33] = {
+  {0, 25, 25},
+  {0,  2,  1},
+  {0,  3,  1},
+  {0,  4,  2},
+  {0,  5,  3},
+  {1,  6,  4},
+  {1,  7,  5},
+  {1,  8,  6},
+  {1,  9,  7},
+  {2, 10,  8},
+  {2, 11,  9},
+  {2, 12, 10},
+  {2, 13, 11},
+  {3, 14, 12},
+  {3, 15, 13},
+  {3, 16, 14},
+  {3, 17, 15},
+  {4, 18, 16},
+  {4, 19, 17},
+  {5, 20, 18},
+  {5, 21, 19},
+  {6, 22, 20},
+  {6, 23, 21},
+  {7, 24, 22},
+  {7, 24, 23},
+  {0, 26,  1},
+  {1, 27,  2},
+  {2, 28,  4},
+  {3, 29,  8},
+  {4, 30, 12},
+  {5, 31, 16},
+  {6, 32, 18},
+  {7, 24, 22},
+};
+
+auto SDD1::Decompressor::PEM::init() -> void {
+  for(auto n : range(32)) {
+    contextInfo[n].status = 0;
+    contextInfo[n].mps = 0;
+  }
+}
+
+auto SDD1::Decompressor::PEM::getBit(uint8 context) -> uint8 {
+  ContextInfo& info = contextInfo[context];
+  uint8 currentStatus = info.status;
+  uint8 currentMps = info.mps;
+  const State& s = SDD1::Decompressor::PEM::evolutionTable[currentStatus];
+
+  uint8 bit;
+  bool endOfRun;
+  switch(s.codeNumber) {
+  case 0: bit = self.bg0.getBit(endOfRun); break;
+  case 1: bit = self.bg1.getBit(endOfRun); break;
+  case 2: bit = self.bg2.getBit(endOfRun); break;
+  case 3: bit = self.bg3.getBit(endOfRun); break;
+  case 4: bit = self.bg4.getBit(endOfRun); break;
+  case 5: bit = self.bg5.getBit(endOfRun); break;
+  case 6: bit = self.bg6.getBit(endOfRun); break;
+  case 7: bit = self.bg7.getBit(endOfRun); break;
+  }
+
+  if(endOfRun) {
+    if(bit) {
+      if(!(currentStatus & 0xfe)) info.mps ^= 0x01;
+      info.status = s.nextIfLps;
+    } else {
+      info.status = s.nextIfMps;
+    }
+  }
+
+  return bit ^ currentMps;
+}
+
+//context model
+
+auto SDD1::Decompressor::CM::init(uint offset) -> void {
+  bitplanesInfo = sdd1.mmcRead(offset) & 0xc0;
+  contextBitsInfo = sdd1.mmcRead(offset) & 0x30;
+  bitNumber = 0;
+  for(auto n : range(8)) previousBitplaneBits[n] = 0;
+  switch(bitplanesInfo) {
+  case 0x00: currentBitplane = 1; break;
+  case 0x40: currentBitplane = 7; break;
+  case 0x80: currentBitplane = 3; break;
+  }
+}
+
+auto SDD1::Decompressor::CM::getBit() -> uint8 {
+  switch(bitplanesInfo) {
+  case 0x00:
+    currentBitplane ^= 0x01;
+    break;
+  case 0x40:
+    currentBitplane ^= 0x01;
+    if(!(bitNumber & 0x7f)) currentBitplane = ((currentBitplane + 2) & 0x07);
+    break;
+  case 0x80:
+    currentBitplane ^= 0x01;
+    if(!(bitNumber & 0x7f)) currentBitplane ^= 0x02;
+    break;
+  case 0xc0:
+    currentBitplane = bitNumber & 0x07;
+    break;
+  }
+
+  uint16& contextBits = previousBitplaneBits[currentBitplane];
+  uint8 currentContext = (currentBitplane & 0x01) << 4;
+  switch(contextBitsInfo) {
+  case 0x00: currentContext |= ((contextBits & 0x01c0) >> 5) | (contextBits & 0x0001); break;
+  case 0x10: currentContext |= ((contextBits & 0x0180) >> 5) | (contextBits & 0x0001); break;
+  case 0x20: currentContext |= ((contextBits & 0x00c0) >> 5) | (contextBits & 0x0001); break;
+  case 0x30: currentContext |= ((contextBits & 0x0180) >> 5) | (contextBits & 0x0003); break;
+  }
+
+  uint8 bit = self.pem.getBit(currentContext);
+  contextBits <<= 1;
+  contextBits |= bit;
+  bitNumber++;
+  return bit;
+}
+
+//output logic
+
+auto SDD1::Decompressor::OL::init(uint offset) -> void {
+  bitplanesInfo = sdd1.mmcRead(offset) & 0xc0;
+  r0 = 0x01;
+}
+
+auto SDD1::Decompressor::OL::decompress() -> uint8 {
+  switch(bitplanesInfo) {
+  case 0x00: case 0x40: case 0x80:
+    if(r0 == 0) {
+      r0 = ~r0;
+      return r2;
+    }
+    for(r0 = 0x80, r1 = 0, r2 = 0; r0; r0 >>= 1) {
+      if(self.cm.getBit()) r1 |= r0;
+      if(self.cm.getBit()) r2 |= r0;
+    }
+    return r1;
+  case 0xc0:
+    for(r0 = 0x01, r1 = 0; r0; r0 <<= 1) {
+      if(self.cm.getBit()) r1 |= r0;
+    }
+    return r1;
+  }
+}
+
+//core
+
+SDD1::Decompressor::Decompressor():
+im(*this), gcd(*this),
+bg0(*this, 0), bg1(*this, 1), bg2(*this, 2), bg3(*this, 3),
+bg4(*this, 4), bg5(*this, 5), bg6(*this, 6), bg7(*this, 7),
+pem(*this), cm(*this), ol(*this) {
+}
+
+auto SDD1::Decompressor::init(uint offset) -> void {
+  im.init(offset);
+  bg0.init();
+  bg1.init();
+  bg2.init();
+  bg3.init();
+  bg4.init();
+  bg5.init();
+  bg6.init();
+  bg7.init();
+  pem.init();
+  cm.init(offset);
+  ol.init(offset);
+}
+
+auto SDD1::Decompressor::read() -> uint8 {
+  return ol.decompress();
+}
diff --git a/higan/sfc-balanced/coprocessor/sdd1/decompressor.hpp b/higan/sfc-balanced/coprocessor/sdd1/decompressor.hpp
new file mode 100644
index 0000000..fad4901
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sdd1/decompressor.hpp
@@ -0,0 +1,88 @@
+struct Decompressor {
+  struct IM {  //input manager
+    IM(SDD1::Decompressor& self) : self(self) {}
+    auto init(uint offset) -> void;
+    auto getCodeWord(uint8 codeLength) -> uint8;
+
+  private:
+    Decompressor& self;
+    uint offset;
+    uint bitCount;
+  };
+
+  struct GCD {  //golomb-code decoder
+    GCD(SDD1::Decompressor& self) : self(self) {}
+    auto getRunCount(uint8 codeNumber, uint8& mpsCount, bool& lpsIndex) -> void;
+
+  private:
+    Decompressor& self;
+    static const uint8 runCount[256];
+  };
+
+  struct BG {  //bits generator
+    BG(SDD1::Decompressor& self, uint8 codeNumber) : self(self), codeNumber(codeNumber) {}
+    auto init() -> void;
+    auto getBit(bool& endOfRun) -> uint8;
+
+  private:
+    Decompressor& self;
+    const uint8 codeNumber;
+    uint8 mpsCount;
+    bool lpsIndex;
+  };
+
+  struct PEM {  //probability estimation module
+    PEM(SDD1::Decompressor& self) : self(self) {}
+    auto init() -> void;
+    auto getBit(uint8 context) -> uint8;
+
+  private:
+    Decompressor& self;
+    struct State {
+      uint8 codeNumber;
+      uint8 nextIfMps;
+      uint8 nextIfLps;
+    };
+    static const State evolutionTable[33];
+    struct ContextInfo {
+      uint8 status;
+      uint8 mps;
+    } contextInfo[32];
+  };
+
+  struct CM {  //context model
+    CM(SDD1::Decompressor& self) : self(self) {}
+    auto init(uint offset) -> void;
+    auto getBit() -> uint8;
+
+  private:
+    Decompressor& self;
+    uint8 bitplanesInfo;
+    uint8 contextBitsInfo;
+    uint8 bitNumber;
+    uint8 currentBitplane;
+    uint16 previousBitplaneBits[8];
+  };
+
+  struct OL {  //output logic
+    OL(SDD1::Decompressor& self) : self(self) {}
+    auto init(uint offset) -> void;
+    auto decompress() -> uint8;
+
+  private:
+    Decompressor& self;
+    uint8 bitplanesInfo;
+    uint8 r0, r1, r2;
+  };
+
+  Decompressor();
+  auto init(uint offset) -> void;
+  auto read() -> uint8;
+
+  IM  im;
+  GCD gcd;
+  BG  bg0, bg1, bg2, bg3, bg4, bg5, bg6, bg7;
+  PEM pem;
+  CM  cm;
+  OL  ol;
+};
diff --git a/higan/sfc-balanced/coprocessor/sdd1/sdd1.cpp b/higan/sfc-balanced/coprocessor/sdd1/sdd1.cpp
new file mode 100644
index 0000000..36845a7
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sdd1/sdd1.cpp
@@ -0,0 +1,152 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+SDD1 sdd1;
+
+#include "decompressor.cpp"
+#include "serialization.cpp"
+
+auto SDD1::init() -> void {
+}
+
+void SDD1::load() {
+}
+
+auto SDD1::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+auto SDD1::power() -> void {
+}
+
+auto SDD1::reset() -> void {
+  //hook S-CPU DMA MMIO registers to gather information for struct dma[];
+  //buffer address and transfer size information for use in SDD1::mcu_read()
+  bus.map({&SDD1::dmaRead, &sdd1}, {&SDD1::dmaWrite, &sdd1}, "00-3f,80-bf:4300-437f");
+
+  r4800 = 0x00;
+  r4801 = 0x00;
+  r4804 = 0x00;
+  r4805 = 0x01;
+  r4806 = 0x02;
+  r4807 = 0x03;
+
+  for(auto n : range(8)) {
+    dma[n].addr = 0;
+    dma[n].size = 0;
+  }
+  dmaReady = false;
+}
+
+auto SDD1::read(uint24 addr, uint8 data) -> uint8 {
+  addr = 0x4800 | addr.bits(0,3);
+
+  switch(addr) {
+  case 0x4800: return r4800;
+  case 0x4801: return r4801;
+  case 0x4804: return r4804;
+  case 0x4805: return r4805;
+  case 0x4806: return r4806;
+  case 0x4807: return r4807;
+  }
+
+  //00-3f,80-bf:4802-4803,4808-480f falls through to ROM
+  return rom.read(addr);
+}
+
+auto SDD1::write(uint24 addr, uint8 data) -> void {
+  addr = 0x4800 | addr.bits(0,3);
+
+  switch(addr) {
+  case 0x4800: r4800 = data; break;
+  case 0x4801: r4801 = data; break;
+  case 0x4804: r4804 = data & 0x8f; break;
+  case 0x4805: r4805 = data & 0x8f; break;
+  case 0x4806: r4806 = data & 0x8f; break;
+  case 0x4807: r4807 = data & 0x8f; break;
+  }
+}
+
+auto SDD1::dmaRead(uint24 addr, uint8 data) -> uint8 {
+  return cpu.readDMA(addr, data);
+}
+
+auto SDD1::dmaWrite(uint24 addr, uint8 data) -> void {
+  uint channel = addr.bits(4,6);
+  switch(addr.bits(0,3)) {
+  case 2: dma[channel].addr.byte(0) = data; break;
+  case 3: dma[channel].addr.byte(1) = data; break;
+  case 4: dma[channel].addr.byte(2) = data; break;
+  case 5: dma[channel].size.byte(0) = data; break;
+  case 6: dma[channel].size.byte(1) = data; break;
+  }
+  return cpu.writeDMA(addr, data);
+}
+
+auto SDD1::mmcRead(uint24 addr) -> uint8 {
+  switch(addr.bits(20,21)) {
+  case 0: return rom.read(r4804.bits(0,3) << 20 | addr.bits(0,19));  //c0-cf:0000-ffff
+  case 1: return rom.read(r4805.bits(0,3) << 20 | addr.bits(0,19));  //d0-df:0000-ffff
+  case 2: return rom.read(r4806.bits(0,3) << 20 | addr.bits(0,19));  //e0-ef:0000-ffff
+  case 3: return rom.read(r4807.bits(0,3) << 20 | addr.bits(0,19));  //f0-ff:0000-ffff
+  }
+  unreachable;
+}
+
+//map address=00-3f,80-bf:8000-ffff
+//map address=c0-ff:0000-ffff
+auto SDD1::mcuromRead(uint24 addr, uint8 data) -> uint8 {
+  //map address=00-3f,80-bf:8000-ffff
+  if(!addr.bit(22)) {
+    if(!addr.bit(23) && addr.bit(21) && r4805.bit(7)) addr.bit(21) = 0;  //20-3f:8000-ffff
+    if( addr.bit(23) && addr.bit(21) && r4807.bit(7)) addr.bit(21) = 0;  //a0-bf:8000-ffff
+    addr = addr.bits(16,21) << 15 | addr.bits(0,14);
+    return rom.read(addr);
+  }
+
+  //map address=c0-ff:0000-ffff
+  if(r4800 & r4801) {
+    //at least one channel has S-DD1 decompression enabled ...
+    for(auto n : range(8)) {
+      if(r4800.bit(n) && r4801.bit(n)) {
+        //S-DD1 always uses fixed transfer mode, so address will not change during transfer
+        if(addr == dma[n].addr) {
+          if(!dmaReady) {
+            //prepare streaming decompression
+            decompressor.init(addr);
+            dmaReady = true;
+          }
+
+          //fetch a decompressed byte; once finished, disable channel and invalidate buffer
+          data = decompressor.read();
+          if(--dma[n].size == 0) {
+            dmaReady = false;
+            r4801.bit(n) = 0;
+          }
+
+          return data;
+        }  //address matched
+      }  //channel enabled
+    }  //channel loop
+  }  //S-DD1 decompressor enabled
+
+  //S-DD1 decompression mode inactive; return ROM data
+  return mmcRead(addr);
+}
+
+auto SDD1::mcuromWrite(uint24 addr, uint8 data) -> void {
+}
+
+//map address=00-3f,80-bf:6000-7fff mask=0xe000
+//map address=70-73:0000-ffff mask=0x8000
+auto SDD1::mcuramRead(uint24 addr, uint8 data) -> uint8 {
+  return ram.read(addr.bits(0,12), data);
+}
+
+auto SDD1::mcuramWrite(uint24 addr, uint8 data) -> void {
+  return ram.write(addr.bits(0,12), data);
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/sdd1/sdd1.hpp b/higan/sfc-balanced/coprocessor/sdd1/sdd1.hpp
new file mode 100644
index 0000000..6a578ce
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sdd1/sdd1.hpp
@@ -0,0 +1,46 @@
+struct SDD1 {
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto dmaRead(uint24 addr, uint8 data) -> uint8;
+  auto dmaWrite(uint24 addr, uint8 data) -> void;
+
+  auto mmcRead(uint24 addr) -> uint8;
+
+  auto mcuromRead(uint24 addr, uint8 data) -> uint8;
+  auto mcuromWrite(uint24 addr, uint8 data) -> void;
+
+  auto mcuramRead(uint24 addr, uint8 data) -> uint8;
+  auto mcuramWrite(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  MappedRAM rom;
+  MappedRAM ram;
+
+private:
+  uint8 r4800;  //hard enable
+  uint8 r4801;  //soft enable
+  uint8 r4804;  //MMC bank 0
+  uint8 r4805;  //MMC bank 1
+  uint8 r4806;  //MMC bank 2
+  uint8 r4807;  //MMC bank 3
+
+  struct DMA {
+    uint24 addr;  //$43x2-$43x4 -- DMA transfer address
+    uint16 size;  //$43x5-$43x6 -- DMA transfer size
+  } dma[8];
+  bool dmaReady;  //used to initialize decompression module
+
+public:
+  #include "decompressor.hpp"
+  Decompressor decompressor;
+};
+
+extern SDD1 sdd1;
diff --git a/higan/sfc-balanced/coprocessor/sdd1/serialization.cpp b/higan/sfc-balanced/coprocessor/sdd1/serialization.cpp
new file mode 100644
index 0000000..618b5dc
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sdd1/serialization.cpp
@@ -0,0 +1,16 @@
+auto SDD1::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+
+  s.integer(r4800);
+  s.integer(r4801);
+  s.integer(r4804);
+  s.integer(r4805);
+  s.integer(r4806);
+  s.integer(r4807);
+
+  for(auto n : range(8)) {
+    s.integer(dma[n].addr);
+    s.integer(dma[n].size);
+  }
+  s.integer(dmaReady);
+}
diff --git a/higan/sfc-balanced/coprocessor/sharprtc/memory.cpp b/higan/sfc-balanced/coprocessor/sharprtc/memory.cpp
new file mode 100644
index 0000000..3803f1e
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sharprtc/memory.cpp
@@ -0,0 +1,67 @@
+auto SharpRTC::rtcRead(uint4 addr) -> uint4 {
+  switch(addr) {
+  case  0: return second % 10;
+  case  1: return second / 10;
+  case  2: return minute % 10;
+  case  3: return minute / 10;
+  case  4: return hour % 10;
+  case  5: return hour / 10;
+  case  6: return day % 10;
+  case  7: return day / 10;
+  case  8: return month;
+  case  9: return year % 10;
+  case 10: return year / 10 % 10;
+  case 11: return year / 100;
+  case 12: return weekday;
+  default: return 0;
+  }
+}
+
+auto SharpRTC::rtcWrite(uint4 addr, uint4 data) -> void {
+  switch(addr) {
+  case  0: second = second / 10 * 10 + data; break;
+  case  1: second = data * 10 + second % 10; break;
+  case  2: minute = minute / 10 * 10 + data; break;
+  case  3: minute = data * 10 + minute % 10; break;
+  case  4: hour = hour / 10 * 10 + data; break;
+  case  5: hour = data * 10 + hour % 10; break;
+  case  6: day = day / 10 * 10 + data; break;
+  case  7: day = data * 10 + day % 10; break;
+  case  8: month = data; break;
+  case  9: year = year / 10 * 10 + data; break;
+  case 10: year = year / 100 * 100 + data * 10 + year % 10; break;
+  case 11: year = data * 100 + year % 100; break;
+  case 12: weekday = data; break;
+  }
+}
+
+auto SharpRTC::load(const uint8* data) -> void {
+  for(auto byte : range(8)) {
+    rtcWrite(byte * 2 + 0, data[byte] >> 0);
+    rtcWrite(byte * 2 + 1, data[byte] >> 4);
+  }
+
+  uint64 timestamp = 0;
+  for(auto byte : range(8)) {
+    timestamp |= data[8 + byte] << (byte * 8);
+  }
+
+  uint64 diff = (uint64)time(0) - timestamp;
+  while(diff >= 60 * 60 * 24) { tickDay(); diff -= 60 * 60 * 24; }
+  while(diff >= 60 * 60) { tickHour(); diff -= 60 * 60; }
+  while(diff >= 60) { tickMinute(); diff -= 60; }
+  while(diff--) tickSecond();
+}
+
+auto SharpRTC::save(uint8* data) -> void {
+  for(auto byte : range(8)) {
+    data[byte]  = rtcRead(byte * 2 + 0) << 0;
+    data[byte] |= rtcRead(byte * 2 + 1) << 4;
+  }
+
+  uint64 timestamp = (uint64)time(nullptr);
+  for(auto byte : range(8)) {
+    data[8 + byte] = timestamp;
+    timestamp >>= 8;
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/sharprtc/serialization.cpp b/higan/sfc-balanced/coprocessor/sharprtc/serialization.cpp
new file mode 100644
index 0000000..d4666a1
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sharprtc/serialization.cpp
@@ -0,0 +1,14 @@
+auto SharpRTC::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+
+  s.integer((uint&)state);
+  s.integer(index);
+
+  s.integer(second);
+  s.integer(minute);
+  s.integer(hour);
+  s.integer(day);
+  s.integer(month);
+  s.integer(year);
+  s.integer(weekday);
+}
diff --git a/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.cpp b/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.cpp
new file mode 100644
index 0000000..b8e125e
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.cpp
@@ -0,0 +1,134 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "memory.cpp"
+#include "time.cpp"
+#include "serialization.cpp"
+SharpRTC sharprtc;
+
+auto SharpRTC::Enter() -> void {
+  while(true) scheduler.synchronize(), sharprtc.main();
+}
+
+auto SharpRTC::main() -> void {
+  tickSecond();
+
+  step(1);
+  synchronize(cpu);
+}
+
+auto SharpRTC::init() -> void {
+}
+
+auto SharpRTC::load() -> void {
+  return;
+
+  second = 0;
+  minute = 0;
+  hour = 0;
+  day = 0;
+  month = 0;
+  year = 0;
+  weekday = 0;
+}
+
+auto SharpRTC::unload() -> void {
+}
+
+auto SharpRTC::power() -> void {
+}
+
+auto SharpRTC::reset() -> void {
+  create(SharpRTC::Enter, 1);
+
+  state = State::Read;
+  index = -1;
+}
+
+auto SharpRTC::sync() -> void {
+  time_t systime = time(0);
+  tm* timeinfo = localtime(&systime);
+
+  second = min(59, timeinfo->tm_sec);
+  minute = timeinfo->tm_min;
+  hour = timeinfo->tm_hour;
+  day = timeinfo->tm_mday;
+  month = 1 + timeinfo->tm_mon;
+  year = 900 + timeinfo->tm_year;
+  weekday = timeinfo->tm_wday;
+}
+
+auto SharpRTC::read(uint24 addr, uint8 data) -> uint8 {
+  addr &= 1;
+
+  if(addr == 0) {
+    if(state != State::Read) return 0;
+
+    if(index < 0) {
+      index++;
+      return 15;
+    } else if(index > 12) {
+      index = -1;
+      return 15;
+    } else {
+      return rtcRead(index++);
+    }
+  }
+
+  return data;
+}
+
+auto SharpRTC::write(uint24 addr, uint8 data) -> void {
+  addr &= 1, data &= 15;
+
+  if(addr == 1) {
+    if(data == 0x0d) {
+      state = State::Read;
+      index = -1;
+      return;
+    }
+
+    if(data == 0x0e) {
+      state = State::Command;
+      return;
+    }
+
+    if(data == 0x0f) return;  //unknown behavior
+
+    if(state == State::Command) {
+      if(data == 0) {
+        state = State::Write;
+        index = 0;
+      } else if(data == 4) {
+        state = State::Ready;
+        index = -1;
+        //reset time
+        second = 0;
+        minute = 0;
+        hour = 0;
+        day = 0;
+        month = 0;
+        year = 0;
+        weekday = 0;
+      } else {
+        //unknown behavior
+        state = State::Ready;
+      }
+      return;
+    }
+
+    if(state == State::Write) {
+      if(index >= 0 && index < 12) {
+        rtcWrite(index++, data);
+        if(index == 12) {
+          //day of week is automatically calculated and written
+          weekday = calculateWeekday(1000 + year, month, day);
+        }
+      }
+      return;
+    }
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.hpp b/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.hpp
new file mode 100644
index 0000000..54d4570
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sharprtc/sharprtc.hpp
@@ -0,0 +1,47 @@
+struct SharpRTC : Thread {
+  static auto Enter() -> void;
+  auto main() -> void;
+
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+  auto sync() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  enum class State : uint { Ready, Command, Read, Write } state;
+  int index;
+
+  uint second;
+  uint minute;
+  uint hour;
+  uint day;
+  uint month;
+  uint year;
+  uint weekday;
+
+  //memory.cpp
+  auto rtcRead(uint4 addr) -> uint4;
+  auto rtcWrite(uint4 addr, uint4 data) -> void;
+
+  auto load(const uint8* data) -> void;
+  auto save(uint8* data) -> void;
+
+  //time.cpp
+  static const uint daysInMonth[12];
+  auto tickSecond() -> void;
+  auto tickMinute() -> void;
+  auto tickHour() -> void;
+  auto tickDay() -> void;
+  auto tickMonth() -> void;
+  auto tickYear() -> void;
+
+  auto calculateWeekday(uint year, uint month, uint day) -> uint;
+};
+
+extern SharpRTC sharprtc;
diff --git a/higan/sfc-balanced/coprocessor/sharprtc/time.cpp b/higan/sfc-balanced/coprocessor/sharprtc/time.cpp
new file mode 100644
index 0000000..be7355d
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/sharprtc/time.cpp
@@ -0,0 +1,83 @@
+const uint SharpRTC::daysInMonth[12] = {31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};
+
+auto SharpRTC::tickSecond() -> void {
+  if(++second < 60) return;
+  second = 0;
+  tickMinute();
+}
+
+auto SharpRTC::tickMinute() -> void {
+  if(++minute < 60) return;
+  minute = 0;
+  tickHour();
+}
+
+auto SharpRTC::tickHour() -> void {
+  if(++hour < 24) return;
+  hour = 0;
+  tickDay();
+}
+
+auto SharpRTC::tickDay() -> void {
+  uint days = daysInMonth[(month - 1) % 12];
+
+  //add one day in February for leap years
+  if(month == 2) {
+         if(year % 400 == 0) days++;
+    else if(year % 100 == 0);
+    else if(year %   4 == 0) days++;
+  }
+
+  if(day++ < days) return;
+  day = 1;
+  tickMonth();
+}
+
+auto SharpRTC::tickMonth() -> void {
+  if(month++ < 12) return;
+  month = 1;
+  tickYear();
+}
+
+auto SharpRTC::tickYear() -> void {
+  year++;
+  year = (uint12)year;
+}
+
+//returns day of week for specified date
+//eg 0 = Sunday, 1 = Monday, ... 6 = Saturday
+//usage: calculate_weekday(2008, 1, 1) returns weekday of January 1st, 2008
+auto SharpRTC::calculateWeekday(uint year, uint month, uint day) -> uint {
+  uint y = 1000, m = 1;  //SharpRTC epoch is 1000-01-01
+  uint sum = 0;          //number of days passed since epoch
+
+  year = max(1000, year);
+  month = max(1, min(12, month));
+  day = max(1, min(31, day));
+
+  while(y < year) {
+    bool leapyear = false;
+    if(y % 4 == 0) {
+      leapyear = true;
+      if(y % 100 == 0 && y % 400 != 0) leapyear = false;
+    }
+    sum += 365 + leapyear;
+    y++;
+  }
+
+  while(m < month) {
+    uint days = daysInMonth[(m - 1) % 12];
+    bool leapyearmonth = false;
+    if(days == 28) {
+      if(y % 4 == 0) {
+        leapyearmonth = true;
+        if(y % 100 == 0 && y % 400 != 0) leapyearmonth = false;
+      }
+    }
+    sum += days + leapyearmonth;
+    m++;
+  }
+
+  sum += day - 1;
+  return (sum + 3) % 7;  //1000-01-01 was a Wednesday
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/alu.cpp b/higan/sfc-balanced/coprocessor/spc7110/alu.cpp
new file mode 100644
index 0000000..6b71dbc
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/alu.cpp
@@ -0,0 +1,83 @@
+auto SPC7110::aluMultiply() -> void {
+  addClocks(30);
+
+  if(r482e & 1) {
+    //signed 16-bit x 16-bit multiplication
+    int16 r0 = (int16)(r4824 | r4825 << 8);
+    int16 r1 = (int16)(r4820 | r4821 << 8);
+
+    int result = r0 * r1;
+    r4828 = result;
+    r4829 = result >> 8;
+    r482a = result >> 16;
+    r482b = result >> 24;
+  } else {
+    //unsigned 16-bit x 16-bit multiplication
+    uint16 r0 = (uint16)(r4824 | r4825 << 8);
+    uint16 r1 = (uint16)(r4820 | r4821 << 8);
+
+    uint result = r0 * r1;
+    r4828 = result;
+    r4829 = result >> 8;
+    r482a = result >> 16;
+    r482b = result >> 24;
+  }
+
+  r482f &= 0x7f;
+}
+
+auto SPC7110::aluDivide() -> void {
+  addClocks(40);
+
+  if(r482e & 1) {
+    //signed 32-bit x 16-bit division
+    int32 dividend = (int32)(r4820 | r4821 << 8 | r4822 << 16 | r4823 << 24);
+    int16 divisor  = (int16)(r4826 | r4827 << 8);
+
+    int32 quotient;
+    int16 remainder;
+
+    if(divisor) {
+      quotient  = (int32)(dividend / divisor);
+      remainder = (int32)(dividend % divisor);
+    } else {
+      //illegal division by zero
+      quotient  = 0;
+      remainder = dividend;
+    }
+
+    r4828 = quotient;
+    r4829 = quotient >> 8;
+    r482a = quotient >> 16;
+    r482b = quotient >> 24;
+
+    r482c = remainder;
+    r482d = remainder >> 8;
+  } else {
+    //unsigned 32-bit x 16-bit division
+    uint32 dividend = (uint32)(r4820 | r4821 << 8 | r4822 << 16 | r4823 << 24);
+    uint16 divisor  = (uint16)(r4826 | r4827 << 8);
+
+    uint32 quotient;
+    uint16 remainder;
+
+    if(divisor) {
+      quotient  = (uint32)(dividend / divisor);
+      remainder = (uint16)(dividend % divisor);
+    } else {
+      //illegal division by zero
+      quotient  = 0;
+      remainder = dividend;
+    }
+
+    r4828 = quotient;
+    r4829 = quotient >> 8;
+    r482a = quotient >> 16;
+    r482b = quotient >> 24;
+
+    r482c = remainder;
+    r482d = remainder >> 8;
+  }
+
+  r482f &= 0x7f;
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/data.cpp b/higan/sfc-balanced/coprocessor/spc7110/data.cpp
new file mode 100644
index 0000000..b10c0f1
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/data.cpp
@@ -0,0 +1,58 @@
+auto SPC7110::dataromRead(uint addr) -> uint8 {
+  uint size = 1 << (r4834 & 3);  //size in MB
+  uint mask = 0x100000 * size - 1;
+  uint offset = addr & mask;
+  if((r4834 & 3) != 3 && (addr & 0x400000)) return 0x00;
+  return drom.read(Bus::mirror(offset, drom.size()));
+}
+
+auto SPC7110::dataOffset() -> uint { return r4811 | r4812 << 8 | r4813 << 16; }
+auto SPC7110::dataAdjust() -> uint { return r4814 | r4815 << 8; }
+auto SPC7110::dataStride() -> uint { return r4816 | r4817 << 8; }
+auto SPC7110::setDataOffset(uint addr) -> void { r4811 = addr; r4812 = addr >> 8; r4813 = addr >> 16; }
+auto SPC7110::setDataAdjust(uint addr) -> void { r4814 = addr; r4815 = addr >> 8; }
+
+auto SPC7110::dataPortRead() -> void {
+  uint offset = dataOffset();
+  uint adjust = r4818 & 2 ? dataAdjust() : 0;
+  if(r4818 & 8) adjust = (int16)adjust;
+  r4810 = dataromRead(offset + adjust);
+}
+
+auto SPC7110::dataPortIncrement4810() -> void {
+  uint offset = dataOffset();
+  uint stride = r4818 & 1 ? dataStride() : 1;
+  uint adjust = dataAdjust();
+  if(r4818 & 4) stride = (int16)stride;
+  if(r4818 & 8) adjust = (int16)adjust;
+  if((r4818 & 16) == 0) setDataOffset(offset + stride);
+  if((r4818 & 16) != 0) setDataAdjust(adjust + stride);
+  dataPortRead();
+}
+
+auto SPC7110::dataPortIncrement4814() -> void {
+  if(r4818 >> 5 != 1) return;
+  uint offset = dataOffset();
+  uint adjust = dataAdjust();
+  if(r4818 & 8) adjust = (int16)adjust;
+  setDataOffset(offset + adjust);
+  dataPortRead();
+}
+
+auto SPC7110::dataPortIncrement4815() -> void {
+  if(r4818 >> 5 != 2) return;
+  uint offset = dataOffset();
+  uint adjust = dataAdjust();
+  if(r4818 & 8) adjust = (int16)adjust;
+  setDataOffset(offset + adjust);
+  dataPortRead();
+}
+
+auto SPC7110::dataPortIncrement481a() -> void {
+  if(r4818 >> 5 != 3) return;
+  uint offset = dataOffset();
+  uint adjust = dataAdjust();
+  if(r4818 & 8) adjust = (int16)adjust;
+  setDataOffset(offset + adjust);
+  dataPortRead();
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/dcu.cpp b/higan/sfc-balanced/coprocessor/spc7110/dcu.cpp
new file mode 100644
index 0000000..b91f2b6
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/dcu.cpp
@@ -0,0 +1,57 @@
+#include "decompressor.cpp"
+
+auto SPC7110::dcuLoadAddress() -> void {
+  uint table = r4801 | r4802 << 8 | r4803 << 16;
+  uint index = r4804 << 2;
+
+  uint address = table + index;
+  dcuMode     = dataromRead(address + 0);
+  dcuAddress  = dataromRead(address + 1) << 16;
+  dcuAddress |= dataromRead(address + 2) <<  8;
+  dcuAddress |= dataromRead(address + 3) <<  0;
+}
+
+auto SPC7110::dcuBeginTransfer() -> void {
+  if(dcuMode == 3) return;  //invalid mode
+
+  addClocks(20);
+  decompressor->initialize(dcuMode, dcuAddress);
+  decompressor->decode();
+
+  uint seek = r480b & 2 ? r4805 | r4806 << 8 : 0;
+  while(seek--) decompressor->decode();
+
+  r480c |= 0x80;
+  dcuOffset = 0;
+}
+
+auto SPC7110::dcuRead() -> uint8 {
+  if((r480c & 0x80) == 0) return 0x00;
+
+  if(dcuOffset == 0) {
+    for(auto row : range(8)) {
+      switch(decompressor->bpp) {
+      case 1:
+        dcuTile[row] = decompressor->result;
+        break;
+      case 2:
+        dcuTile[row * 2 + 0] = decompressor->result >> 0;
+        dcuTile[row * 2 + 1] = decompressor->result >> 8;
+        break;
+      case 4:
+        dcuTile[row * 2 +  0] = decompressor->result >>  0;
+        dcuTile[row * 2 +  1] = decompressor->result >>  8;
+        dcuTile[row * 2 + 16] = decompressor->result >> 16;
+        dcuTile[row * 2 + 17] = decompressor->result >> 24;
+        break;
+      }
+
+      uint seek = r480b & 1 ? r4807 : (uint8)1;
+      while(seek--) decompressor->decode();
+    }
+  }
+
+  uint8 data = dcuTile[dcuOffset++];
+  dcuOffset &= 8 * decompressor->bpp - 1;
+  return data;
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/decompressor.cpp b/higan/sfc-balanced/coprocessor/spc7110/decompressor.cpp
new file mode 100644
index 0000000..0ab823a
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/decompressor.cpp
@@ -0,0 +1,190 @@
+//SPC7110 decompressor
+//original implementation: neviksti
+//optimized implementation: cydrak
+
+struct Decompressor {
+  SPC7110& spc7110;
+
+  Decompressor(SPC7110& spc7110) : spc7110(spc7110) {}
+
+  auto read() -> uint8 {
+    return spc7110.dataromRead(offset++);
+  }
+
+  //inverse morton code transform: unpack big-endian packed pixels
+  //returns odd bits in lower half; even bits in upper half
+  auto deinterleave(uint64 data, uint bits) -> uint32 {
+    data = data & (1ull << bits) - 1;
+    data = 0x5555555555555555ull & (data << bits | data >> 1);
+    data = 0x3333333333333333ull & (data | data >> 1);
+    data = 0x0f0f0f0f0f0f0f0full & (data | data >> 2);
+    data = 0x00ff00ff00ff00ffull & (data | data >> 4);
+    data = 0x0000ffff0000ffffull & (data | data >> 8);
+    return data | data >> 16;
+  }
+
+  //extract a nibble and move it to the low four bits
+  auto moveToFront(uint64 list, uint nibble) -> uint64 {
+    for(uint64 n = 0, mask = ~15; n < 64; n += 4, mask <<= 4) {
+      if((list >> n & 15) != nibble) continue;
+      return list = (list & mask) + (list << 4 & ~mask) + nibble;
+    }
+    return list;
+  }
+
+  auto initialize(uint mode, uint origin) -> void {
+    for(auto& root : context) for(auto& node : root) node = {0, 0};
+    bpp = 1 << mode;
+    offset = origin;
+    bits = 8;
+    range = Max + 1;
+    input = read();
+    input = input << 8 | read();
+    output = 0;
+    pixels = 0;
+    colormap = 0xfedcba9876543210ull;
+  }
+
+  auto decode() -> void {
+    for(uint pixel = 0; pixel < 8; pixel++) {
+      uint64 map = colormap;
+      uint diff = 0;
+
+      if(bpp > 1) {
+        uint pa = (bpp == 2 ? pixels >>  2 & 3 : pixels >>  0 & 15);
+        uint pb = (bpp == 2 ? pixels >> 14 & 3 : pixels >> 28 & 15);
+        uint pc = (bpp == 2 ? pixels >> 16 & 3 : pixels >> 32 & 15);
+
+        if(pa != pb || pb != pc) {
+          uint match = pa ^ pb ^ pc;
+          diff = 4;                        //no match; all pixels differ
+          if((match ^ pc) == 0) diff = 3;  //a == b; pixel c differs
+          if((match ^ pb) == 0) diff = 2;  //c == a; pixel b differs
+          if((match ^ pa) == 0) diff = 1;  //b == c; pixel a differs
+        }
+
+        colormap = moveToFront(colormap, pa);
+
+        map = moveToFront(map, pc);
+        map = moveToFront(map, pb);
+        map = moveToFront(map, pa);
+      }
+
+      for(uint plane = 0; plane < bpp; plane++) {
+        uint bit = bpp > 1 ? 1 << plane : 1 << (pixel & 3);
+        uint history = bit - 1 & output;
+        uint set = 0;
+
+        if(bpp == 1) set = pixel >= 4;
+        if(bpp == 2) set = diff;
+        if(plane >= 2 && history <= 1) set = diff;
+
+        auto& ctx = context[set][bit + history - 1];
+        auto& model = evolution[ctx.prediction];
+        uint8 lps_offset = range - model.probability;
+        bool symbol = input >= (lps_offset << 8);  //test only the MSB
+
+        output = output << 1 | (symbol ^ ctx.swap);
+
+        if(symbol == MPS) {          //[0 ... range-p]
+          range = lps_offset;        //range = range-p
+        } else {                     //[range-p+1 ... range]
+          range -= lps_offset;       //range = p-1, with p < 0.75
+          input -= lps_offset << 8;  //therefore, always rescale
+        }
+
+        while(range <= Max / 2) {    //scale back into [0.75 ... 1.5]
+          ctx.prediction = model.next[symbol];
+
+          range <<= 1;
+          input <<= 1;
+
+          if(--bits == 0) {
+            bits = 8;
+            input += read();
+          }
+        }
+
+        if(symbol == LPS && model.probability > Half) ctx.swap ^= 1;
+      }
+
+      uint index = output & (1 << bpp) - 1;
+      if(bpp == 1) index ^= pixels >> 15 & 1;
+
+      pixels = pixels << bpp | (map >> 4 * index & 15);
+    }
+
+    if(bpp == 1) result = pixels;
+    if(bpp == 2) result = deinterleave(pixels, 16);
+    if(bpp == 4) result = deinterleave(deinterleave(pixels, 32), 32);
+  }
+
+  auto serialize(serializer& s) -> void {
+    for(auto& root : context) {
+      for(auto& node : root) {
+        s.integer(node.prediction);
+        s.integer(node.swap);
+      }
+    }
+
+    s.integer(bpp);
+    s.integer(offset);
+    s.integer(bits);
+    s.integer(range);
+    s.integer(input);
+    s.integer(output);
+    s.integer(pixels);
+    s.integer(colormap);
+    s.integer(result);
+  }
+
+  enum : uint { MPS = 0, LPS = 1 };
+  enum : uint { One = 0xaa, Half = 0x55, Max = 0xff };
+
+  struct ModelState {
+    uint8 probability;  //of the more probable symbol (MPS)
+    uint8 next[2];      //next state after output {MPS, LPS}
+  };
+  static ModelState evolution[53];
+
+  struct Context {
+    uint8 prediction;   //current model state
+    uint8 swap;         //if 1, exchange the role of MPS and LPS
+  } context[5][15];     //not all 75 contexts exists; this simplifies the code
+
+  uint bpp;             //bits per pixel (1bpp = 1; 2bpp = 2; 4bpp = 4)
+  uint offset;          //SPC7110 data ROM read offset
+  uint bits;            //bits remaining in input
+  uint16 range;         //arithmetic range: technically 8-bits, but Max+1 = 256
+  uint16 input;         //input data from SPC7110 data ROM
+  uint8 output;
+  uint64 pixels;
+  uint64 colormap;      //most recently used list
+  uint32 result;        //decompressed word after calling decode()
+};
+
+Decompressor::ModelState Decompressor::evolution[53] = {
+  {0x5a, { 1, 1}}, {0x25, { 2, 6}}, {0x11, { 3, 8}},
+  {0x08, { 4,10}}, {0x03, { 5,12}}, {0x01, { 5,15}},
+
+  {0x5a, { 7, 7}}, {0x3f, { 8,19}}, {0x2c, { 9,21}},
+  {0x20, {10,22}}, {0x17, {11,23}}, {0x11, {12,25}},
+  {0x0c, {13,26}}, {0x09, {14,28}}, {0x07, {15,29}},
+  {0x05, {16,31}}, {0x04, {17,32}}, {0x03, {18,34}},
+  {0x02, { 5,35}},
+
+  {0x5a, {20,20}}, {0x48, {21,39}}, {0x3a, {22,40}},
+  {0x2e, {23,42}}, {0x26, {24,44}}, {0x1f, {25,45}},
+  {0x19, {26,46}}, {0x15, {27,25}}, {0x11, {28,26}},
+  {0x0e, {29,26}}, {0x0b, {30,27}}, {0x09, {31,28}},
+  {0x08, {32,29}}, {0x07, {33,30}}, {0x05, {34,31}},
+  {0x04, {35,33}}, {0x04, {36,33}}, {0x03, {37,34}},
+  {0x02, {38,35}}, {0x02, { 5,36}},
+
+  {0x58, {40,39}}, {0x4d, {41,47}}, {0x43, {42,48}},
+  {0x3b, {43,49}}, {0x34, {44,50}}, {0x2e, {45,51}},
+  {0x29, {46,44}}, {0x25, {24,45}},
+
+  {0x56, {48,47}}, {0x4f, {49,47}}, {0x47, {50,48}},
+  {0x41, {51,49}}, {0x3c, {52,50}}, {0x37, {43,51}},
+};
diff --git a/higan/sfc-balanced/coprocessor/spc7110/serialization.cpp b/higan/sfc-balanced/coprocessor/spc7110/serialization.cpp
new file mode 100644
index 0000000..8c49071
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/serialization.cpp
@@ -0,0 +1,59 @@
+auto SPC7110::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+
+  s.integer(r4801);
+  s.integer(r4802);
+  s.integer(r4803);
+  s.integer(r4804);
+  s.integer(r4805);
+  s.integer(r4806);
+  s.integer(r4807);
+  s.integer(r4809);
+  s.integer(r480a);
+  s.integer(r480b);
+  s.integer(r480c);
+
+  s.integer(dcuPending);
+  s.integer(dcuMode);
+  s.integer(dcuAddress);
+  s.integer(dcuOffset);
+  s.array(dcuTile);
+  decompressor->serialize(s);
+
+  s.integer(r4810);
+  s.integer(r4811);
+  s.integer(r4812);
+  s.integer(r4813);
+  s.integer(r4814);
+  s.integer(r4815);
+  s.integer(r4816);
+  s.integer(r4817);
+  s.integer(r4818);
+  s.integer(r481a);
+
+  s.integer(r4820);
+  s.integer(r4821);
+  s.integer(r4822);
+  s.integer(r4823);
+  s.integer(r4824);
+  s.integer(r4825);
+  s.integer(r4826);
+  s.integer(r4827);
+  s.integer(r4828);
+  s.integer(r4829);
+  s.integer(r482a);
+  s.integer(r482b);
+  s.integer(r482c);
+  s.integer(r482d);
+  s.integer(r482e);
+  s.integer(r482f);
+
+  s.integer(mulPending);
+  s.integer(divPending);
+
+  s.integer(r4830);
+  s.integer(r4831);
+  s.integer(r4832);
+  s.integer(r4833);
+  s.integer(r4834);
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/spc7110.cpp b/higan/sfc-balanced/coprocessor/spc7110/spc7110.cpp
new file mode 100644
index 0000000..d4b558c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/spc7110.cpp
@@ -0,0 +1,314 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "dcu.cpp"
+#include "data.cpp"
+#include "alu.cpp"
+#include "serialization.cpp"
+SPC7110 spc7110;
+
+SPC7110::SPC7110() {
+  decompressor = new Decompressor(*this);
+}
+
+SPC7110::~SPC7110() {
+  delete decompressor;
+}
+
+auto SPC7110::Enter() -> void {
+  while(true) scheduler.synchronize(), spc7110.main();
+}
+
+auto SPC7110::main() -> void {
+  if(dcuPending) { dcuPending = 0; dcuBeginTransfer(); }
+  if(mulPending) { mulPending = 0; aluMultiply(); }
+  if(divPending) { divPending = 0; aluDivide(); }
+  addClocks(1);
+}
+
+auto SPC7110::addClocks(uint clocks) -> void {
+  step(clocks);
+  synchronize(cpu);
+}
+
+auto SPC7110::init() -> void {
+}
+
+auto SPC7110::load() -> void {
+}
+
+auto SPC7110::unload() -> void {
+  prom.reset();
+  drom.reset();
+  ram.reset();
+}
+
+auto SPC7110::power() -> void {
+}
+
+auto SPC7110::reset() -> void {
+  create(SPC7110::Enter, 21'477'272);
+
+  r4801 = 0x00;
+  r4802 = 0x00;
+  r4803 = 0x00;
+  r4804 = 0x00;
+  r4805 = 0x00;
+  r4806 = 0x00;
+  r4807 = 0x00;
+  r4809 = 0x00;
+  r480a = 0x00;
+  r480b = 0x00;
+  r480c = 0x00;
+
+  dcuPending = 0;
+  dcuMode = 0;
+  dcuAddress = 0;
+
+  r4810 = 0x00;
+  r4811 = 0x00;
+  r4812 = 0x00;
+  r4813 = 0x00;
+  r4814 = 0x00;
+  r4815 = 0x00;
+  r4816 = 0x00;
+  r4817 = 0x00;
+  r4818 = 0x00;
+  r481a = 0x00;
+
+  r4820 = 0x00;
+  r4821 = 0x00;
+  r4822 = 0x00;
+  r4823 = 0x00;
+  r4824 = 0x00;
+  r4825 = 0x00;
+  r4826 = 0x00;
+  r4827 = 0x00;
+  r4828 = 0x00;
+  r4829 = 0x00;
+  r482a = 0x00;
+  r482b = 0x00;
+  r482c = 0x00;
+  r482d = 0x00;
+  r482e = 0x00;
+  r482f = 0x00;
+
+  mulPending = 0;
+  divPending = 0;
+
+  r4830 = 0x00;
+  r4831 = 0x00;
+  r4832 = 0x01;
+  r4833 = 0x02;
+  r4834 = 0x00;
+}
+
+auto SPC7110::read(uint24 addr, uint8 data) -> uint8 {
+  cpu.synchronize(*this);
+  if((addr & 0xff0000) == 0x500000) addr = 0x4800;  //$50:0000-ffff == $4800
+  if((addr & 0xff0000) == 0x580000) addr = 0x4808;  //$58:0000-ffff == $4808
+  addr = 0x4800 | (addr & 0x3f);  //$00-3f,80-bf:4800-483f
+
+  switch(addr) {
+  //==================
+  //decompression unit
+  //==================
+  case 0x4800: {
+    uint16 counter = r4809 | r480a << 8;
+    counter--;
+    r4809 = counter >> 0;
+    r480a = counter >> 8;
+    return dcuRead();
+  }
+  case 0x4801: return r4801;
+  case 0x4802: return r4802;
+  case 0x4803: return r4803;
+  case 0x4804: return r4804;
+  case 0x4805: return r4805;
+  case 0x4806: return r4806;
+  case 0x4807: return r4807;
+  case 0x4808: return 0x00;
+  case 0x4809: return r4809;
+  case 0x480a: return r480a;
+  case 0x480b: return r480b;
+  case 0x480c: return r480c;
+
+  //==============
+  //data port unit
+  //==============
+  case 0x4810: {
+    data = r4810;
+    dataPortIncrement4810();
+    return data;
+  }
+  case 0x4811: return r4811;
+  case 0x4812: return r4812;
+  case 0x4813: return r4813;
+  case 0x4814: return r4814;
+  case 0x4815: return r4815;
+  case 0x4816: return r4816;
+  case 0x4817: return r4817;
+  case 0x4818: return r4818;
+  case 0x481a: {
+    dataPortIncrement481a();
+    return 0x00;
+  }
+
+  //=====================
+  //arithmetic logic unit
+  //=====================
+  case 0x4820: return r4820;
+  case 0x4821: return r4821;
+  case 0x4822: return r4822;
+  case 0x4823: return r4823;
+  case 0x4824: return r4824;
+  case 0x4825: return r4825;
+  case 0x4826: return r4826;
+  case 0x4827: return r4827;
+  case 0x4828: return r4828;
+  case 0x4829: return r4829;
+  case 0x482a: return r482a;
+  case 0x482b: return r482b;
+  case 0x482c: return r482c;
+  case 0x482d: return r482d;
+  case 0x482e: return r482e;
+  case 0x482f: return r482f;
+
+  //===================
+  //memory control unit
+  //===================
+  case 0x4830: return r4830;
+  case 0x4831: return r4831;
+  case 0x4832: return r4832;
+  case 0x4833: return r4833;
+  case 0x4834: return r4834;
+  }
+
+  return data;
+}
+
+auto SPC7110::write(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+  if((addr & 0xff0000) == 0x500000) addr = 0x4800;  //$50:0000-ffff == $4800
+  if((addr & 0xff0000) == 0x580000) addr = 0x4808;  //$58:0000-ffff == $4808
+  addr = 0x4800 | (addr & 0x3f);  //$00-3f,80-bf:4800-483f
+
+  switch(addr) {
+  //==================
+  //decompression unit
+  //==================
+  case 0x4801: r4801 = data; break;
+  case 0x4802: r4802 = data; break;
+  case 0x4803: r4803 = data; break;
+  case 0x4804: r4804 = data; dcuLoadAddress(); break;
+  case 0x4805: r4805 = data; break;
+  case 0x4806: r4806 = data; r480c &= 0x7f; dcuPending = 1; break;
+  case 0x4807: r4807 = data; break;
+  case 0x4808: break;
+  case 0x4809: r4809 = data; break;
+  case 0x480a: r480a = data; break;
+  case 0x480b: r480b = data & 0x03; break;
+
+  //==============
+  //data port unit
+  //==============
+  case 0x4811: r4811 = data; break;
+  case 0x4812: r4812 = data; break;
+  case 0x4813: r4813 = data; dataPortRead(); break;
+  case 0x4814: r4814 = data; dataPortIncrement4814(); break;
+  case 0x4815: r4815 = data; if(r4818 & 2) dataPortRead(); dataPortIncrement4815(); break;
+  case 0x4816: r4816 = data; break;
+  case 0x4817: r4817 = data; break;
+  case 0x4818: r4818 = data & 0x7f; dataPortRead(); break;
+
+  //=====================
+  //arithmetic logic unit
+  //=====================
+  case 0x4820: r4820 = data; break;
+  case 0x4821: r4821 = data; break;
+  case 0x4822: r4822 = data; break;
+  case 0x4823: r4823 = data; break;
+  case 0x4824: r4824 = data; break;
+  case 0x4825: r4825 = data; r482f |= 0x81; mulPending = 1; break;
+  case 0x4826: r4826 = data; break;
+  case 0x4827: r4827 = data; r482f |= 0x80; divPending = 1; break;
+  case 0x482e: r482e = data & 0x01; break;
+
+  //===================
+  //memory control unit
+  //===================
+  case 0x4830: r4830 = data & 0x87; break;
+  case 0x4831: r4831 = data & 0x07; break;
+  case 0x4832: r4832 = data & 0x07; break;
+  case 0x4833: r4833 = data & 0x07; break;
+  case 0x4834: r4834 = data & 0x07; break;
+  }
+}
+
+//===============
+//SPC7110::MCUROM
+//===============
+
+//map address=00-3f,80-bf:8000-ffff mask=0x800000 => 00-3f:8000-ffff
+//map address=c0-ff:0000-ffff mask=0xc00000 => c0-ff:0000-ffff
+auto SPC7110::mcuromRead(uint24 addr, uint8 data) -> uint8 {
+  uint mask = (1 << (r4834 & 3)) - 1;  //8mbit, 16mbit, 32mbit, 64mbit DROM
+
+  if(addr < 0x100000) {  //$00-0f,80-8f:8000-ffff; $c0-cf:0000-ffff
+    addr &= 0x0fffff;
+    if(prom.size()) {  //8mbit PROM
+      return prom.read(bus.mirror(0x000000 + addr, prom.size()));
+    }
+    addr |= 0x100000 * (r4830 & 7);
+    return dataromRead(addr);
+  }
+
+  if(addr < 0x200000) {  //$10-1f,90-9f:8000-ffff; $d0-df:0000-ffff
+    addr &= 0x0fffff;
+    if(r4834 & 4) {  //16mbit PROM
+      return prom.read(bus.mirror(0x100000 + addr, prom.size()));
+    }
+    addr |= 0x100000 * (r4831 & 7);
+    return dataromRead(addr);
+  }
+
+  if(addr < 0x300000) {  //$20-2f,a0-af:8000-ffff; $e0-ef:0000-ffff
+    addr &= 0x0fffff;
+    addr |= 0x100000 * (r4832 & 7);
+    return dataromRead(addr);
+  }
+
+  if(addr < 0x400000) {  //$30-3f,b0-bf:8000-ffff; $f0-ff:0000-ffff
+    addr &= 0x0fffff;
+    addr |= 0x100000 * (r4833 & 7);
+    return dataromRead(addr);
+  }
+
+  return data;
+}
+
+auto SPC7110::mcuromWrite(uint24 addr, uint8 data) -> void {
+}
+
+//===============
+//SPC7110::MCURAM
+//===============
+
+//map address=00-3f,80-bf:6000-7fff mask=0x80e000 => 00-07:0000-ffff
+auto SPC7110::mcuramRead(uint24 addr, uint8) -> uint8 {
+  if(r4830 & 0x80) {
+    addr = bus.mirror(addr, ram.size());
+    return ram.read(addr);
+  }
+  return 0x00;
+}
+
+auto SPC7110::mcuramWrite(uint24 addr, uint8 data) -> void {
+  if(r4830 & 0x80) {
+    addr = bus.mirror(addr, ram.size());
+    ram.write(addr, data);
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/spc7110/spc7110.hpp b/higan/sfc-balanced/coprocessor/spc7110/spc7110.hpp
new file mode 100644
index 0000000..cea52a6
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/spc7110/spc7110.hpp
@@ -0,0 +1,124 @@
+struct Decompressor;
+
+struct SPC7110 : Thread {
+  SPC7110();
+  ~SPC7110();
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto addClocks(uint clocks) -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto mcuromRead(uint24 addr, uint8 data) -> uint8;
+  auto mcuromWrite(uint24 addr, uint8 data) -> void;
+
+  auto mcuramRead(uint24 addr, uint8 data) -> uint8;
+  auto mcuramWrite(uint24 addr, uint8 data) -> void;
+
+  auto serialize(serializer&) -> void;
+
+  //dcu.cpp
+  auto dcuLoadAddress() -> void;
+  auto dcuBeginTransfer() -> void;
+  auto dcuRead() -> uint8;
+
+  auto deinterleave1bpp(uint length) -> void;
+  auto deinterleave2bpp(uint length) -> void;
+  auto deinterleave4bpp(uint length) -> void;
+
+  //data.cpp
+  auto dataromRead(uint addr) -> uint8;
+
+  auto dataOffset() -> uint;
+  auto dataAdjust() -> uint;
+  auto dataStride() -> uint;
+
+  auto setDataOffset(uint addr) -> void;
+  auto setDataAdjust(uint addr) -> void;
+
+  auto dataPortRead() -> void;
+
+  auto dataPortIncrement4810() -> void;
+  auto dataPortIncrement4814() -> void;
+  auto dataPortIncrement4815() -> void;
+  auto dataPortIncrement481a() -> void;
+
+  //alu.cpp
+  auto aluMultiply() -> void;
+  auto aluDivide() -> void;
+
+  MappedRAM prom;  //program ROM
+  MappedRAM drom;  //data ROM
+  MappedRAM ram;
+
+private:
+  //decompression unit
+  uint8 r4801;  //compression table B0
+  uint8 r4802;  //compression table B1
+  uint7 r4803;  //compression table B2
+  uint8 r4804;  //compression table index
+  uint8 r4805;  //adjust length B0
+  uint8 r4806;  //adjust length B1
+  uint8 r4807;  //stride length
+  uint8 r4809;  //compression counter B0
+  uint8 r480a;  //compression counter B1
+  uint8 r480b;  //decompression settings
+  uint8 r480c;  //decompression status
+
+  bool dcuPending;
+  uint2 dcuMode;
+  uint23 dcuAddress;
+  uint dcuOffset;
+  uint8 dcuTile[32];
+  Decompressor* decompressor;
+
+  //data port unit
+  uint8 r4810;  //data port read + seek
+  uint8 r4811;  //data offset B0
+  uint8 r4812;  //data offset B1
+  uint7 r4813;  //data offset B2
+  uint8 r4814;  //data adjust B0
+  uint8 r4815;  //data adjust B1
+  uint8 r4816;  //data stride B0
+  uint8 r4817;  //data stride B1
+  uint8 r4818;  //data port settings
+  uint8 r481a;  //data port seek
+
+  //arithmetic logic unit
+  uint8 r4820;  //16-bit multiplicand B0, 32-bit dividend B0
+  uint8 r4821;  //16-bit multiplicand B1, 32-bit dividend B1
+  uint8 r4822;  //32-bit dividend B2
+  uint8 r4823;  //32-bit dividend B3
+  uint8 r4824;  //16-bit multiplier B0
+  uint8 r4825;  //16-bit multiplier B1
+  uint8 r4826;  //16-bit divisor B0
+  uint8 r4827;  //16-bit divisor B1
+  uint8 r4828;  //32-bit product B0, 32-bit quotient B0
+  uint8 r4829;  //32-bit product B1, 32-bit quotient B1
+  uint8 r482a;  //32-bit product B2, 32-bit quotient B2
+  uint8 r482b;  //32-bit product B3, 32-bit quotient B3
+  uint8 r482c;  //16-bit remainder B0
+  uint8 r482d;  //16-bit remainder B1
+  uint8 r482e;  //math settings
+  uint8 r482f;  //math status
+
+  bool mulPending;
+  bool divPending;
+
+  //memory control unit
+  uint8 r4830;  //bank 0 mapping + SRAM write enable
+  uint8 r4831;  //bank 1 mapping
+  uint8 r4832;  //bank 2 mapping
+  uint8 r4833;  //bank 3 mapping
+  uint8 r4834;  //bank mapping settings
+};
+
+extern SPC7110 spc7110;
diff --git a/higan/sfc-balanced/coprocessor/superfx/bus.cpp b/higan/sfc-balanced/coprocessor/superfx/bus.cpp
new file mode 100644
index 0000000..d7d7306
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/bus.cpp
@@ -0,0 +1,33 @@
+//ROM / RAM access from the S-CPU
+
+auto SuperFX::CPUROM::size() const -> uint {
+  return superfx.rom.size();
+}
+
+auto SuperFX::CPUROM::read(uint24 addr, uint8 data) -> uint8 {
+  if(superfx.regs.sfr.g && superfx.regs.scmr.ron) {
+    static const uint8 vector[16] = {
+      0x00, 0x01, 0x00, 0x01, 0x04, 0x01, 0x00, 0x01,
+      0x00, 0x01, 0x08, 0x01, 0x00, 0x01, 0x0c, 0x01,
+    };
+    return vector[addr & 15];
+  }
+  return superfx.rom.read(addr, data);
+}
+
+auto SuperFX::CPUROM::write(uint24 addr, uint8 data) -> void {
+  superfx.rom.write(addr, data);
+}
+
+auto SuperFX::CPURAM::size() const -> uint {
+  return superfx.ram.size();
+}
+
+auto SuperFX::CPURAM::read(uint24 addr, uint8 data) -> uint8 {
+  if(superfx.regs.sfr.g && superfx.regs.scmr.ran) return data;
+  return superfx.ram.read(addr, data);
+}
+
+auto SuperFX::CPURAM::write(uint24 addr, uint8 data) -> void {
+  superfx.ram.write(addr, data);
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/core.cpp b/higan/sfc-balanced/coprocessor/superfx/core.cpp
new file mode 100644
index 0000000..9c2b241
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/core.cpp
@@ -0,0 +1,104 @@
+auto SuperFX::stop() -> void {
+  cpu.r.irq = 1;
+}
+
+auto SuperFX::color(uint8 source) -> uint8 {
+  if(regs.por.highnibble) return (regs.colr & 0xf0) | (source >> 4);
+  if(regs.por.freezehigh) return (regs.colr & 0xf0) | (source & 0x0f);
+  return source;
+}
+
+auto SuperFX::plot(uint8 x, uint8 y) -> void {
+  uint8 color = regs.colr;
+
+  if(regs.por.dither && regs.scmr.md != 3) {
+    if((x ^ y) & 1) color >>= 4;
+    color &= 0x0f;
+  }
+
+  if(!regs.por.transparent) {
+    if(regs.scmr.md == 3) {
+      if(regs.por.freezehigh) {
+        if((color & 0x0f) == 0) return;
+      } else {
+        if(color == 0) return;
+      }
+    } else {
+      if((color & 0x0f) == 0) return;
+    }
+  }
+
+  uint16 offset = (y << 5) + (x >> 3);
+  if(offset != pixelcache[0].offset) {
+    flushPixelCache(pixelcache[1]);
+    pixelcache[1] = pixelcache[0];
+    pixelcache[0].bitpend = 0x00;
+    pixelcache[0].offset = offset;
+  }
+
+  x = (x & 7) ^ 7;
+  pixelcache[0].data[x] = color;
+  pixelcache[0].bitpend |= 1 << x;
+  if(pixelcache[0].bitpend == 0xff) {
+    flushPixelCache(pixelcache[1]);
+    pixelcache[1] = pixelcache[0];
+    pixelcache[0].bitpend = 0x00;
+  }
+}
+
+auto SuperFX::rpix(uint8 x, uint8 y) -> uint8 {
+  flushPixelCache(pixelcache[1]);
+  flushPixelCache(pixelcache[0]);
+
+  uint cn;  //character number
+  switch(regs.por.obj ? 3 : regs.scmr.ht) {
+  case 0: cn = ((x & 0xf8) << 1) + ((y & 0xf8) >> 3); break;
+  case 1: cn = ((x & 0xf8) << 1) + ((x & 0xf8) >> 1) + ((y & 0xf8) >> 3); break;
+  case 2: cn = ((x & 0xf8) << 1) + ((x & 0xf8) << 0) + ((y & 0xf8) >> 3); break;
+  case 3: cn = ((y & 0x80) << 2) + ((x & 0x80) << 1) + ((y & 0x78) << 1) + ((x & 0x78) >> 3); break;
+  }
+  uint bpp = 2 << (regs.scmr.md - (regs.scmr.md >> 1));  // = [regs.scmr.md]{ 2, 4, 4, 8 };
+  uint addr = 0x700000 + (cn * (bpp << 3)) + (regs.scbr << 10) + ((y & 0x07) * 2);
+  uint8 data = 0x00;
+  x = (x & 7) ^ 7;
+
+  for(uint n : range(bpp)) {
+    uint byte = ((n >> 1) << 4) + (n & 1);  // = [n]{ 0, 1, 16, 17, 32, 33, 48, 49 };
+    step(regs.clsr ? 5 : 6);
+    data |= ((read(addr + byte) >> x) & 1) << n;
+  }
+
+  return data;
+}
+
+auto SuperFX::flushPixelCache(PixelCache& cache) -> void {
+  if(cache.bitpend == 0x00) return;
+
+  uint8 x = cache.offset << 3;
+  uint8 y = cache.offset >> 5;
+
+  uint cn;  //character number
+  switch(regs.por.obj ? 3 : regs.scmr.ht) {
+  case 0: cn = ((x & 0xf8) << 1) + ((y & 0xf8) >> 3); break;
+  case 1: cn = ((x & 0xf8) << 1) + ((x & 0xf8) >> 1) + ((y & 0xf8) >> 3); break;
+  case 2: cn = ((x & 0xf8) << 1) + ((x & 0xf8) << 0) + ((y & 0xf8) >> 3); break;
+  case 3: cn = ((y & 0x80) << 2) + ((x & 0x80) << 1) + ((y & 0x78) << 1) + ((x & 0x78) >> 3); break;
+  }
+  uint bpp = 2 << (regs.scmr.md - (regs.scmr.md >> 1));  // = [regs.scmr.md]{ 2, 4, 4, 8 };
+  uint addr = 0x700000 + (cn * (bpp << 3)) + (regs.scbr << 10) + ((y & 0x07) * 2);
+
+  for(uint n : range(bpp)) {
+    uint byte = ((n >> 1) << 4) + (n & 1);  // = [n]{ 0, 1, 16, 17, 32, 33, 48, 49 };
+    uint8 data = 0x00;
+    for(uint x : range(8)) data |= ((cache.data[x] >> n) & 1) << x;
+    if(cache.bitpend != 0xff) {
+      step(regs.clsr ? 5 : 6);
+      data &= cache.bitpend;
+      data |= read(addr + byte) & ~cache.bitpend;
+    }
+    step(regs.clsr ? 5 : 6);
+    write(addr + byte, data);
+  }
+
+  cache.bitpend = 0x00;
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/io.cpp b/higan/sfc-balanced/coprocessor/superfx/io.cpp
new file mode 100644
index 0000000..372dd4c
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/io.cpp
@@ -0,0 +1,113 @@
+auto SuperFX::readIO(uint24 addr, uint8) -> uint8 {
+  cpu.synchronize(*this);
+  addr = 0x3000 | addr.bits(0,9);
+
+  if(addr >= 0x3100 && addr <= 0x32ff) {
+    return readCache(addr - 0x3100);
+  }
+
+  if(addr >= 0x3000 && addr <= 0x301f) {
+    return regs.r[(addr >> 1) & 15] >> ((addr & 1) << 3);
+  }
+
+  switch(addr) {
+  case 0x3030: {
+    return regs.sfr >> 0;
+  }
+
+  case 0x3031: {
+    uint8 r = regs.sfr >> 8;
+    regs.sfr.irq = 0;
+    cpu.r.irq = 0;
+    return r;
+  }
+
+  case 0x3034: {
+    return regs.pbr;
+  }
+
+  case 0x3036: {
+    return regs.rombr;
+  }
+
+  case 0x303b: {
+    return regs.vcr;
+  }
+
+  case 0x303c: {
+    return regs.rambr;
+  }
+
+  case 0x303e: {
+    return regs.cbr >> 0;
+  }
+
+  case 0x303f: {
+    return regs.cbr >> 8;
+  }
+  }
+
+  return 0x00;
+}
+
+auto SuperFX::writeIO(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(*this);
+  addr = 0x3000 | addr.bits(0,9);
+
+  if(addr >= 0x3100 && addr <= 0x32ff) {
+    return writeCache(addr - 0x3100, data);
+  }
+
+  if(addr >= 0x3000 && addr <= 0x301f) {
+    uint n = (addr >> 1) & 15;
+    if((addr & 1) == 0) {
+      regs.r[n] = (regs.r[n] & 0xff00) | data;
+    } else {
+      regs.r[n] = (data << 8) | (regs.r[n] & 0xff);
+    }
+    if(n == 14) updateROMBuffer();
+
+    if(addr == 0x301f) regs.sfr.g = 1;
+    return;
+  }
+
+  switch(addr) {
+  case 0x3030: {
+    bool g = regs.sfr.g;
+    regs.sfr = (regs.sfr & 0xff00) | (data << 0);
+    if(g == 1 && regs.sfr.g == 0) {
+      regs.cbr = 0x0000;
+      flushCache();
+    }
+  } break;
+
+  case 0x3031: {
+    regs.sfr = (data << 8) | (regs.sfr & 0x00ff);
+  } break;
+
+  case 0x3033: {
+    regs.bramr = data & 0x01;
+  } break;
+
+  case 0x3034: {
+    regs.pbr = data & 0x7f;
+    flushCache();
+  } break;
+
+  case 0x3037: {
+    regs.cfgr = data;
+  } break;
+
+  case 0x3038: {
+    regs.scbr = data;
+  } break;
+
+  case 0x3039: {
+    regs.clsr = data & 0x01;
+  } break;
+
+  case 0x303a: {
+    regs.scmr = data;
+  } break;
+  }
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/memory.cpp b/higan/sfc-balanced/coprocessor/superfx/memory.cpp
new file mode 100644
index 0000000..3f1efc2
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/memory.cpp
@@ -0,0 +1,96 @@
+auto SuperFX::read(uint24 addr, uint8 data) -> uint8 {
+  if((addr & 0xc00000) == 0x000000) {  //$00-3f:0000-7fff,:8000-ffff
+    while(!regs.scmr.ron) {
+      step(6);
+      synchronize(cpu);
+    }
+    return rom.read((((addr & 0x3f0000) >> 1) | (addr & 0x7fff)) & romMask);
+  }
+
+  if((addr & 0xe00000) == 0x400000) {  //$40-5f:0000-ffff
+    while(!regs.scmr.ron) {
+      step(6);
+      synchronize(cpu);
+    }
+    return rom.read(addr & romMask);
+  }
+
+  if((addr & 0xe00000) == 0x600000) {  //$60-7f:0000-ffff
+    while(!regs.scmr.ran) {
+      step(6);
+      synchronize(cpu);
+    }
+    return ram.read(addr & ramMask);
+  }
+
+  return data;
+}
+
+auto SuperFX::write(uint24 addr, uint8 data) -> void {
+  if((addr & 0xe00000) == 0x600000) {  //$60-7f:0000-ffff
+    while(!regs.scmr.ran) {
+      step(6);
+      synchronize(cpu);
+    }
+    return ram.write(addr & ramMask, data);
+  }
+}
+
+auto SuperFX::readOpcode(uint16 addr) -> uint8 {
+  uint16 offset = addr - regs.cbr;
+  if(offset < 512) {
+    if(cache.valid[offset >> 4] == false) {
+      uint dp = offset & 0xfff0;
+      uint sp = (regs.pbr << 16) + ((regs.cbr + dp) & 0xfff0);
+      for(uint n : range(16)) {
+        step(regs.clsr ? 5 : 6);
+        cache.buffer[dp++] = read(sp++);
+      }
+      cache.valid[offset >> 4] = true;
+    } else {
+      step(regs.clsr ? 1 : 2);
+    }
+    return cache.buffer[offset];
+  }
+
+  if(regs.pbr <= 0x5f) {
+    //$00-5f:0000-ffff ROM
+    syncROMBuffer();
+    step(regs.clsr ? 5 : 6);
+    return read(regs.pbr << 16 | addr);
+  } else {
+    //$60-7f:0000-ffff RAM
+    syncRAMBuffer();
+    step(regs.clsr ? 5 : 6);
+    return read(regs.pbr << 16 | addr);
+  }
+}
+
+auto SuperFX::peekpipe() -> uint8 {
+  uint8 result = regs.pipeline;
+  regs.pipeline = readOpcode(regs.r[15]);
+  regs.r[15].modified = false;
+  return result;
+}
+
+auto SuperFX::pipe() -> uint8 {
+  uint8 result = regs.pipeline;
+  regs.pipeline = readOpcode(++regs.r[15]);
+  regs.r[15].modified = false;
+  return result;
+}
+
+auto SuperFX::flushCache() -> void {
+  for(uint n : range(32)) cache.valid[n] = false;
+}
+
+auto SuperFX::readCache(uint16 addr) -> uint8 {
+  addr = (addr + regs.cbr) & 511;
+  return cache.buffer[addr];
+}
+
+auto SuperFX::writeCache(uint16 addr, uint8 data) -> void {
+  addr = (addr + regs.cbr) & 511;
+  cache.buffer[addr] = data;
+  if((addr & 15) == 15) cache.valid[addr >> 4] = true;
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/serialization.cpp b/higan/sfc-balanced/coprocessor/superfx/serialization.cpp
new file mode 100644
index 0000000..214f5dd
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/serialization.cpp
@@ -0,0 +1,6 @@
+auto SuperFX::serialize(serializer& s) -> void {
+  GSU::serialize(s);
+  Thread::serialize(s);
+
+  s.array(ram.data(), ram.size());
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/superfx.cpp b/higan/sfc-balanced/coprocessor/superfx/superfx.cpp
new file mode 100644
index 0000000..d23e2e6
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/superfx.cpp
@@ -0,0 +1,71 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "bus.cpp"
+#include "core.cpp"
+#include "memory.cpp"
+#include "io.cpp"
+#include "timing.cpp"
+#include "serialization.cpp"
+SuperFX superfx;
+
+auto SuperFX::Enter() -> void {
+  while(true) scheduler.synchronize(), superfx.main();
+}
+
+auto SuperFX::main() -> void {
+  if(regs.sfr.g == 0) return step(6);
+
+  instruction(peekpipe());
+
+  if(regs.r[14].modified) {
+    regs.r[14].modified = false;
+    updateROMBuffer();
+  }
+
+  if(regs.r[15].modified) {
+    regs.r[15].modified = false;
+  } else {
+    regs.r[15]++;
+  }
+}
+
+auto SuperFX::init() -> void {
+}
+
+auto SuperFX::load() -> void {
+}
+
+auto SuperFX::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+auto SuperFX::power() -> void {
+  GSU::power();
+}
+
+auto SuperFX::reset() -> void {
+  GSU::reset();
+  create(SuperFX::Enter, system.colorburst() * 6.0);
+
+  romMask = rom.size() - 1;
+  ramMask = ram.size() - 1;
+
+  for(uint n : range(512)) cache.buffer[n] = 0x00;
+  for(uint n : range(32)) cache.valid[n] = false;
+  for(uint n : range(2)) {
+    pixelcache[n].offset = ~0;
+    pixelcache[n].bitpend = 0x00;
+  }
+
+  regs.romcl = 0;
+  regs.romdr = 0;
+
+  regs.ramcl = 0;
+  regs.ramar = 0;
+  regs.ramdr = 0;
+}
+
+}
diff --git a/higan/sfc-balanced/coprocessor/superfx/superfx.hpp b/higan/sfc-balanced/coprocessor/superfx/superfx.hpp
new file mode 100644
index 0000000..2d9f7d9
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/superfx.hpp
@@ -0,0 +1,73 @@
+struct SuperFX : Processor::GSU, Thread {
+  MappedRAM rom;
+  MappedRAM ram;
+
+  //superfx.cpp
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //bus.cpp
+  struct CPUROM : Memory {
+    auto size() const -> uint;
+    auto read(uint24, uint8) -> uint8;
+    auto write(uint24, uint8) -> void;
+  };
+
+  struct CPURAM : Memory {
+    auto size() const -> uint;
+    auto read(uint24, uint8) -> uint8;
+    auto write(uint24, uint8) -> void;
+  };
+
+  //core.cpp
+  auto stop() -> void override;
+  auto color(uint8 source) -> uint8 override;
+  auto plot(uint8 x, uint8 y) -> void override;
+  auto rpix(uint8 x, uint8 y) -> uint8 override;
+
+  auto flushPixelCache(PixelCache& cache) -> void;
+
+  //memory.cpp
+  auto read(uint24 addr, uint8 data = 0x00) -> uint8 override;
+  auto write(uint24 addr, uint8 data) -> void override;
+
+  auto readOpcode(uint16 addr) -> uint8;
+  alwaysinline auto peekpipe() -> uint8;
+  alwaysinline auto pipe() -> uint8 override;
+
+  auto flushCache() -> void override;
+  auto readCache(uint16 addr) -> uint8;
+  auto writeCache(uint16 addr, uint8 data) -> void;
+
+  //io.cpp
+  auto readIO(uint24 addr, uint8 data) -> uint8;
+  auto writeIO(uint24 addr, uint8 data) -> void;
+
+  //timing.cpp
+  auto step(uint clocks) -> void override;
+
+  auto syncROMBuffer() -> void override;
+  auto readROMBuffer() -> uint8 override;
+  auto updateROMBuffer() -> void;
+
+  auto syncRAMBuffer() -> void override;
+  auto readRAMBuffer(uint16 addr) -> uint8 override;
+  auto writeRAMBuffer(uint16 addr, uint8 data) -> void override;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  CPUROM cpurom;
+  CPURAM cpuram;
+
+private:
+  uint romMask;
+  uint ramMask;
+};
+
+extern SuperFX superfx;
diff --git a/higan/sfc-balanced/coprocessor/superfx/timing.cpp b/higan/sfc-balanced/coprocessor/superfx/timing.cpp
new file mode 100644
index 0000000..3a427b2
--- /dev/null
+++ b/higan/sfc-balanced/coprocessor/superfx/timing.cpp
@@ -0,0 +1,49 @@
+auto SuperFX::step(uint clocks) -> void {
+  if(regs.romcl) {
+    regs.romcl -= min(clocks, regs.romcl);
+    if(regs.romcl == 0) {
+      regs.sfr.r = 0;
+      regs.romdr = read((regs.rombr << 16) + regs.r[14]);
+    }
+  }
+
+  if(regs.ramcl) {
+    regs.ramcl -= min(clocks, regs.ramcl);
+    if(regs.ramcl == 0) {
+      write(0x700000 + (regs.rambr << 16) + regs.ramar, regs.ramdr);
+    }
+  }
+
+  Thread::step(clocks);
+  synchronize(cpu);
+}
+
+auto SuperFX::syncROMBuffer() -> void {
+  if(regs.romcl) step(regs.romcl);
+}
+
+auto SuperFX::readROMBuffer() -> uint8 {
+  syncROMBuffer();
+  return regs.romdr;
+}
+
+auto SuperFX::updateROMBuffer() -> void {
+  regs.sfr.r = 1;
+  regs.romcl = regs.clsr ? 5 : 6;
+}
+
+auto SuperFX::syncRAMBuffer() -> void {
+  if(regs.ramcl) step(regs.ramcl);
+}
+
+auto SuperFX::readRAMBuffer(uint16 addr) -> uint8 {
+  syncRAMBuffer();
+  return read(0x700000 + (regs.rambr << 16) + addr);
+}
+
+auto SuperFX::writeRAMBuffer(uint16 addr, uint8 data) -> void {
+  syncRAMBuffer();
+  regs.ramcl = regs.clsr ? 5 : 6;
+  regs.ramar = addr;
+  regs.ramdr = data;
+}
diff --git a/higan/sfc-balanced/cpu/cpu.cpp b/higan/sfc-balanced/cpu/cpu.cpp
new file mode 100644
index 0000000..d80352c
--- /dev/null
+++ b/higan/sfc-balanced/cpu/cpu.cpp
@@ -0,0 +1,237 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+CPU cpu;
+#include "dma.cpp"
+#include "memory.cpp"
+#include "io.cpp"
+#include "timing.cpp"
+#include "irq.cpp"
+#include "joypad.cpp"
+#include "serialization.cpp"
+
+auto CPU::interruptPending() const -> bool { return status.interruptPending; }
+auto CPU::pio() const -> uint8 { return io.pio; }
+auto CPU::joylatch() const -> bool { return io.joypadStrobeLatch; }
+
+CPU::CPU() {
+  PPUcounter::scanline = {&CPU::scanline, this};
+}
+
+auto CPU::Enter() -> void {
+  while(true) scheduler.synchronize(), cpu.main();
+}
+
+auto CPU::main() -> void {
+  if(status.interruptPending) {
+    status.interruptPending = false;
+    if(status.nmiPending) {
+      status.nmiPending = false;
+      r.vector = r.e ? 0xfffa : 0xffea;
+      interrupt();
+      debug(cpu.nmi);
+    } else if(status.irqPending) {
+      status.irqPending = false;
+      r.vector = r.e ? 0xfffe : 0xffee;
+      interrupt();
+      debug(cpu.irq);
+    } else if(status.resetPending) {
+      status.resetPending = false;
+      step(132);
+      r.vector = 0xfffc;
+      interrupt();
+    } else if(status.powerPending) {
+      status.powerPending = false;
+      step(186);
+      r.pc.l = bus.read(0xfffc, r.mdr);
+      r.pc.h = bus.read(0xfffd, r.mdr);
+    }
+  }
+
+  debug(cpu.execute, r.pc);
+  instruction();
+}
+
+auto CPU::load(Markup::Node node) -> bool {
+  version = max(1, min(2, node["cpu/version"].natural()));
+  return true;
+}
+
+auto CPU::power() -> void {
+  for(auto& byte : wram) byte = random(0x55);
+
+  //CPU
+  r.a = 0x0000;
+  r.x = 0x0000;
+  r.y = 0x0000;
+  r.s = 0x01ff;
+
+  //DMA
+  for(auto& channel : this->channel) {
+    channel.direction = 1;
+    channel.indirect = true;
+    channel.unused = true;
+    channel.reverseTransfer = true;
+    channel.fixedTransfer = true;
+    channel.transferMode = 7;
+
+    channel.targetAddress = 0xff;
+
+    channel.sourceAddress = 0xffff;
+    channel.sourceBank = 0xff;
+
+    channel.transferSize = 0xffff;
+    channel.indirectBank = 0xff;
+
+    channel.hdmaAddress = 0xffff;
+    channel.lineCounter = 0xff;
+    channel.unknown = 0xff;
+  }
+
+  status.powerPending = true;
+  status.interruptPending = true;
+}
+
+auto CPU::reset() -> void {
+  create(Enter, system.colorburst() * 6.0);
+  coprocessors.reset();
+  PPUcounter::reset();
+
+  function<auto (uint24, uint8) -> uint8> reader;
+  function<auto (uint24, uint8) -> void> writer;
+
+  reader = {&CPU::readAPU, this};
+  writer = {&CPU::writeAPU, this};
+  bus.map(reader, writer, "00-3f,80-bf:2140-217f");
+
+  reader = {&CPU::readCPU, this};
+  writer = {&CPU::writeCPU, this};
+  bus.map(reader, writer, "00-3f,80-bf:2180-2183,4016-4017,4200-421f");
+
+  reader = {&CPU::readDMA, this};
+  writer = {&CPU::writeDMA, this};
+  bus.map(reader, writer, "00-3f,80-bf:4300-437f");
+
+  reader = [](uint24 addr, uint8) -> uint8 { return cpu.wram[addr]; };
+  writer = [](uint24 addr, uint8 data) -> void { cpu.wram[addr] = data; };
+  bus.map(reader, writer, "00-3f,80-bf:0000-1fff", 0x2000);
+  bus.map(reader, writer, "7e-7f:0000-ffff", 0x20000);
+
+  //CPU
+  r.pc     = 0x000000;
+  r.x.h    = 0x00;
+  r.y.h    = 0x00;
+  r.s.h    = 0x01;
+  r.d      = 0x0000;
+  r.db     = 0x00;
+  r.p      = 0x34;
+  r.e      = 1;
+  r.mdr    = 0x00;
+  r.wai    = false;
+  r.vector = 0xfffc;  //reset vector address
+
+  //$2140-217f
+  for(auto& port : io.port) port = 0x00;
+
+  //$2181-$2183
+  io.wramAddress = 0x000000;
+
+  //$4016-$4017
+  io.joypadStrobeLatch = 0;
+
+  //$4200
+  io.nmiEnabled = false;
+  io.hirqEnabled = false;
+  io.virqEnabled = false;
+  io.autoJoypadPoll = false;
+
+  //$4201
+  io.pio = 0xff;
+
+  //$4202-$4203
+  io.wrmpya = 0xff;
+  io.wrmpyb = 0xff;
+
+  //$4204-$4206
+  io.wrdiva = 0xffff;
+  io.wrdivb = 0xff;
+
+  //$4207-$420a
+  io.hirqPos = 0x01ff;
+  io.virqPos = 0x01ff;
+
+  //$420d
+  io.romSpeed = 8;
+
+  //$4214-$4217
+  io.rddiv = 0x0000;
+  io.rdmpy = 0x0000;
+
+  //$4218-$421f
+  io.joy1 = 0x0000;
+  io.joy2 = 0x0000;
+  io.joy3 = 0x0000;
+  io.joy4 = 0x0000;
+
+  //ALU
+  alu.mpyctr = 0;
+  alu.divctr = 0;
+  alu.shift = 0;
+
+  //DMA
+  for(auto& channel : this->channel) {
+    channel.dmaEnabled = false;
+    channel.hdmaEnabled = false;
+
+    channel.hdmaCompleted = false;
+    channel.hdmaDoTransfer = false;
+  }
+
+  pipe.valid = false;
+  pipe.addr = 0;
+  pipe.data = 0;
+
+  //Timing
+  status.clockCount = 0;
+  status.lineClocks = lineclocks();
+
+  status.irqLock = false;
+  status.dramRefreshPosition = (version == 1 ? 530 : 538);
+  status.dramRefreshed = false;
+
+  status.hdmaInitPosition = (version == 1 ? 12 + 8 - dmaCounter() : 12 + dmaCounter());
+  status.hdmaInitTriggered = false;
+
+  status.hdmaPosition = 1104;
+  status.hdmaTriggered = false;
+
+  status.nmiValid      = false;
+  status.nmiLine       = false;
+  status.nmiTransition = false;
+  status.nmiPending    = false;
+  status.nmiHold       = false;
+
+  status.irqValid      = false;
+  status.irqLine       = false;
+  status.irqTransition = false;
+  status.irqPending    = false;
+  status.irqHold       = false;
+
+  status.resetPending = !status.powerPending;
+  status.interruptPending = true;
+
+  status.dmaActive   = false;
+  status.dmaCounter  = 0;
+  status.dmaClocks   = 0;
+  status.dmaPending  = false;
+  status.hdmaPending = false;
+  status.hdmaMode    = 0;
+
+  status.autoJoypadActive  = false;
+  status.autoJoypadLatch   = false;
+  status.autoJoypadCounter = 0;
+  status.autoJoypadClock   = 0;
+}
+
+}
diff --git a/higan/sfc-balanced/cpu/cpu.hpp b/higan/sfc-balanced/cpu/cpu.hpp
new file mode 100644
index 0000000..6dcb316
--- /dev/null
+++ b/higan/sfc-balanced/cpu/cpu.hpp
@@ -0,0 +1,244 @@
+struct CPU : Processor::WDC65816, Thread, PPUcounter {
+  auto interruptPending() const -> bool override;
+  auto pio() const -> uint8;
+  auto joylatch() const -> bool;
+
+  CPU();
+
+  auto readPort(uint2 port) const -> uint8;
+  auto writePort(uint2 port, uint8 data) -> void;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //dma.cpp
+  auto dmaStep(uint clocks) -> void;
+  auto dmaTransferValid(uint8 bbus, uint24 abus) -> bool;
+  auto dmaAddressValid(uint24 abus) -> bool;
+  auto dmaRead(uint24 abus) -> uint8;
+  auto dmaWrite(bool valid, uint addr = 0, uint8 data = 0) -> void;
+  auto dmaTransfer(bool direction, uint8 bbus, uint24 abus) -> void;
+
+  inline auto dmaAddressB(uint n, uint channel) -> uint8;
+  inline auto dmaAddress(uint n) -> uint24;
+  inline auto hdmaAddress(uint n) -> uint24;
+  inline auto hdmaIndirectAddress(uint n) -> uint24;
+
+  inline auto dmaEnabledChannels() -> uint;
+  inline auto hdmaActive(uint n) -> bool;
+  inline auto hdmaActiveAfter(uint s) -> bool;
+  inline auto hdmaEnabledChannels() -> uint;
+  inline auto hdmaActiveChannels() -> uint;
+
+  auto dmaRun() -> void;
+  auto hdmaUpdate(uint n) -> void;
+  auto hdmaRun() -> void;
+  auto hdmaInitReset() -> void;
+  auto hdmaInit() -> void;
+
+  //memory.cpp
+  auto idle() -> void override;
+  auto read(uint24 addr) -> uint8 override;
+  auto write(uint24 addr, uint8 data) -> void override;
+  alwaysinline auto speed(uint24 addr) const -> uint;
+  auto readDisassembler(uint24 addr) -> uint8 override;
+
+  //io.cpp
+  auto readAPU(uint24 addr, uint8 data) -> uint8;
+  auto readCPU(uint24 addr, uint8 data) -> uint8;
+  auto readDMA(uint24 addr, uint8 data) -> uint8;
+  auto writeAPU(uint24 addr, uint8 data) -> void;
+  auto writeCPU(uint24 addr, uint8 data) -> void;
+  auto writeDMA(uint24 addr, uint8 data) -> void;
+
+  //timing.cpp
+  auto dmaCounter() const -> uint;
+
+  auto step(uint clocks) -> void;
+  auto scanline() -> void;
+
+  alwaysinline auto aluEdge() -> void;
+  alwaysinline auto dmaEdge() -> void;
+  alwaysinline auto lastCycle() -> void;
+
+  //irq.cpp
+  alwaysinline auto pollInterrupts() -> void;
+  auto nmitimenUpdate(uint8 data) -> void;
+  auto rdnmi() -> bool;
+  auto timeup() -> bool;
+
+  alwaysinline auto nmiTest() -> bool;
+  alwaysinline auto irqTest() -> bool;
+
+  //joypad.cpp
+  auto stepAutoJoypadPoll() -> void;
+
+  //serialization.cpp
+  auto serialize(serializer&) -> void;
+
+  uint8 wram[128 * 1024];
+  vector<Thread*> coprocessors;
+  vector<Thread*> peripherals;
+
+privileged:
+  uint version = 2;  //allowed: 1, 2
+
+  struct Status {
+    bool interruptPending;
+
+    uint clockCount;
+    uint lineClocks;
+
+    //timing
+    bool irqLock;
+
+    uint dramRefreshPosition;
+    bool dramRefreshed;
+
+    uint hdmaInitPosition;
+    bool hdmaInitTriggered;
+
+    uint hdmaPosition;
+    bool hdmaTriggered;
+
+    bool nmiValid;
+    bool nmiLine;
+    bool nmiTransition;
+    bool nmiPending;
+    bool nmiHold;
+
+    bool irqValid;
+    bool irqLine;
+    bool irqTransition;
+    bool irqPending;
+    bool irqHold;
+
+    bool powerPending;
+    bool resetPending;
+
+    //DMA
+    bool dmaActive;
+    uint dmaCounter;
+    uint dmaClocks;
+    bool dmaPending;
+    bool hdmaPending;
+    bool hdmaMode;  //0 = init, 1 = run
+
+    //auto joypad polling
+    bool autoJoypadActive;
+    bool autoJoypadLatch;
+    uint autoJoypadCounter;
+    uint autoJoypadClock;
+  } status;
+
+  struct IO {
+    //$2140-217f
+    uint8 port[4];
+
+    //$2181-$2183
+    uint17 wramAddress;
+
+    //$4016-$4017
+    bool joypadStrobeLatch;
+
+    //$4200
+    bool nmiEnabled;
+    bool hirqEnabled;
+    bool virqEnabled;
+    bool autoJoypadPoll;
+
+    //$4201
+    uint8 pio;
+
+    //$4202-$4203
+    uint8 wrmpya;
+    uint8 wrmpyb;
+
+    //$4204-$4206
+    uint16 wrdiva;
+    uint8 wrdivb;
+
+    //$4207-$420a
+    uint9 hirqPos;
+    uint9 virqPos;
+
+    //$420d
+    uint romSpeed;
+
+    //$4214-$4217
+    uint16 rddiv;
+    uint16 rdmpy;
+
+    //$4218-$421f
+    uint16 joy1;
+    uint16 joy2;
+    uint16 joy3;
+    uint16 joy4;
+  } io;
+
+  struct ALU {
+    uint mpyctr;
+    uint divctr;
+    uint shift;
+  } alu;
+
+  struct Channel {
+    //$420b
+    bool dmaEnabled;
+
+    //$420c
+    bool hdmaEnabled;
+
+    //$43x0
+    bool direction;
+    bool indirect;
+    bool unused;
+    bool reverseTransfer;
+    bool fixedTransfer;
+    uint3 transferMode;
+
+    //$43x1
+    uint8 targetAddress;
+
+    //$43x2-$43x3
+    uint16 sourceAddress;
+
+    //$43x4
+    uint8 sourceBank;
+
+    //$43x5-$43x6
+    union {
+      uint16 transferSize;
+      uint16 indirectAddress;
+    };
+
+    //$43x7
+    uint8 indirectBank;
+
+    //$43x8-$43x9
+    uint16 hdmaAddress;
+
+    //$43xa
+    uint8 lineCounter;
+
+    //$43xb/$43xf
+    uint8 unknown;
+
+    //internal state
+    bool hdmaCompleted;
+    bool hdmaDoTransfer;
+
+    Channel() : transferSize(0) {}
+  } channel[8];
+
+  struct Pipe {
+    bool valid;
+    uint addr;
+    uint8 data;
+  } pipe;
+};
+
+extern CPU cpu;
diff --git a/higan/sfc-balanced/cpu/dma.cpp b/higan/sfc-balanced/cpu/dma.cpp
new file mode 100644
index 0000000..af68524
--- /dev/null
+++ b/higan/sfc-balanced/cpu/dma.cpp
@@ -0,0 +1,239 @@
+auto CPU::dmaStep(uint clocks) -> void {
+  status.dmaClocks += clocks;
+  step(clocks);
+}
+
+//=============
+//memory access
+//=============
+
+auto CPU::dmaTransferValid(uint8 bbus, uint24 abus) -> bool {
+  //transfers from WRAM to WRAM are invalid; chip only has one address bus
+  if(bbus == 0x80 && ((abus & 0xfe0000) == 0x7e0000 || (abus & 0x40e000) == 0x0000)) return false;
+  return true;
+}
+
+auto CPU::dmaAddressValid(uint24 abus) -> bool {
+  //A-bus access to B-bus or S-CPU registers are invalid
+  if((abus & 0x40ff00) == 0x2100) return false;  //$00-3f,80-bf:2100-21ff
+  if((abus & 0x40fe00) == 0x4000) return false;  //$00-3f,80-bf:4000-41ff
+  if((abus & 0x40ffe0) == 0x4200) return false;  //$00-3f,80-bf:4200-421f
+  if((abus & 0x40ff80) == 0x4300) return false;  //$00-3f,80-bf:4300-437f
+  return true;
+}
+
+auto CPU::dmaRead(uint24 abus) -> uint8 {
+  if(!dmaAddressValid(abus)) return 0x00;
+  return bus.read(abus, r.mdr);
+}
+
+//simulate two-stage pipeline for DMA transfers; example:
+//cycle 0: read N+0
+//cycle 1: write N+0 & read N+1 (parallel; one on A-bus, one on B-bus)
+//cycle 2: write N+1 & read N+2 (parallel)
+//cycle 3: write N+2
+auto CPU::dmaWrite(bool valid, uint addr, uint8 data) -> void {
+  if(pipe.valid) bus.write(pipe.addr, pipe.data);
+  pipe.valid = valid;
+  pipe.addr = addr;
+  pipe.data = data;
+}
+
+auto CPU::dmaTransfer(bool direction, uint8 bbus, uint24 abus) -> void {
+  if(direction == 0) {
+    dmaStep(4);
+    r.mdr = dmaRead(abus);
+    dmaStep(4);
+    dmaWrite(dmaTransferValid(bbus, abus), 0x2100 | bbus, r.mdr);
+  } else {
+    dmaStep(4);
+    r.mdr = dmaTransferValid(bbus, abus) ? bus.read(0x2100 | bbus, r.mdr) : (uint8)0x00;
+    dmaStep(4);
+    dmaWrite(dmaAddressValid(abus), abus, r.mdr);
+  }
+}
+
+//===================
+//address calculation
+//===================
+
+auto CPU::dmaAddressB(uint n, uint index) -> uint8 {
+  switch(channel[n].transferMode) {
+  case 0: return (channel[n].targetAddress);                       //0
+  case 1: return (channel[n].targetAddress + (index & 1));         //0,1
+  case 2: return (channel[n].targetAddress);                       //0,0
+  case 3: return (channel[n].targetAddress + ((index >> 1) & 1));  //0,0,1,1
+  case 4: return (channel[n].targetAddress + (index & 3));         //0,1,2,3
+  case 5: return (channel[n].targetAddress + (index & 1));         //0,1,0,1
+  case 6: return (channel[n].targetAddress);                       //0,0     [2]
+  case 7: return (channel[n].targetAddress + ((index >> 1) & 1));  //0,0,1,1 [3]
+  }
+  unreachable;
+}
+
+auto CPU::dmaAddress(uint n) -> uint24 {
+  uint24 addr = channel[n].sourceBank << 16 | channel[n].sourceAddress;
+
+  if(!channel[n].fixedTransfer) {
+    if(!channel[n].reverseTransfer) {
+      channel[n].sourceAddress++;
+    } else {
+      channel[n].sourceAddress--;
+    }
+  }
+
+  return addr;
+}
+
+auto CPU::hdmaAddress(uint n) -> uint24 {
+  return channel[n].sourceBank << 16 | channel[n].hdmaAddress++;
+}
+
+auto CPU::hdmaIndirectAddress(uint n) -> uint24 {
+  return channel[n].indirectBank << 16 | channel[n].indirectAddress++;
+}
+
+//==============
+//channel status
+//==============
+
+auto CPU::dmaEnabledChannels() -> uint {
+  uint count = 0;
+  for(auto n : range(8)) count += channel[n].dmaEnabled;
+  return count;
+}
+
+auto CPU::hdmaActive(uint n) -> bool {
+  return channel[n].hdmaEnabled && !channel[n].hdmaCompleted;
+}
+
+auto CPU::hdmaActiveAfter(uint s) -> bool {
+  for(uint n = s + 1; n < 8; n++) {
+    if(hdmaActive(n)) return true;
+  }
+  return false;
+}
+
+auto CPU::hdmaEnabledChannels() -> uint {
+  uint count = 0;
+  for(auto n : range(8)) count += channel[n].hdmaEnabled;
+  return count;
+}
+
+auto CPU::hdmaActiveChannels() -> uint {
+  uint count = 0;
+  for(auto n : range(8)) count += hdmaActive(n);
+  return count;
+}
+
+//==============
+//core functions
+//==============
+
+auto CPU::dmaRun() -> void {
+  dmaStep(8);
+  dmaWrite(false);
+  dmaEdge();
+
+  for(auto n : range(8)) {
+    if(!channel[n].dmaEnabled) continue;
+
+    uint index = 0;
+    do {
+      dmaTransfer(channel[n].direction, dmaAddressB(n, index++), dmaAddress(n));
+      dmaEdge();
+    } while(channel[n].dmaEnabled && --channel[n].transferSize);
+
+    dmaStep(8);
+    dmaWrite(false);
+    dmaEdge();
+
+    channel[n].dmaEnabled = false;
+  }
+
+  status.irqLock = true;
+}
+
+auto CPU::hdmaUpdate(uint n) -> void {
+  dmaStep(4);
+  r.mdr = dmaRead(channel[n].sourceBank << 16 | channel[n].hdmaAddress);
+  dmaStep(4);
+  dmaWrite(false);
+
+  if((channel[n].lineCounter & 0x7f) == 0) {
+    channel[n].lineCounter = r.mdr;
+    channel[n].hdmaAddress++;
+
+    channel[n].hdmaCompleted = channel[n].lineCounter == 0;
+    channel[n].hdmaDoTransfer = !channel[n].hdmaCompleted;
+
+    if(channel[n].indirect) {
+      dmaStep(4);
+      r.mdr = dmaRead(hdmaAddress(n));
+      channel[n].indirectAddress = r.mdr << 8;
+      dmaStep(4);
+      dmaWrite(false);
+
+      if(!channel[n].hdmaCompleted || hdmaActiveAfter(n)) {
+        dmaStep(4);
+        r.mdr = dmaRead(hdmaAddress(n));
+        channel[n].indirectAddress >>= 8;
+        channel[n].indirectAddress |= r.mdr << 8;
+        dmaStep(4);
+        dmaWrite(false);
+      }
+    }
+  }
+}
+
+auto CPU::hdmaRun() -> void {
+  dmaStep(8);
+  dmaWrite(false);
+
+  for(auto n : range(8)) {
+    if(!hdmaActive(n)) continue;
+    channel[n].dmaEnabled = false;  //HDMA run during DMA will stop DMA mid-transfer
+
+    if(channel[n].hdmaDoTransfer) {
+      static const uint transferLength[8] = {1, 2, 2, 4, 4, 4, 2, 4};
+      uint length = transferLength[channel[n].transferMode];
+      for(auto index : range(length)) {
+        uint addr = !channel[n].indirect ? hdmaAddress(n) : hdmaIndirectAddress(n);
+        dmaTransfer(channel[n].direction, dmaAddressB(n, index), addr);
+      }
+    }
+  }
+
+  for(auto n : range(8)) {
+    if(!hdmaActive(n)) continue;
+
+    channel[n].lineCounter--;
+    channel[n].hdmaDoTransfer = channel[n].lineCounter & 0x80;
+    hdmaUpdate(n);
+  }
+
+  status.irqLock = true;
+}
+
+auto CPU::hdmaInitReset() -> void {
+  for(auto n : range(8)) {
+    channel[n].hdmaCompleted = false;
+    channel[n].hdmaDoTransfer = false;
+  }
+}
+
+auto CPU::hdmaInit() -> void {
+  dmaStep(8);
+  dmaWrite(false);
+
+  for(auto n : range(8)) {
+    if(!channel[n].hdmaEnabled) continue;
+    channel[n].dmaEnabled = false;  //HDMA init during DMA will stop DMA mid-transfer
+
+    channel[n].hdmaAddress = channel[n].sourceAddress;
+    channel[n].lineCounter = 0;
+    hdmaUpdate(n);
+  }
+
+  status.irqLock = true;
+}
diff --git a/higan/sfc-balanced/cpu/io.cpp b/higan/sfc-balanced/cpu/io.cpp
new file mode 100644
index 0000000..14f4a2a
--- /dev/null
+++ b/higan/sfc-balanced/cpu/io.cpp
@@ -0,0 +1,310 @@
+auto CPU::readAPU(uint24 addr, uint8 data) -> uint8 {
+  synchronize(smp);
+  return smp.readPort(addr.bits(0,1));
+}
+
+auto CPU::readCPU(uint24 addr, uint8 data) -> uint8 {
+  switch((uint16)addr) {
+
+  //WMDATA
+  case 0x2180: {
+    return bus.read(0x7e0000 | io.wramAddress++, r.mdr);
+  }
+
+  //JOYSER0
+  //7-2 = MDR
+  //1-0 = Joypad serial data
+  case 0x4016: {
+    uint8 v = r.mdr & 0xfc;
+    v |= SuperFamicom::peripherals.controllerPort1->data();
+    return v;
+  }
+
+  //JOYSER1
+  case 0x4017: {
+    //7-5 = MDR
+    //4-2 = Always 1 (pins are connected to GND)
+    //1-0 = Joypad serial data
+    uint8 v = (r.mdr & 0xe0) | 0x1c;
+    v |= SuperFamicom::peripherals.controllerPort2->data();
+    return v;
+  }
+
+  //RDNMI
+  case 0x4210: {
+    //7   = NMI acknowledge
+    //6-4 = MDR
+    //3-0 = CPU (5a22) version
+    uint8 v = (r.mdr & 0x70);
+    v |= (uint8)(rdnmi()) << 7;
+    v |= (version & 0x0f);
+    return v;
+  }
+
+  //TIMEUP
+  case 0x4211: {
+    //7   = IRQ acknowledge
+    //6-0 = MDR
+    uint8 v = (r.mdr & 0x7f);
+    v |= (uint8)(timeup()) << 7;
+    return v;
+  }
+
+  //HVBJOY
+  case 0x4212: {
+    //7   = VBLANK acknowledge
+    //6   = HBLANK acknowledge
+    //5-1 = MDR
+    //0   = JOYPAD acknowledge
+    uint8 v = (r.mdr & 0x3e);
+    if(status.autoJoypadActive) v |= 0x01;
+    if(hcounter() <= 2 || hcounter() >= 1096) v |= 0x40;  //hblank
+    if(vcounter() >= ppu.vdisp()) v |= 0x80;  //vblank
+    return v;
+  }
+
+  //RDIO
+  case 0x4213: {
+    return io.pio;
+  }
+
+  //RDDIVL
+  case 0x4214: {
+    return io.rddiv.byte(0);
+  }
+
+  //RDDIVH
+  case 0x4215: {
+    return io.rddiv.byte(1);
+  }
+
+  //RDMPYL
+  case 0x4216: {
+    return io.rdmpy.byte(0);
+  }
+
+  //RDMPYH
+  case 0x4217: {
+    return io.rdmpy.byte(1);
+  }
+
+  case 0x4218: return io.joy1.byte(0);  //JOY1L
+  case 0x4219: return io.joy1.byte(1);  //JOY1H
+  case 0x421a: return io.joy2.byte(0);  //JOY2L
+  case 0x421b: return io.joy2.byte(1);  //JOY2H
+  case 0x421c: return io.joy3.byte(0);  //JOY3L
+  case 0x421d: return io.joy3.byte(1);  //JOY3H
+  case 0x421e: return io.joy4.byte(0);  //JOY4L
+  case 0x421f: return io.joy4.byte(1);  //JOY4H
+
+  }
+
+  return data;
+}
+
+auto CPU::readDMA(uint24 addr, uint8 data) -> uint8 {
+  auto& channel = this->channel[addr.bits(4,6)];
+
+  switch(addr & 0xff0f) {
+
+  //DMAPx
+  case 0x4300: return (
+    channel.transferMode    << 0
+  | channel.fixedTransfer   << 3
+  | channel.reverseTransfer << 4
+  | channel.unused          << 5
+  | channel.indirect        << 6
+  | channel.direction       << 7
+  );
+
+  //BBADx
+  case 0x4301: return channel.targetAddress;
+
+  //A1TxL
+  case 0x4302: return channel.sourceAddress >> 0;
+
+  //A1TxH
+  case 0x4303: return channel.sourceAddress >> 8;
+
+  //A1Bx
+  case 0x4304: return channel.sourceBank;
+
+  //DASxL -- union { uint16 transferSize; uint16 indirectAddress; };
+  case 0x4305: return channel.transferSize.byte(0);
+
+  //DASxH -- union { uint16 transferSize; uint16 indirectAddress; };
+  case 0x4306: return channel.transferSize.byte(1);
+
+  //DASBx
+  case 0x4307: return channel.indirectBank;
+
+  //A2AxL
+  case 0x4308: return channel.hdmaAddress.byte(0);
+
+  //A2AxH
+  case 0x4309: return channel.hdmaAddress.byte(1);
+
+  //NTRLx
+  case 0x430a: return channel.lineCounter;
+
+  //???
+  case 0x430b:
+  case 0x430f: return channel.unknown;
+
+  }
+
+  return data;
+}
+
+auto CPU::writeAPU(uint24 addr, uint8 data) -> void {
+  synchronize(smp);
+  return writePort(addr.bits(0,1), data);
+}
+
+auto CPU::writeCPU(uint24 addr, uint8 data) -> void {
+  switch((uint16)addr) {
+
+  //WMDATA
+  case 0x2180: {
+    return bus.write(0x7e0000 | io.wramAddress++, data);
+  }
+
+  case 0x2181: io.wramAddress.bits( 0, 7) = data;        return;  //WMADDL
+  case 0x2182: io.wramAddress.bits( 8,15) = data;        return;  //WMADDM
+  case 0x2183: io.wramAddress.bit (16   ) = data.bit(0); return;  //WMADDH
+
+  //JOYSER0
+  case 0x4016: {
+    //bit 0 is shared between JOYSER0 and JOYSER1, therefore
+    //strobing $4016.d0 affects both controller port latches.
+    //$4017 bit 0 writes are ignored.
+    SuperFamicom::peripherals.controllerPort1->latch(data.bit(0));
+    SuperFamicom::peripherals.controllerPort2->latch(data.bit(0));
+    return;
+  }
+
+  //NMITIMEN
+  case 0x4200: {
+    io.autoJoypadPoll = data.bit(0);
+    nmitimenUpdate(data);
+    return;
+  }
+
+  //WRIO
+  case 0x4201: {
+    if(io.pio.bit(7) && !data.bit(7)) ppu.latchCounters();
+    io.pio = data;
+    return;
+  }
+
+  //WRMPYA
+  case 0x4202: io.wrmpya = data; return;
+
+  //WRMPYB
+  case 0x4203: {
+    io.rdmpy = 0;
+    if(alu.mpyctr || alu.divctr) return;
+
+    io.wrmpyb = data;
+    io.rddiv = (io.wrmpyb << 8) | io.wrmpya;
+
+    alu.mpyctr = 8;  //perform multiplication over the next eight cycles
+    alu.shift = io.wrmpyb;
+    return;
+  }
+
+  case 0x4204: { io.wrdiva.byte(0) = data; return; }  //WRDIVL
+  case 0x4205: { io.wrdiva.byte(1) = data; return; }  //WRDIVH
+
+  //WRDIVB
+  case 0x4206: {
+    io.rdmpy = io.wrdiva;
+    if(alu.mpyctr || alu.divctr) return;
+
+    io.wrdivb = data;
+
+    alu.divctr = 16;  //perform division over the next sixteen cycles
+    alu.shift = io.wrdivb << 16;
+    return;
+  }
+
+  case 0x4207: io.hirqPos.bits(0,7) = data;        return;  //HTIMEL
+  case 0x4208: io.hirqPos.bit (8  ) = data.bit(0); return;  //HTIMEH
+
+  case 0x4209: io.virqPos.bits(0,7) = data;        return;  //VTIMEL
+  case 0x420a: io.virqPos.bit (8  ) = data.bit(0); return;  //VTIMEH
+
+  //DMAEN
+  case 0x420b: {
+    for(auto n : range(8)) channel[n].dmaEnabled = data.bit(n);
+    if(data) status.dmaPending = true;
+    return;
+  }
+
+  //HDMAEN
+  case 0x420c: {
+    for(auto n : range(8)) channel[n].hdmaEnabled = data.bit(n);
+    return;
+  }
+
+  //MEMSEL
+  case 0x420d: {
+    io.romSpeed = data.bit(0) ? 6 : 8;
+    return;
+  }
+
+  }
+}
+
+auto CPU::writeDMA(uint24 addr, uint8 data) -> void {
+  auto& channel = this->channel[addr.bits(4,6)];
+
+  switch(addr & 0xff0f) {
+
+  //DMAPx
+  case 0x4300: {
+    channel.transferMode    = data.bits(0,2);
+    channel.fixedTransfer   = data.bit (3);
+    channel.reverseTransfer = data.bit (4);
+    channel.unused          = data.bit (5);
+    channel.indirect        = data.bit (6);
+    channel.direction       = data.bit (7);
+    return;
+  }
+
+  //DDBADx
+  case 0x4301: channel.targetAddress = data; return;
+
+  //A1TxL
+  case 0x4302: channel.sourceAddress.byte(0) = data; return;
+
+  //A1TxH
+  case 0x4303: channel.sourceAddress.byte(1) = data; return;
+
+  //A1Bx
+  case 0x4304: channel.sourceBank = data; return;
+
+  //DASxL -- union { uint16 transferSize; uint16 indirectAddress; };
+  case 0x4305: channel.transferSize.byte(0) = data; return;
+
+  //DASxH -- union { uint16 transferSize; uint16 indirectAddress; };
+  case 0x4306: channel.transferSize.byte(1) = data; return;
+
+  //DASBx
+  case 0x4307: channel.indirectBank = data; return;
+
+  //A2AxL
+  case 0x4308: channel.hdmaAddress.byte(0) = data; return;
+
+  //A2AxH
+  case 0x4309: channel.hdmaAddress.byte(1) = data; return;
+
+  //NTRLx
+  case 0x430a: channel.lineCounter = data; return;
+
+  //???
+  case 0x430b:
+  case 0x430f: channel.unknown = data; return;
+
+  }
+}
diff --git a/higan/sfc-balanced/cpu/irq.cpp b/higan/sfc-balanced/cpu/irq.cpp
new file mode 100644
index 0000000..5d268e0
--- /dev/null
+++ b/higan/sfc-balanced/cpu/irq.cpp
@@ -0,0 +1,102 @@
+//called once every four clock cycles;
+//as NMI steps by scanlines (divisible by 4) and IRQ by PPU 4-cycle dots.
+//
+//ppu.(vh)counter(n) returns the value of said counters n-clocks before current time;
+//it is used to emulate hardware communication delay between opcode and interrupt units.
+auto CPU::pollInterrupts() -> void {
+  //NMI hold
+  if(status.nmiHold) {
+    status.nmiHold = false;
+    if(io.nmiEnabled) status.nmiTransition = true;
+  }
+
+  //NMI test
+  bool nmiValid = vcounter(2) >= ppu.vdisp();
+  if(!status.nmiValid && nmiValid) {
+    //0->1 edge sensitive transition
+    status.nmiLine = true;
+    status.nmiHold = true;  //hold /NMI for four cycles
+  } else if(status.nmiValid && !nmiValid) {
+    //1->0 edge sensitive transition
+    status.nmiLine = false;
+  }
+  status.nmiValid = nmiValid;
+
+  //IRQ hold
+  status.irqHold = false;
+  if(status.irqLine) {
+    if(io.virqEnabled || io.hirqEnabled) status.irqTransition = true;
+  }
+
+  //IRQ test
+  bool irqValid = io.virqEnabled || io.hirqEnabled;
+  if(irqValid) {
+    if((io.virqEnabled && vcounter(10) != (io.virqPos))
+    || (io.hirqEnabled && hcounter(10) != (io.hirqPos + 1) * 4)
+    || (io.virqPos && vcounter(6) == 0)  //IRQs cannot trigger on last dot of field
+    ) irqValid = false;
+  }
+  if(!status.irqValid && irqValid) {
+    //0->1 edge sensitive transition
+    status.irqLine = true;
+    status.irqHold = true;  //hold /IRQ for four cycles
+  }
+  status.irqValid = irqValid;
+}
+
+auto CPU::nmitimenUpdate(uint8 data) -> void {
+  bool nmiEnabled  = io.nmiEnabled;
+  bool virqEnabled = io.virqEnabled;
+  bool hirqEnabled = io.hirqEnabled;
+  io.nmiEnabled  = data & 0x80;
+  io.virqEnabled = data & 0x20;
+  io.hirqEnabled = data & 0x10;
+
+  //0->1 edge sensitive transition
+  if(!nmiEnabled && io.nmiEnabled && status.nmiLine) {
+    status.nmiTransition = true;
+  }
+
+  //?->1 level sensitive transition
+  if(io.virqEnabled && !io.hirqEnabled && status.irqLine) {
+    status.irqTransition = true;
+  }
+
+  if(!io.virqEnabled && !io.hirqEnabled) {
+    status.irqLine = false;
+    status.irqTransition = false;
+  }
+
+  status.irqLock = true;
+}
+
+auto CPU::rdnmi() -> bool {
+  bool result = status.nmiLine;
+  if(!status.nmiHold) {
+    status.nmiLine = false;
+  }
+  return result;
+}
+
+auto CPU::timeup() -> bool {
+  bool result = status.irqLine;
+  if(!status.irqHold) {
+    status.irqLine = false;
+    status.irqTransition = false;
+  }
+  return result;
+}
+
+auto CPU::nmiTest() -> bool {
+  if(!status.nmiTransition) return false;
+  status.nmiTransition = false;
+  r.wai = false;
+  return true;
+}
+
+auto CPU::irqTest() -> bool {
+  if(!status.irqTransition && !r.irq) return false;
+  status.irqTransition = false;
+  r.wai = false;
+  return !r.p.i;
+}
diff --git a/higan/sfc-balanced/cpu/joypad.cpp b/higan/sfc-balanced/cpu/joypad.cpp
new file mode 100644
index 0000000..cd14c40
--- /dev/null
+++ b/higan/sfc-balanced/cpu/joypad.cpp
@@ -0,0 +1,27 @@
+//called every 256 clocks; see CPU::addClocks()
+auto CPU::stepAutoJoypadPoll() -> void {
+  if(vcounter() >= ppu.vdisp()) {
+    //cache enable state at first iteration
+    if(status.autoJoypadCounter == 0) status.autoJoypadLatch = io.autoJoypadPoll;
+    status.autoJoypadActive = status.autoJoypadCounter <= 15;
+
+    if(status.autoJoypadActive && status.autoJoypadLatch) {
+      if(status.autoJoypadCounter == 0) {
+        SuperFamicom::peripherals.controllerPort1->latch(1);
+        SuperFamicom::peripherals.controllerPort2->latch(1);
+        SuperFamicom::peripherals.controllerPort1->latch(0);
+        SuperFamicom::peripherals.controllerPort2->latch(0);
+      }
+
+      uint2 port0 = SuperFamicom::peripherals.controllerPort1->data();
+      uint2 port1 = SuperFamicom::peripherals.controllerPort2->data();
+
+      io.joy1 = io.joy1 << 1 | port0.bit(0);
+      io.joy2 = io.joy2 << 1 | port1.bit(0);
+      io.joy3 = io.joy3 << 1 | port0.bit(1);
+      io.joy4 = io.joy4 << 1 | port1.bit(1);
+    }
+
+    status.autoJoypadCounter++;
+  }
+}
diff --git a/higan/sfc-balanced/cpu/memory.cpp b/higan/sfc-balanced/cpu/memory.cpp
new file mode 100644
index 0000000..17fe1da
--- /dev/null
+++ b/higan/sfc-balanced/cpu/memory.cpp
@@ -0,0 +1,45 @@
+auto CPU::readPort(uint2 port) const -> uint8 {
+  return io.port[port];
+}
+
+auto CPU::writePort(uint2 port, uint8 data) -> void {
+  io.port[port] = data;
+}
+
+auto CPU::idle() -> void {
+  status.clockCount = 6;
+  dmaEdge();
+  step(6);
+  aluEdge();
+}
+
+auto CPU::read(uint24 addr) -> uint8 {
+  status.clockCount = speed(addr);
+  dmaEdge();
+  step(status.clockCount - 4);
+  r.mdr = bus.read(addr, r.mdr);
+  step(4);
+  aluEdge();
+  debug(cpu.read, addr, r.mdr);
+  return r.mdr;
+}
+
+auto CPU::write(uint24 addr, uint8 data) -> void {
+  aluEdge();
+  status.clockCount = speed(addr);
+  dmaEdge();
+  step(status.clockCount);
+  bus.write(addr, r.mdr = data);
+  debug(cpu.write, addr, r.mdr);
+}
+
+auto CPU::speed(uint24 addr) const -> uint {
+  if(addr & 0x408000) return addr & 0x800000 ? io.romSpeed : 8;
+  if(addr + 0x6000 & 0x4000) return 8;
+  if(addr - 0x4000 & 0x7e00) return 6;
+  return 12;
+}
+
+auto CPU::readDisassembler(uint24 addr) -> uint8 {
+  return bus.read(addr, r.mdr);
+}
diff --git a/higan/sfc-balanced/cpu/serialization.cpp b/higan/sfc-balanced/cpu/serialization.cpp
new file mode 100644
index 0000000..90c2a82
--- /dev/null
+++ b/higan/sfc-balanced/cpu/serialization.cpp
@@ -0,0 +1,113 @@
+auto CPU::serialize(serializer& s) -> void {
+  WDC65816::serialize(s);
+  Thread::serialize(s);
+  PPUcounter::serialize(s);
+
+  s.array(wram);
+
+  s.integer(version);
+
+  s.integer(status.interruptPending);
+
+  s.integer(status.clockCount);
+  s.integer(status.lineClocks);
+
+  s.integer(status.irqLock);
+
+  s.integer(status.dramRefreshPosition);
+  s.integer(status.dramRefreshed);
+
+  s.integer(status.hdmaInitPosition);
+  s.integer(status.hdmaInitTriggered);
+
+  s.integer(status.hdmaPosition);
+  s.integer(status.hdmaTriggered);
+
+  s.integer(status.nmiValid);
+  s.integer(status.nmiLine);
+  s.integer(status.nmiTransition);
+  s.integer(status.nmiPending);
+  s.integer(status.nmiHold);
+
+  s.integer(status.irqValid);
+  s.integer(status.irqLine);
+  s.integer(status.irqTransition);
+  s.integer(status.irqPending);
+  s.integer(status.irqHold);
+
+  s.integer(status.powerPending);
+  s.integer(status.resetPending);
+
+  s.integer(status.dmaActive);
+  s.integer(status.dmaCounter);
+  s.integer(status.dmaClocks);
+  s.integer(status.dmaPending);
+  s.integer(status.hdmaPending);
+  s.integer(status.hdmaMode);
+
+  s.integer(status.autoJoypadActive);
+  s.integer(status.autoJoypadLatch);
+  s.integer(status.autoJoypadCounter);
+  s.integer(status.autoJoypadClock);
+
+  s.array(io.port);
+
+  s.integer(io.wramAddress);
+
+  s.integer(io.joypadStrobeLatch);
+
+  s.integer(io.nmiEnabled);
+  s.integer(io.hirqEnabled);
+  s.integer(io.virqEnabled);
+  s.integer(io.autoJoypadPoll);
+
+  s.integer(io.pio);
+
+  s.integer(io.wrmpya);
+  s.integer(io.wrmpyb);
+
+  s.integer(io.wrdiva);
+  s.integer(io.wrdivb);
+
+  s.integer(io.hirqPos);
+  s.integer(io.virqPos);
+
+  s.integer(io.romSpeed);
+
+  s.integer(io.rddiv);
+  s.integer(io.rdmpy);
+
+  s.integer(io.joy1);
+  s.integer(io.joy2);
+  s.integer(io.joy3);
+  s.integer(io.joy4);
+
+  s.integer(alu.mpyctr);
+  s.integer(alu.divctr);
+  s.integer(alu.shift);
+
+  for(uint n : range(8)) {
+    s.integer(channel[n].dmaEnabled);
+    s.integer(channel[n].hdmaEnabled);
+    s.integer(channel[n].direction);
+    s.integer(channel[n].indirect);
+    s.integer(channel[n].unused);
+    s.integer(channel[n].reverseTransfer);
+    s.integer(channel[n].fixedTransfer);
+    s.integer(channel[n].transferMode);
+    s.integer(channel[n].targetAddress);
+    s.integer(channel[n].sourceAddress);
+    s.integer(channel[n].sourceBank);
+    s.integer(channel[n].transferSize);
+    s.integer(channel[n].indirectBank);
+    s.integer(channel[n].hdmaAddress);
+    s.integer(channel[n].lineCounter);
+    s.integer(channel[n].unknown);
+    s.integer(channel[n].hdmaCompleted);
+    s.integer(channel[n].hdmaDoTransfer);
+  }
+
+  s.integer(pipe.valid);
+  s.integer(pipe.addr);
+  s.integer(pipe.data);
+}
diff --git a/higan/sfc-balanced/cpu/timing.cpp b/higan/sfc-balanced/cpu/timing.cpp
new file mode 100644
index 0000000..3c610ff
--- /dev/null
+++ b/higan/sfc-balanced/cpu/timing.cpp
@@ -0,0 +1,153 @@
+auto CPU::dmaCounter() const -> uint {
+  return (status.dmaCounter + hcounter()) & 7;
+}
+
+auto CPU::step(uint clocks) -> void {
+  status.irqLock = false;
+  uint ticks = clocks >> 1;
+  while(ticks--) {
+    tick();
+    if(hcounter() & 2) pollInterrupts();
+  }
+
+  Thread::step(clocks);
+  for(auto peripheral : peripherals) synchronize(*peripheral);
+
+  status.autoJoypadClock += clocks;
+  if(status.autoJoypadClock >= 256) {
+    status.autoJoypadClock -= 256;
+    stepAutoJoypadPoll();
+  }
+
+  if(!status.dramRefreshed && hcounter() >= status.dramRefreshPosition) {
+    status.dramRefreshed = true;
+    step(40);
+  }
+
+  #if defined(DEBUGGER)
+  synchronize(smp);
+  synchronize(ppu);
+  for(auto coprocessor : coprocessors) synchronize(*coprocessor);
+  #endif
+}
+
+//called by ppu.tick() when Hcounter=0
+auto CPU::scanline() -> void {
+  status.dmaCounter = (status.dmaCounter + status.lineClocks) & 7;
+  status.lineClocks = lineclocks();
+
+  //forcefully sync S-CPU to other processors, in case chips are not communicating
+  synchronize(smp);
+  synchronize(ppu);
+  for(auto coprocessor : coprocessors) synchronize(*coprocessor);
+
+  if(vcounter() == 0) {
+    //HDMA init triggers once every frame
+    status.hdmaInitPosition = (version == 1 ? 12 + 8 - dmaCounter() : 12 + dmaCounter());
+    status.hdmaInitTriggered = false;
+
+    status.autoJoypadCounter = 0;
+  }
+
+  //DRAM refresh occurs once every scanline
+  if(version == 2) status.dramRefreshPosition = 530 + 8 - dmaCounter();
+  status.dramRefreshed = false;
+
+  //HDMA triggers once every visible scanline
+  if(vcounter() < ppu.vdisp()) {
+    status.hdmaPosition = 1104;
+    status.hdmaTriggered = false;
+  }
+}
+
+auto CPU::aluEdge() -> void {
+  if(alu.mpyctr) {
+    alu.mpyctr--;
+    if(io.rddiv & 1) io.rdmpy += alu.shift;
+    io.rddiv >>= 1;
+    alu.shift <<= 1;
+  }
+
+  if(alu.divctr) {
+    alu.divctr--;
+    io.rddiv <<= 1;
+    alu.shift >>= 1;
+    if(io.rdmpy >= alu.shift) {
+      io.rdmpy -= alu.shift;
+      io.rddiv |= 1;
+    }
+  }
+}
+
+auto CPU::dmaEdge() -> void {
+  //H/DMA pending && DMA inactive?
+  //.. Run one full CPU cycle
+  //.. HDMA pending && HDMA enabled ? DMA sync + HDMA run
+  //.. DMA pending && DMA enabled ? DMA sync + DMA run
+  //.... HDMA during DMA && HDMA enabled ? DMA sync + HDMA run
+  //.. Run one bus CPU cycle
+  //.. CPU sync
+
+  if(status.dmaActive) {
+    if(status.hdmaPending) {
+      status.hdmaPending = false;
+      if(hdmaEnabledChannels()) {
+        if(!dmaEnabledChannels()) {
+          dmaStep(8 - dmaCounter());
+        }
+        status.hdmaMode == 0 ? hdmaInit() : hdmaRun();
+        if(!dmaEnabledChannels()) {
+          step(status.clockCount - (status.dmaClocks % status.clockCount));
+          status.dmaActive = false;
+        }
+      }
+    }
+
+    if(status.dmaPending) {
+      status.dmaPending = false;
+      if(dmaEnabledChannels()) {
+        dmaStep(8 - dmaCounter());
+        dmaRun();
+        step(status.clockCount - (status.dmaClocks % status.clockCount));
+        status.dmaActive = false;
+      }
+    }
+  }
+
+  if(!status.hdmaInitTriggered && hcounter() >= status.hdmaInitPosition) {
+    status.hdmaInitTriggered = true;
+    hdmaInitReset();
+    if(hdmaEnabledChannels()) {
+      status.hdmaPending = true;
+      status.hdmaMode = 0;
+    }
+  }
+
+  if(!status.hdmaTriggered && hcounter() >= status.hdmaPosition) {
+    status.hdmaTriggered = true;
+    if(hdmaActiveChannels()) {
+      status.hdmaPending = true;
+      status.hdmaMode = 1;
+    }
+  }
+
+  if(!status.dmaActive) {
+    if(status.dmaPending || status.hdmaPending) {
+      status.dmaClocks = 0;
+      status.dmaActive = true;
+    }
+  }
+}
+
+//used to test for NMI/IRQ, which can trigger on the edge of every opcode.
+//test one cycle early to simulate two-stage pipeline of x816 CPU.
+//
+//status.irq_lock is used to simulate hardware delay before interrupts can
+//trigger during certain events (immediately after DMA, writes to $4200, etc)
+auto CPU::lastCycle() -> void {
+  if(!status.irqLock) {
+    status.nmiPending |= nmiTest();
+    status.irqPending |= irqTest();
+    status.interruptPending = (status.nmiPending || status.irqPending);
+  }
+}
diff --git a/higan/sfc-balanced/debugger.hpp b/higan/sfc-balanced/debugger.hpp
new file mode 100644
index 0000000..0524715
--- /dev/null
+++ b/higan/sfc-balanced/debugger.hpp
@@ -0,0 +1,40 @@
+#pragma once
+
+namespace SuperFamicom {
+
+struct Debugger {
+  struct CPU {
+    function<void (uint24, uint8)> read;
+    function<void (uint24, uint8)> write;
+    function<void (uint24)> execute;
+    function<void ()> nmi;
+    function<void ()> irq;
+  } cpu;
+
+  struct SMP {
+    function<void (uint16, uint8)> read;
+    function<void (uint16, uint8)> write;
+    function<void (uint16)> execute;
+  } smp;
+
+  struct PPU {
+    struct VRAM {
+      function<void (uint17, uint8)> read;
+      function<void (uint17, uint8)> write;
+    } vram;
+
+    struct OAM {
+      function<void (uint10, uint8)> read;
+      function<void (uint10, uint8)> write;
+    } oam;
+
+    struct CGRAM {
+      function<void (uint9, uint8)> read;
+      function<void (uint9, uint8)> write;
+    } cgram;
+  } ppu;
+};
+
+extern Debugger debugger;
+
+}
diff --git a/higan/sfc-balanced/dsp/SPC_DSP.cpp b/higan/sfc-balanced/dsp/SPC_DSP.cpp
new file mode 100644
index 0000000..b012140
--- /dev/null
+++ b/higan/sfc-balanced/dsp/SPC_DSP.cpp
@@ -0,0 +1,1027 @@
+// snes_spc 0.9.0. http://www.slack.net/~ant/
+
+#include "SPC_DSP.h"
+
+#include "blargg_endian.h"
+#include <string.h>
+
+/* Copyright (C) 2007 Shay Green. This module is free software; you
+can redistribute it and/or modify it under the terms of the GNU Lesser
+General Public License as published by the Free Software Foundation; either
+version 2.1 of the License, or (at your option) any later version. This
+module is distributed in the hope that it will be useful, but WITHOUT ANY
+WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
+FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
+details. You should have received a copy of the GNU Lesser General Public
+License along with this module; if not, write to the Free Software Foundation,
+Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA */
+
+#include "blargg_source.h"
+
+#ifdef BLARGG_ENABLE_OPTIMIZER
+	#include BLARGG_ENABLE_OPTIMIZER
+#endif
+
+#if INT_MAX < 0x7FFFFFFF
+	#error "Requires that int type have at least 32 bits"
+#endif
+
+// TODO: add to blargg_endian.h
+#define GET_LE16SA( addr )      ((BOOST::int16_t) GET_LE16( addr ))
+#define GET_LE16A( addr )       GET_LE16( addr )
+#define SET_LE16A( addr, data ) SET_LE16( addr, data )
+
+static BOOST::uint8_t const initial_regs [SPC_DSP::register_count] =
+{
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE0,0x00,0x00,0x00,
+	0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00,
+
+//	0x45,0x8B,0x5A,0x9A,0xE4,0x82,0x1B,0x78,0x00,0x00,0xAA,0x96,0x89,0x0E,0xE0,0x80,
+//	0x2A,0x49,0x3D,0xBA,0x14,0xA0,0xAC,0xC5,0x00,0x00,0x51,0xBB,0x9C,0x4E,0x7B,0xFF,
+//	0xF4,0xFD,0x57,0x32,0x37,0xD9,0x42,0x22,0x00,0x00,0x5B,0x3C,0x9F,0x1B,0x87,0x9A,
+//	0x6F,0x27,0xAF,0x7B,0xE5,0x68,0x0A,0xD9,0x00,0x00,0x9A,0xC5,0x9C,0x4E,0x7B,0xFF,
+//	0xEA,0x21,0x78,0x4F,0xDD,0xED,0x24,0x14,0x00,0x00,0x77,0xB1,0xD1,0x36,0xC1,0x67,
+//	0x52,0x57,0x46,0x3D,0x59,0xF4,0x87,0xA4,0x00,0x00,0x7E,0x44,0x9C,0x4E,0x7B,0xFF,
+//	0x75,0xF5,0x06,0x97,0x10,0xC3,0x24,0xBB,0x00,0x00,0x7B,0x7A,0xE0,0x60,0x12,0x0F,
+//	0xF7,0x74,0x1C,0xE5,0x39,0x3D,0x73,0xC1,0x00,0x00,0x7A,0xB3,0xFF,0x4E,0x7B,0xFF
+};
+
+// if ( io < -32768 ) io = -32768;
+// if ( io >  32767 ) io =  32767;
+#define CLAMP16( io )\
+{\
+	if ( (int16_t) io != io )\
+		io = (io >> 31) ^ 0x7FFF;\
+}
+
+// Access global DSP register
+#define REG(n)      m.regs [r_##n]
+
+// Access voice DSP register
+#define VREG(r,n)   r [v_##n]
+
+#define WRITE_SAMPLES( l, r, out ) \
+{\
+	out [0] = l;\
+	out [1] = r;\
+	out += 2;\
+	if ( out >= m.out_end )\
+	{\
+		check( out == m.out_end );\
+		check( m.out_end != &m.extra [extra_size] || \
+			(m.extra <= m.out_begin && m.extra < &m.extra [extra_size]) );\
+		out       = m.extra;\
+		m.out_end = &m.extra [extra_size];\
+	}\
+}\
+
+void SPC_DSP::set_output( sample_t* out, int size )
+{
+	require( (size & 1) == 0 ); // must be even
+	if ( !out )
+	{
+		out  = m.extra;
+		size = extra_size;
+	}
+	m.out_begin = out;
+	m.out       = out;
+	m.out_end   = out + size;
+}
+
+// Volume registers and efb are signed! Easy to forget int8_t cast.
+// Prefixes are to avoid accidental use of locals with same names.
+
+// Gaussian interpolation
+
+static short const gauss [512] =
+{
+   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
+   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   1,   2,   2,   2,   2,   2,
+   2,   2,   3,   3,   3,   3,   3,   4,   4,   4,   4,   4,   5,   5,   5,   5,
+   6,   6,   6,   6,   7,   7,   7,   8,   8,   8,   9,   9,   9,  10,  10,  10,
+  11,  11,  11,  12,  12,  13,  13,  14,  14,  15,  15,  15,  16,  16,  17,  17,
+  18,  19,  19,  20,  20,  21,  21,  22,  23,  23,  24,  24,  25,  26,  27,  27,
+  28,  29,  29,  30,  31,  32,  32,  33,  34,  35,  36,  36,  37,  38,  39,  40,
+  41,  42,  43,  44,  45,  46,  47,  48,  49,  50,  51,  52,  53,  54,  55,  56,
+  58,  59,  60,  61,  62,  64,  65,  66,  67,  69,  70,  71,  73,  74,  76,  77,
+  78,  80,  81,  83,  84,  86,  87,  89,  90,  92,  94,  95,  97,  99, 100, 102,
+ 104, 106, 107, 109, 111, 113, 115, 117, 118, 120, 122, 124, 126, 128, 130, 132,
+ 134, 137, 139, 141, 143, 145, 147, 150, 152, 154, 156, 159, 161, 163, 166, 168,
+ 171, 173, 175, 178, 180, 183, 186, 188, 191, 193, 196, 199, 201, 204, 207, 210,
+ 212, 215, 218, 221, 224, 227, 230, 233, 236, 239, 242, 245, 248, 251, 254, 257,
+ 260, 263, 267, 270, 273, 276, 280, 283, 286, 290, 293, 297, 300, 304, 307, 311,
+ 314, 318, 321, 325, 328, 332, 336, 339, 343, 347, 351, 354, 358, 362, 366, 370,
+ 374, 378, 381, 385, 389, 393, 397, 401, 405, 410, 414, 418, 422, 426, 430, 434,
+ 439, 443, 447, 451, 456, 460, 464, 469, 473, 477, 482, 486, 491, 495, 499, 504,
+ 508, 513, 517, 522, 527, 531, 536, 540, 545, 550, 554, 559, 563, 568, 573, 577,
+ 582, 587, 592, 596, 601, 606, 611, 615, 620, 625, 630, 635, 640, 644, 649, 654,
+ 659, 664, 669, 674, 678, 683, 688, 693, 698, 703, 708, 713, 718, 723, 728, 732,
+ 737, 742, 747, 752, 757, 762, 767, 772, 777, 782, 787, 792, 797, 802, 806, 811,
+ 816, 821, 826, 831, 836, 841, 846, 851, 855, 860, 865, 870, 875, 880, 884, 889,
+ 894, 899, 904, 908, 913, 918, 923, 927, 932, 937, 941, 946, 951, 955, 960, 965,
+ 969, 974, 978, 983, 988, 992, 997,1001,1005,1010,1014,1019,1023,1027,1032,1036,
+1040,1045,1049,1053,1057,1061,1066,1070,1074,1078,1082,1086,1090,1094,1098,1102,
+1106,1109,1113,1117,1121,1125,1128,1132,1136,1139,1143,1146,1150,1153,1157,1160,
+1164,1167,1170,1174,1177,1180,1183,1186,1190,1193,1196,1199,1202,1205,1207,1210,
+1213,1216,1219,1221,1224,1227,1229,1232,1234,1237,1239,1241,1244,1246,1248,1251,
+1253,1255,1257,1259,1261,1263,1265,1267,1269,1270,1272,1274,1275,1277,1279,1280,
+1282,1283,1284,1286,1287,1288,1290,1291,1292,1293,1294,1295,1296,1297,1297,1298,
+1299,1300,1300,1301,1302,1302,1303,1303,1303,1304,1304,1304,1304,1304,1305,1305,
+};
+
+inline int SPC_DSP::interpolate( voice_t const* v )
+{
+	// Make pointers into gaussian based on fractional position between samples
+	int offset = v->interp_pos >> 4 & 0xFF;
+	short const* fwd = gauss + 255 - offset;
+	short const* rev = gauss       + offset; // mirror left half of gaussian
+	
+	int const* in = &v->buf [(v->interp_pos >> 12) + v->buf_pos];
+	int out;
+	out  = (fwd [  0] * in [0]) >> 11;
+	out += (fwd [256] * in [1]) >> 11;
+	out += (rev [256] * in [2]) >> 11;
+	out = (int16_t) out;
+	out += (rev [  0] * in [3]) >> 11;
+	
+	CLAMP16( out );
+	out &= ~1;
+	return out;
+}
+
+
+//// Counters
+
+int const simple_counter_range = 2048 * 5 * 3; // 30720
+
+static unsigned const counter_rates [32] =
+{
+   simple_counter_range + 1, // never fires
+          2048, 1536,
+	1280, 1024,  768,
+	 640,  512,  384,
+	 320,  256,  192,
+	 160,  128,   96,
+	  80,   64,   48,
+	  40,   32,   24,
+	  20,   16,   12,
+	  10,    8,    6,
+	   5,    4,    3,
+	         2,
+	         1
+};
+
+static unsigned const counter_offsets [32] =
+{
+	  1, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	536, 0, 1040,
+	     0,
+	     0
+};
+
+inline void SPC_DSP::init_counter()
+{
+	m.counter = 0;
+}
+
+inline void SPC_DSP::run_counters()
+{
+	if ( --m.counter < 0 )
+		m.counter = simple_counter_range - 1;
+}
+
+inline unsigned SPC_DSP::read_counter( int rate )
+{
+	return ((unsigned) m.counter + counter_offsets [rate]) % counter_rates [rate];
+}
+
+
+//// Envelope
+
+inline void SPC_DSP::run_envelope( voice_t* const v )
+{
+	int env = v->env;
+	if ( v->env_mode == env_release ) // 60%
+	{
+		if ( (env -= 0x8) < 0 )
+			env = 0;
+		v->env = env;
+	}
+	else
+	{
+		int rate;
+		int env_data = VREG(v->regs,adsr1);
+		if ( m.t_adsr0 & 0x80 ) // 99% ADSR
+		{
+			if ( v->env_mode >= env_decay ) // 99%
+			{
+				env--;
+				env -= env >> 8;
+				rate = env_data & 0x1F;
+				if ( v->env_mode == env_decay ) // 1%
+					rate = (m.t_adsr0 >> 3 & 0x0E) + 0x10;
+			}
+			else // env_attack
+			{
+				rate = (m.t_adsr0 & 0x0F) * 2 + 1;
+				env += rate < 31 ? 0x20 : 0x400;
+			}
+		}
+		else // GAIN
+		{
+			int mode;
+			env_data = VREG(v->regs,gain);
+			mode = env_data >> 5;
+			if ( mode < 4 ) // direct
+			{
+				env = env_data * 0x10;
+				rate = 31;
+			}
+			else
+			{
+				rate = env_data & 0x1F;
+				if ( mode == 4 ) // 4: linear decrease
+				{
+					env -= 0x20;
+				}
+				else if ( mode < 6 ) // 5: exponential decrease
+				{
+					env--;
+					env -= env >> 8;
+				}
+				else // 6,7: linear increase
+				{
+					env += 0x20;
+					if ( mode > 6 && (unsigned) v->hidden_env >= 0x600 )
+						env += 0x8 - 0x20; // 7: two-slope linear increase
+				}
+			}
+		}
+		
+		// Sustain level
+		if ( (env >> 8) == (env_data >> 5) && v->env_mode == env_decay )
+			v->env_mode = env_sustain;
+		
+		v->hidden_env = env;
+		
+		// unsigned cast because linear decrease going negative also triggers this
+		if ( (unsigned) env > 0x7FF )
+		{
+			env = (env < 0 ? 0 : 0x7FF);
+			if ( v->env_mode == env_attack )
+				v->env_mode = env_decay;
+		}
+		
+		if ( !read_counter( rate ) )
+			v->env = env; // nothing else is controlled by the counter
+	}
+}
+
+
+//// BRR Decoding
+
+inline void SPC_DSP::decode_brr( voice_t* v )
+{
+	// Arrange the four input nybbles in 0xABCD order for easy decoding
+	int nybbles = m.t_brr_byte * 0x100 + m.ram [(v->brr_addr + v->brr_offset + 1) & 0xFFFF];
+	
+	int const header = m.t_brr_header;
+	
+	// Write to next four samples in circular buffer
+	int* pos = &v->buf [v->buf_pos];
+	int* end;
+	if ( (v->buf_pos += 4) >= brr_buf_size )
+		v->buf_pos = 0;
+	
+	// Decode four samples
+	for ( end = pos + 4; pos < end; pos++, nybbles <<= 4 )
+	{
+		// Extract nybble and sign-extend
+		int s = (int16_t) nybbles >> 12;
+		
+		// Shift sample based on header
+		int const shift = header >> 4;
+		s = (s << shift) >> 1;
+		if ( shift >= 0xD ) // handle invalid range
+			s = (s >> 25) << 11; // same as: s = (s < 0 ? -0x800 : 0)
+		
+		// Apply IIR filter (8 is the most commonly used)
+		int const filter = header & 0x0C;
+		int const p1 = pos [brr_buf_size - 1];
+		int const p2 = pos [brr_buf_size - 2] >> 1;
+		if ( filter >= 8 )
+		{
+			s += p1;
+			s -= p2;
+			if ( filter == 8 ) // s += p1 * 0.953125 - p2 * 0.46875
+			{
+				s += p2 >> 4;
+				s += (p1 * -3) >> 6;
+			}
+			else // s += p1 * 0.8984375 - p2 * 0.40625
+			{
+				s += (p1 * -13) >> 7;
+				s += (p2 * 3) >> 4;
+			}
+		}
+		else if ( filter ) // s += p1 * 0.46875
+		{
+			s += p1 >> 1;
+			s += (-p1) >> 5;
+		}
+		
+		// Adjust and write sample
+		CLAMP16( s );
+		s = (int16_t) (s * 2);
+		pos [brr_buf_size] = pos [0] = s; // second copy simplifies wrap-around
+	}
+}
+
+
+//// Misc
+
+#define MISC_CLOCK( n ) inline void SPC_DSP::misc_##n()
+
+MISC_CLOCK( 27 )
+{
+	m.t_pmon = REG(pmon) & 0xFE; // voice 0 doesn't support PMON
+}
+MISC_CLOCK( 28 )
+{
+	m.t_non = REG(non);
+	m.t_eon = REG(eon);
+	m.t_dir = REG(dir);
+}
+MISC_CLOCK( 29 )
+{
+	if ( (m.every_other_sample ^= 1) != 0 )
+		m.new_kon &= ~m.kon; // clears KON 63 clocks after it was last read
+}
+MISC_CLOCK( 30 )
+{
+	if ( m.every_other_sample )
+	{
+		m.kon    = m.new_kon;
+		m.t_koff = REG(koff) | m.mute_mask; 
+	}
+	
+	run_counters();
+	
+	// Noise
+	if ( !read_counter( REG(flg) & 0x1F ) )
+	{
+		int feedback = (m.noise << 13) ^ (m.noise << 14);
+		m.noise = (feedback & 0x4000) ^ (m.noise >> 1);
+	}
+}
+
+
+//// Voices
+
+#define VOICE_CLOCK( n ) void SPC_DSP::voice_##n( voice_t* const v )
+
+inline VOICE_CLOCK( V1 )
+{
+	m.t_dir_addr = m.t_dir * 0x100 + m.t_srcn * 4;
+	m.t_srcn = VREG(v->regs,srcn);
+}
+inline VOICE_CLOCK( V2 )
+{
+	// Read sample pointer (ignored if not needed)
+	uint8_t const* entry = &m.ram [m.t_dir_addr];
+	if ( !v->kon_delay )
+		entry += 2;
+	m.t_brr_next_addr = GET_LE16A( entry );
+	
+	m.t_adsr0 = VREG(v->regs,adsr0);
+	
+	// Read pitch, spread over two clocks
+	m.t_pitch = VREG(v->regs,pitchl);
+}
+inline VOICE_CLOCK( V3a )
+{
+	m.t_pitch += (VREG(v->regs,pitchh) & 0x3F) << 8;
+}
+inline VOICE_CLOCK( V3b )
+{
+	// Read BRR header and byte
+	m.t_brr_byte   = m.ram [(v->brr_addr + v->brr_offset) & 0xFFFF];
+	m.t_brr_header = m.ram [v->brr_addr]; // brr_addr doesn't need masking
+}
+VOICE_CLOCK( V3c )
+{
+	// Pitch modulation using previous voice's output
+	if ( m.t_pmon & v->vbit )
+		m.t_pitch += ((m.t_output >> 5) * m.t_pitch) >> 10;
+	
+	if ( v->kon_delay )
+	{
+		// Get ready to start BRR decoding on next sample
+		if ( v->kon_delay == 5 )
+		{
+			v->brr_addr    = m.t_brr_next_addr;
+			v->brr_offset  = 1;
+			v->buf_pos     = 0;
+			m.t_brr_header = 0; // header is ignored on this sample
+			m.kon_check    = true;
+		}
+		
+		// Envelope is never run during KON
+		v->env        = 0;
+		v->hidden_env = 0;
+		
+		// Disable BRR decoding until last three samples
+		v->interp_pos = 0;
+		if ( --v->kon_delay & 3 )
+			v->interp_pos = 0x4000;
+		
+		// Pitch is never added during KON
+		m.t_pitch = 0;
+	}
+	
+	// Gaussian interpolation
+	{
+		int output = interpolate( v );
+		
+		// Noise
+		if ( m.t_non & v->vbit )
+			output = (int16_t) (m.noise * 2);
+		
+		// Apply envelope
+		m.t_output = (output * v->env) >> 11 & ~1;
+		v->t_envx_out = (uint8_t) (v->env >> 4);
+	}
+	
+	// Immediate silence due to end of sample or soft reset
+	if ( REG(flg) & 0x80 || (m.t_brr_header & 3) == 1 )
+	{
+		v->env_mode = env_release;
+		v->env      = 0;
+	}
+	
+	if ( m.every_other_sample )
+	{
+		// KOFF
+		if ( m.t_koff & v->vbit )
+			v->env_mode = env_release;
+		
+		// KON
+		if ( m.kon & v->vbit )
+		{
+			v->kon_delay = 5;
+			v->env_mode  = env_attack;
+		}
+	}
+	
+	// Run envelope for next sample
+	if ( !v->kon_delay )
+		run_envelope( v );
+}
+inline void SPC_DSP::voice_output( voice_t const* v, int ch )
+{
+	// Apply left/right volume
+	int amp = (m.t_output * (int8_t) VREG(v->regs,voll + ch)) >> 7;
+	
+	// Add to output total
+	m.t_main_out [ch] += amp;
+	CLAMP16( m.t_main_out [ch] );
+	
+	// Optionally add to echo total
+	if ( m.t_eon & v->vbit )
+	{
+		m.t_echo_out [ch] += amp;
+		CLAMP16( m.t_echo_out [ch] );
+	}
+}
+VOICE_CLOCK( V4 )
+{
+	// Decode BRR
+	m.t_looped = 0;
+	if ( v->interp_pos >= 0x4000 )
+	{
+		decode_brr( v );
+		
+		if ( (v->brr_offset += 2) >= brr_block_size )
+		{
+			// Start decoding next BRR block
+			assert( v->brr_offset == brr_block_size );
+			v->brr_addr = (v->brr_addr + brr_block_size) & 0xFFFF;
+			if ( m.t_brr_header & 1 )
+			{
+				v->brr_addr = m.t_brr_next_addr;
+				m.t_looped = v->vbit;
+			}
+			v->brr_offset = 1;
+		}
+	}
+	
+	// Apply pitch
+	v->interp_pos = (v->interp_pos & 0x3FFF) + m.t_pitch;
+	
+	// Keep from getting too far ahead (when using pitch modulation)
+	if ( v->interp_pos > 0x7FFF )
+		v->interp_pos = 0x7FFF;
+	
+	// Output left
+	voice_output( v, 0 );
+}
+inline VOICE_CLOCK( V5 )
+{
+	// Output right
+	voice_output( v, 1 );
+	
+	// ENDX, OUTX, and ENVX won't update if you wrote to them 1-2 clocks earlier
+	int endx_buf = REG(endx) | m.t_looped;
+	
+	// Clear bit in ENDX if KON just began
+	if ( v->kon_delay == 5 )
+		endx_buf &= ~v->vbit;
+	m.endx_buf = (uint8_t) endx_buf;
+}
+inline VOICE_CLOCK( V6 )
+{
+	(void) v; // avoid compiler warning about unused v
+	m.outx_buf = (uint8_t) (m.t_output >> 8);
+}
+inline VOICE_CLOCK( V7 )
+{
+	// Update ENDX
+	REG(endx) = m.endx_buf;
+	
+	m.envx_buf = v->t_envx_out;
+}
+inline VOICE_CLOCK( V8 )
+{
+	// Update OUTX
+	VREG(v->regs,outx) = m.outx_buf;
+}
+inline VOICE_CLOCK( V9 )
+{
+	// Update ENVX
+	VREG(v->regs,envx) = m.envx_buf;
+}
+
+// Most voices do all these in one clock, so make a handy composite
+inline VOICE_CLOCK( V3 )
+{
+	voice_V3a( v );
+	voice_V3b( v );
+	voice_V3c( v );
+}
+
+// Common combinations of voice steps on different voices. This greatly reduces
+// code size and allows everything to be inlined in these functions.
+VOICE_CLOCK(V7_V4_V1) { voice_V7(v); voice_V1(v+3); voice_V4(v+1); }
+VOICE_CLOCK(V8_V5_V2) { voice_V8(v); voice_V5(v+1); voice_V2(v+2); }
+VOICE_CLOCK(V9_V6_V3) { voice_V9(v); voice_V6(v+1); voice_V3(v+2); }
+
+
+//// Echo
+
+// Current echo buffer pointer for left/right channel
+#define ECHO_PTR( ch )      (&m.ram [m.t_echo_ptr + ch * 2])
+
+// Sample in echo history buffer, where 0 is the oldest
+#define ECHO_FIR( i )       (m.echo_hist_pos [i])
+
+// Calculate FIR point for left/right channel
+#define CALC_FIR( i, ch )   ((ECHO_FIR( i + 1 ) [ch] * (int8_t) REG(fir + i * 0x10)) >> 6)
+
+#define ECHO_CLOCK( n ) inline void SPC_DSP::echo_##n()
+
+inline void SPC_DSP::echo_read( int ch )
+{
+	int s = GET_LE16SA( ECHO_PTR( ch ) );
+	// second copy simplifies wrap-around handling
+	ECHO_FIR( 0 ) [ch] = ECHO_FIR( 8 ) [ch] = s >> 1;
+}
+
+ECHO_CLOCK( 22 )
+{
+	// History
+	if ( ++m.echo_hist_pos >= &m.echo_hist [echo_hist_size] )
+		m.echo_hist_pos = m.echo_hist;
+	
+	m.t_echo_ptr = (m.t_esa * 0x100 + m.echo_offset) & 0xFFFF;
+	echo_read( 0 );
+	
+	// FIR (using l and r temporaries below helps compiler optimize)
+	int l = CALC_FIR( 0, 0 );
+	int r = CALC_FIR( 0, 1 );
+	
+	m.t_echo_in [0] = l;
+	m.t_echo_in [1] = r;
+}
+ECHO_CLOCK( 23 )
+{
+	int l = CALC_FIR( 1, 0 ) + CALC_FIR( 2, 0 );
+	int r = CALC_FIR( 1, 1 ) + CALC_FIR( 2, 1 );
+	
+	m.t_echo_in [0] += l;
+	m.t_echo_in [1] += r;
+	
+	echo_read( 1 );
+}
+ECHO_CLOCK( 24 )
+{
+	int l = CALC_FIR( 3, 0 ) + CALC_FIR( 4, 0 ) + CALC_FIR( 5, 0 );
+	int r = CALC_FIR( 3, 1 ) + CALC_FIR( 4, 1 ) + CALC_FIR( 5, 1 );
+	
+	m.t_echo_in [0] += l;
+	m.t_echo_in [1] += r;
+}
+ECHO_CLOCK( 25 )
+{
+	int l = m.t_echo_in [0] + CALC_FIR( 6, 0 );
+	int r = m.t_echo_in [1] + CALC_FIR( 6, 1 );
+	
+	l = (int16_t) l;
+	r = (int16_t) r;
+	
+	l += (int16_t) CALC_FIR( 7, 0 );
+	r += (int16_t) CALC_FIR( 7, 1 );
+	
+	CLAMP16( l );
+	CLAMP16( r );
+	
+	m.t_echo_in [0] = l & ~1;
+	m.t_echo_in [1] = r & ~1;
+}
+inline int SPC_DSP::echo_output( int ch )
+{
+	int out = (int16_t) ((m.t_main_out [ch] * (int8_t) REG(mvoll + ch * 0x10)) >> 7) +
+			(int16_t) ((m.t_echo_in [ch] * (int8_t) REG(evoll + ch * 0x10)) >> 7);
+	CLAMP16( out );
+	return out;
+}
+ECHO_CLOCK( 26 )
+{
+	// Left output volumes
+	// (save sample for next clock so we can output both together)
+	m.t_main_out [0] = echo_output( 0 );
+	
+	// Echo feedback
+	int l = m.t_echo_out [0] + (int16_t) ((m.t_echo_in [0] * (int8_t) REG(efb)) >> 7);
+	int r = m.t_echo_out [1] + (int16_t) ((m.t_echo_in [1] * (int8_t) REG(efb)) >> 7);
+	
+	CLAMP16( l );
+	CLAMP16( r );
+	
+	m.t_echo_out [0] = l & ~1;
+	m.t_echo_out [1] = r & ~1;
+}
+ECHO_CLOCK( 27 )
+{
+	// Output
+	int l = m.t_main_out [0];
+	int r = echo_output( 1 );
+	m.t_main_out [0] = 0;
+	m.t_main_out [1] = 0;
+	
+	// TODO: global muting isn't this simple (turns DAC on and off
+	// or something, causing small ~37-sample pulse when first muted)
+	if ( REG(flg) & 0x40 )
+	{
+		l = 0;
+		r = 0;
+	}
+	
+	// Output sample to DAC
+	#ifdef SPC_DSP_OUT_HOOK
+		SPC_DSP_OUT_HOOK( l, r );
+	#else
+		sample_t* out = m.out;
+		WRITE_SAMPLES( l, r, out );
+		m.out = out;
+	#endif
+}
+ECHO_CLOCK( 28 )
+{
+	m.t_echo_enabled = REG(flg);
+}
+inline void SPC_DSP::echo_write( int ch )
+{
+	if ( !(m.t_echo_enabled & 0x20) )
+		SET_LE16A( ECHO_PTR( ch ), m.t_echo_out [ch] );
+	m.t_echo_out [ch] = 0;
+}
+ECHO_CLOCK( 29 )
+{
+	m.t_esa = REG(esa);
+	
+	if ( !m.echo_offset )
+		m.echo_length = (REG(edl) & 0x0F) * 0x800;
+	
+	m.echo_offset += 4;
+	if ( m.echo_offset >= m.echo_length )
+		m.echo_offset = 0;
+	
+	// Write left echo
+	echo_write( 0 );
+	
+	m.t_echo_enabled = REG(flg);
+}
+ECHO_CLOCK( 30 )
+{
+	// Write right echo
+	echo_write( 1 );
+}
+
+
+//// Timing
+
+// Execute clock for a particular voice
+#define V( clock, voice )   voice_##clock( &m.voices [voice] );
+
+/* The most common sequence of clocks uses composite operations
+for efficiency. For example, the following are equivalent to the
+individual steps on the right:
+
+V(V7_V4_V1,2) -> V(V7,2) V(V4,3) V(V1,5)
+V(V8_V5_V2,2) -> V(V8,2) V(V5,3) V(V2,4)
+V(V9_V6_V3,2) -> V(V9,2) V(V6,3) V(V3,4) */
+
+// Voice      0      1      2      3      4      5      6      7
+#define GEN_DSP_TIMING \
+PHASE( 0)  V(V5,0)V(V2,1)\
+PHASE( 1)  V(V6,0)V(V3,1)\
+PHASE( 2)  V(V7_V4_V1,0)\
+PHASE( 3)  V(V8_V5_V2,0)\
+PHASE( 4)  V(V9_V6_V3,0)\
+PHASE( 5)         V(V7_V4_V1,1)\
+PHASE( 6)         V(V8_V5_V2,1)\
+PHASE( 7)         V(V9_V6_V3,1)\
+PHASE( 8)                V(V7_V4_V1,2)\
+PHASE( 9)                V(V8_V5_V2,2)\
+PHASE(10)                V(V9_V6_V3,2)\
+PHASE(11)                       V(V7_V4_V1,3)\
+PHASE(12)                       V(V8_V5_V2,3)\
+PHASE(13)                       V(V9_V6_V3,3)\
+PHASE(14)                              V(V7_V4_V1,4)\
+PHASE(15)                              V(V8_V5_V2,4)\
+PHASE(16)                              V(V9_V6_V3,4)\
+PHASE(17)  V(V1,0)                            V(V7,5)V(V4,6)\
+PHASE(18)                                     V(V8_V5_V2,5)\
+PHASE(19)                                     V(V9_V6_V3,5)\
+PHASE(20)         V(V1,1)                            V(V7,6)V(V4,7)\
+PHASE(21)                                            V(V8,6)V(V5,7)  V(V2,0)  /* t_brr_next_addr order dependency */\
+PHASE(22)  V(V3a,0)                                  V(V9,6)V(V6,7)  echo_22();\
+PHASE(23)                                                   V(V7,7)  echo_23();\
+PHASE(24)                                                   V(V8,7)  echo_24();\
+PHASE(25)  V(V3b,0)                                         V(V9,7)  echo_25();\
+PHASE(26)                                                            echo_26();\
+PHASE(27) misc_27();                                                 echo_27();\
+PHASE(28) misc_28();                                                 echo_28();\
+PHASE(29) misc_29();                                                 echo_29();\
+PHASE(30) misc_30();V(V3c,0)                                         echo_30();\
+PHASE(31)  V(V4,0)       V(V1,2)\
+
+#if !SPC_DSP_CUSTOM_RUN
+
+void SPC_DSP::run( int clocks_remain )
+{
+	require( clocks_remain > 0 );
+	
+	int const phase = m.phase;
+	m.phase = (phase + clocks_remain) & 31;
+	switch ( phase )
+	{
+	loop:
+	
+		#define PHASE( n ) if ( n && !--clocks_remain ) break; case n:
+		GEN_DSP_TIMING
+		#undef PHASE
+	
+		if ( --clocks_remain )
+			goto loop;
+	}
+}
+
+#endif
+
+
+//// Setup
+
+void SPC_DSP::init( void* ram_64k )
+{
+	m.ram = (uint8_t*) ram_64k;
+	mute_voices( 0 );
+	disable_surround( false );
+	set_output( 0, 0 );
+	reset();
+	
+	#ifndef NDEBUG
+		// be sure this sign-extends
+		assert( (int16_t) 0x8000 == -0x8000 );
+		
+		// be sure right shift preserves sign
+		assert( (-1 >> 1) == -1 );
+		
+		// check clamp macro
+		int i;
+		i = +0x8000; CLAMP16( i ); assert( i == +0x7FFF );
+		i = -0x8001; CLAMP16( i ); assert( i == -0x8000 );
+		
+		blargg_verify_byte_order();
+	#endif
+}
+
+void SPC_DSP::soft_reset_common()
+{
+	require( m.ram ); // init() must have been called already
+	
+	m.noise              = 0x4000;
+	m.echo_hist_pos      = m.echo_hist;
+	m.every_other_sample = 1;
+	m.echo_offset        = 0;
+	m.phase              = 0;
+	
+	init_counter();
+}
+
+void SPC_DSP::soft_reset()
+{
+	REG(flg) = 0xE0;
+	soft_reset_common();
+}
+
+void SPC_DSP::load( uint8_t const regs [register_count] )
+{
+	memcpy( m.regs, regs, sizeof m.regs );
+	memset( &m.regs [register_count], 0, offsetof (state_t,ram) - register_count );
+	
+	// Internal state
+	for ( int i = voice_count; --i >= 0; )
+	{
+		voice_t* v = &m.voices [i];
+		v->brr_offset = 1;
+		v->vbit       = 1 << i;
+		v->regs       = &m.regs [i * 0x10];
+	}
+	m.new_kon = REG(kon);
+	m.t_dir   = REG(dir);
+	m.t_esa   = REG(esa);
+	
+	soft_reset_common();
+}
+
+void SPC_DSP::reset() { load( initial_regs ); }
+
+
+//// State save/load
+
+#if !SPC_NO_COPY_STATE_FUNCS
+
+void SPC_State_Copier::copy( void* state, size_t size )
+{
+	func( buf, state, size );
+}
+
+int SPC_State_Copier::copy_int( int state, int size )
+{
+	BOOST::uint8_t s [2];
+	SET_LE16( s, state );
+	func( buf, &s, size );
+	return GET_LE16( s );
+}
+
+void SPC_State_Copier::skip( int count )
+{
+	if ( count > 0 )
+	{
+		char temp [64];
+		memset( temp, 0, sizeof temp );
+		do
+		{
+			int n = sizeof temp;
+			if ( n > count )
+				n = count;
+			count -= n;
+			func( buf, temp, n );
+		}
+		while ( count );
+	}
+}
+
+void SPC_State_Copier::extra()
+{
+	int n = 0;
+	SPC_State_Copier& copier = *this;
+	SPC_COPY( uint8_t, n );
+	skip( n );
+}
+
+void SPC_DSP::copy_state( unsigned char** io, copy_func_t copy )
+{
+	SPC_State_Copier copier( io, copy );
+	
+	// DSP registers
+	copier.copy( m.regs, register_count );
+	
+	// Internal state
+	
+	// Voices
+	int i;
+	for ( i = 0; i < voice_count; i++ )
+	{
+		voice_t* v = &m.voices [i];
+		
+		// BRR buffer
+		int i;
+		for ( i = 0; i < brr_buf_size; i++ )
+		{
+			int s = v->buf [i];
+			SPC_COPY(  int16_t, s );
+			v->buf [i] = v->buf [i + brr_buf_size] = s;
+		}
+		
+		SPC_COPY( uint16_t, v->interp_pos );
+		SPC_COPY( uint16_t, v->brr_addr );
+		SPC_COPY( uint16_t, v->env );
+		SPC_COPY(  int16_t, v->hidden_env );
+		SPC_COPY(  uint8_t, v->buf_pos );
+		SPC_COPY(  uint8_t, v->brr_offset );
+		SPC_COPY(  uint8_t, v->kon_delay );
+		{
+			int m = v->env_mode;
+			SPC_COPY(  uint8_t, m );
+			v->env_mode = (enum env_mode_t) m;
+		}
+		SPC_COPY(  uint8_t, v->t_envx_out );
+		
+		copier.extra();
+	}
+	
+	// Echo history
+	for ( i = 0; i < echo_hist_size; i++ )
+	{
+		int j;
+		for ( j = 0; j < 2; j++ )
+		{
+			int s = m.echo_hist_pos [i] [j];
+			SPC_COPY( int16_t, s );
+			m.echo_hist [i] [j] = s; // write back at offset 0
+		}
+	}
+	m.echo_hist_pos = m.echo_hist;
+	memcpy( &m.echo_hist [echo_hist_size], m.echo_hist, echo_hist_size * sizeof m.echo_hist [0] );
+	
+	// Misc
+	SPC_COPY(  uint8_t, m.every_other_sample );
+	SPC_COPY(  uint8_t, m.kon );
+	
+	SPC_COPY( uint16_t, m.noise );
+	SPC_COPY( uint16_t, m.counter );
+	SPC_COPY( uint16_t, m.echo_offset );
+	SPC_COPY( uint16_t, m.echo_length );
+	SPC_COPY(  uint8_t, m.phase );
+	
+	SPC_COPY(  uint8_t, m.new_kon );
+	SPC_COPY(  uint8_t, m.endx_buf );
+	SPC_COPY(  uint8_t, m.envx_buf );
+	SPC_COPY(  uint8_t, m.outx_buf );
+	
+	SPC_COPY(  uint8_t, m.t_pmon );
+	SPC_COPY(  uint8_t, m.t_non );
+	SPC_COPY(  uint8_t, m.t_eon );
+	SPC_COPY(  uint8_t, m.t_dir );
+	SPC_COPY(  uint8_t, m.t_koff );
+	
+	SPC_COPY( uint16_t, m.t_brr_next_addr );
+	SPC_COPY(  uint8_t, m.t_adsr0 );
+	SPC_COPY(  uint8_t, m.t_brr_header );
+	SPC_COPY(  uint8_t, m.t_brr_byte );
+	SPC_COPY(  uint8_t, m.t_srcn );
+	SPC_COPY(  uint8_t, m.t_esa );
+	SPC_COPY(  uint8_t, m.t_echo_enabled );
+	
+	SPC_COPY(  int16_t, m.t_main_out [0] );
+	SPC_COPY(  int16_t, m.t_main_out [1] );
+	SPC_COPY(  int16_t, m.t_echo_out [0] );
+	SPC_COPY(  int16_t, m.t_echo_out [1] );
+	SPC_COPY(  int16_t, m.t_echo_in  [0] );
+	SPC_COPY(  int16_t, m.t_echo_in  [1] );
+	
+	SPC_COPY( uint16_t, m.t_dir_addr );
+	SPC_COPY( uint16_t, m.t_pitch );
+	SPC_COPY(  int16_t, m.t_output );
+	SPC_COPY( uint16_t, m.t_echo_ptr );
+	SPC_COPY(  uint8_t, m.t_looped );
+	
+	copier.extra();
+}
+#endif
diff --git a/higan/sfc-balanced/dsp/SPC_DSP.h b/higan/sfc-balanced/dsp/SPC_DSP.h
new file mode 100644
index 0000000..62095a5
--- /dev/null
+++ b/higan/sfc-balanced/dsp/SPC_DSP.h
@@ -0,0 +1,307 @@
+// Highly accurate SNES SPC-700 DSP emulator
+
+// snes_spc 0.9.0
+#ifndef SPC_DSP_H
+#define SPC_DSP_H
+
+#include "blargg_common.h"
+
+extern "C" { typedef void (*dsp_copy_func_t)( unsigned char** io, void* state, size_t ); }
+
+class SPC_DSP {
+public:
+	typedef BOOST::uint8_t uint8_t;
+	
+// Setup
+
+	// Initializes DSP and has it use the 64K RAM provided
+	void init( void* ram_64k );
+
+	// Sets destination for output samples. If out is NULL or out_size is 0,
+	// doesn't generate any.
+	typedef short sample_t;
+	void set_output( sample_t* out, int out_size );
+
+	// Number of samples written to output since it was last set, always
+	// a multiple of 2. Undefined if more samples were generated than
+	// output buffer could hold.
+	int sample_count() const;
+
+// Emulation
+
+	// Resets DSP to power-on state
+	void reset();
+
+	// Emulates pressing reset switch on SNES
+	void soft_reset();
+	
+	// Reads/writes DSP registers. For accuracy, you must first call run()
+	// to catch the DSP up to present.
+	int  read ( int addr ) const;
+	void write( int addr, int data );
+
+	// Runs DSP for specified number of clocks (~1024000 per second). Every 32 clocks
+	// a pair of samples is be generated.
+	void run( int clock_count );
+	
+// Sound control
+
+	// Mutes voices corresponding to non-zero bits in mask (issues repeated KOFF events).
+	// Reduces emulation accuracy.
+	enum { voice_count = 8 };
+	void mute_voices( int mask );
+
+// State
+	
+	// Resets DSP and uses supplied values to initialize registers
+	enum { register_count = 128 };
+	void load( uint8_t const regs [register_count] );
+
+	// Saves/loads exact emulator state
+	enum { state_size = 640 }; // maximum space needed when saving
+	typedef dsp_copy_func_t copy_func_t;
+	void copy_state( unsigned char** io, copy_func_t );
+
+	// Returns non-zero if new key-on events occurred since last call
+	bool check_kon();
+	
+// DSP register addresses
+
+	// Global registers
+	enum {
+	    r_mvoll = 0x0C, r_mvolr = 0x1C,
+	    r_evoll = 0x2C, r_evolr = 0x3C,
+	    r_kon   = 0x4C, r_koff  = 0x5C,
+	    r_flg   = 0x6C, r_endx  = 0x7C,
+	    r_efb   = 0x0D, r_pmon  = 0x2D,
+	    r_non   = 0x3D, r_eon   = 0x4D,
+	    r_dir   = 0x5D, r_esa   = 0x6D,
+	    r_edl   = 0x7D,
+	    r_fir   = 0x0F // 8 coefficients at 0x0F, 0x1F ... 0x7F
+	};
+
+	// Voice registers
+	enum {
+		v_voll   = 0x00, v_volr   = 0x01,
+		v_pitchl = 0x02, v_pitchh = 0x03,
+		v_srcn   = 0x04, v_adsr0  = 0x05,
+		v_adsr1  = 0x06, v_gain   = 0x07,
+		v_envx   = 0x08, v_outx   = 0x09
+	};
+
+public:
+	enum { extra_size = 16 };
+	sample_t* extra()               { return m.extra; }
+	sample_t const* out_pos() const { return m.out; }
+	void disable_surround( bool ) { } // not supported
+public:
+	BLARGG_DISABLE_NOTHROW
+	
+	typedef BOOST::int8_t   int8_t;
+	typedef BOOST::int16_t int16_t;
+	
+	enum { echo_hist_size = 8 };
+	
+	enum env_mode_t { env_release, env_attack, env_decay, env_sustain };
+	enum { brr_buf_size = 12 };
+	struct voice_t
+	{
+		int buf [brr_buf_size*2];// decoded samples (twice the size to simplify wrap handling)
+		int buf_pos;            // place in buffer where next samples will be decoded
+		int interp_pos;         // relative fractional position in sample (0x1000 = 1.0)
+		int brr_addr;           // address of current BRR block
+		int brr_offset;         // current decoding offset in BRR block
+		uint8_t* regs;          // pointer to voice's DSP registers
+		int vbit;               // bitmask for voice: 0x01 for voice 0, 0x02 for voice 1, etc.
+		int kon_delay;          // KON delay/current setup phase
+		env_mode_t env_mode;
+		int env;                // current envelope level
+		int hidden_env;         // used by GAIN mode 7, very obscure quirk
+		uint8_t t_envx_out;
+	};
+private:
+	enum { brr_block_size = 9 };
+	
+	struct state_t
+	{
+		uint8_t regs [register_count];
+		
+		// Echo history keeps most recent 8 samples (twice the size to simplify wrap handling)
+		int echo_hist [echo_hist_size * 2] [2];
+		int (*echo_hist_pos) [2]; // &echo_hist [0 to 7]
+		
+		int every_other_sample; // toggles every sample
+		int kon;                // KON value when last checked
+		int noise;
+		int counter;
+		int echo_offset;        // offset from ESA in echo buffer
+		int echo_length;        // number of bytes that echo_offset will stop at
+		int phase;              // next clock cycle to run (0-31)
+		bool kon_check;         // set when a new KON occurs
+		
+		// Hidden registers also written to when main register is written to
+		int new_kon;
+		uint8_t endx_buf;
+		uint8_t envx_buf;
+		uint8_t outx_buf;
+		
+		// Temporary state between clocks
+		
+		// read once per sample
+		int t_pmon;
+		int t_non;
+		int t_eon;
+		int t_dir;
+		int t_koff;
+		
+		// read a few clocks ahead then used
+		int t_brr_next_addr;
+		int t_adsr0;
+		int t_brr_header;
+		int t_brr_byte;
+		int t_srcn;
+		int t_esa;
+		int t_echo_enabled;
+		
+		// internal state that is recalculated every sample
+		int t_dir_addr;
+		int t_pitch;
+		int t_output;
+		int t_looped;
+		int t_echo_ptr;
+		
+		// left/right sums
+		int t_main_out [2];
+		int t_echo_out [2];
+		int t_echo_in  [2];
+		
+		voice_t voices [voice_count];
+		
+		// non-emulation state
+		uint8_t* ram; // 64K shared RAM between DSP and SMP
+		int mute_mask;
+		sample_t* out;
+		sample_t* out_end;
+		sample_t* out_begin;
+		sample_t extra [extra_size];
+	};
+	state_t m;
+	
+	void init_counter();
+	void run_counters();
+	unsigned read_counter( int rate );
+	
+	int  interpolate( voice_t const* v );
+	void run_envelope( voice_t* const v );
+	void decode_brr( voice_t* v );
+
+	void misc_27();
+	void misc_28();
+	void misc_29();
+	void misc_30();
+
+	void voice_output( voice_t const* v, int ch );
+	void voice_V1( voice_t* const );
+	void voice_V2( voice_t* const );
+	void voice_V3( voice_t* const );
+	void voice_V3a( voice_t* const );
+	void voice_V3b( voice_t* const );
+	void voice_V3c( voice_t* const );
+	void voice_V4( voice_t* const );
+	void voice_V5( voice_t* const );
+	void voice_V6( voice_t* const );
+	void voice_V7( voice_t* const );
+	void voice_V8( voice_t* const );
+	void voice_V9( voice_t* const );
+	void voice_V7_V4_V1( voice_t* const );
+	void voice_V8_V5_V2( voice_t* const );
+	void voice_V9_V6_V3( voice_t* const );
+
+	void echo_read( int ch );
+	int  echo_output( int ch );
+	void echo_write( int ch );
+	void echo_22();
+	void echo_23();
+	void echo_24();
+	void echo_25();
+	void echo_26();
+	void echo_27();
+	void echo_28();
+	void echo_29();
+	void echo_30();
+	
+	void soft_reset_common();
+
+public:
+	bool mute() { return m.regs[r_flg] & 0x40; }
+};
+
+#include <assert.h>
+
+inline int SPC_DSP::sample_count() const { return m.out - m.out_begin; }
+
+inline int SPC_DSP::read( int addr ) const
+{
+	assert( (unsigned) addr < register_count );
+	return m.regs [addr];
+}
+
+inline void SPC_DSP::write( int addr, int data )
+{
+	assert( (unsigned) addr < register_count );
+	
+	m.regs [addr] = (uint8_t) data;
+	switch ( addr & 0x0F )
+	{
+	case v_envx:
+		m.envx_buf = (uint8_t) data;
+		break;
+		
+	case v_outx:
+		m.outx_buf = (uint8_t) data;
+		break;
+	
+	case 0x0C:
+		if ( addr == r_kon )
+			m.new_kon = (uint8_t) data;
+		
+		if ( addr == r_endx ) // always cleared, regardless of data written
+		{
+			m.endx_buf = 0;
+			m.regs [r_endx] = 0;
+		}
+		break;
+	}
+}
+
+inline void SPC_DSP::mute_voices( int mask ) { m.mute_mask = mask; }
+
+inline bool SPC_DSP::check_kon()
+{
+	bool old = m.kon_check;
+	m.kon_check = 0;
+	return old;
+}
+
+#if !SPC_NO_COPY_STATE_FUNCS
+
+class SPC_State_Copier {
+	SPC_DSP::copy_func_t func;
+	unsigned char** buf;
+public:
+	SPC_State_Copier( unsigned char** p, SPC_DSP::copy_func_t f ) { func = f; buf = p; }
+	void copy( void* state, size_t size );
+	int copy_int( int state, int size );
+	void skip( int count );
+	void extra();
+};
+
+#define SPC_COPY( type, state )\
+{\
+	state = (BOOST::type) copier.copy_int( state, sizeof (BOOST::type) );\
+	assert( (BOOST::type) state == state );\
+}
+
+#endif
+
+#endif
diff --git a/higan/sfc-balanced/dsp/blargg_common.h b/higan/sfc-balanced/dsp/blargg_common.h
new file mode 100644
index 0000000..75edff3
--- /dev/null
+++ b/higan/sfc-balanced/dsp/blargg_common.h
@@ -0,0 +1,186 @@
+// Sets up common environment for Shay Green's libraries.
+// To change configuration options, modify blargg_config.h, not this file.
+
+// snes_spc 0.9.0
+#ifndef BLARGG_COMMON_H
+#define BLARGG_COMMON_H
+
+#include <stddef.h>
+#include <stdlib.h>
+#include <assert.h>
+#include <limits.h>
+
+#undef BLARGG_COMMON_H
+// allow blargg_config.h to #include blargg_common.h
+#include "blargg_config.h"
+#ifndef BLARGG_COMMON_H
+#define BLARGG_COMMON_H
+
+// BLARGG_RESTRICT: equivalent to restrict, where supported
+#if defined (__GNUC__) || _MSC_VER >= 1100
+	#define BLARGG_RESTRICT __restrict
+#else
+	#define BLARGG_RESTRICT
+#endif
+
+// STATIC_CAST(T,expr): Used in place of static_cast<T> (expr)
+#ifndef STATIC_CAST
+	#define STATIC_CAST(T,expr) ((T) (expr))
+#endif
+
+// blargg_err_t (0 on success, otherwise error string)
+#ifndef blargg_err_t
+	typedef const char* blargg_err_t;
+#endif
+
+// blargg_vector - very lightweight vector of POD types (no constructor/destructor)
+template<class T>
+class blargg_vector {
+	T* begin_;
+	size_t size_;
+public:
+	blargg_vector() : begin_( 0 ), size_( 0 ) { }
+	~blargg_vector() { free( begin_ ); }
+	size_t size() const { return size_; }
+	T* begin() const { return begin_; }
+	T* end() const { return begin_ + size_; }
+	blargg_err_t resize( size_t n )
+	{
+		// TODO: blargg_common.cpp to hold this as an outline function, ugh
+		void* p = realloc( begin_, n * sizeof (T) );
+		if ( p )
+			begin_ = (T*) p;
+		else if ( n > size_ ) // realloc failure only a problem if expanding
+			return "Out of memory";
+		size_ = n;
+		return 0;
+	}
+	void clear() { void* p = begin_; begin_ = 0; size_ = 0; free( p ); }
+	T& operator [] ( size_t n ) const
+	{
+		assert( n <= size_ ); // <= to allow past-the-end value
+		return begin_ [n];
+	}
+};
+
+#ifndef BLARGG_DISABLE_NOTHROW
+	// throw spec mandatory in ISO C++ if operator new can return NULL
+	#if __cplusplus >= 199711 || defined (__GNUC__)
+		#define BLARGG_THROWS( spec ) throw spec
+	#else
+		#define BLARGG_THROWS( spec )
+	#endif
+	#define BLARGG_DISABLE_NOTHROW \
+		void* operator new ( size_t s ) BLARGG_THROWS(()) { return malloc( s ); }\
+		void operator delete ( void* p ) { free( p ); }
+	#define BLARGG_NEW new
+#else
+	#include <new>
+	#define BLARGG_NEW new (std::nothrow)
+#endif
+
+// BLARGG_4CHAR('a','b','c','d') = 'abcd' (four character integer constant)
+#define BLARGG_4CHAR( a, b, c, d ) \
+	((a&0xFF)*0x1000000L + (b&0xFF)*0x10000L + (c&0xFF)*0x100L + (d&0xFF))
+
+// BOOST_STATIC_ASSERT( expr ): Generates compile error if expr is 0.
+#ifndef BOOST_STATIC_ASSERT
+	#ifdef _MSC_VER
+		// MSVC6 (_MSC_VER < 1300) fails for use of __LINE__ when /Zl is specified
+		#define BOOST_STATIC_ASSERT( expr ) \
+			void blargg_failed_( int (*arg) [2 / (int) !!(expr) - 1] )
+	#else
+		// Some other compilers fail when declaring same function multiple times in class,
+		// so differentiate them by line
+		#define BOOST_STATIC_ASSERT( expr ) \
+			void blargg_failed_( int (*arg) [2 / !!(expr) - 1] [__LINE__] )
+	#endif
+#endif
+
+// BLARGG_COMPILER_HAS_BOOL: If 0, provides bool support for old compiler. If 1,
+// compiler is assumed to support bool. If undefined, availability is determined.
+#ifndef BLARGG_COMPILER_HAS_BOOL
+	#if defined (__MWERKS__)
+		#if !__option(bool)
+			#define BLARGG_COMPILER_HAS_BOOL 0
+		#endif
+	#elif defined (_MSC_VER)
+		#if _MSC_VER < 1100
+			#define BLARGG_COMPILER_HAS_BOOL 0
+		#endif
+	#elif defined (__GNUC__)
+		// supports bool
+	#elif __cplusplus < 199711
+		#define BLARGG_COMPILER_HAS_BOOL 0
+	#endif
+#endif
+#if defined (BLARGG_COMPILER_HAS_BOOL) && !BLARGG_COMPILER_HAS_BOOL
+	// If you get errors here, modify your blargg_config.h file
+	typedef int bool;
+	const bool true  = 1;
+	const bool false = 0;
+#endif
+
+// blargg_long/blargg_ulong = at least 32 bits, int if it's big enough
+
+#if INT_MAX < 0x7FFFFFFF || LONG_MAX == 0x7FFFFFFF
+	typedef long blargg_long;
+#else
+	typedef int blargg_long;
+#endif
+
+#if UINT_MAX < 0xFFFFFFFF || ULONG_MAX == 0xFFFFFFFF
+	typedef unsigned long blargg_ulong;
+#else
+	typedef unsigned blargg_ulong;
+#endif
+
+// BOOST::int8_t etc.
+
+// HAVE_STDINT_H: If defined, use <stdint.h> for int8_t etc.
+#if defined (HAVE_STDINT_H)
+	#include <stdint.h>
+	#define BOOST
+
+// HAVE_INTTYPES_H: If defined, use <stdint.h> for int8_t etc.
+#elif defined (HAVE_INTTYPES_H)
+	#include <inttypes.h>
+	#define BOOST
+
+#else
+	struct BOOST
+	{
+		#if UCHAR_MAX == 0xFF && SCHAR_MAX == 0x7F
+			typedef signed char     int8_t;
+			typedef unsigned char   uint8_t;
+		#else
+			// No suitable 8-bit type available
+			typedef struct see_blargg_common_h int8_t;
+			typedef struct see_blargg_common_h uint8_t;
+		#endif
+		
+		#if USHRT_MAX == 0xFFFF
+			typedef short           int16_t;
+			typedef unsigned short  uint16_t;
+		#else
+			// No suitable 16-bit type available
+			typedef struct see_blargg_common_h int16_t;
+			typedef struct see_blargg_common_h uint16_t;
+		#endif
+		
+		#if ULONG_MAX == 0xFFFFFFFF
+			typedef long            int32_t;
+			typedef unsigned long   uint32_t;
+		#elif UINT_MAX == 0xFFFFFFFF
+			typedef int             int32_t;
+			typedef unsigned int    uint32_t;
+		#else
+			// No suitable 32-bit type available
+			typedef struct see_blargg_common_h int32_t;
+			typedef struct see_blargg_common_h uint32_t;
+		#endif
+	};
+#endif
+
+#endif
+#endif
diff --git a/higan/sfc-balanced/dsp/blargg_config.h b/higan/sfc-balanced/dsp/blargg_config.h
new file mode 100644
index 0000000..d85d266
--- /dev/null
+++ b/higan/sfc-balanced/dsp/blargg_config.h
@@ -0,0 +1,24 @@
+// snes_spc 0.9.0 user configuration file. Don't replace when updating library.
+
+// snes_spc 0.9.0
+#ifndef BLARGG_CONFIG_H
+#define BLARGG_CONFIG_H
+
+// Uncomment to disable debugging checks
+#define NDEBUG 1
+
+// Uncomment to enable platform-specific (and possibly non-portable) optimizations
+//#define BLARGG_NONPORTABLE 1
+
+// Uncomment if automatic byte-order determination doesn't work
+//#define BLARGG_BIG_ENDIAN 1
+
+// Uncomment if you get errors in the bool section of blargg_common.h
+//#define BLARGG_COMPILER_HAS_BOOL 1
+
+// Use standard config.h if present
+#ifdef HAVE_CONFIG_H
+	#include "config.h"
+#endif
+
+#endif
diff --git a/higan/sfc-balanced/dsp/blargg_endian.h b/higan/sfc-balanced/dsp/blargg_endian.h
new file mode 100644
index 0000000..f2daca6
--- /dev/null
+++ b/higan/sfc-balanced/dsp/blargg_endian.h
@@ -0,0 +1,185 @@
+// CPU Byte Order Utilities
+
+// snes_spc 0.9.0
+#ifndef BLARGG_ENDIAN
+#define BLARGG_ENDIAN
+
+#include "blargg_common.h"
+
+// BLARGG_CPU_CISC: Defined if CPU has very few general-purpose registers (< 16)
+#if defined (_M_IX86) || defined (_M_IA64) || defined (__i486__) || \
+		defined (__x86_64__) || defined (__ia64__) || defined (__i386__)
+	#define BLARGG_CPU_X86 1
+	#define BLARGG_CPU_CISC 1
+#endif
+
+#if defined (__powerpc__) || defined (__ppc__) || defined (__POWERPC__) || defined (__powerc)
+	#define BLARGG_CPU_POWERPC 1
+	#define BLARGG_CPU_RISC 1
+#endif
+
+// BLARGG_BIG_ENDIAN, BLARGG_LITTLE_ENDIAN: Determined automatically, otherwise only
+// one may be #defined to 1. Only needed if something actually depends on byte order.
+#if !defined (BLARGG_BIG_ENDIAN) && !defined (BLARGG_LITTLE_ENDIAN)
+#ifdef __GLIBC__
+	// GCC handles this for us
+	#include <endian.h>
+	#if __BYTE_ORDER == __LITTLE_ENDIAN
+		#define BLARGG_LITTLE_ENDIAN 1
+	#elif __BYTE_ORDER == __BIG_ENDIAN
+		#define BLARGG_BIG_ENDIAN 1
+	#endif
+#else
+
+#if defined (LSB_FIRST) || defined (__LITTLE_ENDIAN__) || BLARGG_CPU_X86 || \
+		(defined (LITTLE_ENDIAN) && LITTLE_ENDIAN+0 != 1234)
+	#define BLARGG_LITTLE_ENDIAN 1
+#endif
+
+#if defined (MSB_FIRST)     || defined (__BIG_ENDIAN__) || defined (WORDS_BIGENDIAN) || \
+	defined (__sparc__)     ||  BLARGG_CPU_POWERPC || \
+	(defined (BIG_ENDIAN) && BIG_ENDIAN+0 != 4321)
+	#define BLARGG_BIG_ENDIAN 1
+#elif !defined (__mips__)
+	// No endian specified; assume little-endian, since it's most common
+	#define BLARGG_LITTLE_ENDIAN 1
+#endif
+#endif
+#endif
+
+#if BLARGG_LITTLE_ENDIAN && BLARGG_BIG_ENDIAN
+	#undef BLARGG_LITTLE_ENDIAN
+	#undef BLARGG_BIG_ENDIAN
+#endif
+
+inline void blargg_verify_byte_order()
+{
+	#ifndef NDEBUG
+		#if BLARGG_BIG_ENDIAN
+			volatile int i = 1;
+			assert( *(volatile char*) &i == 0 );
+		#elif BLARGG_LITTLE_ENDIAN
+			volatile int i = 1;
+			assert( *(volatile char*) &i != 0 );
+		#endif
+	#endif
+}
+
+inline unsigned get_le16( void const* p )
+{
+	return  (unsigned) ((unsigned char const*) p) [1] << 8 |
+			(unsigned) ((unsigned char const*) p) [0];
+}
+
+inline unsigned get_be16( void const* p )
+{
+	return  (unsigned) ((unsigned char const*) p) [0] << 8 |
+			(unsigned) ((unsigned char const*) p) [1];
+}
+
+inline blargg_ulong get_le32( void const* p )
+{
+	return  (blargg_ulong) ((unsigned char const*) p) [3] << 24 |
+			(blargg_ulong) ((unsigned char const*) p) [2] << 16 |
+			(blargg_ulong) ((unsigned char const*) p) [1] <<  8 |
+			(blargg_ulong) ((unsigned char const*) p) [0];
+}
+
+inline blargg_ulong get_be32( void const* p )
+{
+	return  (blargg_ulong) ((unsigned char const*) p) [0] << 24 |
+			(blargg_ulong) ((unsigned char const*) p) [1] << 16 |
+			(blargg_ulong) ((unsigned char const*) p) [2] <<  8 |
+			(blargg_ulong) ((unsigned char const*) p) [3];
+}
+
+inline void set_le16( void* p, unsigned n )
+{
+	((unsigned char*) p) [1] = (unsigned char) (n >> 8);
+	((unsigned char*) p) [0] = (unsigned char) n;
+}
+
+inline void set_be16( void* p, unsigned n )
+{
+	((unsigned char*) p) [0] = (unsigned char) (n >> 8);
+	((unsigned char*) p) [1] = (unsigned char) n;
+}
+
+inline void set_le32( void* p, blargg_ulong n )
+{
+	((unsigned char*) p) [0] = (unsigned char) n;
+	((unsigned char*) p) [1] = (unsigned char) (n >> 8);
+	((unsigned char*) p) [2] = (unsigned char) (n >> 16);
+	((unsigned char*) p) [3] = (unsigned char) (n >> 24);
+}
+
+inline void set_be32( void* p, blargg_ulong n )
+{
+	((unsigned char*) p) [3] = (unsigned char) n;
+	((unsigned char*) p) [2] = (unsigned char) (n >> 8);
+	((unsigned char*) p) [1] = (unsigned char) (n >> 16);
+	((unsigned char*) p) [0] = (unsigned char) (n >> 24);
+}
+
+#if BLARGG_NONPORTABLE
+	// Optimized implementation if byte order is known
+	#if BLARGG_LITTLE_ENDIAN
+		#define GET_LE16( addr )        (*(BOOST::uint16_t*) (addr))
+		#define GET_LE32( addr )        (*(BOOST::uint32_t*) (addr))
+		#define SET_LE16( addr, data )  (void) (*(BOOST::uint16_t*) (addr) = (data))
+		#define SET_LE32( addr, data )  (void) (*(BOOST::uint32_t*) (addr) = (data))
+	#elif BLARGG_BIG_ENDIAN
+		#define GET_BE16( addr )        (*(BOOST::uint16_t*) (addr))
+		#define GET_BE32( addr )        (*(BOOST::uint32_t*) (addr))
+		#define SET_BE16( addr, data )  (void) (*(BOOST::uint16_t*) (addr) = (data))
+		#define SET_BE32( addr, data )  (void) (*(BOOST::uint32_t*) (addr) = (data))
+		
+		#if BLARGG_CPU_POWERPC
+			// PowerPC has special byte-reversed instructions
+			#if defined (__MWERKS__)
+				#define GET_LE16( addr )        (__lhbrx( addr, 0 ))
+				#define GET_LE32( addr )        (__lwbrx( addr, 0 ))
+				#define SET_LE16( addr, in )    (__sthbrx( in, addr, 0 ))
+				#define SET_LE32( addr, in )    (__stwbrx( in, addr, 0 ))
+			#elif defined (__GNUC__)
+				#define GET_LE16( addr )        ({unsigned ppc_lhbrx_; asm( "lhbrx %0,0,%1" : "=r" (ppc_lhbrx_) : "r" (addr), "0" (ppc_lhbrx_) ); ppc_lhbrx_;})
+				#define GET_LE32( addr )        ({unsigned ppc_lwbrx_; asm( "lwbrx %0,0,%1" : "=r" (ppc_lwbrx_) : "r" (addr), "0" (ppc_lwbrx_) ); ppc_lwbrx_;})
+				#define SET_LE16( addr, in )    ({asm( "sthbrx %0,0,%1" : : "r" (in), "r" (addr) );})
+				#define SET_LE32( addr, in )    ({asm( "stwbrx %0,0,%1" : : "r" (in), "r" (addr) );})
+			#endif
+		#endif
+	#endif
+#endif
+
+#ifndef GET_LE16
+	#define GET_LE16( addr )        get_le16( addr )
+	#define SET_LE16( addr, data )  set_le16( addr, data )
+#endif
+
+#ifndef GET_LE32
+	#define GET_LE32( addr )        get_le32( addr )
+	#define SET_LE32( addr, data )  set_le32( addr, data )
+#endif
+
+#ifndef GET_BE16
+	#define GET_BE16( addr )        get_be16( addr )
+	#define SET_BE16( addr, data )  set_be16( addr, data )
+#endif
+
+#ifndef GET_BE32
+	#define GET_BE32( addr )        get_be32( addr )
+	#define SET_BE32( addr, data )  set_be32( addr, data )
+#endif
+
+// auto-selecting versions
+
+inline void set_le( BOOST::uint16_t* p, unsigned     n ) { SET_LE16( p, n ); }
+inline void set_le( BOOST::uint32_t* p, blargg_ulong n ) { SET_LE32( p, n ); }
+inline void set_be( BOOST::uint16_t* p, unsigned     n ) { SET_BE16( p, n ); }
+inline void set_be( BOOST::uint32_t* p, blargg_ulong n ) { SET_BE32( p, n ); }
+inline unsigned     get_le( BOOST::uint16_t* p ) { return GET_LE16( p ); }
+inline blargg_ulong get_le( BOOST::uint32_t* p ) { return GET_LE32( p ); }
+inline unsigned     get_be( BOOST::uint16_t* p ) { return GET_BE16( p ); }
+inline blargg_ulong get_be( BOOST::uint32_t* p ) { return GET_BE32( p ); }
+
+#endif
diff --git a/higan/sfc-balanced/dsp/blargg_source.h b/higan/sfc-balanced/dsp/blargg_source.h
new file mode 100644
index 0000000..5e45c4f
--- /dev/null
+++ b/higan/sfc-balanced/dsp/blargg_source.h
@@ -0,0 +1,100 @@
+/* Included at the beginning of library source files, after all other #include lines.
+Sets up helpful macros and services used in my source code. They don't need
+module an annoying module prefix on their names since they are defined after
+all other #include lines. */
+
+// snes_spc 0.9.0
+#ifndef BLARGG_SOURCE_H
+#define BLARGG_SOURCE_H
+
+// If debugging is enabled, abort program if expr is false. Meant for checking
+// internal state and consistency. A failed assertion indicates a bug in the module.
+// void assert( bool expr );
+#include <assert.h>
+
+// If debugging is enabled and expr is false, abort program. Meant for checking
+// caller-supplied parameters and operations that are outside the control of the
+// module. A failed requirement indicates a bug outside the module.
+// void require( bool expr );
+#undef require
+#define require( expr ) assert( expr )
+
+// Like printf() except output goes to debug log file. Might be defined to do
+// nothing (not even evaluate its arguments).
+// void dprintf( const char* format, ... );
+static inline void blargg_dprintf_( const char*, ... ) { }
+#undef dprintf
+#define dprintf (1) ? (void) 0 : blargg_dprintf_
+
+// If enabled, evaluate expr and if false, make debug log entry with source file
+// and line. Meant for finding situations that should be examined further, but that
+// don't indicate a problem. In all cases, execution continues normally.
+#undef check
+#define check( expr ) ((void) 0)
+
+// If expr yields error string, return it from current function, otherwise continue.
+#undef RETURN_ERR
+#define RETURN_ERR( expr ) do {                         \
+		blargg_err_t blargg_return_err_ = (expr);               \
+		if ( blargg_return_err_ ) return blargg_return_err_;    \
+	} while ( 0 )
+
+// If ptr is 0, return out of memory error string.
+#undef CHECK_ALLOC
+#define CHECK_ALLOC( ptr ) do { if ( (ptr) == 0 ) return "Out of memory"; } while ( 0 )
+
+// Avoid any macros which evaluate their arguments multiple times
+#undef min
+#undef max
+
+#define DEF_MIN_MAX( type ) \
+	static inline type min( type x, type y ) { if ( x < y ) return x; return y; }\
+	static inline type max( type x, type y ) { if ( y < x ) return x; return y; }
+
+DEF_MIN_MAX( int )
+DEF_MIN_MAX( unsigned )
+DEF_MIN_MAX( long )
+DEF_MIN_MAX( unsigned long )
+DEF_MIN_MAX( float )
+DEF_MIN_MAX( double )
+
+#undef DEF_MIN_MAX
+
+/*
+// using const references generates crappy code, and I am currenly only using these
+// for built-in types, so they take arguments by value
+
+// TODO: remove
+inline int min( int x, int y ) 
+template<class T>
+inline T min( T x, T y )
+{
+	if ( x < y )
+		return x;
+	return y;
+}
+
+template<class T>
+inline T max( T x, T y )
+{
+	if ( x < y )
+		return y;
+	return x;
+}
+*/
+
+// TODO: good idea? bad idea?
+#undef byte
+#define byte byte_
+typedef unsigned char byte;
+
+// deprecated
+#define BLARGG_CHECK_ALLOC CHECK_ALLOC
+#define BLARGG_RETURN_ERR RETURN_ERR
+
+// BLARGG_SOURCE_BEGIN: If defined, #included, allowing redefition of dprintf and check
+#ifdef BLARGG_SOURCE_BEGIN
+	#include BLARGG_SOURCE_BEGIN
+#endif
+
+#endif
diff --git a/higan/sfc-balanced/dsp/dsp.cpp b/higan/sfc-balanced/dsp/dsp.cpp
new file mode 100644
index 0000000..f1da174
--- /dev/null
+++ b/higan/sfc-balanced/dsp/dsp.cpp
@@ -0,0 +1,58 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+DSP dsp;
+
+#include "serialization.cpp"
+#include "SPC_DSP.cpp"
+
+DSP::DSP() {
+}
+
+auto DSP::step(uint clocks) -> void {
+  clock += clocks;
+}
+
+auto DSP::main() -> void {
+  spc_dsp.run(1);
+  step(3 * 8);
+
+  int count = spc_dsp.sample_count();
+  if(count > 0) {
+    for(uint n = 0; n < count; n += 2) stream->sample(samplebuffer[n + 0] / 32768.0, samplebuffer[n + 1] / 32768.0);
+    spc_dsp.set_output(samplebuffer, 8192);
+  }
+}
+
+auto DSP::mute() -> bool {
+  return spc_dsp.mute();
+}
+
+auto DSP::read(uint8 addr) -> uint8 {
+  return spc_dsp.read(addr);
+}
+
+auto DSP::write(uint8 addr, uint8 data) -> void {
+  spc_dsp.write(addr, data);
+}
+
+auto DSP::load(Markup::Node node) -> bool {
+  return true;
+}
+
+auto DSP::power() -> void {
+  spc_dsp.init(smp.apuram);
+  spc_dsp.reset();
+  spc_dsp.set_output(samplebuffer, 8192);
+}
+
+auto DSP::reset() -> void {
+  clock = 0;
+  stream = Emulator::audio.createStream(2, 32040.0);
+
+  spc_dsp.soft_reset();
+  spc_dsp.set_output(samplebuffer, 8192);
+}
+
+}
diff --git a/higan/sfc-balanced/dsp/dsp.hpp b/higan/sfc-balanced/dsp/dsp.hpp
new file mode 100644
index 0000000..48acb01
--- /dev/null
+++ b/higan/sfc-balanced/dsp/dsp.hpp
@@ -0,0 +1,28 @@
+#include "SPC_DSP.h"
+
+struct DSP {
+  shared_pointer<Emulator::Stream> stream;
+
+  DSP();
+
+  alwaysinline auto step(uint clocks) -> void;
+
+  auto mute() -> bool;
+  auto read(uint8 addr) -> uint8;
+  auto write(uint8 addr, uint8 data) -> void;
+
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  int64 clock;
+
+private:
+  SPC_DSP spc_dsp;
+  int16_t samplebuffer[8192];
+};
+
+extern DSP dsp;
diff --git a/higan/sfc-balanced/dsp/serialization.cpp b/higan/sfc-balanced/dsp/serialization.cpp
new file mode 100644
index 0000000..01b6a53
--- /dev/null
+++ b/higan/sfc-balanced/dsp/serialization.cpp
@@ -0,0 +1,27 @@
+static auto dsp_state_save(unsigned char** out, void* in, size_t size) -> void {
+  memcpy(*out, in, size);
+  *out += size;
+}
+
+static auto dsp_state_load(unsigned char** in, void* out, size_t size) -> void {
+  memcpy(out, *in, size);
+  *in += size;
+}
+
+auto DSP::serialize(serializer &s) -> void {
+  s.integer(clock);
+  s.array(samplebuffer);
+
+  unsigned char state[SPC_DSP::state_size];
+  unsigned char *p = state;
+  memset(&state, 0, SPC_DSP::state_size);
+  if(s.mode() == serializer::Save) {
+    spc_dsp.copy_state(&p, dsp_state_save);
+    s.array(state);
+  } else if(s.mode() == serializer::Load) {
+    s.array(state);
+    spc_dsp.copy_state(&p, dsp_state_load);
+  } else {
+    s.array(state);
+  }
+}
diff --git a/higan/sfc-balanced/expansion/21fx/21fx.cpp b/higan/sfc-balanced/expansion/21fx/21fx.cpp
new file mode 100644
index 0000000..0093cd7
--- /dev/null
+++ b/higan/sfc-balanced/expansion/21fx/21fx.cpp
@@ -0,0 +1,145 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+S21FX::S21FX() {
+  create(S21FX::Enter, 10'000'000);
+
+  resetVector.byte(0) = bus.read(0xfffc, 0x00);
+  resetVector.byte(1) = bus.read(0xfffd, 0x00);
+
+  bus.map({&S21FX::read, this}, {&S21FX::write, this}, "00-3f,80-bf:2184-21ff");
+  bus.map({&S21FX::read, this}, {&S21FX::write, this}, "00:fffc-fffd");
+
+  booted = false;
+
+  for(auto& byte : ram) byte = 0xdb;  //stp
+  ram[0] = 0x6c;  //jmp ($fffc)
+  ram[1] = 0xfc;
+  ram[2] = 0xff;
+
+  if(auto buffer = file::read({interface->path(ID::System), "21fx.rom"})) {
+    memory::copy(ram, sizeof(ram), buffer.data(), buffer.size());
+  }
+
+  string filename{interface->path(ID::SuperFamicom), "21fx.so"};
+  if(link.openAbsolute(filename)) {
+    linkInit = link.sym("fx_init");
+    linkMain = link.sym("fx_main");
+  }
+}
+
+S21FX::~S21FX() {
+  scheduler.remove(*this);
+  bus.unmap("00-3f,80-bf:2184-21ff");
+  bus.unmap("00:fffc-fffd");
+
+  //note: this is an awful hack ...
+  //since the bus maps are lambdas, we can't safely restore the original reset vector handler
+  //as such, we install a basic read-only lambda that simply returns the known reset vector
+  //the downside is that if 00:fffc-fffd were anything but ROM; it will now only act as ROM
+  //given that this is the only device that hooks the reset vector like this,
+  //it's not worth the added complexity to support some form of reversible bus mapping hooks
+  uint vector = resetVector;
+  bus.map([vector](uint24 addr, uint8) -> uint8 {
+    return vector >> addr * 8;
+  }, [](uint24, uint8) -> void {
+  }, "00:fffc-fffd", 2);
+
+  if(link.open()) link.close();
+  linkInit.reset();
+  linkMain.reset();
+}
+
+auto S21FX::Enter() -> void {
+  while(true) scheduler.synchronize(), peripherals.expansionPort->main();
+}
+
+auto S21FX::step(uint clocks) -> void {
+  Thread::step(clocks);
+  synchronize(cpu);
+}
+
+auto S21FX::main() -> void {
+  if(linkInit) linkInit(
+    {&S21FX::quit, this},
+    {&S21FX::usleep, this},
+    {&S21FX::readable, this},
+    {&S21FX::writable, this},
+    {&S21FX::read, this},
+    {&S21FX::write, this}
+  );
+  if(linkMain) linkMain({});
+  while(true) step(10'000'000);
+}
+
+auto S21FX::read(uint24 addr, uint8 data) -> uint8 {
+  addr &= 0x40ffff;
+
+  if(addr == 0xfffc) return booted ? resetVector.byte(0) : (uint8)0x84;
+  if(addr == 0xfffd) return booted ? resetVector.byte(1) : (booted = true, (uint8)0x21);
+
+  if(addr >= 0x2184 && addr <= 0x21fd) return ram[addr - 0x2184];
+
+  if(addr == 0x21fe) return !link.open() ? 0 : (
+    (linkBuffer.size() >    0) << 7  //1 = readable
+  | (snesBuffer.size() < 1024) << 6  //1 = writable
+  | (link.open())              << 5  //1 = connected
+  );
+
+  if(addr == 0x21ff) {
+    if(linkBuffer.size() > 0) {
+      return linkBuffer.takeLeft();
+    }
+  }
+
+  return data;
+}
+
+auto S21FX::write(uint24 addr, uint8 data) -> void {
+  addr &= 0x40ffff;
+
+  if(addr == 0x21ff) {
+    if(snesBuffer.size() < 1024) {
+      snesBuffer.append(data);
+    }
+  }
+}
+
+auto S21FX::quit() -> bool {
+  step(1);
+  return false;
+}
+
+auto S21FX::usleep(uint microseconds) -> void {
+  step(10 * microseconds);
+}
+
+auto S21FX::readable() -> bool {
+  step(1);
+  return snesBuffer.size() > 0;
+}
+
+auto S21FX::writable() -> bool {
+  step(1);
+  return linkBuffer.size() < 1024;
+}
+
+//SNES -> Link
+auto S21FX::read() -> uint8 {
+  step(1);
+  if(snesBuffer.size() > 0) {
+    return snesBuffer.takeLeft();
+  }
+  return 0x00;
+}
+
+//Link -> SNES
+auto S21FX::write(uint8 data) -> void {
+  step(1);
+  if(linkBuffer.size() < 1024) {
+    linkBuffer.append(data);
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/expansion/21fx/21fx.hpp b/higan/sfc-balanced/expansion/21fx/21fx.hpp
new file mode 100644
index 0000000..50eb7d8
--- /dev/null
+++ b/higan/sfc-balanced/expansion/21fx/21fx.hpp
@@ -0,0 +1,37 @@
+struct S21FX : Expansion {
+  S21FX();
+  ~S21FX();
+
+  static auto Enter() -> void;
+  auto step(uint clocks) -> void;
+  auto main() -> void;
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+private:
+  auto quit() -> bool;
+  auto usleep(uint) -> void;
+  auto readable() -> bool;
+  auto writable() -> bool;
+  auto read() -> uint8;
+  auto write(uint8) -> void;
+
+  bool booted = false;
+  uint16 resetVector;
+  uint8 ram[122];
+
+  nall::library link;
+  function<void (
+    function<bool ()>,      //quit
+    function<void (uint)>,  //usleep
+    function<bool ()>,      //readable
+    function<bool ()>,      //writable
+    function<uint8 ()>,     //read
+    function<void (uint8)>  //write
+  )> linkInit;
+  function<void (string_vector)> linkMain;
+
+  vector<uint8> snesBuffer;  //SNES -> Link
+  vector<uint8> linkBuffer;  //Link -> SNES
+};
diff --git a/higan/sfc-balanced/expansion/expansion.cpp b/higan/sfc-balanced/expansion/expansion.cpp
new file mode 100644
index 0000000..cdd22f3
--- /dev/null
+++ b/higan/sfc-balanced/expansion/expansion.cpp
@@ -0,0 +1,18 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+Expansion::Expansion() {
+  if(!handle()) create(Expansion::Enter, 1);
+}
+
+auto Expansion::Enter() -> void {
+  while(true) scheduler.synchronize(), peripherals.expansionPort->main();
+}
+
+auto Expansion::main() -> void {
+  step(1);
+  synchronize(cpu);
+}
+
+}
diff --git a/higan/sfc-balanced/expansion/expansion.hpp b/higan/sfc-balanced/expansion/expansion.hpp
new file mode 100644
index 0000000..a7a0ff9
--- /dev/null
+++ b/higan/sfc-balanced/expansion/expansion.hpp
@@ -0,0 +1,8 @@
+struct Expansion : Thread {
+  Expansion();
+  static auto Enter() -> void;
+  virtual auto main() -> void;
+};
+
+#include <sfc-balanced/expansion/satellaview/satellaview.hpp>
+#include <sfc-balanced/expansion/21fx/21fx.hpp>
diff --git a/higan/sfc-balanced/expansion/satellaview/satellaview.cpp b/higan/sfc-balanced/expansion/satellaview/satellaview.cpp
new file mode 100644
index 0000000..a3d168e
--- /dev/null
+++ b/higan/sfc-balanced/expansion/satellaview/satellaview.cpp
@@ -0,0 +1,129 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+Satellaview::Satellaview() {
+  bus.map({&Satellaview::read, this}, {&Satellaview::write, this}, "00-3f,80-bf:2188-219f");
+  memory::fill(&regs, sizeof regs);
+}
+
+Satellaview::~Satellaview() {
+  bus.unmap("00-3f,80-bf:2188-219f");
+}
+
+auto Satellaview::read(uint24 addr, uint8 data) -> uint8 {
+  switch(addr &= 0xffff) {
+  case 0x2188: return regs.r2188;
+  case 0x2189: return regs.r2189;
+  case 0x218a: return regs.r218a;
+  case 0x218c: return regs.r218c;
+  case 0x218e: return regs.r218e;
+  case 0x218f: return regs.r218f;
+  case 0x2190: return regs.r2190;
+
+  case 0x2192: {
+    uint counter = regs.rtcCounter++;
+    if(regs.rtcCounter >= 18) regs.rtcCounter = 0;
+
+    if(counter == 0) {
+      time_t rawtime;
+      time(&rawtime);
+      tm* t = localtime(&rawtime);
+
+      regs.rtcHour   = t->tm_hour;
+      regs.rtcMinute = t->tm_min;
+      regs.rtcSecond = t->tm_sec;
+    }
+
+    switch(counter) {
+    case  0: return 0x00;  //???
+    case  1: return 0x00;  //???
+    case  2: return 0x00;  //???
+    case  3: return 0x00;  //???
+    case  4: return 0x00;  //???
+    case  5: return 0x01;
+    case  6: return 0x01;
+    case  7: return 0x00;
+    case  8: return 0x00;
+    case  9: return 0x00;
+    case 10: return regs.rtcSecond;
+    case 11: return regs.rtcMinute;
+    case 12: return regs.rtcHour;
+    case 13: return 0x00;  //???
+    case 14: return 0x00;  //???
+    case 15: return 0x00;  //???
+    case 16: return 0x00;  //???
+    case 17: return 0x00;  //???
+    }
+  } break;
+
+  case 0x2193: return regs.r2193 & ~0x0c;
+  case 0x2194: return regs.r2194;
+  case 0x2196: return regs.r2196;
+  case 0x2197: return regs.r2197;
+  case 0x2199: return regs.r2199;
+  }
+
+  return data;
+}
+
+auto Satellaview::write(uint24 addr, uint8 data) -> void {
+  switch(addr &= 0xffff) {
+  case 0x2188: {
+    regs.r2188 = data;
+  } break;
+
+  case 0x2189: {
+    regs.r2189 = data;
+  } break;
+
+  case 0x218a: {
+    regs.r218a = data;
+  } break;
+
+  case 0x218b: {
+    regs.r218b = data;
+  } break;
+
+  case 0x218c: {
+    regs.r218c = data;
+  } break;
+
+  case 0x218e: {
+    regs.r218e = data;
+  } break;
+
+  case 0x218f: {
+    regs.r218e >>= 1;
+    regs.r218e = regs.r218f - regs.r218e;
+    regs.r218f >>= 1;
+  } break;
+
+  case 0x2191: {
+    regs.r2191 = data;
+    regs.rtcCounter = 0;
+  } break;
+
+  case 0x2192: {
+    regs.r2190 = 0x80;
+  } break;
+
+  case 0x2193: {
+    regs.r2193 = data;
+  } break;
+
+  case 0x2194: {
+    regs.r2194 = data;
+  } break;
+
+  case 0x2197: {
+    regs.r2197 = data;
+  } break;
+
+  case 0x2199: {
+    regs.r2199 = data;
+  } break;
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/expansion/satellaview/satellaview.hpp b/higan/sfc-balanced/expansion/satellaview/satellaview.hpp
new file mode 100644
index 0000000..8814be5
--- /dev/null
+++ b/higan/sfc-balanced/expansion/satellaview/satellaview.hpp
@@ -0,0 +1,22 @@
+struct Satellaview : Expansion {
+  Satellaview();
+  ~Satellaview();
+
+  auto read(uint24 addr, uint8 data) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+private:
+  struct {
+    uint8 r2188, r2189, r218a, r218b;
+    uint8 r218c, r218d, r218e, r218f;
+    uint8 r2190, r2191, r2192, r2193;
+    uint8 r2194, r2195, r2196, r2197;
+    uint8 r2198, r2199, r219a, r219b;
+    uint8 r219c, r219d, r219e, r219f;
+
+    uint8 rtcCounter;
+    uint8 rtcHour;
+    uint8 rtcMinute;
+    uint8 rtcSecond;
+  } regs;
+};
diff --git a/higan/sfc-balanced/interface/interface.cpp b/higan/sfc-balanced/interface/interface.cpp
new file mode 100644
index 0000000..90f4570
--- /dev/null
+++ b/higan/sfc-balanced/interface/interface.cpp
@@ -0,0 +1,331 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+Interface* interface = nullptr;
+Settings settings;
+Debugger debugger;
+
+Interface::Interface() {
+  interface = this;
+  system.init();
+
+  information.preAlpha     = false;
+  information.manufacturer = "Nintendo";
+  information.name         = "Super Famicom";
+  information.overscan     = true;
+  information.resettable   = true;
+
+  information.capability.states = true;
+  information.capability.cheats = true;
+
+  media.append({ID::SuperFamicom, "Super Famicom", "sfc", Domain::Home});
+
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+  Port expansionPort{ID::Port::Expansion, "Expansion Port", PlugAndPlay};
+
+  { Device device{ID::Device::None, "None"};
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::Gamepad, "Gamepad"};
+    device.inputs.append({0, "Up"    });
+    device.inputs.append({0, "Down"  });
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    device.inputs.append({0, "B"     });
+    device.inputs.append({0, "A"     });
+    device.inputs.append({0, "Y"     });
+    device.inputs.append({0, "X"     });
+    device.inputs.append({0, "L"     });
+    device.inputs.append({0, "R"     });
+    device.inputs.append({0, "Select"});
+    device.inputs.append({0, "Start" });
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Mouse, "Mouse"};
+    device.inputs.append({1, "X-axis"});
+    device.inputs.append({1, "Y-axis"});
+    device.inputs.append({0, "Left"  });
+    device.inputs.append({0, "Right" });
+    controllerPort1.devices.append(device);
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::SuperMultitap, "Super Multitap"};
+    for(uint p = 2; p <= 5; p++) {
+      device.inputs.append({0, {"Port ", p, " - ", "Up"    }});
+      device.inputs.append({0, {"Port ", p, " - ", "Down"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Left"  }});
+      device.inputs.append({0, {"Port ", p, " - ", "Right" }});
+      device.inputs.append({0, {"Port ", p, " - ", "B"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "A"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Y"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "X"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "L"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "R"     }});
+      device.inputs.append({0, {"Port ", p, " - ", "Select"}});
+      device.inputs.append({0, {"Port ", p, " - ", "Start" }});
+    }
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::SuperScope, "Super Scope"};
+    device.inputs.append({1, "X-axis" });
+    device.inputs.append({1, "Y-axis" });
+    device.inputs.append({0, "Trigger"});
+    device.inputs.append({0, "Cursor" });
+    device.inputs.append({0, "Turbo"  });
+    device.inputs.append({0, "Pause"  });
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Justifier, "Justifier"};
+    device.inputs.append({1, "X-axis" });
+    device.inputs.append({1, "Y-axis" });
+    device.inputs.append({0, "Trigger"});
+    device.inputs.append({0, "Start"  });
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Justifiers, "Justifiers"};
+    device.inputs.append({1, "Port 1 - X-axis" });
+    device.inputs.append({1, "Port 1 - Y-axis" });
+    device.inputs.append({0, "Port 1 - Trigger"});
+    device.inputs.append({0, "Port 1 - Start"  });
+    device.inputs.append({1, "Port 2 - X-axis" });
+    device.inputs.append({1, "Port 2 - Y-axis" });
+    device.inputs.append({0, "Port 2 - Trigger"});
+    device.inputs.append({0, "Port 2 - Start"  });
+    controllerPort2.devices.append(device);
+  }
+
+  { Device device{ID::Device::Satellaview, "Satellaview"};
+    expansionPort.devices.append(device);
+  }
+
+  { Device device{ID::Device::S21FX, "21fx"};
+    expansionPort.devices.append(device);
+  }
+
+  ports.append(move(controllerPort1));
+  ports.append(move(controllerPort2));
+  ports.append(move(expansionPort));
+}
+
+auto Interface::manifest() -> string {
+  return cartridge.manifest();
+}
+
+auto Interface::title() -> string {
+  return cartridge.title();
+}
+
+auto Interface::videoSize() -> VideoSize {
+  return {512, 480};
+}
+
+auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
+  double w = 256;
+  if(arc) {
+    double squarePixelRate = system.region() == System::Region::NTSC
+    ? 135.0 / 22.0 * 1'000'000.0
+    : 7'375'000.0;
+    //note: PAL SNES multiples colorburst by 4/5 to make clock rate
+    w *= squarePixelRate / (system.colorburst() * 6.0 / (2.0 + 2.0));
+  }
+  uint h = 240;
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
+}
+
+auto Interface::videoFrequency() -> double {
+  switch(system.region()) { default:
+  case System::Region::NTSC: return (system.colorburst() * 6.0) / (262.0 * 1364.0 - 4.0);
+  case System::Region::PAL:  return (system.colorburst() * 6.0) / (312.0 * 1364.0);
+  }
+}
+
+auto Interface::videoColors() -> uint32 {
+  return 1 << 19;
+}
+
+auto Interface::videoColor(uint32 color) -> uint64 {
+  uint r = color.bits( 0, 4);
+  uint g = color.bits( 5, 9);
+  uint b = color.bits(10,14);
+  uint l = color.bits(15,18);
+
+  double L = (1.0 + l) / 16.0 * (l ? 1.0 : 0.5);
+  uint64 R = L * image::normalize(r, 5, 16);
+  uint64 G = L * image::normalize(g, 5, 16);
+  uint64 B = L * image::normalize(b, 5, 16);
+
+  if(settings.colorEmulation) {
+    static const uint8 gammaRamp[32] = {
+      0x00, 0x01, 0x03, 0x06, 0x0a, 0x0f, 0x15, 0x1c,
+      0x24, 0x2d, 0x37, 0x42, 0x4e, 0x5b, 0x69, 0x78,
+      0x88, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8, 0xc0,
+      0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8, 0xff,
+    };
+    R = L * gammaRamp[r] * 0x0101;
+    G = L * gammaRamp[g] * 0x0101;
+    B = L * gammaRamp[b] * 0x0101;
+  }
+
+  return R << 32 | G << 16 | B << 0;
+}
+
+auto Interface::audioFrequency() -> double {
+  return 32040.0;
+}
+
+auto Interface::loaded() -> bool {
+  return system.loaded();
+}
+
+auto Interface::sha256() -> string {
+  return cartridge.sha256();
+}
+
+auto Interface::load(uint id) -> bool {
+  if(id == ID::SuperFamicom) return system.load();
+  if(id == ID::BSMemory) return cartridge.loadBSMemory();
+  if(id == ID::SufamiTurboA) return cartridge.loadSufamiTurboA();
+  if(id == ID::SufamiTurboB) return cartridge.loadSufamiTurboB();
+  return false;
+}
+
+auto Interface::save() -> void {
+  system.save();
+}
+
+auto Interface::unload() -> void {
+  save();
+  system.unload();
+}
+
+auto Interface::connect(uint port, uint device) -> void {
+  SuperFamicom::peripherals.connect(port, device);
+}
+
+auto Interface::power() -> void {
+  system.power();
+}
+
+auto Interface::reset() -> void {
+  system.reset();
+}
+
+auto Interface::run() -> void {
+  system.run();
+}
+
+auto Interface::rtc() -> bool {
+  if(cartridge.has.EpsonRTC) return true;
+  if(cartridge.has.SharpRTC) return true;
+  return false;
+}
+
+auto Interface::rtcsync() -> void {
+  if(cartridge.has.EpsonRTC) epsonrtc.sync();
+  if(cartridge.has.SharpRTC) sharprtc.sync();
+}
+
+auto Interface::serialize() -> serializer {
+  system.runToSave();
+  return system.serialize();
+}
+
+auto Interface::unserialize(serializer& s) -> bool {
+  return system.unserialize(s);
+}
+
+auto Interface::cheatSet(const string_vector& list) -> void {
+  cheat.reset();
+  #if defined(SFC_SUPERGAMEBOY)
+  if(cartridge.has.ICD2) return GameBoy::cheat.assign(list);
+  #endif
+  cheat.assign(list);
+}
+
+auto Interface::cap(const string& name) -> bool {
+  if(name == "Blur Emulation") return true;
+  if(name == "Color Emulation") return true;
+  if(name == "Scanline Emulation") return true;
+  return false;
+}
+
+auto Interface::get(const string& name) -> any {
+  if(name == "Blur Emulation") return settings.blurEmulation;
+  if(name == "Color Emulation") return settings.colorEmulation;
+  if(name == "Scanline Emulation") return settings.scanlineEmulation;
+  return {};
+}
+
+auto Interface::set(const string& name, const any& value) -> bool {
+  if(name == "Blur Emulation" && value.is<bool>()) {
+    settings.blurEmulation = value.get<bool>();
+    system.configureVideoEffects();
+    return true;
+  }
+  if(name == "Color Emulation" && value.is<bool>()) {
+    settings.colorEmulation = value.get<bool>();
+    system.configureVideoPalette();
+    return true;
+  }
+  if(name == "Scanline Emulation" && value.is<bool>()) return settings.scanlineEmulation = value.get<bool>(), true;
+  return false;
+}
+
+auto Interface::exportMemory() -> void {
+  string pathname = {path(cartridge.pathID()), "debug/"};
+  directory::create(pathname);
+
+  if(auto fp = interface->open(cartridge.pathID(), "debug/work.ram", File::Write)) fp->write(cpu.wram, 128 * 1024);
+  if(cartridge.ram.size()) if(auto fp = interface->open(cartridge.pathID(), "debug/program-save.ram", File::Write)) {
+    fp->write(cartridge.ram.data(), cartridge.ram.size());
+  }
+  if(cartridge.has.MCC) if(auto fp = interface->open(cartridge.pathID(), "debug/mcc.ram", File::Write)) {
+    fp->write(mcc.ram.data(), mcc.ram.size());
+  }
+  if(cartridge.has.Event) if(auto fp = interface->open(cartridge.pathID(), "debug/event.ram", File::Write)) {
+    fp->write(event.ram.data(), event.ram.size());
+  }
+  if(cartridge.has.SA1) {
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sa1.internal.ram", File::Write)) {
+      fp->write(sa1.iram.data(), sa1.iram.size());
+    }
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sa1.bitmap-work.ram", File::Write)) {
+      fp->write(sa1.bwram.data(), sa1.bwram.size());
+    }
+  }
+  if(cartridge.has.SuperFX) if(auto fp = interface->open(cartridge.pathID(), "debug/superfx.ram", File::Write)) {
+    fp->write(superfx.ram.data(), superfx.ram.size());
+  }
+  if(cartridge.has.SPC7110) if(auto fp = interface->open(cartridge.pathID(), "debug/spc7110.ram", File::Write)) {
+    fp->write(spc7110.ram.data(), spc7110.ram.size());
+  }
+  if(cartridge.has.SDD1) if(auto fp = interface->open(cartridge.pathID(), "debug/sdd1.ram", File::Write)) {
+    fp->write(sdd1.ram.data(), sdd1.ram.size());
+  }
+  if(cartridge.has.OBC1) if(auto fp = interface->open(cartridge.pathID(), "debug/obc1.ram", File::Write)) {
+    fp->write(obc1.ram.data(), obc1.ram.size());
+  }
+
+  if(cartridge.has.SufamiTurboSlots) {
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sufamiturbo.slota.ram", File::Write)) {
+      fp->write(sufamiturboA.ram.data(), sufamiturboA.ram.size());
+    }
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sufamiturbo.slotb.ram", File::Write)) {
+      fp->write(sufamiturboB.ram.data(), sufamiturboB.ram.size());
+    }
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/interface/interface.hpp b/higan/sfc-balanced/interface/interface.hpp
new file mode 100644
index 0000000..84a8731
--- /dev/null
+++ b/higan/sfc-balanced/interface/interface.hpp
@@ -0,0 +1,92 @@
+#include <sfc-balanced/debugger.hpp>
+
+namespace SuperFamicom {
+
+struct ID {
+  enum : uint {
+    System,
+    SuperFamicom,
+    GameBoy,
+    BSMemory,
+    SufamiTurboA,
+    SufamiTurboB,
+  };
+
+  struct Port { enum : uint {
+    Controller1,
+    Controller2,
+    Expansion,
+  };};
+
+  struct Device { enum : uint {
+    None,
+    Gamepad,
+    Mouse,
+    SuperMultitap,
+    SuperScope,
+    Justifier,
+    Justifiers,
+
+    Satellaview,
+    S21FX,
+  };};
+};
+
+struct Interface : Emulator::Interface {
+  using Emulator::Interface::load;
+
+  Interface();
+
+  auto manifest() -> string override;
+  auto title() -> string override;
+
+  auto videoSize() -> VideoSize override;
+  auto videoSize(uint width, uint height, bool arc) -> VideoSize override;
+  auto videoFrequency() -> double override;
+  auto videoColors() -> uint32 override;
+  auto videoColor(uint32 color) -> uint64 override;
+
+  auto audioFrequency() -> double override;
+
+  auto loaded() -> bool override;
+  auto sha256() -> string override;
+  auto load(uint id) -> bool override;
+  auto save() -> void override;
+  auto unload() -> void override;
+
+  auto connect(uint port, uint device) -> void override;
+  auto power() -> void override;
+  auto reset() -> void override;
+  auto run() -> void override;
+
+  auto rtc() -> bool override;
+  auto rtcsync() -> void override;
+
+  auto serialize() -> serializer override;
+  auto unserialize(serializer&) -> bool override;
+
+  auto cheatSet(const string_vector&) -> void override;
+
+  auto cap(const string& name) -> bool override;
+  auto get(const string& name) -> any override;
+  auto set(const string& name, const any& value) -> bool override;
+
+  //debugger functions
+  auto exportMemory() -> void override;
+};
+
+struct Settings {
+  bool blurEmulation = true;
+  bool colorEmulation = true;
+  bool scanlineEmulation = true;
+
+  uint controllerPort1 = 0;
+  uint controllerPort2 = 0;
+  uint expansionPort = 0;
+  bool random = true;
+};
+
+extern Interface* interface;
+extern Settings settings;
+
+}
diff --git a/higan/sfc-balanced/memory/memory-inline.hpp b/higan/sfc-balanced/memory/memory-inline.hpp
new file mode 100644
index 0000000..babbd5d
--- /dev/null
+++ b/higan/sfc-balanced/memory/memory-inline.hpp
@@ -0,0 +1,79 @@
+//Memory
+
+auto Memory::size() const -> uint { return 0; }
+
+//StaticRAM
+
+StaticRAM::StaticRAM(uint size) : _size(size) { _data = new uint8[_size]; }
+StaticRAM::~StaticRAM() { delete[] _data; }
+
+auto StaticRAM::data() -> uint8* { return _data; }
+auto StaticRAM::size() const -> uint { return _size; }
+
+auto StaticRAM::read(uint24 addr, uint8) -> uint8 { return _data[addr]; }
+auto StaticRAM::write(uint24 addr, uint8 data) -> void { _data[addr] = data; }
+auto StaticRAM::operator[](uint24 addr) -> uint8& { return _data[addr]; }
+auto StaticRAM::operator[](uint24 addr) const -> const uint8& { return _data[addr]; }
+
+//MappedRAM
+
+auto MappedRAM::reset() -> void {
+  delete[] _data;
+  _data = nullptr;
+  _size = 0;
+  _writeProtect = false;
+}
+
+auto MappedRAM::allocate(uint size) -> void {
+  reset();
+  _data = new uint8[_size = size];
+  memory::fill(_data, _size, 0xff);
+}
+
+auto MappedRAM::writeProtect(bool writeProtect) -> void { _writeProtect = writeProtect; }
+auto MappedRAM::data() -> uint8* { return _data; }
+auto MappedRAM::size() const -> uint { return _size; }
+
+auto MappedRAM::read(uint24 addr, uint8) -> uint8 { return _data[addr]; }
+auto MappedRAM::write(uint24 addr, uint8 data) -> void { if(!_writeProtect) _data[addr] = data; }
+auto MappedRAM::operator[](uint24 addr) const -> const uint8& { return _data[addr]; }
+
+//Bus
+
+auto Bus::mirror(uint addr, uint size) -> uint {
+  if(size == 0) return 0;
+  uint base = 0;
+  uint mask = 1 << 23;
+  while(addr >= size) {
+    while(!(addr & mask)) mask >>= 1;
+    addr -= mask;
+    if(size > mask) {
+      size -= mask;
+      base += mask;
+    }
+    mask >>= 1;
+  }
+  return base + addr;
+}
+
+auto Bus::reduce(uint addr, uint mask) -> uint {
+  while(mask) {
+    uint bits = (mask & -mask) - 1;
+    addr = ((addr >> 1) & ~bits) | (addr & bits);
+    mask = (mask & (mask - 1)) >> 1;
+  }
+  return addr;
+}
+
+auto Bus::read(uint24 addr, uint8 data) -> uint8 {
+  data = reader[lookup[addr]](target[addr], data);
+  if(cheat) {
+    if(!(addr & 0x40e000)) addr = 0x7e0000 | (addr & 0x1fff);  //de-mirror WRAM
+    if(auto result = cheat.find<1>(addr, data)) return result();
+  }
+  return data;
+}
+
+auto Bus::write(uint24 addr, uint8 data) -> void {
+  return writer[lookup[addr]](target[addr], data);
+}
diff --git a/higan/sfc-balanced/memory/memory.cpp b/higan/sfc-balanced/memory/memory.cpp
new file mode 100644
index 0000000..483866e
--- /dev/null
+++ b/higan/sfc-balanced/memory/memory.cpp
@@ -0,0 +1,102 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+Bus bus;
+
+Bus::~Bus() {
+  if(lookup) delete[] lookup;
+  if(target) delete[] target;
+}
+
+auto Bus::reset() -> void {
+  for(auto id : range(256)) {
+    reader[id].reset();
+    writer[id].reset();
+    counter[id] = 0;
+  }
+
+  if(lookup) delete[] lookup;
+  if(target) delete[] target;
+
+  lookup = new uint8 [16 * 1024 * 1024]();
+  target = new uint32[16 * 1024 * 1024]();
+
+  reader[0] = [](uint24, uint8 data) -> uint8 { return data; };
+  writer[0] = [](uint24, uint8) -> void {};
+}
+
+auto Bus::map(
+  const function<uint8 (uint24, uint8)>& read,
+  const function<void (uint24, uint8)>& write,
+  const string& addr, uint size, uint base, uint mask
+) -> void {
+  uint id = 1;
+  while(counter[id]) {
+    if(++id >= 256) return print("SFC error: bus map exhausted\n");
+  }
+
+  reader[id] = read;
+  writer[id] = write;
+
+  auto p = addr.split(":", 1L);
+  auto banks = p(0).split(",");
+  auto addrs = p(1).split(",");
+  for(auto& bank : banks) {
+    for(auto& addr : addrs) {
+      auto bankRange = bank.split("-", 1L);
+      auto addrRange = addr.split("-", 1L);
+      uint bankLo = bankRange(0).hex();
+      uint bankHi = bankRange(1, bankRange(0)).hex();
+      uint addrLo = addrRange(0).hex();
+      uint addrHi = addrRange(1, addrRange(0)).hex();
+
+      for(uint bank = bankLo; bank <= bankHi; bank++) {
+        for(uint addr = addrLo; addr <= addrHi; addr++) {
+          uint pid = lookup[bank << 16 | addr];
+          if(pid && --counter[pid] == 0) {
+            reader[pid].reset();
+            writer[pid].reset();
+          }
+
+          uint offset = reduce(bank << 16 | addr, mask);
+          if(size) offset = base + mirror(offset, size - base);
+          lookup[bank << 16 | addr] = id;
+          target[bank << 16 | addr] = offset;
+          counter[id]++;
+        }
+      }
+    }
+  }
+}
+
+auto Bus::unmap(const string& addr) -> void {
+  auto p = addr.split(":", 1L);
+  auto banks = p(0).split(",");
+  auto addrs = p(1).split(",");
+  for(auto& bank : banks) {
+    for(auto& addr : addrs) {
+      auto bankRange = bank.split("-", 1L);
+      auto addrRange = addr.split("-", 1L);
+      uint bankLo = bankRange(0).hex();
+      uint bankHi = bankRange(1, bankRange(0)).hex();
+      uint addrLo = addrRange(0).hex();
+      uint addrHi = addrRange(1, addrRange(1)).hex();
+
+      for(uint bank = bankLo; bank <= bankHi; bank++) {
+        for(uint addr = addrLo; addr <= addrHi; addr++) {
+          uint pid = lookup[bank << 16 | addr];
+          if(pid && --counter[pid] == 0) {
+            reader[pid].reset();
+            writer[pid].reset();
+          }
+
+          lookup[bank << 16 | addr] = 0;
+          target[bank << 16 | addr] = 0;
+        }
+      }
+    }
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/memory/memory.hpp b/higan/sfc-balanced/memory/memory.hpp
new file mode 100644
index 0000000..6dadbd1
--- /dev/null
+++ b/higan/sfc-balanced/memory/memory.hpp
@@ -0,0 +1,68 @@
+struct Memory {
+  virtual inline auto size() const -> uint;
+  virtual auto read(uint24 addr, uint8 data = 0) -> uint8 = 0;
+  virtual auto write(uint24 addr, uint8 data) -> void = 0;
+};
+
+struct StaticRAM : Memory {
+  inline StaticRAM(uint size);
+  inline ~StaticRAM();
+
+  inline auto data() -> uint8*;
+  inline auto size() const -> uint;
+
+  inline auto read(uint24 addr, uint8 data = 0) -> uint8;
+  inline auto write(uint24 addr, uint8 data) -> void;
+  inline auto operator[](uint24 addr) -> uint8&;
+  inline auto operator[](uint24 addr) const -> const uint8&;
+
+private:
+  uint8* _data = nullptr;
+  uint _size = 0;
+};
+
+struct MappedRAM : Memory {
+  inline auto reset() -> void;
+  inline auto allocate(uint) -> void;
+
+  inline auto writeProtect(bool writeProtect) -> void;
+  inline auto data() -> uint8*;
+  inline auto size() const -> uint;
+
+  inline auto read(uint24 addr, uint8 data = 0) -> uint8;
+  inline auto write(uint24 addr, uint8 data) -> void;
+  inline auto operator[](uint24 addr) const -> const uint8&;
+
+private:
+  uint8* _data = nullptr;
+  uint _size = 0;
+  bool _writeProtect = false;
+};
+
+struct Bus {
+  alwaysinline static auto mirror(uint addr, uint size) -> uint;
+  alwaysinline static auto reduce(uint addr, uint mask) -> uint;
+
+  ~Bus();
+
+  alwaysinline auto read(uint24 addr, uint8 data) -> uint8;
+  alwaysinline auto write(uint24 addr, uint8 data) -> void;
+
+  auto reset() -> void;
+  auto map(
+    const function<uint8 (uint24, uint8)>& read,
+    const function<void (uint24, uint8)>& write,
+    const string& addr, uint size = 0, uint base = 0, uint mask = 0
+  ) -> void;
+  auto unmap(const string& addr) -> void;
+
+private:
+  uint8* lookup = nullptr;
+  uint32* target = nullptr;
+
+  function<auto (uint24, uint8) -> uint8> reader[256];
+  function<auto (uint24, uint8) -> void> writer[256];
+  uint24 counter[256];
+};
+
+extern Bus bus;
diff --git a/higan/sfc-balanced/ppu/background/background.cpp b/higan/sfc-balanced/ppu/background/background.cpp
new file mode 100644
index 0000000..e6d9447
--- /dev/null
+++ b/higan/sfc-balanced/ppu/background/background.cpp
@@ -0,0 +1,33 @@
+auto PPU::Background::getTile(uint x, uint y) -> uint16 {
+  x = (x & ppu.bg_info[id].maskX) >> ppu.bg_info[id].tileWidth;
+  y = (y & ppu.bg_info[id].maskY) >> ppu.bg_info[id].tileHeight;
+
+  uint16 offset = ((y & 0x1f) << 5) + (x & 0x1f);
+  if(x & 0x20) offset += ppu.bg_info[id].screenX;
+  if(y & 0x20) offset += ppu.bg_info[id].screenY;
+
+  const uint16 address = io.screenAddress + offset;
+  return ppu.vram[address];
+}
+
+auto PPU::Background::reset() -> void {
+  io.tiledataAddress = 0x0000;
+  io.screenAddress = 0x0000;
+  io.screenSize = ScreenSize::Size32x32;
+  io.mosaic = 0;
+  io.tileSize = TileSize::Size8x8;
+  io.mode = 0;
+  for(auto& p : io.priority) p = 0;
+  io.aboveEnable = false;
+  io.belowEnable = false;
+  io.hoffset = 0x0000;
+  io.voffset = 0x0000;
+
+  //x = 0;
+  y = 0;
+
+  tile = 0;
+  priority = 0;
+  paletteNumber = 0;
+  paletteIndex = 0;
+}
diff --git a/higan/sfc-balanced/ppu/background/background.hpp b/higan/sfc-balanced/ppu/background/background.hpp
new file mode 100644
index 0000000..11423e0
--- /dev/null
+++ b/higan/sfc-balanced/ppu/background/background.hpp
@@ -0,0 +1,46 @@
+struct Background {
+  Background(uint id) : id(id) {}
+
+  auto reset() -> void;
+
+  auto getTile(uint x, uint y) -> uint16;
+
+  auto serialize(serializer&) -> void;
+
+  struct ID { enum : uint { BG1, BG2, BG3, BG4 }; };
+  const uint id;
+
+  struct Mode { enum : uint { BPP2, BPP4, BPP8, Mode7, Inactive }; };
+  struct ScreenSize { enum : uint { Size32x32, Size32x64, Size64x32, Size64x64 }; };
+  struct TileSize { enum : uint { Size8x8, Size16x16 }; };
+  struct Screen { enum : uint { Above, Below }; };
+
+  struct IO {
+    uint16 tiledataAddress;
+    uint16 screenAddress;
+    uint2 screenSize;
+    uint4 mosaic;
+    bool tileSize;
+
+    uint mode;
+    uint priority[2];
+
+    bool aboveEnable;
+    bool belowEnable;
+
+    uint16 hoffset;
+    uint16 voffset;
+  } io;
+
+  struct {
+    //int x;
+    int y;
+
+    uint tile;
+    uint priority;
+    uint paletteNumber;
+    uint paletteIndex;
+  };
+
+  friend class PPU;
+};
diff --git a/higan/sfc-balanced/ppu/counter/counter-inline.hpp b/higan/sfc-balanced/ppu/counter/counter-inline.hpp
new file mode 100644
index 0000000..711bf89
--- /dev/null
+++ b/higan/sfc-balanced/ppu/counter/counter-inline.hpp
@@ -0,0 +1,85 @@
+//this should only be called by CPU::PPUcounter::tick();
+//keeps track of previous counter positions in history table
+auto PPUcounter::tick() -> void {
+  status.hcounter += 2;  //increment by smallest unit of time
+  if(status.hcounter >= 1360 && status.hcounter == lineclocks()) {
+    status.hcounter = 0;
+    vcounterTick();
+  }
+
+  history.index = (history.index + 1) & 2047;
+  history.field   [history.index] = status.field;
+  history.vcounter[history.index] = status.vcounter;
+  history.hcounter[history.index] = status.hcounter;
+}
+
+//this should only be called by PPU::PPUcounter::tick(n);
+//allows stepping by more than the smallest unit of time
+auto PPUcounter::tick(uint clocks) -> void {
+  status.hcounter += clocks;
+  if(status.hcounter >= lineclocks()) {
+    status.hcounter -= lineclocks();
+    vcounterTick();
+  }
+}
+
+//internal
+auto PPUcounter::vcounterTick() -> void {
+  if(++status.vcounter == 128) status.interlace = ppu.interlace();
+
+  if((system.region() == System::Region::NTSC && status.interlace == false && status.vcounter == 262)
+  || (system.region() == System::Region::NTSC && status.interlace == true  && status.vcounter == 263)
+  || (system.region() == System::Region::NTSC && status.interlace == true  && status.vcounter == 262 && status.field == 1)
+  || (system.region() == System::Region::PAL  && status.interlace == false && status.vcounter == 312)
+  || (system.region() == System::Region::PAL  && status.interlace == true  && status.vcounter == 313)
+  || (system.region() == System::Region::PAL  && status.interlace == true  && status.vcounter == 312 && status.field == 1)
+  ) {
+    status.vcounter = 0;
+    status.field = !status.field;
+  }
+  if(scanline) scanline();
+}
+
+auto PPUcounter::field() const -> bool { return status.field; }
+auto PPUcounter::vcounter() const -> uint16 { return status.vcounter; }
+auto PPUcounter::hcounter() const -> uint16 { return status.hcounter; }
+
+auto PPUcounter::field(uint offset) const -> bool { return history.field[(history.index - (offset >> 1)) & 2047]; }
+auto PPUcounter::vcounter(uint offset) const -> uint16 { return history.vcounter[(history.index - (offset >> 1)) & 2047]; }
+auto PPUcounter::hcounter(uint offset) const -> uint16 { return history.hcounter[(history.index - (offset >> 1)) & 2047]; }
+
+//one PPU dot = 4 CPU clocks
+//
+//PPU dots 323 and 327 are 6 CPU clocks long.
+//this does not apply to NTSC non-interlace scanline 240 on odd fields. this is
+//because the PPU skips one dot to alter the color burst phase of the video signal.
+//
+//dot 323 range = {1292, 1294, 1296}
+//dot 327 range = {1310, 1312, 1314}
+
+auto PPUcounter::hdot() const -> uint16 {
+  if(system.region() == System::Region::NTSC && status.interlace == false && vcounter() == 240 && field() == 1) {
+    return (hcounter() >> 2);
+  } else {
+    return (hcounter() - ((hcounter() > 1292) << 1) - ((hcounter() > 1310) << 1)) >> 2;
+  }
+}
+
+auto PPUcounter::lineclocks() const -> uint16 {
+  if(system.region() == System::Region::NTSC && status.interlace == false &&  vcounter() == 240 &&  field() == 1) return 1360;
+  return 1364;
+}
+
+auto PPUcounter::reset() -> void {
+  status.interlace = false;
+  status.field     = 0;
+  status.vcounter  = 0;
+  status.hcounter  = 0;
+  history.index    = 0;
+
+  for(auto n : range(2048)) {
+    history.field   [n] = 0;
+    history.vcounter[n] = 0;
+    history.hcounter[n] = 0;
+  }
+}
diff --git a/higan/sfc-balanced/ppu/counter/counter.hpp b/higan/sfc-balanced/ppu/counter/counter.hpp
new file mode 100644
index 0000000..9937bdb
--- /dev/null
+++ b/higan/sfc-balanced/ppu/counter/counter.hpp
@@ -0,0 +1,49 @@
+//PPUcounter emulates the H/V latch counters of the S-PPU2.
+//
+//real hardware has the S-CPU maintain its own copy of these counters that are
+//updated based on the state of the S-PPU Vblank and Hblank pins. emulating this
+//would require full lock-step synchronization for every clock tick.
+//to bypass this and allow the two to run out-of-order, both the CPU and PPU
+//classes inherit PPUcounter and keep their own counters.
+//the timers are kept in sync, as the only differences occur on V=240 and V=261,
+//based on interlace. thus, we need only synchronize and fetch interlace at any
+//point before this in the frame, which is handled internally by this class at
+//V=128.
+
+struct PPUcounter {
+  alwaysinline auto tick() -> void;
+  alwaysinline auto tick(uint clocks) -> void;
+
+  alwaysinline auto field() const -> bool;
+  alwaysinline auto vcounter() const -> uint16;
+  alwaysinline auto hcounter() const -> uint16;
+  inline auto hdot() const -> uint16;
+  inline auto lineclocks() const -> uint16;
+
+  alwaysinline auto field(uint offset) const -> bool;
+  alwaysinline auto vcounter(uint offset) const -> uint16;
+  alwaysinline auto hcounter(uint offset) const -> uint16;
+
+  inline auto reset() -> void;
+  auto serialize(serializer&) -> void;
+
+  function<auto () -> void> scanline;
+
+private:
+  inline auto vcounterTick() -> void;
+
+  struct {
+    bool interlace;
+    bool field;
+    uint16 vcounter;
+    uint16 hcounter;
+  } status;
+
+  struct {
+    bool field[2048];
+    uint16 vcounter[2048];
+    uint16 hcounter[2048];
+
+    int32 index;
+  } history;
+};
diff --git a/higan/sfc-balanced/ppu/io.cpp b/higan/sfc-balanced/ppu/io.cpp
new file mode 100644
index 0000000..8ce4348
--- /dev/null
+++ b/higan/sfc-balanced/ppu/io.cpp
@@ -0,0 +1,755 @@
+auto PPU::addressVRAM() const -> uint16 {
+  uint16 address = io.vramAddress;
+  switch(io.vramMapping) {
+  case 0: return address;
+  case 1: return address.bits( 8,15) <<  8 | address.bits(0,4) << 3 | address.bits(5,7);
+  case 2: return address.bits( 9,15) <<  9 | address.bits(0,5) << 3 | address.bits(6,8);
+  case 3: return address.bits(10,15) << 10 | address.bits(0,6) << 3 | address.bits(7,9);
+  }
+  unreachable;
+}
+
+//NOTE: all VRAM writes during active display are invalid. Unlike OAM and CGRAM, they will
+//not be written anywhere at all. The below address ranges for where writes are invalid have
+//been validated on hardware, as has the edge case where the S-CPU MDR can be written if the
+//write occurs during the very last clock cycle of vblank.
+auto PPU::readVRAM() -> uint16 {
+  if(!io.displayDisable && cpu.vcounter() < vdisp()) return 0x0000;
+  auto addr = addressVRAM();
+  auto data = vram[addr];
+  debug(ppu.vram.read, addr << 1 | 0, data.byte(0));
+  debug(ppu.vram.read, addr << 1 | 1, data.byte(1));
+  return data;
+}
+
+auto PPU::writeVRAM(bool byte, uint8 data) -> void {
+  if(!io.displayDisable && cpu.vcounter() < vdisp()) return;
+  auto addr = addressVRAM();
+  vram[addr].byte(byte) = data;
+  tiledataCache.tiledataState[Background::Mode::BPP2][(addr & vram.mask) >> 3] = 1;
+  tiledataCache.tiledataState[Background::Mode::BPP4][(addr & vram.mask) >> 4] = 1;
+  tiledataCache.tiledataState[Background::Mode::BPP8][(addr & vram.mask) >> 5] = 1;
+  debug(ppu.vram.write, addr << 1 | byte, data);
+}
+
+auto PPU::readOAM(uint10 addr) -> uint8 {
+  if(!io.displayDisable && cpu.vcounter() < vdisp()) addr = latch.oamAddress;
+  auto data = obj.oam.read(addr);
+  debug(ppu.oam.read, addr, data);
+  return data;
+}
+
+auto PPU::writeOAM(uint10 addr, uint8 data) -> void {
+  if(!io.displayDisable && cpu.vcounter() < vdisp()) addr = latch.oamAddress;
+  obj.oam.write(addr, data);
+  debug(ppu.oam.write, addr, data);
+}
+
+auto PPU::readCGRAM(bool byte, uint8 addr) -> uint8 {
+  if(!io.displayDisable
+  && cpu.vcounter() > 0 && cpu.vcounter() < vdisp()
+  && cpu.hcounter() >= 88 && cpu.hcounter() < 1096
+  ) addr = latch.cgramAddress;
+  auto data = screen.cgram[addr].byte(byte);
+  debug(ppu.cgram.read, addr << 1 | byte, data);
+  return data;
+}
+
+auto PPU::writeCGRAM(uint8 addr, uint15 data) -> void {
+  if(!io.displayDisable
+  && cpu.vcounter() > 0 && cpu.vcounter() < vdisp()
+  && cpu.hcounter() >= 88 && cpu.hcounter() < 1096
+  ) addr = latch.cgramAddress;
+  screen.cgram[addr] = data;
+  debug(ppu.cgram.write, addr << 1 | 0, data.byte(0));
+  debug(ppu.cgram.write, addr << 1 | 1, data.byte(1));
+}
+
+auto PPU::readIO(uint24 addr, uint8 data) -> uint8 {
+  cpu.synchronize(ppu);
+
+  switch((uint16)addr) {
+
+  case 0x2104: case 0x2105: case 0x2106: case 0x2108:
+  case 0x2109: case 0x210a: case 0x2114: case 0x2115:
+  case 0x2116: case 0x2118: case 0x2119: case 0x211a:
+  case 0x2124: case 0x2125: case 0x2126: case 0x2128:
+  case 0x2129: case 0x212a: {
+    return ppu1.mdr;
+  }
+
+  //MPYL
+  case 0x2134: {
+    uint24 result = (int16)io.m7a * (int8)(io.m7b >> 8);
+    return ppu1.mdr = result.byte(0);
+  }
+
+  //MPYM
+  case 0x2135: {
+    uint24 result = (int16)io.m7a * (int8)(io.m7b >> 8);
+    return ppu1.mdr = result.byte(1);
+  }
+
+  //MPYH
+  case 0x2136: {
+    uint24 result = (int16)io.m7a * (int8)(io.m7b >> 8);
+    return ppu1.mdr = result.byte(2);
+  }
+
+  //SLHV
+  case 0x2137: {
+    if(cpu.pio().bit(7)) latchCounters();
+    return data;  //CPU MDR
+  }
+
+  //OAMDATAREAD
+  case 0x2138: {
+    ppu1.mdr = readOAM(io.oamAddress++);
+    obj.setFirstSprite();
+    return ppu1.mdr;
+  }
+
+  //VMDATALREAD
+  case 0x2139: {
+    ppu1.mdr = latch.vram.byte(0);
+    if(io.vramIncrementMode == 0) {
+      latch.vram = readVRAM();
+      io.vramAddress += io.vramIncrementSize;
+    }
+    return ppu1.mdr;
+  }
+
+  //VMDATAHREAD
+  case 0x213a: {
+    ppu1.mdr = latch.vram.byte(1);
+    if(io.vramIncrementMode == 1) {
+      latch.vram = readVRAM();
+      io.vramAddress += io.vramIncrementSize;
+    }
+    return ppu1.mdr;
+  }
+
+  //CGDATAREAD
+  case 0x213b: {
+    //note: CGRAM palette data is 15-bits (0,bbbbb,ggggg,rrrrr)
+    //therefore, the high byte read from each color does not
+    //update bit 7 of the PPU2 MDR.
+    if(io.cgramAddressLatch++ == 0) {
+      ppu2.mdr.bits(0,7) = readCGRAM(0, io.cgramAddress);
+    } else {
+      ppu2.mdr.bits(0,6) = readCGRAM(1, io.cgramAddress++);
+    }
+    return ppu2.mdr;
+  }
+
+  //OPHCT
+  case 0x213c: {
+    if(latch.hcounter++ == 0) {
+      ppu2.mdr.bits(0,7) = io.hcounter.bits(0,7);
+    } else {
+      ppu2.mdr.bit (0  ) = io.hcounter.bit (  8);
+    }
+    return ppu2.mdr;
+  }
+
+  //OPVCT
+  case 0x213d: {
+    if(latch.vcounter++ == 0) {
+      ppu2.mdr.bits(0,7) = io.vcounter.bits(0,7);
+    } else {
+      ppu2.mdr.bit (0  ) = io.vcounter.bit (  8);
+    }
+    return ppu2.mdr;
+  };
+
+  //STAT77
+  case 0x213e: {
+    ppu1.mdr.bits(0,3) = ppu1.version;
+    ppu1.mdr.bit (  5) = 0;
+    ppu1.mdr.bit (  6) = obj.io.rangeOver;
+    ppu1.mdr.bit (  7) = obj.io.timeOver;
+    return ppu1.mdr;
+  }
+
+  //STAT78
+  case 0x213f: {
+    latch.hcounter = 0;
+    latch.vcounter = 0;
+
+    ppu2.mdr.bits(0,3) = ppu2.version;
+    ppu2.mdr.bit (  4) = system.region() == System::Region::PAL;  //0 = NTSC
+    if(!cpu.pio().bit(7)) {
+      ppu2.mdr.bit( 6) = 1;
+    } else {
+      ppu2.mdr.bit( 6) = latch.counters;
+      latch.counters = 0;
+    }
+    ppu2.mdr.bit (  7) = field();
+    return ppu2.mdr;
+  }
+
+  }
+
+  return data;
+}
+
+auto PPU::writeIO(uint24 addr, uint8 data) -> void {
+  cpu.synchronize(ppu);
+
+  switch((uint16)addr) {
+
+  //INIDISP
+  case 0x2100: {
+    if(io.displayDisable && cpu.vcounter() == vdisp()) obj.addressReset();
+    io.displayBrightness = data.bits(0,3);
+    io.displayDisable    = data.bit (7);
+    return;
+  }
+
+  //OBSEL
+  case 0x2101: {
+    obj.io.tiledataAddress = data.bits(0,2) << 13;
+    obj.io.nameselect      = data.bits(3,4);
+    obj.io.baseSize        = data.bits(5,7);
+    for(auto& object : obj.oam.object) object.updateSize();
+    return;
+  }
+
+  //OAMADDL
+  case 0x2102: {
+    io.oamBaseAddress = (io.oamBaseAddress & 0x0200) | (data << 1);
+    obj.addressReset();
+    return;
+  }
+
+  //OAMADDH
+  case 0x2103: {
+    io.oamBaseAddress = data.bit(0) << 9 | (io.oamBaseAddress & 0x01fe);
+    io.oamPriority = data.bit(7);
+    obj.addressReset();
+    return;
+  }
+
+  //OAMDATA
+  case 0x2104: {
+    bool latchBit = io.oamAddress & 1;
+    uint10 address = io.oamAddress++;
+
+    if(latchBit == 0) latch.oam = data;
+    if(address.bit(9)) {
+      writeOAM(address, data);
+    } else if(latchBit == 1) {
+      writeOAM((address & ~1) + 0, latch.oam);
+      writeOAM((address & ~1) + 1, data);
+    }
+    obj.setFirstSprite();
+    return;
+  }
+
+  //BGMODE
+  case 0x2105: {
+    io.bgMode       = data.bits(0,2);
+    io.bgPriority   = data.bit (  3);
+    bg1.io.tileSize = data.bit (  4);
+    bg2.io.tileSize = data.bit (  5);
+    bg3.io.tileSize = data.bit (  6);
+    bg4.io.tileSize = data.bit (  7);
+    updateVideoMode();
+    return;
+  }
+
+  //MOSAIC
+  case 0x2106: {
+    uint mosaicSize = data.bits(4,7);
+    bg1.io.mosaic = data.bit(0) ? mosaicSize : 0;
+    bg2.io.mosaic = data.bit(1) ? mosaicSize : 0;
+    bg3.io.mosaic = data.bit(2) ? mosaicSize : 0;
+    bg4.io.mosaic = data.bit(3) ? mosaicSize : 0;
+    return;
+  }
+
+  //BG1SC
+  case 0x2107: {
+    bg1.io.screenSize    = data.bits(0,1);
+    bg1.io.screenAddress = data.bits(2,7) << 10;
+    return;
+  }
+
+  //BG2SC
+  case 0x2108: {
+    bg2.io.screenSize    = data.bits(0,1);
+    bg2.io.screenAddress = data.bits(2,7) << 10;
+    return;
+  }
+
+  //BG3SC
+  case 0x2109: {
+    bg3.io.screenSize    = data.bits(0,1);
+    bg3.io.screenAddress = data.bits(2,7) << 10;
+    return;
+  }
+
+  //BG4SC
+  case 0x210a: {
+    bg4.io.screenSize    = data.bits(0,1);
+    bg4.io.screenAddress = data.bits(2,7) << 10;
+    return;
+  }
+
+  //BG12NBA
+  case 0x210b: {
+    bg1.io.tiledataAddress = data.bits(0,3) << 12;
+    bg2.io.tiledataAddress = data.bits(4,7) << 12;
+    return;
+  }
+
+  //BG34NBA
+  case 0x210c: {
+    bg3.io.tiledataAddress = data.bits(0,3) << 12;
+    bg4.io.tiledataAddress = data.bits(4,7) << 12;
+    return;
+  }
+
+  //BG1HOFS
+  case 0x210d: {
+    io.hoffsetMode7 = data << 8 | latch.mode7;
+    latch.mode7 = data;
+
+    bg1.io.hoffset = data << 8 | (latch.bgofs & ~7) | (bg1.io.hoffset >> 8 & 7);
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG1VOFS
+  case 0x210e: {
+    io.voffsetMode7 = data << 8 | latch.mode7;
+    latch.mode7 = data;
+
+    bg1.io.voffset = data << 8 | latch.bgofs;
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG2HOFS
+  case 0x210f: {
+    bg2.io.hoffset = data << 8 | (latch.bgofs & ~7) | (bg2.io.hoffset >> 8 & 7);
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG2VOFS
+  case 0x2110: {
+    bg2.io.voffset = data << 8 | latch.bgofs;
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG3HOFS
+  case 0x2111: {
+    bg3.io.hoffset = data << 8 | (latch.bgofs & ~7) | (bg3.io.hoffset >> 8 & 7);
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG3VOFS
+  case 0x2112: {
+    bg3.io.voffset = data << 8 | latch.bgofs;
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG4HOFS
+  case 0x2113: {
+    bg4.io.hoffset = data << 8 | (latch.bgofs & ~7) | (bg4.io.hoffset >> 8 & 7);
+    latch.bgofs = data;
+    return;
+  }
+
+  //BG4VOFS
+  case 0x2114: {
+    bg4.io.voffset = data << 8 | latch.bgofs;
+    latch.bgofs = data;
+    return;
+  }
+
+  //VMAIN
+  case 0x2115: {
+    static const uint size[4] = {1, 32, 128, 128};
+    io.vramIncrementSize = size[data.bits(0,1)];
+    io.vramMapping       = data.bits(2,3);
+    io.vramIncrementMode = data.bit (  7);
+    return;
+  }
+
+  //VMADDL
+  case 0x2116: {
+    io.vramAddress.byte(0) = data;
+    latch.vram = readVRAM();
+    return;
+  }
+
+  //VMADDH
+  case 0x2117: {
+    io.vramAddress.byte(1) = data;
+    latch.vram = readVRAM();
+    return;
+  }
+
+  //VMDATAL
+  case 0x2118: {
+    writeVRAM(0, data);
+    if(io.vramIncrementMode == 0) io.vramAddress += io.vramIncrementSize;
+    return;
+  }
+
+  //VMDATAH
+  case 0x2119: {
+    writeVRAM(1, data);
+    if(io.vramIncrementMode == 1) io.vramAddress += io.vramIncrementSize;
+    return;
+  }
+
+  //M7SEL
+  case 0x211a: {
+    io.hflipMode7  = data.bit (  0);
+    io.vflipMode7  = data.bit (  1);
+    io.repeatMode7 = data.bits(6,7);
+    return;
+  }
+
+  //M7A
+  case 0x211b: {
+    io.m7a = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //M7B
+  case 0x211c: {
+    io.m7b = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //M7C
+  case 0x211d: {
+    io.m7c = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //M7D
+  case 0x211e: {
+    io.m7d = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //M7X
+  case 0x211f: {
+    io.m7x = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //M7Y
+  case 0x2120: {
+    io.m7y = data << 8 | latch.mode7;
+    latch.mode7 = data;
+    return;
+  }
+
+  //CGADD
+  case 0x2121: {
+    io.cgramAddress = data;
+    io.cgramAddressLatch = 0;
+    return;
+  }
+
+  //CGDATA
+  case 0x2122: {
+    //note: CGRAM palette data format is 15-bits
+    //(0,bbbbb,ggggg,rrrrr). Highest bit is ignored,
+    //as evidenced by $213b CGRAM data reads.
+    if(io.cgramAddressLatch++ == 0) {
+      latch.cgram = data;
+    } else {
+      writeCGRAM(io.cgramAddress++, data.bits(0,6) << 8 | latch.cgram);
+    }
+    return;
+  }
+
+  //W12SEL
+  case 0x2123: {
+    window.io.bg1.oneInvert = data.bit(0);
+    window.io.bg1.oneEnable = data.bit(1);
+    window.io.bg1.twoInvert = data.bit(2);
+    window.io.bg1.twoEnable = data.bit(3);
+    window.io.bg2.oneInvert = data.bit(4);
+    window.io.bg2.oneEnable = data.bit(5);
+    window.io.bg2.twoInvert = data.bit(6);
+    window.io.bg2.twoEnable = data.bit(7);
+    return;
+  }
+
+  //W34SEL
+  case 0x2124: {
+    window.io.bg3.oneInvert = data.bit(0);
+    window.io.bg3.oneEnable = data.bit(1);
+    window.io.bg3.twoInvert = data.bit(2);
+    window.io.bg3.twoEnable = data.bit(3);
+    window.io.bg4.oneInvert = data.bit(4);
+    window.io.bg4.oneEnable = data.bit(5);
+    window.io.bg4.twoInvert = data.bit(6);
+    window.io.bg4.twoEnable = data.bit(7);
+    return;
+  }
+
+  //WOBJSEL
+  case 0x2125: {
+    window.io.obj.oneInvert = data.bit(0);
+    window.io.obj.oneEnable = data.bit(1);
+    window.io.obj.twoInvert = data.bit(2);
+    window.io.obj.twoEnable = data.bit(3);
+    window.io.col.oneInvert = data.bit(4);
+    window.io.col.oneEnable = data.bit(5);
+    window.io.col.twoInvert = data.bit(6);
+    window.io.col.twoEnable = data.bit(7);
+    return;
+  }
+
+  //WH0
+  case 0x2126: {
+    window.io.oneLeft = data;
+    return;
+  }
+
+  //WH1
+  case 0x2127: {
+    window.io.oneRight = data;
+    return;
+  }
+
+  //WH2
+  case 0x2128: {
+    window.io.twoLeft = data;
+    return;
+  }
+
+  //WH3
+  case 0x2129: {
+    window.io.twoRight = data;
+    return;
+  }
+
+  //WBGLOG
+  case 0x212a: {
+    window.io.bg1.mask = data.bits(0,1);
+    window.io.bg2.mask = data.bits(2,3);
+    window.io.bg3.mask = data.bits(4,5);
+    window.io.bg4.mask = data.bits(6,7);
+    return;
+  }
+
+  //WOBJLOG
+  case 0x212b: {
+    window.io.obj.mask = data.bits(0,1);
+    window.io.col.mask = data.bits(2,3);
+    return;
+  }
+
+  //TM
+  case 0x212c: {
+    bg1.io.aboveEnable = data.bit(0);
+    bg2.io.aboveEnable = data.bit(1);
+    bg3.io.aboveEnable = data.bit(2);
+    bg4.io.aboveEnable = data.bit(3);
+    obj.io.aboveEnable = data.bit(4);
+    return;
+  }
+
+  //TS
+  case 0x212d: {
+    bg1.io.belowEnable = data.bit(0);
+    bg2.io.belowEnable = data.bit(1);
+    bg3.io.belowEnable = data.bit(2);
+    bg4.io.belowEnable = data.bit(3);
+    obj.io.belowEnable = data.bit(4);
+    return;
+  }
+
+  //TMW
+  case 0x212e: {
+    window.io.bg1.aboveEnable = data.bit(0);
+    window.io.bg2.aboveEnable = data.bit(1);
+    window.io.bg3.aboveEnable = data.bit(2);
+    window.io.bg4.aboveEnable = data.bit(3);
+    window.io.obj.aboveEnable = data.bit(4);
+    return;
+  }
+
+  //TSW
+  case 0x212f: {
+    window.io.bg1.belowEnable = data.bit(0);
+    window.io.bg2.belowEnable = data.bit(1);
+    window.io.bg3.belowEnable = data.bit(2);
+    window.io.bg4.belowEnable = data.bit(3);
+    window.io.obj.belowEnable = data.bit(4);
+    return;
+  }
+
+  //CGWSEL
+  case 0x2130: {
+    screen.io.directColor   = data.bit (  0);
+    screen.io.blendMode     = data.bit (  1);
+    window.io.col.belowMask = data.bits(4,5);
+    window.io.col.aboveMask = data.bits(6,7);
+    return;
+  }
+
+  //CGADDSUB
+  case 0x2131: {
+    screen.io.bg1.colorEnable  = data.bit(0);
+    screen.io.bg2.colorEnable  = data.bit(1);
+    screen.io.bg3.colorEnable  = data.bit(2);
+    screen.io.bg4.colorEnable  = data.bit(3);
+    screen.io.obj.colorEnable  = data.bit(4);
+    screen.io.back.colorEnable = data.bit(5);
+    screen.io.colorHalve       = data.bit(6);
+    screen.io.colorMode        = data.bit(7);
+    return;
+  }
+
+  //COLDATA
+  case 0x2132: {
+    if(data.bit(5)) screen.io.colorRed   = data.bits(0,4);
+    if(data.bit(6)) screen.io.colorGreen = data.bits(0,4);
+    if(data.bit(7)) screen.io.colorBlue  = data.bits(0,4);
+
+    io.color_rgb = screen.fixedColor();
+    return;
+  }
+
+  //SETINI
+  case 0x2133: {
+    io.interlace     = data.bit(0);
+    obj.io.interlace = data.bit(1);
+    io.overscan      = data.bit(2);
+    io.pseudoHires   = data.bit(3);
+    io.extbg         = data.bit(6);
+    updateVideoMode();
+
+    display.overscan = io.overscan;
+    return;
+  }
+
+  }
+}
+
+auto PPU::latchCounters() -> void {
+  io.hcounter = cpu.hdot();
+  io.vcounter = cpu.vcounter();
+  latch.counters = 1;
+}
+
+auto PPU::updateVideoMode() -> void {
+  switch(io.bgMode) {
+  case 0:
+    bg1.io.mode = Background::Mode::BPP2;
+    bg2.io.mode = Background::Mode::BPP2;
+    bg3.io.mode = Background::Mode::BPP2;
+    bg4.io.mode = Background::Mode::BPP2;
+    memory::assign(bg1.io.priority, 8, 11);
+    memory::assign(bg2.io.priority, 7, 10);
+    memory::assign(bg3.io.priority, 2,  5);
+    memory::assign(bg4.io.priority, 1,  4);
+    memory::assign(obj.io.priority, 3,  6, 9, 12);
+    break;
+
+  case 1:
+    bg1.io.mode = Background::Mode::BPP4;
+    bg2.io.mode = Background::Mode::BPP4;
+    bg3.io.mode = Background::Mode::BPP2;
+    bg4.io.mode = Background::Mode::Inactive;
+    if(io.bgPriority) {
+      memory::assign(bg1.io.priority, 5,  8);
+      memory::assign(bg2.io.priority, 4,  7);
+      memory::assign(bg3.io.priority, 1, 10);
+      memory::assign(obj.io.priority, 2,  3, 6, 9);
+    } else {
+      memory::assign(bg1.io.priority, 6,  9);
+      memory::assign(bg2.io.priority, 5,  8);
+      memory::assign(bg3.io.priority, 1,  3);
+      memory::assign(obj.io.priority, 2,  4, 7, 10);
+    }
+    break;
+
+  case 2:
+    bg1.io.mode = Background::Mode::BPP4;
+    bg2.io.mode = Background::Mode::BPP4;
+    bg3.io.mode = Background::Mode::Inactive;
+    bg4.io.mode = Background::Mode::Inactive;
+    memory::assign(bg1.io.priority, 3, 7);
+    memory::assign(bg2.io.priority, 1, 5);
+    memory::assign(obj.io.priority, 2, 4, 6, 8);
+    break;
+
+  case 3:
+    bg1.io.mode = Background::Mode::BPP8;
+    bg2.io.mode = Background::Mode::BPP4;
+    bg3.io.mode = Background::Mode::Inactive;
+    bg4.io.mode = Background::Mode::Inactive;
+    memory::assign(bg1.io.priority, 3, 7);
+    memory::assign(bg2.io.priority, 1, 5);
+    memory::assign(obj.io.priority, 2, 4, 6, 8);
+    break;
+
+  case 4:
+    bg1.io.mode = Background::Mode::BPP8;
+    bg2.io.mode = Background::Mode::BPP2;
+    bg3.io.mode = Background::Mode::Inactive;
+    bg4.io.mode = Background::Mode::Inactive;
+    memory::assign(bg1.io.priority, 3, 7);
+    memory::assign(bg2.io.priority, 1, 5);
+    memory::assign(obj.io.priority, 2, 4, 6, 8);
+    break;
+
+  case 5:
+    bg1.io.mode = Background::Mode::BPP4;
+    bg2.io.mode = Background::Mode::BPP2;
+    bg3.io.mode = Background::Mode::Inactive;
+    bg4.io.mode = Background::Mode::Inactive;
+    memory::assign(bg1.io.priority, 3, 7);
+    memory::assign(bg2.io.priority, 1, 5);
+    memory::assign(obj.io.priority, 2, 4, 6, 8);
+    break;
+
+  case 6:
+    bg1.io.mode = Background::Mode::BPP4;
+    bg2.io.mode = Background::Mode::Inactive;
+    bg3.io.mode = Background::Mode::Inactive;
+    bg4.io.mode = Background::Mode::Inactive;
+    memory::assign(bg1.io.priority, 2, 5);
+    memory::assign(obj.io.priority, 1, 3, 4, 6);
+    break;
+
+  case 7:
+    if(!io.extbg) {
+      bg1.io.mode = Background::Mode::Mode7;
+      bg2.io.mode = Background::Mode::Inactive;
+      bg3.io.mode = Background::Mode::Inactive;
+      bg4.io.mode = Background::Mode::Inactive;
+      memory::assign(bg1.io.priority, 2);
+      memory::assign(obj.io.priority, 1, 3, 4, 5);
+    } else {
+      bg1.io.mode = Background::Mode::Mode7;
+      bg2.io.mode = Background::Mode::Mode7;
+      bg3.io.mode = Background::Mode::Inactive;
+      bg4.io.mode = Background::Mode::Inactive;
+      memory::assign(bg1.io.priority, 3);
+      memory::assign(bg2.io.priority, 1, 5);
+      memory::assign(obj.io.priority, 2, 4, 6, 7);
+    }
+    break;
+  }
+}
diff --git a/higan/sfc-balanced/ppu/object/oam.cpp b/higan/sfc-balanced/ppu/object/oam.cpp
new file mode 100644
index 0000000..dc9cf9a
--- /dev/null
+++ b/higan/sfc-balanced/ppu/object/oam.cpp
@@ -0,0 +1,72 @@
+auto PPU::OAM::read(uint10 addr) -> uint8 {
+  if(addr < 0x0200) {
+    uint n = addr >> 2;
+    addr &= 3;
+    if(addr == 0) return object[n].x.bits(0,7);
+    if(addr == 1) return object[n].y;
+    if(addr == 2) return object[n].character;
+    return (
+      object[n].nameselect << 0
+    | object[n].palette    << 1
+    | object[n].priority   << 4
+    | object[n].hflip      << 6
+    | object[n].vflip      << 7
+    );
+  } else {
+    uint n = (addr & 0x1f) << 2;  //object#
+    return (
+      object[n + 0].x.bit(8) << 0
+    | object[n + 0].size     << 1
+    | object[n + 1].x.bit(8) << 2
+    | object[n + 1].size     << 3
+    | object[n + 2].x.bit(8) << 4
+    | object[n + 2].size     << 5
+    | object[n + 3].x.bit(8) << 6
+    | object[n + 3].size     << 7
+    );
+  }
+}
+
+auto PPU::OAM::write(uint10 addr, uint8 data) -> void {
+  if(!addr.bit(9)) {
+    uint n = addr >> 2;  //object#
+    addr &= 3;
+    if(addr == 0) { object[n].x.bits(0,7) = data; return; }
+    if(addr == 1) { object[n].y = data; return; }
+    if(addr == 2) { object[n].character = data; return; }
+    object[n].nameselect = data.bit (0);
+    object[n].palette    = data.bits(1,3);
+    object[n].priority   = data.bits(4,5);
+    object[n].hflip      = data.bit (6);
+    object[n].vflip      = data.bit (7);
+  } else {
+    uint n = (addr & 0x1f) << 2;  //object#
+    object[n + 0].x.bit(8) = data.bit(0);
+    object[n + 0].size     = data.bit(1);
+    object[n + 0].updateSize();
+    object[n + 1].x.bit(8) = data.bit(2);
+    object[n + 1].size     = data.bit(3);
+    object[n + 1].updateSize();
+    object[n + 2].x.bit(8) = data.bit(4);
+    object[n + 2].size     = data.bit(5);
+    object[n + 2].updateSize();
+    object[n + 3].x.bit(8) = data.bit(6);
+    object[n + 3].size     = data.bit(7);
+    object[n + 3].updateSize();
+  }
+}
+
+auto PPU::OAM::Object::updateSize() -> void {
+  if(size == 0) {
+    static const uint widths[]  = { 8,  8,  8, 16, 16, 32, 16, 16};
+    static const uint heights[] = { 8,  8,  8, 16, 16, 32, 32, 32};
+    width  = widths[ppu.obj.io.baseSize];
+    //hardware quirk
+    height = ppu.obj.io.interlace && ppu.obj.io.baseSize >= 6 ? 16 : heights[ppu.obj.io.baseSize];
+  } else {
+    static const uint widths[]  = {16, 32, 64, 32, 64, 64, 32, 32};
+    static const uint heights[] = {16, 32, 64, 32, 64, 64, 64, 32};
+    width  = widths[ppu.obj.io.baseSize];
+    height = heights[ppu.obj.io.baseSize];
+  }
+}
diff --git a/higan/sfc-balanced/ppu/object/object.cpp b/higan/sfc-balanced/ppu/object/object.cpp
new file mode 100644
index 0000000..c755d37
--- /dev/null
+++ b/higan/sfc-balanced/ppu/object/object.cpp
@@ -0,0 +1,41 @@
+#include "oam.cpp"
+
+auto PPU::Object::addressReset() -> void {
+  ppu.io.oamAddress = ppu.io.oamBaseAddress;
+  setFirstSprite();
+}
+
+auto PPU::Object::setFirstSprite() -> void {
+  io.firstSprite = !ppu.io.oamPriority ? 0 : (ppu.io.oamAddress >> 2) & 127;
+}
+
+auto PPU::Object::reset() -> void {
+  for(auto& object : oam.object) {
+    object.x = 0;
+    object.y = 0;
+    object.character = 0;
+    object.nameselect = 0;
+    object.vflip = 0;
+    object.hflip = 0;
+    object.priority = 0;
+    object.palette = 0;
+    object.size = 0;
+  }
+
+  t.itemCount = 0;
+  t.tileCount = 0;
+
+  io.aboveEnable = false;
+  io.belowEnable = false;
+  io.interlace = false;
+
+  io.baseSize = 0;
+  io.nameselect = 0;
+  io.tiledataAddress = 0x0000;
+  io.firstSprite = 0;
+
+  for(auto& p : io.priority) p = 0;
+
+  io.timeOver = false;
+  io.rangeOver = false;
+}
diff --git a/higan/sfc-balanced/ppu/object/object.hpp b/higan/sfc-balanced/ppu/object/object.hpp
new file mode 100644
index 0000000..95ac9e8
--- /dev/null
+++ b/higan/sfc-balanced/ppu/object/object.hpp
@@ -0,0 +1,88 @@
+struct OAM {
+  auto read(uint10 addr) -> uint8;
+  auto write(uint10 addr, uint8 data) -> void;
+
+  struct Object {
+    uint8 width;
+    uint8 height;
+
+    uint9 x;
+    uint8 y;
+    uint8 character;
+    bool  nameselect;
+    bool  vflip;
+    bool  hflip;
+    uint2 priority;
+    uint3 palette;
+    bool  size;
+
+    auto updateSize() -> void;
+  } object[128];
+};
+
+struct Object {
+  alwaysinline auto addressReset() -> void;
+  alwaysinline auto setFirstSprite() -> void;
+  auto reset() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  struct ID { enum : uint { OBJ = 4 }; };
+
+  OAM oam;
+
+  struct IO {
+    bool aboveEnable;
+    bool belowEnable;
+    bool interlace;
+
+    uint3  baseSize;
+    uint2  nameselect;
+    uint16 tiledataAddress;
+    uint7  firstSprite;
+
+    uint priority[4];
+
+    bool timeOver;
+    bool rangeOver;
+  } io;
+
+  /*
+  struct Item {
+    bool  valid;
+    uint7 index;
+  };
+
+  struct Tile {
+    bool   valid;
+    uint9  x;
+    uint2  priority;
+    uint8  palette;
+    uint1  hflip;
+    uint32 data;
+  };
+  */
+
+  struct State {
+    //uint x;
+    //uint y;
+
+    uint itemCount;
+    uint tileCount;
+
+    //bool active;
+    //Item item[2][32];
+    //Tile tile[2][34];
+  } t;
+
+  /*
+  struct Output {
+    struct Pixel {
+      uint  priority;  //0 = none (transparent)
+      uint8 palette;
+    } above, below;
+  } output;
+  */
+
+  friend class PPU;
+};
diff --git a/higan/sfc-balanced/ppu/ppu.cpp b/higan/sfc-balanced/ppu/ppu.cpp
new file mode 100644
index 0000000..ac73bd1
--- /dev/null
+++ b/higan/sfc-balanced/ppu/ppu.cpp
@@ -0,0 +1,265 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+PPU ppu;
+
+#include "io.cpp"
+#include "background/background.cpp"
+#include "object/object.cpp"
+#include "window/window.cpp"
+#include "screen/screen.cpp"
+#include "render/render.cpp"
+#include "serialization.cpp"
+
+PPU::PPU() :
+bg1(Background::ID::BG1),
+bg2(Background::ID::BG2),
+bg3(Background::ID::BG3),
+bg4(Background::ID::BG4) {
+  ppu1.version = 1;  //allowed values: 1
+  ppu2.version = 3;  //allowed values: 1, 2, 3
+
+  output = new uint32[512 * 512];
+  output += 16 * 512;  //overscan offset
+
+  tiledataCache.allocate();
+
+  for(uint l : range(16)) {
+    for(uint i : range(4096)) {
+      mosaicTable[l][i] = (i / (l + 1)) * (l + 1);
+    }
+  }
+}
+
+PPU::~PPU() {
+  output -= 16 * 512;
+  delete[] output;
+  tiledataCache.free();
+}
+
+auto PPU::step(uint clocks) -> void {
+  tick(clocks);
+  Thread::step(clocks);
+  synchronize(cpu);
+}
+
+auto PPU::Enter() -> void {
+  while(true) scheduler.synchronize(), ppu.main();
+}
+
+auto PPU::main() -> void {
+  //H =    0 (initialize)
+  scanline();
+  step(10);
+
+  //H =   10 (cache mode7 registers + OAM address reset)
+  cache.hoffsetMode7 = io.hoffsetMode7;
+  cache.voffsetMode7 = io.voffsetMode7;
+  cache.m7a = io.m7a;
+  cache.m7b = io.m7b;
+  cache.m7c = io.m7c;
+  cache.m7d = io.m7d;
+  cache.m7x = io.m7x;
+  cache.m7y = io.m7y;
+  if(vcounter() == vdisp() && !io.displayDisable) obj.addressReset();
+  step(502);
+
+  //H =  512 (render)
+  if(line == 0) obj_renderLine_rto();
+  if(line >= 1 && line < 240) renderLine();
+  step(640);
+
+  //H = 1152 (cache OBSEL)
+  if(cache.obj_baseSize != obj.io.baseSize) {
+    cache.obj_baseSize = obj.io.baseSize;
+  }
+  cache.obj_nameselect = obj.io.nameselect;
+  cache.obj_tiledataAddress = obj.io.tiledataAddress;
+  step(lineclocks() - 1152);  //seek to start of next scanline
+}
+
+auto PPU::load(Markup::Node node) -> bool {
+  ppu1.version = max(1, min(1, node["ppu1/version"].natural()));
+  ppu2.version = max(1, min(3, node["ppu2/version"].natural()));
+  ppu.vram.mask = node["ppu1/ram/size"].natural() - 1;
+  if(ppu.vram.mask != 0xffff) ppu.vram.mask = 0x7fff;
+  return true;
+}
+
+auto PPU::power() -> void {
+  for(auto& n : vram.data) n = random(0x0000);
+  tiledataCache.flush();
+}
+
+auto PPU::reset() -> void {
+  create(Enter, system.colorburst() * 6.0);
+  PPUcounter::reset();
+  memory::fill(output, 512 * 480 * sizeof(uint32));
+
+  function<auto (uint24, uint8) -> uint8> reader{&PPU::readIO, this};
+  function<auto (uint24, uint8) -> void> writer{&PPU::writeIO, this};
+  bus.map(reader, writer, "00-3f,80-bf:2100-213f");
+
+  //open bus support
+  ppu1.mdr = random(0xff);
+  ppu2.mdr = random(0xff);
+
+  latch.vram = random(0x0000);
+  latch.oam = random(0x00);
+  latch.cgram = random(0x00);
+  latch.bgofs = random(0x00);
+  latch.mode7 = random(0x00);
+  latch.counters = false;
+  latch.hcounter = 0;
+  latch.vcounter = 0;
+
+  latch.oamAddress = 0x0000;
+  latch.cgramAddress = 0x00;
+
+  //$2100  INIDISP
+  io.displayDisable = true;
+  io.displayBrightness = 0;
+
+  //$2101
+  cache.obj_baseSize = 0;
+  cache.obj_nameselect = 0;
+  cache.obj_tiledataAddress = 0x0000;
+
+  //$2102  OAMADDL
+  //$2103  OAMADDH
+  io.oamBaseAddress = random(0x0000);
+  io.oamAddress = random(0x0000);
+  io.oamPriority = random(false);
+
+  //$2105  BGMODE
+  io.bgPriority = false;
+  io.bgMode = 0;
+
+  //$2106  MOSAIC
+  io.mosaicCountdown = 0;
+
+  //$210d  BG1HOFS
+  io.hoffsetMode7 = random(0x0000);
+
+  //$210e  BG1VOFS
+  io.voffsetMode7 = random(0x0000);
+
+  //$2115  VMAIN
+  io.vramIncrementMode = random(1);
+  io.vramMapping = random(0);
+  io.vramIncrementSize = 1;
+
+  //$2116  VMADDL
+  //$2117  VMADDH
+  io.vramAddress = random(0x0000);
+
+  //$211a  M7SEL
+  io.repeatMode7 = random(0);
+  io.vflipMode7 = random(false);
+  io.hflipMode7 = random(false);
+
+  //$211b  M7A
+  io.m7a = random(0x0000);
+
+  //$211c  M7B
+  io.m7b = random(0x0000);
+
+  //$211d  M7C
+  io.m7c = random(0x0000);
+
+  //$211e  M7D
+  io.m7d = random(0x0000);
+
+  //$211f  M7X
+  io.m7x = random(0x0000);
+
+  //$2120  M7Y
+  io.m7y = random(0x0000);
+
+  //$2121  CGADD
+  io.cgramAddress = random(0x00);
+  io.cgramAddressLatch = random(0);
+
+  //$2132  COLDATA
+  io.color_rgb = 0x0000;
+
+  //$2133  SETINI
+  io.extbg = random(false);
+  io.pseudoHires = random(false);
+  io.overscan = false;
+  io.interlace = false;
+
+  //$213c  OPHCT
+  io.hcounter = 0;
+
+  //$213d  OPVCT
+  io.vcounter = 0;
+
+  bg1.reset();
+  bg2.reset();
+  bg3.reset();
+  bg4.reset();
+  obj.reset();
+  window.reset();
+  screen.reset();
+
+  //bg line counters
+  io.bg_y[Background::ID::BG1] = 0;
+  io.bg_y[Background::ID::BG2] = 0;
+  io.bg_y[Background::ID::BG3] = 0;
+  io.bg_y[Background::ID::BG4] = 0;
+
+  frame();
+}
+
+auto PPU::scanline() -> void {
+  line = vcounter();
+
+  if(line == 0) {
+    frame();
+
+    //RTO flag reset
+    obj.io.timeOver  = false;
+    obj.io.rangeOver = false;
+  }
+
+  if(line == 1) {
+    //mosaic reset
+    for(int bg_id = Background::ID::BG1; bg_id <= Background::ID::BG4; bg_id++) io.bg_y[bg_id] = 1;
+    io.mosaicCountdown = max(bg1.io.mosaic, bg2.io.mosaic, bg3.io.mosaic, bg4.io.mosaic) + 1;
+    io.mosaicCountdown--;
+  } else {
+    for(int bg_id = Background::ID::BG1; bg_id <= Background::ID::BG4; bg_id++) {
+      auto bg = &bg1;
+      switch(bg_id) {
+      case Background::ID::BG1: bg = &bg1; break;
+      case Background::ID::BG2: bg = &bg2; break;
+      case Background::ID::BG3: bg = &bg3; break;
+      case Background::ID::BG4: bg = &bg4; break;
+      }
+      if(!bg->io.mosaic || !io.mosaicCountdown) io.bg_y[bg_id] = line;
+    }
+    if(!io.mosaicCountdown) io.mosaicCountdown = max(bg1.io.mosaic, bg2.io.mosaic, bg3.io.mosaic, bg4.io.mosaic) + 1;
+    io.mosaicCountdown--;
+  }
+
+  if(line == 241) {
+    scheduler.exit(Scheduler::Event::Frame);
+  }
+}
+
+auto PPU::frame() -> void {
+  if(field() == 0) display.interlace = io.interlace;
+}
+
+auto PPU::refresh() -> void {
+  auto output = this->output;
+  if(!overscan()) output -= 14 * 512;
+  auto pitch = 512; //1024 >> interlace();
+  auto width = 512;
+  auto height = 480; //!interlace() ? 240 : 480;
+  Emulator::video.refresh(output, pitch * sizeof(uint32), width, height);
+}
+
+}
diff --git a/higan/sfc-balanced/ppu/ppu.hpp b/higan/sfc-balanced/ppu/ppu.hpp
new file mode 100644
index 0000000..87399c6
--- /dev/null
+++ b/higan/sfc-balanced/ppu/ppu.hpp
@@ -0,0 +1,191 @@
+struct PPU : Thread, PPUcounter {
+  alwaysinline auto interlace() const -> bool { return display.interlace; }
+  alwaysinline auto overscan() const -> bool { return display.overscan; }
+  alwaysinline auto vdisp() const -> uint { return display.overscan ? 240 : 225; }
+
+  PPU();
+  ~PPU();
+
+  alwaysinline auto step(uint clocks) -> void;
+
+  static auto Enter() -> void;
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  //mmio.cpp
+  alwaysinline auto addressVRAM() const -> uint16;
+  alwaysinline auto readVRAM() -> uint16;
+  alwaysinline auto writeVRAM(bool byte, uint8 data) -> void;
+  alwaysinline auto readOAM(uint10 addr) -> uint8;
+  alwaysinline auto writeOAM(uint10 addr, uint8 data) -> void;
+  alwaysinline auto readCGRAM(bool byte, uint8 addr) -> uint8;
+  alwaysinline auto writeCGRAM(uint8 addr, uint15 data) -> void;
+  auto readIO(uint24 addr, uint8 data) -> uint8;
+  auto writeIO(uint24 addr, uint8 data) -> void;
+  auto latchCounters() -> void;
+  auto updateVideoMode() -> void;
+
+privileged:
+  struct VRAM {
+    auto& operator[](uint addr) { return data[addr & mask]; }
+    uint16 data[64 * 1024];
+    uint mask = 0x7fff;
+  } vram;
+
+  uint32* output = nullptr;
+
+  struct {
+    bool interlace;
+    bool overscan;
+  } display;
+
+  auto scanline() -> void;
+  auto frame() -> void;
+  auto refresh() -> void;
+
+  struct {
+    uint version;
+    uint8 mdr;
+  } ppu1, ppu2;
+
+  auto renderLine() -> void;
+
+  struct Latches {
+    uint16 vram;
+    uint8 oam;
+    uint8 cgram;
+    uint8 bgofs;
+    uint8 mode7;
+    uint1 counters;
+    uint1 hcounter;
+    uint1 vcounter;
+
+    uint10 oamAddress;
+    uint8 cgramAddress;
+  } latch;
+
+  struct IO {
+    uint16 bg_y[4];
+
+    //$2100  INIDSP
+    bool displayDisable;
+    uint4 displayBrightness;
+
+    //$2102  OAMADDL
+    //$2103  OAMADDH
+    uint10 oamBaseAddress;
+    uint10 oamAddress;
+    bool oamPriority;
+
+    //$2105  BGMODE
+    bool bgPriority;
+    uint8 bgMode;
+
+    //$2106  MOSAIC
+    uint16 mosaicCountdown;
+
+    //$210d  BG1HOFS
+    uint16 hoffsetMode7;
+
+    //$210e  BG1VOFS
+    uint16 voffsetMode7;
+
+    //$2115  VMAIN
+    bool vramIncrementMode;
+    uint8 vramMapping;
+    uint8 vramIncrementSize;
+
+    //$2116  VMADDL
+    //$2117  VMADDH
+    uint16 vramAddress;
+
+    //$211a  M7SEL
+    uint8 repeatMode7;
+    bool vflipMode7;
+    bool hflipMode7;
+
+    //$211b  M7A
+    uint16 m7a;
+
+    //$211c  M7B
+    uint16 m7b;
+
+    //$211d  M7C
+    uint16 m7c;
+
+    //$211e  M7D
+    uint16 m7d;
+
+    //$211f  M7X
+    uint16 m7x;
+
+    //$2120  M7Y
+    uint16 m7y;
+
+    //$2121  CGADD
+    uint8 cgramAddress;
+    uint1 cgramAddressLatch;
+
+    //$2132  COLDATA
+    uint16 color_rgb;
+
+    //$2133  SETINI
+    //overscan and interlace are checked once per frame to
+    //determine if entire frame should be interlaced/non-interlace
+    //and overscan adjusted. therefore, the variables act sort of
+    //like a buffer, but they do still affect internal rendering
+    bool extbg;
+    bool pseudoHires;
+    bool overscan;
+    bool interlace;
+
+    //$213c  OPHCT
+    uint16 hcounter;
+
+    //$213d  OPVCT
+    uint16 vcounter;
+  } io;
+
+  uint line;
+
+  struct {
+    //$2101
+    uint8  obj_baseSize;
+    uint8  obj_nameselect;
+    uint16 obj_tiledataAddress;
+
+    //$210d-$210e
+    uint16 hoffsetMode7, voffsetMode7;
+
+    //$211b-$2120
+    uint16 m7a, m7b, m7c, m7d, m7x, m7y;
+  } cache;
+
+  uint16 mosaicTable[16][4096];
+
+  #include "background/background.hpp"
+  #include "screen/screen.hpp"
+  #include "object/object.hpp"
+  #include "window/window.hpp"
+  #include "render/render.hpp"
+
+  Background bg1;
+  Background bg2;
+  Background bg3;
+  Background bg4;
+  Object obj;
+  Window window;
+  Screen screen;
+
+  friend class PPU::Background;
+  friend class PPU::Object;
+  friend class PPU::Window;
+  friend class PPU::Screen;
+  friend class System;
+};
+
+extern PPU ppu;
diff --git a/higan/sfc-balanced/ppu/render/bg.cpp b/higan/sfc-balanced/ppu/render/bg.cpp
new file mode 100644
index 0000000..627ae81
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/bg.cpp
@@ -0,0 +1,339 @@
+//called once at the start of every rendered scanline
+auto PPU::updateBGInfo() -> void {
+  const uint hires = io.bgMode == 5 || io.bgMode == 6;
+  const uint width = !hires ? 256 : 512;
+
+  auto bg = &bg1;
+  for(uint bg_id = Background::ID::BG1; bg_id <= Background::ID::BG4; bg_id++) {
+    switch(bg_id) {
+    case Background::ID::BG1: bg = &bg1; break;
+    case Background::ID::BG2: bg = &bg2; break;
+    case Background::ID::BG3: bg = &bg3; break;
+    case Background::ID::BG4: bg = &bg4; break;
+    }
+
+    bg_info[bg_id].tileHeight = bg->io.tileSize ? 4 : 3;
+    bg_info[bg_id].tileWidth = hires ? 4 : (uint)bg_info[bg_id].tileHeight;
+
+    bg_info[bg_id].maskX = bg_info[bg_id].tileHeight == 4 ? width << 1 : width;
+    bg_info[bg_id].maskY = bg_info[bg_id].maskX;
+    if(bg->io.screenSize & 0x01) bg_info[bg_id].maskX <<= 1;
+    if(bg->io.screenSize & 0x02) bg_info[bg_id].maskY <<= 1;
+    bg_info[bg_id].maskX--;
+    bg_info[bg_id].maskY--;
+
+    bg_info[bg_id].screenX = bg->io.screenSize & 0x01 ? 32 << 5 : 0;
+    bg_info[bg_id].screenY = bg->io.screenSize & 0x02 ? 32 << 5 : 0;
+    if(bg->io.screenSize == Background::ScreenSize::Size64x64) bg_info[bg_id].screenY <<= 1;
+  }
+}
+
+template<uint bg_id>
+auto PPU::bg_renderLine() -> void {
+  if(io.bgMode == 7) return bg_renderLineMode7<bg_id>();
+  Background& bg = (
+  bg_id == Background::ID::BG1 ? bg1 :
+  bg_id == Background::ID::BG2 ? bg2 :
+  bg_id == Background::ID::BG3 ? bg3 :
+                                 bg4
+  );
+  if(bg.io.mode == Background::Mode::Inactive) return;
+  if(bg.io.priority[0] + bg.io.priority[1] == 0) return;
+  if(!bg.io.aboveEnable && !bg.io.belowEnable) return;
+
+  const uint16 validMask = bg_id == Background::ID::BG1 ? 0x2000 : 0x4000;
+
+  const uint paletteOffset = (io.bgMode == 0 ? bg_id << 5 : 0);
+  const uint paletteSize = 2 << bg.io.mode;
+  const uint tileMask = ppu.vram.mask >> (3 + bg.io.mode);
+  const uint tiledataIndex = bg.io.tiledataAddress >> (3 + bg.io.mode);
+
+  const uint8* bg_tiledata  = tiledataCache.tiledata[bg.io.mode];
+  const uint8* bg_tilestate = tiledataCache.tiledataState[bg.io.mode];
+
+  const uint8  tileWidth  = bg_info[bg_id].tileWidth;
+  const uint8  tileHeight = bg_info[bg_id].tileHeight;
+  const uint16 maskX      = bg_info[bg_id].maskX;
+  const uint16 maskY      = bg_info[bg_id].maskY;
+
+  bg.y           = io.bg_y[bg_id];
+  uint16 hscroll = bg.io.hoffset;
+  uint16 vscroll = bg.io.voffset;
+
+  const uint hires = io.bgMode == 5 || io.bgMode == 6;
+  const uint width = 256 << hires;
+
+  if(hires) {
+    hscroll <<= 1;
+    if(io.interlace) bg.y = (bg.y << 1) + field();
+  }
+
+  uint16 hval, vval;
+  uint16 hoffset, voffset, offsetX, col;
+  bool   mirrorX, mirrorY;
+
+  const uint8*  tile_ptr;
+  const uint16* mtable = mosaicTable[bg.io.mosaic];
+  const bool isOPTMode = io.bgMode == 2 || io.bgMode == 4 || io.bgMode == 6;
+  const bool isDirectColorMode = screen.io.directColor && bg_id == Background::ID::BG1 && (io.bgMode == 3 || io.bgMode == 4);
+
+  buildWindowTables(bg_id);
+  const uint8* wt_above = windowCache[bg_id].above;
+  const uint8* wt_below = windowCache[bg_id].below;
+
+  uint16 prev_x = 0xffff, prev_y = 0xffff, prev_optx = 0xffff;
+  for(uint16 x : range(width)) {
+    hoffset = mtable[x] + hscroll;
+    voffset = bg.y + vscroll;
+
+    if(isOPTMode) {
+      offsetX = (x + (hscroll & 7));
+
+      //tile 0 is unaffected by offset-per-tile mode...
+      if(offsetX >= 8) {
+
+        //cache tile data in hval, vval if possible
+        if((offsetX >> 3) != (prev_optx >> 3)) {
+          prev_optx = offsetX;
+
+          hval = bg3.getTile((offsetX - 8) + (bg3.io.hoffset & ~7), bg3.io.voffset);
+          if(io.bgMode != 4) {
+            vval = bg3.getTile((offsetX - 8) + (bg3.io.hoffset & ~7), bg3.io.voffset + 8);
+          }
+        }
+
+        if(io.bgMode == 4) {
+          if(hval & validMask) {
+            if(!(hval & 0x8000)) {
+              hoffset = offsetX + (hval & ~7);
+            } else {
+              voffset = bg.y + hval;
+            }
+          }
+        } else {
+          if(hval & validMask) {
+            hoffset = offsetX + (hval & ~7);
+          }
+          if(vval & validMask) {
+            voffset = bg.y + vval;
+          }
+        }
+      }
+    }
+
+    hoffset &= maskX;
+    voffset &= maskY;
+
+    if(hoffset >> 3 != prev_x || voffset >> 3 != prev_y) {
+      prev_x = hoffset >> 3;
+      prev_y = voffset >> 3;
+
+      bg.tile = bg.getTile((uint)hoffset, (uint)voffset);  //format = vhopppcc cccccccc
+      mirrorY = bg.tile & 0x8000;
+      mirrorX = bg.tile & 0x4000;
+      bg.priority = bg.io.priority[(bg.tile & 0x2000) >> 13];
+      bg.paletteNumber = (bg.tile >> 10) & 7;
+      bg.paletteIndex = paletteOffset + (bg.paletteNumber << paletteSize);
+
+      if(tileWidth  == 4) {  //16x16 horizontal tile mirroring
+        if((bool)(hoffset & 8) != mirrorX) bg.tile++;
+      }
+
+      if(tileHeight == 4) {  //16x16 vertical tile mirroring
+        if((bool)(voffset & 8) != mirrorY) bg.tile += 16;
+      }
+
+      uint16 character = ((bg.tile & 0x03ff) + tiledataIndex) & tileMask;
+
+      if(bg_tilestate[character] == 1) {
+        renderBGTile(bg.io.mode, character);
+      }
+
+      if(mirrorY) voffset ^= 7;  //invert y tile pos
+      tile_ptr = bg_tiledata + (character * 64) + ((voffset & 7) * 8);
+    }
+
+    if(mirrorX) hoffset ^= 7;  //invert x tile pos
+    col = *(tile_ptr + (hoffset & 7));
+    if(col) {
+      if(isDirectColorMode) {
+        col = screen.directColor(col, bg.tile);
+      } else {
+        col = screen.paletteColor(col + bg.paletteIndex);
+      }
+
+      #define setpixel_above(x) \
+        if(pixelCache[x].abovePriority < bg.priority) { \
+          pixelCache[x].abovePriority = bg.priority; \
+          pixelCache[x].aboveLayer = bg_id; \
+          pixelCache[x].aboveColor = col; \
+          pixelCache[x].aboveColorExemption = false; \
+        }
+
+      #define setpixel_below(x) \
+        if(pixelCache[x].belowPriority < bg.priority) { \
+          pixelCache[x].belowPriority = bg.priority; \
+          pixelCache[x].belowLayer = bg_id; \
+          pixelCache[x].belowColor = col; \
+          pixelCache[x].belowColorExemption = false; \
+        }
+      if(!hires) {
+        if(bg.io.aboveEnable && !wt_above[x]) { setpixel_above(x); }
+        if(bg.io.belowEnable && !wt_below[x]) { setpixel_below(x); }
+      } else {
+        int hx = x >> 1;
+        if(x & 1) {
+          if(bg.io.aboveEnable && !wt_above[hx]) { setpixel_above(hx); }
+        } else {
+          if(bg.io.belowEnable && !wt_below[hx]) { setpixel_below(hx); }
+        }
+      }
+      #undef setpixel_above
+      #undef setpixel_below
+    }
+  }
+}
+
+//higan mode7 renderer
+//
+//base algorithm written by anomie
+//higan implementation written by byuu
+//
+//supports mode 7 + extbg + rotate + zoom + direct color + scrolling + m7sel + windowing + mosaic
+//interlace and pseudo-hires support are automatic via main rendering routine
+
+template<uint bg_id>
+auto PPU::bg_renderLineMode7() -> void {
+  Background& bg = (
+  bg_id == Background::ID::BG1 ? bg1 :
+  bg_id == Background::ID::BG2 ? bg2 :
+  bg_id == Background::ID::BG3 ? bg3 :
+                                 bg4
+  );
+  if(bg.io.mode == Background::Mode::Inactive) return;
+  if(bg.io.priority[0] + bg.io.priority[1] == 0) return;
+  if(!bg.io.aboveEnable && !bg.io.belowEnable) return;
+
+  int32 px, py;
+  int32 tx, ty, tile, palette;
+
+  int32 a = sclip<16>(cache.m7a);
+  int32 b = sclip<16>(cache.m7b);
+  int32 c = sclip<16>(cache.m7c);
+  int32 d = sclip<16>(cache.m7d);
+
+  int32 cx   = sclip<13>(cache.m7x);
+  int32 cy   = sclip<13>(cache.m7y);
+  int32 hofs = sclip<13>(cache.hoffsetMode7);
+  int32 vofs = sclip<13>(cache.voffsetMode7);
+
+  int  _pri, _x;
+
+  buildWindowTables(bg_id);
+  uint8* wt_above = windowCache[bg_id].above;
+  uint8* wt_below = windowCache[bg_id].below;
+
+  bg.y = !io.vflipMode7 ? line : 255 - line;
+
+  uint16* mtable_x;
+  uint16* mtable_y;
+  if(bg_id == Background::ID::BG1) {
+    mtable_x = (uint16*)mosaicTable[bg1.io.mosaic];
+    mtable_y = (uint16*)mosaicTable[bg1.io.mosaic];
+  } else {  //bg_id == Background::ID::BG2
+    //Mode7 EXTBG BG2 uses BG1 mosaic enable to control vertical mosaic,
+    //and BG2 mosaic enable to control horizontal mosaic...
+    mtable_x = (uint16*)mosaicTable[bg2.io.mosaic];
+    mtable_y = (uint16*)mosaicTable[bg1.io.mosaic];
+  }
+
+  //13-bit sign extend
+  //--s---vvvvvvvvvv -> ssssssvvvvvvvvvv
+  #define CLIP(x) ( (x) & 0x2000 ? (x) | ~0x03ff : (x) & 0x03ff )
+
+  int32 psx = ((a * CLIP(hofs - cx)) & ~63) + ((b * CLIP(vofs - cy)) & ~63) + ((b * mtable_y[bg.y]) & ~63) + (cx << 8);
+  int32 psy = ((c * CLIP(hofs - cx)) & ~63) + ((d * CLIP(vofs - cy)) & ~63) + ((d * mtable_y[bg.y]) & ~63) + (cy << 8);
+
+  #undef CLIP
+
+  for(int32 x = 0; x < 256; x++) {
+    px = psx + (a * mtable_x[x]);
+    py = psy + (c * mtable_x[x]);
+
+    //mask floating-point bits (low 8 bits)
+    px >>= 8;
+    py >>= 8;
+
+    switch(io.repeatMode7) {
+    //screen repetition outside of screen area
+    case 0:
+    case 1:
+      px &= 1023;
+      py &= 1023;
+      tile = vram[(py >> 3) * 128 + (px >> 3)].byte(0);
+      palette = vram[(tile << 6) + ((py & 7) << 3) + (px & 7)].byte(1);
+      break;
+
+    //palette color 0 outside of screen area
+    case 2: 
+      if((px | py) & ~1023) {
+        palette = 0;
+      } else {
+        px &= 1023;
+        py &= 1023;
+        tile = vram[(py >> 3) * 128 + (px >> 3)].byte(0);
+        palette = vram[(tile << 6) + ((py & 7) << 3) + (px & 7)].byte(1);
+      }
+      break;
+
+    //character 0 repetition outside of screen area
+    case 3:
+      if((px | py) & ~1023) {
+        tile = 0;
+      } else {
+        px &= 1023;
+        py &= 1023;
+        tile = vram[(py >> 3) * 128 + (px >> 3)].byte(0);
+      }
+      palette = vram[(tile << 6) + ((py & 7) << 3) + (px & 7)].byte(1);
+      break;
+
+    }
+
+    if(bg_id == Background::ID::BG1) {
+      _pri = bg.io.priority[0];
+    } else {
+      _pri = bg.io.priority[(palette >> 7) ? 1 : 0];
+      palette &= 0x7f;
+    }
+
+    if(!palette) continue;
+
+    _x = !io.hflipMode7 ? (uint)x : 255 - x;
+
+    uint32 col;
+    if(screen.io.directColor && bg_id == Background::ID::BG1) {
+      //direct color mode does not apply to bg2, as it is only 128 colors...
+      col = screen.directColor(palette, 0);
+    } else {
+      col = screen.paletteColor(palette);
+    }
+
+    if(bg.io.aboveEnable && !wt_above[_x]) {
+      if(pixelCache[_x].abovePriority < _pri) {
+        pixelCache[_x].abovePriority = _pri;
+        pixelCache[_x].aboveLayer = bg_id;
+        pixelCache[_x].aboveColor = col;
+        pixelCache[_x].aboveColorExemption = false;
+      }
+    }
+    if(bg.io.belowEnable && !wt_below[_x]) {
+      if(pixelCache[_x].belowPriority < _pri) {
+        pixelCache[_x].belowPriority = _pri;
+        pixelCache[_x].belowLayer = bg_id;
+        pixelCache[_x].belowColor = col;
+        pixelCache[_x].belowColorExemption = false;
+      }
+    }
+  }
+}
diff --git a/higan/sfc-balanced/ppu/render/cache.cpp b/higan/sfc-balanced/ppu/render/cache.cpp
new file mode 100644
index 0000000..ac50c22
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/cache.cpp
@@ -0,0 +1,136 @@
+auto PPU::renderBGTile(uint colorDepth, uint16 tile_num) -> void {
+  uint8 col, d0, d1, d2, d3, d4, d5, d6, d7;
+
+  uint8* dest = (uint8*)tiledataCache.tiledata[colorDepth] + tile_num * (8 * 8);
+  uint y = 8;
+
+  #define renderBGTile_line_2bpp(mask) \
+    col  = !!(d0 & mask) << 0; \
+    col += !!(d1 & mask) << 1; \
+    *dest++ = col
+
+  #define renderBGTile_line_4bpp(mask) \
+    col  = !!(d0 & mask) << 0; \
+    col += !!(d1 & mask) << 1; \
+    col += !!(d2 & mask) << 2; \
+    col += !!(d3 & mask) << 3; \
+    *dest++ = col
+
+  #define renderBGTile_line_8bpp(mask) \
+    col  = !!(d0 & mask) << 0; \
+    col += !!(d1 & mask) << 1; \
+    col += !!(d2 & mask) << 2; \
+    col += !!(d3 & mask) << 3; \
+    col += !!(d4 & mask) << 4; \
+    col += !!(d5 & mask) << 5; \
+    col += !!(d6 & mask) << 6; \
+    col += !!(d7 & mask) << 7; \
+    *dest++ = col
+
+  if(colorDepth == Background::Mode::BPP2) {
+    uint pos = tile_num * 8;
+    while(y--) {
+      d0 = vram[pos +  0].byte(0);
+      d1 = vram[pos +  0].byte(1);
+      renderBGTile_line_2bpp(0x80);
+      renderBGTile_line_2bpp(0x40);
+      renderBGTile_line_2bpp(0x20);
+      renderBGTile_line_2bpp(0x10);
+      renderBGTile_line_2bpp(0x08);
+      renderBGTile_line_2bpp(0x04);
+      renderBGTile_line_2bpp(0x02);
+      renderBGTile_line_2bpp(0x01);
+      pos++;
+    }
+  }
+
+  if(colorDepth == Background::Mode::BPP4) {
+    uint pos = tile_num * 16;
+    while(y--) {
+      d0 = vram[pos +  0].byte(0);
+      d1 = vram[pos +  0].byte(1);
+      d2 = vram[pos +  8].byte(0);
+      d3 = vram[pos +  8].byte(1);
+      renderBGTile_line_4bpp(0x80);
+      renderBGTile_line_4bpp(0x40);
+      renderBGTile_line_4bpp(0x20);
+      renderBGTile_line_4bpp(0x10);
+      renderBGTile_line_4bpp(0x08);
+      renderBGTile_line_4bpp(0x04);
+      renderBGTile_line_4bpp(0x02);
+      renderBGTile_line_4bpp(0x01);
+      pos++;
+    }
+  }
+
+  if(colorDepth == Background::Mode::BPP8) {
+    uint pos = tile_num * 32;
+    while(y--) {
+      d0 = vram[pos +  0].byte(0);
+      d1 = vram[pos +  0].byte(1);
+      d2 = vram[pos +  8].byte(0);
+      d3 = vram[pos +  8].byte(1);
+      d4 = vram[pos + 16].byte(0);
+      d5 = vram[pos + 16].byte(1);
+      d6 = vram[pos + 24].byte(0);
+      d7 = vram[pos + 24].byte(1);
+      renderBGTile_line_8bpp(0x80);
+      renderBGTile_line_8bpp(0x40);
+      renderBGTile_line_8bpp(0x20);
+      renderBGTile_line_8bpp(0x10);
+      renderBGTile_line_8bpp(0x08);
+      renderBGTile_line_8bpp(0x04);
+      renderBGTile_line_8bpp(0x02);
+      renderBGTile_line_8bpp(0x01);
+      pos++;
+    }
+  }
+
+  tiledataCache.tiledataState[colorDepth][tile_num] = 0;
+
+  #undef renderBGTile_line_2bpp
+  #undef renderBGTile_line_4bpp
+  #undef renderBGTile_line_8bpp
+}
+
+auto PPU::flushPixelCache() -> void {
+  uint16 above = screen.cgram[0];
+  uint16 below = (io.pseudoHires || io.bgMode == 5 || io.bgMode == 6) ? above : io.color_rgb;
+
+  uint i = 255;
+  do {
+    pixelCache[i].aboveColor = above;
+    pixelCache[i].belowColor = below;
+    pixelCache[i].aboveLayer = Screen::ID::BACK;
+    pixelCache[i].belowLayer = Screen::ID::BACK;
+    pixelCache[i].aboveColorExemption = false;
+    pixelCache[i].belowColorExemption = false;
+    pixelCache[i].abovePriority = 0;
+    pixelCache[i].belowPriority = 0;
+  } while(i--);
+}
+
+auto PPU::TiledataCache::allocate() -> void {
+  tiledata[Background::Mode::BPP2]      = new uint8[8192 * 64];
+  tiledata[Background::Mode::BPP4]      = new uint8[4096 * 64];
+  tiledata[Background::Mode::BPP8]      = new uint8[2048 * 64];
+  tiledataState[Background::Mode::BPP2] = new uint8[8192];
+  tiledataState[Background::Mode::BPP4] = new uint8[4096];
+  tiledataState[Background::Mode::BPP8] = new uint8[2048];
+}
+
+//marks all tiledata cache entries as dirty
+auto PPU::TiledataCache::flush() -> void {
+  for(uint i : range(8192)) tiledataState[Background::Mode::BPP2][i] = 1;
+  for(uint i : range(4096)) tiledataState[Background::Mode::BPP4][i] = 1;
+  for(uint i : range(2048)) tiledataState[Background::Mode::BPP8][i] = 1;
+}
+
+auto PPU::TiledataCache::free() -> void {
+  delete[] tiledata[Background::Mode::BPP2];
+  delete[] tiledata[Background::Mode::BPP4];
+  delete[] tiledata[Background::Mode::BPP8];
+  delete[] tiledataState[Background::Mode::BPP2];
+  delete[] tiledataState[Background::Mode::BPP4];
+  delete[] tiledataState[Background::Mode::BPP8];
+}
diff --git a/higan/sfc-balanced/ppu/render/line.cpp b/higan/sfc-balanced/ppu/render/line.cpp
new file mode 100644
index 0000000..4cd49a9
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/line.cpp
@@ -0,0 +1,116 @@
+inline auto PPU::getPixelBelow(uint32 x) -> uint16 {
+  CachePixel& p = pixelCache[x];
+  uint15 aboveColor, belowColor;
+  uint8 aboveLayer;
+
+  belowColor = p.belowColor;
+
+  if(!screen.io.blendMode) {
+    aboveLayer = Screen::ID::BACK;
+    aboveColor = io.color_rgb;
+  } else {
+    aboveLayer = p.aboveLayer;
+    aboveColor = p.aboveColor;
+  }
+
+  if(!windowCache[Window::ID::COL].above[x]) {
+    if(!windowCache[Window::ID::COL].below[x]) {
+      return 0x0000;
+    }
+    belowColor = 0x0000;
+  }
+
+  bool colorEnable;
+  switch(p.belowLayer) {
+  case Background::ID::BG1: colorEnable = screen.io.bg1.colorEnable; break;
+  case Background::ID::BG2: colorEnable = screen.io.bg2.colorEnable; break;
+  case Background::ID::BG3: colorEnable = screen.io.bg3.colorEnable; break;
+  case Background::ID::BG4: colorEnable = screen.io.bg4.colorEnable; break;
+  case Object::ID::OBJ:     colorEnable = screen.io.obj.colorEnable; break;
+  case Screen::ID::BACK:    colorEnable = screen.io.back.colorEnable; break;
+  }
+
+  if(!p.belowColorExemption && colorEnable && windowCache[Window::ID::COL].below[x]) {
+    screen.math.colorHalve = false;
+    if(screen.io.colorHalve && windowCache[Window::ID::COL].above[x]) {
+      if(screen.io.blendMode == 0 || aboveLayer != Screen::ID::BACK) {
+        screen.math.colorHalve = true;
+      }
+    }
+    return screen.blend(belowColor, aboveColor);
+  }
+
+  return belowColor;
+}
+
+inline auto PPU::getPixelAbove(uint32 x) -> uint16 {
+  CachePixel& p = pixelCache[x];
+  uint15 aboveColor, belowColor;
+  uint8 belowLayer;
+
+  aboveColor = p.aboveColor;
+
+  if(!screen.io.blendMode) {
+    belowLayer = Screen::ID::BACK;
+    belowColor = io.color_rgb;
+  } else {
+    belowLayer = p.belowLayer;
+    belowColor = p.belowColor;
+  }
+
+  if(!windowCache[Window::ID::COL].above[x]) {
+    if(!windowCache[Window::ID::COL].below[x]) {
+      return 0x0000;
+    }
+    aboveColor = 0x0000;
+  }
+
+  bool colorEnable;
+  switch(p.aboveLayer) {
+  case Background::ID::BG1: colorEnable = screen.io.bg1.colorEnable; break;
+  case Background::ID::BG2: colorEnable = screen.io.bg2.colorEnable; break;
+  case Background::ID::BG3: colorEnable = screen.io.bg3.colorEnable; break;
+  case Background::ID::BG4: colorEnable = screen.io.bg4.colorEnable; break;
+  case Object::ID::OBJ:     colorEnable = screen.io.obj.colorEnable; break;
+  case Screen::ID::BACK:    colorEnable = screen.io.back.colorEnable; break;
+  }
+
+  if(!p.aboveColorExemption && colorEnable && windowCache[Window::ID::COL].below[x]) {
+    screen.math.colorHalve = false;
+    if(screen.io.colorHalve && windowCache[Window::ID::COL].above[x]) {
+      if(screen.io.blendMode == 0 || belowLayer != Screen::ID::BACK) {
+        screen.math.colorHalve = true;
+      }
+    }
+    return screen.blend(aboveColor, belowColor);
+  }
+
+  return aboveColor;
+}
+
+inline auto PPU::renderLineOutput() -> void {
+  uint32* lineA = output + line * 1024;
+  uint32* lineB = lineA + (interlace() ? 0 : 512);
+  if(interlace() && field()) lineA += 512, lineB += 512;
+
+  if(!io.pseudoHires && io.bgMode != 5 && io.bgMode != 6) {
+    for(uint x : range(256)) {
+      uint color = (io.displayBrightness << 15) | getPixelAbove(x);
+      *lineA++ = *lineB++ = color;
+      *lineA++ = *lineB++ = color;
+    }
+  } else {
+    for(uint x : range(256)) {
+      *lineA++ = *lineB++ = (io.displayBrightness << 15) | getPixelBelow(x);
+      *lineA++ = *lineB++ = (io.displayBrightness << 15) | getPixelAbove(x);
+    }
+  }
+}
+
+inline auto PPU::clearLine() -> void {
+  uint32* lineA = output + line * 1024;
+  uint32* lineB = lineA + (interlace() ? 0 : 512);
+  if(interlace() && field()) lineA += 512, lineB += 512;
+  memory::fill(lineA, 512 * sizeof(uint32));
+  memory::fill(lineB, 512 * sizeof(uint32));
+}
diff --git a/higan/sfc-balanced/ppu/render/object.cpp b/higan/sfc-balanced/ppu/render/object.cpp
new file mode 100644
index 0000000..00b693a
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/object.cpp
@@ -0,0 +1,156 @@
+auto PPU::isSpriteOnScanline() -> bool {
+  //if sprite is entirely offscreen and doesn't wrap around to the left side of the screen,
+  //then it is not counted. this *should* be 256, and not 255, even though dot 256 is offscreen.
+  OAM::Object* spr = &obj.oam.object[activeSprite];
+  if(spr->x > 256 && (spr->x + spr->width - 1) < 512) return false;
+
+  int spr_height = !obj.io.interlace ? (uint)spr->height : spr->height >> 1;
+  if(line >= spr->y && line < (spr->y + spr_height)) return true;
+  if((spr->y + spr_height) >= 256 && line < ((spr->y + spr_height) & 255)) return true;
+  return false;
+}
+
+auto PPU::obj_loadTiles() -> void {
+  OAM::Object* spr = &obj.oam.object[activeSprite];
+  uint16 tile_width = spr->width >> 3;
+  int x = spr->x;
+  int y = (line - spr->y) & 0xff;
+  if(obj.io.interlace) {
+    y <<= 1;
+  }
+
+  if(spr->vflip) {
+    if(spr->width == spr->height) {
+      y = (spr->height - 1) - y;
+    } else {
+      y = y < spr->width ? (spr->width - 1) - y : spr->width + ((spr->width - 1) - (y - spr->width));
+    }
+  }
+
+  if(obj.io.interlace) {
+    y = !spr->vflip ? y + field() : y - field();
+  }
+
+  x &= 511;
+  y &= 255;
+
+  uint16 tdaddr = cache.obj_tiledataAddress;
+  uint16 chrx   = (spr->character     ) & 15;
+  uint16 chry   = (spr->character >> 4) & 15;
+  if(spr->nameselect) {
+    tdaddr += (256 * 16) + (cache.obj_nameselect << 12);
+  }
+  chry  += (y >> 3);
+  chry  &= 15;
+  chry <<= 4;
+
+  for(uint tx : range(tile_width)) {
+    uint sx = (x + (tx << 3)) & 511;
+    //ignore sprites that are offscreen, x==256 is a special case that loads all tiles in OBJ
+    if(x != 256 && sx >= 256 && (sx + 7) < 512) continue;
+
+    if(obj.t.tileCount++ >= 34) break;
+    uint n = obj.t.tileCount - 1;
+    obj_tileList[n].x        = sx;
+    obj_tileList[n].y        = y;
+    obj_tileList[n].priority = spr->priority;
+    obj_tileList[n].palette  = 128 + (spr->palette << 4);
+    obj_tileList[n].hflip    = spr->hflip;
+
+    uint mx  = !spr->hflip ? tx : (tile_width - 1) - tx;
+    uint pos = tdaddr + ((chry + ((chrx + mx) & 15)) << 4);
+    obj_tileList[n].tile = (pos >> 4) & (ppu.vram.mask >> 4);
+  }
+}
+
+auto PPU::obj_renderTile(uint n) -> void {
+  uint8* obj_tileData      = (uint8*)tiledataCache.tiledata[Background::Mode::BPP4];
+  uint8* obj_tileDataState = (uint8*)tiledataCache.tiledataState[Background::Mode::BPP4];
+
+  if(obj_tileDataState[obj_tileList[n].tile] == 1) {
+    renderBGTile(Background::Mode::BPP4, obj_tileList[n].tile);
+  }
+
+  uint sx = obj_tileList[n].x;
+  uint8* tile_ptr = (uint8*)obj_tileData + (obj_tileList[n].tile << 6) + ((obj_tileList[n].y & 7) << 3);
+  for(uint x : range(8)) {
+    sx &= 511;
+    if(sx < 256) {
+      uint col = *(tile_ptr + (!obj_tileList[n].hflip ? x : 7 - x));
+      if(col) {
+        col += obj_tileList[n].palette;
+        obj_linePalette[sx] = col;
+        obj_linePriority[sx] = obj_tileList[n].priority;
+      }
+    }
+    sx++;
+  }
+}
+
+auto PPU::obj_renderLine_rto() -> void {
+  obj.t.itemCount = 0;
+  obj.t.tileCount = 0;
+
+  memset(obj_linePriority, OBJ_PRI_NONE, 256);
+  memset(obj_itemList, 0xff, 32);
+  for(int s : range(34)) obj_tileList[s].tile = 0xffff;
+
+  for(int s : range(128)) {
+    activeSprite = (s + obj.io.firstSprite) & 127;
+    if(!isSpriteOnScanline()) continue;
+    if(obj.t.itemCount++ >= 32) break;
+    obj_itemList[obj.t.itemCount - 1] = (s + obj.io.firstSprite) & 127;
+  }
+
+  if(obj.t.itemCount > 0 && obj_itemList[obj.t.itemCount - 1] != 0xff) {
+    latch.oamAddress = 0x0200 + (obj_itemList[obj.t.itemCount - 1] >> 2);
+  }
+
+  for(int s = 31; s >= 0; s--) {
+    if(obj_itemList[s] == 0xff) continue;
+    activeSprite = obj_itemList[s];
+    obj_loadTiles();
+  }
+
+  obj.io.timeOver  |= (obj.t.tileCount > 34);
+  obj.io.rangeOver |= (obj.t.itemCount > 32);
+}
+
+auto PPU::obj_renderLine() -> void {
+  if(obj.io.priority[0] + obj.io.priority[1] + obj.io.priority[2] + obj.io.priority[3] == 0) return;
+
+  if(!obj.io.aboveEnable && !obj.io.belowEnable) return;
+
+  for(uint s : range(34)) {
+    if(obj_tileList[s].tile == 0xffff) continue;
+    obj_renderTile(s);
+  }
+
+  buildWindowTables(Object::ID::OBJ);
+  uint8* wt_above = windowCache[Object::ID::OBJ].above;
+  uint8* wt_below = windowCache[Object::ID::OBJ].below;
+
+  #define setPixelAbove(x) \
+    if(pixelCache[x].abovePriority < pri) { \
+      pixelCache[x].abovePriority = pri; \
+      pixelCache[x].aboveLayer = Object::ID::OBJ; \
+      pixelCache[x].aboveColor = screen.cgram[obj_linePalette[x]]; \
+      pixelCache[x].aboveColorExemption = obj_linePalette[x] < 192; \
+    }
+  #define setPixelBelow(x) \
+    if(pixelCache[x].belowPriority < pri) { \
+      pixelCache[x].belowPriority = pri; \
+      pixelCache[x].belowLayer = Object::ID::OBJ; \
+      pixelCache[x].belowColor = screen.cgram[obj_linePalette[x]]; \
+      pixelCache[x].belowColorExemption = obj_linePalette[x] < 192; \
+    }
+  for(int x : range(256)) {
+    if(obj_linePriority[x] == OBJ_PRI_NONE) continue;
+
+    uint pri = obj.io.priority[obj_linePriority[x]];
+    if(obj.io.aboveEnable && !wt_above[x]) { setPixelAbove(x); }
+    if(obj.io.belowEnable && !wt_below[x]) { setPixelBelow(x); }
+  }
+  #undef setPixelAbove
+  #undef setPixelBelow
+}
diff --git a/higan/sfc-balanced/ppu/render/render.cpp b/higan/sfc-balanced/ppu/render/render.cpp
new file mode 100644
index 0000000..3f7a36f
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/render.cpp
@@ -0,0 +1,63 @@
+#include "cache.cpp"
+#include "windows.cpp"
+#include "bg.cpp"
+#include "object.cpp"
+#include "line.cpp"
+
+//Mode 0: ->
+//     1,    2,    3,    4,    5,    6,    7,    8,    9,   10,   11,   12
+//  BG4B, BG3B, OBJ0, BG4A, BG3A, OBJ1, BG2B, BG1B, OBJ2, BG2A, BG1A, OBJ3
+
+//Mode 1 (pri=1): ->
+//     1,    2,    3,    4,    5,    6,    7,    8,    9,   10
+//  BG3B, OBJ0, OBJ1, BG2B, BG1B, OBJ2, BG2A, BG1A, OBJ3, BG3A
+//
+//Mode 1 (pri=0): ->
+//     1,    2,    3,    4,    5,    6,    7,    8,    9,   10
+//  BG3B, OBJ0, BG3A, OBJ1, BG2B, BG1B, OBJ2, BG2A, BG1A, OBJ3
+
+//Mode 2: ->
+//     1,    2,    3,    4,    5,    6,    7,    8
+//  BG2B, OBJ0, BG1B, OBJ1, BG2A, OBJ2, BG1A, OBJ3
+
+//Mode 3: ->
+//     1,    2,    3,    4,    5,    6,    7,    8
+//  BG2B, OBJ0, BG1B, OBJ1, BG2A, OBJ2, BG1A, OBJ3
+
+//Mode 4: ->
+//     1,    2,    3,    4,    5,    6,    7,    8
+//  BG2B, OBJ0, BG1B, OBJ1, BG2A, OBJ2, BG1A, OBJ3
+
+//Mode 5: ->
+//     1,    2,    3,    4,    5,    6,    7,    8
+//  BG2B, OBJ0, BG1B, OBJ1, BG2A, OBJ2, BG1A, OBJ3
+
+//Mode 6: ->
+//     1,    2,    3,    4,    5,    6
+//  OBJ0, BG1B, OBJ1, OBJ2, BG1A, OBJ3
+
+//Mode7: ->
+//     1,    2,    3,    4,    5
+//  OBJ0, BG1n, OBJ1, OBJ2, OBJ3
+
+//Mode 7 EXTBG: ->
+//     1,    2,    3,    4,    5,    6,    7
+//  BG2B, OBJ0, BG1n, OBJ1, BG2A, OBJ2, OBJ3
+
+auto PPU::renderLine() -> void {
+  if(io.displayDisable || line >= vdisp()) return clearLine();
+
+  flushPixelCache();
+  buildWindowTables(Window::ID::COL);
+  updateBGInfo();
+
+  bg_renderLine<Background::ID::BG1>();
+  bg_renderLine<Background::ID::BG2>();
+  bg_renderLine<Background::ID::BG3>();
+  bg_renderLine<Background::ID::BG4>();
+  obj_renderLine();
+
+  renderLineOutput();
+
+  obj_renderLine_rto();
+}
diff --git a/higan/sfc-balanced/ppu/render/render.hpp b/higan/sfc-balanced/ppu/render/render.hpp
new file mode 100644
index 0000000..a84d519
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/render.hpp
@@ -0,0 +1,71 @@
+struct CachePixel {
+  //bgr555 color data for main/subscreen pixels: 0x0000 = transparent / use palette color # 0
+  //needs to be bgr555 instead of palette index for direct color mode ($2130 bit 0) to work
+  uint15 aboveColor, belowColor;
+  //indicates source of palette # for main/subscreen (BG1-4, OBJ, or back)
+  uint8  aboveLayer, belowLayer;
+  //color_exemption -- true when bg == OBJ && palette index >= 192, disables color blend effects
+  uint8  aboveColorExemption, belowColorExemption;
+  //priority level of src_n. to set src_n,
+  //the priority of the pixel must be >pri_n
+  uint8  abovePriority, belowPriority;
+} pixelCache[256];
+
+struct TiledataCache {
+  uint8* tiledata[3];
+  uint8* tiledataState[3];  //0 = valid, 1 = dirty
+  auto allocate() -> void;
+  auto flush() -> void;
+  auto free() -> void;
+} tiledataCache;
+
+auto renderBGTile(uint colorDepth, uint16 tile_num) -> void;
+inline auto flushPixelCache() -> void;
+
+//windows.cpp
+struct CacheWindow {
+  uint8 above[256], below[256];
+} windowCache[6];
+
+auto buildWindowTable(uint bg_id, bool screen) -> void;
+auto buildWindowTables(uint bg_id) -> void;
+
+//bg.cpp
+struct BGInfo {  //only needed because of offset-per-tile mode
+  uint16 tileWidth, tileHeight;
+  uint16 maskX,     maskY;
+  uint16 screenX,   screenY;
+} bg_info[4];
+auto updateBGInfo() -> void;
+
+template<uint bg_id> auto bg_renderLine() -> void;
+template<uint bg_id> auto bg_renderLineMode7() -> void;
+
+//object.cpp
+uint activeSprite;
+
+uint8 obj_itemList[32];
+struct obj_tileItem {
+  uint16 x;
+  uint16 y;
+  uint16 priority;
+  uint16 palette;
+  bool   hflip;
+  uint16 tile;
+} obj_tileList[34];
+
+const uint8 OBJ_PRI_NONE = ~1;
+uint8 obj_linePalette[256], obj_linePriority[256];
+
+auto updateSpriteList(uint addr, uint8 data) -> void;
+auto isSpriteOnScanline() -> bool;
+auto obj_loadTiles() -> void;
+auto obj_renderTile(uint n) -> void;
+auto obj_renderLine_rto() -> void;
+auto obj_renderLine() -> void;
+
+//line.cpp
+inline auto getPixelBelow(uint32 x) -> uint16;
+inline auto getPixelAbove(uint32 x) -> uint16;
+auto renderLineOutput() -> void;
+auto clearLine() -> void;
diff --git a/higan/sfc-balanced/ppu/render/windows.cpp b/higan/sfc-balanced/ppu/render/windows.cpp
new file mode 100644
index 0000000..df01c48
--- /dev/null
+++ b/higan/sfc-balanced/ppu/render/windows.cpp
@@ -0,0 +1,133 @@
+auto PPU::buildWindowTable(uint bg_id, bool screen) -> void {
+  bool set = 1, clr = 0;
+  uint8* table = screen == Background::Screen::Above ? windowCache[bg_id].above : windowCache[bg_id].below;
+
+  if(bg_id != Window::ID::COL) {
+    bool window_aboveEnable;
+    bool window_belowEnable;
+    switch(bg_id) {
+    case Background::ID::BG1:
+      window_aboveEnable = window.io.bg1.aboveEnable;
+      window_belowEnable = window.io.bg1.belowEnable;
+      break;
+    case Background::ID::BG2:
+      window_aboveEnable = window.io.bg2.aboveEnable;
+      window_belowEnable = window.io.bg2.belowEnable;
+      break;
+    case Background::ID::BG3:
+      window_aboveEnable = window.io.bg3.aboveEnable;
+      window_belowEnable = window.io.bg3.belowEnable;
+      break;
+    case Background::ID::BG4:
+      window_aboveEnable = window.io.bg4.aboveEnable;
+      window_belowEnable = window.io.bg4.belowEnable;
+      break;
+    case Object::ID::OBJ:
+      window_aboveEnable = window.io.obj.aboveEnable;
+      window_belowEnable = window.io.obj.belowEnable;
+      break;
+    }
+    if(screen == Background::Screen::Above && !window_aboveEnable) {
+      memset(table, 0, 256);
+      return;
+    }
+    if(screen == Background::Screen::Below && !window_belowEnable) {
+      memset(table, 0, 256);
+      return;
+    }
+  } else {
+    switch(screen == Background::Screen::Above ? window.io.col.aboveMask : window.io.col.belowMask) {
+    case 0: memset(table, 1, 256); return;  //always
+    case 3: memset(table, 0, 256); return;  //never
+    case 1: set = 1, clr = 0; break;        //inside window only
+    case 2: set = 0, clr = 1; break;        //outside window only
+    }
+  }
+
+  bool window_oneEnable;
+  bool window_oneInvert;
+  bool window_twoEnable;
+  bool window_twoInvert;
+  uint2 window_mask;
+  switch(bg_id) {
+  case Background::ID::BG1:
+    window_oneEnable = window.io.bg1.oneEnable;
+    window_oneInvert = window.io.bg1.oneInvert;
+    window_twoEnable = window.io.bg1.twoEnable;
+    window_twoInvert = window.io.bg1.twoInvert;
+    window_mask = window.io.bg1.mask;
+    break;
+  case Background::ID::BG2:
+    window_oneEnable = window.io.bg2.oneEnable;
+    window_oneInvert = window.io.bg2.oneInvert;
+    window_twoEnable = window.io.bg2.twoEnable;
+    window_twoInvert = window.io.bg2.twoInvert;
+    window_mask = window.io.bg2.mask;
+    break;
+  case Background::ID::BG3:
+    window_oneEnable = window.io.bg3.oneEnable;
+    window_oneInvert = window.io.bg3.oneInvert;
+    window_twoEnable = window.io.bg3.twoEnable;
+    window_twoInvert = window.io.bg3.twoInvert;
+    window_mask = window.io.bg3.mask;
+    break;
+  case Background::ID::BG4:
+    window_oneEnable = window.io.bg4.oneEnable;
+    window_oneInvert = window.io.bg4.oneInvert;
+    window_twoEnable = window.io.bg4.twoEnable;
+    window_twoInvert = window.io.bg4.twoInvert;
+    window_mask = window.io.bg4.mask;
+    break;
+  case Object::ID::OBJ:
+    window_oneEnable = window.io.obj.oneEnable;
+    window_oneInvert = window.io.obj.oneInvert;
+    window_twoEnable = window.io.obj.twoEnable;
+    window_twoInvert = window.io.obj.twoInvert;
+    window_mask = window.io.obj.mask;
+    break;
+  case Window::ID::COL:
+    window_oneEnable = window.io.col.oneEnable;
+    window_oneInvert = window.io.col.oneInvert;
+    window_twoEnable = window.io.col.twoEnable;
+    window_twoInvert = window.io.col.twoInvert;
+    window_mask = window.io.col.mask;
+    break;
+  }
+  if(!window_oneEnable && !window_twoEnable) {
+    memset(table, clr, 256);
+    return;
+  }
+
+  if( window_oneEnable && !window_twoEnable) {
+    if(window_oneInvert) set ^= clr ^= set ^= clr;
+    for(uint x : range(256)) {
+      table[x] = (x >= window.io.oneLeft && x <= window.io.oneRight) ? set : clr;
+    }
+    return;
+  }
+
+  if(!window_oneEnable &&  window_twoEnable) {
+    if(window_twoInvert) set ^= clr ^= set ^= clr;
+    for(uint x : range(256)) {
+      table[x] = (x >= window.io.twoLeft && x <= window.io.twoRight) ? set : clr;
+    }
+    return;
+  }
+
+  for(uint x : range(256)) {
+    bool w1_mask = (x >= window.io.oneLeft && x <= window.io.oneRight) ^ window_oneInvert;
+    bool w2_mask = (x >= window.io.twoLeft && x <= window.io.twoRight) ^ window_twoInvert;
+
+    switch(window_mask) {
+    case 0: table[x] = (w1_mask | w2_mask) == 1 ? set : clr; break;  //or
+    case 1: table[x] = (w1_mask & w2_mask) == 1 ? set : clr; break;  //and
+    case 2: table[x] = (w1_mask ^ w2_mask) == 1 ? set : clr; break;  //xor
+    case 3: table[x] = (w1_mask ^ w2_mask) == 0 ? set : clr; break;  //xnor
+    }
+  }
+}
+
+auto PPU::buildWindowTables(uint bg_id) -> void {
+  buildWindowTable(bg_id, Background::Screen::Above);
+  buildWindowTable(bg_id, Background::Screen::Below);
+}
diff --git a/higan/sfc-balanced/ppu/screen/screen.cpp b/higan/sfc-balanced/ppu/screen/screen.cpp
new file mode 100644
index 0000000..663f645
--- /dev/null
+++ b/higan/sfc-balanced/ppu/screen/screen.cpp
@@ -0,0 +1,55 @@
+//color addition / subtraction
+//thanks go to blargg for the optimized algorithms
+auto PPU::Screen::blend(uint x, uint y) const -> uint15 {
+  if(!io.colorMode) {
+    if(!math.colorHalve) {
+      uint sum = x + y;
+      uint carry = (sum - ((x ^ y) & 0x0421)) & 0x8420;
+      return (sum - carry) | (carry - (carry >> 5));
+    } else {
+      return (x + y - ((x ^ y) & 0x0421)) >> 1;
+    }
+  } else {
+    uint diff = x - y + 0x8420;
+    uint borrow = (diff - ((x ^ y) & 0x8420)) & 0x8420;
+    if(!math.colorHalve) {
+      return   (diff - borrow) & (borrow - (borrow >> 5));
+    } else {
+      return (((diff - borrow) & (borrow - (borrow >> 5))) & 0x7bde) >> 1;
+    }
+  }
+}
+
+auto PPU::Screen::paletteColor(uint8 palette) const -> uint15 {
+  ppu.latch.cgramAddress = palette;
+  return cgram[palette];
+}
+
+auto PPU::Screen::directColor(uint8 palette, uint16 tile) const -> uint15 {
+  //palette = -------- BBGGGRRR
+  //tile    = ---bgr-- --------
+  //output  = 0BBb00GG Gg0RRRr0
+  return ((palette << 7) & 0x6000) + ((tile >> 0) & 0x1000)
+       + ((palette << 4) & 0x0380) + ((tile >> 5) & 0x0040)
+       + ((palette << 2) & 0x001c) + ((tile >> 9) & 0x0002);
+}
+
+auto PPU::Screen::fixedColor() const -> uint15 {
+  return io.colorBlue << 10 | io.colorGreen << 5 | io.colorRed << 0;
+}
+
+auto PPU::Screen::reset() -> void {
+  io.blendMode = false;
+  io.directColor = false;
+  io.colorMode = false;
+  io.colorHalve = false;
+  io.bg1.colorEnable = false;
+  io.bg2.colorEnable = false;
+  io.bg3.colorEnable = false;
+  io.bg4.colorEnable = false;
+  io.obj.colorEnable = false;
+  io.back.colorEnable = false;
+  io.colorBlue = 0;
+  io.colorGreen = 0;
+  io.colorRed = 0;
+}
diff --git a/higan/sfc-balanced/ppu/screen/screen.hpp b/higan/sfc-balanced/ppu/screen/screen.hpp
new file mode 100644
index 0000000..98537e7
--- /dev/null
+++ b/higan/sfc-balanced/ppu/screen/screen.hpp
@@ -0,0 +1,41 @@
+struct Screen {
+  auto reset() -> void;
+
+  auto blend(uint x, uint y) const -> uint15;
+  /*alwaysinline*/ auto paletteColor(uint8 palette) const -> uint15;
+  /*alwaysinline*/ auto directColor(uint8 palette, uint16 tile) const -> uint15;
+  /*alwaysinline*/ auto fixedColor() const -> uint15;
+
+  auto serialize(serializer&) -> void;
+
+  struct ID { enum : uint { BACK = 5 }; };
+
+  uint15 cgram[256];
+
+  struct IO {
+    bool blendMode;
+    bool directColor;
+
+    bool colorMode;
+    bool colorHalve;
+    struct Layer {
+      bool colorEnable;
+    } bg1, bg2, bg3, bg4, obj, back;
+
+    uint5 colorBlue;
+    uint5 colorGreen;
+    uint5 colorRed;
+  } io;
+
+  struct Math {
+    //struct Screen {
+    //  uint15 color;
+    //  bool colorEnable;
+    //} above, below;
+    //bool transparent;
+    //bool blendMode;
+    bool colorHalve;
+  } math;
+
+  friend class PPU;
+};
diff --git a/higan/sfc-balanced/ppu/serialization.cpp b/higan/sfc-balanced/ppu/serialization.cpp
new file mode 100644
index 0000000..aedd9f6
--- /dev/null
+++ b/higan/sfc-balanced/ppu/serialization.cpp
@@ -0,0 +1,271 @@
+auto PPUcounter::serialize(serializer& s) -> void {
+  s.integer(status.interlace);
+  s.integer(status.field);
+  s.integer(status.vcounter);
+  s.integer(status.hcounter);
+
+  s.array(history.field);
+  s.array(history.vcounter);
+  s.array(history.hcounter);
+  s.integer(history.index);
+}
+
+auto PPU::serialize(serializer& s) -> void {
+  Thread::serialize(s);
+  PPUcounter::serialize(s);
+
+  s.integer(vram.mask);
+  s.array(vram.data, vram.mask + 1);
+
+  s.integer(ppu1.version);
+  s.integer(ppu1.mdr);
+
+  s.integer(ppu2.version);
+  s.integer(ppu2.mdr);
+
+  s.integer(line);
+
+  s.integer(display.interlace);
+  s.integer(display.overscan);
+
+  s.integer(cache.obj_baseSize);
+  s.integer(cache.obj_nameselect);
+  s.integer(cache.obj_tiledataAddress);
+
+  s.array(io.bg_y);
+
+  s.integer(latch.vram);
+  s.integer(latch.oam);
+  s.integer(latch.cgram);
+  s.integer(latch.bgofs);
+  s.integer(latch.mode7);
+  s.integer(latch.counters);
+  s.integer(latch.hcounter);
+  s.integer(latch.vcounter);
+
+  s.integer(latch.oamAddress);
+  s.integer(latch.cgramAddress);
+
+  s.integer(io.displayDisable);
+  s.integer(io.displayBrightness);
+
+  s.integer(io.oamBaseAddress);
+  s.integer(io.oamAddress);
+  s.integer(io.oamPriority);
+
+  s.integer(io.bgPriority);
+  s.integer(io.bgMode);
+
+  s.integer(io.mosaicCountdown);
+
+  s.integer(io.hoffsetMode7);
+  s.integer(io.voffsetMode7);
+
+  s.integer(io.vramIncrementMode);
+  s.integer(io.vramMapping);
+  s.integer(io.vramIncrementSize);
+
+  s.integer(io.vramAddress);
+
+  s.integer(io.repeatMode7);
+  s.integer(io.vflipMode7);
+  s.integer(io.hflipMode7);
+
+  s.integer(io.m7a);
+  s.integer(io.m7b);
+  s.integer(io.m7c);
+  s.integer(io.m7d);
+  s.integer(io.m7x);
+  s.integer(io.m7y);
+
+  s.integer(io.cgramAddress);
+  s.integer(io.cgramAddressLatch);
+
+  s.integer(io.color_rgb);
+
+  s.integer(io.extbg);
+  s.integer(io.pseudoHires);
+  s.integer(io.overscan);
+  s.integer(io.interlace);
+
+  s.integer(io.hcounter);
+  s.integer(io.vcounter);
+
+  for(uint n : range(256)) {
+    s.integer(pixelCache[n].aboveColor);
+    s.integer(pixelCache[n].belowColor);
+    s.integer(pixelCache[n].aboveLayer);
+    s.integer(pixelCache[n].belowLayer);
+    s.integer(pixelCache[n].aboveColorExemption);
+    s.integer(pixelCache[n].belowColorExemption);
+    s.integer(pixelCache[n].abovePriority);
+    s.integer(pixelCache[n].belowPriority);
+  }
+
+  //better to just take a small speed hit than store all of the tiledata cache ...
+  tiledataCache.flush();
+
+  for(uint n : range(6)) {
+    s.array(windowCache[n].above, 256);
+    s.array(windowCache[n].below, 256);
+  }
+
+  s.integer(activeSprite);
+
+  s.array(obj_itemList, 32);
+
+  for(uint n : range(34)) {
+    s.integer(obj_tileList[n].x);
+    s.integer(obj_tileList[n].y);
+    s.integer(obj_tileList[n].priority);
+    s.integer(obj_tileList[n].palette);
+    s.integer(obj_tileList[n].tile);
+    s.integer(obj_tileList[n].hflip);
+  }
+
+  s.array(obj_linePalette, 256);
+  s.array(obj_linePriority, 256);
+
+  bg1.serialize(s);
+  bg2.serialize(s);
+  bg3.serialize(s);
+  bg4.serialize(s);
+  obj.serialize(s);
+  window.serialize(s);
+  screen.serialize(s);
+}
+
+auto PPU::Background::serialize(serializer& s) -> void {
+  s.integer(io.tiledataAddress);
+  s.integer(io.screenAddress);
+  s.integer(io.screenSize);
+  s.integer(io.mosaic);
+  s.integer(io.tileSize);
+
+  s.integer(io.mode);
+  s.array(io.priority);
+
+  s.integer(io.aboveEnable);
+  s.integer(io.belowEnable);
+
+  s.integer(io.hoffset);
+  s.integer(io.voffset);
+
+  //s.integer(x);
+  s.integer(y);
+
+  //s.integer(tileCounter);
+  s.integer(tile);
+  s.integer(priority);
+  s.integer(paletteNumber);
+  s.integer(paletteIndex);
+  //s.array(data);
+}
+
+auto PPU::Object::serialize(serializer& s) -> void {
+  for(auto& object : oam.object) {
+    s.integer(object.x);
+    s.integer(object.y);
+    s.integer(object.character);
+    s.integer(object.nameselect);
+    s.integer(object.vflip);
+    s.integer(object.hflip);
+    s.integer(object.priority);
+    s.integer(object.palette);
+    s.integer(object.size);
+  }
+
+  s.integer(io.aboveEnable);
+  s.integer(io.belowEnable);
+  s.integer(io.interlace);
+
+  s.integer(io.baseSize);
+  s.integer(io.nameselect);
+  s.integer(io.tiledataAddress);
+  s.integer(io.firstSprite);
+
+  s.array(io.priority);
+
+  s.integer(io.timeOver);
+  s.integer(io.rangeOver);
+
+  s.integer(t.itemCount);
+  s.integer(t.tileCount);
+}
+
+auto PPU::Window::serialize(serializer& s) -> void {
+  s.integer(io.bg1.oneEnable);
+  s.integer(io.bg1.oneInvert);
+  s.integer(io.bg1.twoEnable);
+  s.integer(io.bg1.twoInvert);
+  s.integer(io.bg1.mask);
+  s.integer(io.bg1.aboveEnable);
+  s.integer(io.bg1.belowEnable);
+  
+  s.integer(io.bg2.oneEnable);
+  s.integer(io.bg2.oneInvert);
+  s.integer(io.bg2.twoEnable);
+  s.integer(io.bg2.twoInvert);
+  s.integer(io.bg2.mask);
+  s.integer(io.bg2.aboveEnable);
+  s.integer(io.bg2.belowEnable);
+
+  s.integer(io.bg3.oneEnable);
+  s.integer(io.bg3.oneInvert);
+  s.integer(io.bg3.twoEnable);
+  s.integer(io.bg3.twoInvert);
+  s.integer(io.bg3.mask);
+  s.integer(io.bg3.aboveEnable);
+  s.integer(io.bg3.belowEnable);
+
+  s.integer(io.bg4.oneEnable);
+  s.integer(io.bg4.oneInvert);
+  s.integer(io.bg4.twoEnable);
+  s.integer(io.bg4.twoInvert);
+  s.integer(io.bg4.mask);
+  s.integer(io.bg4.aboveEnable);
+  s.integer(io.bg4.belowEnable);
+
+  s.integer(io.obj.oneEnable);
+  s.integer(io.obj.oneInvert);
+  s.integer(io.obj.twoEnable);
+  s.integer(io.obj.twoInvert);
+  s.integer(io.obj.mask);
+  s.integer(io.obj.aboveEnable);
+  s.integer(io.obj.belowEnable);
+
+  s.integer(io.col.oneEnable);
+  s.integer(io.col.oneInvert);
+  s.integer(io.col.twoEnable);
+  s.integer(io.col.twoInvert);
+  s.integer(io.col.mask);
+  s.integer(io.col.aboveMask);
+  s.integer(io.col.belowMask);
+
+  s.integer(io.oneLeft);
+  s.integer(io.oneRight);
+  s.integer(io.twoLeft);
+  s.integer(io.twoRight);
+}
+
+auto PPU::Screen::serialize(serializer& s) -> void {
+  s.array(cgram);
+
+  s.integer(io.blendMode);
+  s.integer(io.directColor);
+
+  s.integer(io.colorMode);
+  s.integer(io.colorHalve);
+  s.integer(io.bg1.colorEnable);
+  s.integer(io.bg2.colorEnable);
+  s.integer(io.bg3.colorEnable);
+  s.integer(io.bg4.colorEnable);
+  s.integer(io.obj.colorEnable);
+  s.integer(io.back.colorEnable);
+
+  s.integer(io.colorBlue);
+  s.integer(io.colorGreen);
+  s.integer(io.colorRed);
+
+  s.integer(math.colorHalve);
+}
diff --git a/higan/sfc-balanced/ppu/window/window.cpp b/higan/sfc-balanced/ppu/window/window.cpp
new file mode 100644
index 0000000..2af5a3c
--- /dev/null
+++ b/higan/sfc-balanced/ppu/window/window.cpp
@@ -0,0 +1,54 @@
+auto PPU::Window::reset() -> void {
+  io.bg1.oneEnable = false;
+  io.bg1.oneInvert = false;
+  io.bg1.twoEnable = false;
+  io.bg1.twoInvert = false;
+  io.bg1.mask = 0;
+  io.bg1.aboveEnable = false;
+  io.bg1.belowEnable = false;
+
+  io.bg2.oneEnable = false;
+  io.bg2.oneInvert = false;
+  io.bg2.twoEnable = false;
+  io.bg2.twoInvert = false;
+  io.bg2.mask = 0;
+  io.bg2.aboveEnable = false;
+  io.bg2.belowEnable = false;
+
+  io.bg3.oneEnable = false;
+  io.bg3.oneInvert = false;
+  io.bg3.twoEnable = false;
+  io.bg3.twoInvert = false;
+  io.bg3.mask = 0;
+  io.bg3.aboveEnable = false;
+  io.bg3.belowEnable = false;
+
+  io.bg4.oneEnable = false;
+  io.bg4.oneInvert = false;
+  io.bg4.twoEnable = false;
+  io.bg4.twoInvert = false;
+  io.bg4.mask = 0;
+  io.bg4.aboveEnable = false;
+  io.bg4.belowEnable = false;
+
+  io.obj.oneEnable = false;
+  io.obj.oneInvert = false;
+  io.obj.twoEnable = false;
+  io.obj.twoInvert = false;
+  io.obj.mask = 0;
+  io.obj.aboveEnable = false;
+  io.obj.belowEnable = false;
+
+  io.col.oneEnable = false;
+  io.col.oneInvert = false;
+  io.col.twoEnable = false;
+  io.col.twoInvert = false;
+  io.col.mask = 0;
+  io.col.aboveMask = 0;
+  io.col.belowMask = 0;
+
+  io.oneLeft = 0x00;
+  io.oneRight = 0x00;
+  io.twoLeft = 0x00;
+  io.twoRight = 0x00;
+}
diff --git a/higan/sfc-balanced/ppu/window/window.hpp b/higan/sfc-balanced/ppu/window/window.hpp
new file mode 100644
index 0000000..be65ff8
--- /dev/null
+++ b/higan/sfc-balanced/ppu/window/window.hpp
@@ -0,0 +1,36 @@
+struct Window {
+  auto reset() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  struct ID { enum : uint { COL = 5 }; };
+
+  struct IO {
+    struct Layer {
+      bool oneEnable;
+      bool oneInvert;
+      bool twoEnable;
+      bool twoInvert;
+      uint2 mask;
+      bool aboveEnable;
+      bool belowEnable;
+    } bg1, bg2, bg3, bg4, obj;
+
+    struct Color {
+      bool oneEnable;
+      bool oneInvert;
+      bool twoEnable;
+      bool twoInvert;
+      uint2 mask;
+      uint2 aboveMask;
+      uint2 belowMask;
+    } col;
+
+    uint8 oneLeft;
+    uint8 oneRight;
+    uint8 twoLeft;
+    uint8 twoRight;
+  } io;
+
+  friend class PPU;
+};
diff --git a/higan/sfc-balanced/sfc.hpp b/higan/sfc-balanced/sfc.hpp
new file mode 100644
index 0000000..87c9991
--- /dev/null
+++ b/higan/sfc-balanced/sfc.hpp
@@ -0,0 +1,63 @@
+#pragma once
+
+//clone of higan's Super Famicom emulator's balanced profile.
+//Credits for all components excpet for PPU and DSP are available in <sfc/sfc.hpp>.
+// blargg            (Balanced/Performance DSP)
+// hex_usr           (clean-up of Balanced PPU code)
+//license: GPLv3
+//original project started: 2004-10-14
+
+#include <emulator/emulator.hpp>
+#include <emulator/thread.hpp>
+#include <emulator/scheduler.hpp>
+#include <emulator/cheat.hpp>
+
+#include <processor/arm/arm.hpp>
+#include <processor/gsu/gsu.hpp>
+#include <processor/hg51b/hg51b.hpp>
+#include <processor/wdc65816/wdc65816.hpp>
+#include <processor/spc700/spc700.hpp>
+#include <processor/upd96050/upd96050.hpp>
+
+#if defined(SFC_SUPERGAMEBOY)
+  #include <gb/gb.hpp>
+#endif
+
+namespace SuperFamicom {
+  using File = Emulator::File;
+  using Scheduler = Emulator::Scheduler;
+  using Cheat = Emulator::Cheat;
+  extern Scheduler scheduler;
+  extern Cheat cheat;
+
+  struct Thread : Emulator::Thread {
+    auto create(auto (*entrypoint)() -> void, double frequency) -> void {
+      Emulator::Thread::create(entrypoint, frequency);
+      scheduler.append(*this);
+    }
+
+    inline auto synchronize(Thread& thread) -> void {
+      if(clock() >= thread.clock()) scheduler.resume(thread);
+    }
+  };
+
+  #include <sfc-balanced/memory/memory.hpp>
+  #include <sfc-balanced/ppu/counter/counter.hpp>
+
+  #include <sfc-balanced/cpu/cpu.hpp>
+  #include <sfc-balanced/smp/smp.hpp>
+  #include <sfc-balanced/dsp/dsp.hpp>
+  #include <sfc-balanced/ppu/ppu.hpp>
+
+  #include <sfc-balanced/controller/controller.hpp>
+  #include <sfc-balanced/expansion/expansion.hpp>
+  #include <sfc-balanced/system/system.hpp>
+  #include <sfc-balanced/coprocessor/coprocessor.hpp>
+  #include <sfc-balanced/slot/slot.hpp>
+  #include <sfc-balanced/cartridge/cartridge.hpp>
+
+  #include <sfc-balanced/memory/memory-inline.hpp>
+  #include <sfc-balanced/ppu/counter/counter-inline.hpp>
+}
+
+#include <sfc-balanced/interface/interface.hpp>
diff --git a/higan/sfc-balanced/slot/bsmemory/bsmemory.cpp b/higan/sfc-balanced/slot/bsmemory/bsmemory.cpp
new file mode 100644
index 0000000..27195ff
--- /dev/null
+++ b/higan/sfc-balanced/slot/bsmemory/bsmemory.cpp
@@ -0,0 +1,127 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+BSMemory bsmemory;
+
+auto BSMemory::init() -> void {
+}
+
+auto BSMemory::load() -> void {
+  if(memory.size() == 0) {
+    memory.allocate(1024 * 1024);
+  }
+}
+
+auto BSMemory::unload() -> void {
+  memory.reset();
+}
+
+auto BSMemory::power() -> void {
+}
+
+auto BSMemory::reset() -> void {
+  regs.command   = 0;
+  regs.writeOld = 0x00;
+  regs.writeNew = 0x00;
+
+  regs.flashEnable = false;
+  regs.readEnable  = false;
+  regs.writeEnable = false;
+  memory.writeProtect(!regs.writeEnable);
+}
+
+auto BSMemory::size() const -> uint {
+  return memory.size();
+}
+
+auto BSMemory::read(uint24 addr, uint8 data) -> uint8 {
+  if(readonly) {
+    return memory.read(bus.mirror(addr, memory.size()), data);
+  }
+
+  if(addr == 0x0002) {
+    if(regs.flashEnable) return 0x80;
+  }
+
+  if(addr == 0x5555) {
+    if(regs.flashEnable) return 0x80;
+  }
+
+  if(regs.readEnable && addr >= 0xff00 && addr <= 0xff13) {
+    //read flash cartridge vendor information
+    switch(addr - 0xff00) {
+    case 0x00: return 0x4d;
+    case 0x01: return 0x00;
+    case 0x02: return 0x50;
+    case 0x03: return 0x00;
+    case 0x04: return 0x00;
+    case 0x05: return 0x00;
+    case 0x06: return 0x2a;  //0x2a = 8mbit, 0x2b = 16mbit (not known to exist, though BIOS recognizes ID)
+    case 0x07: return 0x00;
+    default:   return 0x00;
+    }
+  }
+
+  return memory.read(addr, data);
+}
+
+auto BSMemory::write(uint24 addr, uint8 data) -> void {
+  if(readonly) {
+    return;
+  }
+
+  if((addr & 0xff0000) == 0) {
+    regs.writeOld = regs.writeNew;
+    regs.writeNew = data;
+
+    if(regs.writeEnable && regs.writeOld == regs.writeNew) {
+      return memory.write(addr, data);
+    }
+  } else {
+    if(regs.writeEnable) {
+      return memory.write(addr, data);
+    }
+  }
+
+  if(addr == 0x0000) {
+    regs.command <<= 8;
+    regs.command  |= data;
+
+    if((regs.command & 0xffff) == 0x38d0) {
+      regs.flashEnable = true;
+      regs.readEnable  = true;
+    }
+  }
+
+  if(addr == 0x2aaa) {
+    regs.command <<= 8;
+    regs.command  |= data;
+  }
+
+  if(addr == 0x5555) {
+    regs.command <<= 8;
+    regs.command  |= data;
+
+    if((regs.command & 0xffffff) == 0xaa5570) {
+      regs.writeEnable = false;
+    }
+
+    if((regs.command & 0xffffff) == 0xaa55a0) {
+      regs.writeOld = 0x00;
+      regs.writeNew = 0x00;
+      regs.flashEnable = true;
+      regs.writeEnable = true;
+    }
+
+    if((regs.command & 0xffffff) == 0xaa55f0) {
+      regs.flashEnable = false;
+      regs.readEnable  = false;
+      regs.writeEnable = false;
+    }
+
+    memory.writeProtect(!regs.writeEnable);
+  }
+}
+
+}
diff --git a/higan/sfc-balanced/slot/bsmemory/bsmemory.hpp b/higan/sfc-balanced/slot/bsmemory/bsmemory.hpp
new file mode 100644
index 0000000..6c3abd2
--- /dev/null
+++ b/higan/sfc-balanced/slot/bsmemory/bsmemory.hpp
@@ -0,0 +1,28 @@
+struct BSMemory : Memory {
+  auto init() -> void;
+  auto load() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto size() const -> uint;
+  auto read(uint24 addr, uint8) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  uint pathID = 0;
+  MappedRAM memory;
+  bool readonly;
+
+private:
+  struct {
+    uint command;
+    uint8 writeOld;
+    uint8 writeNew;
+
+    bool flashEnable;
+    bool readEnable;
+    bool writeEnable;
+  } regs;
+};
+
+extern BSMemory bsmemory;
diff --git a/higan/sfc-balanced/slot/slot.hpp b/higan/sfc-balanced/slot/slot.hpp
new file mode 100644
index 0000000..fd52598
--- /dev/null
+++ b/higan/sfc-balanced/slot/slot.hpp
@@ -0,0 +1,2 @@
+#include <sfc-balanced/slot/bsmemory/bsmemory.hpp>
+#include <sfc-balanced/slot/sufamiturbo/sufamiturbo.hpp>
diff --git a/higan/sfc-balanced/slot/sufamiturbo/serialization.cpp b/higan/sfc-balanced/slot/sufamiturbo/serialization.cpp
new file mode 100644
index 0000000..0f97d98
--- /dev/null
+++ b/higan/sfc-balanced/slot/sufamiturbo/serialization.cpp
@@ -0,0 +1,3 @@
+auto SufamiTurboCartridge::serialize(serializer& s) -> void {
+  s.array(ram.data(), ram.size());
+}
diff --git a/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.cpp b/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.cpp
new file mode 100644
index 0000000..ce60feb
--- /dev/null
+++ b/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.cpp
@@ -0,0 +1,17 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+#include "serialization.cpp"
+SufamiTurboCartridge sufamiturboA;
+SufamiTurboCartridge sufamiturboB;
+
+auto SufamiTurboCartridge::load() -> void {
+}
+
+auto SufamiTurboCartridge::unload() -> void {
+  rom.reset();
+  ram.reset();
+}
+
+}
diff --git a/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.hpp b/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.hpp
new file mode 100644
index 0000000..11fbfc2
--- /dev/null
+++ b/higan/sfc-balanced/slot/sufamiturbo/sufamiturbo.hpp
@@ -0,0 +1,12 @@
+struct SufamiTurboCartridge {
+  auto load() -> void;
+  auto unload() -> void;
+  auto serialize(serializer&) -> void;
+
+  uint pathID = 0;
+  MappedRAM rom;
+  MappedRAM ram;
+};
+
+extern SufamiTurboCartridge sufamiturboA;
+extern SufamiTurboCartridge sufamiturboB;
diff --git a/higan/sfc-balanced/smp/memory.cpp b/higan/sfc-balanced/smp/memory.cpp
new file mode 100644
index 0000000..63b727f
--- /dev/null
+++ b/higan/sfc-balanced/smp/memory.cpp
@@ -0,0 +1,201 @@
+alwaysinline auto SMP::readRAM(uint16 addr) -> uint8 {
+  if(addr >= 0xffc0 && io.iplromEnable) return iplrom[addr & 0x3f];
+  if(io.ramDisable) return 0x5a;  //0xff on mini-SNES
+  return apuram[addr];
+}
+
+alwaysinline auto SMP::writeRAM(uint16 addr, uint8 data) -> void {
+  //writes to $ffc0-$ffff always go to apuram, even if the iplrom is enabled
+  if(io.ramWritable && !io.ramDisable) apuram[addr] = data;
+}
+
+auto SMP::readPort(uint2 port) const -> uint8 {
+  return apuram[0xf4 + port];
+}
+
+auto SMP::writePort(uint2 port, uint8 data) -> void {
+  apuram[0xf4 + port] = data;
+}
+
+auto SMP::readBus(uint16 addr) -> uint8 {
+  uint result;
+
+  switch(addr) {
+  case 0xf0:  //TEST -- write-only register
+    return 0x00;
+
+  case 0xf1:  //CONTROL -- write-only register
+    return 0x00;
+
+  case 0xf2:  //DSPADDR
+    return io.dspAddr;
+
+  case 0xf3:  //DSPDATA
+    //0x80-0xff are read-only mirrors of 0x00-0x7f
+    return dsp.read(io.dspAddr & 0x7f);
+
+  case 0xf4:  //CPUIO0
+  case 0xf5:  //CPUIO1
+  case 0xf6:  //CPUIO2
+  case 0xf7:  //CPUIO3
+    synchronize(cpu);
+    return cpu.readPort(addr);
+
+  case 0xf8:  //RAM0
+    return io.ram00f8;
+
+  case 0xf9:  //RAM1
+    return io.ram00f9;
+
+  case 0xfa:  //T0TARGET
+  case 0xfb:  //T1TARGET
+  case 0xfc:  //T2TARGET -- write-only registers
+    return 0x00;
+
+  case 0xfd:  //T0OUT -- 4-bit counter value
+    result = timer0.stage3;
+    timer0.stage3 = 0;
+    return result;
+
+  case 0xfe:  //T1OUT -- 4-bit counter value
+    result = timer1.stage3;
+    timer1.stage3 = 0;
+    return result;
+
+  case 0xff:  //T2OUT -- 4-bit counter value
+    result = timer2.stage3;
+    timer2.stage3 = 0;
+    return result;
+  }
+
+  return readRAM(addr);
+}
+
+auto SMP::writeBus(uint16 addr, uint8 data) -> void {
+  switch(addr) {
+  case 0xf0:  //TEST
+    if(regs.p.p) break;  //writes only valid when P flag is clear
+
+    io.clockSpeed    = (data >> 6) & 3;
+    io.timerSpeed    = (data >> 4) & 3;
+    io.timersEnable  = data & 0x08;
+    io.ramDisable    = data & 0x04;
+    io.ramWritable   = data & 0x02;
+    io.timersDisable = data & 0x01;
+
+    io.timerStep = (1 << io.clockSpeed) + (2 << io.timerSpeed);
+
+    timer0.synchronizeStage1();
+    timer1.synchronizeStage1();
+    timer2.synchronizeStage1();
+    break;
+
+  case 0xf1:  //CONTROL
+    io.iplromEnable = data & 0x80;
+
+    if(data & 0x30) {
+      //one-time clearing of APU port read registers,
+      //emulated by simulating CPU writes of 0x00
+      synchronize(cpu);
+      if(data & 0x20) {
+        cpu.writePort(2, 0x00);
+        cpu.writePort(3, 0x00);
+      }
+      if(data & 0x10) {
+        cpu.writePort(0, 0x00);
+        cpu.writePort(1, 0x00);
+      }
+    }
+
+    //0->1 transistion resets timers
+    if(!timer2.enable && (data & 0x04)) {
+      timer2.stage2 = 0;
+      timer2.stage3 = 0;
+    }
+    timer2.enable = data & 0x04;
+
+    if(!timer1.enable && (data & 0x02)) {
+      timer1.stage2 = 0;
+      timer1.stage3 = 0;
+    }
+    timer1.enable = data & 0x02;
+
+    if(!timer0.enable && (data & 0x01)) {
+      timer0.stage2 = 0;
+      timer0.stage3 = 0;
+    }
+    timer0.enable = data & 0x01;
+    break;
+
+  case 0xf2:  //DSPADDR
+    io.dspAddr = data;
+    break;
+
+  case 0xf3:  //DSPDATA
+    if(io.dspAddr & 0x80) break;  //0x80-0xff are read-only mirrors of 0x00-0x7f
+    dsp.write(io.dspAddr & 0x7f, data);
+    break;
+
+  case 0xf4:  //CPUIO0
+  case 0xf5:  //CPUIO1
+  case 0xf6:  //CPUIO2
+  case 0xf7:  //CPUIO3
+    synchronize(cpu);
+    writePort(addr, data);
+    break;
+
+  case 0xf8:  //RAM0
+    io.ram00f8 = data;
+    break;
+
+  case 0xf9:  //RAM1
+    io.ram00f9 = data;
+    break;
+
+  case 0xfa:  //T0TARGET
+    timer0.target = data;
+    break;
+
+  case 0xfb:  //T1TARGET
+    timer1.target = data;
+    break;
+
+  case 0xfc:  //T2TARGET
+    timer2.target = data;
+    break;
+
+  case 0xfd:  //T0OUT
+  case 0xfe:  //T1OUT
+  case 0xff:  //T2OUT -- read-only registers
+    break;
+  }
+
+  writeRAM(addr, data);  //all writes, even to MMIO registers, appear on bus
+}
+
+auto SMP::idle() -> void {
+  step(24);
+  cycleEdge();
+}
+
+auto SMP::read(uint16 addr) -> uint8 {
+  step(12);
+  uint8 data = readBus(addr);
+  step(12);
+  cycleEdge();
+  debug(smp.read, addr, data);
+  return data;
+}
+
+auto SMP::write(uint16 addr, uint8 data) -> void {
+  step(24);
+  writeBus(addr, data);
+  cycleEdge();
+  debug(smp.write, addr, data);
+}
+
+auto SMP::readDisassembler(uint16 addr) -> uint8 {
+  if((addr & 0xfff0) == 0x00f0) return 0x00;
+  if((addr & 0xffc0) == 0xffc0 && io.iplromEnable) return iplrom[addr & 0x3f];
+  return apuram[addr];
+}
diff --git a/higan/sfc-balanced/smp/serialization.cpp b/higan/sfc-balanced/smp/serialization.cpp
new file mode 100644
index 0000000..215f392
--- /dev/null
+++ b/higan/sfc-balanced/smp/serialization.cpp
@@ -0,0 +1,48 @@
+auto SMP::serialize(serializer& s) -> void {
+  SPC700::serialize(s);
+  Thread::serialize(s);
+
+  s.array(apuram);
+
+  s.integer(io.clockCounter);
+  s.integer(io.dspCounter);
+  s.integer(io.timerStep);
+
+  s.integer(io.clockSpeed);
+  s.integer(io.timerSpeed);
+  s.integer(io.timersEnable);
+  s.integer(io.ramDisable);
+  s.integer(io.ramWritable);
+  s.integer(io.timersDisable);
+
+  s.integer(io.iplromEnable);
+
+  s.integer(io.dspAddr);
+
+  s.integer(io.ram00f8);
+  s.integer(io.ram00f9);
+
+  s.integer(timer0.stage0);
+  s.integer(timer0.stage1);
+  s.integer(timer0.stage2);
+  s.integer(timer0.stage3);
+  s.integer(timer0.line);
+  s.integer(timer0.enable);
+  s.integer(timer0.target);
+
+  s.integer(timer1.stage0);
+  s.integer(timer1.stage1);
+  s.integer(timer1.stage2);
+  s.integer(timer1.stage3);
+  s.integer(timer1.line);
+  s.integer(timer1.enable);
+  s.integer(timer1.target);
+
+  s.integer(timer2.stage0);
+  s.integer(timer2.stage1);
+  s.integer(timer2.stage2);
+  s.integer(timer2.stage3);
+  s.integer(timer2.line);
+  s.integer(timer2.enable);
+  s.integer(timer2.target);
+}
diff --git a/higan/sfc-balanced/smp/smp.cpp b/higan/sfc-balanced/smp/smp.cpp
new file mode 100644
index 0000000..fdc315f
--- /dev/null
+++ b/higan/sfc-balanced/smp/smp.cpp
@@ -0,0 +1,101 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+SMP smp;
+
+#include "memory.cpp"
+#include "timing.cpp"
+#include "serialization.cpp"
+
+auto SMP::Enter() -> void {
+  while(true) scheduler.synchronize(), smp.main();
+}
+
+auto SMP::main() -> void {
+  debug(smp.execute, regs.pc);
+  instruction();
+}
+
+auto SMP::load(Markup::Node node) -> bool {
+  if(auto name = node["smp/rom/name"].text()) {
+    if(auto fp = interface->open(ID::System, name, File::Read, File::Required)) {
+      fp->read(iplrom, 64);
+      return true;
+    }
+  }
+  return false;
+}
+
+auto SMP::power() -> void {
+  //targets not initialized/changed upon reset
+  timer0.target = 0;
+  timer1.target = 0;
+  timer2.target = 0;
+}
+
+auto SMP::reset() -> void {
+  create(Enter, 32040.0 * 768.0);
+
+  regs.pc.l = iplrom[62];
+  regs.pc.h = iplrom[63];
+  regs.a = 0x00;
+  regs.x = 0x00;
+  regs.y = 0x00;
+  regs.s = 0xef;
+  regs.p = 0x02;
+
+  for(auto& byte : apuram) byte = random(0x00);
+  apuram[0x00f4] = 0x00;
+  apuram[0x00f5] = 0x00;
+  apuram[0x00f6] = 0x00;
+  apuram[0x00f7] = 0x00;
+
+  io.clockCounter = 0;
+  io.dspCounter = 0;
+  io.timerStep = 3;
+
+  //$00f0
+  io.clockSpeed = 0;
+  io.timerSpeed = 0;
+  io.timersEnable = true;
+  io.ramDisable = false;
+  io.ramWritable = true;
+  io.timersDisable = false;
+
+  //$00f1
+  io.iplromEnable = true;
+
+  //$00f2
+  io.dspAddr = 0x00;
+
+  //$00f8,$00f9
+  io.ram00f8 = 0x00;
+  io.ram00f9 = 0x00;
+
+  timer0.stage0 = 0;
+  timer1.stage0 = 0;
+  timer2.stage0 = 0;
+
+  timer0.stage1 = 0;
+  timer1.stage1 = 0;
+  timer2.stage1 = 0;
+
+  timer0.stage2 = 0;
+  timer1.stage2 = 0;
+  timer2.stage2 = 0;
+
+  timer0.stage3 = 0;
+  timer1.stage3 = 0;
+  timer2.stage3 = 0;
+
+  timer0.line = 0;
+  timer1.line = 0;
+  timer2.line = 0;
+
+  timer0.enable = false;
+  timer1.enable = false;
+  timer2.enable = false;
+}
+
+}
diff --git a/higan/sfc-balanced/smp/smp.hpp b/higan/sfc-balanced/smp/smp.hpp
new file mode 100644
index 0000000..e6e112f
--- /dev/null
+++ b/higan/sfc-balanced/smp/smp.hpp
@@ -0,0 +1,80 @@
+//Sony CXP1100Q-1
+
+struct SMP : Processor::SPC700, Thread {
+  auto readPort(uint2 port) const -> uint8;
+  auto writePort(uint2 port, uint8 data) -> void;
+
+  auto main() -> void;
+  auto load(Markup::Node) -> bool;
+  auto power() -> void;
+  auto reset() -> void;
+
+  auto serialize(serializer&) -> void;
+
+  uint8 iplrom[64];
+  uint8 apuram[64 * 1024];
+
+privileged:
+  struct IO {
+    //timing
+    uint clockCounter;
+    uint dspCounter;
+    uint timerStep;
+
+    //$00f0
+    uint8 clockSpeed;
+    uint8 timerSpeed;
+    bool timersEnable;
+    bool ramDisable;
+    bool ramWritable;
+    bool timersDisable;
+
+    //$00f1
+    bool iplromEnable;
+
+    //$00f2
+    uint8 dspAddr;
+
+    //$00f8,$00f9
+    uint8 ram00f8;
+    uint8 ram00f9;
+  } io;
+
+  static auto Enter() -> void;
+
+  //memory.cpp
+  auto readRAM(uint16 addr) -> uint8;
+  auto writeRAM(uint16 addr, uint8 data) -> void;
+
+  auto readBus(uint16 addr) -> uint8;
+  auto writeBus(uint16 addr, uint8 data) -> void;
+
+  auto idle() -> void override;
+  auto read(uint16 addr) -> uint8 override;
+  auto write(uint16 addr, uint8 data) -> void override;
+
+  auto readDisassembler(uint16 addr) -> uint8 override;
+
+  //timing.cpp
+  template<uint Frequency> struct Timer {
+    uint8 stage0;
+    uint8 stage1;
+    uint8 stage2;
+    uint4 stage3;
+    bool line;
+    bool enable;
+    uint8 target;
+
+    auto tick() -> void;
+    auto synchronizeStage1() -> void;
+  };
+
+  Timer<192> timer0;
+  Timer<192> timer1;
+  Timer< 24> timer2;
+
+  alwaysinline auto step(uint clocks) -> void;
+  alwaysinline auto cycleEdge() -> void;
+};
+
+extern SMP smp;
diff --git a/higan/sfc-balanced/smp/timing.cpp b/higan/sfc-balanced/smp/timing.cpp
new file mode 100644
index 0000000..e26ae9e
--- /dev/null
+++ b/higan/sfc-balanced/smp/timing.cpp
@@ -0,0 +1,57 @@
+auto SMP::step(uint clocks) -> void {
+  Thread::step(clocks);
+  dsp.clock -= clocks;
+  while(dsp.clock < 0) dsp.main();
+
+  #if defined(DEBUGGER)
+  synchronize(cpu);
+  #else
+  //forcefully sync S-SMP to S-CPU in case chips are not communicating
+  //sync if S-SMP is more than 1ms ahead of S-CPU
+  if(clock() - cpu.clock() > Thread::Second / 1'000) synchronize(cpu);
+  #endif
+}
+
+auto SMP::cycleEdge() -> void {
+  timer0.tick();
+  timer1.tick();
+  timer2.tick();
+
+  //TEST register S-SMP speed control
+  //24 clocks have already been added for this cycle at this point
+  switch(io.clockSpeed) {
+  case 0: break;                 //100% speed
+  case 1: step(24); break;       // 50% speed
+  case 2: while(true) step(24);  //  0% speed -- locks S-SMP
+  case 3: step(24 * 9); break;   // 10% speed
+  }
+}
+
+template<uint Frequency> auto SMP::Timer<Frequency>::tick() -> void {
+  //stage 0 increment
+  stage0 += smp.io.timerStep;
+  if(stage0 < Frequency) return;
+  stage0 -= Frequency;
+
+  //stage 1 increment
+  stage1 ^= 1;
+  synchronizeStage1();
+}
+
+template<uint Frequency> auto SMP::Timer<Frequency>::synchronizeStage1() -> void {
+  bool newLine = stage1;
+  if(!smp.io.timersEnable) newLine = false;
+  if(smp.io.timersDisable) newLine = false;
+
+  bool oldLine = line;
+  line = newLine;
+  if(oldLine != 1 || newLine != 0) return;  //only pulse on 1->0 transition
+
+  //stage 2 increment
+  if(!enable) return;
+  if(++stage2 != target) return;
+
+  //stage 3 increment
+  stage2 = 0;
+  stage3++;
+}
diff --git a/higan/sfc-balanced/system/peripherals.cpp b/higan/sfc-balanced/system/peripherals.cpp
new file mode 100644
index 0000000..dbd0a8f
--- /dev/null
+++ b/higan/sfc-balanced/system/peripherals.cpp
@@ -0,0 +1,63 @@
+Peripherals peripherals;
+
+auto Peripherals::unload() -> void {
+  delete controllerPort1;
+  delete controllerPort2;
+  delete expansionPort;
+  controllerPort1 = nullptr;
+  controllerPort2 = nullptr;
+  expansionPort = nullptr;
+}
+
+auto Peripherals::reset() -> void {
+  connect(ID::Port::Controller1, settings.controllerPort1);
+  connect(ID::Port::Controller2, settings.controllerPort2);
+  connect(ID::Port::Expansion, settings.expansionPort);
+}
+
+auto Peripherals::connect(uint port, uint device) -> void {
+  if(port == ID::Port::Controller1) {
+    settings.controllerPort1 = device;
+    if(!system.loaded()) return;
+
+    delete controllerPort1;
+    switch(device) { default:
+    case ID::Device::None:    controllerPort1 = new Controller(0); break;
+    case ID::Device::Gamepad: controllerPort1 = new Gamepad(0); break;
+    case ID::Device::Mouse:   controllerPort1 = new Mouse(0); break;
+    }
+  }
+
+  if(port == ID::Port::Controller2) {
+    settings.controllerPort2 = device;
+    if(!system.loaded()) return;
+
+    delete controllerPort2;
+    switch(device) { default:
+    case ID::Device::None:          controllerPort2 = new Controller(1); break;
+    case ID::Device::Gamepad:       controllerPort2 = new Gamepad(1); break;
+    case ID::Device::Mouse:         controllerPort2 = new Mouse(1); break;
+    case ID::Device::SuperMultitap: controllerPort2 = new SuperMultitap(1); break;
+    case ID::Device::SuperScope:    controllerPort2 = new SuperScope(1); break;
+    case ID::Device::Justifier:     controllerPort2 = new Justifier(1, false); break;
+    case ID::Device::Justifiers:    controllerPort2 = new Justifier(1, true); break;
+    }
+  }
+
+  if(port == ID::Port::Expansion) {
+    settings.expansionPort = device;
+    if(!system.loaded()) return;
+
+    delete expansionPort;
+    switch(device) { default:
+    case ID::Device::None:        expansionPort = new Expansion; break;
+    case ID::Device::Satellaview: expansionPort = new Satellaview; break;
+    case ID::Device::S21FX:       expansionPort = new S21FX; break;
+    }
+  }
+
+  cpu.peripherals.reset();
+  cpu.peripherals.append(controllerPort1);
+  cpu.peripherals.append(controllerPort2);
+  cpu.peripherals.append(expansionPort);
+}
diff --git a/higan/sfc-balanced/system/random.cpp b/higan/sfc-balanced/system/random.cpp
new file mode 100644
index 0000000..5e68546
--- /dev/null
+++ b/higan/sfc-balanced/system/random.cpp
@@ -0,0 +1,14 @@
+Random random;
+
+auto Random::seed(uint seed) -> void {
+  iter = seed;
+}
+
+auto Random::operator()(uint result) -> uint {
+  if(!settings.random) return result;
+  return iter = (iter >> 1) ^ (((iter & 1) - 1) & 0xedb88320);
+}
+
+auto Random::serialize(serializer& s) -> void {
+  s.integer(iter);
+}
diff --git a/higan/sfc-balanced/system/serialization.cpp b/higan/sfc-balanced/system/serialization.cpp
new file mode 100644
index 0000000..7f883df
--- /dev/null
+++ b/higan/sfc-balanced/system/serialization.cpp
@@ -0,0 +1,90 @@
+auto System::serialize() -> serializer {
+  serializer s(serializeSize);
+
+  uint signature = 0x31545342;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+  memory::copy(&version, (const char*)Emulator::SerializerVersion, Emulator::SerializerVersion.size());
+  memory::copy(&hash, (const char*)cartridge.sha256(), 64);
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  serializeAll(s);
+  return s;
+}
+
+auto System::unserialize(serializer& s) -> bool {
+  uint signature = 0;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  if(signature != 0x31545342) return false;
+  if(string{version} != Emulator::SerializerVersion) return false;
+
+  power();
+  serializeAll(s);
+  return true;
+}
+
+//internal
+
+auto System::serialize(serializer& s) -> void {
+  s.integer((uint&)information.region);
+}
+
+auto System::serializeAll(serializer& s) -> void {
+  cartridge.serialize(s);
+  system.serialize(s);
+  random.serialize(s);
+  cpu.serialize(s);
+  smp.serialize(s);
+  ppu.serialize(s);
+  dsp.serialize(s);
+
+  if(cartridge.has.ICD2) icd2.serialize(s);
+  if(cartridge.has.MCC) mcc.serialize(s);
+  if(cartridge.has.Event) event.serialize(s);
+  if(cartridge.has.SA1) sa1.serialize(s);
+  if(cartridge.has.SuperFX) superfx.serialize(s);
+  if(cartridge.has.ARMDSP) armdsp.serialize(s);
+  if(cartridge.has.HitachiDSP) hitachidsp.serialize(s);
+  if(cartridge.has.NECDSP) necdsp.serialize(s);
+  if(cartridge.has.EpsonRTC) epsonrtc.serialize(s);
+  if(cartridge.has.SharpRTC) sharprtc.serialize(s);
+  if(cartridge.has.SPC7110) spc7110.serialize(s);
+  if(cartridge.has.SDD1) sdd1.serialize(s);
+  if(cartridge.has.OBC1) obc1.serialize(s);
+  if(cartridge.has.MSU1) msu1.serialize(s);
+
+  if(cartridge.has.SufamiTurboSlots) sufamiturboA.serialize(s), sufamiturboB.serialize(s);
+}
+
+//perform dry-run state save:
+//determines exactly how many bytes are needed to save state for this cartridge,
+//as amount varies per game (eg different RAM sizes, special chips, etc.)
+auto System::serializeInit() -> void {
+  serializer s;
+
+  uint signature = 0;
+  char version[16] = {};
+  char hash[64] = {};
+  char description[512] = {};
+
+  s.integer(signature);
+  s.array(version);
+  s.array(hash);
+  s.array(description);
+
+  serializeAll(s);
+  serializeSize = s.size();
+}
diff --git a/higan/sfc-balanced/system/system.cpp b/higan/sfc-balanced/system/system.cpp
new file mode 100644
index 0000000..6a6c4c5
--- /dev/null
+++ b/higan/sfc-balanced/system/system.cpp
@@ -0,0 +1,208 @@
+#include <sfc-balanced/sfc.hpp>
+
+namespace SuperFamicom {
+
+System system;
+Scheduler scheduler;
+Cheat cheat;
+#include "video.cpp"
+#include "peripherals.cpp"
+#include "random.cpp"
+#include "serialization.cpp"
+
+auto System::run() -> void {
+  if(scheduler.enter() == Scheduler::Event::Frame) ppu.refresh();
+}
+
+auto System::runToSave() -> void {
+  scheduler.synchronize(cpu);
+  scheduler.synchronize(smp);
+  scheduler.synchronize(ppu);
+  for(auto coprocessor : cpu.coprocessors) scheduler.synchronize(*coprocessor);
+  for(auto peripheral : cpu.peripherals) scheduler.synchronize(*peripheral);
+}
+
+auto System::init() -> void {
+  assert(interface != nullptr);
+
+  icd2.init();
+  mcc.init();
+  nss.init();
+  event.init();
+  sa1.init();
+  superfx.init();
+  armdsp.init();
+  hitachidsp.init();
+  necdsp.init();
+  epsonrtc.init();
+  sharprtc.init();
+  spc7110.init();
+  sdd1.init();
+  obc1.init();
+  msu1.init();
+
+  bsmemory.init();
+}
+
+auto System::term() -> void {
+}
+
+auto System::load() -> bool {
+  information = Information();
+
+  if(auto fp = interface->open(ID::System, "manifest.bml", File::Read, File::Required)) {
+    information.manifest = fp->reads();
+  } else return false;
+
+  auto document = BML::unserialize(information.manifest);
+  auto system = document["system"];
+
+  bus.reset();
+  if(!cpu.load(system)) return false;
+  if(!smp.load(system)) return false;
+  if(!ppu.load(system)) return false;
+  if(!dsp.load(system)) return false;
+  if(!cartridge.load()) return false;
+
+  information.region = cartridge.region() == Cartridge::Region::NTSC ? Region::NTSC : Region::PAL;
+  if(system["region"].text() == "NTSC") information.region = Region::NTSC;
+  if(system["region"].text() == "PAL" ) information.region = Region::PAL;
+
+  information.colorburst = region() == Region::NTSC
+  ? Emulator::Constants::Colorburst::NTSC
+  : Emulator::Constants::Colorburst::PAL * 4.0 / 5.0;
+
+  if(cartridge.has.ICD2) icd2.load();
+  if(cartridge.has.MCC) mcc.load();
+  if(cartridge.has.NSSDIP) nss.load();
+  if(cartridge.has.Event) event.load();
+  if(cartridge.has.SA1) sa1.load();
+  if(cartridge.has.SuperFX) superfx.load();
+  if(cartridge.has.ARMDSP) armdsp.load();
+  if(cartridge.has.HitachiDSP) hitachidsp.load();
+  if(cartridge.has.NECDSP) necdsp.load();
+  if(cartridge.has.EpsonRTC) epsonrtc.load();
+  if(cartridge.has.SharpRTC) sharprtc.load();
+  if(cartridge.has.SPC7110) spc7110.load();
+  if(cartridge.has.SDD1) sdd1.load();
+  if(cartridge.has.OBC1) obc1.load();
+  if(cartridge.has.MSU1) msu1.load();
+
+  if(cartridge.has.BSMemorySlot) bsmemory.load();
+  if(cartridge.has.SufamiTurboSlots) sufamiturboA.load(), sufamiturboB.load();
+
+  serializeInit();
+  return information.loaded = true;
+}
+
+auto System::save() -> void {
+  if(!loaded()) return;
+  cartridge.save();
+}
+
+auto System::unload() -> void {
+  if(!loaded()) return;
+  peripherals.unload();
+
+  if(cartridge.has.ICD2) icd2.unload();
+  if(cartridge.has.MCC) mcc.unload();
+  if(cartridge.has.NSSDIP) nss.unload();
+  if(cartridge.has.Event) event.unload();
+  if(cartridge.has.SA1) sa1.unload();
+  if(cartridge.has.SuperFX) superfx.unload();
+  if(cartridge.has.ARMDSP) armdsp.unload();
+  if(cartridge.has.HitachiDSP) hitachidsp.unload();
+  if(cartridge.has.NECDSP) necdsp.unload();
+  if(cartridge.has.EpsonRTC) epsonrtc.unload();
+  if(cartridge.has.SharpRTC) sharprtc.unload();
+  if(cartridge.has.SPC7110) spc7110.unload();
+  if(cartridge.has.SDD1) sdd1.unload();
+  if(cartridge.has.OBC1) obc1.unload();
+  if(cartridge.has.MSU1) msu1.unload();
+
+  if(cartridge.has.BSMemorySlot) bsmemory.unload();
+  if(cartridge.has.SufamiTurboSlots) sufamiturboA.unload(), sufamiturboB.unload();
+
+  cartridge.unload();
+  information.loaded = false;
+}
+
+auto System::power() -> void {
+  random.seed((uint)time(0));
+
+  cpu.power();
+  smp.power();
+  dsp.power();
+  ppu.power();
+
+  if(cartridge.has.ICD2) icd2.power();
+  if(cartridge.has.MCC) mcc.power();
+  if(cartridge.has.NSSDIP) nss.power();
+  if(cartridge.has.Event) event.power();
+  if(cartridge.has.SA1) sa1.power();
+  if(cartridge.has.SuperFX) superfx.power();
+  if(cartridge.has.ARMDSP) armdsp.power();
+  if(cartridge.has.HitachiDSP) hitachidsp.power();
+  if(cartridge.has.NECDSP) necdsp.power();
+  if(cartridge.has.EpsonRTC) epsonrtc.power();
+  if(cartridge.has.SharpRTC) sharprtc.power();
+  if(cartridge.has.SPC7110) spc7110.power();
+  if(cartridge.has.SDD1) sdd1.power();
+  if(cartridge.has.OBC1) obc1.power();
+  if(cartridge.has.MSU1) msu1.power();
+
+  if(cartridge.has.BSMemorySlot) bsmemory.power();
+
+  reset();
+}
+
+auto System::reset() -> void {
+  Emulator::video.reset();
+  Emulator::video.setInterface(interface);
+  configureVideoPalette();
+  configureVideoEffects();
+
+  Emulator::audio.reset();
+  Emulator::audio.setInterface(interface);
+
+  scheduler.reset();
+  cpu.reset();
+  smp.reset();
+  dsp.reset();
+  ppu.reset();
+
+  if(cartridge.has.ICD2) icd2.reset();
+  if(cartridge.has.MCC) mcc.reset();
+  if(cartridge.has.NSSDIP) nss.reset();
+  if(cartridge.has.Event) event.reset();
+  if(cartridge.has.SA1) sa1.reset();
+  if(cartridge.has.SuperFX) superfx.reset();
+  if(cartridge.has.ARMDSP) armdsp.reset();
+  if(cartridge.has.HitachiDSP) hitachidsp.reset();
+  if(cartridge.has.NECDSP) necdsp.reset();
+  if(cartridge.has.EpsonRTC) epsonrtc.reset();
+  if(cartridge.has.SharpRTC) sharprtc.reset();
+  if(cartridge.has.SPC7110) spc7110.reset();
+  if(cartridge.has.SDD1) sdd1.reset();
+  if(cartridge.has.OBC1) obc1.reset();
+  if(cartridge.has.MSU1) msu1.reset();
+
+  if(cartridge.has.BSMemorySlot) bsmemory.reset();
+
+  if(cartridge.has.ICD2) cpu.coprocessors.append(&icd2);
+  if(cartridge.has.Event) cpu.coprocessors.append(&event);
+  if(cartridge.has.SA1) cpu.coprocessors.append(&sa1);
+  if(cartridge.has.SuperFX) cpu.coprocessors.append(&superfx);
+  if(cartridge.has.ARMDSP) cpu.coprocessors.append(&armdsp);
+  if(cartridge.has.HitachiDSP) cpu.coprocessors.append(&hitachidsp);
+  if(cartridge.has.NECDSP) cpu.coprocessors.append(&necdsp);
+  if(cartridge.has.EpsonRTC) cpu.coprocessors.append(&epsonrtc);
+  if(cartridge.has.SharpRTC) cpu.coprocessors.append(&sharprtc);
+  if(cartridge.has.SPC7110) cpu.coprocessors.append(&spc7110);
+  if(cartridge.has.MSU1) cpu.coprocessors.append(&msu1);
+
+  scheduler.primary(cpu);
+  peripherals.reset();
+}
+
+}
diff --git a/higan/sfc-balanced/system/system.hpp b/higan/sfc-balanced/system/system.hpp
new file mode 100644
index 0000000..26809de
--- /dev/null
+++ b/higan/sfc-balanced/system/system.hpp
@@ -0,0 +1,67 @@
+struct Interface;
+
+struct System {
+  enum class Region : bool { NTSC = 0, PAL = 1 };
+
+  inline auto loaded() const -> bool { return information.loaded; }
+  inline auto region() const -> Region { return information.region; }
+  inline auto colorburst() const -> double { return information.colorburst; }
+
+  auto run() -> void;
+  auto runToSave() -> void;
+
+  auto init() -> void;
+  auto term() -> void;
+  auto load() -> bool;
+  auto save() -> void;
+  auto unload() -> void;
+  auto power() -> void;
+  auto reset() -> void;
+
+  //video.cpp
+  auto configureVideoPalette() -> void;
+  auto configureVideoEffects() -> void;
+
+  //serialization.cpp
+  auto serialize() -> serializer;
+  auto unserialize(serializer&) -> bool;
+
+private:
+  struct Information {
+    string manifest;
+    bool loaded = false;
+    Region region = Region::NTSC;
+    double colorburst = 0.0;
+  } information;
+
+  uint serializeSize = 0;
+
+  auto serialize(serializer&) -> void;
+  auto serializeAll(serializer&) -> void;
+  auto serializeInit() -> void;
+
+  friend class Cartridge;
+};
+
+struct Peripherals {
+  auto unload() -> void;
+  auto reset() -> void;
+  auto connect(uint port, uint device) -> void;
+
+  Controller* controllerPort1 = nullptr;
+  Controller* controllerPort2 = nullptr;
+  Expansion* expansionPort = nullptr;
+};
+
+struct Random {
+  auto seed(uint seed) -> void;
+  auto operator()(uint result) -> uint;
+  auto serialize(serializer& s) -> void;
+
+private:
+  uint iter = 0;
+};
+
+extern System system;
+extern Peripherals peripherals;
+extern Random random;
diff --git a/higan/sfc-balanced/system/video.cpp b/higan/sfc-balanced/system/video.cpp
new file mode 100644
index 0000000..f537903
--- /dev/null
+++ b/higan/sfc-balanced/system/video.cpp
@@ -0,0 +1,7 @@
+auto System::configureVideoPalette() -> void {
+  Emulator::video.setPalette();
+}
+
+auto System::configureVideoEffects() -> void {
+  Emulator::video.setEffect(Emulator::Video::Effect::ColorBleed, settings.blurEmulation);
+}
diff --git a/higan/sfc/GNUmakefile b/higan/sfc/GNUmakefile
index 045a9cf..8d25ddf 100644
--- a/higan/sfc/GNUmakefile
+++ b/higan/sfc/GNUmakefile
@@ -1,4 +1,4 @@
-processors += r65816 spc700 arm gsu hg51b upd96050
+processors += wdc65816 spc700 arm gsu hg51b upd96050
 
 objects += sfc-interface sfc-system sfc-controller
 objects += sfc-cartridge sfc-memory
diff --git a/higan/sfc/controller/justifier/justifier.cpp b/higan/sfc/controller/justifier/justifier.cpp
index ec90af0..520c72b 100644
--- a/higan/sfc/controller/justifier/justifier.cpp
+++ b/higan/sfc/controller/justifier/justifier.cpp
@@ -10,7 +10,7 @@ device(!chained ? ID::Device::Justifier : ID::Device::Justifiers)
   prev = 0;
 
   player1.sprite = Emulator::video.createSprite(32, 32);
-  player1.sprite->setPixels(Resource::Sprite::CrosshairGreen);
+  player1.sprite->setPixels(Resource::Sprite::CrosshairBlue);
   player1.x = 256 / 2;
   player1.y = 240 / 2;
   player1.trigger = false;
diff --git a/higan/sfc/controller/super-scope/super-scope.cpp b/higan/sfc/controller/super-scope/super-scope.cpp
index 7980cce..a66aa47 100644
--- a/higan/sfc/controller/super-scope/super-scope.cpp
+++ b/higan/sfc/controller/super-scope/super-scope.cpp
@@ -77,7 +77,7 @@ auto SuperScope::data() -> uint2 {
     bool newturbo = interface->inputPoll(port, ID::Device::SuperScope, Turbo);
     if(newturbo && !oldturbo) {
       turbo = !turbo;  //toggle state
-      sprite->setPixels(turbo ? Resource::Sprite::CrosshairRed : Resource::Sprite::CrosshairGreen);
+      sprite->setPixels(turbo ? Resource::Sprite::CrosshairTurbo : Resource::Sprite::CrosshairGreen);
     }
     oldturbo = newturbo;
 
diff --git a/higan/sfc/coprocessor/sa1/sa1.cpp b/higan/sfc/coprocessor/sa1/sa1.cpp
index 3f0c0d7..bb84b1f 100644
--- a/higan/sfc/coprocessor/sa1/sa1.cpp
+++ b/higan/sfc/coprocessor/sa1/sa1.cpp
@@ -30,7 +30,7 @@ auto SA1::main() -> void {
   instruction();
 }
 
-//override R65816::interrupt() to support SA-1 vector location IO registers
+//override WDC65816::interrupt() to support SA-1 vector location IO registers
 auto SA1::interrupt() -> void {
   read(r.pc.d);
   idle();
diff --git a/higan/sfc/coprocessor/sa1/sa1.hpp b/higan/sfc/coprocessor/sa1/sa1.hpp
index 80543e8..4df67be 100644
--- a/higan/sfc/coprocessor/sa1/sa1.hpp
+++ b/higan/sfc/coprocessor/sa1/sa1.hpp
@@ -1,4 +1,4 @@
-struct SA1 : Processor::R65816, Thread {
+struct SA1 : Processor::WDC65816, Thread {
   //sa1.cpp
   static auto Enter() -> void;
   auto main() -> void;
diff --git a/higan/sfc/coprocessor/sa1/serialization.cpp b/higan/sfc/coprocessor/sa1/serialization.cpp
index 9902a0b..5ab0688 100644
--- a/higan/sfc/coprocessor/sa1/serialization.cpp
+++ b/higan/sfc/coprocessor/sa1/serialization.cpp
@@ -1,5 +1,5 @@
 auto SA1::serialize(serializer& s) -> void {
-  R65816::serialize(s);
+  WDC65816::serialize(s);
   Thread::serialize(s);
 
   s.array(iram.data(), iram.size());
diff --git a/higan/sfc/cpu/cpu.hpp b/higan/sfc/cpu/cpu.hpp
index d899fab..6dcb316 100644
--- a/higan/sfc/cpu/cpu.hpp
+++ b/higan/sfc/cpu/cpu.hpp
@@ -1,4 +1,4 @@
-struct CPU : Processor::R65816, Thread, PPUcounter {
+struct CPU : Processor::WDC65816, Thread, PPUcounter {
   auto interruptPending() const -> bool override;
   auto pio() const -> uint8;
   auto joylatch() const -> bool;
diff --git a/higan/sfc/cpu/serialization.cpp b/higan/sfc/cpu/serialization.cpp
index 6439ca6..90c2a82 100644
--- a/higan/sfc/cpu/serialization.cpp
+++ b/higan/sfc/cpu/serialization.cpp
@@ -1,5 +1,5 @@
 auto CPU::serialize(serializer& s) -> void {
-  R65816::serialize(s);
+  WDC65816::serialize(s);
   Thread::serialize(s);
   PPUcounter::serialize(s);
 
diff --git a/higan/sfc/cpu/timing.cpp b/higan/sfc/cpu/timing.cpp
index 72fe614..3c610ff 100644
--- a/higan/sfc/cpu/timing.cpp
+++ b/higan/sfc/cpu/timing.cpp
@@ -25,9 +25,9 @@ auto CPU::step(uint clocks) -> void {
   }
 
   #if defined(DEBUGGER)
-  synchronizeSMP();
-  synchronizePPU();
-  synchronizeCoprocessors();
+  synchronize(smp);
+  synchronize(ppu);
+  for(auto coprocessor : coprocessors) synchronize(*coprocessor);
   #endif
 }
 
diff --git a/higan/sfc/interface/interface.cpp b/higan/sfc/interface/interface.cpp
index 211b16a..ae1163b 100644
--- a/higan/sfc/interface/interface.cpp
+++ b/higan/sfc/interface/interface.cpp
@@ -10,6 +10,7 @@ Interface::Interface() {
   interface = this;
   system.init();
 
+  information.preAlpha     = false;
   information.manufacturer = "Nintendo";
   information.name         = "Super Famicom";
   information.overscan     = true;
@@ -18,11 +19,11 @@ Interface::Interface() {
   information.capability.states = true;
   information.capability.cheats = true;
 
-  media.append({ID::SuperFamicom, "Super Famicom", "sfc"});
+  media.append({ID::SuperFamicom, "Super Famicom", "sfc", Domain::Home});
 
-  Port controllerPort1{ID::Port::Controller1, "Controller Port 1"};
-  Port controllerPort2{ID::Port::Controller2, "Controller Port 2"};
-  Port expansionPort{ID::Port::Expansion, "Expansion Port"};
+  Port controllerPort1{ID::Port::Controller1, "Controller Port 1", PlugAndPlay};
+  Port controllerPort2{ID::Port::Controller2, "Controller Port 2", PlugAndPlay};
+  Port expansionPort{ID::Port::Expansion, "Expansion Port", PlugAndPlay};
 
   { Device device{ID::Device::None, "None"};
     controllerPort1.devices.append(device);
@@ -130,10 +131,17 @@ auto Interface::videoSize() -> VideoSize {
 }
 
 auto Interface::videoSize(uint width, uint height, bool arc) -> VideoSize {
-  uint w = 256 * (arc ? 8.0 / 7.0 : 1.0);
+  double w = 256;
+  if(arc) {
+    double squarePixelRate = system.region() == System::Region::NTSC
+    ? 135.0 / 22.0 * 1'000'000.0
+    : 7'375'000.0;
+    //note: PAL SNES multiples colorburst by 4/5 to make clock rate
+    w *= squarePixelRate / (system.colorburst() * 6.0 / (2.0 + 2.0));
+  }
   uint h = 240;
-  uint m = min(width / w, height / h);
-  return {w * m, h * m};
+  uint m = min((uint)(width / w), height / h);
+  return {(uint)(w * m), h * m};
 }
 
 auto Interface::videoFrequency() -> double {
@@ -275,4 +283,49 @@ auto Interface::set(const string& name, const any& value) -> bool {
   return false;
 }
 
+auto Interface::exportMemory() -> void {
+  string pathname = {path(cartridge.pathID()), "debug/"};
+  directory::create(pathname);
+
+  if(auto fp = interface->open(cartridge.pathID(), "debug/work.ram", File::Write)) fp->write(cpu.wram, 128 * 1024);
+  if(cartridge.ram.size()) if(auto fp = interface->open(cartridge.pathID(), "debug/program-save.ram", File::Write)) {
+    fp->write(cartridge.ram.data(), cartridge.ram.size());
+  }
+  if(cartridge.has.MCC) if(auto fp = interface->open(cartridge.pathID(), "debug/mcc.ram", File::Write)) {
+    fp->write(mcc.ram.data(), mcc.ram.size());
+  }
+  if(cartridge.has.Event) if(auto fp = interface->open(cartridge.pathID(), "debug/event.ram", File::Write)) {
+    fp->write(event.ram.data(), event.ram.size());
+  }
+  if(cartridge.has.SA1) {
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sa1.internal.ram", File::Write)) {
+      fp->write(sa1.iram.data(), sa1.iram.size());
+    }
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sa1.bitmap-work.ram", File::Write)) {
+      fp->write(sa1.bwram.data(), sa1.bwram.size());
+    }
+  }
+  if(cartridge.has.SuperFX) if(auto fp = interface->open(cartridge.pathID(), "debug/superfx.ram", File::Write)) {
+    fp->write(superfx.ram.data(), superfx.ram.size());
+  }
+  if(cartridge.has.SPC7110) if(auto fp = interface->open(cartridge.pathID(), "debug/spc7110.ram", File::Write)) {
+    fp->write(spc7110.ram.data(), spc7110.ram.size());
+  }
+  if(cartridge.has.SDD1) if(auto fp = interface->open(cartridge.pathID(), "debug/sdd1.ram", File::Write)) {
+    fp->write(sdd1.ram.data(), sdd1.ram.size());
+  }
+  if(cartridge.has.OBC1) if(auto fp = interface->open(cartridge.pathID(), "debug/obc1.ram", File::Write)) {
+    fp->write(obc1.ram.data(), obc1.ram.size());
+  }
+
+  if(cartridge.has.SufamiTurboSlots) {
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sufamiturbo.slota.ram", File::Write)) {
+      fp->write(sufamiturboA.ram.data(), sufamiturboA.ram.size());
+    }
+    if(auto fp = interface->open(cartridge.pathID(), "debug/sufamiturbo.slotb.ram", File::Write)) {
+      fp->write(sufamiturboB.ram.data(), sufamiturboB.ram.size());
+    }
+  }
+}
+
 }
diff --git a/higan/sfc/interface/interface.hpp b/higan/sfc/interface/interface.hpp
index 4ff0eaa..490c6cf 100644
--- a/higan/sfc/interface/interface.hpp
+++ b/higan/sfc/interface/interface.hpp
@@ -70,6 +70,9 @@ struct Interface : Emulator::Interface {
   auto cap(const string& name) -> bool override;
   auto get(const string& name) -> any override;
   auto set(const string& name, const any& value) -> bool override;
+
+  //debugger functions
+  auto exportMemory() -> void override;
 };
 
 struct Settings {
diff --git a/higan/sfc/memory/memory-inline.hpp b/higan/sfc/memory/memory-inline.hpp
index 92387c1..babbd5d 100644
--- a/higan/sfc/memory/memory-inline.hpp
+++ b/higan/sfc/memory/memory-inline.hpp
@@ -69,7 +69,7 @@ auto Bus::read(uint24 addr, uint8 data) -> uint8 {
   data = reader[lookup[addr]](target[addr], data);
   if(cheat) {
     if(!(addr & 0x40e000)) addr = 0x7e0000 | (addr & 0x1fff);  //de-mirror WRAM
-    if(auto result = cheat.find(addr, data)) return result();
+    if(auto result = cheat.find<1>(addr, data)) return result();
   }
   return data;
 }
diff --git a/higan/sfc/sfc.hpp b/higan/sfc/sfc.hpp
index fc71d2a..72137a3 100644
--- a/higan/sfc/sfc.hpp
+++ b/higan/sfc/sfc.hpp
@@ -11,7 +11,7 @@
 #include <processor/arm/arm.hpp>
 #include <processor/gsu/gsu.hpp>
 #include <processor/hg51b/hg51b.hpp>
-#include <processor/r65816/r65816.hpp>
+#include <processor/wdc65816/wdc65816.hpp>
 #include <processor/spc700/spc700.hpp>
 #include <processor/upd96050/upd96050.hpp>
 
diff --git a/higan/systems/Atari 2600.sys/manifest.bml b/higan/systems/Atari 2600.sys/manifest.bml
new file mode 100644
index 0000000..553ebe3
--- /dev/null
+++ b/higan/systems/Atari 2600.sys/manifest.bml	
@@ -0,0 +1,5 @@
+system region=auto name:Atari 2600
+  cpu
+  pia
+    ram name=work.ram size=0x80 volatile
+  tia
diff --git a/higan/systems/Famicom.sys/manifest.bml b/higan/systems/Famicom.sys/manifest.bml
index 231fa13..1fa1730 100644
--- a/higan/systems/Famicom.sys/manifest.bml
+++ b/higan/systems/Famicom.sys/manifest.bml
@@ -1 +1,8 @@
-system name:Famicom
+system region=auto name:Famicom
+  cpu
+    ram name=work.ram size=0x800 volatile
+  ppu ntsc-version=RP2C02G pal-version=RP2C07 dendy-version=UA6538
+    ram name=nametable.ram size=0x800 volatile
+    ram name=object.ram size=256 volatile
+    ram name=palette.ram size=28 volatile
+  apu ntsc-version=RP2A03G pal-version=RP2A07G dendy-version=UA6527P
diff --git a/higan/systems/FamicomBox.sys/manifest.bml b/higan/systems/FamicomBox.sys/manifest.bml
new file mode 100644
index 0000000..9669520
--- /dev/null
+++ b/higan/systems/FamicomBox.sys/manifest.bml
@@ -0,0 +1,12 @@
+system name:FamicomBox
+  cpu
+    ram name=work.ram size=0x2000 volatile
+  ppu version=RP2C02C
+    ram name=nametable.ram size=0x800 volatile
+    ram name=object.ram size=256 volatile
+    ram name=palette.ram size=28 volatile
+  apu version=RP2A03E
+  prg
+    rom name=bios.program.rom size=0x8000
+  chr
+    rom name=bios.character.rom size=0x2000
diff --git a/higan/systems/Game Gear.sys/manifest.bml b/higan/systems/Game Gear.sys/manifest.bml
index 41f40dc..1e6c520 100644
--- a/higan/systems/Game Gear.sys/manifest.bml	
+++ b/higan/systems/Game Gear.sys/manifest.bml	
@@ -1 +1,6 @@
 system name:Game Gear
+  cpu
+    ram name=work.ram size=0x2000 volatile
+  psg
+  vdp
+    ram name=video.ram size=0x4000 volatile
diff --git a/higan/systems/Master System.sys/manifest.bml b/higan/systems/Master System.sys/manifest.bml
index 770db3f..f95e3b3 100644
--- a/higan/systems/Master System.sys/manifest.bml	
+++ b/higan/systems/Master System.sys/manifest.bml	
@@ -1 +1,6 @@
-system name:Master System
+system region=auto name:Master System
+  cpu
+    ram name=work.ram size=0x2000 volatile
+  psg
+  vdp
+    ram name=video.ram size=0x4000 volatile
diff --git a/higan/systems/Mega Drive.sys/manifest.bml b/higan/systems/Mega Drive.sys/manifest.bml
index 016eab9..267f0d2 100644
--- a/higan/systems/Mega Drive.sys/manifest.bml	
+++ b/higan/systems/Mega Drive.sys/manifest.bml	
@@ -1 +1,12 @@
 system name:Mega Drive
+  bus
+    rom name=tmss.rom size=0x800
+    ram name=work.ram size=0x10000 volatile
+  apu
+    ram name=audio.ram size=0x2000 volatile
+  vdp
+    ram name=video.ram size=0x10000 volatile
+    ram name=palette.ram size=0x80 volatile
+    ram name=vertical-scroll.ram size=0x50 volatile
+  psg
+  ym2612
diff --git a/higan/systems/PlayChoice-10.sys/manifest.bml b/higan/systems/PlayChoice-10.sys/manifest.bml
new file mode 100644
index 0000000..f6bb5ac
--- /dev/null
+++ b/higan/systems/PlayChoice-10.sys/manifest.bml
@@ -0,0 +1,22 @@
+system name:PlayChoice-10
+  cpu
+    ram name=work.ram size=0x800 volatile
+  ppu version=RP2C03B
+    ram name=nametable.ram size=0x800 volatile
+    ram name=object.ram size=256 volatile
+    ram name=palette.ram size=28 volatile
+  apu version=RP2A03G
+  pc10
+    screen mode=2
+    cpu
+      rom name=bios-dual.rom size=0x4000
+    video-circuit
+      vrom name=character.rom size=0x6000
+      cgrom name=palette.rom size=0x300
+    setting name="Attract Mode Sounds"
+      option value="0x0040" name="Plays"
+      option value="0x0000" name="Muted"
+    setting name="Play Time / Coin"
+      option value="0x8000" name="Free Play"
+      option value="0x3f00" name="5:00"
+      option value="0x2200" name="2:30"
diff --git a/higan/systems/SG-1000.sys/manifest.bml b/higan/systems/SG-1000.sys/manifest.bml
new file mode 100644
index 0000000..0581850
--- /dev/null
+++ b/higan/systems/SG-1000.sys/manifest.bml
@@ -0,0 +1,6 @@
+system region=auto name:SG-1000
+  cpu
+    ram name=work.ram size=0x400 volatile
+  psg
+  vdc
+    ram name=video.ram size=0x4000 volatile
diff --git a/higan/systems/VS. System.sys/manifest.bml b/higan/systems/VS. System.sys/manifest.bml
new file mode 100644
index 0000000..e556451
--- /dev/null
+++ b/higan/systems/VS. System.sys/manifest.bml	
@@ -0,0 +1,8 @@
+system name:VS. System
+  cpu
+    ram name=work.ram size=0x800 volatile
+  ppu
+    ram name=nametable.ram size=0x1000 volatile
+    ram name=object.ram size=256 volatile
+    ram name=palette.ram size=28 volatile
+  apu
diff --git a/higan/target-loki/GNUmakefile b/higan/target-loki/GNUmakefile
new file mode 100644
index 0000000..c21db45
--- /dev/null
+++ b/higan/target-loki/GNUmakefile
@@ -0,0 +1,76 @@
+ifndef name
+  name := loki
+endif
+flags += -DDEBUGGER
+
+include sfc/GNUmakefile
+include processor/GNUmakefile
+
+ui_objects := ui-loki ui-program ui-settings ui-input
+ui_objects += ui-debugger ui-terminal ui-presentation
+ui_objects += ruby hiro
+ui_objects += $(if $(call streq,$(platform),windows),ui-resource)
+
+# platform
+ifeq ($(platform),windows)
+  ruby += video.gdi audio.directsound input.windows
+else ifeq ($(platform),macosx)
+  ruby += video.cgl audio.openal input.quartz
+else ifeq ($(platform),linux)
+  ruby += video.xshm audio.openal input.sdl
+else ifeq ($(platform),bsd)
+  ruby += video.xshm audio.oss input.sdl
+endif
+
+# ruby
+include ../ruby/GNUmakefile
+link += $(rubylink)
+
+# hiro
+include ../hiro/GNUmakefile
+link += $(hirolink)
+
+# rules
+objects := $(ui_objects) $(objects)
+objects := $(patsubst %,obj/%.o,$(objects))
+
+obj/ruby.o: ../ruby/ruby.cpp $(call rwildcard,../ruby/)
+	$(compiler) $(rubyflags) -c $< -o $@
+
+obj/hiro.o: ../hiro/hiro.cpp $(call rwildcard,../hiro/)
+	$(compiler) $(hiroflags) -c $< -o $@
+
+obj/ui-loki.o: $(ui)/loki.cpp $(call rwildcard,$(ui)/)
+obj/ui-program.o: $(ui)/program/program.cpp $(call rwildcard,$(ui)/)
+obj/ui-settings.o: $(ui)/settings/settings.cpp $(call rwildcard,$(ui)/)
+obj/ui-input.o: $(ui)/input/input.cpp $(call rwildcard,$(ui)/)
+obj/ui-debugger.o: $(ui)/debugger/debugger.cpp $(call rwildcard,$(ui)/)
+obj/ui-terminal.o: $(ui)/terminal/terminal.cpp $(call rwildcard,$(ui)/)
+obj/ui-presentation.o: $(ui)/presentation/presentation.cpp $(call rwildcard,$(ui)/)
+
+obj/ui-resource.o:
+	windres data/resource.rc obj/ui-resource.o
+
+# targets
+build: $(objects)
+	$(call unique,$(compiler) -o out/$(name) $(objects) $(link))
+
+install:
+ifeq ($(shell id -un),root)
+	$(error "make install should not be run as root")
+else ifneq ($(filter $(platform),linux bsd),)
+	mkdir -p $(prefix)/bin/
+	mkdir -p $(prefix)/share/icons/
+	mkdir -p $(prefix)/share/$(name)/
+	cp out/$(name) $(prefix)/bin/$(name)
+	cp data/higan.png $(prefix)/share/icons/$(name).png
+	cp -R profile/* $(prefix)/share/$(name)/
+endif
+
+uninstall:
+ifeq ($(shell id -un),root)
+	$(error "make uninstall should not be run as root")
+else ifneq ($(filter $(platform),linux bsd),)
+	if [ -f $(prefix)/bin/$(name) ]; then rm $(prefix)/bin/$(name); fi
+	if [ -f $(prefix)/share/icons/$(name).png ]; then rm $(prefix)/share/icons/$(name).png; fi
+endif
diff --git a/higan/target-loki/debugger/debugger.cpp b/higan/target-loki/debugger/debugger.cpp
new file mode 100644
index 0000000..aa3e880
--- /dev/null
+++ b/higan/target-loki/debugger/debugger.cpp
@@ -0,0 +1,482 @@
+#include "../loki.hpp"
+unique_pointer<Debugger> debugger;
+
+Debugger::Debugger() {
+  debugger = this;
+  SFC::cpu.debugger.op_exec = {&Debugger::cpuExec, this};
+  SFC::cpu.debugger.op_read = {&Debugger::cpuRead, this};
+  SFC::cpu.debugger.op_write = {&Debugger::cpuWrite, this};
+  SFC::smp.debugger.op_exec = {&Debugger::smpExec, this};
+  SFC::smp.debugger.op_read = {&Debugger::smpRead, this};
+  SFC::smp.debugger.op_write = {&Debugger::smpWrite, this};
+  SFC::ppu.debugger.vram_read = {&Debugger::ppuVramRead, this};
+  SFC::ppu.debugger.vram_write = {&Debugger::ppuVramWrite, this};
+  SFC::ppu.debugger.oam_read = {&Debugger::ppuOamRead, this};
+  SFC::ppu.debugger.oam_write = {&Debugger::ppuOamWrite, this};
+  SFC::ppu.debugger.cgram_read = {&Debugger::ppuCgramRead, this};
+  SFC::ppu.debugger.cgram_write = {&Debugger::ppuCgramWrite, this};
+}
+
+void Debugger::load() {
+  directory::create({program->folderPaths(0), "loki/"});
+
+  cpuUsage = new uint8_t[0x1000000]();
+  apuUsage = new uint8_t[0x10000]();
+  file fp;
+
+  if(fp.open({program->folderPaths(0), "loki/cpu.usage.map"}, file::mode::read)) {
+    if(fp.size() == 0x1000000) fp.read(cpuUsage, 0x1000000);
+    fp.close();
+  }
+
+  if(fp.open({program->folderPaths(0), "loki/apu.usage.map"}, file::mode::read)) {
+    if(fp.size() == 0x10000) fp.read(apuUsage, 0x10000);
+    fp.close();
+  }
+}
+
+void Debugger::unload() {
+  if(cpuTracerFile.open()) cpuTracerFile.close();
+  if(smpTracerFile.open()) smpTracerFile.close();
+  file::write({program->folderPaths(0), "loki/cpu.usage.map"}, cpuUsage, 0x1000000);
+  file::write({program->folderPaths(0), "loki/apu.usage.map"}, apuUsage, 0x10000);
+  delete[] cpuUsage;
+  delete[] apuUsage;
+  cpuUsage = nullptr;
+  apuUsage = nullptr;
+}
+
+void Debugger::main() {
+  if(running == false) {
+    usleep(20 * 1000);
+    return;
+  }
+
+  emulator->run();
+}
+
+void Debugger::run() {
+  running = true;
+}
+
+void Debugger::stop() {
+  running = false;
+  cpuRunFor = nothing;
+  cpuRunTo = nothing;
+  cpuStepFor = nothing;
+  cpuStepTo = nothing;
+  smpRunFor = nothing;
+  smpRunTo = nothing;
+  smpStepFor = nothing;
+  smpStepTo = nothing;
+}
+
+void Debugger::leave() {
+  stop();
+  SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+}
+
+bool Debugger::breakpointTest(Source source, Breakpoint::Mode mode, unsigned addr, uint8 data) {
+  if(savingState) return false;
+  for(unsigned n = 0; n < breakpoints.size(); n++) {
+    auto& bp = breakpoints[n];
+    if(bp.source != source) continue;
+    if(bp.mode != mode) continue;
+    if(bp.addr != addr) continue;
+    if(bp.mode != Breakpoint::Mode::Execute && bp.data && bp.data() != data) continue;
+    string output = {"Breakpoint #", n, " hit"};
+    if(bp.mode == Breakpoint::Mode::Read ) output.append("; read ",  hex(data, 2U));
+    if(bp.mode == Breakpoint::Mode::Write) output.append("; wrote ", hex(data, 2U));
+    output.append("; triggered: ", ++bp.triggered);
+    echo(output, "\n");
+    return true;
+  }
+  return false;
+}
+
+string Debugger::cpuDisassemble() {
+  char text[4096];
+  SFC::cpu.disassemble_opcode(text);
+  return {text, " F:", (unsigned)SFC::cpu.field(), " V:", natural(SFC::cpu.vcounter(), 3U), " H:", natural(SFC::cpu.hcounter(), 4U)};
+}
+
+string Debugger::cpuDisassemble(unsigned addr, bool e, bool m, bool x) {
+  char text[4096];
+  SFC::cpu.disassemble_opcode(text, addr, e, m, x);
+  return {text, " F:", (unsigned)SFC::cpu.field(), " V:", natural(SFC::cpu.vcounter(), 3U), " H:", natural(SFC::cpu.hcounter(), 4U)};
+}
+
+void Debugger::cpuExec(uint24 addr) {
+  cpuUsage[addr] |= Usage::Execute;
+  if(SFC::cpu.regs.e   == 0) cpuUsage[addr] &= ~Usage::FlagE;
+  if(SFC::cpu.regs.p.m == 0) cpuUsage[addr] &= ~Usage::FlagM;
+  if(SFC::cpu.regs.p.x == 0) cpuUsage[addr] &= ~Usage::FlagX;
+  if(SFC::cpu.regs.e   == 1) cpuUsage[addr] |=  Usage::FlagE;
+  if(SFC::cpu.regs.p.m == 1) cpuUsage[addr] |=  Usage::FlagM;
+  if(SFC::cpu.regs.p.x == 1) cpuUsage[addr] |=  Usage::FlagX;
+
+  cpuInstructionCounter++;
+
+  if(cpuTracerFile.open()) {
+    if(!cpuTracerMask || cpuTracerMask[addr] == false) {
+      if(cpuTracerMask) cpuTracerMask[addr] = true;
+      cpuTracerFile.print(cpuDisassemble(), "\n");
+    }
+  }
+
+  if(savingState) return;
+
+  if(breakpointTest(Source::CPU, Breakpoint::Mode::Execute, addr)) {
+    echo(cpuDisassemble(), "\n");
+    return leave();
+  }
+
+  if(cpuRunFor) {
+    if(--cpuRunFor() == 0) {
+      echo(cpuDisassemble(), "\n");
+      return leave();
+    }
+  }
+
+  if(cpuRunTo) {
+    if(addr == cpuRunTo()) {
+      echo(cpuDisassemble(), "\n");
+      return leave();
+    }
+  }
+
+  if(cpuStepFor) {
+    echo(cpuDisassemble(), "\n");
+    if(--cpuStepFor() == 0) return leave();
+  }
+
+  if(cpuStepTo) {
+    echo(cpuDisassemble(), "\n");
+    if(addr == cpuStepTo()) return leave();
+  }
+}
+
+void Debugger::cpuRead(uint24 addr, uint8 data) {
+  cpuUsage[addr] |= Usage::Read;
+  if(breakpointTest(Source::CPU, Breakpoint::Mode::Read, addr, data)) leave();
+}
+
+void Debugger::cpuWrite(uint24 addr, uint8 data) {
+  cpuUsage[addr] |= Usage::Write;
+  if(breakpointTest(Source::CPU, Breakpoint::Mode::Write, addr, data)) leave();
+}
+
+void Debugger::echoBreakpoints() {
+  if(breakpoints.size() == 0) return;
+  echo("#    source  type      addr    data  triggered\n");
+  echo("---  ------  --------  ------  ----  ---------\n");
+  char t[256];
+  for(unsigned n = 0; n < breakpoints.size(); n++) {
+    auto& bp = breakpoints[n];
+    string output = {natural(n, 3U), "  "};
+    sprintf(t, "%-6s", (const uint8_t*)sourceName(bp.source));
+    output.append(string{t}, "  ");
+    if(bp.mode == Breakpoint::Mode::Disabled) output.append("disabled  ");
+    if(bp.mode == Breakpoint::Mode::Read    ) output.append("read      ");
+    if(bp.mode == Breakpoint::Mode::Write   ) output.append("write     ");
+    if(bp.mode == Breakpoint::Mode::Execute ) output.append("execute   ");
+    output.append(hex(bp.addr, 6U), "  ");
+    output.append(bp.data ? hex(bp.data(), 2U) : "  ", "    ");
+    sprintf(t, "%-9s", (const uint8_t*)bp.triggered);
+    output.append(string{t});
+    echo(output, "\n");
+  }
+}
+
+void Debugger::echoDisassemble(Source source, unsigned addr, signed size) {
+  if(source != Source::CPU && source != Source::SMP) return;
+  const unsigned maximumDisplacement = (source == Source::CPU ? 5 : 4);  //maximum opcode length
+  uint8_t* usage = (source == Source::CPU ? cpuUsage : apuUsage);
+  if(!(usage[addr] & Usage::Execute)) return; echo("No usage data available for ", sourceName(source), "/", hex(addr, 6U), "\n");
+
+  while(size > 0) {
+    string text;
+    if(source == Source::CPU) {
+      text = cpuDisassemble(addr, usage[addr] & Usage::FlagE, usage[addr] & Usage::FlagM, usage[addr] & Usage::FlagX);
+    }
+    if(source == Source::SMP) {
+      text = smpDisassemble(addr, usage[addr] & Usage::FlagP);
+    }
+    text.resize(20);  //remove register information
+    echo(text, "\n");
+    if(--size <= 0) break;
+
+    unsigned displacement = 1;
+    while(displacement < maximumDisplacement) {  //maximum opcode length is four bytes
+      if(usage[addr + displacement] & Usage::Execute) break;
+      displacement++;
+    }
+    if(displacement >= maximumDisplacement) {
+      echo("...\n");
+      return;
+    }
+    addr += displacement;
+  }
+}
+
+void Debugger::echoHex(Source source, unsigned addr, signed size) {
+  if(memorySize(source) == 0) return;  //not a valid memory pool
+  while(size > 0) {
+    string hexdata, asciidata;
+    for(unsigned n = 0; n < 16; n++) {
+      unsigned offset = addr;
+      if(source == Source::CPU && ((offset & 0x40e000) == 0x002000 || (offset & 0x40e000) == 0x004000)) {
+        //$00-3f,80-bf:2000-5fff
+        //reading MMIO registers can negatively impact emulation, so disallow these reads
+        hexdata.append("?? ");
+        asciidata.append("?");
+      } else {
+        uint8 byte = memoryRead(source, addr + n);
+        hexdata.append(hex(byte, 2U), " ");
+        asciidata.append(byte >= 0x20 && byte <= 0x7e ? (char)byte : '.');
+      }
+    }
+    echo(hex(addr % memorySize(source), 6U), " [ ", hexdata, "] ", asciidata, "\n");
+    addr += 16, size -= 16;
+  }
+}
+
+void Debugger::memoryExport(Source source, string name) {
+  file fp;
+  if(fp.open(name, file::mode::write)) {
+    unsigned size = memorySize(source);
+    for(unsigned addr = 0; addr < size; addr++) {
+      fp.write(memoryRead(source, addr));
+    }
+    echo("Exported memory to ", filename(name), "\n");
+  }
+}
+
+uint8 Debugger::memoryRead(Source source, unsigned addr) {
+  if(source == Source::CPU) {
+    return SFC::bus.read(addr & 0xffffff, SFC::cpu.regs.mdr);
+  }
+
+  if(source == Source::APU) {
+    return SFC::smp.apuram[addr & 0xffff];
+  }
+
+  if(source == Source::WRAM) {
+    return SFC::cpu.wram[addr & 0x1ffff];
+  }
+
+  if(source == Source::VRAM) {
+    return SFC::ppu.vram[addr & 0xffff];
+  }
+
+  if(source == Source::OAM) {
+    return SFC::ppu.oam[addr % 544];
+  }
+
+  if(source == Source::CGRAM) {
+    return SFC::ppu.cgram[addr & 511];
+  }
+
+  return 0x00;
+}
+
+unsigned Debugger::memorySize(Source source) {
+  switch(source) {
+  case Source::CPU: return 0x1000000;
+  case Source::APU: return 0x10000;
+  case Source::WRAM: return 0x20000;
+  case Source::VRAM: return 0x10000;
+  case Source::OAM: return 544;
+  case Source::CGRAM: return 512;
+  }
+  return 0;
+}
+
+void Debugger::memoryWrite(Source source, unsigned addr, uint8 data) {
+  if(source == Source::CPU) {
+    SFC::bus.write(addr & 0xffffff, data);
+    return;
+  }
+
+  if(source == Source::APU) {
+    SFC::smp.apuram[addr & 0xffff] = data;
+    return;
+  }
+
+  if(source == Source::WRAM) {
+    SFC::cpu.wram[addr & 0x1ffff] = data;
+    return;
+  }
+
+  if(source == Source::VRAM) {
+    SFC::ppu.vram[addr & 0xffff] = data;
+    return;
+  }
+
+  if(source == Source::OAM) {
+    SFC::ppu.oam[addr % 544] = data;
+    SFC::ppu.sprite.update(addr % 544, data);
+    return;
+  }
+
+  if(source == Source::CGRAM) {
+    if(addr & 1) data &= 0x7f;
+    SFC::ppu.cgram[addr] = data;
+    return;
+  }
+}
+
+void Debugger::ppuCgramRead(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::CGRAM, Breakpoint::Mode::Read, addr, data)) leave();
+}
+
+void Debugger::ppuCgramWrite(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::CGRAM, Breakpoint::Mode::Write, addr, data)) leave();
+}
+
+void Debugger::ppuOamRead(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::OAM, Breakpoint::Mode::Read, addr, data)) leave();
+}
+
+void Debugger::ppuOamWrite(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::OAM, Breakpoint::Mode::Write, addr, data)) leave();
+}
+
+void Debugger::ppuVramRead(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::VRAM, Breakpoint::Mode::Read, addr, data)) leave();
+}
+
+void Debugger::ppuVramWrite(uint16 addr, uint8 data) {
+  if(breakpointTest(Source::VRAM, Breakpoint::Mode::Write, addr, data)) leave();
+}
+
+string Debugger::smpDisassemble() {
+  return SFC::smp.disassemble(SFC::smp.regs.pc, SFC::smp.regs.p.p);
+}
+
+string Debugger::smpDisassemble(uint16 addr, bool p) {
+  return SFC::smp.disassemble(addr, p);
+}
+
+void Debugger::smpExec(uint16 addr) {
+  apuUsage[addr] |= Usage::Execute;
+  if(SFC::smp.regs.p.p == 0) apuUsage[addr] &= ~Usage::FlagP;
+  if(SFC::smp.regs.p.p == 1) apuUsage[addr] |=  Usage::FlagP;
+
+  smpInstructionCounter++;
+
+  if(smpTracerFile.open()) {
+    if(!smpTracerMask || smpTracerMask[addr] == false) {
+      if(smpTracerMask) smpTracerMask[addr] = true;
+      smpTracerFile.print(smpDisassemble(), "\n");
+    }
+  }
+
+  if(savingState) return;
+
+  if(breakpointTest(Source::SMP, Breakpoint::Mode::Execute, addr)) {
+    echo(smpDisassemble(), "\n");
+    return leave();
+  }
+
+  if(smpRunFor) {
+    if(--smpRunFor() == 0) {
+      echo(smpDisassemble(), "\n");
+      return leave();
+    }
+  }
+
+  if(smpRunTo) {
+    if(addr == smpRunTo()) {
+      echo(smpDisassemble(), "\n");
+      return leave();
+    }
+  }
+
+  if(smpStepFor) {
+    echo(smpDisassemble(), "\n");
+    if(--smpStepFor() == 0) return leave();
+  }
+
+  if(smpStepTo) {
+    echo(smpDisassemble(), "\n");
+    if(addr == smpStepTo()) return leave();
+  }
+}
+
+void Debugger::smpRead(uint16 addr, uint8 data) {
+  apuUsage[addr] |= Usage::Read;
+  if(breakpointTest(Source::SMP, Breakpoint::Mode::Read, addr, data)) leave();
+  if(breakpointTest(Source::APU, Breakpoint::Mode::Read, addr, data)) leave();
+}
+
+void Debugger::smpWrite(uint16 addr, uint8 data) {
+  apuUsage[addr] |= Usage::Write;
+  if(breakpointTest(Source::SMP, Breakpoint::Mode::Write, addr, data)) leave();
+  if(breakpointTest(Source::APU, Breakpoint::Mode::Write, addr, data)) leave();
+}
+
+string Debugger::sourceName(Source source) {
+  switch(source) {
+  case Source::CPU: return "cpu";
+  case Source::SMP: return "smp";
+  case Source::PPU: return "ppu";
+  case Source::DSP: return "dsp";
+  case Source::APU: return "apu";
+  case Source::WRAM: return "wram";
+  case Source::VRAM: return "vram";
+  case Source::OAM: return "oam";
+  case Source::CGRAM: return "cgram";
+  }
+  return "none";
+}
+
+void Debugger::stateLoad(string name) {
+  auto memory = file::read(name);
+  if(memory.size() == 0) return; echo("Error: state file ", filename(name), " not found\n");
+  serializer s(memory.data(), memory.size());
+  if(emulator->unserialize(s) == false) return; echo("Error: failed to unserialize state from ", filename(name), "\n");
+  echo("State loaded from ", filename(name), "\n");
+}
+
+void Debugger::stateSave(string name) {
+  savingState = true;
+  serializer s = emulator->serialize();
+  if(file::write(name, s.data(), s.size())) {
+    echo("State saved to ", filename(name), "\n");
+  }
+  savingState = false;
+}
+
+void Debugger::tracerDisable(Source source) {
+  if(source != Source::CPU && source != Source::SMP) return;
+  file& tracerFile = (source == Source::CPU ? cpuTracerFile : smpTracerFile);
+  if(tracerFile.open() == false) return;
+  tracerFile.close();
+  echo(sourceName(source).upcase(), " tracer disabled\n");
+}
+
+void Debugger::tracerEnable(Source source, string filename) {
+  if(source != Source::CPU && source != Source::SMP) return;
+  file& tracerFile = (source == Source::CPU ? cpuTracerFile : smpTracerFile);
+  if(tracerFile.open() == true) return;
+  if(tracerFile.open(filename, file::mode::write)) {
+    echo(sourceName(source).upcase(), " tracer enabled\n");
+  }
+}
+
+void Debugger::tracerMaskDisable(Source source) {
+  if(source != Source::CPU && source != Source::SMP) return;
+  bitvector& tracerMask = (source == Source::CPU ? cpuTracerMask : smpTracerMask);
+  tracerMask.reset();
+  echo(sourceName(source).upcase(), " tracer mask disabled\n");
+}
+
+void Debugger::tracerMaskEnable(Source source) {
+  if(source != Source::CPU && source != Source::SMP) return;
+  bitvector& tracerMask = (source == Source::CPU ? cpuTracerMask : smpTracerMask);
+  unsigned size = (source == Source::CPU ? 0x1000000 : 0x10000);
+  tracerMask.resize(size);
+  tracerMask.clear();
+  echo(sourceName(source).upcase(), " tracer mask enabled\n");
+}
diff --git a/higan/target-loki/debugger/debugger.hpp b/higan/target-loki/debugger/debugger.hpp
new file mode 100644
index 0000000..9f797c1
--- /dev/null
+++ b/higan/target-loki/debugger/debugger.hpp
@@ -0,0 +1,92 @@
+struct Debugger {
+  enum class Source : unsigned { CPU, SMP, PPU, DSP, APU, WRAM, VRAM, OAM, CGRAM };
+
+  struct Breakpoint {
+    Source source = Source::CPU;
+    enum class Mode : unsigned { Disabled, Read, Write, Execute } mode = Mode::Disabled;
+    unsigned addr = 0;
+    maybe<uint8> data;
+    unsigned triggered = 0;  //counter for number of times breakpoint was hit
+  };
+
+  struct Usage {
+    enum : unsigned {
+      Read     = 0x01,
+      Write    = 0x02,
+      Execute  = 0x04,
+      //CPU
+      FlagE    = 0x08,
+      FlagM    = 0x10,
+      FlagX    = 0x20,
+      //APU
+      FlagP    = 0x08,
+      DspRead  = 0x10,
+      DspWrite = 0x20,
+    };
+  };
+
+  Debugger();
+
+  void load();
+  void unload();
+  void main();
+
+  void run();
+  void stop();
+  void leave();
+
+  bool breakpointTest(Source source, Breakpoint::Mode mode, unsigned addr, uint8 data = 0x00);
+  string cpuDisassemble();
+  string cpuDisassemble(unsigned addr, bool e, bool m, bool x);
+  void cpuExec(uint24 addr);
+  void cpuRead(uint24 addr, uint8 data);
+  void cpuWrite(uint24 addr, uint8 data);
+  void echoBreakpoints();
+  void echoDisassemble(Source source, unsigned addr, signed size);
+  void echoHex(Source source, unsigned addr, signed size);
+  void memoryExport(Source source, string filename);
+  uint8 memoryRead(Source source, unsigned addr);
+  unsigned memorySize(Source source);
+  void memoryWrite(Source source, unsigned addr, uint8 data);
+  void ppuCgramRead(uint16 addr, uint8 data);
+  void ppuCgramWrite(uint16 addr, uint8 data);
+  void ppuOamRead(uint16 addr, uint8 data);
+  void ppuOamWrite(uint16 addr, uint8 data);
+  void ppuVramRead(uint16 addr, uint8 data);
+  void ppuVramWrite(uint16 addr, uint8 data);
+  string smpDisassemble();
+  string smpDisassemble(uint16 addr, bool p);
+  void smpExec(uint16 addr);
+  void smpRead(uint16 addr, uint8 data);
+  void smpWrite(uint16 addr, uint8 data);
+  string sourceName(Source source);
+  void stateLoad(string filename);
+  void stateSave(string filename);
+  void tracerDisable(Source source);
+  void tracerEnable(Source source, string filename);
+  void tracerMaskDisable(Source source);
+  void tracerMaskEnable(Source source);
+
+  bool running = false;      //emulation runs asynchronously (cooperatively) to terminal commands
+  bool savingState = false;  //suppresses all break events to allow state to be captured synchronously
+
+  uint8_t* apuUsage = nullptr;
+  vector<Breakpoint> breakpoints;
+  unsigned cpuInstructionCounter = 0;
+  maybe<unsigned> cpuRunFor;
+  maybe<unsigned> cpuRunTo;
+  maybe<unsigned> cpuStepFor;
+  maybe<unsigned> cpuStepTo;
+  file cpuTracerFile;
+  bitvector cpuTracerMask;
+  uint8_t* cpuUsage = nullptr;
+  unsigned smpInstructionCounter = 0;
+  maybe<unsigned> smpRunFor;
+  maybe<unsigned> smpRunTo;
+  maybe<unsigned> smpStepFor;
+  maybe<unsigned> smpStepTo;
+  file smpTracerFile;
+  bitvector smpTracerMask;
+};
+
+extern unique_pointer<Debugger> debugger;
diff --git a/higan/target-loki/input/input.cpp b/higan/target-loki/input/input.cpp
new file mode 100644
index 0000000..77e8e18
--- /dev/null
+++ b/higan/target-loki/input/input.cpp
@@ -0,0 +1,82 @@
+#include "../loki.hpp"
+unique_pointer<InputManager> inputManager;
+
+void AbstractInput::bind() {
+  for(auto device : inputManager->devices) {
+    if(device->isKeyboard() == false) continue;
+    if(auto group = device->find("Button")) {
+      if(auto input = device->group(group()).find(mapping)) {
+        this->device = device;
+        this->group = group();
+        this->input = input();
+        break;
+      }
+    }
+  }
+}
+
+int16_t AbstractInput::poll() {
+  if(!device) return 0;
+  return device->group(group).input(input).value();
+}
+
+InputManager::InputManager() {
+  inputManager = this;
+}
+
+void InputManager::load() {
+  unsigned guid = 0;
+  Configuration::Node emulatorNode;
+
+  for(auto& port : emulator->port) {
+    Configuration::Node portNode;
+
+    for(auto& device : port.device) {
+      Configuration::Node deviceNode;
+
+      for(auto& number : device.order) {
+        auto& input = device.input[number];
+        input.guid = guid++;
+
+        auto abstract = new AbstractInput;
+        abstract->name = string{input.name}.replace(" ", "");
+        abstract->mapping = "None";
+        inputMap.append(abstract);
+
+        deviceNode.append(abstract->mapping, abstract->name);
+      }
+
+      portNode.append(deviceNode, string{device.name}.replace(" ", ""));
+    }
+
+    emulatorNode.append(portNode, string{port.name}.replace(" ", ""));
+  }
+
+  append(emulatorNode, "SuperFamicom");
+
+  Configuration::Document::load(locate("input.bml"));
+  Configuration::Document::save(locate("input.bml"));
+}
+
+void InputManager::unload() {
+  Configuration::Document::save(locate("input.bml"));
+}
+
+void InputManager::bind() {
+  for(auto input : inputMap) input->bind();
+}
+
+void InputManager::poll() {
+  auto devices = input->poll();
+  bool changed = devices.size() != this->devices.size();
+  if(changed == false) {
+    for(unsigned n = 0; n < devices.size(); n++) {
+      changed = devices[n] != this->devices[n];
+      if(changed) break;
+    }
+  }
+  if(changed == true) {
+    this->devices = devices;
+    bind();
+  }
+}
diff --git a/higan/target-loki/input/input.hpp b/higan/target-loki/input/input.hpp
new file mode 100644
index 0000000..b943cf2
--- /dev/null
+++ b/higan/target-loki/input/input.hpp
@@ -0,0 +1,25 @@
+struct AbstractInput {
+  void bind();
+  int16_t poll();
+
+  string name;
+  string mapping;
+
+  shared_pointer<HID::Device> device;
+  unsigned group = 0;
+  unsigned input = 0;
+};
+
+struct InputManager : Configuration::Document {
+  InputManager();
+  void load();
+  void unload();
+
+  void bind();
+  void poll();
+
+  vector<shared_pointer<HID::Device>> devices;
+  vector<AbstractInput*> inputMap;
+};
+
+extern unique_pointer<InputManager> inputManager;
diff --git a/higan/target-loki/loki.cpp b/higan/target-loki/loki.cpp
new file mode 100644
index 0000000..f276255
--- /dev/null
+++ b/higan/target-loki/loki.cpp
@@ -0,0 +1,23 @@
+#include "loki.hpp"
+unique_pointer<Video> video;
+unique_pointer<Audio> audio;
+unique_pointer<Input> input;
+Emulator::Interface* emulator = nullptr;
+
+auto locate(string name) -> string {
+  string location = {Path::program(), name};
+  if(inode::exists(location)) return location;
+
+  location = {Path::config(), "loki/", name};
+  if(inode::exists(location)) return location;
+
+  directory::create({Path::local(), "loki/"});
+  return {Path::local(), "loki/", name};
+}
+
+#include <nall/main.hpp>
+auto nall::main(lstring args) -> void {
+  Application::setName("loki");
+  new Program(args);
+  Application::run();
+}
diff --git a/higan/target-loki/loki.hpp b/higan/target-loki/loki.hpp
new file mode 100644
index 0000000..2d0b916
--- /dev/null
+++ b/higan/target-loki/loki.hpp
@@ -0,0 +1,29 @@
+#include <nall/nall.hpp>
+#include <ruby/ruby.hpp>
+#include <hiro/hiro.hpp>
+using namespace nall;
+using namespace ruby;
+using namespace hiro;
+extern unique_pointer<Video> video;
+extern unique_pointer<Audio> audio;
+extern unique_pointer<Input> input;
+
+#include <emulator/emulator.hpp>
+extern Emulator::Interface* emulator;
+
+#include <sfc/sfc.hpp>
+namespace SFC = SuperFamicom;
+
+auto locate(string name) -> string;
+
+template<typename... Args> auto echo(Args&&... args) -> void {
+  //terminal->print({std::forward<Args>(args)...});
+}
+
+#include "program/program.hpp"
+#include "settings/settings.hpp"
+#include "input/input.hpp"
+#include "debugger/debugger.hpp"
+#include "terminal/terminal.hpp"
+#include "presentation/presentation.hpp"
+#include "resource/resource.hpp"
diff --git a/higan/target-loki/presentation/presentation.cpp b/higan/target-loki/presentation/presentation.cpp
new file mode 100644
index 0000000..901da6d
--- /dev/null
+++ b/higan/target-loki/presentation/presentation.cpp
@@ -0,0 +1,28 @@
+#include "../loki.hpp"
+unique_pointer<Presentation> presentation;
+
+Presentation::Presentation() {
+  presentation = this;
+
+  onClose([&] { program->quit(); });
+
+  setTitle({"loki v", Emulator::Version});
+  setResizable(false);
+  setBackgroundColor({0, 0, 0});
+  setSize({512, 480});
+  setCentered();
+  setVisible();
+}
+
+auto Presentation::drawSplashScreen() -> void {
+  uint32_t* output;
+  uint length;
+  if(video->lock(output, length, 512, 480)) {
+    for(auto y : range(480)) {
+      auto dp = output + y * (length >> 2);
+      for(auto x : range(512)) *dp++ = 0xff'00'00'00;
+    }
+    video->unlock();
+    video->refresh();
+  }
+}
diff --git a/higan/target-loki/presentation/presentation.hpp b/higan/target-loki/presentation/presentation.hpp
new file mode 100644
index 0000000..d2d9672
--- /dev/null
+++ b/higan/target-loki/presentation/presentation.hpp
@@ -0,0 +1,9 @@
+struct Presentation : Window {
+  Presentation();
+  auto drawSplashScreen() -> void;
+
+  VerticalLayout layout{this};
+    Viewport viewport{&layout, Size{~0, ~0}};
+};
+
+extern unique_pointer<Presentation> presentation;
diff --git a/higan/target-loki/program/interface.cpp b/higan/target-loki/program/interface.cpp
new file mode 100644
index 0000000..df4e291
--- /dev/null
+++ b/higan/target-loki/program/interface.cpp
@@ -0,0 +1,120 @@
+auto Program::loadRequest(uint id, string name, string type, bool required) -> void {
+  string location = BrowserDialog()
+  .setTitle({"Load ", name})
+  .setPath({Path::user(), "Emulation/", name})
+  .setFilters({string{name, "|*.", type}})
+  .openFolder();
+  if(!directory::exists(location)) return;
+
+  mediumPaths(id) = location;
+  folderPaths.append(location);
+  emulator->load(id);
+}
+
+auto Program::loadRequest(uint id, string filename, bool required) -> void {
+  string pathname = mediumPaths(emulator->group(id));
+  string location = {pathname, filename};
+
+  if(filename == "manifest.bml" && pathname && !pathname.endsWith("sys/")) {
+    if(!file::exists(location)) {
+      if(auto manifest = execute("icarus", "--manifest", pathname)) {
+        memorystream stream{manifest.output.data<uint8_t>(), manifest.output.size()};
+        return emulator->load(id, stream);
+      }
+    }
+  }
+
+  if(file::exists(location)) {
+    mmapstream stream{location};
+    return emulator->load(id, stream);
+  }
+
+  if(required) MessageDialog().setTitle("loki").setText({
+    "Missing required file: ", nall::filename(location), "\n\n",
+    "From location:\n", nall::pathname(location)
+  }).error();
+}
+
+auto Program::saveRequest(uint id, string filename) -> void {
+  string pathname = mediumPaths(emulator->group(id));
+  string location = {pathname, filename};
+
+//filestream stream{location, file::mode::write};
+//return emulator->save(id, stream);
+}
+
+auto Program::videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void {
+  uint32_t* output;
+  uint length;
+
+  if(video->lock(output, length, width, height)) {
+    pitch >>= 2, length >>= 2;
+
+    for(auto y : range(height)) {
+      memory::copy(output + y * length, data + y * pitch, width * sizeof(uint32));
+    }
+
+    video->unlock();
+    video->refresh();
+  }
+}
+
+auto Program::audioSample(int16 left, int16 right) -> void {
+  audio->sample(left, right);
+}
+
+auto Program::inputPoll(uint port, uint device, uint input) -> int16 {
+  if(!presentation->focused()) return 0;
+
+  shared_pointer<HID::Keyboard> keyboard;
+  for(auto& device : devices) {
+    if(device->isKeyboard()) {
+      keyboard = device;
+      break;
+    }
+  }
+
+  if(port == (uint)SFC::Port::Controller1) {
+    if(device == (uint)SFC::Device::Gamepad) {
+      #define map(id, name) \
+        case id: \
+          if(auto code = keyboard->buttons().find(name)) { \
+            return keyboard->buttons().input(*code).value(); \
+          } \
+          break; \
+
+      switch(input) {
+        map(SFC::Gamepad::Up, "Up");
+        map(SFC::Gamepad::Down, "Down");
+        map(SFC::Gamepad::Left, "Left");
+        map(SFC::Gamepad::Right, "Right");
+        map(SFC::Gamepad::B, "Z");
+        map(SFC::Gamepad::A, "X");
+        map(SFC::Gamepad::Y, "A");
+        map(SFC::Gamepad::X, "S");
+        map(SFC::Gamepad::L, "D");
+        map(SFC::Gamepad::R, "C");
+        map(SFC::Gamepad::Select, "Apostrophe");
+        map(SFC::Gamepad::Start, "Return");
+      }
+
+      #undef map
+    }
+  }
+
+  return 0;
+}
+
+auto Program::inputRumble(uint port, uint device, uint input, bool enable) -> void {
+}
+
+auto Program::dipSettings(const Markup::Node& node) -> uint {
+  return 0;
+}
+
+auto Program::path(uint group) -> string {
+  return mediumPaths(group);
+}
+
+auto Program::notify(string text) -> void {
+}
diff --git a/higan/target-loki/program/medium.cpp b/higan/target-loki/program/medium.cpp
new file mode 100644
index 0000000..2a3daeb
--- /dev/null
+++ b/higan/target-loki/program/medium.cpp
@@ -0,0 +1,45 @@
+auto Program::loadMedium(string location) -> void {
+  location.transform("\\", "/");
+  if(!location.endsWith("/")) location.append("/");
+  if(!directory::exists(location)) return;
+
+  string type = suffixname(location).trimLeft(".", 1L);
+  for(auto& medium : emulator->media) {
+    if(!medium.bootable) continue;
+    if(medium.type != type) continue;
+    return loadMedium(medium, location);
+  }
+}
+
+auto Program::loadMedium(Emulator::Interface::Medium& medium, string location) -> void {
+  unloadMedium();
+
+  mediumPaths(0) = locate({medium.name, ".sys/"});
+  mediumPaths(medium.id) = location;
+  folderPaths.append(location);
+
+  emulator->set("Blur Emulation", false);
+  emulator->set("Color Emulation", false);
+  emulator->set("Scanline Emulation", false);
+
+  Emulator::audio.reset();
+  Emulator::audio.setFrequency(audio->get(Audio::Frequency).get<uint>());
+  emulator->connect((uint)SFC::Port::Controller1, (uint)SFC::Device::Gamepad);
+  emulator->connect((uint)SFC::Port::Controller2, (uint)SFC::Device::None);
+  emulator->connect((uint)SFC::Port::Expansion,   (uint)SFC::Device::None);
+
+  emulator->load(medium.id);
+  emulator->power();
+
+  presentation->setTitle(emulator->title());
+}
+
+auto Program::unloadMedium() -> void {
+  if(!emulator->loaded()) return;
+
+  emulator->unload();
+  mediumPaths.reset();
+  folderPaths.reset();
+
+  presentation->setTitle("");
+}
diff --git a/higan/target-loki/program/program.cpp b/higan/target-loki/program/program.cpp
new file mode 100644
index 0000000..c9c5dd5
--- /dev/null
+++ b/higan/target-loki/program/program.cpp
@@ -0,0 +1,60 @@
+#include "../loki.hpp"
+#include "interface.cpp"
+#include "medium.cpp"
+unique_pointer<Program> program;
+
+Program::Program(lstring args) {
+  program = this;
+  Application::onMain({&Program::main, this});
+
+  emulator = new SuperFamicom::Interface;
+  emulator->bind = this;
+
+  new Terminal;
+  new Presentation;
+  terminal->setFocused();
+
+  video = Video::create();
+  video->set(Video::Handle, presentation->viewport.handle());
+  video->set(Video::Synchronize, false);
+  if(!video->init()) video = Video::create("None");
+
+  audio = Audio::create();
+  audio->set(Audio::Handle, presentation->viewport.handle());
+  audio->set(Audio::Synchronize, true);
+  audio->set(Audio::Frequency, 96000u);
+  audio->set(Audio::Latency, 80u);
+  if(!audio->init()) audio = Audio::create("None");
+
+  input = Input::create();
+  input->set(Input::Handle, presentation->viewport.handle());
+  if(!input->init()) input = Input::create("None");
+
+  presentation->drawSplashScreen();
+
+  string location = args(1, "");
+  if(!directory::exists(location)) location = {  //quick testing hack
+    Path::user(), "Emulation/Super Famicom/",
+    "Legend of Zelda - A Link to the Past, The (USA) (1.0).sfc/"
+  };
+
+  if(directory::exists(location)) loadMedium(location);
+}
+
+auto Program::main() -> void {
+  if(!emulator->loaded()) {
+    usleep(20 * 1000);
+    return;
+  }
+
+  devices = input->poll();
+  emulator->run();
+}
+
+auto Program::quit() -> void {
+  unloadMedium();
+  video.reset();
+  audio.reset();
+  input.reset();
+  Application::quit();
+}
diff --git a/higan/target-loki/program/program.hpp b/higan/target-loki/program/program.hpp
new file mode 100644
index 0000000..fa3e53c
--- /dev/null
+++ b/higan/target-loki/program/program.hpp
@@ -0,0 +1,29 @@
+struct Program : Emulator::Interface::Bind {
+  //program.cpp
+  Program(lstring args);
+  auto main() -> void;
+  auto quit() -> void;
+
+  //media.cpp
+  auto loadMedium(string location) -> void;
+  auto loadMedium(Emulator::Interface::Medium& medium, string location) -> void;
+  auto unloadMedium() -> void;
+
+  //interface.cpp
+  auto loadRequest(uint id, string name, string type, bool required) -> void override;
+  auto loadRequest(uint id, string path, bool required) -> void override;
+  auto saveRequest(uint id, string path) -> void override;
+  auto videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void override;
+  auto audioSample(int16 left, int16 right) -> void override;
+  auto inputPoll(uint port, uint device, uint input) -> int16 override;
+  auto inputRumble(uint port, uint device, uint input, bool enable) -> void override;
+  auto dipSettings(const Markup::Node& node) -> uint override;
+  auto path(uint group) -> string override;
+  auto notify(string text) -> void override;
+
+  vector<shared_pointer<HID::Device>> devices;
+  vector<string> mediumPaths;
+  vector<string> folderPaths;
+};
+
+extern unique_pointer<Program> program;
diff --git a/higan/target-loki/resource/loki.png b/higan/target-loki/resource/loki.png
new file mode 100644
index 0000000..e69de29
diff --git a/higan/target-loki/resource/resource.bml b/higan/target-loki/resource/resource.bml
new file mode 100644
index 0000000..9d8482c
--- /dev/null
+++ b/higan/target-loki/resource/resource.bml
@@ -0,0 +1,2 @@
+resource name=resource
+  binary id=loki name=loki.png
diff --git a/higan/target-loki/resource/resource.cpp b/higan/target-loki/resource/resource.cpp
new file mode 100644
index 0000000..5f8cffb
--- /dev/null
+++ b/higan/target-loki/resource/resource.cpp
@@ -0,0 +1,3816 @@
+namespace resource {
+
+const uint8_t loki[121905] = {
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,1,32,0,0,1,104,8,6,0,0,0,247,136,38,
+  129,0,0,0,9,112,72,89,115,0,0,11,19,0,0,11,19,1,0,154,156,24,0,0,0,4,103,65,77,65,0,0,
+  177,142,124,251,81,147,0,0,0,32,99,72,82,77,0,0,122,37,0,0,128,131,0,0,249,255,0,0,128,233,0,0,
+  117,48,0,0,234,96,0,0,58,152,0,0,23,111,146,95,197,70,0,1,219,167,73,68,65,84,120,218,236,253,119,152,
+  100,215,117,222,11,255,246,62,161,114,85,231,220,51,61,57,103,12,114,14,36,2,193,28,36,81,129,162,2,149,124,229,
+  251,73,150,174,172,123,45,75,126,244,93,203,178,37,75,178,44,90,209,164,40,81,34,197,12,18,32,0,34,199,193,0,
+  147,83,247,116,206,93,93,93,185,234,196,189,239,31,85,51,24,128,32,197,128,72,246,122,158,126,122,166,186,234,156,83,
+  59,188,123,173,119,37,81,187,239,125,188,26,98,10,137,18,146,55,131,68,226,22,255,242,224,4,31,248,143,79,240,86,
+  144,255,1,244,0,255,127,224,111,129,191,4,54,3,231,129,63,251,46,175,245,21,96,14,56,2,124,28,24,5,2,224,
+  52,176,23,184,23,216,222,252,187,15,104,192,0,20,208,14,180,129,184,14,228,81,48,218,65,100,33,92,128,160,23,184,
+  237,251,252,158,117,96,6,216,4,252,28,176,3,200,1,78,243,153,126,5,168,189,9,231,231,131,192,6,192,2,126,23,
+  248,123,224,16,240,54,32,211,124,246,231,154,99,56,12,172,109,142,101,25,120,7,112,79,115,156,199,128,46,96,13,112,
+  13,240,123,205,107,143,0,133,230,56,76,0,235,128,241,230,123,119,1,207,3,155,119,238,163,239,193,23,48,61,221,188,
+  218,171,35,251,6,223,216,61,107,178,42,63,116,34,155,160,147,105,44,0,209,9,134,9,118,20,226,2,18,199,32,19,
+  129,214,18,200,24,44,118,73,57,211,166,84,185,38,132,54,163,81,64,124,119,55,20,2,195,247,80,190,191,58,248,171,
+  178,10,64,63,140,18,54,79,216,13,64,43,24,123,192,182,32,17,66,26,104,23,141,3,183,79,66,111,20,186,93,41,
+  123,124,132,182,85,248,76,196,180,239,245,60,231,220,161,214,142,96,241,255,248,61,116,52,14,74,125,199,247,246,147,105,
+  54,223,251,207,180,220,251,25,172,213,169,88,149,85,0,250,225,17,221,52,125,210,32,135,193,238,128,84,30,58,5,244,
+  43,88,35,97,16,24,112,160,191,98,199,122,150,251,250,187,138,61,93,169,83,139,179,241,3,83,51,179,59,96,26,207,
+  137,152,169,140,40,253,135,255,73,213,144,72,253,237,77,0,45,4,82,26,152,145,40,174,214,4,158,71,128,32,4,236,
+  213,41,89,149,85,0,250,225,208,120,2,96,17,140,50,36,98,66,116,197,96,77,168,245,6,27,54,123,66,110,204,167,
+  50,107,179,241,84,231,98,212,200,208,149,78,248,29,237,178,218,213,75,110,100,148,173,217,229,153,29,97,248,152,128,103,
+  77,88,52,93,39,236,125,236,107,44,93,125,27,202,52,17,175,0,66,66,26,24,177,56,218,169,81,203,103,25,57,252,
+  56,239,172,85,120,252,208,163,164,42,165,213,73,89,149,85,0,250,65,151,0,72,0,187,64,62,6,113,3,250,226,176,
+  205,210,122,47,66,236,200,153,246,186,137,150,206,129,165,77,27,90,229,186,158,72,58,41,201,196,124,124,43,198,145,227,
+  211,180,125,249,158,218,187,87,138,103,58,225,17,15,30,76,194,177,9,88,238,242,92,117,205,125,159,229,212,229,55,224,
+  89,54,232,240,2,234,16,88,54,88,22,193,242,2,147,143,126,149,59,206,30,69,140,156,226,241,192,167,79,107,20,223,
+  53,107,180,42,171,0,180,42,111,69,137,3,62,216,87,64,187,11,59,12,184,218,133,203,207,39,90,182,77,172,219,208,
+  163,183,15,196,90,59,99,162,95,57,224,148,136,138,12,211,101,120,254,201,231,184,250,220,248,220,53,120,135,52,60,236,
+  193,83,14,140,236,129,242,28,168,218,37,54,157,22,2,109,152,4,150,141,85,175,48,116,234,24,222,217,227,44,31,126,
+  156,133,82,30,5,92,160,170,245,234,148,172,202,42,0,189,53,197,6,142,211,112,237,14,54,205,42,247,95,209,38,34,
+  96,172,129,30,23,110,0,110,155,138,197,47,159,61,112,217,218,112,109,38,154,76,199,241,125,77,101,113,133,186,116,137,
+  181,165,152,40,20,201,62,252,130,247,225,197,236,240,32,250,81,23,30,52,225,72,20,22,142,129,59,1,108,107,242,72,
+  8,129,147,72,129,20,36,10,57,182,61,245,32,226,241,175,179,185,94,229,108,224,147,93,213,116,94,19,209,128,48,4,
+  58,13,162,40,208,1,160,245,42,0,173,202,107,43,17,224,33,94,140,141,201,1,7,128,202,183,249,140,4,211,131,117,
+  26,222,54,223,59,240,54,245,193,187,186,230,74,211,20,231,75,164,242,138,164,89,39,19,9,49,91,211,156,154,205,211,
+  245,240,243,249,31,175,212,143,217,240,144,11,143,104,56,101,64,241,147,16,246,53,65,79,92,0,22,207,101,207,3,159,
+  167,115,252,28,189,195,39,48,125,143,17,173,145,171,83,245,154,138,0,188,153,25,236,143,255,111,130,187,62,128,221,26,
+  193,180,77,188,10,232,239,194,27,249,102,148,213,181,243,22,56,33,82,64,43,141,128,181,86,96,99,83,43,217,242,178,
+  159,237,64,6,12,5,9,7,186,23,174,189,188,99,232,186,253,144,93,166,152,155,39,52,107,36,45,73,38,222,206,241,
+  51,203,36,30,58,154,191,171,82,127,214,128,127,9,224,115,2,158,47,65,254,72,3,119,88,15,172,0,109,205,251,77,
+  250,30,251,191,242,15,12,158,60,140,233,185,63,48,167,240,91,1,128,252,220,18,230,191,251,57,190,116,160,151,242,47,
+  254,12,143,254,237,39,8,125,7,157,150,72,67,34,132,120,203,174,239,85,121,139,136,75,35,58,186,11,56,215,60,61,
+  76,26,241,61,23,248,150,24,4,109,144,79,9,57,91,59,114,186,242,84,127,75,250,221,239,184,150,165,130,199,225,179,
+  227,100,11,101,142,141,47,208,114,236,92,237,71,235,181,243,62,60,166,225,97,31,70,226,224,215,155,38,223,94,224,102,
+  160,175,105,126,117,94,48,195,86,229,141,3,162,48,192,171,148,153,253,220,39,121,254,115,159,164,255,207,126,159,53,191,
+  252,127,225,190,227,131,136,182,40,182,48,9,235,26,241,22,98,222,86,53,160,183,152,186,42,129,98,243,255,123,155,192,
+  240,110,224,110,224,125,192,65,240,21,76,249,90,61,125,197,244,228,11,149,39,143,120,231,23,114,244,36,76,126,241,253,
+  239,226,224,109,55,48,93,46,176,195,169,123,166,82,10,48,52,100,108,104,53,33,214,6,70,6,68,186,121,143,36,141,
+  20,3,86,249,157,55,149,214,96,2,245,241,17,82,191,249,49,126,251,178,62,30,252,185,159,36,56,122,146,72,82,144,
+  202,72,132,148,171,0,180,42,175,157,74,158,108,114,67,135,155,154,143,251,162,137,166,5,100,5,60,17,117,235,95,217,
+  255,252,137,231,22,159,92,116,203,50,202,217,51,79,115,249,222,65,62,241,55,255,133,142,159,252,137,248,145,84,219,80,
+  5,110,143,194,135,37,188,199,129,235,99,176,235,122,232,235,130,68,30,228,170,145,245,230,20,125,225,64,10,3,170,149,
+  50,222,151,62,77,225,206,3,212,126,238,39,249,235,191,250,59,148,91,195,72,75,120,147,155,103,171,0,244,22,151,11,
+  218,201,2,112,31,240,32,240,0,120,45,48,234,194,215,59,85,240,249,29,223,120,248,208,241,7,158,115,236,161,29,76,
+  61,51,130,63,126,158,119,255,231,143,217,87,63,248,143,221,227,63,242,227,151,63,148,234,254,192,188,48,63,22,192,47,
+  75,248,185,24,124,64,194,117,243,176,201,129,54,7,236,101,16,106,117,184,223,212,27,217,242,61,114,159,251,123,254,224,
+  215,63,202,115,55,239,162,246,241,191,68,151,43,184,118,136,142,201,55,165,14,187,10,64,63,64,11,48,108,254,30,2,
+  178,224,250,66,140,251,82,62,210,165,220,175,111,250,242,163,39,31,253,187,111,248,201,29,219,8,85,129,83,247,126,134,
+  193,190,8,63,251,233,63,177,14,124,246,239,186,30,185,237,242,125,159,217,216,241,246,175,182,118,254,200,73,97,253,156,
+  134,159,181,225,199,21,220,169,224,178,121,88,51,3,153,115,13,48,146,149,75,78,226,87,55,63,123,85,190,31,205,248,
+  2,196,20,39,199,168,254,246,47,51,117,112,128,23,126,225,35,116,29,59,73,152,20,68,51,18,195,120,243,108,251,85,
+  18,250,45,174,130,155,52,74,92,196,64,238,132,72,28,98,123,32,82,6,43,166,117,2,104,245,161,214,175,130,197,200,
+  215,190,158,251,219,185,185,204,109,191,241,145,216,181,155,54,51,253,220,33,18,99,51,188,237,230,183,113,217,13,255,204,
+  3,95,254,188,125,254,145,39,218,78,141,140,183,77,14,207,173,237,158,205,30,88,27,250,51,105,56,111,194,176,130,241,
+  89,152,93,128,101,160,96,66,197,6,119,1,130,16,148,209,220,0,171,154,210,155,3,140,172,48,192,43,23,73,126,225,
+  31,232,187,231,179,100,223,249,35,28,186,246,22,54,189,235,3,116,181,197,168,85,87,1,104,85,190,7,147,75,52,249,
+  31,11,228,46,136,204,67,70,65,71,10,122,5,12,248,208,158,128,24,208,82,211,186,199,133,78,29,141,13,4,134,109,
+  4,147,11,222,63,255,201,39,98,238,237,215,176,251,250,189,200,184,201,233,71,191,64,207,192,90,62,116,199,157,204,95,
+  113,37,199,159,57,204,212,11,47,36,138,249,108,226,212,236,210,96,231,124,97,103,219,124,33,107,46,101,23,98,42,156,
+  181,27,152,55,227,55,126,22,134,97,217,130,194,58,168,70,192,115,33,176,65,201,85,205,232,205,35,190,71,199,231,62,
+  201,103,63,247,73,158,250,147,255,196,47,125,236,215,121,215,135,126,178,113,116,173,2,208,170,124,167,38,86,20,164,15,
+  86,39,196,103,161,43,6,131,186,81,227,107,115,29,134,10,210,30,200,71,51,173,37,83,70,74,17,25,9,186,59,147,
+  173,67,221,150,238,50,69,44,147,17,59,77,67,72,175,74,110,250,12,167,31,94,161,119,247,78,118,92,125,3,238,204,
+  56,179,11,103,176,218,58,185,226,242,13,108,90,223,203,244,240,56,194,194,240,188,82,139,151,93,105,145,217,202,250,197,
+  147,147,110,253,228,104,41,62,183,180,210,230,123,75,9,21,206,217,48,19,194,76,0,179,157,176,16,192,130,3,203,239,
+  132,90,5,130,55,39,251,240,195,107,162,229,39,206,243,251,191,245,11,124,226,227,127,200,244,196,249,85,0,90,149,111,
+  109,102,105,26,9,166,221,192,187,32,102,67,151,128,53,26,214,89,13,208,217,90,74,36,55,102,215,172,233,245,183,108,
+  204,68,55,14,68,186,134,58,89,159,18,152,182,65,38,145,36,21,73,160,113,241,106,101,242,217,34,147,19,243,20,125,
+  65,247,224,6,218,163,54,165,209,195,164,59,123,145,145,78,170,217,5,170,179,11,88,118,11,194,173,48,57,50,77,204,
+  142,99,72,65,203,134,30,99,199,85,59,227,66,136,120,113,33,219,179,112,122,118,235,194,185,37,71,143,206,151,219,114,
+  139,185,120,105,101,49,230,121,51,17,24,14,224,76,59,140,45,193,220,46,40,218,224,85,65,197,86,167,245,77,35,51,
+  147,163,171,38,216,170,124,235,211,202,1,118,131,116,32,146,131,150,40,108,240,225,160,134,253,158,97,172,243,182,111,31,
+  140,220,124,85,231,186,171,46,139,237,219,181,149,174,222,86,18,134,143,187,188,64,173,176,66,189,158,167,90,46,82,90,
+  89,96,113,198,225,252,200,12,11,139,115,84,42,21,52,154,186,231,113,199,157,55,35,60,147,249,177,73,2,165,145,94,
+  72,173,92,226,212,233,103,57,121,102,129,68,42,131,45,43,172,223,48,196,145,103,198,153,158,157,97,227,166,245,108,220,
+  188,150,125,119,94,38,115,55,86,226,227,243,115,241,220,66,177,123,102,198,223,102,78,228,170,241,231,143,45,117,230,151,
+  198,82,112,86,192,169,8,156,155,131,73,96,73,64,77,129,10,87,167,120,85,86,1,232,205,169,245,132,52,106,68,239,
+  130,104,4,186,13,88,175,97,91,8,251,253,100,122,175,185,127,199,154,246,119,95,149,105,191,249,114,187,189,187,7,83,
+  24,248,65,141,218,114,142,114,177,74,173,152,101,121,113,145,233,137,44,83,19,5,242,185,2,158,23,224,123,62,8,69,
+  123,71,59,123,246,110,231,236,185,83,204,206,76,49,48,48,64,16,212,241,157,58,197,124,141,83,167,39,152,153,207,99,
+  24,6,61,61,25,182,110,216,134,38,228,236,240,89,234,53,135,177,225,57,166,207,205,146,157,88,162,163,43,142,116,86,
+  216,56,48,128,215,37,197,226,166,174,100,112,195,254,228,236,249,197,65,253,204,11,187,219,199,206,78,119,248,222,176,132,
+  19,33,28,43,193,185,71,96,97,23,212,98,205,162,30,171,230,217,42,0,173,202,155,68,106,192,187,193,176,26,209,201,
+  155,3,184,50,132,203,107,241,196,22,174,61,56,212,255,222,107,91,218,247,14,200,120,103,154,170,227,178,56,126,26,171,
+  226,227,107,147,92,169,192,252,248,20,115,99,43,44,47,151,240,3,23,173,3,12,35,74,166,37,138,97,71,232,237,237,
+  225,178,131,251,104,105,73,176,148,27,101,165,48,75,60,33,72,216,38,181,98,153,51,39,167,153,157,171,98,88,38,187,
+  246,13,176,255,192,46,38,207,45,114,236,216,57,240,99,152,34,32,244,53,169,68,146,241,51,227,84,115,109,184,190,75,
+  118,230,44,67,27,6,8,22,179,184,161,195,208,149,91,173,232,29,63,222,85,24,47,116,142,223,255,220,38,243,201,39,
+  246,245,122,245,51,54,28,10,225,153,235,225,204,52,228,98,16,60,191,10,66,171,0,180,42,111,172,214,163,128,61,64,
+  90,136,72,0,253,66,235,253,2,110,168,152,230,149,165,131,187,55,164,223,182,163,165,123,231,128,72,102,98,84,150,179,
+  20,23,75,132,118,18,95,105,130,208,34,59,49,202,244,217,17,148,19,16,141,9,6,7,44,42,53,240,189,24,169,84,
+  146,104,90,209,183,166,151,173,155,119,83,173,214,153,158,158,102,112,112,128,149,149,121,226,49,73,173,84,228,236,153,9,
+  102,23,92,214,172,31,228,186,27,119,208,213,157,230,228,145,179,156,56,122,14,161,109,148,167,48,36,40,237,17,232,50,
+  209,152,65,177,178,140,101,69,113,106,117,70,199,203,236,217,188,159,82,54,207,241,7,159,164,173,183,155,129,157,59,197,
+  246,95,123,111,122,225,3,55,167,143,127,254,145,181,173,143,62,188,121,200,247,54,85,225,145,78,120,110,16,166,179,80,
+  75,128,94,117,223,175,2,208,170,188,1,18,0,189,192,207,64,52,167,245,122,19,110,242,17,111,31,235,235,61,160,110,
+  220,215,53,176,175,203,108,77,197,17,37,141,99,69,209,173,237,76,230,28,202,203,130,173,125,157,84,230,158,69,85,23,
+  88,55,216,70,185,88,162,144,175,83,42,7,152,81,73,215,64,156,150,76,43,155,182,109,32,153,206,48,62,58,207,83,
+  79,29,2,2,238,120,251,245,12,116,247,18,4,46,163,99,203,100,75,1,7,175,219,205,101,151,239,161,179,35,201,241,
+  231,143,112,234,216,73,146,169,52,197,66,158,100,44,192,13,20,117,87,19,104,137,176,99,8,229,35,76,77,75,164,21,
+  237,4,76,143,143,113,229,213,87,209,222,223,201,161,67,71,88,122,228,41,226,137,35,108,220,185,143,107,255,175,95,138,
+  21,127,244,253,219,167,254,248,127,116,182,157,60,54,152,130,161,50,60,121,13,156,42,195,202,213,224,63,180,186,28,86,
+  1,104,85,94,63,105,7,182,130,140,66,186,10,155,13,184,169,140,184,227,252,229,59,47,107,185,110,107,162,45,29,65,
+  40,73,45,189,134,192,202,4,167,142,79,250,247,62,241,141,232,141,7,47,19,63,241,206,43,200,207,60,71,57,59,73,
+  107,122,144,220,92,153,153,233,105,12,43,164,107,160,157,68,107,154,150,246,46,246,236,217,137,235,132,60,245,196,17,158,
+  63,124,140,82,185,204,174,93,27,105,107,109,165,94,54,120,225,217,51,44,45,213,185,233,174,119,48,56,212,74,123,71,
+  23,99,167,71,120,254,217,23,216,180,126,13,249,124,157,82,14,82,137,54,42,110,133,114,181,130,10,45,76,51,130,37,
+  192,182,21,137,136,6,83,226,122,112,236,244,121,174,184,230,50,2,35,224,244,209,83,184,229,128,83,79,61,195,209,67,
+  207,178,227,170,155,197,158,63,255,175,93,147,159,250,236,53,211,159,248,68,255,160,231,110,240,225,27,54,60,245,23,48,
+  245,235,224,127,101,117,89,172,2,208,170,188,246,210,10,252,21,200,86,104,173,194,126,19,222,158,179,172,155,231,110,56,
+  176,99,224,170,117,182,169,29,202,178,133,149,160,63,116,62,243,76,221,120,224,193,194,76,44,94,252,240,31,254,135,77,
+  63,118,215,94,251,196,67,95,66,121,154,109,91,110,225,241,71,30,36,191,56,67,166,61,195,192,218,181,40,203,164,115,
+  160,143,189,7,14,50,63,183,192,151,63,127,63,227,195,83,248,65,72,58,147,226,186,27,174,194,176,52,167,78,159,32,
+  183,92,226,246,119,223,141,213,210,202,82,193,67,137,26,143,63,246,48,251,118,239,197,64,114,238,236,51,248,129,139,20,
+  96,154,2,165,60,16,17,194,208,37,147,180,137,89,18,97,10,68,194,64,59,117,202,245,5,206,159,63,198,222,93,187,
+  112,75,101,150,230,178,8,105,83,118,2,158,254,250,151,24,31,57,205,59,126,225,23,227,139,183,222,180,237,153,127,247,
+  219,157,187,167,198,58,99,144,88,129,111,252,58,76,206,128,119,100,117,121,172,2,208,91,215,166,81,12,245,167,248,104,
+  204,36,94,15,222,116,143,39,104,212,245,249,40,200,53,208,86,134,131,6,188,103,50,154,184,173,240,174,221,107,217,176,
+  70,156,158,245,48,74,34,104,157,122,161,218,57,242,47,225,96,62,111,44,173,221,144,254,137,191,253,179,142,157,87,174,
+  181,135,31,252,2,169,100,23,117,87,241,141,175,63,64,177,176,196,174,45,107,104,233,236,166,26,73,17,177,108,118,221,
+  120,51,185,5,135,251,62,251,48,147,19,179,8,13,65,205,231,170,59,111,97,243,229,87,240,232,87,63,67,33,183,192,
+  141,31,248,8,166,213,201,99,143,223,199,187,127,228,102,14,223,243,5,246,93,117,128,181,93,67,60,248,185,127,33,12,
+  67,236,72,132,13,59,58,41,29,117,113,67,129,182,5,161,31,96,96,99,199,45,132,37,136,89,54,150,105,226,4,62,
+  197,133,25,178,109,105,182,236,187,140,74,253,49,98,65,149,221,215,220,196,218,66,200,163,159,249,60,255,244,7,255,149,
+  219,126,226,131,226,214,207,252,69,231,151,127,241,223,95,183,239,200,243,86,43,24,2,30,252,67,152,248,3,112,31,88,
+  221,159,171,0,244,86,20,215,11,217,179,181,141,191,89,147,134,115,43,111,202,103,60,2,194,133,150,50,92,110,192,123,
+  78,183,244,222,185,242,246,253,125,139,97,9,239,203,71,195,93,203,197,149,205,229,106,37,89,173,24,85,116,98,106,203,
+  118,251,170,79,252,81,116,211,238,1,49,124,228,27,196,218,7,153,31,30,231,200,83,143,97,101,210,92,119,235,53,152,
+  134,137,136,167,73,122,16,198,147,212,42,240,249,79,124,146,233,233,81,226,210,100,185,234,209,218,155,228,250,119,222,206,
+  204,244,34,217,51,103,185,250,182,187,17,45,29,252,239,63,249,115,222,255,225,119,49,125,242,24,27,247,236,102,104,112,
+  3,15,127,249,171,204,231,107,24,74,210,217,155,34,149,72,160,252,0,219,180,16,66,161,209,4,174,70,9,69,58,147,
+  33,168,58,180,102,146,172,84,106,24,210,96,126,126,129,237,3,91,217,188,125,43,51,195,39,153,62,119,148,93,55,125,
+  16,251,125,119,243,240,61,247,242,197,191,254,43,110,184,253,38,222,243,201,191,74,125,237,55,126,239,234,161,123,191,104,
+  12,128,136,195,253,127,14,19,191,10,222,189,172,22,183,95,5,160,183,160,8,165,121,108,99,43,75,231,86,136,190,137,
+  22,176,160,209,147,61,6,86,20,54,90,240,246,231,83,233,183,141,92,182,182,79,59,14,137,35,147,206,221,83,211,167,
+  19,232,9,5,201,10,172,29,219,185,43,115,197,159,255,135,104,95,166,34,150,142,61,65,88,79,241,220,11,143,48,55,
+  114,130,205,219,46,99,221,206,109,84,107,53,226,189,27,33,48,56,126,232,16,55,223,125,19,159,251,248,167,152,25,61,
+  135,21,53,113,11,62,90,187,236,58,120,45,86,75,154,35,159,253,59,118,238,191,150,68,219,102,254,244,79,255,148,157,
+  251,182,210,158,12,9,173,14,98,177,56,227,195,167,153,60,55,73,24,104,122,6,51,244,182,165,113,156,0,29,64,196,
+  18,72,20,66,8,66,109,162,181,162,165,189,29,199,42,35,181,207,218,129,126,22,151,22,49,172,24,11,51,227,108,222,
+  190,147,234,202,50,209,120,148,51,71,30,229,192,141,119,80,169,228,152,57,113,130,35,143,60,70,53,95,227,93,127,242,
+  159,18,255,24,56,87,69,30,184,79,117,128,154,129,7,126,23,38,62,2,254,111,209,232,171,190,42,171,0,244,150,17,
+  165,225,234,15,110,229,239,31,158,98,164,230,191,105,190,104,72,131,120,222,3,182,11,253,121,196,174,177,173,91,7,172,
+  84,20,207,180,216,92,115,22,82,232,23,60,152,171,192,238,225,237,91,219,238,252,227,255,51,221,221,150,19,249,108,157,
+  225,163,11,44,156,58,139,142,150,185,250,237,55,210,187,102,19,179,217,58,235,182,239,167,88,11,249,234,151,191,200,93,
+  239,126,39,143,124,241,203,204,158,62,135,29,143,147,207,175,32,137,144,110,177,184,230,230,59,152,124,246,16,118,44,32,
+  185,237,0,255,248,231,159,33,29,137,112,249,21,91,177,35,9,102,22,230,233,145,146,179,199,39,88,41,86,24,90,223,
+  67,166,45,74,87,111,23,83,99,203,24,40,44,41,8,3,31,35,158,64,99,128,14,8,8,73,182,183,82,93,154,39,
+  157,78,81,172,214,73,36,227,148,139,203,184,129,199,250,237,91,25,31,27,167,191,191,155,147,207,61,206,45,239,125,39,
+  15,212,139,36,39,22,88,56,241,12,45,189,157,252,236,223,254,89,236,239,223,247,225,203,15,28,58,164,18,16,58,112,
+  95,15,204,232,102,141,234,55,242,208,88,149,85,0,250,174,68,123,33,230,134,22,254,231,250,22,14,159,204,190,169,158,
+  109,29,240,73,16,6,68,235,66,196,172,142,148,236,137,39,24,173,72,10,94,24,24,96,215,97,221,83,91,215,94,254,
+  142,255,250,163,157,29,93,54,197,34,60,241,224,163,228,38,230,24,236,235,224,218,155,238,68,117,116,48,182,82,99,247,
+  238,93,228,230,10,124,225,239,255,137,107,111,189,129,201,225,97,78,28,122,148,68,36,66,177,6,181,186,65,34,226,178,
+  102,251,110,162,49,201,137,227,135,216,115,203,29,124,233,11,159,167,184,56,201,157,239,127,39,61,237,157,140,13,79,48,
+  122,234,44,108,217,196,137,23,70,24,92,219,199,198,109,189,136,48,164,88,113,153,95,88,70,10,69,212,50,241,116,136,
+  52,37,94,224,227,7,26,215,169,211,223,223,15,78,21,45,52,107,214,111,96,102,114,148,254,158,118,102,103,103,89,179,
+  115,43,177,229,28,137,68,27,197,106,141,220,194,20,215,188,251,71,120,232,111,254,28,195,142,114,254,169,199,25,220,188,
+  133,31,255,244,223,165,255,238,166,187,46,191,126,106,162,106,64,54,132,242,255,128,149,95,162,145,203,241,70,200,157,192,
+  41,88,237,107,191,10,64,223,165,248,154,63,248,217,221,124,242,183,30,37,246,38,33,163,3,26,133,222,45,208,30,4,
+  150,86,126,88,169,106,217,153,18,118,232,144,174,149,45,31,118,63,188,161,171,247,186,255,240,190,238,205,61,67,148,115,
+  33,247,221,251,56,243,147,75,92,181,111,43,123,174,28,162,158,238,97,97,185,194,222,77,67,76,159,25,231,51,159,254,
+  10,67,107,186,104,75,68,120,226,203,247,97,9,15,55,2,249,233,10,145,120,10,83,21,184,236,178,131,76,15,31,98,
+  253,238,237,28,125,126,134,217,23,142,177,123,215,102,246,237,219,193,82,110,153,227,143,62,66,186,173,155,71,30,121,1,
+  133,98,223,101,123,8,205,26,38,146,167,159,126,26,161,37,201,148,77,213,115,41,87,20,194,0,67,132,40,213,208,130,
+  34,81,155,84,71,23,245,90,149,206,174,62,140,120,130,120,58,195,114,190,64,93,197,24,216,186,157,217,99,103,216,116,
+  217,181,28,125,242,235,92,255,142,237,236,184,253,29,156,190,231,11,68,8,121,244,179,127,207,135,126,245,223,115,213,199,
+  255,180,229,217,119,126,224,224,245,129,59,173,97,54,1,199,174,3,231,93,52,26,47,190,94,230,180,160,209,2,105,8,
+  56,182,138,21,171,0,244,93,147,209,126,200,205,7,123,137,189,237,114,106,247,188,64,50,116,222,112,46,72,52,65,168,
+  42,68,96,65,190,69,235,101,39,183,236,22,183,182,69,141,88,192,11,102,44,49,220,18,111,217,245,203,239,200,28,88,
+  183,153,226,66,137,175,127,229,81,102,22,23,185,226,170,131,236,191,238,50,220,120,156,249,133,49,54,246,244,50,117,102,
+  152,47,125,238,33,12,13,151,95,125,5,79,220,255,16,94,165,66,36,146,96,58,183,130,17,51,8,252,26,157,131,189,
+  180,24,14,11,229,34,210,90,195,243,247,127,129,174,182,118,174,185,237,42,234,213,37,14,61,248,32,182,25,99,114,106,
+  150,243,227,243,188,253,230,27,105,233,109,69,136,62,190,113,207,131,228,203,30,189,157,237,40,175,68,60,22,197,205,150,
+  145,134,36,26,19,4,190,34,172,215,240,92,151,100,71,55,70,97,9,199,41,211,187,102,136,82,181,72,111,79,47,185,
+  185,101,54,238,216,72,177,99,28,183,84,99,219,142,203,24,126,225,105,118,222,240,46,102,78,30,71,207,12,163,170,121,
+  30,254,204,95,243,206,95,253,247,156,254,165,159,239,27,255,211,63,187,122,8,198,235,144,253,29,152,52,32,124,130,70,
+  195,198,215,235,176,24,4,54,208,168,185,157,92,197,139,85,0,250,174,57,151,186,199,169,107,174,71,143,57,140,158,120,
+  1,255,77,96,211,251,192,101,90,251,235,96,62,2,19,3,211,139,165,178,179,62,26,139,216,60,222,25,239,248,137,15,
+  94,203,173,91,118,144,159,94,228,254,135,30,165,180,156,103,247,142,141,92,113,235,1,114,126,146,194,236,50,157,145,8,
+  165,185,105,238,255,234,19,44,231,86,184,235,125,111,103,122,114,150,236,204,50,118,36,194,74,197,195,175,128,142,249,216,
+  150,205,150,13,107,169,150,230,232,236,216,194,3,247,61,142,233,229,217,125,219,173,88,173,157,60,125,207,61,88,245,34,
+  185,178,199,212,76,158,206,84,156,43,174,222,67,188,175,135,67,247,60,196,249,115,211,180,175,93,71,166,205,164,152,45,
+  227,122,53,66,101,82,173,213,24,236,238,164,82,244,33,240,241,156,58,118,75,15,201,150,12,142,227,144,238,236,98,170,
+  88,160,181,163,139,252,228,28,245,250,38,122,182,236,99,250,244,17,6,247,188,141,153,153,5,170,217,105,246,222,113,39,
+  135,254,106,132,104,194,98,105,250,28,71,238,253,28,63,250,91,255,70,254,229,211,207,109,237,125,238,153,27,44,152,172,
+  192,202,151,160,240,31,223,0,243,235,83,171,56,177,10,64,223,215,151,172,85,57,115,203,173,76,207,79,161,151,151,223,
+  112,0,114,128,187,33,148,141,190,127,83,221,229,242,242,241,115,11,93,253,253,107,185,243,134,237,28,216,219,207,92,174,
+  192,177,195,231,153,155,42,177,123,247,102,246,94,127,13,243,139,57,168,101,145,229,28,178,179,147,251,31,58,198,236,82,
+  137,221,7,54,211,221,191,134,175,252,195,23,176,67,240,112,112,235,62,166,157,164,84,175,208,219,31,37,29,171,98,70,
+  58,56,127,106,140,194,236,18,173,3,61,108,220,212,205,217,135,31,32,63,151,101,197,181,152,207,151,241,116,145,187,110,
+  123,15,61,59,246,113,244,249,195,28,127,238,24,101,4,87,239,219,128,63,49,73,162,127,55,231,166,142,18,143,72,44,
+  21,18,79,39,41,151,74,88,126,26,211,55,128,16,51,211,69,186,93,18,250,54,237,221,189,148,36,116,173,233,39,63,
+  55,204,224,222,91,137,45,230,41,85,86,216,182,107,23,147,135,159,102,251,29,31,160,99,215,30,166,158,123,142,142,214,
+  22,142,63,253,36,155,118,109,225,154,223,253,88,114,228,67,35,251,118,149,115,35,37,24,91,7,181,35,224,101,120,125,
+  88,105,5,44,241,237,59,209,174,202,42,0,253,235,11,73,107,34,134,201,71,15,94,206,173,247,126,237,77,241,76,115,
+  192,104,3,132,252,65,100,125,238,244,233,176,163,199,54,222,113,240,6,220,162,195,217,137,19,140,156,153,103,253,166,126,
+  54,31,220,199,82,190,68,220,180,152,31,155,96,221,224,32,207,29,58,66,118,49,71,34,30,227,134,235,175,225,209,71,
+  159,32,168,87,144,134,164,232,128,235,75,66,29,176,156,93,228,178,45,173,88,145,24,133,178,203,201,99,47,96,9,159,
+  3,187,247,48,123,126,130,241,241,25,10,165,144,133,114,13,79,5,220,176,239,74,174,121,251,141,204,204,143,243,212,231,
+  239,35,87,118,233,93,59,64,202,148,4,153,52,35,51,57,188,208,37,149,177,80,190,38,29,79,82,107,113,209,66,35,
+  180,194,150,6,134,48,201,116,247,176,188,84,33,221,217,141,31,84,105,27,218,74,233,228,11,248,165,69,186,55,239,101,
+  114,244,20,235,55,109,66,159,51,88,26,61,78,255,182,45,204,140,156,34,148,146,238,246,14,158,253,210,61,92,251,225,
+  31,99,226,195,239,238,47,126,252,111,174,72,192,153,93,48,119,24,178,255,9,72,188,198,243,83,5,222,9,252,6,171,
+  49,72,171,0,244,42,240,46,132,33,19,93,221,124,218,178,89,241,189,55,172,29,136,15,220,14,44,131,169,160,219,132,
+  161,69,51,222,150,234,77,27,87,237,90,131,95,90,98,97,197,229,204,232,44,169,22,131,45,91,215,177,82,45,210,158,
+  106,225,220,11,71,88,191,110,29,163,99,83,156,59,55,73,221,117,185,254,198,107,40,23,74,204,143,76,96,138,144,58,
+  154,92,197,64,72,141,83,89,161,45,105,145,140,154,216,137,14,142,157,28,70,121,21,134,134,122,49,60,135,83,103,207,
+  145,173,4,148,28,73,221,115,88,219,222,198,53,183,221,130,39,3,30,253,199,127,162,92,172,178,88,169,112,199,193,189,
+  212,22,166,168,213,234,156,159,24,39,17,129,84,202,164,86,242,177,132,69,91,103,148,122,177,142,48,4,182,52,49,13,
+  139,74,185,142,176,162,216,81,129,87,168,33,19,29,116,12,109,165,180,56,78,251,142,107,73,183,117,224,84,43,172,217,
+  178,141,133,201,115,180,68,147,108,234,236,97,120,108,134,190,129,77,172,20,203,44,12,31,103,237,135,111,52,143,125,249,
+  129,173,87,207,77,237,43,194,209,1,200,223,7,129,249,26,3,67,216,156,171,202,235,0,118,171,0,244,67,32,86,24,
+  144,235,238,230,119,58,58,152,155,159,123,67,159,229,19,192,46,200,4,176,51,64,238,249,106,202,236,187,226,134,237,36,
+  133,65,185,230,113,106,116,158,122,32,217,185,103,16,39,8,232,203,100,152,30,25,37,98,88,168,80,113,246,236,56,97,
+  40,73,38,227,108,217,184,134,71,30,126,12,225,73,66,9,139,213,34,136,86,68,80,98,176,39,131,16,73,218,59,186,
+  40,149,92,150,231,150,104,111,73,16,77,70,56,59,60,74,97,217,165,162,13,102,23,151,232,73,89,236,220,187,145,68,
+  87,146,199,62,255,53,102,39,150,88,88,42,177,101,221,26,218,18,154,211,249,5,230,151,125,156,74,157,222,182,56,134,
+  45,201,86,28,234,46,116,244,180,177,232,47,162,77,11,165,13,34,241,20,147,75,43,180,246,174,193,76,216,216,174,139,
+  87,117,137,247,108,36,91,88,193,173,20,72,181,245,81,201,205,211,214,222,67,108,126,138,154,83,198,111,73,18,233,74,
+  113,100,248,40,151,93,113,45,165,185,57,182,239,216,197,147,59,55,181,85,231,166,182,153,176,81,192,120,59,20,186,94,
+  7,243,235,12,171,29,62,86,1,232,85,18,13,104,165,249,191,59,58,152,158,159,123,67,120,160,0,216,12,108,4,171,
+  2,67,17,184,242,1,219,220,25,63,56,24,217,209,217,142,19,106,78,141,44,49,53,190,200,190,131,67,4,129,164,22,
+  132,196,80,120,133,34,93,93,253,156,56,113,22,215,215,84,42,21,174,223,127,128,153,233,41,230,103,22,64,167,240,13,
+  73,197,201,97,186,43,108,93,147,36,157,73,178,82,170,210,218,217,199,185,115,19,68,132,198,178,34,228,235,30,11,203,
+  53,2,199,96,62,159,197,196,101,215,206,77,236,186,124,43,39,158,121,146,177,211,147,76,45,215,48,165,224,138,141,189,
+  44,206,156,97,227,101,59,89,250,198,8,218,13,72,153,54,75,69,151,137,133,89,10,117,197,134,76,55,42,12,48,19,
+  73,132,29,199,136,165,176,18,6,161,17,39,146,72,224,213,92,66,167,140,76,117,17,233,88,71,80,88,38,210,190,6,
+  59,209,142,178,76,82,109,93,248,229,28,6,81,58,18,9,86,86,86,24,30,59,203,229,251,47,35,234,4,180,29,92,
+  99,14,63,104,108,220,171,194,221,10,142,157,134,210,92,35,214,244,53,3,159,12,141,70,0,171,230,215,42,0,189,106,
+  98,75,193,51,155,55,243,201,19,199,223,176,103,248,101,96,7,100,52,236,42,10,246,159,236,74,116,95,181,126,19,117,
+  223,228,204,236,44,99,83,89,118,109,92,79,151,105,83,93,41,83,143,39,201,23,138,132,74,51,183,144,37,183,82,161,
+  238,134,196,226,22,107,215,246,243,252,115,207,163,148,137,231,43,166,150,151,209,166,77,198,172,115,235,53,151,115,242,236,
+  44,126,42,201,66,54,79,49,151,39,110,71,112,125,200,45,85,169,249,38,78,221,163,176,178,194,205,215,238,98,231,190,
+  173,76,143,141,115,252,133,147,12,143,45,163,3,147,104,218,192,165,68,79,87,15,78,32,25,29,31,165,163,163,133,72,
+  36,205,212,217,19,244,118,181,81,169,215,137,39,186,112,131,58,50,30,131,104,156,192,138,16,104,159,194,74,145,129,238,
+  22,108,211,196,115,202,68,188,58,177,76,59,70,190,138,174,150,136,165,219,81,161,67,44,213,66,224,213,105,233,236,97,
+  246,204,89,34,194,102,105,108,146,197,158,33,182,116,247,179,255,170,45,252,195,96,186,123,247,100,126,187,9,131,117,152,
+  106,17,56,81,33,94,19,13,69,105,152,209,154,204,42,62,172,2,208,247,203,253,24,198,75,207,48,17,188,113,1,137,
+  221,192,219,32,226,55,58,90,92,118,38,30,223,52,176,111,187,140,26,38,103,198,102,153,43,58,164,50,22,173,29,38,
+  132,146,114,121,133,206,53,3,228,242,14,133,74,149,192,119,240,85,132,82,117,145,171,175,216,69,185,88,100,97,33,71,
+  46,95,197,247,171,140,77,76,33,77,155,15,254,232,213,180,183,218,228,75,30,118,42,206,202,194,28,6,224,32,169,150,
+  92,28,79,224,7,146,185,236,60,91,54,12,178,117,219,58,68,16,48,114,102,154,231,207,205,19,81,81,76,229,208,215,
+  213,70,251,230,13,68,35,113,30,252,204,3,216,194,161,103,176,143,177,209,60,166,17,161,167,53,73,110,57,139,136,167,
+  177,220,4,177,136,69,44,147,38,16,26,21,106,178,243,51,208,151,193,10,125,180,1,97,117,9,51,22,129,104,2,183,
+  84,37,154,105,69,105,133,178,227,84,61,159,214,181,189,56,118,43,149,165,9,16,130,211,39,78,209,51,212,199,230,129,
+  94,50,87,110,139,205,77,62,53,216,7,107,210,112,52,121,93,143,211,241,43,219,161,250,42,207,103,212,192,123,122,137,
+  194,159,158,186,216,131,109,85,222,34,0,36,66,31,180,70,232,111,61,115,90,74,180,52,95,23,240,177,45,197,83,195,
+  105,230,10,54,166,161,241,124,159,161,161,117,252,175,206,78,98,217,236,235,110,223,39,128,118,104,9,97,79,89,136,253,
+  75,67,67,157,3,125,61,156,30,31,70,210,78,61,95,98,235,254,65,60,81,198,140,183,80,203,105,100,80,103,110,170,
+  140,235,9,28,207,163,238,64,34,149,102,211,230,33,158,125,242,41,234,53,143,68,186,149,192,119,217,180,113,136,233,233,
+  28,189,61,173,148,42,69,66,34,40,165,241,74,43,24,34,77,222,245,169,187,33,102,96,145,93,92,32,22,179,217,180,
+  174,159,84,58,198,217,115,195,156,56,54,131,242,19,24,17,131,206,76,72,207,218,78,90,218,123,120,232,75,223,96,126,
+  126,133,158,158,40,21,191,200,200,194,18,59,214,246,210,106,249,148,242,5,202,158,75,34,221,2,97,128,157,138,227,4,
+  33,137,104,140,229,233,89,156,245,157,4,202,193,204,164,240,43,57,68,221,71,71,186,112,148,32,82,93,70,91,22,102,
+  44,129,246,125,132,25,167,111,231,65,206,31,57,73,172,59,73,189,144,229,196,11,135,232,28,90,207,142,45,59,152,146,
+  207,244,174,81,106,75,21,186,71,94,200,21,150,126,227,185,240,33,165,95,213,192,68,71,10,150,170,62,31,1,188,85,
+  124,120,139,105,64,226,146,51,67,235,111,77,198,188,142,224,115,255,137,86,44,67,53,74,58,104,141,25,137,112,109,95,
+  31,219,179,175,111,126,152,6,38,192,156,134,62,19,246,12,183,182,110,180,183,247,202,217,233,69,164,72,115,108,228,60,
+  107,122,227,180,91,9,92,55,68,91,130,48,208,120,245,144,229,165,44,210,202,80,174,130,235,20,217,190,181,135,202,74,
+  129,226,138,75,36,146,34,48,67,178,185,34,61,241,24,187,175,218,198,99,207,159,100,239,182,1,234,94,29,101,36,16,
+  50,66,185,28,195,49,60,108,51,32,87,9,169,73,159,125,235,186,233,236,78,115,234,220,4,199,143,156,163,94,49,216,
+  50,180,150,120,220,199,169,251,108,221,188,145,83,135,142,114,250,244,52,233,214,20,157,61,93,156,56,57,65,95,107,134,
+  84,139,32,29,137,145,155,206,147,43,213,105,221,49,72,117,105,5,225,25,216,82,147,72,26,212,202,5,74,249,25,44,
+  11,12,67,16,202,40,166,246,9,107,115,196,226,105,38,199,102,105,235,233,38,38,77,210,153,36,243,231,79,179,118,235,
+  62,156,76,27,178,90,163,61,109,176,60,91,162,183,31,114,97,157,195,241,72,251,213,149,250,78,19,182,234,138,63,251,
+  217,138,95,252,143,175,193,92,221,13,68,86,1,232,117,17,249,90,236,126,45,5,136,55,70,121,125,37,240,145,151,60,
+  74,8,28,217,188,229,117,127,174,57,96,188,193,253,108,211,49,123,215,242,166,13,237,174,136,178,130,226,232,124,141,137,
+  185,101,54,111,28,196,169,214,136,69,18,228,139,53,234,174,67,97,165,132,33,13,180,8,8,117,29,116,141,193,254,78,
+  74,249,2,201,88,6,169,35,184,149,0,165,5,151,239,31,226,206,107,215,83,171,133,140,205,150,9,181,135,246,3,74,
+  85,143,26,101,12,195,162,80,87,228,114,69,214,36,91,217,186,126,128,74,81,113,228,217,89,170,213,40,123,47,223,192,
+  238,61,237,84,75,33,189,131,59,89,200,213,121,230,217,83,164,18,146,189,123,214,178,176,156,39,8,108,90,210,22,201,
+  136,164,88,83,76,46,174,176,48,51,71,186,181,3,35,18,199,173,86,241,106,14,241,168,137,227,212,88,94,92,194,173,
+  150,168,151,114,104,183,138,10,61,138,217,5,76,29,176,56,61,205,242,236,12,97,173,68,52,18,165,86,40,99,20,231,
+  233,104,109,161,230,133,132,190,198,201,151,88,158,93,228,150,107,246,225,108,236,140,157,128,173,54,28,4,214,108,7,235,
+  5,26,197,221,134,95,133,159,49,224,126,26,45,145,86,193,231,45,206,1,105,41,26,10,145,126,125,253,8,134,161,191,
+  37,248,0,72,165,112,98,49,78,89,22,117,223,127,221,80,190,4,166,108,104,63,251,167,6,82,91,11,67,182,204,21,
+  10,248,85,55,44,158,56,231,236,218,191,62,222,22,141,9,207,169,32,140,56,213,186,143,101,155,132,94,136,129,196,113,
+  107,4,94,157,246,182,4,17,203,96,33,191,66,168,20,129,22,44,231,74,68,146,130,237,155,187,232,138,105,134,122,186,
+  153,205,86,17,134,133,143,166,226,107,204,168,71,224,184,104,124,210,41,69,87,123,134,207,63,114,152,145,169,42,217,108,
+  137,116,91,138,150,13,67,140,207,140,210,155,137,17,181,202,28,121,106,4,203,15,184,249,166,61,228,10,75,44,47,231,
+  73,164,186,104,77,43,80,146,217,229,58,21,108,38,70,70,160,126,43,201,76,6,191,94,129,168,73,128,160,173,53,73,
+  110,49,75,210,110,35,84,154,168,22,141,14,32,245,58,181,220,50,150,10,88,30,31,165,51,38,48,149,34,157,105,97,
+  242,204,11,108,236,111,103,228,228,9,90,99,157,196,82,6,227,231,206,49,184,161,143,95,251,141,159,230,19,191,249,103,
+  131,3,211,43,87,167,97,100,16,150,214,193,98,203,171,56,87,47,52,181,159,85,239,215,15,0,9,253,189,130,80,163,
+  135,245,119,175,65,89,134,230,252,82,140,175,31,111,197,54,191,25,124,0,204,32,96,182,171,151,199,110,184,140,205,76,
+  17,190,150,124,148,33,16,121,23,255,153,121,52,216,41,24,148,182,177,109,177,61,222,94,10,125,188,154,230,170,195,167,
+  244,181,42,112,39,135,122,35,97,221,51,237,136,77,165,230,80,119,5,145,168,141,82,26,83,154,132,174,34,12,13,58,
+  90,218,169,151,235,56,117,15,199,245,89,42,20,81,166,207,186,53,93,156,58,125,142,53,215,237,166,61,29,50,53,94,
+  71,102,58,200,57,117,164,97,163,188,24,78,221,99,219,150,1,114,115,115,36,99,146,122,201,32,105,11,118,95,213,133,
+  165,5,143,127,245,97,202,150,73,255,80,146,222,169,4,235,162,105,222,127,215,78,18,241,20,71,142,157,37,145,76,98,
+  133,1,177,136,77,190,92,35,87,241,137,198,50,44,205,44,82,92,204,17,239,104,195,117,106,16,106,194,32,164,163,53,
+  69,118,120,140,206,140,32,40,231,105,109,15,176,35,49,34,82,80,90,156,167,51,19,227,228,209,179,248,67,29,132,190,
+  166,165,181,149,233,169,97,34,134,69,111,58,205,226,114,137,100,87,27,237,49,131,211,207,31,231,234,155,174,226,182,95,
+  125,159,253,248,127,252,196,142,187,43,222,213,30,156,125,26,10,55,128,27,127,149,166,44,191,10,62,63,56,0,244,61,
+  129,144,10,27,149,114,190,23,11,78,128,231,55,62,40,191,205,231,181,227,211,122,199,229,220,114,211,32,248,175,97,76,
+  116,212,132,99,89,170,207,204,243,28,68,4,116,85,226,86,207,76,44,98,230,243,130,203,207,12,115,192,113,228,61,109,
+  233,84,34,106,154,245,114,133,68,50,73,174,92,197,215,6,81,105,162,128,192,15,81,74,18,4,10,195,20,184,174,71,
+  185,226,178,82,113,8,12,131,206,238,65,182,236,220,197,220,169,231,169,215,61,44,83,35,13,131,154,235,226,6,130,56,
+  54,149,165,69,174,189,241,0,43,203,51,100,90,90,153,93,206,210,27,85,252,232,29,87,115,195,45,123,120,250,201,163,
+  12,182,230,241,80,140,206,79,115,126,120,153,229,214,58,219,74,91,145,211,231,169,121,33,65,8,237,209,128,90,5,38,
+  22,11,84,93,69,75,170,149,236,66,145,243,231,199,217,158,138,160,188,42,166,157,34,116,125,210,9,155,145,92,158,226,
+  114,156,72,202,194,169,228,81,161,143,82,38,197,66,133,150,142,54,234,149,2,203,217,44,173,201,4,182,109,2,22,174,
+  87,34,211,102,227,87,163,76,205,231,88,187,111,3,229,92,150,217,153,37,174,62,176,149,133,15,94,219,62,241,183,15,
+  237,29,130,189,192,248,121,152,223,253,166,229,36,86,229,13,5,160,151,130,144,250,215,193,231,251,229,128,196,119,130,93,
+  2,225,121,80,246,112,188,215,112,201,121,33,86,205,191,48,208,73,9,221,217,184,108,61,47,163,12,78,140,115,121,174,
+  160,179,160,139,29,29,70,171,52,241,132,192,215,6,78,40,240,131,0,132,65,168,160,230,6,248,210,34,212,14,97,88,
+  193,113,13,20,49,140,88,130,236,236,28,207,158,56,204,87,30,120,150,119,223,184,19,66,133,34,69,16,113,240,189,50,
+  86,24,163,86,169,113,112,111,134,158,78,205,200,249,42,158,105,176,88,45,242,254,219,182,113,227,141,251,120,228,248,56,
+  71,79,77,144,136,117,82,43,215,56,184,125,11,191,245,43,123,89,88,28,231,190,135,143,112,236,252,18,189,3,253,12,
+  181,37,136,69,5,147,179,37,114,249,18,177,84,138,68,196,162,88,23,12,159,27,103,243,246,117,84,86,150,200,152,38,
+  129,231,19,248,46,149,98,157,165,133,101,50,97,28,211,180,0,19,203,142,224,212,139,4,142,133,20,33,203,75,203,196,
+  227,54,34,8,233,78,119,49,154,205,163,18,96,135,17,90,204,8,139,75,75,108,221,190,133,236,114,129,254,181,29,92,
+  125,231,205,60,246,208,185,245,3,19,179,151,197,225,248,60,228,55,128,243,253,164,76,132,77,243,107,21,128,126,0,1,
+  232,69,16,18,175,41,248,124,199,167,156,212,20,170,38,165,186,137,149,146,4,175,209,178,211,9,139,200,87,38,200,129,
+  225,67,91,28,6,71,205,68,107,109,46,199,205,139,133,170,173,9,231,77,17,9,123,218,109,223,13,81,82,80,115,53,
+  1,6,86,196,32,12,21,1,10,95,73,28,213,232,187,5,18,199,215,56,129,96,38,91,224,200,240,24,185,66,25,37,
+  35,60,118,124,152,95,184,235,50,42,85,240,80,132,161,70,121,117,218,146,46,215,223,114,61,95,252,234,97,42,53,147,
+  66,121,158,171,118,173,231,242,61,219,152,61,63,193,200,211,199,137,201,22,150,75,5,122,6,91,120,247,123,222,70,123,
+  52,164,191,67,163,61,77,189,22,97,114,102,153,254,116,130,106,96,144,47,231,233,110,73,163,109,139,154,83,197,83,154,
+  209,243,147,120,181,18,94,181,128,114,91,49,16,212,42,21,220,80,83,173,56,196,226,38,97,50,164,232,172,16,73,196,
+  80,126,29,191,90,34,30,143,145,95,46,210,217,213,142,235,86,137,69,34,8,211,192,182,18,232,160,206,192,96,55,11,
+  217,9,178,133,42,81,203,98,108,100,134,13,219,183,179,233,67,55,181,204,252,193,167,246,12,193,30,15,198,70,27,90,
+  208,247,108,61,105,26,9,168,171,113,63,63,160,0,212,0,33,121,33,39,226,101,127,120,125,173,110,83,106,22,10,17,
+  62,127,184,135,247,113,156,104,169,134,146,175,1,8,69,12,196,112,158,42,88,26,186,149,45,215,140,214,189,212,45,181,
+  122,169,191,234,157,243,193,46,180,199,214,183,116,219,17,199,113,176,19,54,78,45,192,247,3,220,48,192,22,22,142,227,
+  161,100,148,98,65,81,200,149,184,108,219,16,229,98,141,108,190,196,249,169,41,234,129,203,109,119,221,198,35,79,62,195,
+  120,182,192,216,146,162,82,171,98,40,31,29,196,112,41,243,158,119,30,96,41,95,226,252,116,1,167,88,227,198,171,215,
+  178,119,251,58,254,215,23,159,64,27,22,182,52,153,95,158,227,224,181,59,184,237,214,171,201,196,77,202,203,115,56,85,
+  56,125,122,150,182,182,24,109,109,235,89,90,92,97,37,167,217,176,113,13,182,97,51,54,91,160,98,40,180,33,41,172,
+  20,88,158,159,195,112,107,204,207,205,146,238,237,195,148,146,88,52,69,177,148,39,98,67,220,78,96,199,99,148,253,2,
+  58,244,41,23,86,144,192,226,252,50,155,214,15,225,84,170,24,177,4,117,215,33,226,219,40,167,128,163,11,116,117,118,
+  50,61,58,207,198,93,235,88,156,89,198,52,206,177,229,109,123,197,99,95,124,118,157,119,110,228,50,27,142,47,195,74,
+  245,251,208,130,70,128,5,126,112,34,115,47,180,251,190,180,163,136,15,108,7,10,64,180,249,218,109,66,80,3,254,127,
+  64,43,200,19,64,7,176,95,32,42,32,109,13,69,208,25,96,14,212,156,144,106,141,148,220,22,190,10,1,160,90,191,
+  1,227,45,52,66,135,47,49,135,244,27,112,238,216,166,98,44,151,160,240,143,231,25,92,124,237,146,83,235,192,50,68,
+  109,232,94,50,69,111,143,172,235,43,115,225,41,87,115,196,132,181,174,157,88,23,137,199,168,20,115,152,106,128,114,169,
+  140,138,40,100,16,226,25,18,169,34,248,182,197,220,202,40,145,192,71,134,1,110,16,16,218,138,80,123,220,125,235,205,
+  12,172,93,207,195,135,158,192,117,66,166,86,106,212,61,129,210,38,117,127,133,91,175,92,199,182,141,235,248,155,207,60,
+  207,242,138,195,205,151,247,115,231,141,59,8,48,145,113,139,231,78,206,177,110,176,139,247,189,255,26,246,31,216,141,54,
+  193,119,92,12,51,198,244,226,18,115,139,85,140,68,18,148,79,38,99,114,228,236,57,118,238,186,3,175,84,197,50,12,
+  240,192,50,4,150,116,152,157,203,179,169,51,197,236,196,4,177,182,86,132,147,37,244,28,150,43,144,72,24,20,202,117,
+  218,13,16,150,73,40,12,106,78,128,169,161,88,88,161,144,207,34,157,18,113,101,131,39,241,66,80,210,164,156,119,88,
+  211,27,67,198,45,10,181,10,45,221,105,38,78,158,101,115,75,130,214,247,92,223,58,247,159,71,246,174,133,61,53,24,
+  27,129,185,189,223,163,22,228,208,112,189,191,85,0,72,240,205,137,178,33,141,96,215,43,105,148,253,213,96,244,129,92,
+  0,121,4,44,31,34,239,1,227,253,52,98,133,47,92,39,214,32,223,77,31,34,151,131,84,160,115,166,140,251,82,38,
+  2,95,99,106,37,114,90,7,49,33,150,93,59,146,141,168,176,74,248,253,171,13,226,141,31,239,55,6,124,46,136,101,
+  194,211,251,246,96,222,55,135,255,26,45,18,191,177,80,82,22,244,22,44,187,115,171,171,151,173,192,59,18,192,88,96,
+  136,181,180,167,109,173,4,146,8,190,239,98,68,108,44,219,100,114,97,146,245,29,237,248,41,201,161,83,195,108,236,234,
+  197,162,68,169,236,82,117,52,245,42,172,233,105,227,238,187,174,227,239,62,251,69,214,12,117,147,27,89,96,169,84,66,
+  186,62,158,27,210,55,144,225,166,171,247,144,205,213,120,250,216,48,91,182,36,121,239,59,118,33,148,197,3,143,156,96,
+  102,106,137,24,54,43,139,33,209,222,237,24,9,69,80,145,232,48,192,208,14,51,195,141,54,207,74,91,72,71,34,173,
+  50,251,247,108,98,97,106,12,167,226,35,147,73,132,43,81,94,149,164,29,101,102,114,142,205,125,187,201,231,87,200,228,
+  86,136,25,38,90,249,56,1,84,29,15,179,34,136,26,130,138,227,208,209,223,141,31,56,104,173,240,253,144,66,161,72,
+  92,56,216,118,128,16,6,85,167,2,72,42,101,7,217,103,82,173,46,51,20,31,228,233,51,227,108,90,51,200,233,103,
+  159,99,205,174,203,121,114,99,223,134,129,243,115,7,34,112,44,7,185,58,56,177,239,97,174,14,243,230,46,187,161,94,
+  166,221,12,2,105,16,43,96,252,58,136,182,6,125,21,5,236,63,7,233,131,229,8,50,129,38,213,9,209,18,180,216,
+  208,33,26,101,181,69,243,154,34,124,209,244,180,37,196,107,96,9,80,218,87,41,80,45,102,195,159,35,45,112,208,250,
+  240,86,207,125,112,9,38,254,30,130,239,119,231,254,248,27,11,64,111,44,248,64,195,37,63,190,117,59,127,240,252,243,
+  156,207,46,189,234,93,15,170,192,31,129,56,8,137,58,244,120,97,16,27,10,229,168,15,167,36,132,117,73,138,76,204,
+  244,157,0,219,74,162,148,196,138,25,60,125,122,150,106,181,196,250,193,54,74,51,211,129,59,54,73,164,175,197,172,59,
+  121,132,53,128,227,135,204,78,101,121,231,59,175,35,26,79,226,155,9,182,110,106,103,206,181,176,45,3,223,146,4,58,
+  228,142,155,174,34,30,143,113,232,244,56,233,4,252,244,135,175,198,204,68,121,232,171,243,140,158,90,226,230,245,189,108,
+  218,210,199,200,82,158,175,125,250,51,56,239,184,145,253,251,215,32,178,14,245,108,141,137,169,105,100,50,129,17,212,49,
+  227,81,106,142,230,242,29,107,89,219,187,158,143,255,229,103,136,217,22,130,8,17,4,81,108,166,70,39,152,223,182,6,
+  43,26,101,250,220,8,109,49,147,88,196,98,178,94,161,221,183,136,56,6,21,17,48,187,148,195,76,164,72,196,37,10,
+  141,109,90,44,45,46,211,223,17,197,245,92,164,105,226,251,1,166,105,224,120,14,110,208,56,221,205,192,97,118,116,78,
+  205,44,150,197,157,7,7,197,194,232,4,246,149,187,83,203,231,231,118,117,195,182,16,206,253,41,56,135,248,206,235,70,
+  95,168,251,220,10,108,105,254,255,205,96,62,133,151,252,187,187,9,54,117,48,222,222,0,3,179,15,18,26,210,37,104,
+  233,129,136,130,88,8,93,10,218,234,13,16,137,26,154,238,0,58,60,136,185,208,186,212,232,194,107,215,65,42,137,148,
+  45,81,211,76,181,27,153,116,43,73,219,22,178,37,110,215,45,195,202,248,4,90,41,171,144,138,70,77,5,195,139,139,
+  166,58,57,86,221,83,175,216,105,173,142,181,193,212,171,69,154,152,63,172,224,115,193,6,245,108,155,223,236,235,101,83,
+  118,233,85,215,130,4,144,23,24,37,77,204,144,36,83,17,225,91,43,238,24,130,73,67,211,89,71,91,85,203,48,133,
+  150,40,45,48,12,240,74,94,232,77,158,87,221,91,215,90,132,161,190,245,196,72,184,211,136,232,115,182,52,116,61,46,
+  92,71,83,171,6,4,129,203,219,111,191,150,19,203,57,58,187,50,244,245,174,97,75,79,63,253,201,144,163,243,37,6,
+  54,15,178,177,183,13,87,216,76,45,151,249,185,15,221,202,96,91,43,15,30,26,102,106,118,146,159,124,255,21,12,118,
+  39,0,159,237,7,215,114,71,165,204,67,135,206,240,130,146,236,31,138,48,159,203,147,243,125,44,171,149,208,119,49,35,
+  30,137,68,156,253,59,215,178,178,88,162,119,176,143,201,98,153,122,221,167,63,29,37,34,76,74,181,42,103,71,167,25,
+  234,76,178,48,62,67,172,173,133,68,34,138,167,53,133,82,141,132,29,161,46,52,232,40,217,197,60,201,161,118,10,43,
+  43,152,194,160,82,170,19,25,108,167,92,173,16,248,1,82,8,132,144,4,74,162,13,19,97,219,148,124,135,43,194,186,
+  119,246,159,159,50,102,7,127,204,138,71,193,78,217,204,36,173,129,158,138,191,222,134,150,20,100,243,160,163,223,169,163,
+  178,201,121,116,189,193,128,115,1,116,90,26,38,145,184,12,100,103,195,237,16,217,12,81,175,209,164,50,19,133,120,0,
+  45,1,244,3,253,17,232,213,144,240,33,234,67,187,111,209,90,4,171,22,137,70,172,206,174,132,234,104,137,120,221,153,
+  136,234,107,183,253,100,218,112,181,166,181,107,128,150,206,62,58,122,162,100,50,17,146,241,56,81,163,5,105,36,209,70,
+  17,219,174,97,153,41,86,170,113,142,63,119,26,249,169,79,234,76,224,23,98,176,160,161,178,8,218,121,149,8,123,243,
+  135,22,124,154,98,40,197,244,129,203,24,56,125,154,136,239,191,234,9,170,105,67,26,62,196,170,40,35,29,181,23,12,
+  237,159,83,66,47,40,65,107,104,72,225,106,139,184,97,97,154,6,158,82,12,30,59,18,252,70,165,194,61,118,82,119,
+  158,154,100,99,37,176,166,90,147,74,70,219,132,81,215,40,63,164,86,170,177,125,91,55,109,3,41,138,217,113,166,38,
+  167,184,245,230,247,112,253,190,62,22,31,253,18,207,157,112,56,120,112,7,17,91,242,252,212,50,201,100,140,237,123,182,
+  114,98,116,146,104,107,47,107,247,71,248,203,7,79,50,50,159,67,71,12,58,91,219,185,253,242,157,220,118,211,110,142,
+  29,158,225,72,49,65,217,247,177,12,19,35,16,32,21,53,167,206,186,161,94,122,58,51,140,158,155,64,218,38,137,76,
+  11,139,217,89,54,247,15,161,180,34,17,77,50,57,189,200,250,190,118,68,168,41,230,202,68,35,22,210,128,82,205,163,
+  43,16,184,82,35,164,77,110,185,76,119,103,10,161,37,82,107,170,85,15,207,83,212,106,53,84,24,98,154,38,94,16,
+  18,4,10,164,69,44,153,196,215,96,91,166,184,9,170,71,254,238,254,136,252,229,59,98,209,164,36,155,238,75,233,202,
+  228,128,7,29,59,97,124,59,248,198,119,184,241,101,147,47,249,223,188,49,1,136,94,227,190,114,8,100,9,204,86,136,
+  104,72,26,208,26,64,135,134,30,7,58,13,232,50,161,39,132,148,215,40,102,215,225,24,180,228,108,145,172,181,182,89,
+  254,154,193,104,106,219,58,187,107,235,70,57,180,109,155,76,116,117,138,104,212,198,52,20,49,91,99,104,141,22,105,36,
+  33,82,7,168,48,68,249,17,194,48,66,72,13,109,186,248,9,7,233,183,177,48,86,228,236,51,95,231,133,127,190,63,
+  232,62,125,50,123,64,135,103,227,240,180,47,196,67,62,204,174,211,58,216,218,164,23,222,98,0,244,230,2,31,104,148,
+  231,40,119,118,17,219,190,131,125,199,142,190,234,215,31,214,90,204,106,148,138,26,37,85,113,79,43,244,9,132,88,17,
+  154,80,41,45,221,58,196,132,198,140,69,113,206,142,168,173,243,203,86,214,142,74,237,150,217,183,152,45,187,160,118,106,
+  109,158,206,150,68,89,229,13,39,180,240,117,157,253,91,118,147,232,72,227,10,143,227,71,207,49,113,126,148,31,185,177,
+  155,66,220,160,187,183,147,205,125,237,132,150,199,240,216,12,87,238,221,78,61,168,208,211,222,205,174,246,36,247,124,227,
+  81,254,249,171,207,51,91,174,33,12,31,17,154,124,234,179,143,241,238,183,93,197,31,254,219,219,153,152,56,199,83,15,
+  204,16,77,117,224,133,11,36,4,84,20,236,191,108,23,158,231,83,174,186,132,134,65,224,185,116,180,36,169,86,242,100,
+  58,90,49,132,201,217,19,231,216,177,161,151,104,60,73,53,95,194,72,68,73,197,108,242,185,18,43,249,42,177,206,24,
+  134,101,81,47,7,20,11,14,182,105,99,89,30,85,87,129,54,240,61,15,161,12,208,16,134,10,195,176,168,212,125,218,
+  210,9,132,72,50,231,4,34,3,229,253,185,229,250,125,159,255,134,61,112,215,141,70,216,151,140,150,231,232,137,67,71,
+  180,145,31,230,231,1,227,95,1,31,1,252,20,175,95,239,121,113,137,217,87,5,174,3,115,25,98,45,208,38,160,189,
+  21,90,52,116,27,13,237,102,64,65,191,7,93,158,160,213,137,154,73,63,30,139,217,93,157,102,56,212,111,235,161,129,
+  72,106,235,6,99,239,222,93,70,219,192,26,209,218,217,73,38,149,66,16,82,175,22,168,101,243,248,117,151,208,87,4,
+  21,141,175,5,210,168,32,209,104,165,64,40,180,89,193,76,152,8,43,67,49,43,41,63,242,156,90,186,255,1,167,242,
+  212,211,133,200,114,121,225,54,152,141,194,233,80,136,163,14,156,10,17,83,81,173,202,31,3,45,94,5,13,232,200,235,
+  11,64,111,62,240,185,168,5,133,33,79,31,56,192,142,211,167,176,95,229,252,176,64,19,134,144,53,148,126,94,6,202,
+  214,48,44,108,163,38,125,5,90,9,29,8,76,219,162,92,171,211,123,98,76,183,131,113,175,101,177,117,122,182,208,94,
+  241,206,250,16,169,71,229,134,211,99,19,178,187,59,70,190,110,99,38,51,12,244,102,48,204,56,185,149,2,29,107,44,
+  54,175,143,66,105,145,186,97,51,56,56,64,75,20,42,174,102,247,182,45,12,118,166,17,212,104,137,181,162,29,201,173,
+  183,222,196,143,158,26,99,105,161,78,58,157,161,230,154,156,158,153,226,51,15,63,201,137,209,113,254,228,255,252,32,142,
+  243,2,174,204,16,143,165,8,209,8,2,34,150,162,86,15,89,90,174,163,181,160,94,172,209,221,154,32,102,42,106,190,
+  131,23,64,91,60,69,97,165,198,218,222,78,22,23,115,68,45,131,164,13,181,88,138,124,169,78,91,166,14,18,66,5,
+  165,98,64,79,87,138,48,200,17,120,62,165,146,131,82,26,165,154,155,68,107,180,214,184,190,135,29,77,81,11,193,43,
+  23,116,4,194,8,136,202,100,62,124,230,208,113,99,109,187,37,11,130,84,139,38,238,129,241,88,195,243,248,109,23,183,
+  4,114,192,187,128,206,215,208,13,78,243,250,57,16,251,192,168,64,36,128,216,97,65,194,214,180,133,176,198,128,109,192,
+  122,23,58,106,208,153,53,232,46,116,180,182,6,3,125,241,204,150,13,102,199,230,33,177,249,178,125,180,111,218,104,196,
+  58,219,101,178,165,21,75,36,46,49,222,52,42,112,169,45,173,80,45,228,241,106,53,36,33,162,153,24,174,12,133,22,
+  2,67,75,2,237,35,34,18,43,222,142,83,55,89,58,57,198,202,163,247,184,197,123,238,91,142,140,78,207,38,52,227,
+  25,56,175,96,220,145,114,174,36,141,25,59,12,103,187,181,42,181,161,131,231,128,9,160,244,214,226,128,222,188,224,115,
+  129,140,206,117,118,243,55,111,123,59,153,175,222,131,241,42,46,194,37,165,131,107,97,161,210,150,122,82,85,92,218,12,
+  149,117,163,134,233,59,1,50,98,72,211,48,16,150,141,51,126,92,111,41,86,228,162,132,32,226,132,151,175,168,115,46,
+  188,32,97,104,74,249,155,111,247,139,65,49,140,235,101,207,176,167,23,23,200,180,40,158,126,230,52,165,37,201,7,126,
+  242,110,90,35,37,194,48,141,76,117,176,101,83,59,200,0,203,136,176,177,63,133,214,117,164,178,209,198,50,129,17,98,
+  248,109,252,252,135,63,74,217,180,241,204,58,170,170,57,117,116,130,209,145,191,224,200,68,150,31,253,157,79,240,222,253,
+  235,137,214,86,168,233,126,180,21,98,72,77,181,144,195,21,105,170,149,144,106,197,37,42,108,18,134,32,22,139,80,168,
+  87,113,61,69,79,107,7,249,124,153,174,206,118,132,101,225,185,30,49,91,34,165,65,165,90,160,86,47,17,139,199,177,
+  172,8,181,170,143,235,132,160,53,174,227,82,173,214,137,217,18,199,11,209,65,136,144,2,75,218,4,94,128,17,161,145,
+  152,187,82,213,113,136,78,65,196,221,188,217,76,34,88,10,20,197,88,44,161,107,245,88,25,172,143,55,72,219,111,239,
+  85,122,223,32,191,117,52,79,251,104,229,85,39,158,85,211,180,138,131,60,7,70,8,209,168,20,45,10,186,18,74,247,
+  74,232,69,211,229,193,128,7,67,43,146,161,74,79,107,135,222,183,59,97,239,217,26,233,216,185,93,30,216,178,141,158,
+  53,253,116,180,247,33,69,180,121,213,0,8,209,58,68,43,7,80,132,126,136,83,174,80,206,47,35,188,34,190,82,96,
+  74,66,105,128,2,83,128,169,65,10,141,101,219,120,86,154,249,165,50,163,95,254,186,170,220,123,111,53,250,252,241,92,
+  186,86,63,223,213,104,254,122,74,193,152,50,228,156,134,124,183,210,213,245,97,224,58,90,171,58,47,150,169,125,85,247,
+  222,155,20,124,36,223,75,61,112,161,249,94,227,9,109,207,101,97,243,22,254,219,232,40,163,103,207,188,154,3,172,127,
+  10,106,63,23,132,211,194,13,245,147,155,219,212,238,146,151,150,5,87,4,166,33,61,51,66,197,149,172,29,158,162,29,
+  56,19,143,178,207,241,231,227,65,120,216,131,49,23,6,214,87,235,42,81,15,245,189,107,135,228,201,241,37,242,11,211,
+  74,162,228,23,255,225,94,238,121,226,24,29,109,30,239,253,237,95,2,87,178,166,205,192,146,146,208,215,152,26,148,14,
+  240,132,129,52,53,132,38,10,65,96,215,233,222,121,128,132,175,41,101,115,56,134,207,76,253,36,50,97,208,167,109,150,
+  202,43,124,237,148,207,71,175,184,130,201,229,89,98,233,20,113,13,201,214,4,139,229,10,181,64,17,56,117,162,113,131,
+  192,52,145,70,4,215,171,18,132,154,76,50,65,189,86,103,114,114,154,214,100,138,74,190,136,33,162,216,162,74,93,88,
+  44,149,20,27,226,6,66,249,20,234,14,29,42,13,150,69,32,45,10,133,26,209,142,40,158,14,240,180,137,36,64,154,
+  10,39,80,180,119,246,82,158,93,193,46,84,132,134,212,177,238,54,59,181,166,93,82,243,88,200,57,132,158,27,54,220,
+  10,255,250,98,211,29,49,42,31,222,192,232,137,195,175,10,216,248,77,18,59,11,98,47,24,181,70,220,87,42,2,109,
+  115,130,22,67,138,238,152,102,67,160,244,134,26,172,45,27,244,122,93,45,45,198,150,237,233,250,250,181,137,158,235,175,
+  180,46,191,250,160,232,29,218,68,220,74,54,129,198,107,130,141,131,82,30,34,84,8,165,192,48,17,134,129,10,60,74,
+  133,101,156,82,25,28,15,67,105,124,35,64,10,11,48,16,10,4,10,211,16,88,241,24,165,186,203,243,39,198,152,249,
+  198,131,97,237,222,135,138,61,83,75,115,107,97,202,128,147,2,94,240,225,84,8,243,62,84,66,165,188,130,70,175,208,
+  72,182,211,52,226,217,94,147,195,255,77,170,148,124,215,38,185,105,104,202,117,131,39,207,165,190,169,12,235,119,180,144,
+  180,38,33,37,31,187,235,29,124,74,41,142,15,159,123,117,76,48,224,48,232,15,47,85,131,54,224,137,152,197,254,177,
+  162,246,5,58,162,66,165,13,137,51,59,205,166,21,175,230,131,231,137,192,90,231,233,211,30,60,35,165,88,118,37,107,
+  211,62,103,133,98,192,175,185,93,29,53,167,124,176,37,145,237,50,195,181,119,175,247,141,53,102,63,67,91,214,179,182,
+  51,133,242,67,82,182,137,144,146,80,11,132,48,80,65,136,41,52,104,208,194,64,104,133,22,81,140,84,11,45,166,69,
+  75,166,135,170,91,226,252,223,252,21,3,235,123,200,46,45,162,86,66,114,75,14,247,157,26,230,198,61,131,12,15,143,
+  113,249,213,7,233,239,239,226,137,135,14,81,114,5,158,103,210,154,138,18,137,74,202,78,185,65,88,155,38,166,109,224,
+  148,170,96,4,164,162,49,180,144,13,198,32,240,137,167,146,148,234,101,92,47,196,48,36,65,16,82,173,59,8,36,65,
+  8,94,160,48,140,8,16,160,53,24,166,129,86,30,160,72,180,164,8,135,71,117,199,114,77,30,49,236,232,226,142,205,
+  70,151,225,224,36,35,172,61,114,162,180,51,84,199,125,152,78,130,243,175,45,106,239,238,181,232,206,24,120,234,123,6,
+  157,11,191,195,134,185,103,196,32,102,65,70,64,103,18,6,12,88,167,96,157,214,116,215,66,221,145,179,228,96,126,235,
+  186,238,244,181,87,166,214,221,118,139,53,180,255,0,109,125,253,36,162,9,26,141,159,125,52,146,80,151,26,166,19,205,
+  138,16,186,81,23,66,27,141,240,10,25,132,56,203,57,156,124,145,192,245,208,194,71,9,159,64,42,108,47,5,34,68,
+  154,130,72,52,129,39,108,166,39,23,56,253,232,99,122,241,190,251,234,177,19,199,178,61,117,127,178,3,206,1,195,72,
+  70,208,98,212,215,122,78,64,201,129,224,113,224,61,26,166,121,125,58,130,252,64,0,144,105,104,170,174,228,211,79,117,
+  50,151,183,137,88,223,219,208,133,74,97,72,201,143,223,253,78,254,241,171,247,112,244,85,210,132,4,141,72,219,94,224,
+  231,78,47,19,184,65,16,66,45,229,134,165,104,189,70,218,93,10,218,20,35,161,41,103,91,133,142,24,129,122,18,33,
+  142,99,136,101,195,70,201,90,184,16,129,219,163,179,227,173,183,153,134,185,46,214,18,141,218,49,125,112,255,70,54,236,
+  18,100,29,133,19,4,216,34,138,208,32,48,27,105,47,82,162,9,137,232,16,95,25,104,17,34,9,49,100,43,161,142,
+  162,133,194,138,90,204,44,207,209,179,166,133,236,82,1,35,19,161,51,235,50,59,186,204,211,19,83,116,182,152,116,182,
+  182,18,105,137,96,104,193,244,228,34,133,90,136,29,137,147,180,45,132,17,176,92,171,209,22,111,193,182,77,74,181,50,
+  150,105,18,145,38,217,165,28,137,100,26,195,240,240,125,31,76,80,65,72,177,82,35,22,75,130,10,240,92,31,59,26,
+  37,240,67,10,165,42,126,79,11,90,52,180,102,67,10,124,191,17,174,175,77,129,187,88,81,158,130,83,219,55,25,109,
+  221,157,72,81,161,245,169,99,229,107,151,139,15,75,205,215,93,56,187,5,234,223,174,52,135,247,158,117,184,63,181,5,
+  81,169,126,207,139,50,13,226,86,48,218,32,226,65,42,215,160,121,134,162,176,41,132,141,14,12,229,161,223,237,104,235,
+  52,246,239,79,198,47,219,27,93,119,195,126,235,250,253,91,232,239,24,68,98,161,81,132,40,66,85,67,104,1,72,132,
+  12,154,247,145,23,217,29,33,77,36,2,237,123,132,133,2,197,210,50,190,83,193,8,105,104,59,161,64,10,19,33,21,
+  102,74,19,216,105,178,217,42,231,159,124,150,153,175,223,235,170,39,159,46,116,46,21,103,246,193,168,13,231,20,156,85,
+  112,62,148,204,213,52,133,184,214,78,11,4,9,96,180,73,142,27,188,126,57,113,111,249,212,151,11,224,243,143,223,39,
+  248,188,28,132,62,252,142,187,1,94,21,16,18,77,210,238,44,80,116,2,98,16,68,32,23,13,89,138,230,178,193,90,
+  51,168,200,144,231,107,113,158,73,36,76,95,149,194,147,113,173,39,59,4,229,41,41,29,52,241,16,174,75,73,33,54,
+  184,42,26,109,209,162,98,184,242,175,254,247,33,14,94,115,53,7,111,222,77,170,173,23,93,175,67,165,136,212,10,80,
+  4,42,68,72,141,8,0,105,130,112,145,42,64,34,8,13,19,45,192,194,199,17,37,60,25,80,175,251,152,50,78,36,
+  19,101,253,174,24,213,179,30,143,156,154,225,221,215,238,102,231,154,126,142,29,27,103,169,172,8,84,149,116,84,17,141,
+  71,88,40,214,49,68,2,91,154,164,19,113,150,86,150,72,71,99,72,37,41,22,74,212,3,72,91,54,182,33,113,195,
+  0,41,37,139,133,50,131,177,52,182,105,82,42,215,72,201,4,142,227,99,91,49,234,174,143,235,249,104,4,90,43,76,
+  41,48,165,198,64,112,104,50,43,135,147,105,177,123,87,15,126,80,163,235,208,169,194,129,201,149,135,77,248,188,7,143,
+  9,88,252,57,80,83,175,176,176,47,144,194,159,122,247,58,182,3,206,119,145,72,16,208,168,146,40,64,60,3,137,46,
+  104,87,208,173,161,39,10,107,21,108,168,194,166,9,201,250,234,250,53,93,173,55,220,156,28,186,253,22,123,224,224,54,
+  186,6,250,137,26,177,198,167,117,136,14,61,180,172,163,209,13,62,69,112,17,128,16,2,113,9,101,33,53,72,29,224,
+  215,29,138,185,37,130,74,30,194,56,182,106,107,104,77,162,138,145,180,9,173,12,149,130,207,216,115,231,89,122,232,33,
+  183,250,192,131,249,216,212,220,194,122,173,231,18,48,34,224,76,0,195,10,166,21,228,138,80,233,85,248,109,155,218,208,
+  107,91,201,156,88,196,91,172,124,91,208,17,151,104,124,171,0,244,26,129,207,165,32,4,188,106,32,244,203,192,7,47,
+  57,85,206,65,48,39,200,107,197,66,87,33,91,233,180,236,101,31,206,200,152,124,50,210,106,231,163,243,110,126,113,119,
+  135,255,111,71,11,234,63,7,218,5,12,101,202,248,160,8,141,116,45,192,137,39,164,83,13,196,154,238,30,222,113,227,
+  94,84,34,137,236,221,140,118,43,184,99,103,208,78,1,105,134,8,161,64,75,2,109,160,81,104,29,66,24,130,159,195,
+  84,30,138,4,161,174,179,152,159,229,217,167,143,147,157,112,9,253,16,105,91,236,220,63,200,14,175,151,199,14,157,103,
+  114,165,198,117,251,47,227,11,95,251,26,11,101,72,89,38,173,73,131,188,83,161,92,9,105,77,165,176,76,240,156,26,
+  82,74,52,130,114,217,37,87,172,19,213,146,88,139,77,60,158,160,86,113,136,68,44,170,181,128,186,235,97,1,126,168,
+  113,253,16,203,182,9,148,64,55,141,15,21,42,164,173,209,66,19,49,36,65,224,51,177,52,45,250,111,56,32,156,154,
+  71,234,169,163,197,131,185,242,55,20,124,78,193,227,54,44,236,132,96,188,49,190,223,82,220,122,128,252,46,58,138,57,
+  64,1,140,27,32,42,161,189,14,91,76,56,32,97,83,21,250,114,208,95,237,77,119,26,119,222,210,214,255,238,119,219,
+  187,14,238,166,167,187,239,197,130,122,90,65,232,190,168,210,75,129,198,110,150,44,22,141,121,145,205,26,50,58,104,2,
+  147,198,64,163,3,159,90,62,71,181,144,39,244,61,148,148,88,113,15,195,20,40,146,84,43,41,150,94,56,173,86,238,
+  255,107,103,249,137,103,202,242,252,84,182,37,8,167,6,224,172,132,17,13,83,33,76,187,176,216,1,165,4,184,213,102,
+  16,225,105,224,39,223,191,3,239,195,123,80,227,121,156,223,127,148,241,103,102,144,188,114,63,52,221,32,213,169,1,87,
+  208,104,91,109,3,191,14,148,127,24,1,232,181,2,159,151,131,208,7,222,113,55,119,172,228,48,151,150,190,39,155,56,
+  108,14,242,151,154,150,126,243,52,209,221,154,98,0,103,215,19,30,201,132,65,46,132,225,120,38,154,45,38,35,229,167,
+  41,187,31,61,216,205,246,243,5,162,245,144,58,40,165,116,208,231,135,174,4,229,24,22,237,153,148,216,183,206,198,155,
+  29,65,119,15,96,244,121,205,218,209,141,133,44,66,191,17,243,97,68,80,134,36,212,33,66,107,164,214,232,242,28,42,
+  55,134,213,127,128,197,149,2,133,98,145,160,102,224,86,61,28,63,143,233,38,41,45,151,233,27,104,99,123,161,151,115,
+  195,19,60,119,252,28,75,43,57,20,6,61,233,54,12,83,242,194,201,83,172,31,88,135,109,248,24,182,65,173,236,17,
+  139,197,240,67,152,203,21,241,180,69,80,13,40,152,117,44,59,130,161,170,152,210,66,152,17,60,165,176,100,35,70,193,
+  241,21,150,29,65,171,11,44,178,64,235,16,83,154,212,252,144,68,50,70,185,232,48,212,191,14,119,121,153,190,67,71,
+  151,175,170,235,71,52,124,46,3,143,231,96,225,73,8,175,249,22,188,197,26,26,45,150,87,190,67,126,71,54,41,224,
+  69,48,92,136,71,160,91,194,70,9,59,44,216,191,4,187,178,157,173,61,246,45,55,166,215,190,251,174,200,198,107,175,
+  164,191,127,8,3,7,133,36,84,1,154,0,83,6,77,156,177,65,11,2,195,69,96,33,154,126,86,173,21,66,132,205,
+  140,44,141,198,70,160,144,58,36,112,234,212,242,121,220,90,5,75,8,146,169,52,117,223,101,100,58,203,249,163,167,117,
+  238,240,11,202,59,114,156,158,201,217,122,79,213,153,26,128,51,18,134,53,156,15,13,57,42,18,246,12,117,63,231,250,
+  97,61,222,116,159,141,2,22,80,4,6,219,162,176,191,135,112,190,140,217,147,36,104,143,243,56,141,250,218,127,13,220,
+  8,204,3,159,166,17,41,30,3,102,129,25,224,87,155,224,35,224,251,246,24,155,111,85,240,169,56,146,79,63,253,218,
+  128,207,75,64,200,48,88,115,227,77,188,251,139,95,32,230,121,223,181,203,246,2,255,19,52,255,45,27,155,65,143,192,
+  138,13,79,164,82,166,111,133,70,217,135,227,53,105,84,122,126,108,155,90,99,12,163,86,28,222,237,134,20,32,136,194,
+  34,154,163,49,211,138,104,188,158,146,231,244,137,104,210,238,234,74,82,169,46,99,85,210,88,179,35,4,218,67,121,69,
+  164,169,209,161,64,138,6,151,16,202,16,169,12,164,150,168,208,199,93,94,164,92,122,148,129,206,61,124,227,235,207,50,
+  188,120,158,254,158,22,70,14,159,193,78,70,113,189,42,239,184,227,61,108,220,220,13,127,253,87,220,55,58,205,231,30,
+  126,154,181,45,22,25,225,145,73,165,56,61,179,130,167,45,226,49,11,59,34,40,148,203,88,42,130,64,80,40,87,8,
+  35,81,220,154,130,138,199,162,95,96,77,127,111,147,12,215,72,51,66,185,82,37,145,137,226,169,0,169,163,40,165,9,
+  252,0,167,238,160,1,211,50,26,174,99,203,196,178,77,102,167,230,88,58,62,172,110,28,159,154,217,21,232,39,92,248,
+  178,5,143,215,97,241,167,32,188,254,91,140,127,23,240,251,192,31,127,7,0,228,0,237,32,111,4,99,14,98,2,186,
+  227,176,197,130,125,62,236,27,131,77,51,189,237,125,153,15,190,51,115,195,207,127,212,216,186,125,23,70,83,95,80,65,
+  0,74,54,10,226,153,54,10,137,175,13,164,110,120,35,5,96,104,11,180,68,160,154,161,124,32,154,142,109,45,20,129,
+  14,49,5,248,213,42,94,169,220,56,44,148,193,233,177,9,61,252,194,201,202,200,195,207,80,123,230,233,200,186,170,195,
+  0,200,76,163,118,40,2,124,13,117,5,66,66,135,161,180,208,37,39,161,160,104,129,31,64,181,8,197,86,168,215,165,
+  168,215,162,150,155,142,219,33,125,113,162,90,32,164,226,191,41,197,127,190,100,204,126,189,73,25,156,164,81,35,91,54,
+  249,33,221,244,250,25,175,2,248,188,37,1,232,34,225,252,116,39,179,121,155,168,245,218,114,245,194,247,89,90,191,129,
+  71,222,243,94,222,255,133,207,97,122,223,127,160,226,116,99,114,235,183,69,140,243,149,76,36,107,44,57,254,12,148,31,
+  245,116,240,95,119,119,232,61,55,244,178,248,27,79,179,59,212,76,54,22,208,121,91,235,207,163,25,5,174,15,131,242,
+  109,245,96,62,190,41,99,81,171,135,24,122,5,51,63,140,162,225,110,87,194,66,9,19,161,5,82,11,180,240,17,218,
+  68,8,65,173,86,197,114,3,130,202,12,71,31,125,132,103,158,62,195,228,226,89,174,189,102,39,243,163,179,44,44,58,
+  184,70,141,88,58,193,237,119,126,152,193,182,36,167,206,255,22,95,123,246,40,31,190,114,63,189,182,196,48,235,200,116,
+  146,142,238,54,108,83,19,6,18,47,52,136,199,108,10,217,28,190,180,193,142,35,92,31,25,72,156,176,74,177,90,38,
+  147,140,83,116,92,76,59,78,88,115,80,97,128,52,76,234,78,195,68,137,68,34,56,110,13,105,68,16,194,0,67,99,
+  219,54,42,12,56,117,126,146,53,35,147,185,125,240,100,21,190,160,225,73,15,150,254,13,132,179,205,77,242,74,114,35,
+  112,217,37,218,231,43,29,16,186,249,249,24,68,90,27,7,126,79,0,107,34,176,211,135,253,39,96,199,200,64,79,223,
+  192,143,191,47,254,158,143,252,132,216,186,101,55,160,80,65,133,80,7,200,166,9,21,24,33,146,8,50,144,72,84,67,
+  213,69,19,52,1,72,42,137,144,52,52,30,169,80,104,20,18,133,1,72,44,1,213,252,10,203,179,179,172,100,151,56,
+  119,118,148,211,195,227,12,143,78,213,219,202,245,177,141,90,119,237,187,246,42,203,72,197,140,138,97,136,98,224,235,48,
+  244,162,241,233,169,181,153,66,61,93,23,166,23,56,245,48,146,205,151,109,215,95,1,42,17,168,75,200,9,88,12,96,
+  209,132,145,13,112,54,168,122,43,39,191,58,170,73,88,252,247,167,166,249,167,135,39,94,98,110,5,151,104,147,226,18,
+  109,231,213,38,167,205,183,34,248,252,227,83,175,15,248,92,16,203,113,56,53,180,1,235,3,239,228,125,99,15,17,126,
+  31,173,240,140,230,98,223,234,43,189,231,150,1,103,204,85,110,252,217,69,253,216,92,153,251,128,63,245,5,110,41,160,
+  227,182,53,24,15,76,243,44,40,3,150,251,160,232,151,189,37,13,45,201,124,241,64,97,50,223,174,135,6,8,98,53,
+  100,52,131,54,35,40,229,129,110,122,80,154,43,37,208,26,17,154,52,104,93,3,59,146,68,219,53,122,12,77,245,252,
+  189,204,62,241,53,198,202,6,27,182,237,230,142,159,186,129,92,161,64,164,213,192,110,171,224,215,231,217,177,115,31,215,
+  238,189,10,127,41,135,44,251,120,105,151,157,123,55,49,249,213,51,244,39,210,8,83,80,173,215,73,71,226,44,101,107,
+  212,125,3,43,30,37,112,93,16,62,174,112,49,66,73,110,197,193,232,76,128,168,147,208,30,85,101,82,114,5,118,84,
+  129,23,16,134,62,177,72,28,223,53,209,166,66,168,0,180,66,74,3,97,180,147,61,123,154,235,97,198,133,167,52,60,
+  187,17,22,127,20,212,201,239,194,109,14,32,163,38,36,44,4,166,64,52,74,227,185,192,14,136,182,195,218,0,174,181,
+  224,114,9,67,71,97,232,204,186,129,193,117,31,249,96,236,23,126,242,67,108,24,218,222,216,154,170,4,90,32,37,104,
+  109,162,164,70,8,129,208,2,161,53,200,176,89,112,71,160,181,70,135,10,132,64,27,18,33,100,67,79,17,23,66,221,
+  4,66,55,12,191,153,185,5,22,230,231,177,165,36,217,219,207,149,107,214,115,203,123,83,36,146,201,184,29,139,239,209,
+  134,13,72,12,36,47,50,72,46,245,114,177,197,171,214,90,10,117,23,191,82,68,45,206,18,22,115,202,169,213,241,207,
+  77,121,198,200,100,85,79,206,151,39,78,141,228,218,43,149,175,217,53,111,101,33,30,47,236,94,219,17,78,254,221,243,
+  252,237,51,211,111,88,33,254,183,12,0,73,169,169,56,6,255,244,116,199,235,10,62,23,36,230,212,57,219,191,158,23,
+  222,21,103,207,224,10,142,255,189,15,93,10,184,29,112,37,152,83,85,109,28,93,126,105,43,24,5,65,103,12,131,139,
+  33,105,234,65,112,175,145,98,73,134,122,36,153,11,102,103,78,206,175,223,179,101,139,97,184,14,66,216,104,105,54,106,
+  249,43,208,170,233,71,17,128,144,104,45,176,8,27,175,197,146,208,35,80,78,133,117,25,205,239,255,230,79,243,223,63,
+  241,0,95,254,155,47,208,189,126,45,45,237,25,122,58,225,206,159,234,32,48,210,140,29,127,134,31,185,170,157,167,14,
+  173,176,84,14,249,233,219,110,66,21,171,104,39,32,154,49,240,202,37,226,182,73,169,90,163,84,171,34,236,8,126,189,
+  78,24,134,168,208,199,50,13,132,18,184,158,71,161,84,35,21,181,9,125,15,41,44,252,80,96,95,168,146,41,26,62,
+  22,199,181,65,123,196,164,66,40,27,33,5,149,208,35,117,126,182,218,11,163,46,156,201,64,182,23,212,210,165,135,68,
+  243,247,191,118,52,84,158,93,196,88,168,49,125,182,160,83,19,53,158,7,43,14,173,29,176,14,184,70,194,109,163,176,
+  251,112,103,111,91,219,135,223,17,253,165,255,227,167,216,178,110,91,99,187,171,202,139,228,178,80,104,125,1,232,27,222,
+  43,137,113,81,235,65,92,40,252,41,144,23,163,99,197,37,241,61,141,185,185,168,81,104,77,107,75,43,61,221,61,205,
+  218,217,151,178,136,23,156,242,206,139,196,182,208,132,190,143,87,173,18,120,46,202,115,233,242,60,252,132,129,183,113,29,
+  138,77,50,97,69,176,238,136,68,199,231,115,209,111,252,243,231,218,35,217,201,68,119,133,152,6,217,107,74,230,239,59,
+  71,223,201,197,215,45,23,238,45,13,64,2,248,226,225,54,166,87,108,98,182,122,253,239,47,64,187,138,175,62,209,133,
+  216,235,179,99,160,72,16,126,111,10,169,110,146,156,134,37,209,190,250,166,217,215,52,194,231,1,54,55,189,12,247,1,
+  251,108,195,73,251,225,116,38,208,163,39,159,24,222,51,122,203,158,214,13,17,137,112,125,116,52,104,156,194,77,125,89,
+  8,217,44,89,39,80,8,164,14,145,40,28,105,160,34,73,100,196,198,8,3,54,182,69,249,179,223,253,8,95,253,198,
+  211,252,197,23,158,225,204,211,19,108,191,233,74,118,245,95,137,191,178,64,75,238,8,190,214,28,159,154,226,231,255,237,
+  47,176,53,99,240,197,47,61,65,213,138,96,248,14,9,45,176,60,159,217,66,141,64,130,170,151,137,70,19,248,42,36,
+  12,66,108,9,210,48,208,90,81,171,59,180,36,91,0,141,129,129,235,213,73,136,20,74,132,23,249,49,47,208,8,35,
+  36,105,106,162,86,156,72,92,82,172,102,105,203,22,139,2,198,108,152,93,6,239,31,128,247,210,136,208,213,77,222,226,
+  159,128,31,5,254,27,141,246,58,175,36,243,127,113,138,243,13,173,199,254,8,36,21,244,107,216,103,194,149,57,56,240,
+  92,38,186,185,252,182,235,91,126,254,119,255,31,118,108,219,117,209,35,39,116,136,16,47,166,96,94,244,226,11,209,124,
+  253,197,72,33,33,26,154,143,66,53,56,33,33,64,74,228,203,154,117,138,38,128,9,209,0,166,104,44,142,16,16,40,
+  191,241,94,193,37,224,3,82,27,160,20,129,23,80,43,22,168,151,75,104,223,107,120,205,164,164,174,53,194,87,68,34,
+  16,8,139,225,137,37,142,220,255,117,74,95,255,146,187,113,98,101,166,99,185,244,164,47,197,115,166,214,121,103,169,34,
+  70,191,112,134,4,112,249,37,252,100,0,180,93,98,154,138,75,158,64,252,48,3,144,210,130,170,39,177,140,55,174,107,
+  147,20,154,32,148,60,63,209,198,206,129,2,175,85,184,86,212,146,252,250,87,199,249,23,26,245,97,46,40,235,27,220,
+  208,191,75,50,231,193,153,158,137,229,153,195,143,30,107,25,186,243,42,33,170,69,140,116,10,161,26,17,221,90,92,136,
+  49,105,28,195,18,8,165,198,71,55,204,17,213,56,173,165,246,9,253,10,66,86,121,247,157,251,184,245,246,203,152,171,
+  175,161,84,5,127,101,154,72,249,56,9,237,240,201,167,207,179,239,134,155,216,217,223,78,121,110,154,179,217,60,42,106,
+  96,213,29,66,219,68,116,245,241,182,91,15,96,164,18,4,149,10,231,207,141,112,242,228,41,108,211,38,240,124,44,219,
+  38,150,136,19,6,30,149,154,75,50,150,64,185,1,74,131,235,42,180,18,132,126,8,177,0,95,5,68,13,3,33,52,
+  133,124,158,190,150,30,150,103,150,216,228,185,89,5,99,38,228,74,160,254,170,65,24,95,228,39,198,129,71,129,39,155,
+  174,226,87,138,229,105,3,214,129,156,109,100,157,175,51,96,155,13,187,43,112,224,217,72,100,187,250,192,29,157,55,124,
+  244,253,198,222,125,7,104,111,25,36,84,46,26,7,137,66,72,235,69,187,182,233,78,191,0,60,151,174,72,253,34,50,
+  33,164,184,228,35,226,21,15,213,11,181,81,181,166,193,9,105,133,209,220,246,141,178,133,205,164,92,21,226,59,37,220,
+  90,21,183,90,195,119,29,164,166,241,94,173,145,82,225,27,30,190,7,163,39,199,56,252,181,7,116,237,193,135,217,60,
+  189,236,109,119,152,83,232,99,190,33,206,34,113,3,45,6,129,150,13,232,218,10,184,127,4,161,120,233,183,99,17,194,
+  12,184,123,193,179,32,12,64,249,47,139,169,250,161,35,161,141,55,65,62,171,16,188,230,32,24,26,130,143,20,61,238,
+  184,100,146,21,208,171,180,174,41,86,2,33,142,116,184,122,199,210,61,71,187,135,247,108,236,218,220,219,134,84,33,88,
+  54,66,169,139,39,150,210,205,152,90,13,218,104,20,61,147,74,35,84,136,8,131,134,166,36,37,129,80,4,53,133,37,
+  124,54,12,118,34,186,119,146,127,254,211,104,97,242,213,19,101,162,235,54,242,209,95,253,21,152,59,193,76,161,140,87,
+  171,96,187,62,182,109,114,224,174,91,184,249,199,126,134,100,162,163,177,165,66,31,183,84,228,191,253,225,127,229,196,147,
+  135,73,70,163,32,124,148,104,84,223,241,125,240,35,26,69,64,168,66,156,186,79,52,102,33,165,137,105,90,13,86,68,
+  131,198,34,91,152,165,199,238,167,101,116,165,214,171,24,13,27,26,80,229,243,77,183,240,119,218,62,217,111,186,226,255,
+  75,35,182,175,67,192,65,75,112,139,167,217,55,97,152,67,11,183,222,216,187,235,223,124,36,114,227,109,183,17,179,227,
+  64,149,144,21,16,2,67,91,13,186,70,7,23,13,189,75,181,150,11,187,86,107,253,178,230,10,151,232,12,23,114,43,
+  46,1,41,33,154,237,203,47,124,166,169,237,8,33,64,105,132,214,104,215,39,112,61,188,106,21,223,119,80,65,13,165,
+  21,82,9,162,182,133,214,18,33,12,234,142,199,244,232,212,202,249,103,158,173,231,30,122,34,33,142,156,74,116,85,125,
+  99,176,57,148,181,198,50,234,36,212,251,129,109,2,28,1,69,9,5,11,106,10,92,1,74,188,148,120,118,4,228,226,
+  176,124,225,189,2,138,187,193,139,64,88,7,21,252,176,1,208,15,131,104,91,162,198,138,236,124,102,129,157,175,240,247,
+  28,212,206,74,206,248,33,15,175,159,173,245,157,251,242,179,215,247,254,252,237,49,103,114,140,193,205,59,81,58,64,43,
+  133,48,26,133,190,80,141,83,212,84,178,1,224,34,36,148,33,161,80,8,37,65,75,164,144,24,202,68,11,77,205,157,
+  33,230,117,147,220,112,5,207,191,112,138,106,172,206,199,126,249,231,177,109,131,122,60,67,49,48,192,243,177,162,54,183,
+  252,196,7,185,254,157,119,83,170,58,100,179,83,8,199,37,101,26,68,186,58,120,255,135,127,132,225,23,78,18,11,37,
+  117,63,192,48,13,148,1,90,11,66,165,9,181,7,66,82,171,55,178,186,209,18,207,13,208,134,194,16,18,165,45,234,
+  8,188,186,75,102,116,54,31,133,17,31,166,11,224,118,2,73,94,204,204,22,52,130,228,254,238,21,180,159,11,81,232,
+  191,14,70,7,116,20,225,74,27,222,181,160,185,102,118,247,214,190,173,255,207,111,37,223,119,247,123,72,68,108,80,121,
+  116,152,3,33,144,58,14,202,108,84,87,150,77,72,191,164,146,187,18,23,186,247,234,139,224,35,94,118,95,160,145,70,
+  113,129,43,186,128,53,66,188,168,246,104,221,12,74,108,2,91,216,32,166,67,207,163,144,93,194,171,214,136,72,3,80,
+  120,74,224,123,138,48,208,100,179,139,12,143,142,177,148,91,97,118,126,145,229,233,133,133,100,32,196,254,116,50,189,115,
+  239,118,77,44,174,114,235,7,68,189,61,99,25,129,209,237,213,85,71,44,212,202,46,231,67,170,101,229,85,92,191,90,
+  169,251,245,252,138,175,114,139,158,44,150,125,233,163,162,26,221,56,154,240,58,97,57,218,0,160,172,1,19,6,140,11,
+  200,234,134,133,155,141,67,97,63,132,23,28,43,122,21,128,222,250,98,8,65,169,30,242,84,197,127,69,3,79,129,78,
+  135,58,107,194,33,19,214,25,79,12,175,27,191,109,231,102,34,17,74,238,41,182,109,223,214,168,193,32,4,58,84,77,
+  30,186,97,138,53,56,135,176,201,75,152,141,214,209,161,192,8,65,201,198,194,143,155,105,130,68,18,17,239,96,243,110,
+  147,3,215,223,128,21,145,248,165,37,100,162,143,147,211,57,252,100,156,15,253,155,95,97,219,21,151,113,242,153,103,9,
+  150,39,57,55,50,130,244,32,25,143,178,249,242,253,244,110,222,75,223,64,55,213,241,5,194,80,225,41,143,132,25,197,
+  196,196,247,61,164,33,16,1,4,190,38,176,66,98,182,133,101,198,240,194,42,49,105,83,117,92,42,218,162,54,187,172,
+  251,242,249,121,224,188,132,229,35,160,206,54,53,160,75,221,232,15,210,136,83,121,185,172,7,210,141,154,201,253,21,56,
+  40,224,206,179,177,216,245,241,95,251,216,192,7,254,237,207,152,189,237,27,208,97,136,242,139,96,248,72,17,111,92,81,
+  104,180,104,128,164,86,118,195,172,21,193,69,176,160,105,46,93,170,25,139,139,252,144,190,200,241,160,117,243,35,47,155,
+  77,253,34,183,115,1,188,164,110,0,22,90,81,171,84,241,195,16,105,155,248,42,100,37,191,130,171,26,190,76,180,192,
+  72,217,108,219,187,157,3,233,20,109,157,93,100,90,90,183,155,182,73,16,58,72,195,215,150,180,69,163,40,137,5,40,
+  67,19,52,41,122,31,240,240,21,56,110,72,165,88,164,146,91,160,90,206,227,187,10,157,247,244,232,249,113,49,49,114,
+  142,147,199,143,121,198,153,243,181,158,98,173,218,129,206,103,96,33,10,75,22,76,73,120,54,132,103,255,35,44,29,132,
+  48,250,61,174,247,215,182,55,60,224,155,175,108,41,26,97,35,42,119,85,94,58,96,66,10,178,17,131,187,191,205,219,
+  254,12,130,43,4,51,30,28,238,172,232,125,39,191,114,120,240,237,191,253,177,88,109,121,153,51,103,207,178,105,203,38,
+  164,33,47,122,107,80,154,64,4,104,209,152,112,137,1,170,113,44,107,173,80,4,104,12,124,105,147,72,116,99,41,1,
+  190,75,71,199,26,148,89,37,12,29,172,84,148,231,30,61,198,11,231,103,249,149,223,252,117,182,238,185,154,165,241,73,
+  142,126,253,97,238,190,121,35,235,46,91,203,200,209,17,138,133,69,178,227,22,189,107,215,178,121,93,31,207,156,62,127,
+  209,235,92,119,234,196,205,24,50,116,73,183,37,41,4,30,166,105,96,26,18,203,50,65,90,136,64,99,73,197,210,242,
+  10,21,97,161,71,243,245,54,152,212,48,62,15,149,71,155,91,217,123,153,137,245,74,43,233,99,192,251,33,150,135,141,
+  6,220,92,135,91,206,174,25,56,184,247,47,255,168,231,250,183,223,10,202,71,5,117,144,117,148,233,131,136,53,202,180,
+  106,141,32,4,35,68,8,137,194,126,9,67,114,193,84,185,148,152,109,240,34,26,201,37,164,180,190,100,94,181,190,120,
+  137,11,36,117,131,211,126,209,12,187,152,34,34,4,241,116,146,88,50,70,168,124,164,212,116,172,29,64,88,241,134,163,
+  1,205,139,81,57,170,121,139,0,180,198,178,98,104,146,194,215,160,117,163,252,170,8,21,130,16,101,149,16,161,137,192,
+  192,68,145,136,106,82,177,22,68,79,95,19,156,2,180,46,136,203,220,27,81,126,137,165,229,37,123,124,100,218,158,56,
+  53,217,50,115,242,201,190,167,78,205,110,159,159,153,11,47,203,174,100,175,242,130,62,95,136,26,90,63,245,52,84,204,
+  239,129,19,186,250,181,4,160,6,248,152,104,241,202,196,77,96,10,204,64,173,130,80,115,172,12,192,52,37,248,138,223,
+  249,219,211,0,252,39,224,237,47,91,232,33,176,9,24,211,212,29,193,112,20,14,103,14,79,110,63,241,232,195,155,111,
+  189,245,38,150,28,147,233,249,60,107,6,50,8,25,34,60,139,128,128,80,106,164,54,208,1,152,90,96,8,133,47,2,
+  66,83,161,5,72,101,96,198,90,32,29,33,20,1,194,20,72,93,69,134,10,204,8,94,16,97,105,185,204,175,253,246,
+  255,197,208,230,54,116,101,30,63,63,131,95,25,103,236,120,129,84,170,131,45,155,182,50,54,55,66,169,94,34,162,53,
+  45,157,173,20,164,75,155,25,69,184,146,80,155,248,202,71,138,16,229,42,44,173,209,134,79,77,185,216,97,28,195,53,
+  208,194,2,17,103,108,101,12,153,233,192,158,95,40,70,97,44,132,57,19,188,193,151,141,71,4,248,228,43,152,94,31,
+  3,254,45,68,231,96,83,4,238,40,192,93,243,219,55,236,184,227,31,254,170,109,211,222,3,40,85,110,212,163,110,210,
+  169,66,73,180,16,141,252,57,104,166,138,54,204,167,70,113,29,129,18,242,165,4,242,37,218,80,35,133,228,165,38,21,
+  82,188,196,116,19,205,247,93,228,122,208,223,212,148,243,2,191,36,45,11,129,141,41,227,23,175,161,155,238,251,134,229,
+  118,137,215,243,130,141,215,44,183,34,132,110,130,84,67,147,19,6,141,239,170,26,190,46,37,53,161,50,26,26,93,104,
+  225,185,43,56,37,7,191,80,196,113,243,132,74,161,101,0,66,178,113,168,159,221,59,118,224,127,232,78,113,244,244,130,
+  248,252,23,191,36,191,241,207,159,235,219,148,203,109,237,210,97,183,130,72,47,84,206,164,187,56,157,238,194,250,46,58,
+  28,191,102,0,244,175,129,207,139,32,36,127,168,65,72,235,198,26,141,26,130,34,48,50,87,102,231,207,220,207,169,137,
+  70,193,203,141,52,90,198,116,188,194,68,41,80,207,106,22,44,120,161,187,194,222,209,175,30,233,155,218,190,33,217,223,
+  189,150,176,179,11,45,42,24,161,196,23,17,164,12,145,218,65,41,19,141,68,73,3,36,72,97,98,162,145,26,234,42,
+  70,164,109,29,218,72,17,18,109,20,118,11,125,192,68,135,54,74,187,188,237,157,183,99,10,141,90,153,99,250,201,71,
+  153,57,245,12,111,223,218,66,107,68,50,90,158,103,161,146,96,253,198,253,28,25,27,195,72,182,146,74,119,17,53,50,
+  248,218,197,51,66,2,45,64,248,16,106,44,71,18,145,113,194,208,165,90,211,84,188,16,171,37,192,54,5,185,170,207,
+  249,108,133,93,137,20,125,149,106,46,132,169,40,172,168,102,224,97,178,185,198,50,205,177,41,188,108,108,126,17,248,101,
+  136,102,97,115,12,238,152,129,119,46,222,124,213,238,187,255,231,31,37,215,110,217,76,232,151,144,82,54,188,84,13,134,
+  254,130,241,132,190,36,81,245,34,81,252,175,122,59,5,82,128,80,47,227,116,154,38,154,104,106,57,23,201,231,75,212,
+  163,23,95,19,40,173,26,102,156,108,0,141,210,186,17,30,213,52,238,68,211,101,166,185,96,214,93,2,110,23,59,125,
+  53,126,139,230,231,27,32,212,128,35,37,18,8,17,34,133,66,234,8,110,177,68,41,55,131,235,44,162,194,70,235,116,
+  221,76,71,141,68,50,8,105,48,59,151,227,216,225,167,56,250,196,115,228,15,31,14,183,100,151,10,183,132,225,84,43,
+  234,217,16,166,5,184,115,210,224,233,76,47,75,118,20,227,187,220,203,230,171,15,62,226,59,2,159,183,44,8,105,144,
+  82,96,197,76,172,240,251,44,80,105,75,44,41,248,171,165,58,127,12,224,134,23,193,135,75,52,158,11,114,164,233,74,
+  94,75,163,0,205,54,168,77,195,25,19,158,106,63,182,188,254,248,163,231,246,246,191,175,95,202,176,68,104,24,16,74,
+  180,89,65,134,38,82,69,81,210,71,75,8,80,205,69,220,168,19,44,125,144,169,86,204,206,126,132,180,48,0,77,72,
+  104,40,12,173,144,8,108,161,17,202,3,41,240,234,30,231,78,62,207,80,74,146,136,36,168,135,2,179,189,141,84,95,
+  39,83,243,179,172,219,119,57,164,251,41,151,42,196,81,132,36,208,162,134,208,149,198,169,110,219,84,106,5,236,84,26,
+  180,198,112,53,1,18,199,171,147,74,38,89,56,63,227,222,136,161,188,92,33,154,168,57,57,96,97,9,106,91,175,238,
+  230,137,159,218,2,213,0,210,22,249,71,231,248,155,191,31,249,38,205,231,23,4,177,5,205,198,40,220,62,13,119,79,
+  255,216,123,15,252,212,255,250,147,72,71,50,142,242,29,164,97,18,170,0,169,5,82,24,232,70,78,250,75,72,226,11,
+  224,163,255,213,67,228,82,80,225,18,142,232,69,13,233,155,61,100,47,242,68,23,249,34,241,210,251,138,151,93,227,69,
+  222,232,165,69,244,245,75,72,111,31,173,26,209,214,186,25,230,173,208,72,83,54,25,251,16,130,16,175,190,76,117,165,
+  68,173,84,68,251,145,134,6,108,6,104,43,133,105,25,56,78,192,209,199,159,231,248,253,79,233,236,227,207,184,169,165,
+  197,202,94,29,228,214,192,76,2,206,134,112,50,128,19,81,56,87,131,250,54,33,249,188,48,176,3,255,187,46,217,250,
+  170,1,144,18,160,132,73,104,200,239,186,4,235,91,9,132,44,75,82,174,133,124,249,177,57,180,254,254,34,33,226,17,
+  131,191,252,202,20,255,114,50,247,29,189,255,15,128,231,155,38,199,85,64,23,168,17,88,72,192,179,173,138,109,35,15,
+  28,91,179,124,251,21,29,3,177,40,53,203,192,51,92,162,4,160,147,40,34,23,205,12,68,67,77,215,90,19,72,192,
+  22,68,187,251,17,102,10,2,129,209,12,156,107,228,41,53,242,201,132,50,192,148,84,189,18,86,58,65,203,250,181,100,
+  23,134,9,170,33,45,109,45,12,14,12,16,90,25,18,91,214,147,216,178,155,186,87,229,212,240,9,132,165,17,210,199,
+  10,67,162,50,141,210,49,20,1,142,237,81,244,202,72,25,65,38,45,180,97,161,2,143,186,23,232,245,231,167,117,183,
+  143,253,180,239,122,17,205,18,176,92,4,239,100,87,140,93,215,246,64,45,96,97,161,198,244,179,217,151,228,120,125,12,
+  248,37,136,102,53,155,162,112,251,18,220,189,252,145,247,31,248,217,143,255,69,36,99,27,232,192,105,144,202,8,164,52,
+  27,0,163,245,75,65,231,82,96,121,249,38,255,22,135,234,203,65,72,55,181,157,11,17,208,23,92,246,226,18,144,186,
+  8,52,151,120,194,94,84,142,244,55,1,20,90,55,211,60,94,10,112,23,238,117,33,250,186,81,73,160,25,151,45,27,
+  166,152,20,33,161,239,226,87,203,148,86,86,168,87,138,232,192,66,26,62,210,118,49,173,22,16,113,150,23,151,57,249,
+  216,51,122,226,95,190,236,196,142,159,92,217,164,84,238,58,88,176,97,76,193,48,48,225,55,126,230,4,20,43,141,96,
+  126,173,208,24,250,66,100,208,119,169,1,133,230,171,83,130,61,16,223,95,144,206,91,1,132,76,195,32,84,1,127,250,
+  233,251,57,55,49,254,186,223,63,74,163,92,194,245,192,205,192,127,111,188,230,8,24,213,112,168,115,108,101,231,225,199,
+  143,180,245,127,232,46,105,251,80,55,163,104,21,160,241,209,70,216,136,105,1,12,45,65,105,148,33,168,98,17,105,111,
+  67,180,182,17,202,176,113,34,53,131,25,181,8,9,180,198,212,141,2,21,210,84,60,248,229,71,57,176,251,74,174,120,
+  207,207,224,44,157,34,168,186,152,210,196,136,8,140,88,43,178,109,51,136,56,95,248,235,191,101,252,228,56,41,195,66,
+  227,16,183,163,120,142,34,12,11,152,102,140,152,145,198,11,138,88,145,58,166,78,17,170,8,102,44,193,252,217,97,125,
+  101,177,110,22,34,166,209,234,82,54,149,88,240,208,57,27,252,142,71,231,248,210,135,30,192,2,126,63,231,242,239,231,
+  107,23,83,47,126,190,201,249,204,195,230,8,220,145,131,187,202,63,251,35,251,127,228,47,254,75,52,35,3,180,47,26,
+  109,254,154,192,162,155,224,160,105,132,41,188,28,92,132,248,230,141,46,148,254,166,224,195,11,57,237,66,235,151,106,42,
+  223,230,122,92,226,134,191,232,194,215,47,94,77,41,133,144,47,166,105,232,151,152,117,77,83,238,2,184,73,9,234,66,
+  90,136,213,236,117,214,76,111,65,131,87,167,88,204,81,45,21,209,117,69,160,52,194,210,216,73,3,100,7,229,130,199,
+  248,179,99,156,252,250,87,66,241,248,179,229,182,133,133,236,229,48,18,131,51,26,198,53,204,186,48,29,194,130,130,82,
+  28,234,62,4,223,0,222,71,163,204,201,247,181,167,180,120,243,116,171,184,0,66,198,155,22,124,66,254,247,23,190,240,
+  134,128,207,75,198,9,184,31,184,6,248,91,96,3,228,115,112,188,21,142,156,249,210,161,141,35,55,95,213,185,185,179,
+  27,25,104,124,67,99,74,15,41,20,74,54,226,130,100,8,82,24,248,158,137,209,210,65,180,123,35,202,202,160,49,27,
+  166,25,141,124,178,6,51,18,130,82,72,21,131,64,176,105,176,131,99,135,238,199,176,174,165,181,117,39,86,107,2,31,
+  23,63,212,232,64,50,127,122,156,39,238,125,152,67,247,63,74,90,138,70,175,119,51,66,32,162,104,211,196,240,52,182,
+  229,163,85,21,233,196,176,68,12,175,150,35,18,143,82,168,197,25,152,92,168,119,67,165,40,85,116,200,146,185,0,61,
+  159,132,210,147,160,254,40,239,145,202,123,204,240,98,35,116,23,248,8,240,107,16,93,130,205,86,3,124,238,142,255,230,
+  175,238,187,245,255,253,141,120,4,80,126,163,220,169,104,166,168,92,64,16,45,154,197,183,4,8,169,95,22,11,252,82,
+  142,231,229,4,179,184,84,59,121,41,17,211,244,84,125,11,210,79,136,70,116,243,203,194,8,26,227,254,82,79,219,75,
+  52,160,230,139,2,113,193,94,123,17,188,46,128,83,216,224,134,132,14,9,61,135,122,169,68,113,101,137,192,119,209,161,
+  143,25,49,136,91,3,120,161,102,230,204,48,211,15,254,189,95,123,228,201,146,30,158,91,94,239,185,11,29,48,35,96,
+  84,193,49,13,231,12,200,22,161,166,193,217,6,193,68,147,236,183,105,212,20,50,249,254,115,1,222,116,113,64,129,217,
+  200,97,122,121,176,177,16,224,171,111,50,165,95,23,17,134,65,94,133,124,234,11,95,96,250,117,6,31,69,35,144,46,
+  70,163,44,232,102,26,233,25,208,232,125,53,3,236,2,47,7,227,10,14,245,143,230,183,63,245,215,247,93,179,230,247,
+  126,206,138,6,117,234,129,129,86,54,134,80,4,194,71,107,129,106,146,158,166,105,16,73,165,27,190,36,175,142,33,156,
+  198,30,242,66,68,224,161,107,101,66,191,134,87,201,33,162,109,196,122,183,177,125,251,126,122,51,41,102,39,158,161,112,
+  206,35,32,206,163,79,78,48,63,179,132,196,163,180,180,140,80,62,137,164,69,72,140,74,13,100,110,89,235,90,41,52,
+  106,126,32,67,165,137,72,115,70,154,150,159,106,161,175,175,149,195,195,139,236,223,179,155,244,153,17,239,186,154,55,18,
+  192,233,152,169,83,25,211,204,107,130,19,75,80,218,14,252,51,141,158,84,191,220,228,198,42,192,30,16,183,65,44,11,
+  27,5,220,177,40,197,187,210,127,240,127,31,184,241,215,255,157,109,170,58,218,23,40,67,130,244,154,113,80,13,243,228,
+  98,154,213,5,66,247,21,192,231,82,205,67,136,70,106,197,203,65,225,165,154,211,139,92,207,43,154,109,151,182,108,121,
+  217,53,190,245,53,95,38,82,54,92,250,151,106,79,82,54,146,97,195,128,192,173,83,40,229,169,22,11,232,48,68,106,
+  136,153,49,140,68,27,185,21,143,227,79,62,194,210,253,159,173,89,79,189,176,216,86,114,38,58,27,241,85,35,192,68,
+  8,115,10,22,53,100,79,64,165,27,194,103,129,187,155,196,127,132,239,188,27,170,6,2,33,47,86,87,12,223,42,0,
+  4,141,196,148,80,188,20,105,76,169,185,98,107,137,123,15,183,163,20,223,115,251,157,239,158,219,146,180,6,1,43,95,
+  254,34,91,38,198,217,247,58,220,83,2,75,128,182,164,204,133,58,122,94,233,164,103,10,243,46,41,195,119,5,42,20,
+  13,247,6,18,168,131,154,6,95,75,81,87,112,44,173,244,99,181,47,62,211,250,229,142,142,109,215,255,236,221,118,79,
+  74,53,74,154,41,129,173,3,66,35,68,94,112,211,74,129,242,11,184,5,141,33,163,16,4,44,229,114,84,10,121,234,
+  217,101,130,252,50,125,109,49,90,50,146,32,221,65,208,222,142,21,73,144,236,105,103,125,122,27,102,118,25,137,226,176,
+  59,195,202,228,36,137,100,138,54,43,202,178,142,113,106,122,130,182,153,69,255,250,124,57,59,224,7,11,113,33,22,163,
+  176,108,8,173,2,33,187,39,165,222,248,181,232,194,154,229,32,176,215,72,35,156,93,92,52,110,155,95,206,103,224,89,
+  15,238,71,136,168,237,135,69,109,136,99,29,154,202,101,77,239,212,85,52,114,194,135,128,110,144,46,180,120,176,85,195,
+  205,5,203,184,115,224,79,254,223,3,7,127,241,151,237,80,23,9,67,11,41,45,132,40,53,245,198,104,195,236,121,169,
+  114,211,124,77,55,184,147,151,113,65,151,186,217,47,104,27,175,8,16,23,52,155,75,226,122,94,66,66,211,136,5,122,
+  185,105,166,47,189,230,183,57,92,47,130,84,211,92,212,77,206,220,144,141,64,2,167,84,196,205,47,83,169,148,1,133,
+  105,128,29,143,17,10,155,217,185,44,195,79,62,64,238,159,254,177,212,121,98,106,122,72,233,51,86,131,72,62,235,195,
+  152,104,244,124,47,246,129,51,6,126,28,244,87,163,49,18,157,221,120,90,83,93,156,67,124,71,13,59,53,90,52,146,
+  159,109,173,25,170,23,41,211,104,42,208,253,45,64,232,45,19,9,29,40,193,238,161,42,2,248,234,115,237,160,244,235,
+  2,66,129,109,33,142,156,228,87,199,199,95,183,78,1,178,169,234,206,24,50,86,86,225,86,83,176,91,6,186,37,36,
+  244,116,179,157,184,209,212,142,44,8,60,40,10,88,70,32,3,152,239,134,115,185,191,190,39,253,249,167,158,239,237,184,
+  251,230,72,98,221,58,145,140,42,210,26,173,48,133,111,134,184,161,135,225,88,218,43,141,170,108,181,196,204,236,10,142,
+  17,149,55,92,153,22,29,122,137,184,15,201,168,141,45,91,9,172,110,66,105,160,52,120,118,10,203,52,48,34,73,252,
+  232,0,166,91,162,119,211,54,156,51,179,36,13,155,66,96,48,63,124,42,188,241,252,228,242,21,138,145,36,28,11,225,
+  180,175,245,148,7,203,74,163,109,84,255,166,144,3,63,175,195,131,103,142,157,221,184,54,157,202,220,95,25,201,108,243,
+  194,115,30,60,99,192,161,182,254,164,173,114,94,205,174,135,185,205,126,35,15,242,62,224,134,102,120,194,143,131,84,208,
+  41,225,50,1,111,91,138,152,215,117,253,241,239,238,184,252,23,127,222,86,170,130,129,68,75,5,194,71,72,187,225,48,
+  208,47,166,79,188,4,129,180,108,242,42,250,197,236,214,75,114,192,47,132,254,93,40,167,193,203,226,12,47,18,196,23,
+  254,205,203,210,45,46,209,166,46,37,182,95,9,232,46,60,128,66,94,124,14,217,4,64,133,68,233,16,83,138,6,177,
+  236,186,84,107,53,202,165,50,65,181,78,52,128,84,50,130,138,155,20,29,201,169,211,211,76,220,123,79,24,60,240,245,
+  98,215,88,118,118,87,168,207,72,120,193,131,163,65,35,177,55,107,65,117,26,252,253,52,226,203,114,141,67,141,13,169,
+  12,195,137,164,80,82,234,149,74,25,163,176,194,203,113,59,108,174,85,129,192,23,18,87,154,36,125,135,117,229,69,226,
+  245,18,31,240,29,30,66,211,10,220,250,86,210,128,190,149,56,190,100,215,80,35,224,254,245,0,33,37,4,237,142,195,
+  214,231,15,115,150,215,183,102,74,40,132,136,43,221,166,67,125,205,68,103,199,135,229,64,111,111,91,189,86,243,157,122,
+  232,170,0,63,187,18,132,245,64,73,8,19,80,76,42,157,141,66,77,66,84,64,123,23,120,45,167,231,157,249,211,255,
+  32,103,26,113,159,165,184,166,12,212,155,165,233,49,192,182,33,101,64,107,31,68,134,219,82,97,251,13,63,101,173,73,
+  116,136,208,55,49,77,129,157,105,67,68,18,248,178,145,48,170,149,9,97,163,57,158,145,178,32,30,101,112,219,110,110,
+  215,81,148,107,114,239,95,126,42,120,207,240,228,249,205,240,148,3,79,213,225,152,11,211,157,141,234,124,110,69,32,52,
+  156,117,53,195,118,160,94,216,11,91,188,98,105,207,59,90,205,206,104,160,190,161,224,249,0,22,91,93,41,242,131,105,
+  181,101,155,17,164,29,197,194,209,101,206,185,33,155,27,156,151,72,65,139,223,72,173,120,239,25,219,184,105,211,159,252,
+  222,154,235,62,246,75,82,133,85,208,18,100,179,96,24,97,83,49,49,26,69,249,95,209,181,45,154,193,123,92,244,40,
+  137,87,40,179,113,177,20,199,43,104,63,23,189,102,23,180,156,151,113,5,175,164,53,105,253,114,127,241,37,247,19,23,
+  32,175,17,115,45,180,194,192,71,5,62,181,178,131,91,171,18,184,46,6,146,184,105,163,91,82,20,203,14,211,35,243,
+  156,121,246,176,94,254,198,131,161,56,123,182,178,109,185,54,218,14,39,128,19,202,146,39,156,64,141,36,52,75,75,80,
+  63,11,250,61,52,42,116,206,211,136,171,26,107,237,224,241,84,11,37,41,177,131,64,187,166,201,5,191,182,201,133,72,
+  250,6,248,164,128,127,0,126,58,244,185,166,48,203,110,223,229,164,87,165,30,54,180,37,131,75,139,137,252,0,0,208,
+  235,13,66,17,219,230,75,95,249,50,255,146,91,126,93,137,241,58,240,81,173,217,233,135,241,10,172,217,248,177,119,110,
+  221,253,159,126,51,173,242,53,60,215,197,247,2,242,75,57,10,75,89,150,167,23,244,194,233,179,106,244,204,176,151,31,
+  159,13,168,212,84,111,161,236,183,57,129,104,7,107,109,131,52,116,149,38,231,193,148,110,180,127,154,145,141,212,163,245,
+  6,236,209,144,142,128,25,89,41,135,75,167,199,213,134,43,182,26,90,134,152,137,52,210,238,110,198,13,129,161,84,163,
+  22,22,70,115,163,74,2,12,182,237,223,71,199,166,237,156,56,57,74,223,216,112,105,3,60,235,192,191,120,112,164,31,
+  86,218,193,171,209,136,95,42,104,248,61,40,222,13,213,101,152,78,195,17,17,114,40,150,87,41,87,235,113,11,198,239,
+  7,255,151,198,10,180,188,127,29,173,255,237,26,62,254,63,78,210,255,236,34,9,160,3,100,26,90,3,216,39,225,142,
+  115,173,137,155,7,254,231,31,174,189,233,71,62,140,14,43,47,70,36,95,0,11,117,129,39,17,77,160,145,223,12,16,
+  77,240,81,77,19,234,149,57,152,198,86,18,151,16,216,47,183,192,190,213,78,123,49,243,253,165,87,187,96,71,189,36,
+  53,227,194,103,84,216,12,60,84,16,134,4,245,26,94,181,138,235,120,184,174,143,235,120,148,138,21,38,39,102,57,113,
+  242,44,249,145,145,124,109,108,216,88,51,189,16,235,207,215,228,53,224,90,48,229,55,0,253,89,97,136,83,102,204,156,
+  147,213,32,31,13,149,235,210,200,20,27,107,2,201,87,104,116,202,8,34,49,38,146,25,153,9,3,21,85,10,91,11,
+  30,235,236,71,6,138,71,42,69,190,4,124,148,70,221,165,5,224,243,13,109,148,27,74,139,244,53,189,180,21,190,243,
+  180,140,183,100,50,234,5,16,18,2,238,57,244,218,128,144,101,154,204,205,207,243,240,217,179,175,122,47,164,239,68,110,
+  0,246,104,68,8,102,44,217,47,147,244,161,50,85,132,104,20,62,239,93,115,177,129,138,0,109,184,97,57,182,148,155,
+  167,84,46,48,55,57,195,212,145,243,250,240,225,243,186,120,110,152,182,220,124,108,112,41,223,209,227,40,47,2,217,16,
+  106,33,152,6,164,198,132,104,31,110,105,137,22,93,47,92,87,171,230,90,243,229,20,200,132,52,162,200,148,133,107,229,
+  81,50,142,150,233,70,65,117,45,64,70,16,82,52,220,189,97,163,240,86,119,119,130,175,252,253,255,98,125,205,91,84,
+  112,220,133,227,253,176,176,17,152,4,18,23,52,187,38,121,158,131,224,48,20,63,0,101,11,22,203,161,50,214,128,251,
+  36,184,127,0,252,12,240,92,214,225,127,254,151,163,252,233,159,159,228,243,192,26,176,108,232,146,112,64,195,237,165,76,
+  250,166,171,254,254,207,7,118,220,245,126,130,160,210,228,182,196,69,23,117,131,179,109,186,219,149,122,17,124,94,142,28,
+  77,32,144,151,124,238,229,222,39,248,102,207,214,69,254,134,11,37,68,248,166,207,139,75,180,35,165,94,212,172,94,130,
+  87,47,139,148,110,120,220,26,122,170,239,57,84,74,121,220,74,25,252,128,149,149,60,181,186,71,173,238,49,49,51,207,
+  226,66,14,17,181,105,235,235,19,189,169,184,144,221,163,82,31,63,175,231,22,171,34,13,177,8,12,152,224,25,161,110,
+  11,74,94,86,66,182,0,139,253,144,107,129,66,20,106,43,224,183,130,142,0,134,231,97,132,74,186,161,86,82,8,162,
+  129,230,72,189,194,223,185,245,139,49,87,203,52,34,244,79,241,98,70,154,126,153,17,201,15,50,0,93,0,161,157,107,
+  27,154,208,107,1,66,134,97,240,216,225,231,8,85,248,134,124,191,11,147,106,130,206,215,124,237,19,34,195,26,72,147,
+  80,55,203,104,200,11,252,132,194,32,66,95,215,122,6,187,12,118,108,184,18,110,54,133,86,174,88,204,206,49,50,113,
+  46,58,118,236,68,244,208,163,79,182,183,221,247,116,251,246,149,122,175,9,98,12,54,157,123,207,245,131,215,255,226,7,
+  101,101,201,229,228,253,79,166,75,237,129,29,218,26,17,79,224,218,81,180,138,96,5,22,58,149,68,199,163,4,42,96,
+  121,110,129,165,133,121,226,153,86,58,186,218,105,207,100,240,171,121,206,61,244,164,190,22,202,33,20,53,184,6,141,34,
+  97,247,2,31,2,62,69,163,72,124,51,187,9,23,216,10,234,75,80,253,29,224,12,240,80,243,111,21,224,43,143,206,
+  243,196,163,243,252,52,208,11,177,42,12,41,184,90,195,45,243,107,123,174,61,248,169,143,15,108,184,246,122,17,6,43,
+  32,12,228,203,0,230,37,32,112,233,198,208,47,117,155,95,52,161,46,252,214,23,198,95,95,108,22,248,45,61,99,188,
+  88,84,76,124,139,200,233,134,199,170,1,112,250,146,32,67,33,68,3,24,47,137,235,185,16,6,129,144,132,161,71,62,
+  151,35,240,235,24,82,98,196,98,116,13,38,72,181,180,17,73,164,185,222,176,65,92,48,140,68,139,2,74,78,145,133,
+  233,49,157,31,57,23,45,28,25,94,59,251,220,217,94,255,220,240,101,198,212,120,49,94,243,243,169,70,137,141,89,5,
+  147,9,56,239,194,68,2,22,175,129,146,15,117,242,75,238,79,212,202,193,94,26,93,68,222,171,53,89,183,254,138,222,
+  217,239,62,236,240,7,8,128,46,130,208,80,21,165,5,95,123,174,237,85,3,33,211,182,25,93,92,228,216,185,179,111,
+  216,119,107,244,73,64,27,160,23,166,39,148,210,10,67,217,205,8,87,209,108,164,217,104,54,168,181,143,212,38,194,139,
+  162,133,73,64,136,22,43,72,233,209,211,221,70,79,247,219,184,238,138,183,227,124,244,39,204,111,124,250,203,107,206,252,
+  218,239,180,110,207,86,253,197,107,14,36,223,251,27,255,70,182,36,44,18,125,49,214,118,246,198,23,142,62,128,29,109,
+  69,71,99,120,120,216,118,20,75,219,84,133,205,137,211,195,148,11,62,137,136,69,75,58,73,173,94,225,216,209,89,186,
+  210,105,34,169,52,231,102,43,92,15,105,19,54,25,176,105,14,130,105,40,181,53,171,233,253,241,255,199,222,123,199,217,
+  117,149,247,222,223,181,214,46,167,77,239,51,234,93,150,229,38,119,227,130,11,54,166,183,64,2,132,155,158,155,155,114,
+  19,82,222,220,36,55,164,151,123,19,146,144,16,72,66,239,197,16,192,96,3,198,5,92,112,151,44,201,234,189,204,140,
+  166,207,169,187,172,181,222,63,214,62,103,70,178,76,53,224,228,230,240,25,70,26,143,102,206,217,251,236,103,63,207,239,
+  249,21,224,143,178,77,214,141,89,255,166,178,59,234,126,154,70,17,112,67,54,134,126,20,7,94,212,32,156,115,185,92,
+  183,104,184,249,208,170,193,243,174,250,196,191,244,173,190,248,50,108,163,138,240,36,66,52,64,228,78,103,17,47,46,26,
+  103,217,64,157,214,117,180,68,157,139,185,62,207,212,129,137,197,27,119,78,103,55,115,150,85,186,109,117,98,205,85,187,
+  61,189,131,82,226,244,231,213,114,57,51,72,207,167,167,175,223,5,22,26,139,242,218,16,129,223,250,54,99,156,10,222,
+  10,39,129,80,214,208,233,123,116,174,217,36,88,123,129,224,86,29,164,54,9,166,166,231,75,227,71,78,244,207,239,219,
+  97,15,222,247,96,90,127,124,71,173,180,125,247,100,123,61,62,90,114,145,205,135,44,28,247,225,96,193,218,221,126,163,
+  54,125,14,152,19,60,83,103,247,92,63,254,195,251,1,53,98,201,121,43,29,31,211,21,33,103,96,255,61,111,189,124,
+  159,32,142,89,121,223,189,252,182,214,92,147,157,4,153,93,32,63,140,77,152,118,107,102,155,56,70,66,67,237,60,80,
+  179,141,90,135,80,113,166,55,148,160,20,88,135,232,42,171,176,82,96,165,118,30,54,217,165,97,17,104,93,67,232,58,
+  200,54,124,227,113,205,45,151,240,15,95,190,176,112,223,3,59,226,107,126,243,141,254,72,103,137,100,190,1,185,10,51,
+  149,105,82,145,71,149,58,192,179,104,35,25,159,52,140,87,38,136,139,9,253,171,206,103,243,134,165,132,62,64,140,65,
+  161,141,71,101,106,146,131,251,15,226,13,15,138,79,31,216,191,244,245,85,115,99,55,248,17,220,187,28,182,141,192,88,
+  12,177,202,58,155,187,178,99,122,3,11,102,242,100,119,220,45,56,119,248,128,22,7,74,53,96,73,0,55,106,120,217,
+  193,229,131,231,110,249,216,187,187,214,95,124,9,54,106,32,68,30,43,34,231,111,36,220,138,221,102,184,138,92,188,137,
+  18,153,233,232,25,51,130,104,205,79,246,244,177,107,113,135,100,237,130,153,252,162,175,137,197,223,243,108,139,233,140,213,
+  236,192,158,133,21,250,130,127,116,214,79,88,155,165,124,45,220,130,132,144,168,112,33,167,212,0,198,198,11,99,165,176,
+  88,171,179,151,102,73,12,72,235,35,72,49,105,5,147,54,208,73,66,187,47,9,150,119,18,45,191,90,172,185,230,26,
+  191,62,55,221,49,182,107,95,199,232,35,79,174,60,252,213,175,111,233,220,115,96,186,189,90,31,247,45,143,214,225,54,
+  11,143,126,18,170,159,226,59,231,253,252,63,91,128,206,94,132,196,247,84,132,82,223,167,119,98,130,45,247,222,195,174,
+  195,135,152,1,150,224,200,127,202,1,160,4,217,65,251,65,110,196,4,206,136,126,171,243,216,58,37,199,71,203,211,83,
+  167,134,134,151,12,187,145,208,58,252,71,202,44,87,70,100,74,105,107,17,86,58,155,11,235,185,39,41,37,86,73,18,
+  98,60,17,208,102,122,88,114,254,11,213,93,245,32,247,115,231,93,32,210,106,131,88,37,132,94,142,106,165,138,232,132,
+  178,178,28,62,28,19,37,154,160,179,159,254,245,231,50,176,124,21,158,95,192,164,41,90,71,8,83,67,11,69,34,243,
+  116,116,117,112,225,149,23,242,190,15,255,35,159,255,244,237,197,79,191,231,195,23,108,126,244,233,158,75,97,169,117,24,
+  196,3,157,176,255,167,160,246,199,217,177,123,20,199,126,187,57,27,201,200,186,162,235,129,159,202,10,212,195,160,82,232,
+  15,224,242,20,110,28,95,59,180,241,198,79,125,168,115,249,249,91,72,245,60,248,46,10,71,154,28,66,164,153,227,181,
+  124,198,150,203,97,48,98,225,224,46,234,86,22,182,87,11,38,241,52,71,163,179,21,163,51,199,59,151,205,243,237,55,
+  170,198,208,36,97,187,95,223,36,19,102,4,199,69,40,182,3,184,155,223,172,48,24,176,38,243,139,150,217,18,64,160,
+  172,113,186,54,112,185,243,88,210,164,65,92,171,81,47,59,255,104,173,19,4,41,90,167,40,83,68,161,232,44,104,250,
+  46,185,128,117,87,94,46,143,191,233,21,237,247,127,230,193,246,79,189,243,125,43,94,54,118,212,95,6,79,106,216,94,
+  128,234,237,223,170,176,62,71,215,192,127,26,71,196,102,17,146,194,102,152,208,119,94,132,172,16,164,185,28,35,59,119,
+  114,197,237,159,39,111,12,59,23,241,28,118,186,98,192,239,3,219,112,36,65,47,187,59,152,31,80,1,74,220,239,174,
+  181,195,100,114,252,196,220,177,29,187,24,94,178,2,97,107,24,145,58,118,136,113,184,135,64,96,108,130,69,35,133,135,
+  161,233,13,227,184,47,210,10,148,104,160,100,66,234,41,214,174,91,71,185,81,19,161,215,78,213,215,20,138,37,198,199,
+  171,60,250,200,54,150,173,232,98,235,145,58,221,93,195,44,239,31,164,179,167,15,47,223,129,53,18,25,71,46,132,79,
+  133,24,225,82,30,148,17,164,24,76,221,163,88,232,226,205,191,240,38,110,120,213,203,212,39,223,253,158,21,159,251,135,
+  247,118,95,51,57,63,220,3,125,83,112,199,107,97,215,32,84,150,227,12,229,107,14,219,225,15,178,215,189,59,27,207,
+  60,32,132,92,5,134,115,112,89,12,47,217,183,105,213,197,183,124,234,125,189,203,55,158,143,73,107,40,17,100,57,242,
+  58,235,48,228,66,202,232,226,35,185,128,49,187,85,251,34,1,167,104,229,179,55,11,9,88,163,51,32,219,91,52,107,
+  89,7,190,159,229,60,181,198,182,197,74,245,69,242,136,5,89,70,246,217,52,123,41,133,200,182,139,194,58,206,143,22,
+  230,180,78,205,117,112,205,140,52,50,251,16,72,77,154,157,119,103,169,130,177,52,42,53,26,51,83,212,27,53,210,56,
+  205,70,190,172,177,242,2,194,66,1,63,240,137,26,121,118,238,59,202,190,109,247,219,209,199,183,210,216,179,71,148,199,
+  102,204,202,122,163,220,41,196,169,196,218,186,2,17,130,250,63,60,211,236,77,103,55,229,114,230,201,182,234,12,44,168,
+  105,88,47,255,95,43,64,205,34,116,238,138,197,192,244,183,47,66,34,8,16,81,196,11,254,253,179,12,236,219,235,132,
+  125,103,153,249,39,178,207,255,148,97,22,167,50,238,196,0,11,190,116,207,21,6,158,100,39,249,173,160,173,160,33,181,
+  173,31,221,185,219,94,118,203,75,132,53,166,101,116,229,248,42,10,147,70,40,21,128,244,1,141,182,137,243,162,17,46,
+  201,3,44,82,231,193,8,140,156,101,112,164,141,75,131,13,164,73,157,242,92,204,67,15,60,206,252,220,36,151,95,122,
+  62,107,215,174,160,88,204,161,60,176,182,65,121,126,10,85,169,208,72,52,86,10,148,231,161,2,31,63,204,17,230,66,
+  2,223,119,215,140,116,214,15,73,18,51,208,211,193,255,252,131,63,226,241,23,223,218,254,133,223,249,211,75,214,221,253,
+  245,226,114,80,83,160,207,133,167,87,66,35,204,198,175,147,184,248,223,197,111,240,216,53,154,171,10,130,27,107,150,155,
+  14,111,94,125,233,77,183,189,191,127,197,218,205,232,180,214,26,65,164,179,248,194,74,147,169,192,207,94,206,133,56,109,
+  249,125,246,49,11,50,31,30,177,136,202,99,159,85,22,33,207,32,26,182,186,38,33,206,218,21,181,48,166,69,187,34,
+  41,213,105,207,72,234,133,231,99,23,255,47,43,68,210,40,119,3,144,174,240,234,184,65,163,86,163,92,158,163,62,63,
+  143,72,98,60,95,225,135,62,202,247,177,210,39,137,148,173,156,154,177,213,99,227,118,238,233,189,118,247,3,247,137,104,
+  199,94,81,152,170,138,245,64,55,152,130,107,56,119,199,176,59,21,2,13,107,67,107,163,203,120,166,101,154,0,82,208,
+  101,168,21,161,252,135,144,196,160,79,66,50,13,137,2,221,6,38,255,29,222,156,255,211,121,66,127,55,69,200,203,229,
+  56,176,115,39,87,126,227,235,44,159,157,33,250,22,109,101,115,58,239,203,62,6,112,182,24,17,240,24,112,14,206,169,
+  59,120,142,230,102,237,126,118,26,90,102,187,96,122,108,235,211,141,196,146,23,214,115,70,85,66,225,171,144,79,127,228,
+  195,28,63,122,132,13,235,55,177,124,217,10,186,250,122,232,25,232,195,207,133,88,12,198,166,104,147,58,189,144,1,191,
+  212,206,192,224,48,189,253,3,84,171,49,255,244,143,239,226,154,23,188,136,91,94,116,51,158,151,144,196,17,82,64,210,
+  136,153,155,47,115,226,228,65,198,198,78,33,60,203,224,72,63,249,124,193,21,0,1,158,242,8,124,159,182,182,54,134,
+  134,151,81,104,239,67,36,33,210,88,140,173,177,229,194,11,89,253,185,127,13,222,243,91,127,112,65,250,174,79,38,171,
+  225,88,12,199,191,2,141,52,27,189,62,176,8,232,92,1,188,26,100,10,3,70,112,117,108,121,229,244,85,151,92,116,
+  235,135,255,185,99,100,197,26,76,82,119,29,139,177,45,60,70,32,78,207,16,62,91,9,18,11,89,94,205,172,180,103,
+  22,22,113,186,176,243,180,53,252,25,197,230,204,175,53,173,53,178,175,25,173,91,106,246,211,192,232,214,182,75,62,19,
+  44,183,32,116,54,216,72,225,230,193,38,25,81,10,231,243,147,26,226,90,157,70,173,74,220,168,18,69,53,226,70,21,
+  33,44,129,239,33,60,159,52,150,156,56,94,225,232,193,99,181,249,221,187,27,237,247,63,24,200,125,135,130,100,182,66,
+  1,228,250,236,61,42,28,198,72,12,102,206,245,92,5,13,107,141,181,253,205,198,167,154,221,84,253,236,254,146,45,69,
+  80,78,174,49,13,156,178,80,141,33,50,48,61,15,83,109,48,215,11,115,33,148,143,66,61,5,109,255,95,42,64,139,
+  139,144,177,130,59,31,239,122,198,2,68,10,65,152,207,115,106,231,14,158,254,226,23,184,241,12,117,242,183,43,12,205,
+  105,189,169,217,122,12,120,41,46,155,106,34,239,49,178,166,235,116,123,134,239,226,97,149,32,56,50,79,105,54,98,210,
+  221,85,102,67,152,50,7,142,214,211,68,231,67,233,33,50,165,110,84,171,114,226,232,81,174,191,250,42,2,9,141,202,
+  56,251,198,14,178,107,187,160,167,127,128,222,193,97,186,122,251,200,23,218,177,36,36,38,226,158,59,238,99,207,83,123,
+  152,153,153,97,116,116,140,185,185,42,71,70,15,49,246,249,67,228,11,1,70,67,181,82,229,232,209,227,212,235,17,155,
+  207,219,68,119,119,55,185,208,163,16,180,57,230,109,62,143,239,7,24,109,41,22,74,72,161,152,157,158,34,74,43,180,
+  151,150,99,180,101,98,242,40,137,31,19,180,181,211,104,31,100,20,186,215,67,91,3,188,82,246,198,155,4,30,204,94,
+  247,18,224,93,32,135,160,119,26,46,73,45,55,206,94,188,121,243,245,31,127,111,71,223,146,37,152,196,209,219,164,148,
+  216,166,230,234,180,49,122,225,236,61,147,193,252,29,30,123,219,12,116,124,38,194,97,207,98,217,193,153,22,28,205,247,
+  208,34,43,141,38,222,228,222,51,178,21,143,241,12,177,170,112,124,42,137,0,149,73,59,146,212,97,110,81,76,163,86,
+  165,209,40,147,36,26,147,106,172,181,40,165,176,169,100,102,102,134,19,199,71,57,118,98,130,157,59,247,114,236,248,41,
+  100,117,126,230,188,82,33,90,221,211,57,220,86,216,32,68,222,103,170,187,67,38,94,81,200,70,106,195,80,217,106,181,
+  74,106,36,22,221,102,73,54,8,21,172,71,41,26,141,72,128,37,73,18,102,102,102,169,149,231,173,72,82,163,163,216,
+  138,114,205,20,162,52,237,168,39,245,30,99,230,219,161,81,66,197,37,204,84,17,59,46,96,34,133,19,243,78,228,186,
+  215,131,19,29,110,169,249,255,78,1,106,22,161,11,86,85,104,196,146,59,31,239,166,16,58,62,143,167,20,115,105,202,
+  216,191,127,134,23,239,221,203,23,207,4,27,191,71,204,166,11,167,163,249,236,242,118,126,227,95,110,194,143,191,55,254,
+  144,95,244,121,234,111,31,231,182,143,238,226,34,80,121,8,44,228,166,106,243,42,142,171,228,242,33,214,24,148,242,136,
+  116,76,127,95,39,157,165,28,82,198,116,248,37,122,123,139,68,81,66,35,174,113,108,207,78,142,239,243,105,111,239,101,
+  104,213,8,119,221,253,21,118,60,250,4,235,86,173,97,205,218,53,116,118,94,68,71,103,27,158,132,66,49,159,69,5,
+  123,104,35,8,253,128,98,161,8,194,210,136,106,84,231,202,196,181,6,243,229,121,230,102,102,80,126,192,232,248,20,113,
+  108,41,182,117,209,223,219,195,240,210,110,10,109,167,8,75,121,196,84,157,180,10,239,254,147,191,182,249,247,125,226,212,
+  229,240,120,4,251,5,84,101,118,23,254,100,134,3,45,1,254,5,100,27,244,77,194,229,192,203,107,27,214,92,114,213,
+  135,255,173,187,119,201,8,54,169,158,54,224,74,41,91,163,137,88,148,225,105,91,91,36,123,58,59,78,52,61,155,23,
+  157,51,217,244,87,126,54,85,250,162,31,112,230,205,228,204,181,254,217,100,23,207,144,99,100,120,212,153,52,128,214,118,
+  13,164,48,196,113,76,60,87,67,232,148,180,214,32,169,55,144,218,162,109,138,13,5,129,167,176,74,50,51,61,203,238,
+  221,123,8,253,60,70,67,24,22,216,180,105,13,23,110,217,72,177,148,35,95,12,71,132,204,140,254,241,92,51,37,53,
+  18,31,161,82,129,172,57,199,196,36,15,86,97,68,226,104,29,89,113,183,214,217,177,196,73,76,181,82,197,88,75,221,
+  24,170,149,6,149,153,121,102,78,78,48,119,114,106,228,196,169,25,166,143,157,196,142,159,74,194,153,217,122,119,165,86,
+  95,153,234,153,165,82,236,193,232,47,47,133,59,103,224,232,39,224,25,254,161,175,195,5,184,252,72,30,70,255,224,227,
+  149,235,117,56,103,73,153,3,39,67,142,76,228,201,5,146,84,107,222,251,185,207,114,233,225,195,180,63,199,219,44,211,
+  4,144,51,159,25,15,136,98,227,188,130,191,83,80,206,64,116,235,74,62,253,209,93,92,14,129,130,254,41,24,106,44,
+  27,46,204,140,30,163,99,213,114,148,114,152,64,26,55,144,104,164,72,157,21,110,172,113,114,83,75,41,148,116,149,186,
+  136,19,131,177,53,190,246,185,207,177,103,207,62,126,241,45,111,194,164,53,151,248,160,4,82,248,120,34,64,42,167,239,
+  202,229,10,72,225,183,214,199,113,212,160,32,61,74,61,93,84,243,21,74,29,1,8,129,151,11,185,236,186,23,160,241,
+  57,126,226,20,251,159,62,200,216,214,61,120,187,83,134,7,214,177,97,213,18,238,254,250,109,76,124,232,19,245,159,129,
+  253,117,248,186,133,237,13,168,188,22,248,52,240,53,96,56,43,62,157,158,232,139,12,87,10,99,95,145,174,91,121,245,
+  21,159,124,207,72,223,250,245,50,142,43,120,50,231,138,135,52,45,213,248,66,195,35,154,104,24,167,105,181,206,204,8,
+  196,182,188,128,108,139,107,179,240,181,211,199,46,187,160,56,111,226,58,103,99,80,115,58,217,145,179,224,66,103,122,8,
+  61,243,214,229,176,186,184,94,35,154,153,164,94,111,96,180,37,244,3,16,6,63,244,73,227,6,105,146,50,51,17,51,
+  63,55,75,165,90,38,142,35,250,250,122,233,239,239,115,189,149,108,254,44,139,177,22,157,38,88,19,101,214,35,210,165,
+  117,24,133,145,21,164,148,24,43,49,198,98,237,188,3,186,149,36,206,250,17,37,133,99,109,43,133,47,125,58,218,58,
+  0,232,22,2,213,43,241,215,120,8,225,48,56,163,45,245,70,131,185,114,217,223,123,120,212,63,188,255,88,251,103,31,
+  120,108,32,124,242,233,85,255,173,82,169,97,205,182,1,56,177,226,89,70,49,239,71,149,74,111,127,8,198,62,218,66,
+  62,208,108,89,51,207,209,169,54,82,157,240,222,207,222,198,232,145,35,167,241,79,158,75,78,195,216,193,57,102,254,247,
+  253,116,221,58,194,145,216,176,118,67,59,81,79,248,109,38,225,69,88,83,209,227,158,247,238,227,45,110,19,212,158,194,
+  114,17,120,189,47,122,221,203,212,196,137,35,116,119,22,104,235,233,70,8,73,16,248,228,11,69,180,214,40,229,147,106,
+  23,195,172,178,14,193,96,16,158,160,179,189,13,165,36,183,222,114,11,161,95,64,11,133,205,6,122,223,243,201,249,65,
+  43,149,52,8,3,80,1,214,24,76,220,192,15,2,226,70,29,109,36,90,120,24,98,44,134,90,101,150,198,241,132,161,
+  165,171,89,181,118,41,171,86,172,70,235,6,163,19,163,28,218,55,198,87,239,126,136,7,31,222,77,106,50,127,245,108,
+  115,155,89,136,240,23,25,173,225,223,64,118,74,87,124,48,246,21,102,227,218,107,206,255,204,7,151,245,110,216,168,76,
+  92,193,19,57,119,36,68,218,210,120,157,185,144,90,40,62,226,204,170,115,218,96,109,23,173,226,77,179,81,90,228,241,
+  35,190,53,144,116,218,182,235,204,247,114,147,213,124,214,81,254,76,230,245,25,203,108,173,53,243,115,179,152,114,25,139,
+  98,126,174,78,185,50,1,194,80,173,206,81,174,76,18,71,17,129,234,164,171,171,157,129,254,126,218,218,138,72,153,117,
+  70,38,33,77,45,36,29,8,153,96,101,156,193,82,11,59,41,119,191,55,40,105,48,40,172,245,17,158,1,34,103,134,
+  111,3,60,147,45,44,172,192,147,18,155,166,136,108,27,39,132,192,170,4,29,107,76,170,144,66,160,13,72,233,33,164,
+  164,191,167,151,21,195,195,228,110,189,149,187,174,189,150,143,253,228,47,10,83,54,162,238,249,202,19,66,182,37,241,217,
+  237,56,188,192,249,57,252,103,125,24,235,66,248,82,173,249,192,23,110,99,255,145,35,63,80,254,78,45,214,200,175,28,
+  101,223,87,142,242,49,224,87,87,149,88,213,29,224,125,135,5,8,37,184,254,64,5,11,109,17,108,0,46,232,186,233,
+  170,193,145,139,207,147,113,35,98,114,124,140,84,8,186,186,7,200,181,117,208,214,222,197,216,232,56,35,75,70,72,227,
+  6,81,20,145,234,148,142,174,110,242,97,59,237,165,46,230,171,53,62,247,229,111,208,221,185,151,180,222,160,94,143,64,
+  74,130,66,30,229,41,194,48,164,45,151,167,179,179,157,68,167,228,139,5,218,74,69,138,249,60,197,66,145,238,174,46,
+  60,9,90,71,72,153,18,228,44,197,98,14,52,76,143,141,211,63,146,107,165,57,12,14,141,176,100,201,74,116,3,54,
+  156,191,137,47,118,22,115,15,190,243,67,171,207,171,214,174,242,224,104,8,179,95,132,185,50,240,49,129,236,245,101,255,
+  116,106,175,16,198,190,162,177,105,205,117,151,125,252,253,75,187,55,92,40,83,51,139,240,3,164,86,32,26,88,97,90,
+  68,189,103,52,55,77,173,150,149,173,228,136,133,235,126,209,72,181,88,166,145,117,54,38,43,26,226,140,17,204,158,225,
+  233,179,184,8,157,205,60,236,89,73,140,103,233,150,78,251,183,214,221,48,186,251,250,72,219,114,164,137,100,223,177,157,
+  124,226,195,159,68,199,13,222,252,230,215,177,106,233,74,2,31,60,63,135,16,160,83,141,78,235,88,233,54,124,86,11,
+  39,94,85,83,46,128,205,10,44,10,139,2,180,43,58,210,2,1,22,15,99,99,132,108,128,245,17,228,240,164,205,190,
+  22,46,104,213,178,96,75,99,12,82,72,180,53,72,17,34,164,235,55,53,218,33,211,153,191,184,240,45,211,26,190,242,
+  129,79,113,232,95,62,208,120,203,169,169,173,5,120,172,34,228,169,113,163,245,209,179,148,246,245,128,55,113,4,122,151,
+  130,209,63,26,183,193,31,104,151,5,4,158,59,9,239,255,236,103,56,114,226,200,15,252,119,202,69,7,58,0,142,29,
+  172,112,240,96,139,215,243,29,109,191,2,240,115,176,92,193,181,243,249,240,226,117,63,251,230,110,161,192,39,193,183,30,
+  181,83,167,40,4,57,114,237,29,108,222,178,133,251,238,189,135,250,241,83,248,74,224,133,62,29,221,61,116,13,47,161,
+  212,214,131,151,239,225,227,255,248,143,124,241,142,123,92,23,147,36,8,33,9,115,1,133,66,1,129,32,159,203,19,248,
+  10,172,161,82,174,210,213,221,73,62,95,160,171,171,135,174,174,46,70,70,70,104,47,21,9,67,143,36,137,72,211,136,
+  92,33,199,208,224,32,29,157,93,172,169,230,88,190,102,53,42,231,131,174,97,162,8,43,37,235,54,46,97,253,95,255,
+  145,188,239,134,235,134,143,252,247,223,186,98,213,161,227,187,18,216,185,18,230,254,28,100,81,138,254,138,229,10,105,236,
+  203,103,214,175,188,238,202,207,125,100,121,247,234,117,152,120,14,165,50,110,143,48,217,152,37,159,209,172,159,222,9,101,
+  209,128,173,137,71,156,177,164,18,103,124,77,46,98,173,216,22,31,200,46,96,194,173,49,236,76,133,215,217,138,82,211,
+  235,199,88,123,58,23,168,201,206,166,153,122,154,21,176,22,43,209,25,138,161,36,126,177,11,207,192,11,110,186,150,203,
+  175,125,1,79,111,219,202,201,163,71,153,173,86,88,190,116,8,33,12,70,155,140,116,154,249,159,73,137,149,25,243,219,
+  164,46,138,71,8,82,157,96,173,197,243,36,58,115,4,240,60,39,136,85,66,161,173,197,26,131,20,22,41,36,18,31,
+  35,220,88,230,150,112,205,110,83,162,17,88,233,82,86,180,141,64,198,40,233,226,180,149,108,35,159,239,230,169,253,199,
+  248,216,187,255,129,238,47,126,117,242,102,109,158,204,195,93,26,238,233,78,162,99,69,72,54,61,219,212,240,197,127,50,
+  108,185,85,112,254,13,130,164,241,159,167,8,89,32,231,43,106,145,225,215,254,246,171,28,57,49,246,67,127,14,205,4,
+  207,37,192,123,61,201,197,61,57,60,251,173,187,181,82,78,209,85,142,131,198,108,180,188,2,91,218,126,230,245,171,122,
+  47,63,223,75,102,38,65,130,18,18,171,83,230,167,38,9,11,5,122,6,7,121,205,143,191,17,226,136,204,113,222,141,
+  24,70,32,85,129,147,71,143,241,158,127,125,31,249,92,1,109,44,54,116,54,238,97,24,80,200,135,180,149,74,228,195,
+  28,190,239,49,95,158,99,249,242,141,116,119,119,211,104,68,88,11,245,122,141,253,251,247,209,211,211,203,208,208,32,109,
+  109,109,116,116,245,99,45,76,76,213,153,156,170,113,240,192,9,252,251,190,201,170,117,43,216,180,105,21,253,131,195,96,
+  12,169,174,33,76,204,181,55,191,146,167,254,199,193,254,147,191,249,123,75,3,232,172,64,110,8,122,99,195,21,70,155,
+  151,77,175,92,118,205,165,183,125,100,217,192,234,13,232,164,150,225,25,11,70,239,54,51,18,179,226,153,91,46,123,26,
+  5,206,62,203,46,115,113,78,215,194,184,214,210,128,101,69,200,62,99,228,90,92,184,236,194,38,236,89,116,95,205,63,
+  159,46,209,176,103,248,155,137,69,100,200,38,118,212,44,122,210,209,38,210,24,233,9,206,187,228,82,54,108,58,135,71,
+  30,124,136,173,59,246,48,52,208,198,178,101,75,65,27,140,78,81,153,190,204,100,111,30,65,224,2,8,108,83,162,225,
+  88,214,70,91,135,235,89,147,21,70,137,18,62,40,87,40,181,209,174,32,10,139,20,214,141,240,38,205,206,65,22,92,
+  153,141,245,158,113,131,180,47,115,228,138,93,236,59,122,138,79,125,226,227,76,124,246,206,198,117,19,83,135,54,195,55,
+  35,196,189,6,30,182,216,99,159,132,250,215,112,132,211,51,81,223,59,1,207,11,225,241,47,89,172,129,11,110,250,207,
+  81,132,154,197,39,74,52,175,253,253,251,185,235,209,177,31,217,115,17,56,191,149,39,82,195,223,157,170,125,219,39,190,
+  186,232,241,33,95,73,1,5,81,104,235,92,245,154,151,21,66,155,160,149,79,67,164,88,235,238,70,42,244,93,116,142,
+  54,8,153,137,112,173,6,227,236,163,132,244,104,212,26,252,217,31,255,9,211,83,243,25,224,232,86,183,74,42,10,197,
+  2,237,165,18,197,66,129,48,8,176,6,242,185,18,82,122,36,137,97,217,178,229,244,244,244,162,148,34,77,19,164,10,
+  8,130,144,66,62,143,151,145,15,131,48,68,74,137,167,20,137,182,236,223,115,152,93,79,109,103,205,154,117,92,117,237,
+  53,20,59,219,73,227,42,96,56,122,236,168,144,224,75,40,25,88,171,225,82,99,237,205,135,206,93,125,237,77,183,125,
+  164,127,233,186,115,176,105,109,209,78,235,116,132,199,32,90,23,108,243,179,64,60,163,112,60,91,186,197,89,87,235,54,
+  235,128,132,57,115,239,213,234,100,68,115,164,177,218,145,15,197,162,228,138,179,128,211,207,64,144,172,104,241,121,206,70,
+  108,180,103,254,173,89,192,44,152,180,129,31,6,188,224,198,27,168,204,76,179,111,223,14,14,31,31,37,80,138,37,67,
+  131,46,5,181,105,105,111,116,134,217,184,191,43,33,49,194,18,71,177,11,160,12,36,198,24,148,82,173,231,178,160,204,
+  23,72,97,220,22,12,135,43,45,144,61,101,11,196,51,50,165,224,231,105,203,117,113,104,106,142,79,127,232,147,236,252,
+  228,109,233,198,99,167,38,95,1,219,242,240,64,3,30,76,176,59,45,76,142,65,250,55,217,43,219,250,108,29,144,16,
+  224,133,240,196,157,238,80,252,71,47,66,139,139,207,171,255,215,55,184,251,241,241,231,197,115,138,128,53,22,46,195,185,
+  200,61,235,8,86,77,169,147,226,131,208,190,146,182,171,72,152,43,161,181,34,17,18,41,36,133,82,27,197,174,46,12,
+  2,161,156,233,150,149,2,76,118,113,74,15,33,139,252,223,191,250,99,190,246,213,123,41,22,219,169,79,79,35,84,118,
+  199,204,238,132,82,74,10,133,2,82,72,76,106,89,187,102,57,3,3,3,228,11,121,164,20,164,105,74,20,53,0,40,
+  22,115,88,43,72,82,237,18,208,133,179,44,73,18,67,181,218,32,200,21,40,22,187,8,59,187,56,114,248,4,135,143,
+  126,140,235,111,186,142,53,27,86,115,228,232,97,182,125,233,75,141,107,161,145,192,144,148,226,74,140,189,113,199,138,161,
+  11,174,251,224,59,123,151,174,91,139,73,235,136,51,182,86,139,35,142,229,194,226,170,213,251,156,214,113,156,134,241,156,
+  93,169,116,186,233,87,51,53,116,17,6,100,79,239,169,16,34,43,68,153,145,153,213,167,249,61,139,51,87,237,167,133,
+  197,219,103,84,25,113,166,6,77,136,211,10,174,177,22,217,180,4,201,248,78,214,106,48,150,82,103,59,23,94,122,21,
+  229,185,89,158,124,236,17,158,124,106,39,171,151,47,167,187,179,205,69,47,25,247,111,77,86,52,173,176,167,61,133,36,
+  77,241,148,122,70,113,182,214,180,70,86,105,2,172,0,109,53,40,137,49,41,82,8,164,20,228,253,128,92,208,203,225,
+  137,25,62,246,217,207,240,244,71,63,155,172,218,119,96,236,23,96,127,39,60,213,128,135,53,60,81,128,19,171,161,250,
+  105,119,180,190,163,197,13,255,89,138,208,243,177,248,156,129,237,240,30,224,167,127,250,28,254,249,68,133,79,127,249,232,
+  179,118,77,18,40,207,207,113,108,114,138,145,13,27,8,81,228,186,186,240,61,31,161,20,86,184,145,196,98,91,156,22,
+  132,194,104,139,231,151,184,255,158,123,249,220,103,110,167,175,119,144,169,233,153,86,212,142,177,6,41,37,249,124,158,70,
+  212,160,92,46,211,213,217,201,242,85,43,25,26,30,65,41,133,214,6,79,73,180,214,88,4,129,31,16,167,41,129,167,
+  72,180,211,34,133,65,224,198,34,9,243,149,57,162,169,41,124,21,16,4,138,193,193,62,180,213,124,254,115,183,115,197,
+  216,69,28,63,126,136,244,224,177,134,15,121,3,91,164,177,151,110,239,41,157,123,225,251,254,161,103,243,133,87,97,226,
+  8,35,125,20,49,173,128,10,177,136,216,144,137,106,91,113,196,44,26,139,22,37,139,158,141,168,124,118,236,198,44,152,
+  248,44,170,23,130,166,188,99,49,190,100,91,106,249,211,126,214,179,36,92,156,253,132,202,236,215,125,235,228,139,211,210,
+  80,155,5,106,145,135,144,177,150,182,246,78,174,185,225,197,156,56,124,128,29,79,62,70,173,86,101,96,176,15,169,124,
+  172,78,156,187,163,116,157,139,196,137,117,141,160,101,51,219,244,36,58,19,104,151,82,160,132,201,18,83,156,216,213,243,
+  218,200,231,138,196,218,112,224,224,17,30,189,253,54,115,244,246,59,162,129,227,99,227,111,128,61,109,240,84,140,216,170,
+  177,187,12,28,59,9,51,47,1,93,248,46,232,45,222,226,19,246,31,185,8,89,32,23,40,162,248,249,87,124,22,23,
+  161,16,184,126,77,7,87,252,220,70,110,89,219,193,7,255,113,123,139,85,157,224,108,75,11,2,147,130,198,218,116,207,
+  99,123,184,234,134,155,17,74,33,132,114,162,200,236,205,216,244,45,151,44,164,58,120,97,59,123,119,238,224,207,255,244,
+  47,73,34,77,20,149,169,71,141,76,81,237,70,135,56,142,137,26,17,197,66,158,217,217,89,134,6,7,89,189,122,53,
+  141,200,225,7,82,9,132,114,129,119,66,42,16,130,124,24,56,193,100,26,187,205,145,213,132,228,240,60,143,158,238,110,
+  166,166,103,104,52,34,246,238,61,200,206,157,154,205,231,111,102,233,210,21,60,245,212,46,190,126,199,109,220,34,17,90,
+  179,66,193,154,93,133,112,237,198,127,249,63,93,47,184,238,70,97,235,17,66,129,146,198,189,182,197,235,110,177,144,154,
+  213,74,156,104,74,48,90,235,47,113,70,247,97,22,9,65,57,109,252,18,139,198,161,179,93,33,11,0,180,131,36,68,
+  51,135,203,90,215,41,44,170,116,14,12,62,163,152,136,51,54,110,167,81,240,237,183,125,255,58,185,140,125,134,98,191,
+  181,224,104,254,44,157,50,178,98,53,3,67,67,236,222,241,20,7,143,29,99,184,127,128,66,224,101,231,72,103,218,56,
+  155,253,59,183,26,73,146,52,27,197,221,77,168,249,209,122,89,158,70,201,128,92,88,66,19,80,158,139,120,242,129,135,
+  217,245,239,95,76,204,35,143,151,71,102,231,38,46,132,189,121,216,26,193,182,58,98,143,192,158,28,133,242,11,32,249,
+  213,246,46,78,116,13,210,35,37,187,231,103,88,89,153,65,68,141,51,209,181,179,23,160,211,138,208,151,93,21,61,255,
+  122,65,18,61,255,139,80,171,243,137,29,230,243,124,44,62,139,31,73,61,197,11,37,111,186,164,159,6,112,17,206,119,
+  163,153,52,80,21,66,251,82,76,247,167,230,216,206,219,190,56,63,251,203,63,219,222,81,116,209,58,153,41,51,11,216,
+  165,27,208,173,1,233,121,76,141,141,242,119,255,247,239,153,24,159,33,151,203,51,53,51,77,106,82,87,160,76,243,46,
+  168,80,158,66,42,247,230,27,24,24,68,41,73,16,40,146,36,117,108,0,169,8,139,33,90,55,215,213,58,99,201,186,
+  255,102,141,197,106,139,198,141,114,189,61,221,204,206,206,49,56,56,192,142,157,219,184,247,190,123,88,182,108,13,155,206,
+  217,64,190,161,77,91,66,65,194,186,157,146,96,201,219,255,184,235,186,87,191,65,17,213,48,126,8,178,140,178,153,6,
+  158,179,103,168,59,178,176,205,152,68,89,1,70,184,162,156,145,17,207,228,215,44,12,84,153,207,134,205,112,35,97,207,
+  88,179,139,69,225,128,205,95,103,22,105,195,154,155,173,133,84,141,69,102,138,11,237,203,25,124,159,211,177,44,193,89,
+  85,206,139,190,195,216,102,176,32,173,32,196,133,232,101,50,239,203,108,28,212,110,175,122,238,150,203,232,29,26,100,235,
+  163,143,210,219,86,160,187,187,27,116,236,54,174,210,224,206,16,45,240,185,169,133,107,210,15,22,176,49,197,252,124,72,
+  181,86,101,108,239,54,83,126,106,135,174,60,242,68,213,223,181,127,236,2,99,143,117,192,9,224,64,2,59,234,206,184,
+  96,172,13,91,126,0,244,23,195,2,83,195,107,197,230,193,1,117,56,78,210,131,198,144,235,236,229,64,154,176,244,200,
+  211,36,90,63,171,168,215,59,27,223,202,11,224,241,59,50,96,250,198,231,119,17,122,62,143,93,223,242,121,27,203,124,
+  93,179,29,24,233,207,51,244,91,231,19,76,69,148,254,113,7,179,149,36,78,60,113,40,128,71,151,60,250,228,250,237,
+  159,252,218,5,87,255,212,155,149,17,211,8,225,2,121,164,112,111,71,163,53,202,186,214,186,50,59,207,7,223,251,126,
+  118,237,216,69,28,69,8,145,32,36,36,105,236,52,142,40,60,207,157,242,40,138,16,88,186,187,58,25,25,25,161,17,
+  213,17,66,226,251,30,105,170,73,146,132,102,250,152,203,145,119,22,31,82,186,11,192,24,67,163,17,83,44,134,24,13,
+  82,105,122,186,187,9,131,60,66,88,246,31,218,203,232,201,113,102,166,102,233,152,153,211,61,16,110,131,92,254,207,126,
+  39,184,229,231,127,73,88,61,143,246,173,179,165,208,165,140,163,96,22,21,133,179,24,132,53,49,27,187,80,114,172,93,
+  232,140,22,219,170,158,54,102,137,38,85,81,180,144,102,113,154,48,93,156,54,146,185,159,233,10,123,26,55,176,70,163,
+  60,31,225,133,153,98,158,211,114,220,23,35,207,86,44,162,1,180,86,238,238,247,138,111,119,13,157,153,174,209,98,124,
+  187,215,43,132,187,38,13,22,132,143,240,21,198,90,6,135,151,115,221,139,122,120,236,129,251,56,120,232,48,43,150,47,
+  67,90,131,78,154,192,57,24,235,50,227,23,119,108,98,17,160,142,128,219,190,248,37,238,255,200,199,245,155,70,103,234,
+  75,97,34,132,109,30,60,154,192,46,13,39,4,76,24,152,150,80,233,117,170,119,198,128,13,61,35,28,237,25,22,210,
+  198,166,45,204,228,170,64,136,207,79,159,119,233,183,165,173,240,108,69,232,137,47,91,182,222,101,241,195,111,107,252,246,
+  95,197,231,251,120,148,218,124,46,188,117,41,23,254,252,6,30,186,114,128,183,129,169,106,59,38,148,120,172,31,182,237,
+  254,195,63,153,62,180,103,39,82,228,49,153,49,149,37,197,24,231,88,100,165,162,49,55,199,71,223,243,30,226,90,68,
+  169,212,65,165,214,32,54,134,84,27,124,207,71,41,15,164,32,213,174,147,73,163,132,98,190,68,79,103,47,7,247,31,
+  68,9,69,224,5,8,43,240,164,162,144,203,103,120,129,115,220,83,158,36,181,9,81,26,97,208,104,171,209,104,82,82,
+  240,140,243,32,178,146,92,46,164,191,127,128,165,35,203,81,184,0,196,113,66,241,69,48,252,194,235,188,55,252,206,111,
+  8,146,170,243,50,178,30,210,26,164,204,66,126,229,226,150,66,186,213,176,84,8,225,33,240,129,16,107,189,150,105,152,
+  108,117,42,58,139,220,177,153,69,109,19,59,106,154,218,122,24,60,180,144,24,164,91,231,11,201,233,213,40,179,226,192,
+  229,198,91,33,17,82,144,70,117,202,19,167,152,31,27,165,50,126,146,104,242,20,233,236,12,186,86,197,54,195,250,172,
+  205,46,186,208,197,22,101,161,197,86,200,5,172,78,200,236,87,44,40,231,91,133,192,178,224,55,36,178,96,78,43,90,
+  126,207,2,167,231,50,210,71,120,190,27,155,76,132,213,117,210,198,28,141,218,4,158,109,112,197,37,151,81,204,151,120,
+  252,209,173,212,27,41,126,88,112,63,35,43,232,74,137,236,6,34,90,36,204,230,50,194,26,205,155,127,242,21,252,194,
+  255,252,25,188,82,206,134,16,9,24,77,224,113,3,247,43,120,226,48,28,30,132,185,17,208,62,139,12,233,173,37,112,
+  218,170,103,232,171,82,99,158,245,227,172,29,208,217,138,16,60,255,58,161,255,44,197,71,2,149,147,85,118,254,212,189,
+  116,92,220,199,69,219,166,248,6,144,51,214,8,37,231,45,118,98,201,177,195,51,31,253,173,183,182,255,247,15,189,55,
+  236,110,47,98,90,35,8,40,1,149,249,89,190,248,233,219,104,43,150,8,194,144,125,251,15,80,40,148,90,249,214,190,
+  23,16,37,49,82,10,124,207,167,45,95,96,227,134,141,220,244,162,155,40,21,139,28,58,112,144,167,119,238,98,104,104,
+  152,222,222,94,226,36,65,74,141,82,210,249,14,103,23,180,84,206,129,49,73,157,57,173,82,30,86,24,18,163,9,189,
+  0,99,52,74,41,58,58,58,73,211,148,106,165,202,204,244,36,199,144,94,233,77,175,84,191,247,215,127,156,217,136,153,
+  204,144,75,101,0,111,102,237,102,4,167,231,172,187,24,229,197,227,202,226,116,27,219,180,171,48,77,252,102,241,154,91,
+  60,99,196,113,205,136,229,76,97,168,205,112,35,97,89,180,165,202,222,99,133,54,124,47,164,49,63,79,189,58,75,195,
+  90,60,207,119,5,48,12,145,126,128,244,60,60,47,64,249,185,204,175,91,101,171,109,88,112,247,182,78,203,150,61,167,
+  166,62,94,176,32,1,81,205,239,21,22,132,6,145,96,77,226,182,97,90,211,168,167,36,141,8,157,38,160,83,116,154,
+  160,20,40,225,196,201,198,8,206,219,188,153,142,82,59,15,62,248,16,23,92,176,153,174,238,78,82,157,58,75,143,172,
+  35,115,55,22,78,103,61,91,139,77,234,92,243,202,91,213,238,37,75,75,91,255,226,29,35,107,118,236,223,220,1,7,
+  19,56,30,194,252,17,72,255,12,231,16,250,19,56,83,57,128,224,251,232,78,188,111,211,17,62,47,139,208,127,4,192,
+  249,91,22,157,156,135,40,249,168,188,231,200,138,117,205,204,35,19,236,124,100,66,108,132,224,103,160,24,91,150,234,212,
+  92,154,131,181,39,160,120,255,254,125,234,186,167,119,112,213,21,87,161,117,234,140,57,37,212,231,102,121,232,222,123,200,
+  133,1,231,157,119,9,191,244,171,191,157,141,88,13,18,157,32,4,164,169,118,126,49,64,71,169,141,43,175,188,138,203,
+  47,191,12,33,36,213,106,157,161,145,37,244,246,246,243,212,182,167,16,66,48,60,50,66,154,166,232,38,111,196,146,233,
+  205,92,247,97,140,193,247,125,247,166,213,6,229,123,153,133,105,198,164,149,130,92,46,207,192,96,63,213,234,44,155,54,
+  175,229,111,222,241,215,162,173,61,143,77,51,210,27,11,192,110,19,225,104,25,58,103,238,132,153,68,124,209,90,62,89,
+  4,183,152,86,113,49,42,115,17,68,182,210,39,220,159,23,214,241,130,133,173,90,211,155,199,102,27,42,87,188,52,146,
+  5,162,162,200,254,134,12,80,133,28,197,48,135,95,244,153,154,156,194,88,67,33,204,19,71,17,38,106,184,130,128,2,
+  2,60,79,162,60,137,242,37,158,167,50,16,223,98,140,64,72,31,229,185,104,63,33,165,219,236,53,253,160,141,37,19,
+  108,145,38,17,113,28,147,164,13,162,168,130,213,105,182,197,116,60,48,79,228,8,252,2,161,151,35,110,104,166,166,102,
+  152,157,155,102,174,54,65,84,143,178,85,190,102,199,142,237,92,121,213,21,173,232,105,41,188,214,117,189,32,204,93,136,
+  10,50,22,26,213,26,231,92,124,161,232,123,207,219,219,238,251,179,183,95,60,242,249,187,109,31,80,131,59,95,10,251,
+  246,67,244,1,92,142,88,9,231,2,177,49,137,184,81,72,106,194,146,96,159,219,88,158,197,69,200,26,184,240,69,63,
+  218,34,212,44,62,245,72,243,218,223,123,254,23,159,179,105,254,199,222,191,139,173,119,28,166,109,46,230,10,231,129,227,
+  165,144,31,128,238,105,24,206,195,106,15,206,155,131,139,239,246,212,57,201,27,95,218,253,143,127,244,251,106,245,178,149,
+  24,147,56,113,32,150,168,90,225,169,199,30,69,38,49,47,184,230,26,62,245,233,59,56,114,228,56,202,47,160,211,20,
+  165,36,105,154,98,173,37,77,52,109,197,60,151,92,114,49,87,94,121,5,214,66,154,26,108,38,84,244,130,128,11,183,
+  92,196,222,189,123,57,124,248,48,43,86,174,196,36,177,3,174,165,192,195,203,88,183,238,46,154,166,105,182,69,81,206,
+  151,90,138,140,105,11,105,10,81,20,227,123,138,246,206,18,191,246,214,95,163,163,179,3,155,214,79,67,102,69,203,112,
+  43,251,63,35,51,112,52,91,23,55,85,18,139,41,130,217,158,222,54,67,129,155,104,188,144,8,171,78,147,97,156,222,
+  1,217,204,59,121,193,176,127,161,11,50,89,244,241,98,31,48,231,182,108,179,11,19,25,16,148,250,233,180,121,30,248,
+  198,215,137,170,53,206,219,120,14,165,66,158,188,23,146,154,132,88,87,73,106,154,200,90,132,84,153,255,15,72,169,48,
+  169,118,91,69,213,202,115,59,29,196,182,26,157,197,30,88,107,49,198,253,59,87,44,148,243,254,17,1,141,40,98,174,
+  58,195,244,244,33,198,70,79,186,227,236,251,116,119,119,209,213,217,73,208,231,152,238,107,215,175,33,77,83,234,245,26,
+  129,159,253,62,165,178,209,107,1,220,151,82,34,68,182,17,203,10,118,163,94,161,191,163,141,151,255,213,219,114,183,231,
+  131,75,249,196,157,178,31,152,150,66,189,205,216,189,1,212,255,21,23,48,80,1,142,77,28,197,122,62,151,44,93,70,
+  49,151,107,117,231,205,71,156,234,239,189,0,45,46,66,79,126,197,109,199,126,84,43,122,55,118,73,162,72,243,154,255,
+  245,13,238,121,226,249,91,124,154,50,12,223,157,36,241,83,174,169,102,7,200,198,190,89,191,109,223,172,15,228,87,65,
+  167,134,190,192,37,63,172,50,176,110,10,86,31,47,230,151,151,175,187,112,96,203,127,251,153,224,69,47,127,25,97,32,
+  51,191,98,139,20,6,29,215,217,189,253,41,26,213,42,231,158,179,129,201,137,105,62,251,185,59,220,77,52,78,29,153,
+  76,90,180,78,17,66,225,41,197,198,13,27,185,225,134,27,72,146,20,157,9,13,201,124,117,76,166,13,218,176,97,3,
+  39,78,156,96,122,122,138,246,142,14,146,36,193,243,188,86,209,81,74,225,123,62,22,75,24,230,78,187,147,42,41,73,
+  83,157,17,24,107,76,207,76,240,147,111,121,35,107,214,175,194,196,53,7,160,47,6,123,79,91,90,57,194,159,148,106,
+  1,111,22,103,168,220,173,92,100,163,145,97,44,52,173,80,23,143,89,139,137,118,180,182,88,66,184,49,47,91,136,45,
+  116,69,214,100,79,193,169,188,155,58,168,38,171,24,229,64,92,99,60,194,98,39,87,95,247,34,62,127,219,109,188,227,
+  159,222,197,213,87,92,134,77,18,74,109,5,186,251,122,233,236,234,34,151,207,101,5,195,98,181,198,88,75,16,8,68,
+  170,177,54,117,4,71,99,92,184,99,166,162,183,139,214,248,70,184,174,211,104,65,212,72,152,153,157,97,98,124,130,180,
+  150,16,199,117,188,64,82,106,47,177,116,168,159,174,238,118,194,156,27,249,82,29,56,177,170,214,164,105,140,64,100,57,
+  242,142,211,149,218,20,223,247,179,162,227,116,97,14,71,116,12,121,79,10,82,99,80,158,79,172,99,66,47,228,250,223,
+  249,149,240,35,19,99,151,108,185,123,43,61,198,114,80,96,126,205,178,175,2,141,71,112,38,124,6,248,234,232,1,182,
+  206,141,211,155,47,160,179,194,96,172,37,244,20,47,60,127,133,99,219,159,165,96,124,199,134,100,63,106,158,80,171,248,
+  196,134,87,61,143,139,143,205,10,207,16,112,37,120,69,232,152,128,174,45,16,10,144,167,32,167,160,87,66,183,20,244,
+  24,203,176,133,37,51,176,108,174,32,135,14,175,236,239,111,187,225,230,210,85,175,127,179,220,124,233,133,4,94,1,155,
+  156,194,164,22,43,2,84,230,5,124,96,247,110,162,74,153,101,75,151,225,249,57,30,120,232,235,28,63,57,138,31,230,
+  136,35,131,49,154,36,137,81,217,93,111,201,146,165,188,228,37,47,67,8,137,214,6,41,21,82,42,226,56,113,155,21,
+  107,144,74,18,197,17,253,3,253,76,76,78,50,57,57,73,119,119,55,58,91,163,54,127,22,214,226,7,65,246,51,220,
+  155,27,4,105,170,1,131,54,49,213,250,60,55,220,124,61,151,92,117,25,38,174,184,81,71,102,106,245,236,130,63,29,
+  58,56,195,102,35,179,134,16,173,113,141,108,3,40,22,81,110,154,32,242,217,155,254,211,229,23,217,103,105,155,200,146,
+  163,52,160,145,210,100,18,23,223,121,130,139,69,72,141,176,173,142,200,8,141,176,150,32,231,243,186,183,188,145,77,155,
+  214,50,126,242,56,133,192,99,226,212,56,99,123,198,17,66,146,207,23,80,50,160,84,106,163,171,187,7,41,37,81,84,
+  35,12,36,133,98,17,233,41,167,50,207,70,48,79,9,7,196,167,138,153,185,89,198,199,199,49,22,38,38,198,25,27,
+  27,5,97,89,58,50,204,234,21,195,20,139,75,16,170,9,44,187,206,197,24,137,181,6,99,146,214,177,116,161,149,174,
+  139,107,18,16,83,215,250,180,58,85,215,1,137,204,192,222,44,12,79,214,245,237,81,220,160,51,95,224,53,127,250,7,
+  193,39,254,215,219,46,185,252,222,237,116,91,24,21,232,255,105,217,63,0,241,57,110,60,3,96,162,86,97,162,86,57,
+  237,28,228,124,197,21,254,48,42,239,60,134,190,231,2,244,163,44,66,22,200,7,146,70,244,252,46,62,38,43,60,123,
+  64,14,66,113,37,44,77,224,252,60,108,106,64,151,113,240,100,62,133,190,26,116,54,160,189,177,172,191,39,89,190,188,
+  45,190,96,93,225,220,87,190,70,94,125,238,58,70,250,7,92,102,130,174,145,234,4,41,2,16,26,33,52,73,189,194,
+  145,189,187,153,61,53,78,127,223,0,105,106,40,215,98,238,252,202,61,68,137,110,145,118,149,244,48,104,164,112,42,242,
+  107,174,185,150,158,238,62,170,213,42,74,121,45,224,209,243,92,17,106,94,228,72,137,54,134,158,158,30,198,198,198,208,
+  90,227,251,62,113,28,103,186,176,212,141,6,8,148,148,142,187,34,5,214,100,133,201,151,204,204,205,115,209,197,231,113,
+  243,173,55,162,147,154,219,250,100,119,221,103,51,142,63,19,57,88,144,88,44,30,85,78,231,250,180,92,126,196,194,144,
+  181,96,193,209,140,10,48,173,177,102,1,164,182,8,227,10,101,101,118,154,156,47,241,252,16,25,128,80,138,211,242,115,
+  178,223,34,113,199,95,120,25,39,74,39,156,179,229,2,84,8,147,227,99,108,188,96,51,36,142,115,19,71,41,213,106,
+  149,249,249,10,251,247,63,77,181,86,165,86,109,96,109,64,106,52,65,62,231,214,212,97,64,62,23,162,68,70,50,52,
+  144,36,17,66,64,177,173,64,161,144,99,227,57,107,232,235,235,166,88,204,163,141,161,158,38,78,63,5,72,233,35,164,
+  69,72,183,217,84,173,132,215,172,208,24,155,141,113,162,213,145,25,52,86,187,142,71,74,153,121,253,100,99,104,182,62,
+  151,6,12,26,172,32,214,13,250,187,186,120,205,159,254,126,112,199,111,191,109,203,197,15,238,138,11,150,114,44,168,236,
+  183,28,95,147,221,42,158,205,95,171,22,120,217,120,44,206,74,67,248,174,45,89,127,216,69,168,89,124,106,13,205,107,
+  126,239,254,231,101,241,105,190,244,113,16,47,133,48,129,193,58,156,155,131,203,27,112,201,231,61,54,219,13,203,58,54,
+  109,88,139,10,115,178,109,176,223,43,14,244,169,225,213,43,68,247,134,245,44,93,185,134,82,190,23,80,36,204,128,174,
+  96,117,136,81,138,84,54,240,76,17,37,60,180,46,51,57,54,74,84,157,163,167,173,136,137,99,194,98,23,59,118,238,
+  99,215,222,131,72,233,99,18,231,100,40,148,69,38,144,232,148,11,46,184,136,145,165,203,152,171,84,156,130,218,44,208,
+  242,141,113,178,11,132,112,64,179,204,86,199,214,50,56,56,232,248,66,66,180,64,103,165,36,113,156,16,248,97,166,145,
+  106,70,12,91,2,63,68,155,26,221,189,93,188,248,101,183,32,133,37,205,182,46,205,78,166,181,133,130,69,110,132,11,
+  43,240,197,199,244,116,165,148,93,64,212,178,191,54,234,13,140,73,241,2,133,239,231,51,69,183,201,138,141,62,61,4,
+  80,184,146,37,22,17,21,149,144,8,147,80,158,42,35,165,68,169,60,97,91,9,145,203,163,194,124,11,204,118,227,161,
+  68,216,180,213,137,89,107,209,169,97,253,230,75,240,194,93,140,31,59,196,146,158,54,71,233,203,41,242,249,78,250,250,
+  186,193,46,37,77,99,210,52,65,199,16,197,17,73,154,146,36,49,198,106,226,56,194,87,110,52,245,51,87,130,32,116,
+  254,74,190,231,57,145,177,49,164,73,138,167,4,158,231,103,128,52,40,105,157,32,213,64,170,117,70,207,200,172,52,76,
+  179,112,103,93,163,176,142,74,145,166,89,23,156,58,199,4,41,51,247,129,12,7,202,60,177,155,61,160,198,16,39,49,
+  3,125,3,220,248,231,127,152,123,248,87,254,191,139,46,216,126,120,202,90,38,58,160,254,183,48,121,5,216,194,179,92,
+  27,255,62,210,205,231,66,159,103,51,5,253,158,60,161,23,23,33,107,224,194,155,127,48,69,104,113,241,121,229,239,126,
+  131,175,111,61,245,188,235,120,74,56,141,215,227,16,52,160,91,194,234,28,92,106,224,170,195,176,121,199,133,231,46,217,
+  244,171,63,81,120,217,173,47,99,160,103,192,129,182,162,105,146,41,1,141,38,198,152,121,140,54,72,5,82,134,46,251,
+  93,128,103,4,216,8,140,97,110,252,56,181,242,20,109,197,54,172,129,212,104,144,130,47,221,249,32,243,243,49,97,62,
+  135,240,193,232,4,147,26,148,231,81,44,229,185,224,188,243,169,55,234,20,138,153,37,71,118,199,109,105,159,132,116,171,
+  253,51,174,119,41,37,97,16,158,230,141,99,12,4,65,136,177,169,75,35,213,22,79,42,180,244,48,66,18,155,136,87,
+  191,246,37,132,161,64,235,4,37,189,76,104,9,70,8,148,16,11,155,31,107,29,231,166,85,22,100,6,248,106,36,41,
+  88,207,221,91,69,132,65,96,200,35,172,65,89,3,196,68,213,41,170,115,83,180,229,115,232,32,68,230,219,80,65,9,
+  229,23,90,64,175,21,26,105,23,118,97,182,137,237,88,199,142,46,22,59,137,171,13,60,37,49,58,166,58,125,202,17,
+  23,189,128,32,215,70,144,43,160,2,31,25,184,115,34,132,116,204,243,102,183,104,45,171,214,109,34,138,99,78,156,58,
+  202,96,95,31,113,220,192,87,162,101,221,33,149,64,90,137,10,45,126,46,0,2,132,40,44,216,189,102,224,126,146,141,
+  178,198,58,207,30,112,96,180,209,238,247,89,109,80,74,162,164,66,42,55,198,217,236,123,108,230,138,208,202,32,147,14,
+  103,210,58,93,24,149,141,205,70,63,145,173,227,197,34,19,126,131,176,25,193,85,100,185,101,86,58,59,14,43,208,81,
+  194,210,229,67,164,127,246,191,58,182,254,244,111,93,113,254,228,220,108,21,230,45,60,60,47,68,185,240,44,23,255,233,
+  29,233,115,84,128,22,23,161,31,20,48,221,196,124,234,177,225,53,191,119,255,243,174,248,88,96,30,104,3,245,50,104,
+  159,129,85,121,184,72,192,165,71,225,162,3,195,35,171,54,254,218,207,181,253,198,207,191,89,245,118,14,0,25,167,195,
+  58,203,4,157,1,192,50,107,79,221,159,5,18,149,113,80,82,48,6,105,5,66,106,102,39,198,168,204,76,161,178,107,
+  39,49,134,48,95,224,233,93,251,120,224,193,71,200,229,242,88,44,73,154,96,113,188,144,56,142,185,250,234,107,241,125,
+  143,70,189,142,167,20,86,186,213,185,53,6,43,37,202,115,227,88,148,38,40,207,195,164,89,14,185,82,173,55,107,189,
+  94,207,214,199,153,12,32,3,173,211,36,109,201,50,130,192,99,124,106,156,235,111,186,156,190,254,126,146,184,134,151,141,
+  122,205,206,71,102,12,240,150,162,92,186,55,190,182,180,156,139,17,6,105,125,192,50,63,55,138,141,35,2,191,157,160,
+  208,129,10,18,231,101,44,36,214,8,138,109,29,232,218,60,42,53,216,184,70,101,118,30,153,243,9,219,58,200,21,123,
+  16,94,9,33,60,76,22,33,217,12,2,180,100,90,55,173,81,133,18,181,40,225,11,183,223,197,45,55,191,136,182,66,
+  142,52,170,161,107,117,170,229,6,101,41,240,194,0,21,4,120,190,115,144,244,131,0,233,41,132,82,110,181,109,13,27,
+  54,110,100,91,181,204,212,116,153,238,142,34,164,177,99,107,219,5,203,179,56,141,241,60,229,36,31,89,81,55,214,102,
+  76,118,213,234,38,69,86,224,148,146,11,86,105,86,32,133,211,229,185,163,230,176,42,87,180,28,165,192,99,193,122,196,
+  66,75,231,101,140,235,142,132,114,91,75,99,22,114,140,28,30,232,192,112,163,227,172,19,202,18,102,149,200,126,183,163,
+  78,164,115,49,235,55,108,98,230,143,127,123,100,255,255,252,131,235,214,197,102,84,195,216,209,192,219,51,16,167,137,176,
+  150,249,124,192,124,16,32,173,37,159,106,202,129,231,98,204,4,207,109,1,250,65,142,99,205,226,211,72,12,175,254,221,
+  231,23,230,211,180,214,120,41,136,9,40,120,48,226,193,230,18,92,53,1,151,62,220,217,190,33,247,250,91,187,223,240,
+  255,253,154,88,179,226,28,208,13,108,60,237,66,3,133,204,138,131,68,102,109,252,2,101,159,214,197,189,248,0,74,9,
+  213,185,57,42,51,83,232,196,96,53,248,94,182,209,193,227,158,123,31,100,106,118,146,124,169,3,107,154,124,29,73,18,
+  199,44,95,177,156,222,222,30,26,141,6,237,165,118,124,169,136,162,24,47,155,255,91,9,161,82,18,134,33,66,72,82,
+  145,144,36,77,162,161,211,139,197,218,16,71,13,167,128,111,42,240,133,68,102,172,92,97,161,92,153,165,171,43,207,5,
+  231,159,139,77,19,60,233,157,238,134,218,234,58,50,37,185,200,36,180,214,145,41,143,31,62,142,50,150,145,165,125,104,
+  13,74,5,120,70,83,173,205,145,154,6,186,86,165,216,149,71,133,237,164,4,24,169,240,130,54,74,93,35,124,234,67,
+  31,228,130,13,231,176,97,205,106,106,233,12,245,233,57,226,234,28,42,232,33,87,234,70,5,42,187,168,220,69,107,16,
+  104,44,66,73,148,181,116,13,143,48,93,174,240,206,119,253,43,151,95,186,133,75,46,56,159,48,40,96,51,191,101,157,
+  52,72,226,42,66,204,99,90,84,33,129,31,230,200,23,10,228,11,69,84,24,112,222,69,91,216,250,205,7,169,213,26,
+  116,20,242,206,61,50,203,100,107,130,189,89,127,114,122,240,97,38,18,150,25,174,70,147,40,152,241,157,68,43,46,58,
+  219,46,105,183,73,211,214,249,73,35,101,86,220,105,173,192,23,19,12,23,127,246,60,119,99,106,110,24,157,175,145,114,
+  231,196,72,76,10,73,146,18,132,57,114,249,60,190,239,147,234,20,164,64,153,2,74,5,92,255,250,215,243,213,195,71,
+  87,86,254,250,221,87,23,96,255,140,16,147,123,124,239,212,80,156,152,59,215,47,231,238,117,75,200,197,9,22,75,212,
+  168,146,79,52,4,242,185,47,64,63,168,34,20,20,125,230,107,9,111,120,30,21,159,230,203,57,23,72,193,239,131,158,
+  58,108,204,193,149,21,184,242,126,212,102,251,202,155,6,95,243,135,111,245,207,187,224,82,55,92,153,26,146,4,45,93,
+  210,128,27,50,196,34,81,35,139,20,214,42,187,91,101,122,40,233,220,232,116,163,78,101,106,18,27,215,51,149,182,227,
+  199,4,97,64,173,150,240,248,227,187,16,82,16,69,13,103,189,137,91,151,231,243,121,150,142,44,101,118,102,22,63,8,
+  24,236,31,68,167,14,227,105,110,179,172,181,153,118,201,117,94,105,156,128,117,56,131,49,6,99,45,137,54,148,218,219,
+  153,58,213,112,220,34,207,207,108,64,4,198,186,87,161,4,204,205,159,226,101,215,223,154,113,12,229,66,113,21,153,118,
+  201,90,164,205,46,46,148,147,38,52,191,142,199,212,196,36,127,253,39,127,206,235,127,236,101,220,250,146,27,48,8,114,
+  126,129,163,99,71,232,234,76,41,132,41,181,169,57,188,182,24,194,118,68,152,39,5,130,246,94,242,157,3,252,201,95,
+  189,157,151,191,244,22,174,190,246,114,122,250,186,104,68,85,210,250,113,210,234,4,190,151,35,95,106,71,22,243,8,207,
+  203,52,87,142,123,172,177,228,10,69,174,190,230,106,226,242,44,91,183,110,101,223,211,59,89,187,118,29,171,87,174,166,
+  189,171,45,243,172,209,200,236,60,10,161,48,198,146,212,42,36,181,26,85,53,67,174,80,32,44,182,177,97,253,6,118,
+  110,125,146,80,121,174,131,177,110,205,110,108,243,220,36,173,237,94,83,24,108,22,5,38,234,212,180,228,18,45,81,109,
+  230,223,212,204,184,215,153,38,183,169,225,18,194,97,84,74,41,7,174,167,174,232,45,246,187,118,92,48,147,177,225,131,
+  214,249,215,70,131,117,227,153,39,20,82,250,156,56,118,146,71,30,125,146,217,217,10,197,82,7,113,234,92,17,139,82,
+  153,216,243,101,174,163,157,74,190,83,153,82,238,220,155,42,141,11,114,198,110,219,106,236,212,61,74,154,163,3,221,20,
+  147,52,27,83,93,167,103,197,247,65,68,252,110,139,144,49,112,209,247,138,9,41,1,165,0,121,231,33,222,254,190,29,
+  220,115,100,254,121,131,243,120,192,86,8,87,65,135,129,145,8,46,12,224,5,79,192,101,135,46,58,103,213,213,111,251,
+  205,220,77,183,190,132,130,10,177,73,12,194,67,202,16,43,3,55,70,145,102,155,6,90,2,70,219,132,69,133,61,205,
+  200,202,98,192,164,96,83,230,167,166,209,81,132,176,6,147,106,164,200,129,48,4,65,158,199,30,223,197,209,99,163,89,
+  158,151,165,16,134,164,58,37,142,35,86,173,88,65,224,5,196,141,4,129,108,17,7,155,250,159,230,22,68,91,227,120,
+  27,25,15,136,76,221,78,147,109,108,28,95,168,84,44,146,38,49,158,39,50,31,99,31,163,13,185,32,96,98,242,36,
+  55,223,122,61,155,206,63,7,19,71,144,173,248,23,2,134,229,34,43,13,15,211,50,252,113,24,152,37,101,195,166,245,
+  188,229,167,222,204,206,173,59,248,192,191,126,136,55,188,233,21,148,43,227,124,237,158,187,217,180,97,21,43,87,44,161,
+  183,111,144,242,244,12,86,149,233,232,233,197,43,228,177,218,240,226,87,190,10,21,132,116,182,133,220,113,215,55,24,30,
+  232,101,203,69,231,208,81,10,49,105,132,174,55,168,68,117,100,181,64,190,173,132,44,228,241,51,233,8,128,82,30,58,
+  142,232,40,42,94,250,226,23,50,55,51,207,209,35,199,217,190,107,27,198,26,114,69,159,66,49,79,160,60,172,5,223,
+  15,41,149,218,41,22,10,228,194,34,86,8,226,122,131,36,113,30,203,75,70,150,114,96,255,62,150,44,29,65,74,157,
+  101,185,11,172,116,36,64,99,178,77,85,54,146,138,150,232,55,163,14,88,209,74,181,16,66,100,227,58,45,110,77,166,
+  241,200,192,125,215,197,164,38,201,156,10,36,210,247,22,156,32,141,113,124,41,211,84,214,139,133,200,33,75,107,75,38,
+  1,99,171,88,227,179,100,89,63,93,189,215,179,103,247,33,238,190,231,126,238,184,235,94,150,159,154,173,188,30,100,5,
+  194,57,72,61,33,170,195,74,140,165,16,201,56,49,43,192,218,165,253,28,236,235,66,87,170,174,248,26,251,109,141,129,
+  212,203,87,108,226,185,42,66,82,193,137,189,238,239,3,155,3,103,215,9,103,221,255,63,131,148,228,75,84,106,137,62,
+  127,128,169,191,122,132,187,102,35,30,255,1,22,150,115,28,79,135,47,0,215,1,131,208,138,13,241,128,163,184,236,247,
+  141,64,63,168,97,232,172,194,6,9,215,9,184,101,14,110,250,90,33,127,149,255,214,95,89,241,75,255,242,14,111,203,
+  249,151,184,187,154,6,33,83,172,172,162,69,138,176,2,165,113,130,165,22,249,77,52,47,203,150,36,193,178,192,203,16,
+  214,32,173,161,60,53,73,101,118,26,29,71,88,171,29,160,168,20,169,177,120,65,145,143,124,228,223,217,181,239,32,66,
+  185,55,162,146,146,70,163,193,242,101,203,24,26,26,162,81,143,72,226,24,223,243,25,25,30,161,163,163,163,181,209,106,
+  90,115,10,225,124,166,155,212,27,99,109,230,247,99,81,205,55,167,148,8,4,73,28,81,40,228,220,29,93,187,72,159,
+  74,121,150,21,43,135,185,238,69,87,67,90,205,236,49,112,41,7,210,100,177,55,205,77,140,187,176,164,16,206,12,29,
+  119,193,10,64,73,159,153,201,41,94,112,229,69,212,171,101,142,30,59,65,169,163,141,70,82,101,205,138,213,236,221,123,
+  132,147,227,19,44,93,178,20,133,161,94,153,67,160,221,230,40,215,70,163,81,65,165,13,174,190,250,18,166,167,78,241,
+  228,227,219,104,52,160,189,171,159,160,24,184,245,115,98,168,215,42,164,141,134,203,140,80,14,232,23,82,49,123,106,20,
+  91,155,65,40,139,239,91,6,135,135,24,26,30,166,212,222,70,88,200,17,132,1,18,231,201,164,181,102,126,126,158,217,
+  217,121,198,199,79,49,57,57,73,189,94,35,142,234,40,41,41,22,157,217,255,216,216,40,93,93,93,24,92,87,226,232,
+  0,166,101,231,138,16,142,46,161,53,82,73,247,125,198,32,61,183,20,176,89,247,104,23,235,227,50,230,183,109,158,39,
+  200,86,236,11,139,3,22,165,125,216,211,178,202,68,171,104,181,206,107,147,243,36,5,210,115,14,11,82,66,152,83,44,
+  95,57,204,13,55,92,201,245,55,94,137,215,91,244,106,115,243,114,249,212,60,23,91,42,235,96,95,175,177,15,105,120,
+  200,8,246,140,64,121,87,185,202,147,161,207,234,66,64,109,182,66,96,53,117,105,241,148,68,158,225,198,8,240,226,55,
+  252,236,115,87,128,90,69,200,19,156,218,111,216,244,181,71,73,139,48,94,8,232,233,201,35,197,233,133,200,97,15,224,
+  121,64,168,136,235,154,131,255,223,55,136,63,187,143,156,117,145,189,143,253,8,10,80,115,217,171,128,30,240,11,78,30,
+  177,202,131,75,5,188,164,10,183,30,201,5,87,140,190,244,166,245,55,252,243,223,119,188,254,167,222,76,33,144,152,36,
+  1,27,33,189,196,109,147,132,231,114,233,49,8,210,86,139,221,60,80,34,147,83,52,137,59,198,106,87,72,140,70,232,
+  148,70,121,142,249,217,105,116,26,97,172,70,91,199,225,72,77,138,16,1,115,229,132,127,123,223,71,168,214,27,24,43,
+  104,107,111,7,99,220,232,181,108,153,3,142,149,135,239,135,128,96,96,104,136,190,254,62,7,122,74,143,32,112,1,131,
+  152,172,0,9,209,42,100,162,73,39,206,86,232,82,56,223,231,35,71,14,35,149,32,137,99,138,133,18,38,49,204,205,
+  157,226,197,47,190,14,105,106,84,102,167,168,205,206,81,47,207,81,153,159,162,94,157,195,152,212,109,210,50,81,169,176,
+  26,27,87,136,203,179,196,181,121,132,73,128,20,233,183,51,63,51,71,18,31,103,213,138,33,226,196,99,247,222,131,116,
+  118,118,210,217,81,164,127,160,135,83,167,198,121,240,129,135,24,30,90,66,87,103,23,229,242,60,198,166,40,31,6,6,
+  6,216,187,243,105,186,58,66,134,6,186,233,235,237,101,108,108,150,221,251,14,82,141,27,228,242,57,242,94,232,88,193,
+  113,76,163,82,6,163,81,158,68,6,62,243,83,147,212,231,103,200,229,115,8,105,209,58,198,104,75,144,11,201,5,1,
+  133,92,142,66,230,137,93,42,21,233,104,111,163,152,47,208,214,94,194,243,157,128,180,86,175,49,61,53,205,228,169,9,
+  124,223,167,82,169,80,107,212,41,149,10,24,173,23,121,240,100,55,58,165,88,236,53,100,164,235,58,117,147,37,173,84,
+  171,224,104,171,91,27,43,247,217,197,229,144,69,243,8,68,102,60,118,250,67,46,26,197,154,221,206,153,141,192,2,77,
+  34,4,235,186,87,173,13,105,26,145,36,13,58,219,10,92,124,249,37,98,228,165,47,149,135,86,13,201,3,135,14,89,
+  127,186,220,200,195,148,128,83,169,16,83,5,168,30,135,180,227,212,12,175,59,118,138,251,246,159,224,156,64,114,168,191,
+  131,208,242,172,5,232,185,143,102,22,160,60,75,254,155,39,217,122,223,1,62,210,87,224,231,94,187,158,210,149,195,12,
+  175,232,32,150,2,153,24,172,208,164,13,152,154,134,162,136,40,253,221,67,76,111,61,197,200,143,24,231,105,184,15,5,
+  20,151,195,146,8,46,16,112,241,60,156,51,26,248,107,219,111,189,161,239,210,183,254,98,113,253,149,87,73,95,42,116,
+  50,143,80,2,37,52,86,65,34,20,2,137,167,21,34,177,88,37,137,125,80,26,148,21,167,3,74,66,96,141,118,46,
+  131,25,200,40,17,36,245,58,243,83,51,217,70,202,160,141,118,88,2,96,137,41,20,123,121,228,177,237,76,78,78,227,
+  135,62,104,133,231,249,164,113,196,234,213,171,29,142,22,248,20,10,5,199,245,16,34,219,130,168,12,60,150,72,37,145,
+  218,44,128,224,144,37,97,58,44,161,121,193,232,196,141,15,66,74,230,231,231,105,107,203,83,106,43,33,165,228,228,169,
+  19,68,141,121,172,142,168,204,78,162,27,13,140,105,218,196,106,188,208,163,26,85,9,148,71,80,232,68,8,69,125,110,
+  154,250,236,56,202,104,12,150,56,200,97,165,194,47,212,8,114,134,250,20,68,94,68,255,96,129,199,182,143,17,230,125,
+  36,18,29,87,56,119,211,42,60,47,228,67,31,191,141,203,46,187,140,203,175,188,136,180,94,167,82,63,76,231,224,74,
+  150,175,63,159,253,71,118,178,102,249,32,158,74,57,111,211,48,147,83,115,28,62,60,198,212,232,36,3,3,61,244,247,
+  116,211,221,213,78,206,247,169,207,205,209,72,26,116,122,18,235,73,234,177,162,77,248,142,252,137,113,196,195,84,18,40,
+  15,79,41,180,72,29,142,150,73,83,124,169,72,109,138,231,229,51,128,55,68,73,143,52,49,204,205,205,83,175,71,204,
+  150,231,24,24,236,115,199,189,25,211,179,136,155,36,90,148,240,108,21,46,29,46,36,69,115,92,166,101,38,223,148,84,
+  156,206,161,114,93,171,181,214,1,255,176,40,117,195,182,64,108,33,84,166,219,91,48,34,91,176,4,177,153,7,146,251,
+  253,22,227,10,28,18,171,33,78,12,105,84,163,83,5,188,236,149,183,50,122,197,150,194,214,79,126,97,237,161,15,255,
+  123,199,154,153,202,64,151,181,253,99,240,192,74,216,117,94,170,167,147,84,39,41,208,54,58,67,223,138,126,234,249,80,
+  72,125,118,38,208,115,218,1,53,47,42,105,45,231,31,223,199,184,78,121,186,150,80,121,108,140,187,62,187,143,158,221,
+  211,4,93,33,141,130,79,41,12,184,243,253,17,223,252,178,34,248,210,33,214,238,220,207,97,183,214,38,0,238,255,33,
+  117,64,159,7,174,117,99,22,243,160,166,161,93,194,50,31,46,77,224,230,10,188,100,2,174,180,47,185,97,253,133,239,
+  254,219,254,23,252,214,175,230,6,151,175,20,202,196,96,211,214,93,199,10,133,144,62,194,42,164,49,72,147,186,187,91,
+  203,250,32,91,129,90,155,201,1,12,214,68,164,81,13,145,52,16,94,136,231,121,152,70,141,217,137,113,210,168,6,164,
+  104,147,130,132,52,50,40,44,97,33,135,80,37,62,240,193,127,103,223,129,195,248,97,128,49,78,159,21,4,30,203,150,
+  45,167,90,169,129,21,52,26,17,181,90,13,63,240,233,233,235,101,96,112,8,132,179,147,80,202,61,23,231,51,166,50,
+  8,78,46,152,97,129,19,152,10,65,144,11,73,117,194,216,232,40,131,195,67,248,126,224,240,159,48,196,90,216,191,255,
+  8,86,75,134,135,187,48,196,120,120,40,27,184,215,232,105,194,246,62,60,47,71,90,47,51,59,121,138,70,45,97,199,
+  246,221,28,63,54,202,190,61,71,169,206,59,182,116,154,166,212,203,243,148,242,10,27,25,6,122,122,40,21,139,200,64,
+  129,74,209,113,66,79,95,39,171,86,175,224,115,159,189,131,123,239,254,38,231,172,63,151,174,174,18,213,202,44,131,67,
+  75,216,187,247,0,158,167,241,130,132,52,54,20,115,221,244,247,119,225,231,19,198,167,78,113,228,240,40,163,99,115,212,
+  106,154,82,123,39,57,63,196,214,34,230,39,103,152,175,84,233,236,40,33,209,120,153,191,182,219,248,25,60,101,240,173,
+  1,5,49,17,49,113,43,93,85,10,141,18,174,75,77,211,24,41,161,173,84,164,183,183,155,174,206,118,210,36,201,116,
+  95,114,193,161,17,50,108,48,91,193,227,54,163,10,133,146,178,21,61,237,198,68,167,217,50,34,3,168,165,200,70,173,
+  108,89,209,106,172,79,143,153,118,133,200,129,230,82,40,100,214,237,168,236,239,74,122,40,169,50,204,73,128,72,51,135,
+  2,145,25,215,137,22,93,66,102,22,33,113,163,74,177,144,99,221,11,46,147,225,181,151,183,237,139,107,75,226,61,135,
+  134,59,45,189,30,132,17,164,101,79,69,126,46,72,87,87,26,102,122,178,204,236,112,15,86,10,34,99,8,172,165,106,
+  29,65,245,229,63,241,243,63,216,2,52,166,83,118,102,23,247,36,208,126,188,76,238,206,67,188,225,222,195,236,220,41,
+  40,141,119,65,94,49,88,158,102,197,244,24,135,126,136,5,104,67,86,120,78,2,151,128,151,64,123,2,43,115,112,137,
+  132,155,107,112,235,168,20,215,153,27,174,89,119,193,223,253,69,207,101,191,251,214,252,208,234,213,194,166,113,203,50,162,
+  57,199,187,109,146,104,193,170,34,235,40,76,198,217,240,154,35,142,196,89,74,152,6,113,163,76,220,168,33,133,192,15,
+  243,72,229,99,146,152,185,233,9,162,90,5,97,82,140,118,65,115,113,154,34,45,46,19,94,73,70,199,230,249,208,71,
+  254,157,36,117,93,68,154,26,210,56,102,227,198,13,36,73,194,220,220,92,166,160,150,45,196,105,96,104,136,225,37,195,
+  173,77,138,88,36,136,212,214,224,121,30,94,118,135,116,44,95,71,114,84,153,131,98,189,81,103,122,106,138,129,129,193,
+  108,125,235,188,127,218,218,59,177,214,227,240,161,19,84,171,101,86,172,90,138,78,12,74,248,72,101,192,131,124,251,48,
+  158,42,18,85,167,137,27,117,254,230,255,188,147,201,169,83,12,14,247,80,43,215,153,155,158,228,196,241,221,236,218,177,
+  139,137,137,73,150,45,31,33,213,41,97,40,8,60,223,17,0,173,67,231,140,142,200,229,60,182,92,180,133,35,135,143,
+  240,165,47,222,65,190,208,198,224,96,15,194,54,200,229,122,216,182,237,73,86,172,26,68,39,9,214,72,18,211,160,88,
+  240,24,234,233,163,187,179,11,107,53,71,78,28,100,239,129,157,104,19,145,247,3,146,56,101,122,126,150,206,142,130,27,
+  19,173,117,219,46,43,16,190,202,64,122,72,172,192,88,31,172,135,20,22,107,98,140,9,176,54,196,52,77,245,173,117,
+  198,111,153,20,36,73,19,140,209,100,203,242,86,209,144,139,198,34,145,37,158,52,61,168,149,116,93,167,20,77,157,150,
+  69,121,94,203,199,89,8,199,106,106,222,48,220,8,230,131,53,25,21,99,209,184,101,221,54,78,54,59,46,139,35,58,
+  54,237,177,141,197,247,252,12,163,84,25,83,218,117,106,142,24,155,153,193,42,247,164,141,53,164,141,152,161,129,62,214,
+  222,112,173,55,187,102,121,223,190,125,251,151,250,211,229,145,18,116,91,99,101,155,239,55,172,49,245,168,30,235,246,241,
+  89,202,147,243,92,121,98,154,59,78,206,240,115,39,103,88,118,114,134,77,191,249,59,63,128,17,236,91,60,252,172,184,
+  236,29,173,131,158,228,226,245,43,137,236,217,55,79,5,96,89,86,144,158,227,9,145,41,160,221,253,124,239,167,160,211,
+  194,18,13,235,125,56,127,10,46,60,226,123,235,195,235,175,237,191,240,87,126,62,127,238,141,215,202,48,12,177,105,140,
+  142,235,25,203,212,158,150,180,41,165,2,19,103,231,218,57,20,54,205,38,69,179,213,198,96,211,24,147,212,72,163,138,
+  107,171,189,16,47,95,34,149,57,60,19,83,157,155,165,58,95,70,24,157,141,102,218,109,169,210,166,5,171,32,244,11,
+  60,245,212,195,76,77,207,160,188,144,212,52,28,5,223,88,114,185,28,214,66,169,216,70,24,134,173,118,61,8,67,226,
+  40,33,110,36,142,222,47,100,118,103,204,146,47,140,88,72,121,200,116,67,198,51,196,73,130,242,90,217,20,244,246,244,
+  44,240,75,178,21,176,214,41,74,9,122,123,135,120,234,169,253,168,32,224,133,87,93,76,117,126,194,129,233,132,120,66,
+  96,26,53,66,36,183,221,241,21,250,123,114,188,254,199,94,73,154,70,136,53,110,75,103,116,157,19,199,39,57,116,236,
+  20,245,40,69,121,30,154,58,164,26,79,231,28,48,171,4,136,0,173,45,82,214,120,227,155,95,194,19,79,236,228,206,
+  47,221,201,241,99,199,120,193,213,151,177,254,220,45,60,112,191,230,248,145,41,134,6,122,137,117,140,23,186,142,207,75,
+  99,58,218,36,29,237,221,12,175,232,160,161,83,230,230,170,108,219,181,155,217,233,121,82,93,103,229,202,129,204,195,56,
+  243,104,150,62,130,16,85,112,145,53,182,150,162,210,4,207,52,0,67,148,122,238,70,35,82,20,34,19,238,186,68,82,
+  99,156,83,163,144,153,53,171,36,27,129,132,235,60,180,3,124,129,214,185,114,203,129,102,188,82,214,233,224,196,170,22,
+  78,147,74,180,70,173,166,45,73,22,163,172,252,108,3,37,23,162,119,50,115,163,172,163,163,21,71,100,172,93,228,104,
+  32,90,9,25,206,184,126,65,38,35,51,246,126,115,175,105,5,212,107,117,132,240,184,244,214,23,137,213,87,94,214,247,
+  240,251,62,118,229,248,251,63,189,124,117,181,177,170,163,214,184,39,129,251,47,132,3,59,231,107,181,234,124,205,46,113,
+  114,37,214,3,179,207,229,26,254,185,126,212,129,45,192,255,206,10,197,115,253,56,4,28,6,127,47,140,0,151,249,112,
+  249,20,156,183,211,87,107,210,27,175,27,188,234,127,252,66,112,249,139,110,32,231,123,24,93,67,235,90,70,18,92,164,
+  79,60,51,241,160,229,18,191,144,224,233,128,66,199,227,48,81,133,56,170,101,197,37,193,15,11,168,176,128,80,62,218,
+  122,212,202,83,212,102,167,145,214,162,211,20,147,17,204,146,40,118,73,150,190,203,137,210,90,241,232,227,219,72,98,77,
+  16,122,104,60,164,108,160,132,79,28,167,132,97,136,181,150,40,138,92,8,97,38,32,77,146,36,139,219,1,109,221,22,
+  38,77,93,145,243,148,202,182,52,11,236,89,4,156,56,126,2,207,247,233,31,26,0,11,61,189,189,45,127,161,133,196,
+  5,129,84,146,36,53,12,141,172,225,209,71,118,179,100,112,136,53,171,123,73,162,42,194,72,68,90,3,155,176,111,247,
+  110,234,243,243,188,225,13,47,162,94,157,65,144,67,83,201,216,185,57,134,87,140,48,180,124,136,36,169,64,154,3,36,
+  158,116,121,33,90,104,231,25,40,66,23,29,100,83,26,81,149,139,46,218,196,154,213,171,184,227,75,95,229,95,255,245,
+  189,92,180,101,23,107,86,159,203,158,29,219,25,236,27,6,17,115,226,228,60,163,51,101,218,58,67,218,243,237,116,149,
+  138,180,151,138,4,34,33,239,215,25,238,210,76,79,205,80,141,34,210,52,6,225,186,8,41,221,152,114,114,116,156,79,
+  127,230,118,110,121,237,107,57,127,195,16,186,92,37,170,186,124,52,165,12,130,26,70,72,132,8,50,198,53,248,74,144,
+  26,237,28,2,172,113,221,135,176,173,209,215,100,95,211,90,59,135,69,156,48,24,32,77,12,94,224,57,6,181,21,40,
+  229,116,120,58,43,140,142,62,101,23,34,118,140,105,221,240,36,194,17,21,155,140,104,235,70,54,151,31,183,128,31,25,
+  187,40,245,3,131,54,73,214,253,56,125,153,151,101,192,11,156,31,146,64,57,83,53,33,50,61,95,147,34,144,82,155,
+  159,165,61,23,240,162,223,249,101,127,255,77,55,173,120,234,79,255,166,123,217,99,79,13,116,67,127,29,238,91,3,79,
+  143,192,84,29,210,31,8,15,232,7,241,240,128,227,192,19,56,215,181,231,74,102,150,41,119,69,8,221,22,174,138,225,
+  199,238,246,197,101,83,87,93,212,251,226,223,248,53,117,253,139,111,33,244,60,76,218,192,234,104,65,108,105,113,41,18,
+  139,131,229,22,100,218,88,161,178,194,211,76,182,52,78,65,173,35,162,242,28,166,81,113,216,143,159,71,228,219,32,44,
+  97,132,135,50,160,27,101,202,83,167,28,215,71,39,217,29,70,56,47,31,41,145,194,195,24,167,171,154,158,169,179,227,
+  233,189,248,185,208,17,5,147,20,129,197,247,20,133,124,17,173,83,188,76,94,209,244,239,177,205,162,150,69,242,72,41,
+  241,60,143,70,189,209,98,222,106,227,86,193,173,13,77,150,47,222,136,234,244,233,94,4,206,200,94,107,221,42,64,158,
+  231,161,124,223,69,189,56,110,49,131,35,203,185,253,43,95,231,205,111,120,9,61,29,69,44,9,73,109,26,99,12,79,
+  62,177,141,205,155,55,146,36,77,95,194,8,95,228,92,241,147,130,122,162,241,101,72,177,80,36,170,215,81,162,136,69,
+  160,213,52,158,103,65,75,140,141,81,184,149,184,53,146,168,214,160,152,151,188,238,199,110,229,208,161,81,190,252,149,175,
+  115,247,93,15,18,122,138,11,183,172,162,171,167,200,71,63,248,97,187,245,51,95,73,214,244,150,76,111,88,50,229,190,
+  222,176,184,126,141,58,247,210,243,185,240,130,117,12,245,20,24,26,30,160,222,112,91,31,33,36,202,83,153,154,220,210,
+  222,86,98,207,206,221,236,255,242,111,38,151,222,112,149,186,241,77,175,147,203,70,122,168,85,230,193,72,148,113,26,183,
+  200,102,242,153,76,49,239,216,201,105,54,138,201,214,104,212,196,120,76,162,209,166,105,117,226,198,42,173,93,103,105,180,
+  113,239,169,44,245,212,117,56,246,180,104,103,215,58,45,176,233,155,93,145,75,69,37,115,175,116,203,4,169,156,59,163,
+  181,26,147,69,48,139,204,123,201,104,235,54,182,210,69,55,233,108,116,84,202,91,40,106,198,56,220,72,169,140,63,229,
+  192,109,149,17,34,211,52,193,206,204,112,206,133,107,89,254,137,119,182,63,242,79,31,184,236,224,59,63,208,179,162,17,
+  47,1,238,11,225,225,126,56,122,171,11,167,108,93,207,63,20,12,168,55,27,123,150,3,221,192,191,2,61,197,14,46,
+  237,29,33,18,226,25,24,16,192,41,160,19,23,228,183,18,231,177,211,200,100,16,223,207,71,195,49,153,101,27,44,53,
+  112,235,126,120,113,254,247,126,123,240,173,239,123,167,60,103,195,58,72,106,24,19,211,116,201,19,50,19,141,46,10,150,
+  91,28,24,215,76,62,48,25,2,36,5,72,171,177,105,132,169,149,137,42,179,68,213,50,146,132,32,8,81,249,118,200,
+  119,160,113,6,240,202,104,170,83,99,36,213,10,214,56,51,47,164,92,224,142,180,230,118,67,24,150,216,246,212,65,62,
+  119,251,151,209,8,226,212,117,50,82,24,148,244,24,28,28,162,90,173,146,36,73,166,94,135,52,141,105,111,47,81,106,
+  239,96,112,112,8,47,195,17,140,214,204,77,207,16,6,65,203,106,85,52,59,59,107,241,149,211,143,149,43,101,186,187,
+  187,168,84,202,140,143,143,83,42,149,220,27,46,73,48,64,172,83,154,214,23,82,57,142,75,163,30,115,96,223,97,46,
+  187,228,18,226,164,138,16,154,3,123,199,248,240,135,190,192,181,215,189,16,223,115,223,175,132,139,148,110,254,222,32,200,
+  243,192,3,223,228,228,196,52,203,55,174,198,16,97,76,13,79,88,20,37,192,199,11,156,53,171,181,26,37,125,172,17,
+  238,98,53,150,246,206,18,151,92,118,46,43,87,13,211,168,205,179,122,213,114,188,98,158,169,39,118,233,155,31,223,62,
+  126,109,165,177,115,253,220,252,211,203,79,142,77,136,237,79,199,251,238,190,87,124,253,129,111,122,135,15,159,82,34,223,
+  70,190,187,141,192,47,96,82,71,53,182,56,147,181,158,222,62,214,12,173,48,171,62,250,133,164,99,219,46,238,186,239,
+  126,83,238,108,147,203,54,110,20,18,141,212,25,195,93,57,156,78,96,178,205,149,204,54,84,11,162,204,214,184,147,145,
+  244,154,197,164,89,128,90,235,115,165,144,202,59,205,92,77,74,47,219,106,57,224,218,102,226,81,129,43,46,82,218,108,
+  11,237,181,164,46,94,107,228,118,62,220,82,101,110,147,25,77,180,233,229,228,249,62,65,224,103,108,124,215,121,57,44,
+  203,100,210,25,215,77,53,77,236,90,64,186,84,25,171,27,164,53,52,226,10,202,19,172,186,241,133,42,58,127,67,223,
+  222,71,30,29,41,205,213,122,67,80,101,152,223,12,101,1,73,4,44,125,219,219,158,191,5,104,60,251,119,219,128,23,
+  3,251,129,92,86,68,244,247,241,145,56,182,131,232,114,78,132,235,36,172,46,231,219,59,123,175,186,74,245,118,117,183,
+  14,238,66,116,174,204,76,157,108,139,7,198,162,216,149,197,198,222,2,11,38,193,52,230,73,107,243,196,245,42,58,137,
+  241,124,69,144,43,161,114,29,200,92,59,86,6,174,179,209,154,168,60,77,52,63,135,53,41,137,78,91,119,134,36,137,
+  51,31,95,137,18,78,45,237,7,37,62,253,153,47,179,99,247,94,132,39,73,83,227,46,62,157,98,181,165,183,183,159,
+  32,240,93,17,3,226,36,194,247,61,148,39,201,23,139,12,12,12,18,134,1,74,10,226,70,131,153,217,25,74,109,165,
+  204,145,207,1,210,2,119,65,75,41,169,215,234,76,79,79,211,209,222,65,20,69,84,170,21,242,249,60,73,146,32,148,
+  114,14,50,217,103,173,181,83,170,251,146,131,7,142,114,244,240,9,70,134,251,24,25,233,167,222,136,249,236,109,247,242,
+  133,219,239,181,227,147,147,246,170,107,46,22,70,39,89,132,112,132,16,62,18,69,41,95,96,106,42,226,111,255,224,239,
+  141,61,62,97,251,87,111,20,29,221,157,40,13,54,13,156,207,178,202,116,75,77,2,103,6,176,198,113,138,242,5,73,
+  18,209,222,86,224,188,205,235,81,50,65,134,30,39,31,221,101,58,30,223,177,43,116,180,175,47,21,224,169,101,112,112,
+  147,182,199,214,77,206,141,182,109,219,53,123,242,142,187,204,211,79,110,15,170,94,222,107,95,177,78,180,183,119,96,83,
+  221,186,80,251,134,134,197,209,71,182,177,98,116,44,218,56,95,157,62,118,239,55,27,219,43,149,220,240,69,151,200,246,
+  146,71,156,206,131,240,90,248,152,204,58,3,107,51,183,1,227,120,60,77,140,167,233,119,36,165,204,162,178,29,251,76,
+  41,185,16,13,155,45,10,164,204,198,160,236,66,111,74,6,29,107,221,165,152,98,44,86,184,116,18,229,57,221,97,115,
+  141,191,248,103,54,109,81,140,209,25,55,75,162,148,199,212,212,12,199,142,31,39,73,52,93,93,189,20,10,237,88,235,
+  225,41,191,165,49,107,254,91,23,86,96,22,109,218,50,66,43,26,169,242,206,21,179,49,199,242,13,171,233,186,233,166,
+  210,131,79,63,61,28,30,31,239,233,0,149,56,190,208,124,47,196,67,111,123,219,243,119,4,107,221,9,50,240,250,1,
+  96,45,240,170,53,43,145,97,232,248,41,223,75,125,148,146,122,185,98,211,19,39,79,73,184,175,23,66,190,124,199,245,
+  255,120,205,182,115,47,253,139,63,41,189,241,205,63,142,34,70,39,213,150,8,112,97,173,105,221,217,207,236,11,108,54,
+  79,59,115,246,24,29,85,208,245,26,186,81,93,24,159,188,128,48,95,64,132,29,224,231,29,144,104,65,144,146,68,21,
+  170,243,115,45,221,148,144,2,171,29,17,77,103,134,237,205,45,135,20,130,70,148,178,119,239,33,151,78,33,83,144,10,
+  147,56,64,51,142,99,170,149,50,29,157,157,24,107,168,204,149,209,58,37,232,238,106,49,97,141,209,132,97,128,213,134,
+  122,189,230,180,77,74,182,212,211,58,251,221,178,201,164,21,144,36,9,149,74,133,122,189,78,177,88,92,192,30,22,105,
+  102,141,78,177,169,135,111,37,229,104,134,35,39,142,114,238,218,77,220,123,223,253,172,95,183,132,253,123,70,57,116,100,
+  154,141,107,86,26,241,137,207,148,111,31,110,235,120,249,79,189,74,216,250,52,146,46,172,6,45,171,36,54,101,100,100,
+  41,175,8,84,188,241,35,95,168,238,253,242,131,118,246,103,222,216,177,226,199,110,240,11,237,17,34,138,177,186,13,76,
+  1,107,99,16,117,132,72,200,231,139,236,217,125,152,157,187,246,242,19,111,122,5,181,250,28,113,84,7,163,240,108,129,
+  40,74,45,48,7,236,177,240,144,15,186,14,29,30,116,23,160,167,4,35,75,27,233,186,232,225,167,55,158,124,108,247,
+  198,219,207,253,226,138,252,141,47,40,92,116,227,229,172,94,210,139,213,41,65,201,67,191,248,74,255,240,227,91,103,214,
+  192,225,203,82,91,63,252,193,207,45,253,244,99,59,151,109,250,213,159,204,95,126,213,5,248,141,50,73,156,100,9,166,
+  54,99,60,123,25,197,126,193,186,214,247,61,148,148,36,81,228,248,62,86,144,232,20,79,153,150,32,217,225,52,167,167,
+  184,182,44,245,237,98,91,219,76,47,47,133,147,50,89,73,20,167,25,111,200,203,206,143,110,42,104,157,5,136,92,196,
+  1,178,78,30,210,209,217,133,69,242,205,111,62,198,39,15,221,206,154,213,235,184,224,130,243,105,235,110,39,95,244,40,
+  20,10,248,210,221,112,146,216,121,133,59,174,216,130,127,139,38,64,89,75,206,226,88,231,147,83,12,15,247,240,186,143,
+  189,179,248,201,63,252,203,203,226,15,124,161,125,9,20,186,193,36,176,29,168,63,247,5,200,146,9,13,5,207,85,148,
+  152,201,112,160,49,224,43,253,125,204,108,62,151,174,158,30,12,180,192,211,239,92,233,26,144,236,217,107,87,125,234,179,
+  243,231,192,19,85,152,235,133,137,87,157,56,57,245,165,159,253,239,151,60,246,181,123,251,127,230,183,127,157,243,206,57,
+  7,72,177,182,138,209,73,214,146,11,240,146,108,26,203,185,243,29,213,137,230,231,169,215,103,93,38,148,21,110,87,32,
+  12,129,231,225,23,125,100,62,135,48,29,238,46,164,18,231,110,152,132,232,234,44,38,213,104,75,118,23,116,109,182,214,
+  137,203,231,82,77,63,22,141,31,230,217,179,239,48,7,15,31,192,147,57,103,195,160,117,6,110,250,104,171,105,36,41,
+  189,65,72,17,231,37,236,251,33,190,23,18,4,5,164,80,212,171,53,68,175,3,64,157,209,216,194,69,161,117,38,139,
+  200,18,19,92,70,188,3,45,171,149,10,213,122,149,238,30,103,47,234,186,51,55,22,26,1,158,239,17,39,154,36,181,
+  28,63,58,74,95,119,23,202,179,76,207,215,185,239,193,157,204,205,84,233,94,210,77,116,106,55,47,129,220,248,59,62,
+  24,223,221,217,21,220,242,186,91,69,50,119,10,148,135,79,9,105,37,29,29,17,43,194,180,214,3,79,119,79,78,29,
+  159,249,171,127,24,217,122,207,215,206,89,250,43,111,236,93,118,233,133,120,34,135,174,213,92,232,30,10,67,74,148,148,
+  89,189,98,132,191,248,155,247,50,173,125,126,230,45,47,67,86,29,238,148,164,30,179,115,53,177,44,75,203,243,33,250,
+  123,168,253,24,204,215,225,100,59,120,62,20,2,231,203,189,114,185,54,23,13,111,219,121,201,161,109,59,55,125,249,179,
+  159,95,90,184,229,134,252,245,175,125,57,27,58,218,88,127,227,53,60,254,206,15,229,245,116,57,74,225,209,165,240,68,
+  207,211,251,207,219,241,43,127,188,233,99,111,120,197,240,205,191,240,122,213,91,8,73,234,21,148,13,157,75,161,15,202,
+  198,32,36,146,16,223,151,236,216,190,23,223,111,99,243,133,231,17,37,51,152,40,65,105,133,39,116,230,9,21,128,20,
+  232,36,109,185,73,186,162,147,96,154,182,45,74,181,240,31,33,157,231,135,77,45,86,57,5,190,78,242,116,246,14,80,
+  77,43,40,147,34,18,75,98,157,24,217,36,206,176,77,91,183,1,13,124,144,194,167,191,119,128,87,189,252,165,236,220,
+  181,155,183,191,227,159,249,219,183,255,189,61,167,123,64,247,118,180,201,225,85,171,200,47,25,22,157,157,29,98,253,198,
+  245,116,46,233,161,20,122,4,197,144,124,144,119,72,145,1,235,187,27,87,65,135,40,235,209,16,208,217,83,228,13,239,
+  248,43,245,129,246,190,115,27,239,254,104,178,58,110,28,10,225,72,179,0,137,231,16,227,117,107,232,36,114,219,158,231,
+  120,125,46,129,39,30,124,132,244,193,71,184,165,179,147,183,175,90,197,202,222,94,82,192,51,250,59,250,57,218,83,20,
+  199,79,177,6,236,131,80,94,15,187,125,40,123,48,254,234,56,62,245,228,7,62,116,229,223,125,249,171,203,250,94,245,
+  178,252,117,175,125,37,215,93,117,57,249,176,132,181,115,78,179,147,6,88,34,226,122,149,202,220,20,245,202,73,108,195,
+  93,176,94,16,226,169,28,72,139,23,128,231,229,240,189,65,87,144,189,6,72,141,16,121,182,62,190,27,79,39,172,94,
+  94,114,153,88,102,33,165,50,77,210,204,103,199,3,163,157,225,148,181,72,229,243,212,246,167,169,215,27,72,175,13,171,
+  117,102,239,96,49,110,209,66,189,81,71,72,153,97,64,30,185,92,142,32,8,73,226,196,197,23,27,67,26,39,196,73,
+  66,20,69,132,97,216,178,90,245,148,215,242,126,110,102,72,181,214,237,88,226,56,162,80,200,19,199,206,211,198,233,151,
+  60,71,48,139,99,132,176,196,137,165,90,174,51,50,52,76,20,53,40,181,117,113,223,55,30,165,222,104,112,222,249,231,
+  50,174,149,72,160,182,57,181,243,143,253,245,187,218,30,235,42,117,95,114,203,229,34,173,52,32,81,24,25,227,21,75,
+  200,124,71,156,50,179,195,74,238,106,183,116,151,30,217,121,249,232,127,251,189,45,135,174,190,116,101,215,155,94,221,177,
+  250,178,245,180,11,73,28,91,82,91,192,143,35,6,7,218,184,238,234,139,237,29,127,255,47,186,61,158,151,175,253,201,
+  215,72,223,143,105,152,148,106,181,134,128,192,56,83,8,249,112,198,1,219,3,122,35,232,21,16,245,194,220,78,56,209,
+  7,251,125,216,190,14,182,172,62,56,122,209,158,119,126,120,237,55,110,255,218,240,137,87,190,164,125,203,207,254,184,232,
+  127,221,43,75,179,239,254,80,169,13,142,196,240,100,14,30,187,34,73,175,222,247,161,219,94,240,222,39,182,158,115,245,
+  111,252,82,120,229,69,235,208,209,156,179,242,208,30,66,120,248,138,140,119,229,156,12,254,252,143,255,214,252,196,229,87,
+  214,174,121,229,11,67,127,197,144,111,83,13,73,197,157,79,98,132,245,91,145,211,218,58,111,33,79,132,46,11,77,8,
+  140,145,11,221,144,112,238,142,214,6,36,86,211,222,222,197,195,95,127,154,233,250,94,70,54,44,165,171,179,68,87,80,
+  164,80,242,240,177,232,68,99,116,66,170,147,44,214,59,193,10,227,168,4,82,113,225,249,235,249,231,119,253,61,31,248,
+  192,199,236,204,59,62,208,120,113,66,88,127,124,167,152,130,186,133,153,3,158,31,197,189,237,121,57,212,87,202,15,244,
+  250,221,93,189,150,124,65,106,15,225,231,124,26,113,34,210,68,136,40,182,162,166,181,80,57,161,148,178,178,160,125,142,
+  118,150,250,151,159,106,116,10,199,200,193,211,139,52,42,223,119,167,34,21,65,146,176,121,231,3,168,36,250,129,140,100,
+  194,97,56,44,153,157,101,199,19,79,224,175,92,201,165,235,215,49,154,47,226,39,201,183,237,186,140,231,225,123,62,5,
+  224,239,129,235,161,241,135,112,100,43,84,27,48,113,17,28,222,52,54,118,241,142,127,254,215,141,31,253,200,39,134,63,
+  245,194,23,22,110,250,137,31,231,250,155,46,101,160,171,155,164,82,229,212,177,253,68,245,58,58,173,97,68,10,66,226,
+  217,60,8,65,24,8,148,50,120,42,36,8,123,17,170,4,54,198,120,21,148,232,228,201,39,182,242,207,127,247,65,254,
+  247,31,253,12,86,85,80,34,135,162,66,108,155,137,74,11,138,116,99,28,111,68,10,73,146,194,182,167,158,206,146,33,
+  88,72,86,0,140,73,65,26,146,164,129,53,9,81,92,199,247,21,160,49,54,205,70,170,148,122,189,158,229,77,185,181,
+  124,144,249,251,52,199,5,167,144,23,45,207,104,128,192,119,49,47,190,231,103,29,83,102,33,225,172,11,221,198,204,243,
+  65,107,142,30,58,72,169,173,216,2,84,133,16,116,116,180,211,209,217,65,26,43,84,216,41,82,24,53,240,196,249,213,
+  70,238,208,31,252,237,69,79,21,255,96,213,249,215,93,33,146,169,57,18,157,71,22,3,212,208,128,210,219,15,207,43,
+  196,30,35,152,53,214,238,29,210,118,71,116,239,195,23,159,120,232,209,243,199,206,95,183,180,235,229,47,111,95,253,162,
+  43,68,79,41,79,82,241,41,91,201,171,111,125,161,221,248,190,79,234,218,63,124,216,124,106,223,17,239,210,95,253,111,
+  114,229,186,62,130,66,160,44,120,10,100,10,66,122,138,255,91,12,185,38,78,145,245,152,62,87,140,204,19,80,253,125,
+  56,180,31,78,85,97,175,128,39,206,133,245,201,209,209,115,103,254,225,223,206,125,236,190,251,87,207,14,247,23,151,64,
+  93,193,116,10,251,82,56,96,224,248,42,24,239,222,121,160,250,185,95,255,223,23,236,251,169,215,151,222,240,166,91,241,
+  61,75,28,37,120,228,144,120,136,32,161,30,85,217,176,121,35,231,93,112,142,173,124,240,227,250,196,231,190,24,249,55,
+  191,48,237,252,137,87,230,58,214,12,8,17,105,116,212,128,36,1,153,102,17,105,46,225,213,26,144,66,97,132,108,197,
+  221,139,204,122,54,53,26,105,37,82,248,8,242,12,140,172,225,61,63,253,139,201,13,105,61,153,238,235,150,141,174,110,
+  149,95,187,214,27,220,184,94,244,175,24,97,201,146,126,58,219,114,132,129,165,16,148,48,217,150,20,43,136,26,41,190,
+  87,224,23,126,225,151,229,189,203,55,22,239,251,179,191,49,151,159,154,176,23,65,57,130,167,72,147,29,140,77,233,116,
+  108,170,207,64,91,234,80,133,86,146,116,152,33,88,6,2,235,188,208,187,50,71,160,74,30,182,106,41,247,42,225,188,
+  236,213,139,151,174,19,205,20,200,239,235,67,41,66,157,226,237,124,128,115,230,38,233,200,212,228,223,207,22,172,23,120,
+  20,184,52,91,199,55,181,90,2,56,31,248,48,176,105,118,150,63,59,118,156,253,198,80,238,237,117,140,228,111,225,3,
+  98,165,196,171,84,216,116,242,36,95,7,206,3,86,128,249,18,212,150,194,120,10,71,20,28,29,129,83,23,71,81,165,
+  125,207,30,253,224,231,110,247,63,249,149,123,195,121,191,32,214,174,94,74,163,122,16,17,73,156,223,118,128,17,78,135,
+  19,248,142,206,46,101,72,174,212,133,42,118,160,101,10,94,29,37,251,184,247,158,199,245,47,191,241,231,163,11,182,108,
+  244,94,250,170,43,132,49,57,68,90,192,36,51,36,38,33,73,13,198,56,98,159,109,234,115,16,72,79,50,51,23,241,
+  177,143,127,142,249,114,29,169,194,150,126,168,169,138,22,210,97,11,195,35,195,84,202,101,146,36,33,78,92,183,146,203,
+  231,40,20,74,228,139,37,250,250,250,91,152,78,46,151,35,151,203,157,230,78,208,36,162,57,16,186,70,163,222,192,90,
+  71,74,108,235,232,68,8,209,50,44,203,96,119,60,47,192,232,148,167,182,61,201,146,165,75,90,155,65,169,20,129,23,
+  226,41,143,48,204,49,55,53,46,250,247,238,58,220,109,184,67,195,99,157,81,194,145,7,30,239,143,54,109,236,24,94,
+  61,76,18,205,33,61,143,234,227,59,35,182,239,123,82,89,30,46,88,142,90,24,175,101,231,165,215,216,147,157,39,38,
+  231,167,238,126,64,60,177,125,87,219,76,247,176,223,183,118,25,129,151,208,222,214,43,78,126,253,97,214,142,77,84,139,
+  251,143,206,222,245,245,251,189,249,225,165,126,189,28,137,182,199,183,141,118,194,55,107,176,111,255,210,222,248,134,151,92,
+  140,89,210,203,138,147,211,244,68,9,51,64,21,208,171,151,216,125,133,48,233,105,196,179,210,152,227,53,56,32,224,64,
+  9,78,20,199,39,199,242,251,143,28,42,193,99,10,30,213,112,34,7,101,13,211,26,38,11,80,63,55,74,228,177,71,
+  159,108,187,251,192,201,226,208,5,231,139,190,238,18,58,78,193,170,44,119,76,18,248,121,180,240,101,253,174,251,88,87,
+  139,166,234,59,247,28,63,126,215,125,241,201,169,185,92,95,111,191,144,253,93,210,10,139,48,54,211,214,57,50,163,208,
+  110,60,246,164,135,20,94,198,168,118,157,144,242,220,6,214,74,103,96,56,48,178,18,253,196,86,125,209,238,253,51,107,
+  103,202,187,87,158,60,245,116,251,142,93,19,115,247,220,95,59,246,149,187,211,167,190,118,31,15,60,252,184,183,239,216,
+  184,56,49,17,83,77,61,252,124,158,66,123,59,126,222,177,216,173,110,176,225,220,13,162,235,186,203,229,103,246,238,146,
+  246,196,68,60,12,71,19,120,60,133,135,44,60,98,224,9,31,30,43,192,163,1,60,18,102,31,121,120,196,135,199,61,
+  216,25,194,174,188,235,22,191,33,224,94,223,218,237,135,172,157,217,244,182,183,25,245,146,21,231,56,127,145,239,241,67,
+  72,1,65,192,188,73,97,251,253,12,206,79,209,151,97,54,63,140,2,180,18,120,181,214,148,38,39,41,38,9,7,187,
+  58,91,6,234,223,174,0,125,3,216,12,228,129,29,96,127,22,226,131,48,171,225,164,128,131,22,14,247,192,177,243,77,
+  58,179,124,116,212,124,253,11,119,228,239,124,234,80,126,217,69,235,24,236,107,39,137,28,211,85,18,226,7,41,82,20,
+  193,20,201,183,43,194,206,14,180,42,146,98,240,85,192,189,119,61,200,87,222,244,179,213,181,227,39,167,110,253,223,191,
+  218,182,124,245,106,169,100,55,245,250,52,81,189,74,28,107,180,112,185,230,82,169,69,32,166,196,247,124,246,29,28,227,
+  246,59,238,67,27,151,81,165,141,201,120,59,182,101,222,174,60,197,64,127,63,73,146,16,134,97,139,88,88,200,231,105,
+  107,239,192,243,3,6,7,7,169,84,42,204,205,205,209,222,222,222,250,190,166,61,135,148,110,11,150,38,9,245,122,157,
+  90,173,70,28,199,88,225,128,74,99,140,219,130,9,129,54,218,89,148,134,1,7,15,236,227,228,137,227,12,15,15,83,
+  40,20,1,137,209,6,147,26,124,207,35,159,11,153,26,61,70,207,238,221,227,253,134,251,45,60,2,204,245,214,27,109,
+  187,190,241,80,95,99,243,154,210,200,234,97,172,81,212,183,29,142,147,199,182,61,225,195,19,59,96,186,0,105,23,148,
+  171,48,30,9,14,43,193,145,94,152,30,56,62,158,238,190,243,238,226,131,251,15,149,114,131,35,98,120,195,57,76,157,
+  154,162,246,224,35,199,122,96,219,218,249,250,232,182,187,31,236,248,242,216,104,225,220,70,116,178,95,235,7,124,216,183,
+  175,171,20,7,107,6,201,21,67,70,67,159,205,135,79,49,3,204,0,135,54,44,231,67,29,121,57,210,209,97,143,143,
+  79,197,1,148,115,112,202,194,97,96,79,0,79,120,240,100,93,136,163,58,80,245,131,66,216,47,26,155,92,15,179,21,
+  24,19,48,177,222,82,111,63,116,212,191,247,193,199,59,146,145,149,254,202,117,43,193,68,24,237,52,88,88,75,123,87,
+  7,163,247,127,179,209,55,53,191,61,128,123,219,106,141,253,114,235,174,74,245,174,175,219,164,26,133,114,100,73,40,59,
+  219,178,248,69,7,40,123,74,183,54,175,205,121,64,168,166,215,143,51,169,55,194,45,37,242,249,2,39,103,102,100,124,
+  223,67,39,74,136,175,74,248,98,9,158,88,1,79,175,77,210,189,235,102,203,199,87,30,25,157,146,143,110,175,142,223,
+  253,141,248,208,61,247,153,167,190,122,143,61,240,228,14,230,199,103,68,106,60,225,229,138,104,1,75,150,143,112,201,43,
+  95,204,214,208,43,28,222,177,163,115,56,210,70,194,9,3,79,3,251,103,225,216,1,56,49,14,39,230,225,196,180,251,
+  56,94,132,99,2,14,249,176,199,135,157,13,120,58,129,35,67,48,247,215,160,223,248,182,183,225,9,249,125,64,197,82,
+  210,240,2,134,70,15,145,28,218,201,88,117,158,149,63,34,211,176,26,112,245,161,67,220,118,242,36,226,242,203,88,210,
+  209,65,242,221,2,212,192,0,104,237,214,132,149,125,48,154,194,118,3,143,117,193,133,111,49,233,165,7,238,252,220,249,
+  31,219,241,224,234,235,255,248,55,11,215,94,117,1,113,89,59,169,187,9,176,214,195,47,6,228,218,219,209,170,13,132,
+  36,39,75,124,225,75,119,114,255,79,255,82,114,235,248,132,255,200,138,165,253,43,55,111,86,66,150,72,210,136,90,99,
+  14,99,5,214,74,200,172,54,155,160,176,187,187,73,60,21,114,114,116,130,212,56,150,181,209,169,115,198,75,77,166,60,
+  119,164,182,52,77,169,214,106,52,50,15,231,92,46,68,8,168,55,26,89,102,151,243,140,158,154,158,98,110,110,142,129,
+  129,129,5,155,212,108,164,211,70,163,50,207,155,52,117,164,198,106,181,130,231,251,36,113,130,206,120,63,90,107,242,249,
+  60,169,209,68,81,196,83,219,183,227,73,65,165,90,161,84,106,39,8,66,26,245,26,105,154,96,140,231,112,138,92,136,
+  17,228,51,130,123,213,131,71,19,40,108,158,156,11,182,255,250,159,95,227,255,253,255,238,63,247,134,23,210,144,70,130,
+  75,201,121,8,196,91,193,222,13,118,9,212,102,45,117,96,178,33,196,49,15,14,92,147,166,7,199,239,184,247,138,39,
+  239,121,96,237,209,87,221,218,21,172,88,45,165,146,149,78,109,190,14,204,223,92,111,28,89,115,108,236,188,46,216,149,
+  194,148,5,253,226,137,57,246,221,189,29,5,36,229,6,201,162,243,159,79,13,129,48,70,9,56,1,244,129,93,14,141,
+  163,48,30,193,196,90,144,135,193,204,251,210,188,125,197,32,7,106,49,155,142,79,48,15,209,52,28,233,132,57,5,199,
+  151,193,161,225,67,199,175,121,236,55,254,232,162,175,253,226,79,12,190,224,167,94,169,2,79,19,55,98,132,214,116,117,
+  21,232,190,228,60,191,190,247,120,84,128,29,177,146,7,75,218,12,218,153,249,205,245,127,251,216,150,185,207,127,229,156,
+  220,143,191,108,73,223,107,94,150,207,181,21,33,174,97,50,224,88,217,108,3,108,29,7,72,169,192,57,88,26,231,221,
+  108,132,32,169,85,24,222,114,190,216,147,15,252,161,70,50,223,64,108,75,5,147,214,216,64,64,187,133,158,60,12,110,
+  132,193,77,38,237,53,19,211,131,241,196,116,87,125,247,225,82,237,243,95,27,56,224,121,67,71,6,7,11,233,178,193,
+  112,186,183,35,23,172,90,233,47,61,247,60,30,127,237,107,6,30,250,208,39,94,116,101,172,27,10,198,139,48,243,105,
+  136,62,212,215,205,96,123,27,7,14,30,109,221,252,127,215,65,28,81,46,107,36,174,200,232,53,197,214,240,254,253,48,
+  161,133,36,108,212,8,14,63,206,227,227,71,88,251,28,225,72,223,239,163,22,69,60,241,205,135,185,229,242,203,232,250,
+  30,139,144,7,12,131,57,8,213,21,80,59,8,147,9,28,154,23,114,247,10,107,47,93,118,124,226,202,135,126,227,109,
+  91,202,191,242,203,3,183,254,216,11,105,164,117,148,113,166,233,165,206,78,164,215,71,66,153,128,28,159,249,216,167,120,
+  232,215,126,179,114,203,196,116,53,133,98,254,130,11,242,189,67,75,49,186,76,101,126,28,27,57,5,181,54,41,70,91,
+  252,64,185,13,136,118,43,82,109,44,105,170,217,127,240,176,75,193,96,193,71,88,32,72,181,65,41,71,92,75,226,20,
+  107,156,245,66,18,167,248,126,64,177,88,36,31,58,249,130,231,121,142,207,83,169,180,186,35,173,77,198,204,21,89,2,
+  170,201,220,236,154,210,15,141,214,154,98,91,137,40,170,103,250,38,183,190,215,58,37,151,207,241,248,147,79,114,248,208,
+  97,150,45,91,74,165,82,71,14,73,192,9,92,141,78,73,211,8,131,34,150,109,52,82,81,144,216,206,216,193,242,39,
+  21,124,221,3,177,121,114,142,253,191,246,167,215,242,119,165,190,153,184,33,187,93,60,149,120,11,240,242,204,175,169,238,
+  220,41,237,16,212,235,214,30,30,133,153,72,136,163,157,214,238,185,161,145,108,153,253,216,231,54,77,75,217,222,5,219,
+  53,108,87,176,47,129,61,171,140,89,38,92,103,187,207,135,248,162,106,196,37,7,198,91,55,175,33,224,224,34,166,188,
+  56,203,242,35,155,108,116,7,232,70,246,30,241,172,68,90,129,201,58,247,127,129,244,245,48,85,133,39,187,221,181,118,
+  228,170,36,57,122,236,29,31,184,242,246,3,251,55,92,249,91,191,144,31,233,233,163,81,157,69,10,205,210,27,94,16,
+  158,250,212,87,250,243,113,154,151,150,195,8,177,211,90,187,35,132,39,194,83,83,23,215,254,254,253,151,237,251,210,125,
+  155,251,222,242,250,129,190,235,174,240,115,93,3,136,70,13,97,83,36,22,147,166,238,153,25,157,73,187,36,224,12,225,
+  172,110,48,178,106,5,187,54,172,239,74,158,220,62,4,20,123,44,7,31,2,221,11,19,75,224,112,23,132,51,144,143,
+  17,5,129,237,244,160,216,14,133,18,44,85,105,122,142,62,126,124,40,61,126,220,31,0,111,30,218,27,208,115,89,46,
+  223,145,211,4,13,33,86,230,172,93,86,129,29,63,37,68,237,215,63,245,46,214,94,123,13,47,125,201,143,243,197,47,
+  221,115,26,141,166,150,25,252,93,189,232,152,126,207,82,140,102,247,55,170,35,186,142,236,100,213,232,17,118,192,115,182,
+  114,127,46,120,67,68,17,247,126,243,97,174,187,252,50,58,59,58,90,196,188,239,5,240,14,192,182,67,180,27,78,46,
+  179,102,182,140,56,26,192,209,107,103,235,149,187,255,234,237,47,188,179,144,239,187,233,213,215,17,71,51,20,114,125,248,
+  133,54,12,49,129,24,224,99,239,127,55,123,126,229,183,199,95,90,105,60,29,184,147,176,118,217,11,175,42,42,124,234,
+  177,38,169,205,227,153,186,179,68,85,202,217,36,32,72,18,237,232,241,64,16,228,72,146,148,39,183,62,69,35,74,240,
+  61,129,177,41,24,213,98,164,57,129,161,19,192,234,212,129,195,133,66,129,48,8,72,19,195,124,92,163,119,64,58,14,
+  84,163,65,173,90,35,23,132,217,136,119,198,5,39,197,105,120,16,64,18,199,36,73,12,130,76,107,102,90,65,127,179,
+  179,179,220,127,255,55,72,210,148,249,185,121,226,40,198,247,67,146,36,38,142,99,226,36,194,226,145,198,101,148,138,137,
+  124,169,68,172,125,235,8,9,169,239,64,233,123,37,232,181,147,51,122,247,175,252,246,213,39,7,10,225,53,80,21,160,
+  119,0,247,1,31,3,126,43,3,56,243,110,148,215,255,2,211,55,88,91,85,112,60,22,98,91,27,118,77,187,49,69,
+  11,199,37,236,170,194,120,23,140,213,97,123,10,166,46,101,237,27,195,189,122,133,239,157,150,95,158,19,130,227,99,83,
+  20,234,17,241,183,120,47,136,51,254,44,206,120,223,231,28,152,109,39,160,254,98,56,44,97,38,129,227,35,48,154,255,
+  210,3,47,186,227,196,196,69,235,127,253,87,74,87,93,184,14,157,206,227,15,245,49,223,221,217,63,56,54,57,130,49,
+  185,57,24,87,80,109,131,113,33,196,254,146,181,187,114,251,14,93,89,253,253,191,188,120,124,211,186,181,226,101,47,238,
+  94,243,226,27,188,222,193,110,68,92,65,103,90,178,38,107,217,136,24,35,20,34,219,156,182,21,187,105,223,114,65,169,
+  241,228,246,21,121,88,90,135,253,151,64,101,22,204,16,152,149,144,252,37,84,126,222,90,49,5,199,43,32,102,92,154,
+  111,41,129,135,45,116,20,192,203,131,44,66,73,66,31,141,122,95,10,131,218,109,196,70,243,136,184,108,45,203,239,126,
+  16,174,125,5,27,54,110,56,173,0,125,39,55,251,239,234,130,180,22,166,106,85,198,100,76,199,98,178,220,243,236,209,
+  136,34,190,254,205,135,121,225,229,151,225,117,118,226,125,7,27,178,179,233,198,196,130,67,162,189,20,170,59,176,251,231,
+  161,170,133,240,175,141,211,206,47,252,237,187,175,28,216,60,84,218,114,241,58,114,94,63,34,168,33,100,59,31,124,199,
+  59,25,251,173,223,61,126,83,212,248,134,134,29,22,86,207,230,139,107,87,95,122,190,80,212,209,181,50,164,150,84,7,
+  88,45,209,52,220,109,86,40,84,38,85,208,169,65,169,54,118,239,61,194,201,147,167,92,168,96,22,146,103,50,55,69,
+  175,233,189,108,93,56,93,189,94,199,247,61,230,203,179,228,146,156,219,194,120,30,214,172,68,24,67,212,168,97,172,118,
+  235,220,38,246,211,202,102,207,248,24,89,122,130,1,231,49,29,69,206,134,213,104,116,154,102,221,86,66,24,6,60,249,
+  196,99,148,231,102,41,21,243,36,105,76,35,106,100,99,90,246,243,165,159,177,101,53,185,80,226,11,105,45,90,148,64,
+  252,155,235,28,244,159,194,216,46,248,134,133,198,218,153,185,67,29,149,249,110,43,217,17,26,202,87,184,84,52,74,25,
+  126,88,207,126,178,6,118,3,111,133,72,193,216,46,107,167,27,176,39,20,194,171,75,17,89,109,170,239,242,189,244,173,
+  198,38,161,214,141,195,64,163,187,131,111,44,25,224,65,125,58,101,67,41,201,73,33,248,229,131,39,158,181,0,125,55,
+  239,153,28,240,9,208,183,194,76,55,108,77,161,218,13,241,181,219,246,218,79,253,202,111,111,25,253,221,95,45,189,230,
+  213,55,83,236,21,212,134,58,58,205,216,228,50,31,250,234,112,98,24,146,97,40,111,149,226,64,155,182,147,33,28,44,
+  193,246,252,206,189,151,204,236,220,123,254,163,159,248,236,170,244,69,215,247,174,127,205,139,228,218,149,61,4,113,13,83,
+  49,52,82,1,94,128,210,9,74,164,104,37,17,166,74,215,85,23,4,99,239,249,208,170,53,150,115,12,60,5,84,125,
+  176,126,118,179,62,226,206,129,109,128,126,218,9,181,211,155,161,113,24,102,134,64,238,2,209,6,98,0,60,1,97,234,
+  146,96,58,178,17,234,212,56,182,118,29,80,124,247,135,225,143,222,10,66,127,247,13,195,119,116,96,133,196,0,115,149,
+  154,243,167,201,188,75,44,207,223,71,45,138,56,255,155,15,115,217,196,4,137,82,24,241,253,149,74,15,184,0,116,55,
+  140,167,214,62,0,124,249,134,137,241,39,119,254,233,59,235,185,96,53,109,61,189,88,217,205,71,255,242,159,152,252,141,
+  223,60,246,130,168,113,183,134,219,45,236,139,161,48,191,102,99,199,138,181,27,193,84,80,113,29,163,45,41,22,45,42,
+  24,17,103,33,115,26,99,82,164,213,40,233,168,246,123,246,29,165,92,174,226,43,233,66,246,204,226,188,115,219,18,204,
+  98,33,77,83,2,223,35,151,11,240,125,137,177,41,65,224,19,6,62,2,75,163,94,39,201,212,210,14,247,113,96,119,
+  83,41,45,113,98,198,32,8,9,124,31,107,13,141,70,131,184,17,145,100,192,116,212,104,224,7,62,211,211,211,60,245,
+  212,54,2,223,233,146,242,249,128,56,142,136,227,40,187,176,61,60,149,209,249,133,64,6,62,210,247,91,117,206,7,113,
+  151,235,50,181,128,49,11,95,71,240,193,37,154,119,74,195,253,101,152,237,7,126,26,120,109,214,253,248,139,72,107,217,
+  104,68,135,139,48,140,34,152,94,109,237,169,138,54,115,13,41,210,137,149,35,252,159,229,67,220,213,81,34,1,62,219,
+  221,142,106,196,200,40,125,198,71,162,159,219,119,114,0,236,3,251,110,168,247,193,222,58,220,81,144,226,246,31,47,215,
+  31,158,250,139,127,152,189,235,182,187,40,118,15,209,253,194,171,75,115,176,82,192,112,55,132,99,192,161,165,195,220,38,
+  68,218,6,211,35,240,84,10,183,11,120,111,63,188,103,195,161,163,159,233,123,247,251,31,249,230,27,127,105,226,115,255,
+  252,49,115,232,100,3,89,232,193,107,11,65,214,145,194,195,218,34,58,205,147,214,35,86,92,184,145,227,171,151,142,36,
+  112,142,129,37,101,8,206,119,16,3,53,22,34,149,197,233,98,109,0,29,67,242,147,16,255,6,68,18,170,19,48,189,
+  27,78,204,57,238,220,110,11,147,135,65,231,0,101,191,143,137,229,219,147,11,21,158,209,84,230,43,46,127,92,8,254,
+  163,60,186,162,136,223,125,240,33,126,126,199,14,26,158,71,34,229,247,84,54,69,182,153,59,8,108,133,164,29,142,104,
+  248,106,27,124,101,237,55,183,239,251,210,255,125,39,141,134,229,206,95,255,221,200,254,238,31,61,125,121,170,191,20,195,
+  103,44,60,233,9,81,152,130,165,237,55,95,87,234,236,25,164,17,107,146,52,197,88,13,162,225,140,226,61,7,24,75,
+  233,10,137,182,77,27,77,143,67,135,142,208,204,55,183,100,248,79,214,13,37,73,66,146,164,45,169,72,163,81,207,100,
+  68,34,35,34,6,180,181,181,99,45,52,26,13,106,149,106,150,7,238,182,93,77,75,6,33,197,130,129,89,22,84,87,
+  44,21,169,215,235,206,80,107,33,34,47,243,149,150,60,244,208,131,212,170,85,4,130,192,15,72,181,161,209,168,19,69,
+  81,246,124,220,129,51,198,32,172,34,159,47,34,60,217,58,250,33,112,0,248,128,251,179,46,193,244,180,101,207,148,177,
+  59,13,140,190,11,226,165,89,231,211,147,73,113,78,102,255,238,91,61,20,48,213,222,70,90,40,112,220,83,226,51,253,
+  221,76,251,222,247,124,145,124,175,227,123,30,120,63,240,215,208,232,130,253,210,218,47,74,33,62,241,242,114,253,75,242,
+  247,255,252,208,151,254,244,29,182,227,156,243,68,226,201,162,128,124,0,42,41,20,184,125,203,38,246,158,187,156,82,33,
+  180,195,16,23,224,148,132,173,53,248,130,17,226,125,67,240,111,215,78,204,222,214,255,183,239,127,228,209,31,255,31,227,
+  95,123,251,187,147,137,163,167,80,165,30,76,24,144,40,67,138,65,164,138,174,66,55,118,195,186,194,60,172,148,176,172,
+  13,242,191,8,172,206,54,201,143,103,29,219,183,42,12,205,73,96,30,56,1,118,214,221,48,180,1,27,60,7,174,23,
+  223,242,225,123,1,113,220,224,166,237,15,242,249,193,181,212,242,37,22,242,35,254,227,60,94,114,232,48,162,82,225,223,
+  55,111,102,214,247,191,43,29,153,205,222,76,63,9,124,57,251,218,79,64,227,23,225,64,10,247,244,65,223,145,119,254,
+  115,225,75,95,249,106,91,241,177,39,183,173,132,111,212,225,126,31,118,10,65,155,176,118,233,177,32,24,217,252,162,23,
+  10,73,149,212,206,97,109,140,180,206,30,65,10,133,209,100,118,12,174,250,184,20,76,69,20,165,28,61,54,234,128,229,
+  36,93,176,118,205,56,64,77,187,141,166,104,49,73,19,210,196,145,202,42,213,170,91,183,183,181,163,148,200,54,37,134,
+  66,46,143,144,146,56,137,1,129,31,248,24,227,152,177,2,233,214,238,153,71,241,244,244,36,113,220,64,27,77,163,209,
+  192,247,125,60,223,103,247,238,61,236,221,179,151,92,232,236,52,172,181,78,31,100,52,229,242,28,185,92,216,26,197,154,
+  26,51,63,231,163,23,4,222,173,187,238,59,112,38,85,43,129,74,22,206,209,140,188,94,36,133,250,158,186,109,63,155,
+  79,127,20,157,122,243,245,189,23,184,1,26,67,150,253,158,176,243,137,224,248,185,150,35,39,223,247,241,43,230,191,122,
+  95,223,160,231,111,51,105,116,18,72,162,98,158,40,244,68,161,183,221,70,199,39,17,181,136,28,216,54,136,231,96,188,
+  108,237,108,4,71,66,33,182,143,88,54,143,76,78,159,55,255,222,143,174,63,249,233,47,172,60,122,243,245,35,93,175,
+  127,121,113,233,166,85,120,73,21,146,136,156,77,233,187,226,82,111,223,237,95,27,190,18,150,166,80,186,9,102,207,201,
+  158,91,31,80,254,46,143,173,92,4,206,243,131,44,64,57,47,96,235,216,17,46,57,180,131,142,90,5,59,178,241,91,
+  197,60,63,175,31,22,88,61,49,201,173,15,63,204,23,151,46,37,254,14,95,134,5,84,232,81,236,43,210,103,45,61,
+  217,129,175,10,193,234,40,173,111,159,168,238,202,195,23,150,206,150,39,244,99,79,134,30,236,52,176,53,132,99,57,104,
+  84,45,189,18,122,231,151,246,119,174,88,51,140,52,9,126,45,160,62,171,72,26,9,90,217,204,46,193,137,65,37,158,
+  243,151,22,128,244,40,87,235,204,204,149,93,146,106,83,95,151,233,181,50,143,52,164,116,185,95,22,50,37,123,22,131,
+  99,45,149,114,153,84,59,100,67,107,87,68,38,167,166,24,28,26,66,27,227,236,53,117,150,25,134,6,147,105,172,180,
+  38,78,98,166,166,167,41,228,29,97,177,214,136,90,69,236,145,71,31,161,88,44,58,83,45,207,195,88,67,181,90,165,
+  167,187,135,70,189,65,146,56,47,37,151,129,5,58,241,72,101,129,138,81,207,32,126,236,3,30,2,54,101,221,139,121,
+  142,222,220,103,43,6,63,170,71,4,204,66,114,200,114,242,133,80,158,23,156,28,18,98,155,57,62,90,170,11,113,164,
+  164,228,158,57,109,26,43,227,152,251,26,117,139,49,46,162,121,209,207,104,119,31,81,25,198,231,173,157,17,66,28,70,
+  200,199,74,66,172,108,159,47,159,87,253,212,231,46,57,244,229,187,207,219,127,203,13,131,171,95,249,226,96,205,121,107,
+  177,74,177,246,178,45,124,165,191,171,199,156,154,89,146,66,231,18,24,237,118,93,12,41,240,89,92,224,230,143,66,153,
+  254,172,191,179,232,7,220,115,226,32,159,223,245,8,55,103,99,216,127,228,135,197,121,10,13,87,107,60,182,123,15,243,
+  89,31,247,237,94,149,1,122,54,13,176,230,61,175,227,252,70,210,122,67,4,161,199,145,253,19,54,120,203,39,103,195,
+  122,250,88,13,14,27,183,217,153,42,192,108,9,210,237,32,87,128,104,128,39,134,151,132,125,67,75,64,38,164,182,76,
+  156,206,145,16,147,106,237,178,211,180,51,244,210,194,173,197,141,209,4,126,200,190,253,123,153,154,158,35,8,115,89,170,
+  230,162,43,202,100,209,127,214,233,194,76,150,233,222,244,152,9,130,160,149,243,21,199,49,24,75,173,90,229,216,209,163,
+  244,245,15,144,102,244,123,41,165,43,70,153,69,131,84,46,158,55,141,83,78,157,154,96,233,210,17,170,181,90,203,14,
+  116,219,142,29,140,79,76,48,60,56,224,114,231,27,53,230,230,202,88,107,153,157,157,161,90,173,96,76,63,158,231,161,
+  73,51,103,65,73,42,13,54,244,229,217,238,182,31,199,197,35,249,217,197,250,159,237,225,3,211,238,195,62,12,243,203,
+  44,187,114,214,30,77,65,21,125,191,241,84,28,215,255,16,204,137,185,50,183,140,79,225,183,121,207,90,68,219,220,71,
+  60,111,237,68,206,218,233,26,28,138,29,227,120,247,134,249,242,11,231,63,249,239,91,14,124,241,43,75,182,95,123,69,
+  207,218,55,252,88,176,246,242,43,232,219,120,78,208,56,245,64,78,65,104,23,185,202,248,217,53,48,138,243,109,87,207,
+  135,2,84,244,3,238,61,126,128,247,239,126,148,206,31,192,221,232,71,253,40,0,159,92,24,165,190,109,225,66,128,240,
+  37,42,149,173,55,129,39,5,81,123,142,193,246,208,60,89,79,103,111,128,249,0,120,59,216,139,221,156,204,52,216,21,
+  78,241,59,90,124,122,207,169,143,188,237,15,150,47,191,98,11,253,131,253,12,181,15,225,217,105,114,170,141,184,58,141,
+  64,99,108,232,50,161,132,15,66,16,4,121,142,30,61,73,28,155,86,212,110,147,249,108,157,149,139,43,26,210,81,252,
+  109,43,194,215,109,183,234,181,58,245,122,157,48,12,241,148,34,214,9,167,38,38,168,84,42,207,72,220,212,38,235,156,
+  204,194,10,190,94,143,40,151,43,204,205,151,201,231,10,132,97,200,212,204,12,199,30,127,188,209,38,165,138,226,216,239,
+  234,233,116,73,17,137,38,137,28,151,105,102,118,150,254,106,149,66,62,159,153,162,25,148,210,120,42,38,202,73,121,182,
+  134,100,183,227,209,240,42,254,115,63,60,96,7,176,20,226,99,16,231,129,210,77,87,146,91,49,200,137,127,250,184,123,
+  207,125,155,72,225,69,155,103,91,130,180,8,243,7,160,218,14,51,41,140,182,193,246,77,213,218,218,202,151,190,182,246,
+  216,157,247,174,20,155,206,41,92,52,57,121,12,216,173,96,38,6,83,57,227,186,142,29,190,195,16,252,80,199,85,239,
+  217,138,207,251,118,63,250,221,173,201,254,131,62,222,149,97,59,133,111,83,133,172,113,24,71,11,143,48,22,180,107,147,
+  143,2,189,142,153,195,49,224,66,224,114,96,5,216,105,167,66,121,248,146,169,153,158,177,191,122,215,229,251,61,57,242,
+  228,210,161,206,210,133,23,22,251,183,44,83,165,117,151,176,118,237,106,74,254,12,245,90,68,16,228,29,94,163,53,66,
+  10,142,30,61,74,162,173,75,218,104,122,49,11,167,126,55,194,100,91,48,183,138,39,179,224,108,90,105,68,113,140,78,
+  83,252,192,39,8,3,202,243,21,102,166,167,221,184,102,108,43,230,87,9,73,98,210,140,5,237,108,65,165,116,88,144,
+  167,60,242,249,2,113,148,224,43,159,189,251,246,243,170,169,169,169,109,61,221,249,131,97,208,45,148,114,91,81,79,97,
+  234,49,198,58,32,60,142,35,114,97,136,20,206,49,47,77,53,167,166,230,145,58,80,153,171,18,157,96,123,178,21,187,
+  197,241,125,150,0,23,253,144,47,130,31,5,54,180,248,186,210,75,6,24,122,221,141,144,21,160,239,118,172,44,0,79,
+  128,190,2,166,82,167,191,218,39,161,175,0,203,55,26,189,212,108,223,30,26,152,180,82,238,212,198,140,111,2,179,129,
+  103,26,52,75,135,193,177,251,71,85,128,206,44,62,207,199,49,202,126,171,78,229,123,120,236,199,153,223,255,222,115,244,
+  28,115,192,71,129,123,178,150,251,106,168,156,11,79,104,152,29,134,39,71,82,179,70,31,58,177,180,118,232,68,127,249,
+  51,12,29,232,40,141,60,116,238,218,174,53,175,185,53,184,238,166,11,32,73,49,54,64,72,69,189,150,242,244,206,253,
+  68,105,130,239,41,23,5,148,113,126,180,113,186,32,165,188,214,129,145,66,97,172,35,11,166,105,74,20,69,72,169,240,
+  85,72,146,164,212,234,53,202,213,50,169,78,152,153,157,164,189,171,141,36,73,145,210,169,223,61,33,208,169,198,42,231,
+  114,23,248,30,74,73,106,229,50,126,143,199,241,153,9,186,79,30,169,94,232,137,233,199,69,184,52,78,34,82,29,19,
+  120,121,106,166,1,194,144,36,49,141,70,204,220,220,60,133,124,17,37,4,66,26,142,29,29,101,223,137,99,108,136,202,
+  210,66,177,12,185,95,3,249,151,89,94,195,226,115,248,24,206,61,204,240,255,200,35,77,73,171,245,239,235,71,152,108,
+  34,159,131,218,90,168,165,48,49,9,135,114,144,87,66,72,35,101,162,181,174,134,16,165,223,98,252,249,97,99,101,222,
+  243,181,248,216,179,108,63,100,118,119,236,18,66,230,133,224,45,198,216,243,129,186,227,129,144,126,31,7,240,95,221,29,
+  153,151,63,7,179,254,195,89,39,4,112,23,152,79,193,140,15,79,213,224,160,231,172,96,123,124,232,25,128,21,75,231,
+  42,91,230,31,120,242,226,175,76,79,175,191,232,218,75,242,29,57,139,173,67,222,11,24,155,172,48,54,117,18,223,115,
+  62,65,206,22,214,37,17,52,237,51,28,33,217,189,106,99,156,249,124,24,6,132,97,64,20,53,16,66,81,42,181,161,
+  148,199,204,236,44,81,163,129,84,146,233,233,41,150,44,91,146,117,47,26,161,157,19,162,148,210,129,210,198,1,219,243,
+  115,51,4,74,146,6,146,147,199,14,218,159,47,151,119,14,167,246,120,151,79,71,156,212,58,203,179,51,148,74,61,228,
+  194,128,164,94,195,90,147,217,126,164,40,207,167,90,174,112,252,248,113,70,79,142,146,120,130,137,134,9,82,23,21,215,
+  61,233,204,192,158,193,253,91,130,147,94,180,159,229,61,225,101,56,133,230,191,30,103,219,78,153,236,184,41,208,71,161,
+  50,0,21,191,144,231,112,103,59,246,196,216,183,223,60,253,40,10,80,201,15,184,231,135,92,124,100,230,222,159,1,14,
+  167,223,16,178,55,153,196,41,225,113,40,189,88,46,68,174,96,109,151,18,162,77,11,33,127,25,140,6,61,6,113,27,
+  204,231,96,190,243,123,188,113,158,194,81,253,159,2,126,253,57,124,157,198,117,69,86,64,60,235,136,101,51,195,112,244,
+  8,248,41,108,5,118,151,96,118,243,190,35,165,135,62,243,232,154,87,252,220,139,136,235,179,228,148,199,145,147,135,152,
+  169,214,9,50,202,157,102,33,218,89,156,102,21,75,43,194,215,121,240,116,48,54,54,70,181,90,109,121,243,52,85,237,
+  113,146,64,98,153,158,158,166,86,173,17,71,17,190,239,172,52,13,206,228,160,201,51,82,74,209,219,211,231,120,64,149,
+  10,29,149,114,125,189,101,42,134,184,88,176,169,177,41,81,37,38,31,54,144,38,193,24,75,45,170,227,123,1,149,74,
+  5,157,166,204,204,204,112,252,248,9,82,29,225,135,57,142,7,65,190,2,61,237,208,86,1,249,123,110,59,116,26,248,
+  41,178,177,108,219,25,199,50,1,254,12,120,159,27,121,255,235,241,109,138,145,93,116,60,237,162,209,239,249,52,222,122,
+  29,65,142,175,30,219,199,251,127,136,197,71,0,181,52,161,166,19,33,114,69,100,154,218,102,225,153,119,237,119,216,13,
+  109,83,80,58,7,228,28,36,155,17,73,44,212,176,181,233,197,21,99,214,104,240,27,144,134,142,137,57,147,192,142,10,
+  60,249,155,48,62,233,138,18,179,223,67,27,255,33,215,181,112,103,118,17,60,87,175,183,201,48,77,192,46,117,192,97,
+  122,24,234,26,234,17,20,86,165,44,253,234,63,189,179,247,241,115,251,58,95,112,233,38,76,108,216,189,247,8,105,234,
+  17,72,141,16,6,107,85,43,21,193,117,60,38,51,46,115,0,178,51,47,183,248,190,79,189,94,119,172,232,32,32,159,
+  119,78,134,113,28,19,71,49,22,195,252,220,28,113,20,97,180,195,125,48,6,154,60,164,204,116,44,8,67,250,251,7,
+  24,30,25,228,224,241,147,204,167,135,180,208,182,77,66,187,110,196,62,97,145,52,85,232,84,210,214,214,78,146,66,165,
+  92,161,90,173,50,49,49,65,28,39,116,117,117,209,221,221,197,201,209,19,144,164,32,172,48,66,120,202,90,85,5,241,
+  101,156,213,174,127,150,110,39,231,192,218,211,58,225,175,3,247,2,111,248,175,26,243,159,3,148,255,231,29,15,242,240,
+  248,177,31,218,88,5,153,255,206,212,73,222,246,228,221,246,47,58,251,81,167,142,52,145,120,175,12,61,33,172,246,96,
+  163,116,221,120,232,65,69,99,103,165,213,195,147,112,237,216,11,175,61,239,188,23,92,42,102,39,39,244,215,239,123,208,
+  118,60,189,119,242,74,120,56,114,222,190,247,127,22,198,151,131,249,48,176,231,123,120,158,163,192,205,25,56,253,214,231,
+  104,46,22,103,220,153,194,236,2,27,135,121,207,25,116,223,127,237,236,204,242,175,188,245,207,207,143,254,244,119,243,183,
+  190,248,6,14,29,61,134,109,8,116,62,71,98,26,88,76,11,136,110,146,16,91,157,86,182,189,114,49,44,130,70,163,
+  225,142,117,62,79,24,134,204,206,206,82,46,87,156,197,134,175,72,146,132,90,181,138,213,198,113,90,105,70,234,209,202,
+  187,87,202,3,41,41,150,74,188,232,133,55,178,173,187,163,248,205,219,62,222,251,210,24,211,83,179,70,229,114,4,185,
+  60,169,182,120,40,124,223,39,159,207,145,38,186,37,219,104,111,107,99,249,178,229,204,151,231,169,233,24,109,61,18,161,
+  66,109,211,188,15,222,83,124,119,225,147,54,187,81,213,255,235,218,253,207,81,128,238,31,61,252,67,41,60,249,69,179,
+  251,91,64,204,3,249,218,60,203,106,243,210,130,122,28,194,14,24,66,136,203,140,181,87,31,18,226,130,253,109,249,145,
+  178,231,7,75,202,149,202,154,68,79,117,89,27,142,14,14,44,187,244,207,254,160,125,96,73,55,131,186,206,242,95,253,
+  73,238,248,200,167,186,238,251,235,127,41,93,19,107,171,161,190,23,238,15,97,214,251,62,218,205,49,224,175,113,174,89,
+  127,225,73,46,15,60,102,107,9,223,143,10,165,153,240,33,113,196,187,221,174,48,217,115,96,70,193,145,18,76,174,28,
+  157,136,126,251,247,254,62,191,231,104,196,145,99,147,248,158,33,53,202,229,145,147,182,58,158,230,248,181,240,57,91,163,
+  91,75,28,199,148,203,142,151,211,214,214,70,163,209,200,64,233,6,82,58,161,105,28,199,212,106,245,108,156,115,193,132,
+  126,150,57,238,140,254,21,65,16,16,197,17,59,158,126,26,99,44,231,93,118,177,124,104,244,196,242,13,247,126,99,180,
+  61,49,137,78,35,27,9,45,146,58,200,176,68,154,56,158,82,169,88,68,72,183,137,51,198,80,106,43,177,102,205,90,
+  158,220,177,29,163,13,13,107,187,36,44,139,160,227,56,84,58,157,24,242,59,46,244,2,199,222,205,204,40,254,235,241,
+  31,185,0,61,151,128,113,83,165,108,179,121,61,7,108,2,177,20,188,13,142,89,95,24,135,194,171,193,111,146,160,170,
+  80,208,208,51,15,189,1,172,173,90,123,213,232,186,85,151,180,255,204,27,251,46,95,191,138,64,133,236,123,236,137,222,
+  59,191,124,207,210,104,215,238,116,175,151,250,235,38,142,146,51,147,40,105,200,123,138,159,124,243,171,248,55,196,208,67,
+  127,250,206,23,92,13,83,198,137,230,182,11,168,174,201,166,176,239,181,110,220,11,188,124,207,4,159,127,242,4,151,159,
+  55,196,108,57,250,174,139,80,179,8,158,4,190,8,252,21,142,108,55,147,225,77,109,144,171,67,239,140,16,61,95,90,
+  186,169,237,156,45,215,51,58,238,115,228,248,52,50,144,36,137,70,170,44,86,165,25,137,44,23,46,189,166,129,188,51,
+  17,211,84,170,85,26,141,70,22,1,227,183,204,198,92,18,134,32,8,2,146,56,166,50,63,15,38,75,212,108,30,33,
+  65,43,39,94,74,69,177,80,32,73,19,142,28,57,194,255,207,222,123,135,89,118,149,87,222,191,189,247,57,231,158,155,
+  43,231,234,234,156,179,164,86,4,101,129,4,152,12,6,27,99,123,28,39,224,48,51,30,143,103,252,217,51,223,140,199,
+  51,159,51,99,112,24,27,27,147,49,89,36,33,161,156,67,119,171,115,206,149,211,205,39,237,189,191,63,206,173,150,192,
+  2,36,1,99,140,123,63,79,61,221,93,93,85,125,251,222,123,214,121,223,245,174,119,173,92,87,137,242,186,205,217,227,
+  247,63,86,144,214,46,34,173,49,132,202,104,75,28,57,248,217,44,149,197,69,234,141,6,158,151,161,217,108,210,221,213,
+  69,24,134,148,203,101,214,172,88,193,179,179,115,76,98,187,87,192,166,12,140,30,131,233,127,15,145,126,137,96,146,144,
+  50,217,241,165,107,248,159,33,0,9,65,44,101,123,177,51,253,33,101,96,29,136,60,56,11,224,204,129,19,67,126,53,
+  20,5,116,91,232,7,134,60,232,79,192,79,131,121,83,190,81,66,191,130,238,105,232,173,92,187,107,100,231,127,255,181,
+  114,247,64,39,34,104,130,54,108,126,211,141,220,116,251,13,234,196,185,115,234,200,193,189,228,85,128,20,14,73,98,112,
+  157,2,245,133,38,175,121,253,107,249,235,135,158,90,118,252,190,39,110,90,13,81,11,58,250,224,184,7,51,7,161,54,
+  10,201,203,29,235,206,84,2,94,243,11,159,230,139,127,246,166,139,32,244,82,72,104,128,101,109,0,218,0,44,127,222,
+  196,194,1,21,66,191,7,27,191,226,23,87,230,111,255,247,106,108,104,45,141,153,67,84,195,6,70,105,156,184,157,217,
+  69,202,249,44,129,207,82,37,180,196,9,201,118,96,95,179,209,32,12,67,114,217,108,170,70,214,154,102,179,73,171,213,
+  66,42,117,209,86,181,213,10,8,162,224,185,239,109,47,168,218,118,210,156,239,251,228,242,121,42,149,69,130,8,206,158,
+  159,167,114,104,143,185,206,198,250,110,225,150,26,137,80,69,55,139,17,128,150,72,55,213,251,88,99,218,85,86,10,214,
+  75,153,230,35,3,3,84,54,175,227,161,39,22,203,151,53,163,181,192,198,60,156,252,63,48,189,30,108,242,50,110,124,
+  230,210,53,252,207,3,128,44,16,73,7,227,120,104,27,176,97,102,130,53,243,51,116,130,188,17,252,50,228,37,116,132,
+  208,211,132,78,153,182,246,125,10,6,99,24,170,194,80,5,122,106,80,182,2,133,227,96,188,140,66,73,101,141,206,156,
+  23,248,135,6,250,51,183,189,241,181,114,239,209,147,100,78,9,58,203,37,138,133,28,88,75,214,81,172,28,234,99,253,
+  138,59,72,116,148,142,138,157,212,3,39,209,134,188,178,188,253,63,190,71,125,248,220,111,174,115,79,156,114,135,211,229,
+  233,131,26,246,77,193,161,41,184,224,164,147,178,248,229,84,67,243,149,128,87,255,226,167,249,244,255,126,3,215,108,30,
+  120,158,37,198,55,30,221,110,55,151,196,117,189,164,226,174,9,96,61,233,206,205,210,81,192,60,120,53,24,108,193,234,
+  249,141,151,117,6,54,161,85,15,9,235,53,226,200,160,156,28,56,96,147,22,178,221,34,89,1,86,183,163,163,121,46,
+  129,2,1,81,146,80,111,181,240,252,44,70,107,114,185,60,214,10,170,213,26,113,162,201,250,25,172,77,201,230,74,165,
+  70,171,217,34,49,49,74,40,208,34,13,202,75,119,60,48,218,162,163,4,29,197,100,253,12,243,19,83,120,135,142,55,
+  71,33,156,87,73,167,107,98,154,129,69,43,131,175,138,40,55,3,38,117,89,108,182,34,206,157,187,64,177,80,166,187,
+  171,139,32,9,81,142,195,134,21,107,216,31,132,254,215,159,222,187,250,85,113,184,83,192,222,22,44,220,7,209,203,105,
+  167,18,224,230,239,182,148,183,160,228,243,242,183,196,37,96,248,129,2,32,11,120,214,112,213,133,195,220,239,120,220,214,
+  90,20,73,109,65,90,40,36,48,80,134,49,9,43,37,140,58,48,92,135,190,42,20,103,161,107,54,235,117,68,35,195,
+  133,100,100,89,174,184,98,76,245,173,24,19,163,171,150,211,209,211,73,177,163,156,110,118,43,69,44,211,55,127,80,171,
+  80,175,213,240,179,89,28,165,40,148,10,196,81,8,113,72,61,142,9,230,170,104,29,35,73,205,206,93,79,146,245,179,
+  40,2,86,12,117,241,150,255,249,91,153,191,253,221,63,94,151,28,56,56,182,51,8,119,108,183,28,205,167,142,120,187,
+  45,236,86,82,158,190,222,218,230,110,107,41,191,68,18,121,113,49,224,15,126,247,62,94,241,177,119,18,235,23,190,247,
+  246,1,159,108,19,171,246,121,109,133,126,129,159,23,164,0,228,100,160,179,9,93,131,151,191,194,25,218,182,138,147,143,
+  29,34,168,158,163,101,23,241,113,113,18,137,176,41,73,108,141,109,175,107,136,212,74,213,202,52,5,68,164,235,20,73,
+  162,169,213,27,216,118,75,230,186,94,234,19,100,210,118,76,107,147,110,180,43,39,213,22,181,35,132,93,215,35,245,210,
+  75,227,168,181,182,88,163,201,250,89,226,176,133,178,10,226,128,150,76,172,128,74,54,54,121,153,56,196,194,224,185,14,
+  65,16,210,108,77,161,209,41,178,10,67,179,213,96,247,238,221,172,92,177,130,209,177,101,88,107,112,81,108,216,118,25,
+  7,102,23,123,174,57,126,116,121,6,122,59,64,173,120,153,213,140,37,157,156,46,126,19,217,255,82,142,54,154,225,142,
+  110,166,87,172,164,162,155,200,122,149,75,40,244,3,6,64,202,90,118,206,95,96,38,181,103,204,207,195,72,6,54,40,
+  216,94,133,45,23,96,197,184,82,189,141,145,193,162,90,191,42,59,118,197,78,53,184,102,149,216,177,106,37,203,87,173,
+  160,220,217,133,239,101,83,155,137,139,44,81,59,18,24,131,115,113,15,250,249,102,151,75,69,118,59,128,205,88,116,28,
+  161,117,66,216,74,91,138,11,231,207,113,106,124,130,78,87,210,211,231,179,126,243,10,126,249,189,255,69,158,56,125,54,
+  119,244,177,167,151,127,233,222,71,7,157,131,199,183,94,153,36,59,6,225,158,121,99,191,250,6,56,124,3,52,110,125,
+  57,207,216,254,73,248,127,239,193,253,47,183,242,66,100,208,111,189,132,31,213,72,43,35,87,164,22,152,57,153,93,38,
+  122,251,55,99,215,133,124,241,83,159,194,209,22,87,5,88,225,160,141,66,182,125,127,165,109,87,60,8,172,208,88,76,
+  154,220,106,185,216,110,93,140,207,53,134,40,142,72,146,24,33,5,197,124,30,37,37,58,73,40,149,74,72,36,58,49,
+  224,166,62,63,214,154,139,217,235,162,45,76,76,55,229,45,157,61,157,136,87,222,80,248,203,187,238,46,28,17,210,179,
+  73,154,202,42,132,161,165,107,132,24,60,199,75,109,67,144,88,145,134,234,157,60,125,28,99,34,86,44,91,145,166,104,
+  184,14,174,163,158,167,106,74,95,237,151,187,8,41,72,69,164,241,203,2,49,139,35,125,20,14,227,157,101,60,213,65,
+  62,10,33,142,46,161,195,15,10,0,233,118,27,49,3,110,63,244,87,97,179,15,87,87,96,215,177,172,191,97,230,242,
+  237,131,125,215,93,235,93,253,202,235,88,179,125,19,165,222,18,121,229,165,218,14,27,164,235,5,82,131,105,160,69,234,
+  25,147,218,73,60,103,7,170,137,46,10,234,150,198,192,105,252,111,123,103,201,182,121,138,182,185,186,231,103,41,118,66,
+  223,208,8,213,90,149,35,135,14,179,231,248,41,134,122,106,140,246,117,50,188,105,140,91,119,109,161,246,75,191,152,121,
+  246,196,185,129,3,127,254,119,221,225,223,127,182,60,134,21,85,8,71,225,200,239,66,252,44,223,217,224,234,155,193,56,
+  248,248,94,54,150,125,222,252,238,157,200,246,243,243,219,164,102,101,153,23,57,121,11,128,159,3,114,105,21,217,63,239,
+  137,78,205,180,208,45,67,247,186,173,92,119,227,235,169,125,240,12,149,112,150,192,81,184,194,34,76,106,84,33,105,71,
+  177,96,211,88,222,246,126,185,92,210,9,33,176,58,173,94,178,217,44,66,8,162,40,192,152,152,108,214,79,213,208,82,
+  48,60,60,140,239,103,73,146,246,247,88,211,190,37,200,118,224,161,105,71,28,65,43,174,99,61,75,95,247,144,152,188,
+  234,186,85,231,158,120,128,188,83,67,40,7,99,4,113,4,202,203,33,133,139,53,1,88,75,179,25,144,241,28,60,207,
+  97,106,106,18,41,29,150,141,44,163,49,62,201,166,179,231,230,242,112,38,129,217,41,72,142,72,69,67,170,151,93,119,
+  44,73,27,50,128,76,162,23,105,58,103,113,165,143,148,169,243,163,74,82,7,130,53,203,86,177,80,173,50,117,242,2,
+  59,234,141,75,40,241,143,9,64,121,160,7,196,30,200,59,66,172,114,225,106,107,237,43,15,185,206,229,181,31,185,125,
+  108,215,123,126,193,219,186,107,7,5,191,128,192,96,147,8,155,36,216,168,73,34,65,40,16,142,66,90,209,78,249,20,
+  40,218,126,53,230,121,250,76,153,82,182,22,241,92,27,110,211,59,190,18,2,164,109,103,102,181,69,120,23,91,32,65,
+  169,84,230,138,171,175,98,205,154,21,60,249,232,67,156,58,91,101,168,167,27,217,10,105,105,135,141,203,70,184,233,35,
+  31,112,255,71,125,126,107,246,43,15,84,122,225,228,28,92,16,176,176,234,101,220,121,35,96,213,103,246,19,172,237,166,
+  33,37,203,129,199,218,119,225,23,123,1,185,41,160,203,101,208,33,96,232,116,71,87,231,53,87,46,48,53,115,23,83,
+  93,87,176,241,21,111,166,59,83,230,207,63,240,159,136,131,121,144,18,35,44,74,184,23,239,250,75,155,239,75,207,162,
+  227,40,116,98,46,198,246,64,170,11,106,54,91,212,42,21,178,126,6,199,145,200,172,79,146,36,244,245,245,165,213,81,
+  28,167,49,64,24,172,144,88,253,156,235,165,235,58,105,61,106,28,148,113,168,53,102,216,177,109,61,6,205,179,135,246,
+  34,164,33,137,13,198,10,84,152,96,12,56,34,133,101,171,53,137,134,90,35,198,74,69,237,236,41,180,84,12,156,31,
+  215,87,52,235,39,13,236,137,224,194,70,72,30,24,93,205,254,114,23,222,119,145,174,98,73,165,13,253,115,51,116,36,
+  213,54,24,127,103,240,249,134,91,134,181,184,214,50,222,217,73,112,227,181,76,30,60,130,57,113,230,82,67,246,253,2,
+  160,63,250,54,101,109,51,189,67,11,23,58,178,176,85,89,123,243,20,220,120,124,211,218,45,215,253,222,255,40,239,188,
+  245,6,124,105,208,113,128,14,43,41,123,96,69,138,37,66,98,101,59,66,214,166,246,17,72,137,177,23,67,61,219,9,
+  195,233,189,74,182,163,126,133,32,229,52,172,120,222,202,65,59,232,181,237,153,188,68,188,166,111,24,147,2,89,28,209,
+  81,46,243,202,91,110,227,240,190,189,84,90,13,114,210,165,228,251,140,31,59,66,169,220,201,141,255,254,87,220,103,238,
+  126,112,77,127,98,183,52,97,207,29,80,217,242,50,7,41,122,166,193,51,255,225,43,84,141,97,61,105,192,225,75,109,
+  27,22,193,13,211,232,218,254,227,221,203,243,242,217,73,222,117,29,60,112,230,28,11,250,77,12,94,254,42,222,229,6,
+  252,221,95,252,54,173,160,138,235,186,36,137,198,145,41,249,156,130,143,196,74,133,213,105,76,139,213,150,48,8,113,93,
+  23,207,243,176,214,82,171,86,218,57,94,57,28,199,161,218,168,224,185,46,25,207,107,155,216,123,116,150,59,218,160,37,
+  16,74,181,127,103,211,169,24,128,208,68,205,6,25,167,196,236,220,60,55,221,112,3,29,221,163,196,145,226,216,241,227,
+  204,205,156,64,234,10,88,7,209,158,214,117,117,119,131,116,168,44,214,169,53,3,2,3,207,30,216,207,234,74,189,89,
+  134,227,45,56,148,129,133,86,177,195,30,236,234,19,57,99,172,80,223,157,178,199,2,83,3,35,156,211,33,5,179,72,
+  189,29,120,253,162,192,231,121,63,67,36,9,189,133,28,135,175,186,12,175,191,151,209,125,135,113,106,245,75,64,244,189,
+  6,160,95,250,54,127,89,1,246,65,190,2,91,115,240,198,211,112,243,145,219,111,89,247,142,63,255,3,119,221,232,114,
+  108,179,130,177,22,225,8,148,77,121,3,35,5,70,202,246,82,81,42,241,183,198,192,146,110,101,201,64,253,249,4,0,
+  96,133,69,44,177,1,82,128,89,186,203,155,246,59,34,229,36,210,175,177,207,17,7,109,13,140,149,233,198,85,198,245,
+  89,189,122,19,179,227,103,56,119,250,4,103,107,167,88,187,118,45,147,227,211,92,117,195,205,60,118,245,174,158,214,131,
+  143,111,20,66,172,18,214,158,107,119,151,47,249,124,1,56,163,13,111,79,43,153,139,250,167,151,2,64,46,136,24,84,
+  11,156,161,145,117,170,115,205,47,242,208,177,143,114,251,214,25,30,57,244,121,206,235,55,177,122,215,143,242,46,41,249,
+  196,223,254,1,243,115,51,120,174,135,54,17,74,164,201,168,8,137,182,18,108,130,104,123,53,47,217,180,46,69,47,87,
+  43,85,146,68,35,16,23,199,239,67,3,67,164,118,169,9,181,90,21,221,219,151,6,13,168,231,216,55,108,74,108,59,
+  74,165,9,28,78,234,237,99,90,130,133,201,5,118,237,220,198,19,79,28,228,250,107,223,194,248,244,9,14,60,251,21,
+  38,39,199,201,100,4,165,130,123,113,234,134,6,71,56,184,174,67,84,111,209,105,76,64,26,199,51,61,12,225,233,124,
+  153,80,185,228,237,247,136,119,177,134,172,202,144,213,14,53,251,124,255,156,244,125,243,237,192,231,249,199,104,131,210,134,
+  103,86,45,103,95,87,39,87,29,56,74,120,246,60,74,107,226,54,117,112,233,124,31,91,176,67,169,195,223,144,15,175,
+  220,15,175,58,245,186,215,174,251,213,191,121,159,232,233,42,162,163,10,66,88,144,10,109,21,70,180,147,60,165,32,165,
+  118,108,187,164,79,53,32,75,117,134,64,164,241,51,237,23,223,216,165,132,13,217,230,122,82,228,145,242,27,151,45,49,
+  75,127,175,210,76,236,165,22,36,245,46,37,17,26,43,45,210,66,190,144,197,118,117,35,19,203,93,119,223,207,211,207,
+  222,197,149,215,94,203,198,29,87,208,243,250,59,178,71,30,124,124,237,86,107,215,71,130,61,79,88,234,127,202,115,254,
+  195,47,134,187,185,146,212,198,242,245,164,177,38,19,164,158,198,75,174,139,47,22,128,18,72,52,204,150,224,216,192,189,
+  159,155,152,188,252,142,209,210,213,239,225,209,83,159,226,154,141,115,60,113,230,243,156,27,191,150,177,157,63,194,47,13,
+  12,242,249,143,252,37,123,246,62,141,20,22,75,26,51,100,219,185,244,32,48,38,193,90,8,163,8,41,4,158,151,193,
+  207,248,56,82,165,211,179,196,16,6,17,58,209,20,11,121,180,78,173,56,150,252,160,51,110,6,107,45,137,214,237,205,
+  248,212,156,94,41,133,116,124,34,109,209,113,136,43,18,106,243,9,165,206,44,215,94,181,149,135,31,57,206,216,234,43,
+  25,25,219,197,225,67,15,115,248,192,3,212,234,227,72,17,162,128,140,155,198,205,234,86,132,159,203,209,104,70,194,166,
+  11,196,241,95,10,73,179,107,152,46,109,172,254,30,250,241,41,43,24,16,121,38,169,34,173,37,80,105,142,154,43,51,
+  72,94,154,70,62,19,70,152,98,158,71,174,189,156,179,27,86,211,113,232,56,131,211,83,232,182,141,238,165,243,93,0,
+  208,35,223,226,226,136,83,102,198,247,96,109,3,118,29,223,117,217,138,159,252,195,223,17,61,93,101,140,105,130,171,210,
+  182,202,74,84,27,8,46,142,157,77,123,74,99,211,88,153,148,93,110,79,184,172,109,195,144,2,43,144,164,230,235,90,
+  132,169,203,95,123,26,102,144,72,68,202,175,90,211,30,99,139,246,224,169,189,81,213,206,155,50,194,32,210,102,36,205,
+  170,151,146,66,111,15,65,164,185,253,142,219,249,195,223,251,35,238,249,210,221,220,252,218,87,177,237,182,155,249,108,199,
+  31,246,111,91,92,92,81,177,162,119,28,59,225,130,254,78,133,255,210,50,105,54,229,196,46,122,74,91,82,129,225,67,
+  192,239,242,210,244,40,115,144,236,133,115,49,60,120,93,210,24,249,226,123,255,237,171,78,118,255,81,207,198,109,239,228,
+  174,147,159,225,138,145,179,140,85,239,229,153,201,141,120,189,87,243,174,95,93,199,138,187,254,134,175,126,234,111,105,180,
+  2,132,148,56,9,196,42,193,8,75,70,120,72,3,58,140,145,89,73,198,177,132,141,58,65,210,66,40,65,198,207,128,
+  53,40,71,209,217,213,141,177,150,36,14,201,122,57,180,73,176,50,211,30,4,216,244,102,34,210,40,232,40,73,109,85,
+  131,32,192,69,129,136,105,73,203,212,228,52,229,142,65,110,188,97,29,247,62,178,155,254,161,27,217,124,249,205,44,223,
+  176,133,67,251,30,231,236,241,251,16,97,72,33,91,64,121,150,196,26,140,114,105,136,212,144,204,2,21,107,56,219,168,
+  176,58,55,74,168,147,239,225,157,85,82,23,169,78,90,58,46,15,175,95,143,149,18,247,185,250,238,37,29,169,13,82,
+  27,206,151,75,156,191,122,39,199,163,152,177,74,133,76,43,160,171,25,162,171,181,75,104,242,114,94,167,109,223,130,32,
+  61,12,76,67,41,7,171,38,4,171,58,111,184,38,179,97,213,10,48,205,20,80,218,166,232,152,212,10,73,146,182,93,
+  98,169,52,21,150,56,14,9,91,13,130,160,133,20,2,141,197,241,92,116,98,81,72,208,130,68,107,162,88,227,58,30,
+  82,72,180,17,120,249,84,60,39,17,8,37,41,20,10,40,183,61,186,183,96,147,118,176,158,72,91,51,99,45,210,202,
+  182,103,177,73,135,249,74,82,232,233,160,50,49,193,47,252,236,59,120,255,251,63,205,196,228,56,155,55,111,224,254,171,
+  174,206,215,191,242,229,101,74,138,161,78,99,15,255,123,104,13,240,237,61,102,50,164,155,216,51,164,155,216,75,220,153,
+  36,93,57,249,125,224,115,192,79,1,231,95,68,69,37,73,87,49,118,66,101,23,236,14,97,232,142,250,212,216,95,253,
+  254,111,92,206,47,255,169,191,105,251,79,115,207,225,15,177,189,251,36,55,47,123,146,7,46,92,160,150,187,158,87,220,
+  241,111,89,177,250,50,62,251,177,223,227,248,161,221,100,29,7,37,178,41,99,227,8,140,4,65,76,54,83,38,91,44,
+  34,125,65,206,115,200,56,170,205,163,9,242,249,34,202,245,104,5,1,190,239,163,148,67,98,82,32,87,74,33,244,146,
+  252,65,145,201,248,152,212,166,158,140,167,144,74,225,185,89,154,145,69,182,34,102,231,38,24,27,27,229,134,107,87,241,
+  204,254,61,148,114,59,65,141,176,121,251,32,99,195,27,56,114,240,75,204,77,95,192,247,32,239,187,52,98,80,237,16,
+  178,165,214,232,193,233,51,52,130,26,201,247,48,222,91,34,168,217,8,81,116,232,238,234,72,23,109,173,229,187,53,163,
+  112,218,161,134,177,82,244,118,119,211,227,56,228,187,58,185,112,239,35,168,90,253,18,162,188,212,231,211,125,161,242,21,
+  40,130,156,135,14,11,203,38,10,217,238,93,183,220,146,150,249,246,185,221,33,33,192,10,145,190,184,34,45,215,177,154,
+  168,213,96,126,118,146,70,179,70,28,181,104,5,13,116,3,226,88,179,88,173,208,106,182,208,218,48,51,53,211,246,37,
+  22,136,88,210,213,213,197,220,194,2,70,74,138,165,14,234,173,58,177,78,245,42,43,87,143,210,223,223,71,169,80,162,
+  183,183,143,108,169,4,82,161,218,83,155,165,164,80,129,104,175,40,216,180,220,247,50,116,118,247,112,235,171,174,101,122,
+  98,138,193,129,53,172,127,253,237,153,217,175,124,121,100,153,49,163,46,20,159,133,214,239,125,135,234,37,3,172,252,14,
+  32,37,218,237,217,223,167,220,25,47,230,126,126,57,152,24,22,12,226,172,143,157,219,185,48,31,253,207,63,248,13,255,
+  199,223,243,159,217,113,245,59,121,236,208,215,152,169,60,197,173,91,15,113,120,98,146,131,19,55,144,95,249,42,254,197,
+  191,219,206,51,247,125,132,7,238,251,4,179,231,79,145,83,2,235,103,168,89,77,214,201,128,86,72,235,16,197,150,86,
+  37,38,151,41,224,186,46,205,122,147,222,222,62,242,249,220,197,22,55,73,98,130,32,32,159,47,96,180,126,78,6,97,
+  12,142,163,200,102,253,148,196,206,229,48,198,144,36,9,174,43,137,163,144,106,181,198,252,124,149,129,161,94,214,173,201,
+  112,234,196,5,58,75,155,152,171,79,147,47,174,231,138,171,7,57,121,226,49,142,236,189,27,130,38,42,159,67,40,41,
+  45,8,167,253,156,53,90,117,30,108,125,127,46,222,45,133,49,148,84,36,250,123,107,97,38,172,69,91,139,136,34,230,
+  10,5,158,184,241,26,42,247,63,134,170,84,47,161,202,75,1,160,167,190,197,221,217,3,37,160,171,5,67,206,182,157,
+  133,13,91,54,129,14,46,146,194,66,166,160,35,68,58,38,215,180,35,94,130,128,51,71,78,18,183,90,156,60,123,138,
+  133,197,5,130,32,68,89,133,53,6,63,147,105,231,139,91,134,7,135,211,133,73,199,161,163,51,79,28,133,12,143,118,
+  164,137,161,113,68,198,43,210,217,81,38,137,99,22,91,117,22,39,35,38,130,128,3,218,82,238,232,164,171,167,143,190,
+  129,65,186,122,123,17,106,41,35,93,94,220,137,2,75,161,92,162,114,161,198,202,85,3,212,226,212,200,97,211,77,215,
+  240,245,193,254,126,59,49,181,78,8,49,16,88,59,223,13,137,255,45,238,143,75,169,1,115,164,33,121,223,174,170,89,
+  11,252,87,224,20,112,125,58,69,252,182,99,54,63,173,52,169,97,29,11,190,144,137,76,146,9,62,246,222,255,132,174,
+  84,217,126,199,91,25,191,48,198,223,223,251,113,110,222,58,75,199,232,151,120,236,236,49,90,185,155,185,234,246,247,176,
+  249,218,215,242,204,131,159,102,247,61,95,100,122,230,48,142,178,8,153,39,50,9,36,1,50,48,68,6,130,36,70,38,
+  10,165,28,6,7,7,47,26,142,165,94,215,105,162,234,18,32,165,55,25,139,227,166,162,66,221,30,203,63,55,154,119,
+  145,82,18,199,49,11,243,243,20,242,121,124,63,203,200,64,63,213,217,211,212,235,46,165,66,39,243,205,10,34,238,100,
+  213,170,219,232,239,26,228,192,179,119,179,24,206,209,240,60,215,166,97,154,50,223,150,122,124,47,189,151,104,131,127,0,
+  148,11,133,111,200,129,255,94,31,11,120,73,194,92,46,71,207,29,55,113,100,255,17,70,246,29,226,18,61,253,34,1,
+  232,53,223,60,94,78,171,31,254,2,100,25,178,13,200,55,202,157,94,185,88,120,238,242,124,190,27,95,59,31,70,27,
+  141,43,4,11,211,179,92,56,115,158,7,191,126,31,197,114,39,195,163,203,72,104,209,55,214,137,142,90,116,119,116,81,
+  89,92,36,54,17,142,43,40,230,75,36,113,76,152,196,20,75,229,52,143,42,138,40,148,10,228,11,57,16,22,87,102,
+  41,116,20,210,246,75,150,49,214,210,108,133,204,207,92,96,118,234,2,67,195,35,44,223,184,1,148,215,78,134,16,44,
+  169,26,189,76,6,43,37,86,196,44,46,84,33,137,25,91,53,74,112,221,174,238,250,39,191,176,62,3,107,198,224,204,
+  155,160,146,255,54,79,212,19,164,86,171,223,137,100,94,178,136,248,98,187,10,250,207,124,251,152,153,32,125,206,133,0,
+  37,16,242,140,180,42,145,33,182,85,229,99,127,241,223,57,55,127,154,31,121,235,47,16,103,255,35,159,223,255,247,108,
+  236,219,205,109,203,14,112,114,102,154,51,19,219,241,58,47,231,234,215,255,18,219,175,123,3,207,62,248,9,30,255,234,
+  199,169,213,171,180,156,136,134,209,120,65,11,191,208,194,46,54,81,178,128,155,117,241,51,62,158,227,34,132,162,209,106,
+  162,164,75,24,68,196,113,140,231,101,80,109,65,160,235,58,237,73,153,38,155,205,34,5,248,190,79,24,134,105,204,15,
+  16,199,17,173,102,147,74,173,2,18,54,111,238,99,239,254,35,52,163,245,248,110,158,102,18,208,170,75,74,29,107,217,
+  113,117,7,15,62,249,89,106,179,23,164,133,108,29,188,127,3,226,119,193,126,183,245,201,146,37,111,196,115,137,171,159,
+  4,62,109,204,247,12,220,190,45,233,221,54,116,107,109,219,72,183,181,92,216,127,248,18,186,188,152,215,109,241,5,62,
+  169,83,182,69,168,52,106,94,230,11,37,225,56,18,99,211,81,174,160,173,223,177,96,49,24,171,81,82,208,170,55,88,
+  152,159,97,239,222,39,201,21,92,54,110,94,77,179,213,162,148,201,224,23,50,72,147,33,142,34,202,229,18,133,114,137,
+  68,39,68,65,64,33,155,37,155,203,167,252,141,209,228,140,143,114,36,137,73,72,76,130,18,138,140,78,91,2,233,164,
+  161,125,133,130,79,169,109,200,30,55,42,204,140,95,160,111,120,20,107,4,86,56,136,139,194,69,7,199,247,113,154,25,
+  38,46,156,33,142,12,110,206,101,228,77,175,247,206,127,242,11,171,54,88,187,206,192,83,143,65,229,67,192,193,111,226,
+  111,2,224,215,72,179,180,95,236,69,178,68,115,126,1,184,163,253,125,47,52,244,93,34,251,115,105,5,160,141,148,122,
+  10,165,164,73,136,51,18,220,22,247,125,238,125,212,79,158,227,245,239,254,77,70,175,255,89,78,158,126,128,227,143,127,
+  134,203,86,76,112,229,80,200,145,241,195,204,85,174,194,27,216,192,43,223,248,107,92,126,205,235,248,244,223,253,79,78,
+  28,60,128,54,14,213,100,150,48,108,161,100,6,33,4,189,189,189,228,115,89,194,32,196,216,212,27,104,41,1,99,201,
+  196,222,201,56,23,125,130,148,227,160,148,66,57,10,207,115,46,102,143,45,249,18,197,113,68,181,182,136,227,123,40,199,
+  5,19,177,110,93,31,143,63,117,150,56,92,75,206,87,72,63,33,137,93,92,217,143,162,72,35,140,29,4,93,198,210,
+  177,8,78,25,162,151,91,49,136,54,232,76,146,186,215,205,145,186,40,22,121,241,170,244,239,89,53,100,45,197,56,230,
+  224,214,13,212,138,5,244,254,195,112,137,23,122,249,99,248,54,24,137,66,62,143,116,36,214,36,41,255,44,100,26,73,
+  35,20,182,173,235,17,198,18,54,27,180,90,117,250,6,123,232,40,21,105,197,85,188,188,79,169,179,139,170,205,49,61,
+  49,137,104,70,148,10,69,206,94,152,160,214,104,176,56,51,67,78,185,244,12,150,24,24,30,192,43,228,241,51,62,120,
+  30,158,35,113,76,130,176,6,169,45,113,24,166,21,142,209,72,145,198,254,10,99,81,2,206,158,62,73,161,212,65,190,
+  208,209,142,45,94,26,249,75,220,140,79,33,219,73,88,63,68,179,17,82,206,185,172,223,181,139,61,163,195,189,27,207,
+  93,88,174,161,191,23,198,143,67,252,4,223,24,209,211,108,223,89,95,234,182,181,109,183,110,187,72,247,195,14,240,15,
+  87,62,18,82,143,146,159,77,43,160,76,40,101,102,210,203,40,199,177,88,147,42,140,115,46,236,221,243,5,78,76,236,
+  225,214,183,252,75,174,190,225,237,68,3,235,121,224,200,215,233,170,62,195,43,86,213,136,230,191,204,179,103,158,161,82,
+  190,153,222,225,43,233,91,185,139,243,71,143,80,82,62,137,81,44,198,18,43,211,74,181,163,163,3,173,45,173,86,72,
+  62,159,199,109,139,21,151,44,91,93,215,35,81,26,167,13,50,182,237,23,148,198,252,152,246,126,24,228,218,124,80,163,
+  209,32,10,35,146,208,208,106,132,184,82,162,154,130,245,235,11,60,253,196,17,124,103,53,184,10,229,184,84,171,115,220,
+  126,199,107,56,59,189,215,137,235,139,93,2,74,205,182,47,244,2,47,111,23,76,3,171,219,207,239,111,241,141,246,173,
+  255,40,109,144,5,147,104,122,87,47,103,119,111,55,157,247,62,204,194,37,16,122,249,0,100,128,169,70,5,109,52,158,
+  16,8,41,150,214,183,144,207,11,249,22,54,193,36,33,97,28,18,26,136,172,67,182,208,65,172,5,159,253,224,231,147,
+  252,145,51,81,249,194,68,131,102,43,156,179,194,132,81,8,88,65,162,77,67,39,40,87,234,70,214,167,81,40,120,153,
+  238,110,183,212,215,231,169,254,190,172,237,239,247,220,145,97,89,88,214,75,71,111,7,165,124,14,207,53,160,35,146,176,
+  133,176,144,81,10,27,133,156,57,126,130,141,219,46,79,31,156,18,24,155,234,31,51,121,31,213,82,216,216,112,104,239,
+  1,54,94,185,133,209,177,85,176,126,99,62,60,119,97,181,130,205,85,184,240,255,192,228,8,232,85,237,202,36,79,170,
+  247,153,253,46,248,129,165,29,165,107,218,96,246,205,23,79,79,90,113,185,2,10,129,177,185,89,37,164,193,161,16,180,
+  208,174,36,214,14,89,215,82,153,57,206,199,255,228,215,56,254,208,125,220,244,182,159,101,195,214,215,177,184,112,45,247,
+  159,122,136,13,229,211,108,31,29,103,166,254,73,162,243,67,228,106,147,88,199,208,148,139,120,162,128,105,37,120,74,210,
+  217,217,73,198,203,224,56,46,133,66,234,19,20,133,81,202,233,56,146,32,104,145,205,230,47,102,205,107,157,242,63,218,
+  24,146,86,3,109,76,234,17,148,205,166,70,102,237,141,251,88,74,106,139,115,120,202,210,242,44,218,10,178,89,201,101,
+  59,243,60,189,247,16,61,93,215,80,79,90,116,44,203,112,249,117,155,25,191,115,64,6,231,143,229,114,80,168,131,219,
+  1,65,129,151,182,127,190,180,186,28,144,250,119,247,112,209,115,251,31,253,8,32,14,35,114,133,60,111,186,241,90,62,
+  122,239,195,232,75,32,244,242,0,40,11,198,206,204,196,81,148,168,76,214,77,53,55,214,182,137,222,182,74,217,10,48,
+  49,113,171,133,175,92,58,253,60,25,229,227,10,159,7,247,61,203,194,71,63,95,191,221,154,195,89,216,35,211,106,249,
+  31,12,136,108,172,177,113,3,170,13,244,248,148,171,57,216,21,195,64,4,61,11,66,246,93,200,251,69,53,220,159,111,
+  140,141,22,114,107,87,120,107,118,108,21,195,171,150,211,219,85,34,136,91,116,151,60,166,43,11,84,234,243,148,139,93,
+  232,68,163,149,64,197,22,33,92,158,125,234,9,146,19,231,216,125,224,36,251,190,248,69,198,182,111,167,153,207,58,79,
+  192,218,87,10,110,139,45,139,30,220,223,7,115,222,243,218,176,230,119,121,39,13,129,219,72,45,68,119,242,141,230,235,
+  30,105,124,143,134,188,128,129,5,207,235,108,42,71,120,90,32,149,34,81,2,97,5,73,96,112,85,1,215,141,217,247,
+  244,231,57,120,224,49,118,94,117,19,55,191,254,103,24,89,255,54,206,206,157,224,220,133,167,232,244,142,210,223,125,138,
+  145,174,57,114,202,39,104,25,172,87,33,10,22,200,229,11,100,243,57,130,176,133,163,36,158,151,65,8,73,156,196,56,
+  110,6,99,37,141,70,64,177,20,130,205,33,109,26,241,19,39,1,137,78,240,253,18,54,106,96,13,132,97,152,106,130,
+  28,143,140,231,17,4,33,100,28,162,160,6,139,22,175,100,104,36,62,197,142,60,163,67,49,227,51,135,160,80,96,197,
+  134,213,204,84,3,236,64,159,154,131,222,2,140,72,40,253,66,106,24,247,146,193,125,201,210,228,205,252,96,198,244,232,
+  36,161,92,200,243,230,27,175,37,119,223,195,44,84,47,129,208,63,0,160,225,111,65,66,251,41,49,104,179,96,250,143,
+  159,106,86,166,23,51,197,229,253,34,229,129,12,234,226,186,68,58,148,55,70,147,232,4,37,5,133,124,142,64,39,8,
+  44,173,243,231,185,202,154,233,28,220,19,192,23,61,24,247,47,6,0,191,240,157,77,131,106,64,209,131,46,15,122,58,
+  172,233,95,85,111,246,36,71,78,245,53,142,156,26,108,222,245,64,255,184,159,29,126,106,221,218,1,239,53,183,248,59,
+  111,184,154,213,195,221,148,18,216,247,204,30,174,187,249,150,116,132,172,193,120,30,135,190,254,40,147,79,62,203,168,117,
+  136,109,76,56,95,227,236,221,247,49,236,23,196,99,219,119,12,179,111,223,43,110,208,201,100,3,78,159,132,106,247,243,
+  110,164,115,237,73,213,119,115,98,210,77,249,183,124,83,27,118,30,232,6,53,9,61,2,70,79,249,217,174,138,78,112,
+  19,75,36,93,26,58,65,201,4,132,197,146,128,149,56,190,143,164,202,67,247,126,138,221,123,30,231,234,27,223,200,43,
+  110,125,11,254,208,143,48,94,27,231,236,133,103,248,250,222,251,241,243,46,30,5,116,24,145,152,0,215,47,2,6,161,
+  68,187,186,209,237,236,120,77,162,227,116,162,169,53,73,152,16,169,22,202,247,144,210,193,90,73,28,181,200,203,12,126,
+  156,2,163,177,10,84,134,70,28,227,88,40,228,114,32,114,44,52,4,93,210,210,172,47,162,242,69,106,21,65,71,38,
+  203,193,201,167,25,222,122,13,221,197,65,230,206,61,66,105,216,99,143,155,25,92,21,135,235,68,106,198,54,245,157,84,
+  11,182,13,54,89,82,239,159,191,36,141,81,250,65,63,113,146,208,93,200,179,251,198,235,232,190,247,33,184,4,66,223,
+  8,64,31,248,22,37,164,74,51,183,26,2,170,250,194,249,248,212,83,187,245,200,138,55,56,152,56,229,128,158,95,48,
+  11,129,17,130,216,26,60,47,131,206,103,72,26,49,213,48,34,123,252,92,50,10,167,99,120,170,12,251,143,64,237,99,
+  60,103,216,245,66,21,195,43,65,172,5,57,148,218,187,122,58,245,141,206,73,33,202,69,107,187,243,48,212,31,180,54,
+  13,237,221,123,217,227,135,14,109,121,255,167,191,216,187,235,221,111,146,239,124,237,143,112,126,226,32,179,179,85,122,74,
+  101,172,178,60,113,207,3,204,60,248,12,189,137,203,162,14,72,124,23,139,164,208,140,233,118,51,116,92,117,19,95,157,
+  154,237,223,49,113,110,99,14,150,73,56,114,20,226,28,255,48,66,247,187,45,203,91,164,30,64,180,43,161,227,41,247,
+  211,45,96,163,145,106,237,25,100,222,152,180,183,21,130,52,173,194,74,164,18,196,38,85,121,199,38,65,90,75,62,231,
+  19,53,230,248,218,231,254,150,189,143,125,157,181,87,95,207,214,203,110,98,164,176,145,185,74,158,124,182,129,113,154,232,
+  208,65,24,151,222,174,62,60,55,131,209,22,235,62,71,154,10,169,48,86,224,42,139,2,148,240,49,38,70,27,23,43,
+  20,249,194,16,35,99,221,212,227,41,26,141,42,74,7,100,140,164,228,122,52,99,152,175,213,241,114,57,98,109,137,162,
+  38,217,2,56,56,100,45,8,109,153,156,156,166,111,104,25,107,174,184,153,153,185,113,156,224,8,59,95,113,35,95,191,
+  255,80,169,126,124,207,72,6,186,207,130,243,63,32,105,188,192,243,109,218,36,115,12,252,27,224,198,246,215,252,83,242,
+  130,214,73,66,35,159,227,236,13,215,176,101,223,97,226,83,103,47,45,181,46,1,144,255,173,91,7,13,76,41,56,210,
+  169,147,43,206,61,252,104,39,111,125,61,98,105,157,93,152,180,245,18,233,116,74,27,155,218,48,196,26,27,197,248,174,
+  143,240,74,20,206,94,168,23,82,223,151,115,171,160,245,44,240,249,239,240,160,124,176,99,160,71,65,111,134,240,46,168,
+  29,2,177,222,90,153,128,147,133,156,65,236,206,97,247,223,26,69,215,109,59,124,120,215,23,255,243,255,90,243,191,142,
+  158,45,188,225,221,63,198,153,163,103,233,185,246,74,238,253,244,167,169,60,180,155,46,55,71,147,16,47,159,101,106,106,
+  156,201,133,89,150,245,13,144,201,56,12,58,25,250,55,110,80,227,19,231,122,214,65,103,5,188,46,104,244,145,106,127,
+  158,127,7,254,174,198,180,164,41,132,197,118,235,85,77,63,50,157,176,198,194,245,161,114,214,158,21,194,83,82,32,77,
+  106,76,2,169,162,215,216,37,11,1,129,209,237,142,55,106,33,133,164,232,100,104,206,30,229,145,79,61,203,222,47,127,
+  148,101,3,43,112,154,51,8,25,99,28,7,43,12,153,124,7,224,209,106,134,228,114,170,29,1,38,241,60,31,19,4,
+  109,11,15,133,112,125,66,4,58,49,100,173,139,137,67,74,189,131,172,94,117,3,129,219,160,90,25,167,114,254,12,141,
+  241,83,152,218,60,133,172,194,218,132,230,194,28,126,206,197,68,9,113,224,35,203,30,177,142,152,159,169,51,189,80,97,
+  227,13,175,39,50,157,248,225,35,244,173,88,77,82,188,6,151,191,17,9,168,12,168,4,196,23,218,213,230,11,157,1,
+  224,39,219,191,38,255,68,47,52,155,36,116,231,114,76,189,98,23,149,66,30,111,223,161,75,32,4,56,175,248,22,127,
+  81,1,115,4,102,90,112,160,27,206,78,236,217,55,92,175,7,94,54,171,48,70,183,149,207,207,191,83,165,147,176,44,
+  138,140,149,148,186,122,120,252,169,103,233,156,156,152,151,112,214,194,236,57,208,111,0,254,11,112,250,59,60,176,165,26,
+  107,105,204,58,1,182,3,244,97,208,191,13,225,126,108,173,46,228,116,36,196,153,110,163,79,188,91,39,175,248,218,7,
+  62,116,197,99,103,207,117,154,205,91,188,147,251,15,138,234,19,251,88,153,47,19,232,128,40,171,104,85,107,184,40,114,
+  217,28,243,205,6,211,181,58,203,178,9,3,67,131,84,148,83,210,58,233,117,33,191,31,22,178,237,187,239,104,187,90,
+  89,154,132,137,23,104,13,94,10,225,246,252,11,168,0,69,3,27,4,98,71,75,80,170,72,97,173,54,36,198,166,123,
+  113,109,107,18,251,60,204,23,168,212,39,210,154,182,108,161,133,194,82,118,75,216,56,224,216,137,71,232,236,232,99,96,
+  96,3,70,70,132,166,198,192,80,47,74,57,24,29,227,58,94,106,28,143,192,104,157,146,200,113,140,149,14,210,86,72,
+  140,143,16,121,226,56,34,227,123,24,221,162,94,159,33,215,177,154,129,238,229,244,119,93,65,188,174,194,252,212,41,42,
+  211,39,80,139,231,112,231,199,105,53,102,201,72,151,164,161,193,248,160,20,245,230,44,214,19,248,189,35,196,149,3,140,
+  22,230,161,112,25,39,78,156,134,179,135,227,66,26,85,168,151,146,80,95,8,128,254,93,58,37,164,183,205,163,253,83,
+  142,100,182,198,16,7,17,3,91,54,176,63,159,195,63,116,148,124,165,246,207,58,90,200,121,226,219,0,128,77,187,134,
+  51,57,56,161,247,29,216,122,238,240,177,194,134,203,55,162,105,181,151,77,219,190,199,82,34,218,134,89,38,163,136,48,
+  36,174,67,50,49,75,95,20,77,27,56,231,67,245,44,216,113,210,176,191,255,240,2,83,161,239,212,194,40,158,139,251,
+  217,2,201,39,173,153,217,134,172,205,41,103,194,96,39,110,215,58,56,118,207,253,215,254,233,179,7,6,244,53,55,136,
+  45,195,163,84,234,53,50,217,12,213,133,58,253,221,61,248,29,61,244,234,144,90,189,70,208,10,113,98,139,109,181,104,
+  10,81,86,176,49,20,98,75,217,90,115,12,90,18,188,30,200,180,65,48,216,14,205,24,162,10,36,175,2,51,198,115,
+  49,210,170,61,53,179,223,226,34,81,109,238,98,22,56,75,26,53,61,4,185,0,6,21,182,107,193,245,212,28,86,40,
+  209,246,225,65,182,141,226,45,218,166,254,58,142,148,104,169,72,172,193,74,75,98,12,194,26,12,6,35,19,172,107,8,
+  165,32,223,223,67,215,96,63,245,202,28,174,3,25,233,18,71,33,174,163,136,194,144,140,159,26,146,213,226,56,117,20,
+  48,22,35,211,113,187,140,12,210,19,132,162,69,70,120,120,246,44,3,250,20,241,252,8,85,49,66,226,244,163,253,101,
+  184,67,187,24,28,189,28,25,207,19,213,207,241,232,221,159,39,172,30,167,25,79,192,180,71,103,103,9,108,72,84,247,
+  200,196,45,138,242,12,34,51,64,192,48,167,15,252,111,26,166,34,4,162,96,176,221,125,224,191,29,90,255,235,155,158,
+  179,159,110,243,60,147,252,240,100,193,139,118,75,118,104,213,24,238,216,8,93,135,142,81,46,22,200,122,223,56,15,210,
+  198,180,29,37,126,200,1,168,247,219,220,173,207,64,18,195,84,6,142,118,206,207,205,28,190,231,190,222,181,151,111,148,
+  26,131,176,18,99,44,82,138,246,226,168,196,85,14,145,23,161,28,69,53,137,48,71,143,7,101,152,146,48,81,131,214,
+  191,39,93,59,200,127,15,30,120,210,174,138,214,89,211,186,160,205,169,33,169,108,2,203,234,136,29,215,108,189,92,174,
+  29,26,33,10,154,36,36,204,78,204,179,122,221,90,138,217,60,213,122,149,176,217,66,70,134,178,85,224,88,198,122,250,
+  216,219,219,159,143,38,206,95,230,166,180,250,122,139,93,48,136,18,216,142,246,150,255,188,129,113,9,51,207,192,220,143,
+  64,179,149,238,113,133,203,161,121,103,26,251,99,103,193,22,33,185,21,204,70,176,109,87,1,100,27,132,154,237,22,204,
+  73,253,1,18,43,68,224,88,27,238,21,34,179,104,141,202,180,13,121,76,123,186,40,108,90,13,25,44,113,18,131,146,
+  23,183,213,109,123,41,216,160,144,196,72,45,17,81,150,206,82,23,157,69,143,218,92,72,62,91,66,99,112,165,67,33,
+  151,197,113,93,220,140,135,148,18,173,19,60,215,193,106,75,66,136,84,46,54,17,224,36,68,73,66,98,19,108,220,162,
+  39,43,88,53,50,78,61,58,205,212,130,195,228,162,207,108,216,71,160,198,176,249,101,228,186,183,113,213,237,195,60,240,
+  241,223,68,196,51,76,78,78,18,199,13,146,160,202,217,83,139,76,29,254,26,195,253,62,13,255,90,166,39,231,184,98,
+  213,58,30,184,230,21,153,167,31,184,111,249,21,176,173,14,7,222,10,117,7,226,223,121,222,107,124,45,124,15,13,58,
+  126,176,142,27,39,88,4,147,27,215,242,112,108,233,126,228,32,151,111,88,131,20,130,158,142,46,98,223,225,212,112,192,
+  234,249,35,63,212,32,228,204,124,7,222,194,135,69,11,135,58,224,232,153,47,126,105,108,226,39,223,92,28,232,43,163,
+  19,221,118,62,20,24,99,17,6,114,194,197,58,14,67,165,46,142,213,90,168,233,153,192,75,141,167,102,124,136,127,227,
+  121,63,59,7,252,53,112,231,119,113,39,17,192,161,116,34,162,255,212,232,133,6,204,42,41,131,174,108,14,207,90,180,
+  209,92,152,155,98,205,242,149,4,58,161,53,59,75,173,81,163,209,168,147,203,231,201,10,197,162,74,200,27,67,180,110,
+  149,247,224,236,196,104,167,160,39,31,155,43,124,75,3,172,159,3,207,73,219,176,166,130,57,7,166,61,152,12,82,35,
+  179,200,73,53,116,83,37,104,154,212,43,32,114,97,254,38,168,89,72,198,65,151,161,181,3,90,25,72,202,160,175,4,
+  179,10,120,28,90,89,107,231,91,82,182,158,208,137,103,164,159,238,102,37,150,68,164,249,92,210,128,86,233,230,191,35,
+  36,198,104,210,42,41,5,39,129,76,197,78,137,64,138,182,119,180,142,241,4,20,179,69,60,223,167,22,215,136,147,144,
+  56,118,208,198,224,122,30,25,63,131,49,138,36,136,136,194,16,75,130,144,14,117,147,80,84,26,47,80,216,102,72,100,
+  251,121,252,252,50,78,214,106,140,20,38,25,235,213,108,236,155,195,154,113,206,205,238,231,196,124,15,83,199,135,201,116,
+  108,102,211,150,171,56,183,239,126,84,62,67,103,79,23,171,151,239,224,150,215,102,153,159,158,103,114,188,14,225,97,154,
+  11,243,140,150,11,220,246,186,183,115,239,153,211,35,171,206,156,190,170,8,199,5,204,172,129,137,78,176,141,118,165,171,
+  190,7,220,91,234,109,109,47,70,87,127,203,246,200,90,164,146,66,57,202,10,243,127,79,194,232,0,115,51,21,166,39,
+  22,184,229,202,157,88,11,113,162,193,194,189,59,251,104,57,30,187,118,239,35,225,135,51,167,195,217,245,29,190,224,49,
+  104,85,225,120,14,246,116,60,245,244,166,211,247,63,189,110,224,45,183,99,68,170,17,86,58,139,164,133,69,145,144,32,
+  133,193,149,30,78,208,192,204,205,68,18,170,57,104,124,1,204,31,180,73,216,165,22,175,249,93,60,240,12,112,21,169,
+  10,246,6,96,30,226,24,230,134,140,158,58,120,116,223,134,96,120,84,29,189,48,73,103,95,47,245,86,64,92,173,147,
+  247,179,20,10,57,18,155,208,208,33,129,182,104,161,72,170,13,122,123,202,202,125,235,155,74,214,186,229,217,106,125,32,
+  142,66,194,74,213,122,81,152,196,54,164,30,104,225,90,73,41,137,66,181,184,216,234,136,194,86,103,28,71,202,232,166,
+  50,118,209,215,186,233,98,181,132,64,195,84,11,230,69,10,70,129,133,105,9,51,2,230,151,193,76,4,243,71,161,238,
+  131,235,66,102,194,24,47,191,118,141,44,47,44,18,214,235,72,87,33,141,193,152,212,168,40,117,55,209,32,76,123,83,
+  61,141,82,150,8,16,169,58,221,74,151,68,26,172,136,17,194,16,39,233,96,160,209,104,97,149,68,138,84,152,105,219,
+  62,220,73,18,227,72,213,22,150,90,180,246,208,45,133,173,215,241,125,23,137,33,50,33,94,71,15,197,254,107,145,249,
+  14,78,212,207,115,118,122,150,130,188,64,89,158,98,176,212,228,21,131,14,54,57,203,68,235,28,135,91,57,206,61,61,
+  207,79,255,244,187,24,29,217,198,211,251,31,97,106,246,12,202,184,108,94,191,138,254,101,99,220,249,217,221,204,197,69,
+  70,135,70,217,250,227,255,218,123,248,189,191,179,233,117,213,249,27,170,48,177,6,30,126,4,22,159,1,251,197,231,77,
+  12,95,238,49,192,244,194,12,29,29,57,162,56,249,14,0,132,152,24,215,120,158,123,49,125,246,255,246,153,254,166,106,
+  192,72,201,167,124,88,238,72,250,18,243,67,211,134,126,51,0,127,219,179,46,37,163,167,66,216,223,209,106,157,62,254,
+  55,31,28,91,127,253,43,253,114,159,151,78,188,108,2,2,148,204,160,114,25,162,106,19,167,88,162,88,109,208,129,142,
+  73,199,249,118,241,185,201,207,119,38,235,218,15,76,61,239,207,75,21,207,211,192,47,183,63,159,125,30,169,123,11,4,
+  121,56,219,1,199,87,46,204,108,123,242,196,190,158,140,246,40,248,89,202,142,34,235,251,104,87,80,181,17,249,21,3,
+  12,244,118,210,104,53,177,113,194,220,212,52,51,187,199,185,108,213,70,209,33,60,146,82,55,90,88,132,53,34,177,198,
+  109,186,16,4,1,42,189,248,157,32,12,243,73,98,168,36,26,27,37,152,32,180,45,221,50,68,129,201,86,234,177,91,
+  173,5,162,82,105,9,173,181,103,146,200,105,52,22,125,99,230,114,48,147,129,211,26,142,135,112,18,33,93,97,205,170,
+  9,199,235,222,118,245,53,156,250,210,157,132,214,96,100,90,221,72,1,86,166,147,48,97,212,146,137,118,26,84,36,68,
+  154,72,138,76,189,149,72,117,89,54,129,66,182,132,182,130,88,235,116,130,102,64,40,65,156,36,237,148,12,80,66,97,
+  116,186,43,39,29,151,196,24,164,8,145,97,140,13,242,180,132,64,197,30,243,139,211,60,244,192,123,217,114,217,13,116,
+  140,141,162,115,131,196,238,8,13,189,129,11,211,103,136,142,29,166,171,40,24,27,113,48,245,115,252,220,187,175,103,93,
+  95,157,39,30,254,51,194,240,24,219,7,71,169,212,138,28,222,115,132,83,135,87,242,166,31,123,7,95,254,200,71,72,
+  14,31,100,96,229,70,46,220,254,134,238,71,63,254,215,87,95,13,115,13,88,240,97,119,3,154,57,190,55,171,20,19,
+  139,21,94,123,197,90,74,133,252,119,4,33,99,140,181,63,96,54,171,145,235,112,202,110,162,247,177,125,63,156,45,216,
+  99,47,98,124,12,180,20,156,148,112,40,127,255,189,27,14,127,253,254,209,235,222,113,135,208,214,96,149,65,227,165,102,
+  244,74,33,132,32,227,123,72,215,33,178,246,37,197,168,23,219,147,142,114,202,63,177,145,84,41,188,240,60,78,224,120,
+  155,200,245,248,198,45,243,126,72,234,112,65,195,190,85,179,139,151,77,214,102,186,54,93,245,10,89,12,67,50,170,192,
+  140,12,81,197,28,43,55,109,100,104,205,10,156,98,150,32,9,137,130,16,105,45,217,66,47,245,147,19,248,89,72,116,
+  11,141,70,234,20,61,77,75,80,148,2,161,99,172,16,20,164,2,207,65,102,221,37,79,52,81,149,90,25,101,149,103,
+  133,155,196,113,46,49,150,80,107,148,1,211,10,160,214,52,157,211,211,13,255,236,177,185,176,82,155,30,17,226,168,197,
+  84,34,216,220,88,191,161,99,217,134,245,84,63,246,145,84,151,211,54,230,90,138,72,22,214,98,132,2,37,73,255,233,
+  212,9,50,137,13,70,75,144,62,74,106,76,18,98,146,152,108,54,67,24,54,137,147,0,65,202,33,105,13,185,108,39,
+  90,39,169,17,125,123,9,53,181,47,81,88,19,145,36,9,17,14,81,208,174,146,154,9,73,125,150,82,118,142,112,230,
+  62,138,93,43,144,129,68,235,136,196,106,178,217,18,178,184,134,11,245,44,181,51,17,181,70,133,91,54,94,205,35,247,
+  222,201,198,177,38,221,197,49,162,102,158,137,164,130,191,90,48,25,87,201,184,176,101,203,229,60,248,137,207,18,52,37,
+  35,171,54,240,208,246,237,203,123,247,236,185,126,21,76,159,133,218,74,56,42,32,204,182,227,154,95,46,36,40,128,86,
+  204,93,79,29,231,95,253,232,237,20,115,89,162,56,254,118,247,189,31,188,201,153,235,48,151,47,147,60,182,239,135,114,
+  90,230,108,126,17,61,116,8,201,65,184,96,16,79,246,52,195,13,39,255,224,247,203,43,175,92,95,30,90,54,132,49,
+  25,140,10,145,194,162,28,23,161,28,28,199,165,148,117,201,27,243,146,28,115,239,109,143,98,111,32,221,193,122,8,120,
+  42,173,194,184,21,24,35,221,249,249,237,209,110,26,175,216,136,8,82,75,8,41,5,225,125,7,236,225,217,218,124,3,
+  246,116,88,246,244,30,62,190,108,124,221,198,190,53,157,157,92,168,205,211,179,125,61,87,223,124,61,110,46,131,113,4,
+  185,98,30,71,41,38,206,158,37,14,90,108,186,122,39,31,63,240,33,234,170,68,62,91,0,107,240,4,100,61,135,188,
+  54,132,128,201,180,109,72,196,115,153,101,75,30,57,153,216,193,70,6,100,130,239,40,148,77,16,82,146,104,144,221,5,
+  220,222,188,76,214,174,47,26,179,181,248,165,135,246,44,47,31,56,180,238,199,9,23,38,161,152,189,102,123,214,201,8,
+  194,48,198,207,58,109,240,73,35,101,172,105,71,239,200,4,35,20,82,120,88,171,48,177,192,234,152,56,106,18,199,117,
+  50,74,144,207,101,233,44,118,160,148,64,8,155,154,134,197,17,174,114,136,181,161,21,182,200,229,178,40,165,136,162,40,
+  181,93,69,16,39,26,147,24,116,18,35,176,233,186,134,147,163,190,88,167,195,87,188,229,103,95,203,192,96,23,113,28,
+  34,76,130,52,169,105,153,227,148,153,152,147,124,238,171,123,25,159,126,156,43,182,230,56,118,110,145,226,250,87,17,200,
+  83,28,57,118,138,153,133,73,74,125,17,214,134,228,76,68,227,224,103,89,59,186,130,135,74,46,141,184,138,51,221,98,
+  195,117,183,136,207,157,155,88,251,115,115,83,183,102,211,61,252,135,214,97,79,91,152,95,132,166,110,143,234,159,95,13,
+  191,148,115,102,124,154,63,254,240,157,252,226,91,95,69,169,144,251,118,32,244,131,7,64,34,37,172,127,104,73,232,23,
+  3,251,58,29,133,46,14,10,158,54,150,21,157,79,61,51,240,212,95,254,237,198,219,126,227,151,92,55,163,211,241,173,
+  112,144,210,65,58,10,157,196,116,117,22,201,186,110,219,98,254,219,191,105,124,82,187,139,92,251,223,242,218,119,175,32,
+  29,127,47,145,225,23,99,120,107,195,221,236,126,219,213,100,60,7,225,58,24,207,97,112,172,143,161,223,255,124,184,23,
+  142,187,240,240,198,74,107,205,125,7,14,118,30,187,252,106,119,231,245,87,112,245,107,95,133,151,205,165,62,214,66,32,
+  76,140,176,130,254,129,33,166,207,157,167,111,69,63,21,23,62,253,241,79,4,87,117,14,76,140,40,213,202,11,37,202,
+  25,95,120,70,91,143,36,84,74,218,80,91,217,178,86,33,5,197,40,168,106,173,109,36,85,102,198,58,217,166,116,164,
+  201,122,194,31,232,43,228,123,123,138,185,82,103,169,156,119,133,34,65,52,234,216,48,192,201,186,236,220,190,131,207,52,
+  131,242,157,23,78,101,87,68,161,94,117,229,14,113,122,110,254,226,126,138,16,92,180,187,16,237,63,91,97,145,210,66,
+  146,144,104,77,28,6,228,178,138,109,219,215,176,115,231,6,6,7,250,89,190,124,53,205,38,60,240,192,19,68,113,66,
+  20,69,88,107,209,73,154,15,102,109,66,146,164,6,244,105,56,161,67,46,155,199,81,46,129,14,169,213,2,114,37,15,
+  43,99,172,208,104,13,141,106,147,122,117,134,164,187,132,49,25,164,128,216,90,4,25,180,245,249,223,239,251,3,62,251,
+  165,123,121,219,107,199,24,240,135,137,206,62,192,200,174,215,80,11,86,80,218,182,140,214,228,126,142,31,219,199,80,209,
+  208,229,58,76,28,121,152,142,242,28,17,167,56,51,211,203,224,192,24,121,109,96,235,86,255,35,247,126,109,219,59,160,
+  80,196,174,183,112,48,134,67,83,105,209,59,57,13,181,24,194,206,151,89,170,92,152,154,227,125,159,248,10,255,242,109,
+  175,254,39,7,66,63,212,99,248,229,47,226,139,22,83,222,37,249,5,107,207,157,135,7,59,96,244,204,135,63,222,115,
+  244,214,107,135,151,111,94,78,38,223,131,240,28,60,215,195,145,30,49,134,216,106,98,215,83,34,245,20,194,182,57,155,
+  111,30,193,215,72,125,148,243,109,82,90,191,192,164,107,137,80,92,250,92,235,169,19,108,253,177,63,97,247,117,235,185,
+  80,240,177,203,122,25,60,62,193,44,216,5,88,40,73,113,176,104,236,225,222,61,251,214,53,174,189,105,224,198,31,123,
+  39,137,14,48,109,163,117,4,104,41,17,214,160,74,29,248,3,9,65,163,202,174,155,47,35,249,244,167,247,190,101,252,
+  100,3,40,170,116,75,221,145,96,36,68,6,90,54,157,110,77,89,88,84,208,20,233,194,68,70,67,46,134,76,12,158,
+  62,66,182,226,120,229,179,29,221,195,251,7,7,135,157,161,193,242,178,190,65,183,47,223,75,172,96,172,91,240,234,157,
+  235,57,209,95,114,31,218,119,76,252,233,246,157,226,209,15,126,100,137,12,189,152,151,150,122,46,153,52,5,68,184,72,
+  35,48,73,72,49,235,242,138,155,174,225,182,219,94,201,166,77,107,40,20,178,104,29,226,120,89,246,236,57,77,24,5,
+  68,113,154,59,18,197,26,41,51,8,35,48,164,153,97,126,166,221,138,216,152,40,12,41,20,242,212,91,13,130,88,147,
+  49,160,109,4,186,65,172,21,81,51,166,213,146,248,8,116,220,66,40,69,44,92,156,156,207,211,207,62,195,125,15,222,
+  69,94,249,100,84,39,121,191,128,27,79,83,158,184,11,71,75,142,78,187,148,70,54,51,58,230,33,22,158,37,8,103,
+  48,174,230,208,161,51,172,217,212,65,159,189,158,82,239,54,130,112,158,203,86,95,205,201,181,55,149,255,122,247,23,182,
+  118,28,220,189,106,103,189,181,107,53,28,207,194,129,24,14,78,193,97,5,167,47,164,34,209,208,121,25,111,246,241,233,
+  121,254,236,19,95,229,23,223,254,42,138,249,236,119,228,132,46,157,255,11,0,52,255,34,191,240,33,160,15,90,87,194,
+  65,3,247,14,158,155,26,222,243,71,239,237,44,253,206,111,229,50,190,38,155,45,80,46,101,80,66,18,217,24,183,152,
+  71,45,27,245,245,225,227,217,16,252,155,64,190,234,121,165,244,18,152,212,73,85,176,159,123,9,99,85,155,104,114,137,
+  102,242,171,123,56,6,76,57,138,13,214,162,64,14,9,242,218,82,114,32,211,165,49,61,235,151,131,202,226,196,97,10,
+  131,82,96,219,53,153,149,14,177,213,20,122,122,177,81,196,230,109,91,184,48,50,224,150,78,76,22,45,20,3,48,115,
+  105,118,151,246,192,22,192,203,66,38,129,121,224,209,4,206,56,16,9,200,56,80,80,144,247,133,40,88,232,238,76,162,
+  193,177,217,137,179,149,217,137,206,211,251,232,61,151,43,244,62,211,213,215,39,58,186,243,163,235,199,252,98,206,119,94,
+  185,113,187,200,116,244,184,217,98,153,201,233,185,148,116,54,105,194,136,84,41,63,99,76,140,181,6,87,248,68,97,204,
+  202,229,67,252,198,175,255,75,182,108,92,1,54,33,138,18,162,86,12,196,40,233,50,59,51,135,239,231,9,163,6,202,
+  241,240,132,106,251,100,91,176,54,245,90,106,171,160,43,149,10,165,82,137,122,195,16,39,1,82,1,184,8,225,96,73,
+  147,48,144,138,133,74,19,163,178,104,33,17,38,196,8,129,181,25,190,240,169,123,136,155,10,95,41,102,79,44,128,238,
+  161,123,32,198,149,103,136,231,224,194,211,179,68,227,231,89,185,186,159,242,138,141,116,13,140,112,254,244,9,78,79,45,
+  32,131,26,29,180,144,241,33,186,202,89,84,255,50,70,54,111,96,230,71,222,236,76,158,61,85,126,232,209,251,202,143,
+  60,122,215,242,213,39,246,110,223,105,146,211,157,112,32,129,103,38,96,183,129,83,59,97,177,6,177,247,18,11,162,243,
+  211,115,188,255,227,151,64,232,159,204,20,108,233,60,145,146,192,118,21,44,28,21,226,41,215,218,209,206,47,62,52,248,
+  212,234,79,109,187,230,23,127,222,169,45,44,96,35,7,71,129,16,22,47,227,209,185,105,75,46,184,235,222,225,2,12,
+  20,225,248,40,180,158,239,187,236,1,79,146,202,173,95,108,95,255,66,239,182,237,137,22,245,52,126,106,192,71,108,149,
+  214,222,120,24,113,249,131,163,3,93,255,250,218,45,128,64,75,137,37,73,53,52,86,32,177,160,5,170,157,79,223,85,
+  238,66,74,151,248,242,29,195,247,156,248,242,254,72,8,119,118,217,80,39,91,55,149,71,134,150,201,206,76,54,62,188,
+  119,95,179,116,255,253,23,182,65,103,132,141,52,156,146,80,237,2,49,14,202,3,71,88,155,113,32,167,5,29,210,210,
+  215,1,195,87,192,232,21,205,122,223,98,179,222,213,56,127,178,120,240,192,147,189,143,143,173,222,184,113,219,206,206,219,
+  55,174,227,238,191,249,36,103,206,78,226,100,50,237,69,223,246,30,152,76,147,79,165,6,75,68,54,47,120,219,219,223,
+  72,189,94,101,102,102,134,254,190,94,132,208,224,136,52,58,25,143,241,241,25,164,244,145,78,140,21,85,140,141,144,210,
+  18,69,26,99,12,82,42,98,157,16,5,33,66,8,226,56,68,74,129,54,45,170,213,6,249,108,9,95,229,9,194,42,
+  74,65,146,68,84,26,139,212,77,3,43,19,124,1,190,155,101,247,238,125,124,245,174,123,208,72,106,113,131,103,15,159,
+  226,252,226,38,186,199,58,81,73,196,196,220,34,187,118,173,101,245,152,33,227,183,72,58,60,76,118,136,51,213,5,182,
+  223,242,106,238,251,227,15,179,102,125,63,214,137,105,212,22,41,134,103,144,11,130,78,127,3,185,194,50,198,222,244,11,
+  52,238,248,113,239,252,222,199,134,62,243,192,157,125,35,123,239,91,179,179,190,176,173,11,182,37,240,164,134,253,187,225,
+  108,17,230,55,65,180,159,23,31,113,187,4,66,191,240,182,87,81,42,92,2,161,127,84,0,250,173,23,249,133,173,116,
+  212,205,40,232,9,107,199,107,130,7,187,12,253,231,223,251,151,217,71,58,10,235,95,249,83,111,144,141,197,102,26,27,
+  44,5,50,134,193,45,235,220,211,66,140,89,107,215,122,176,111,1,90,30,207,173,44,36,237,10,40,251,18,30,240,18,
+  80,133,164,41,21,243,160,174,130,114,21,214,10,184,38,177,246,154,61,142,186,108,207,170,141,203,6,174,190,76,14,246,
+  244,3,150,216,73,144,218,32,100,6,131,64,137,246,35,176,26,161,65,228,178,20,125,151,107,127,250,39,250,159,90,179,
+  166,227,242,237,59,221,205,87,94,33,7,6,250,241,148,2,145,97,174,81,235,254,47,111,253,137,98,249,203,95,93,92,
+  14,235,76,90,13,86,130,174,156,126,56,159,73,134,39,170,97,54,209,205,94,168,248,150,201,4,142,251,144,55,208,165,
+  5,253,121,33,6,242,198,142,45,179,108,89,125,230,76,240,145,102,115,235,202,222,219,123,243,139,117,250,154,77,78,233,
+  136,166,35,145,56,68,113,219,78,22,137,84,6,99,45,90,27,86,173,92,201,232,112,7,199,142,31,96,177,209,162,191,
+  103,144,114,49,135,213,17,137,129,153,233,89,194,216,67,71,154,160,25,163,117,76,34,99,4,14,142,82,132,65,11,107,
+  92,28,71,96,180,69,107,75,146,88,28,233,225,170,136,66,206,39,104,52,83,123,85,44,73,28,179,48,211,64,73,69,
+  147,26,245,106,130,176,17,7,142,28,229,45,239,124,35,171,214,174,38,95,40,208,221,81,102,213,202,110,30,127,226,107,
+  116,84,78,179,110,101,142,19,167,78,81,77,178,116,14,150,168,31,127,132,19,39,190,192,230,155,111,227,177,199,31,230,
+  83,159,123,128,119,47,191,149,238,145,45,212,235,17,65,116,146,188,62,75,71,253,36,121,14,80,173,116,18,184,27,88,
+  189,227,54,130,237,183,58,11,103,158,233,125,234,177,207,117,116,223,251,197,209,229,11,211,91,123,96,127,2,79,207,195,
+  211,111,134,83,175,72,205,79,227,23,107,195,122,126,122,142,247,125,252,43,252,203,183,191,250,18,8,253,99,2,208,111,
+  191,20,77,66,27,136,28,104,97,57,28,193,151,70,19,237,156,248,159,127,168,30,42,103,215,94,251,250,183,136,168,122,
+  6,27,43,84,162,232,218,190,220,185,176,105,213,160,222,127,124,125,219,246,116,166,10,250,239,218,213,79,22,216,192,119,
+  182,86,48,237,15,153,2,160,152,6,25,167,252,76,126,27,244,44,194,38,7,174,31,151,188,242,220,192,200,202,198,142,
+  173,165,155,70,134,193,8,62,255,39,31,226,186,55,188,154,245,87,109,66,219,24,107,52,162,157,154,97,37,88,43,81,
+  70,98,173,68,72,197,77,183,190,138,155,110,123,109,38,93,116,139,176,198,164,22,22,38,160,59,239,243,250,255,248,43,
+  29,119,223,119,223,192,170,86,184,50,132,21,37,152,94,86,240,26,215,254,206,91,57,114,190,198,226,175,127,212,58,25,
+  87,111,74,52,43,180,73,230,33,248,40,44,92,111,57,171,172,205,70,136,161,38,200,85,54,46,141,9,102,14,206,84,
+  122,175,236,233,228,45,219,119,176,122,120,144,175,29,220,195,133,153,69,140,147,5,41,177,73,76,36,99,148,200,98,2,
+  203,201,99,167,184,238,154,215,176,108,85,63,205,0,142,31,62,199,252,220,34,35,195,125,4,65,68,101,113,30,215,45,
+  179,56,191,136,159,201,17,71,146,70,163,74,198,151,248,25,159,68,71,88,155,32,132,135,231,101,136,99,112,28,31,97,
+  20,229,130,139,235,89,164,155,38,126,26,12,94,198,101,97,174,202,212,133,26,142,239,208,217,53,72,177,84,226,95,239,
+  188,140,92,71,169,189,165,223,78,26,181,146,7,190,250,36,193,66,200,232,96,204,230,245,203,153,89,116,104,212,170,68,
+  97,139,93,215,92,201,195,15,31,226,191,253,225,167,89,140,28,238,255,242,39,120,203,143,175,162,232,119,81,149,155,168,
+  216,117,212,90,169,101,71,201,158,98,212,59,77,101,106,15,161,222,66,121,232,42,226,119,110,119,155,55,189,97,240,209,
+  251,239,238,203,220,243,169,53,151,205,143,111,238,130,13,9,60,213,5,71,3,56,223,130,249,22,132,241,139,0,162,241,
+  153,121,222,251,137,175,240,115,111,185,149,174,66,238,82,202,233,63,6,0,245,190,140,111,10,129,255,15,170,151,195,238,
+  10,176,170,169,197,233,255,244,135,60,214,146,107,118,188,253,102,105,91,85,130,160,2,133,50,133,55,189,161,103,126,255,
+  239,109,40,192,218,105,56,243,21,88,252,111,237,159,147,5,254,15,208,249,45,52,28,73,123,244,222,9,162,9,238,83,
+  224,143,65,105,10,186,61,232,3,134,93,88,101,96,203,161,156,191,109,239,154,13,99,219,215,95,38,70,50,9,173,184,
+  142,107,50,20,206,204,241,224,255,249,48,65,229,141,108,191,237,26,52,139,168,56,1,229,161,201,34,173,196,72,137,176,
+  81,106,178,166,117,59,58,90,96,81,72,233,32,150,242,233,117,194,117,87,95,197,3,183,221,56,52,243,185,175,12,118,
+  10,54,212,45,199,15,159,93,12,30,251,47,159,215,255,106,253,16,191,1,140,253,250,79,51,246,181,199,40,61,178,151,
+  66,250,248,205,221,16,174,135,112,25,214,137,97,110,26,244,181,63,254,182,242,132,163,168,157,153,32,235,101,217,62,180,
+  140,85,195,203,248,155,175,125,153,163,11,149,180,66,145,16,11,137,65,35,177,92,56,63,142,137,13,97,208,164,92,234,
+  229,198,155,174,103,252,252,105,46,156,63,207,137,35,231,168,53,91,148,74,5,114,121,143,86,171,73,18,71,120,202,69,
+  181,165,157,158,155,199,203,164,177,58,73,172,145,42,38,8,234,100,28,15,199,247,136,146,16,17,164,137,24,253,189,125,
+  108,218,124,5,235,214,173,160,111,176,135,98,169,132,114,220,52,230,89,199,36,173,58,66,73,140,86,168,140,225,228,193,
+  11,220,249,247,15,115,235,149,189,140,207,88,38,38,103,240,179,89,100,70,160,114,61,124,242,238,125,124,232,131,79,17,
+  219,60,142,155,240,212,83,95,100,126,113,130,155,110,254,49,150,173,186,145,200,207,18,20,251,72,138,61,232,214,10,26,
+  245,167,41,101,46,48,160,38,89,152,57,78,203,221,72,166,107,35,234,45,219,85,237,230,55,247,62,250,192,103,58,7,
+  191,242,209,209,85,243,211,59,58,224,176,128,61,6,246,238,131,147,62,204,119,180,239,109,223,110,247,112,106,122,158,123,
+  190,254,36,111,127,235,109,196,65,240,131,55,134,151,75,130,211,31,82,0,122,185,126,199,191,10,246,189,80,217,6,207,
+  84,128,229,141,186,158,252,205,255,126,243,151,159,217,179,110,251,123,126,202,31,30,44,18,53,91,148,111,186,193,187,240,
+  55,31,93,95,56,123,97,151,134,99,151,195,193,253,16,149,219,163,245,163,164,118,120,226,121,31,103,64,172,2,121,1,
+  252,13,144,143,82,109,98,95,19,134,29,88,230,195,88,13,70,23,97,240,28,12,76,45,27,232,17,107,175,204,245,101,
+  186,168,207,46,226,118,65,156,5,145,40,10,194,195,209,154,167,62,254,85,148,231,177,229,198,109,152,164,133,21,46,137,
+  214,120,74,99,117,64,101,126,30,41,92,202,93,253,128,131,69,182,251,61,139,21,150,176,85,33,137,19,10,221,195,236,
+  250,137,31,237,57,240,185,175,12,189,2,177,198,40,177,34,214,102,241,213,199,38,235,61,199,38,77,2,12,61,190,15,
+  198,103,196,49,144,66,8,222,97,173,249,20,216,38,72,3,29,64,127,0,114,213,101,59,212,198,177,17,190,246,251,127,
+  198,154,142,110,116,28,208,159,205,241,234,203,118,113,246,174,47,147,56,30,194,58,56,66,18,91,131,116,4,71,143,29,
+  199,154,52,251,188,85,171,34,112,25,89,53,198,208,178,101,140,173,88,164,220,55,200,163,143,62,205,161,67,7,169,54,
+  230,112,132,67,198,201,18,39,49,186,73,154,124,42,36,142,43,144,74,160,140,193,10,77,98,18,58,187,58,89,179,110,
+  5,155,54,111,100,205,186,181,12,13,15,145,205,57,24,27,166,22,32,6,76,146,164,105,35,78,123,173,195,182,141,234,
+  85,7,239,253,203,223,224,169,19,71,40,117,110,228,240,196,113,150,173,42,49,49,222,224,236,217,179,52,131,152,179,147,
+  139,44,38,77,148,235,33,181,79,87,214,99,252,228,147,124,224,240,1,54,111,121,45,175,188,253,205,116,47,91,142,113,
+  61,34,53,74,152,93,206,108,120,6,79,239,102,48,123,148,188,152,226,216,228,50,146,194,46,74,29,235,176,111,251,101,
+  167,250,138,59,70,239,187,251,115,195,197,175,126,120,227,206,122,101,103,55,236,9,225,225,8,30,219,2,167,239,132,240,
+  150,111,83,101,91,32,115,248,36,79,62,186,151,61,219,214,254,192,105,110,172,182,120,113,130,211,158,16,255,176,97,145,
+  243,114,191,177,9,252,28,216,223,129,234,245,240,76,12,97,95,146,204,21,62,249,185,27,158,120,122,239,142,158,159,121,
+  91,207,21,119,220,72,255,166,85,28,124,215,219,6,103,255,251,31,94,221,13,251,59,224,194,126,152,105,144,138,11,51,
+  41,143,195,29,224,132,224,27,200,157,132,156,16,162,179,0,35,218,218,81,23,70,66,24,173,193,232,108,70,13,85,151,
+  143,118,71,27,54,20,135,175,186,194,221,184,124,132,43,202,30,95,255,139,123,161,101,209,229,60,117,211,164,172,125,92,
+  153,37,16,146,216,9,232,52,134,7,63,242,25,138,3,93,44,91,191,10,27,7,184,142,38,104,85,169,77,77,18,6,
+  45,84,38,71,161,88,66,122,105,59,102,1,132,33,104,86,153,60,119,18,147,64,20,132,92,121,237,101,242,145,203,86,
+  13,5,79,159,24,113,16,87,186,66,196,85,107,199,31,135,202,27,160,89,252,202,35,145,0,91,149,82,72,229,48,26,
+  71,252,120,74,184,103,67,88,225,192,242,102,111,79,103,207,142,77,157,29,253,253,68,158,143,49,150,68,1,73,200,246,
+  101,99,108,26,26,100,247,248,56,158,244,17,86,146,88,141,116,28,206,157,31,103,97,190,194,208,96,153,90,163,73,117,
+  113,14,227,196,116,116,245,48,48,54,200,107,86,142,113,203,107,111,229,217,189,123,121,240,222,251,121,248,193,71,153,56,
+  63,133,148,30,57,183,128,227,42,194,168,65,173,17,226,251,14,125,125,93,172,90,179,156,173,91,183,177,117,219,22,134,
+  151,13,166,182,171,198,16,235,132,80,71,169,37,172,77,121,162,116,12,105,177,54,245,132,178,6,92,47,195,158,199,143,
+  241,249,79,61,194,181,175,249,121,250,10,27,89,49,154,165,48,178,154,199,38,79,240,245,103,31,192,77,36,82,101,80,
+  94,54,141,36,180,13,50,142,207,112,255,86,140,8,153,158,188,155,143,188,255,62,198,86,92,201,229,55,188,145,225,245,
+  151,33,61,151,68,46,71,139,229,28,174,236,161,211,28,98,77,247,121,102,91,179,204,206,174,193,45,109,39,91,90,71,
+  231,143,254,170,92,188,229,142,222,175,124,254,131,221,93,119,127,113,213,85,113,99,101,1,74,49,124,169,4,167,247,131,
+  254,78,237,152,186,247,9,214,61,178,7,97,127,0,5,209,75,202,248,31,70,0,250,249,31,187,227,101,127,115,40,4,
+  227,90,219,229,159,189,183,50,219,10,247,84,97,222,135,115,219,79,158,62,53,254,159,254,215,229,15,127,242,139,171,86,
+  190,243,71,75,249,85,171,229,190,130,191,188,175,30,12,7,144,149,164,194,195,129,182,14,104,64,144,47,35,70,98,107,
+  215,74,88,150,129,158,196,218,254,58,140,205,73,70,167,187,75,189,254,214,141,197,190,107,175,202,110,189,254,58,57,184,
+  97,61,157,93,93,228,60,15,18,77,117,110,150,51,219,78,179,247,177,253,100,108,142,156,91,38,12,99,84,70,226,34,
+  8,181,65,139,58,185,88,242,200,231,191,194,200,202,159,69,217,144,96,161,202,92,181,78,88,115,112,165,196,198,81,218,
+  178,184,217,54,87,4,104,77,88,91,64,154,4,172,96,126,250,2,163,203,71,89,249,230,215,246,237,121,250,143,187,175,
+  210,102,27,208,237,192,116,11,38,59,225,212,28,156,171,192,124,193,152,16,27,155,12,216,115,32,26,208,225,195,234,16,
+  58,162,203,118,12,12,44,31,201,0,204,218,132,185,249,10,29,253,69,140,78,200,36,17,55,239,184,156,221,231,63,77,
+  228,104,18,43,48,214,128,181,44,86,235,156,60,115,129,161,129,14,226,32,2,5,149,185,84,76,209,217,219,143,142,35,
+  28,79,114,249,149,219,185,226,202,29,252,196,79,253,24,251,246,28,224,137,199,158,230,240,225,163,8,145,142,224,215,174,
+  219,201,43,175,191,150,117,27,214,208,211,221,129,200,120,96,53,38,14,208,137,69,27,1,66,33,80,32,36,66,164,27,
+  249,105,46,156,68,155,36,213,39,161,48,49,188,247,15,255,128,53,27,174,99,243,85,111,34,23,204,176,125,85,7,103,
+  90,189,108,191,106,43,123,239,251,56,81,165,65,44,45,218,196,16,249,184,210,16,198,85,170,181,2,93,221,157,108,223,
+  178,21,76,194,249,201,3,220,245,201,67,44,95,249,74,118,92,119,7,157,99,43,9,173,193,235,221,202,124,180,146,218,
+  236,110,86,230,206,177,206,123,154,201,197,25,234,254,86,156,100,140,114,223,213,116,253,202,118,121,250,85,111,239,250,240,
+  159,254,215,87,190,227,216,222,74,25,14,206,193,248,209,212,219,233,219,15,55,180,70,54,91,63,144,23,169,37,221,16,
+  216,244,188,63,255,176,0,145,243,59,191,246,238,151,255,221,74,98,90,17,61,119,63,206,211,173,176,57,11,39,214,193,
+  124,0,39,70,44,123,226,221,7,118,46,238,254,205,205,161,159,233,93,158,36,167,53,92,80,16,68,164,251,92,127,159,
+  246,231,170,19,49,96,148,122,85,148,232,91,166,50,238,234,70,95,87,201,27,91,150,203,237,220,84,232,189,242,106,247,
+  170,237,155,233,31,91,70,33,95,64,160,177,38,65,199,49,81,171,133,43,28,10,249,78,174,184,126,23,123,158,217,71,
+  216,140,73,132,139,41,42,78,76,143,179,170,220,75,81,56,52,109,64,62,91,96,238,228,9,230,206,156,162,80,204,80,
+  169,212,121,252,201,61,124,240,125,127,205,205,175,190,142,119,253,228,59,8,91,33,174,159,180,125,28,52,205,197,69,90,
+  243,139,88,29,162,227,244,197,159,157,156,224,182,55,189,195,255,223,79,28,219,250,245,3,7,123,152,158,93,219,91,173,
+  47,174,176,204,101,96,82,192,73,13,135,106,112,2,107,103,14,64,115,17,148,11,125,2,198,166,17,197,145,87,189,106,
+  48,167,28,180,209,204,218,128,189,19,11,220,177,236,10,154,245,5,194,176,197,182,21,43,184,122,205,58,30,56,121,140,
+  68,185,169,233,153,84,4,81,200,161,163,39,184,250,170,205,184,78,10,14,214,66,101,118,22,79,42,114,165,46,180,128,
+  132,4,97,45,221,125,93,220,248,170,91,185,254,230,155,105,181,26,24,157,0,134,92,161,128,114,50,64,132,77,52,38,
+  137,48,86,35,5,40,71,130,78,9,122,179,148,45,212,78,154,21,50,181,106,148,86,97,181,197,205,149,249,226,167,238,
+  228,171,247,220,207,143,189,231,15,241,187,122,112,170,83,152,150,192,196,9,157,221,253,244,116,140,50,62,127,20,199,1,
+  45,35,146,88,224,186,89,92,229,210,106,213,152,153,75,144,86,179,124,120,140,203,119,172,38,138,66,90,213,89,206,237,
+  254,40,97,243,42,220,225,109,248,189,61,72,153,195,25,188,141,115,141,115,148,155,79,49,82,154,160,170,90,76,235,38,
+  51,147,5,230,239,188,11,142,236,182,203,42,139,13,9,201,210,82,243,146,31,211,203,145,120,188,148,243,188,148,170,212,
+  120,236,123,120,161,54,72,227,190,151,28,58,127,104,42,160,197,234,119,97,122,32,37,34,140,232,49,150,67,41,113,28,
+  119,192,244,2,84,90,112,202,194,238,14,88,39,130,176,23,152,116,225,169,24,42,187,218,252,79,51,125,98,101,221,218,
+  222,86,146,92,190,251,230,235,111,189,252,103,127,212,95,121,229,101,116,118,15,80,46,22,17,184,24,83,131,216,98,194,
+  6,70,91,148,148,72,161,144,210,96,116,140,112,44,107,215,175,99,120,120,132,202,153,89,180,74,149,136,98,237,0,182,
+  179,135,218,145,11,20,157,28,74,11,178,70,179,255,177,61,100,55,174,226,11,239,255,115,90,159,248,66,243,109,245,32,
+  56,60,61,145,63,123,219,171,51,43,150,151,83,235,83,37,105,213,106,212,230,22,176,173,16,107,12,2,7,169,52,97,
+  88,161,103,112,132,255,250,145,191,235,90,172,78,117,77,78,76,177,239,254,251,147,175,126,226,51,11,165,221,7,207,111,
+  105,197,43,251,97,163,129,19,9,28,158,128,83,82,136,166,180,118,5,208,51,49,48,210,189,245,149,215,148,209,49,74,
+  41,138,197,28,143,157,121,140,27,47,187,140,92,38,75,37,105,209,211,108,242,214,43,94,193,222,11,231,168,4,17,24,
+  139,81,2,141,228,196,153,51,233,84,80,72,28,41,72,140,1,163,89,24,159,34,9,5,229,254,126,140,6,173,99,140,
+  8,81,34,53,148,205,102,51,72,229,97,173,198,152,8,171,147,182,177,25,96,28,4,10,33,52,90,167,213,158,20,96,
+  218,161,201,194,62,39,180,177,88,148,80,8,165,8,170,1,127,249,23,31,76,35,169,29,135,140,205,97,18,7,215,19,
+  184,40,92,153,165,123,104,152,83,103,159,197,87,5,164,236,68,136,0,76,66,18,122,40,207,18,199,77,90,58,199,248,
+  220,4,129,182,148,187,202,20,250,124,60,71,160,226,99,36,103,26,52,167,71,233,27,217,4,57,65,208,53,68,93,189,
+  158,227,115,251,25,245,206,112,244,145,255,195,153,15,223,213,124,91,99,97,124,8,78,231,225,104,4,79,184,112,170,148,
+  210,129,47,171,98,88,2,18,251,188,95,29,210,165,105,219,150,144,44,217,201,214,158,167,103,211,237,143,239,213,70,255,
+  210,73,248,70,7,136,127,214,28,208,11,189,88,178,141,206,165,116,80,54,25,192,124,8,199,28,200,218,244,115,149,63,
+  133,232,227,41,127,196,111,183,65,8,33,68,108,173,51,186,125,179,115,213,107,95,77,78,129,112,92,146,184,137,49,18,
+  169,34,148,178,88,157,65,57,233,2,37,218,193,160,17,78,130,49,6,183,203,163,88,234,164,170,23,201,40,135,34,1,
+  117,163,25,216,186,134,163,231,39,232,52,30,74,122,148,242,125,124,237,107,15,17,253,201,159,52,55,62,125,224,244,6,
+  56,225,128,245,79,78,108,56,116,247,189,171,150,253,226,207,72,176,152,48,160,58,63,67,43,104,34,19,129,81,14,70,
+  217,246,210,173,67,125,113,138,98,169,72,127,95,137,254,254,78,182,109,223,225,220,246,227,111,239,125,228,254,71,122,159,
+  253,212,157,43,159,249,234,189,23,54,207,45,142,142,192,186,12,92,136,173,157,5,70,34,40,231,118,236,40,143,109,89,
+  35,34,211,196,35,139,239,120,156,91,152,227,240,228,4,87,141,142,225,196,17,213,102,157,145,114,47,55,172,219,204,157,
+  187,159,190,184,21,47,5,28,60,116,156,133,169,10,185,140,160,110,67,132,54,233,135,99,89,152,157,34,182,49,221,3,
+  253,8,52,173,122,19,37,21,158,239,35,165,194,232,180,181,82,202,37,165,59,20,194,166,246,159,82,24,76,210,74,237,
+  91,93,63,37,151,133,76,173,65,5,36,54,193,36,9,74,42,172,80,72,191,192,61,95,254,18,207,236,222,67,222,207,
+  227,187,14,82,104,10,94,157,130,235,96,19,23,233,186,116,116,14,225,56,30,142,167,176,198,65,138,12,218,36,88,101,
+  16,142,192,34,152,157,95,192,40,15,47,170,147,143,93,172,22,24,207,67,10,69,193,153,71,133,211,156,157,216,143,59,
+  186,158,190,213,155,241,115,93,36,93,59,152,138,214,51,123,236,110,251,182,198,194,248,6,184,43,128,251,66,56,161,96,
+  162,158,190,255,146,59,190,139,247,181,253,38,16,58,3,124,186,125,225,188,166,77,110,223,73,234,91,253,76,27,116,30,
+  2,238,227,59,135,47,188,220,51,7,140,243,226,133,151,255,44,0,232,155,79,41,181,38,13,247,66,232,183,53,68,69,
+  224,179,237,23,115,24,120,36,5,44,83,178,118,174,12,7,131,63,122,255,225,207,52,170,27,95,249,175,126,70,118,142,
+  173,32,235,58,184,145,70,203,24,227,104,192,199,42,131,197,32,172,147,218,149,138,4,240,208,54,193,70,17,69,199,197,
+  203,88,20,2,89,151,228,189,94,26,165,18,83,173,152,250,226,52,227,251,247,210,119,112,207,244,174,106,229,41,15,30,
+  138,5,207,198,144,235,181,188,250,244,103,191,208,177,248,99,111,237,45,120,14,213,233,243,52,26,243,196,26,92,225,161,
+  188,12,210,245,168,86,99,76,61,166,191,71,81,89,152,160,220,55,64,98,21,150,26,189,93,157,188,225,77,111,225,142,
+  55,190,174,124,232,208,193,242,189,31,248,208,216,222,79,126,121,124,228,236,248,248,58,107,23,59,64,237,67,248,157,175,
+  188,118,56,239,186,196,129,1,109,176,137,197,10,151,251,14,29,96,219,200,74,50,218,33,116,35,22,27,243,220,180,97,
+  51,15,31,57,200,124,162,209,113,140,231,42,46,156,155,228,194,133,25,214,172,30,36,177,49,174,21,40,229,146,96,16,
+  34,161,190,56,131,181,33,221,125,253,228,114,89,234,245,26,65,101,145,92,62,139,235,151,16,202,193,46,205,118,69,234,
+  21,36,226,144,168,89,37,136,106,56,158,2,161,176,184,32,228,115,222,223,74,34,176,200,118,66,71,210,108,242,129,15,
+  252,13,6,131,192,69,57,89,116,70,227,183,170,248,202,96,148,139,245,36,57,183,128,175,114,228,242,89,146,40,33,8,
+  44,202,85,196,196,248,94,9,37,37,36,134,176,90,37,204,250,84,106,46,197,66,9,98,8,26,53,180,235,145,205,100,
+  240,11,45,42,23,30,101,234,248,179,228,122,70,217,120,229,245,20,186,6,88,179,122,7,254,189,127,63,23,193,83,45,
+  184,127,57,204,45,19,66,127,170,220,203,121,225,80,196,126,203,41,152,32,245,87,202,72,73,40,21,179,97,131,147,213,
+  89,222,3,124,0,184,11,248,125,210,72,160,159,109,87,58,191,218,254,222,190,118,107,244,239,128,155,219,85,79,208,6,
+  136,137,239,227,69,219,221,6,186,195,237,235,42,119,9,128,190,69,135,246,60,17,225,82,170,68,0,188,11,248,205,246,
+  215,156,1,115,6,38,98,184,175,79,27,191,242,103,127,55,243,208,157,95,91,165,110,191,165,47,127,245,102,127,100,245,
+  58,58,70,87,146,207,57,148,221,58,94,94,98,93,23,171,12,18,9,70,128,91,96,113,186,78,208,168,50,176,58,79,
+  44,66,166,106,57,166,171,13,62,252,135,127,106,221,163,251,155,43,26,141,122,179,177,104,182,199,102,122,165,225,233,8,
+  190,14,60,222,99,153,88,128,162,6,213,247,204,225,222,163,255,237,79,110,244,254,159,127,87,8,91,53,112,50,248,126,
+  129,102,173,202,196,161,99,236,254,234,67,230,192,35,123,76,77,9,249,147,191,253,107,114,231,101,27,113,43,53,242,229,
+  158,84,200,168,53,134,58,174,48,108,219,184,142,173,255,223,255,155,63,255,171,239,89,243,213,143,125,110,249,103,62,244,
+  145,41,177,239,208,244,179,153,226,240,239,95,127,117,65,64,234,241,99,36,65,173,137,167,60,158,61,127,138,199,78,29,
+  225,218,21,43,73,154,243,52,77,72,87,161,155,235,86,175,229,179,207,238,70,41,31,7,65,16,180,56,53,51,193,198,
+  205,99,228,27,49,218,21,88,145,178,30,70,91,48,134,218,252,34,58,140,233,27,25,166,80,42,209,168,24,154,139,45,
+  16,33,126,54,79,198,207,130,84,104,44,113,28,17,53,234,36,65,19,235,8,156,76,14,161,60,140,21,237,8,238,118,
+  44,135,84,8,44,24,139,116,61,238,185,251,30,158,120,236,9,164,204,32,165,32,155,207,32,20,41,32,73,11,86,227,
+  56,2,63,171,200,100,28,162,40,198,36,186,189,100,107,137,163,152,197,133,5,114,126,22,207,245,48,81,196,252,252,2,
+  185,124,158,90,189,138,239,250,56,174,131,18,1,45,233,226,185,46,130,132,110,223,229,193,187,63,196,23,62,255,127,184,
+  229,77,239,166,35,174,165,51,17,168,10,168,127,26,244,96,255,24,79,245,175,16,70,27,123,252,133,232,75,33,136,132,
+  130,36,194,181,150,3,213,89,94,101,18,46,36,14,127,14,188,17,56,72,234,69,21,183,39,181,223,188,44,189,20,70,
+  240,173,184,160,239,231,201,2,203,219,143,173,126,9,128,94,26,65,119,152,52,217,50,76,117,64,118,11,212,119,192,179,
+  139,80,45,195,254,142,243,147,155,26,127,249,161,13,115,127,197,202,135,123,75,253,193,198,45,101,59,208,159,17,29,174,
+  83,30,232,35,55,188,140,114,247,32,94,28,81,244,5,34,59,192,193,67,167,56,126,244,0,141,146,203,236,252,130,205,
+  29,57,95,95,57,63,55,181,78,71,147,131,105,16,197,148,132,170,77,237,82,15,145,146,196,179,247,130,190,28,130,34,
+  60,174,160,167,250,55,31,41,63,45,212,21,93,111,185,53,27,5,33,167,31,123,218,94,248,250,61,65,241,240,201,249,
+  177,122,60,190,25,154,53,232,120,242,151,127,125,153,255,191,254,123,199,166,87,94,43,164,93,32,147,247,16,202,69,10,
+  23,99,85,59,23,62,97,120,176,151,127,241,43,191,232,206,252,204,59,71,190,242,229,123,71,234,95,249,58,179,211,19,
+  212,23,150,81,236,44,145,4,9,245,70,3,148,131,80,138,47,237,126,130,109,163,99,100,29,159,36,105,161,116,204,173,
+  219,118,240,236,133,115,140,87,234,40,41,8,195,144,233,249,25,172,35,200,40,73,160,4,137,146,88,29,227,41,7,172,
+  192,2,173,90,157,233,11,227,244,13,15,81,236,236,38,172,212,168,86,22,152,175,84,210,197,87,44,137,209,32,5,210,
+  88,60,199,161,88,236,38,155,43,160,73,3,28,219,126,176,96,117,250,103,210,120,25,41,21,79,60,254,20,81,148,224,
+  184,25,132,84,72,7,144,22,215,19,64,130,78,82,71,183,32,108,17,197,17,142,147,73,237,65,180,190,104,186,6,16,
+  132,1,58,73,200,21,10,212,27,117,102,103,102,25,28,24,68,72,65,38,147,65,74,73,20,4,216,36,0,82,23,131,
+  171,175,216,204,71,62,243,73,123,240,247,126,253,194,45,94,166,208,137,136,19,172,206,183,51,198,102,162,144,215,75,41,
+  173,49,198,55,198,10,251,141,224,51,23,54,217,216,92,224,125,115,147,252,86,28,114,167,73,216,108,45,3,207,123,159,
+  186,207,187,145,62,159,19,250,65,57,75,2,94,143,139,41,54,151,0,232,197,32,247,147,237,143,165,243,46,176,59,161,
+  218,7,135,154,112,182,9,207,248,176,108,196,176,98,217,84,117,5,83,15,143,54,160,187,9,158,150,66,170,82,209,9,
+  189,140,87,211,113,113,206,147,185,8,71,121,113,28,220,22,132,11,34,136,26,142,53,81,65,155,105,7,14,39,112,50,
+  134,243,110,90,25,55,27,208,234,128,186,128,214,211,96,63,6,60,0,250,55,97,60,17,226,254,162,181,170,241,215,127,
+  59,113,242,99,31,31,115,132,16,157,141,86,109,5,204,122,112,74,167,9,203,181,28,140,244,93,152,190,242,200,207,191,
+  231,242,125,111,123,195,178,235,126,226,93,106,205,154,49,92,39,64,100,36,42,159,65,74,175,221,96,42,172,209,244,229,
+  242,252,196,219,222,193,59,223,240,22,158,121,244,81,190,252,185,59,89,190,97,37,171,214,108,32,182,233,174,87,94,249,
+  140,207,47,178,255,220,5,174,26,25,193,177,9,149,70,147,114,161,196,91,174,185,129,191,248,234,151,48,194,144,203,120,
+  140,12,244,19,155,4,199,145,100,28,149,242,52,142,147,2,134,49,36,73,130,227,186,52,235,117,198,207,158,161,119,112,
+  132,76,103,39,29,74,48,55,53,65,18,181,82,133,183,214,88,11,137,177,168,92,14,199,203,130,112,48,86,98,72,23,
+  139,133,181,169,159,52,169,1,155,148,233,37,153,36,73,10,8,72,252,76,150,66,190,72,83,202,118,76,147,32,142,45,
+  81,108,72,76,186,221,239,186,46,73,148,18,239,82,74,146,36,193,247,125,76,146,198,122,87,106,21,138,249,34,139,11,
+  139,20,139,69,242,185,2,90,27,28,199,197,201,8,130,184,129,235,150,105,180,52,190,245,184,124,199,21,162,246,232,3,
+  185,245,173,74,171,19,188,6,244,199,208,251,223,32,122,255,252,68,156,205,20,116,165,123,72,202,48,178,66,63,55,188,
+  86,82,49,93,91,224,134,233,227,68,223,52,85,250,167,120,17,119,0,215,180,129,200,254,19,251,63,56,63,8,15,66,
+  183,251,218,61,16,91,88,92,9,213,6,156,179,176,55,130,14,13,189,121,40,21,193,193,88,97,23,171,66,67,78,66,
+  183,133,46,1,142,72,189,202,38,85,106,92,21,3,139,81,58,18,159,143,160,53,15,73,23,152,22,169,195,98,134,116,
+  195,127,233,109,57,11,81,100,237,241,30,168,249,176,119,172,25,244,164,77,7,45,155,38,131,76,59,48,23,65,104,161,
+  75,194,241,13,245,214,153,217,191,254,232,149,15,126,229,222,245,15,223,126,71,247,142,183,222,33,215,109,26,65,84,18,
+  28,39,75,54,87,38,147,205,164,182,111,66,160,77,21,28,151,93,215,95,199,182,203,183,112,230,252,25,246,29,220,71,
+  161,51,143,209,17,113,93,35,4,60,116,228,0,155,187,251,192,64,236,74,162,86,139,109,67,163,236,88,177,146,39,78,
+  30,98,229,216,8,91,214,175,79,39,227,158,32,231,102,144,198,208,50,26,29,155,116,148,174,210,216,29,132,32,168,55,
+  24,191,112,158,254,225,81,114,165,18,157,194,80,153,153,78,101,12,142,3,198,16,145,128,235,226,120,89,180,85,169,143,
+  180,48,169,254,199,74,108,234,68,157,166,112,96,0,69,127,255,0,74,165,127,151,36,22,99,12,142,114,240,51,30,142,
+  82,40,149,69,57,62,249,66,23,202,113,241,51,25,146,40,38,12,195,52,231,204,113,112,92,23,225,56,132,129,197,74,
+  73,179,213,36,155,201,50,63,63,79,33,95,164,179,195,35,73,18,188,140,143,227,103,8,2,131,163,4,73,43,98,197,
+  224,50,38,95,125,91,215,251,238,127,40,249,209,249,133,100,23,220,146,128,73,224,193,159,131,211,155,38,79,4,159,136,
+  154,230,129,242,16,195,78,6,169,35,148,77,249,65,7,251,79,18,108,190,213,185,177,253,235,103,191,203,106,104,105,216,
+  249,66,64,102,127,88,1,104,105,130,22,181,127,63,0,230,35,208,250,21,104,77,164,137,170,103,22,83,253,172,176,109,
+  240,112,193,77,192,183,144,117,64,68,16,89,104,212,32,30,2,83,77,61,124,226,205,96,159,4,142,181,53,20,29,47,
+  80,70,183,109,103,109,111,90,29,157,109,193,164,3,174,74,57,0,109,32,9,32,89,3,166,15,56,11,141,22,84,18,
+  56,219,3,7,123,199,39,47,155,248,171,191,222,246,196,103,63,181,102,239,107,95,213,179,253,45,175,87,171,55,172,32,
+  9,38,168,26,131,159,41,146,237,200,33,10,185,118,230,87,140,231,43,214,174,91,199,202,213,154,237,235,54,242,166,55,
+  190,158,143,124,232,99,60,249,212,51,236,62,190,159,67,43,86,177,105,108,25,113,220,34,1,188,48,224,214,157,59,57,
+  120,234,16,171,215,172,96,160,167,11,97,3,80,18,225,56,120,198,160,181,67,100,108,58,209,146,138,36,138,145,164,173,
+  85,24,71,204,205,78,147,205,46,35,83,44,211,227,231,169,204,205,210,172,86,17,90,227,229,114,148,251,250,17,78,134,
+  37,27,75,113,241,109,151,86,57,75,138,104,107,210,102,172,88,204,97,109,130,209,18,207,243,200,102,51,52,37,40,9,
+  81,20,34,133,139,69,80,234,236,70,58,138,56,138,200,102,179,196,113,140,214,26,165,84,90,169,73,121,145,23,66,164,
+  45,89,28,197,76,76,142,35,133,160,84,42,209,106,74,6,6,71,72,10,1,34,8,136,234,17,141,36,98,120,120,136,
+  210,27,223,236,220,249,236,177,209,35,7,158,44,190,182,217,236,44,65,201,194,125,231,172,57,54,54,119,161,22,55,107,
+  118,117,190,155,185,234,36,65,18,179,81,8,250,237,15,103,202,196,171,219,215,199,233,151,43,237,187,245,38,138,115,243,
+  204,61,179,7,233,121,208,174,16,83,45,149,133,40,38,250,30,78,224,156,31,196,39,209,182,201,106,128,65,176,14,68,
+  127,0,252,113,187,133,115,129,63,7,70,160,50,3,236,39,141,232,185,162,253,241,31,219,147,1,159,139,33,128,223,192,
+  65,125,43,194,220,1,150,129,249,91,8,126,25,2,213,254,89,91,128,25,210,165,198,101,109,128,44,195,226,126,216,31,
+  195,249,24,158,29,130,77,195,115,149,157,83,127,251,137,29,207,124,254,171,107,142,190,225,182,158,245,111,125,181,187,114,
+  205,90,146,102,196,66,117,1,145,115,201,117,116,145,45,150,144,202,193,152,8,33,160,163,167,200,237,111,126,45,55,189,
+  238,102,14,238,63,194,103,62,246,247,156,219,189,159,245,118,8,33,12,137,128,40,106,177,186,187,135,203,86,172,98,221,
+  230,245,120,133,44,178,25,33,148,2,165,80,66,224,42,23,235,88,172,11,113,172,193,145,8,157,102,139,121,74,224,9,
+  145,146,192,158,143,113,93,202,67,163,100,59,155,136,56,193,201,122,8,199,35,209,2,229,40,140,142,145,194,166,244,15,
+  50,245,38,146,22,97,204,197,59,97,162,99,44,38,181,246,48,49,25,79,160,51,18,209,212,40,149,250,25,107,12,185,
+  114,9,39,227,161,16,184,174,139,159,205,18,180,90,237,133,216,24,199,203,224,56,110,186,110,34,36,81,16,81,169,86,
+  208,70,51,206,56,153,140,143,239,101,9,234,77,108,62,38,215,161,40,117,15,147,13,13,141,100,134,142,216,208,187,235,
+  26,198,215,45,239,248,204,163,143,94,251,234,19,71,11,253,208,23,192,215,250,97,207,191,105,85,231,163,86,213,24,224,
+  66,251,117,206,192,15,85,5,180,116,252,246,175,43,218,215,5,75,96,241,29,226,33,230,129,207,190,230,86,110,253,139,
+  247,49,98,52,221,83,147,56,174,228,136,84,56,24,6,50,62,61,129,166,231,175,62,72,183,16,20,30,120,152,137,103,
+  246,124,67,48,196,203,105,0,157,127,10,79,234,82,117,212,106,127,44,69,52,47,137,190,158,4,150,50,238,159,31,106,
+  247,114,9,195,214,243,166,27,75,158,212,223,172,164,205,167,178,130,56,134,153,69,88,172,192,25,23,246,245,192,83,125,
+  11,149,203,170,31,248,228,246,103,63,245,149,181,123,126,228,166,190,45,239,120,131,179,105,229,106,104,105,42,141,73,234,
+  153,25,242,133,34,133,114,23,210,247,1,131,214,45,148,35,216,190,125,19,59,118,94,193,189,95,254,60,207,254,221,157,
+  44,235,236,69,39,9,6,77,220,108,240,218,107,175,167,123,243,102,18,29,227,96,113,164,72,163,119,132,197,113,21,82,
+  186,237,40,30,131,20,14,38,1,109,45,153,124,129,82,87,55,202,203,96,68,59,198,71,72,220,108,17,149,181,152,196,
+  64,34,80,210,1,13,66,56,128,193,202,84,246,96,76,123,13,67,210,142,39,2,180,69,161,210,93,181,56,162,90,173,
+  224,245,141,162,45,8,71,161,172,73,205,253,51,89,92,225,145,241,4,198,164,36,112,54,227,35,164,160,22,133,88,171,
+  83,0,138,116,218,24,73,136,147,152,102,171,73,146,36,184,174,199,208,192,32,218,196,100,101,142,108,174,68,100,13,89,
+  223,163,51,59,12,197,132,70,165,197,138,158,126,146,183,190,205,127,108,207,158,203,183,220,125,87,231,170,36,234,76,160,
+  83,194,83,29,48,62,10,225,89,248,161,143,59,94,58,183,181,193,231,2,16,89,251,130,23,251,125,82,242,176,82,124,
+  162,148,101,199,96,31,119,36,9,228,124,252,229,203,16,210,50,166,20,214,106,132,227,177,44,219,193,178,63,122,47,18,
+  139,174,207,209,251,145,143,193,227,79,131,235,96,58,74,72,235,178,99,235,14,68,154,197,242,195,3,64,223,170,109,19,
+  63,0,143,193,73,249,171,216,135,217,10,84,26,112,46,3,251,243,240,244,182,106,237,138,234,135,62,119,213,163,247,62,
+  177,254,203,183,221,80,188,254,213,55,137,213,43,135,41,169,12,141,185,57,26,243,21,178,29,93,100,59,75,72,191,136,
+  72,210,84,83,237,86,185,252,134,87,240,236,87,31,198,54,83,99,144,136,4,17,135,20,115,5,162,201,121,154,11,117,
+  148,167,41,229,178,184,74,97,132,64,184,18,29,130,39,37,74,164,36,178,245,124,188,108,150,76,190,3,161,92,172,0,
+  217,22,52,98,116,170,243,65,180,45,72,12,2,157,42,193,5,88,155,90,146,24,97,48,50,13,128,182,109,112,19,104,
+  50,25,15,129,197,65,129,181,212,155,17,101,45,209,56,88,233,226,181,127,180,151,201,82,200,228,136,117,3,207,241,176,
+  94,134,168,221,134,229,50,62,137,142,241,114,57,18,99,8,195,16,107,45,9,9,142,118,112,179,46,51,115,211,56,174,
+  162,175,175,15,89,149,68,42,71,190,3,176,17,210,228,32,235,210,211,81,38,104,54,169,87,155,100,174,187,81,29,237,
+  237,91,179,248,249,191,207,111,173,84,251,124,24,136,224,129,81,56,57,2,141,14,48,179,255,12,128,40,211,254,117,117,
+  179,69,156,36,212,129,74,251,243,79,9,201,111,43,197,61,158,67,36,21,125,82,226,39,58,29,98,104,131,49,49,82,
+  66,164,12,214,106,60,35,48,42,4,66,116,146,96,149,160,244,51,255,130,235,127,238,23,136,177,36,214,66,163,194,143,
+  190,253,29,92,121,197,46,126,235,143,222,135,251,183,31,33,8,130,111,107,56,232,112,233,124,79,42,180,98,90,21,197,
+  13,152,173,67,197,131,115,49,28,47,66,227,138,241,137,210,39,246,61,187,218,121,251,155,157,125,199,78,225,74,24,234,
+  235,101,100,104,144,122,101,145,74,109,145,66,161,76,161,80,70,102,60,84,226,82,204,22,216,120,227,149,156,251,194,61,
+  116,228,92,76,168,49,86,18,88,141,188,48,203,252,133,41,250,215,14,97,17,184,25,15,35,210,85,136,200,137,16,82,
+  224,23,20,210,113,17,174,151,110,246,91,121,209,58,35,69,151,54,202,144,122,69,199,34,37,129,211,225,187,70,152,246,
+  215,90,213,94,64,77,37,123,50,141,64,73,199,191,89,47,101,229,148,33,140,99,180,38,21,132,90,157,2,149,149,96,
+  28,130,40,68,155,164,29,145,108,200,23,10,56,97,72,181,90,197,245,50,72,157,78,200,60,99,169,215,235,88,107,113,
+  93,151,32,10,48,85,131,159,241,89,88,88,160,84,42,145,113,61,230,231,231,112,28,69,169,92,38,136,67,92,225,18,
+  134,17,126,33,79,38,87,32,12,66,202,155,54,139,153,129,158,225,123,62,253,247,165,93,39,78,246,116,194,64,19,30,
+  184,10,246,1,51,42,29,120,252,80,182,97,255,144,211,176,108,8,163,116,170,9,156,22,146,91,51,62,139,58,161,0,
+  20,172,109,79,2,237,139,191,243,106,131,105,214,254,1,23,100,162,128,213,171,86,242,193,247,255,41,51,191,244,139,204,
+  252,241,251,89,248,224,71,49,173,214,11,254,116,121,9,62,190,55,156,149,38,85,10,23,149,100,205,166,149,113,73,136,
+  57,13,39,45,156,93,180,4,87,190,242,122,110,121,213,237,220,241,250,55,179,126,199,229,156,188,48,197,157,95,185,155,
+  19,39,207,32,173,67,115,113,158,11,103,142,48,57,113,154,160,50,139,9,106,92,126,227,117,168,190,46,90,145,193,117,
+  50,104,12,218,104,220,70,200,153,61,7,73,34,77,173,25,208,10,99,164,116,177,66,225,248,57,220,124,17,167,88,66,
+  100,243,224,100,48,109,127,35,33,213,18,149,136,21,162,93,253,144,122,69,27,129,163,21,50,17,105,116,128,85,96,28,
+  172,149,169,49,91,170,45,111,127,127,250,125,133,114,39,94,214,71,170,52,220,208,117,60,16,26,217,38,128,116,148,160,
+  112,81,174,194,113,20,74,41,92,215,37,12,3,132,16,248,190,79,171,149,110,80,105,109,240,50,25,124,223,191,248,152,
+  16,208,10,90,196,73,76,162,19,78,159,60,197,252,252,60,97,24,50,55,55,71,189,94,187,168,101,74,172,166,21,70,
+  169,239,134,114,80,40,58,186,250,112,223,245,19,197,7,111,190,113,215,241,76,230,45,46,252,152,129,87,39,176,106,13,
+  100,71,254,9,143,222,95,238,141,114,137,182,72,218,124,145,252,62,92,11,81,24,98,26,139,244,174,89,197,150,247,255,
+  111,86,61,121,63,215,255,236,187,209,126,134,228,155,8,236,75,0,244,61,122,97,11,215,110,165,244,23,191,65,199,215,
+  223,199,201,95,251,9,62,150,246,220,158,128,210,98,185,84,216,250,186,219,157,184,85,35,142,99,70,71,151,243,198,183,
+  189,157,91,94,243,90,38,166,23,248,179,63,255,32,71,14,159,38,235,23,48,113,200,212,212,89,230,166,206,209,89,42,
+  50,118,249,118,154,77,141,171,124,12,224,68,26,7,48,243,77,206,236,63,65,189,209,98,110,122,134,185,137,105,130,70,
+  11,199,91,90,56,109,3,133,77,39,88,130,52,27,222,144,242,48,73,219,15,218,146,170,168,149,213,56,58,74,53,63,
+  8,18,36,186,237,196,8,233,254,151,112,74,224,116,32,156,34,80,64,73,31,109,210,189,48,99,192,26,141,181,6,163,
+  65,73,23,136,48,218,146,201,102,113,92,15,209,254,58,99,82,49,98,46,151,67,169,148,173,75,18,141,53,134,142,142,
+  14,178,217,180,104,183,198,162,28,69,43,108,17,4,45,140,78,56,119,246,44,73,146,10,25,167,166,166,9,131,16,129,
+  68,73,7,137,32,10,67,28,169,80,66,225,58,25,58,243,157,12,189,246,77,238,161,159,250,233,181,247,12,15,189,166,
+  9,239,116,224,13,30,108,207,64,231,111,129,204,241,195,181,224,249,98,222,175,223,111,225,162,5,116,16,18,53,42,244,
+  175,91,205,235,254,252,253,44,127,226,126,214,252,234,191,161,176,115,219,69,224,185,212,130,125,23,199,180,73,234,210,255,
+  243,47,136,223,118,43,145,54,184,74,17,158,28,103,52,213,16,117,88,24,74,6,122,74,67,107,87,96,226,38,160,136,
+  162,22,17,134,193,193,1,182,110,187,156,255,241,187,239,229,243,159,189,155,155,110,122,5,175,187,227,70,214,108,94,65,
+  216,106,82,57,119,150,45,187,182,49,241,240,51,152,200,226,40,133,147,24,34,215,144,23,25,78,61,117,16,191,183,3,
+  183,84,32,50,1,97,16,208,170,53,200,117,116,224,186,30,202,115,145,34,165,211,141,16,8,156,116,149,130,148,7,18,
+  194,164,122,31,218,58,37,82,165,143,112,188,20,112,144,128,70,7,13,230,102,43,60,187,247,49,142,28,57,194,209,19,
+  199,169,84,106,28,61,122,146,102,43,193,207,56,56,42,105,147,214,138,32,0,147,104,92,39,65,8,75,161,80,166,88,
+  238,32,8,26,120,153,12,82,73,226,40,194,113,20,229,114,153,106,181,138,209,134,140,239,224,121,30,97,54,36,73,146,
+  139,130,71,173,53,213,106,21,155,203,33,149,195,233,51,167,88,189,106,53,126,214,103,97,110,17,37,93,84,94,161,28,
+  7,19,39,32,13,158,227,166,109,32,22,153,24,134,215,110,161,241,158,213,93,247,126,225,179,215,238,120,248,161,238,101,
+  214,14,68,112,207,182,212,76,111,250,42,184,100,75,255,253,186,78,130,144,136,144,242,250,53,116,254,254,239,99,103,39,
+  248,179,233,169,75,0,244,114,80,253,249,228,119,63,233,86,242,248,31,124,20,241,135,31,7,173,113,114,25,114,198,178,
+  28,60,3,253,17,12,251,91,54,229,187,123,186,48,205,22,105,60,160,193,145,134,218,194,34,73,28,80,44,148,56,120,
+  232,60,31,254,232,151,248,252,231,190,196,101,215,109,227,71,223,248,35,92,181,115,39,133,129,46,198,46,95,207,249,199,
+  14,162,146,20,40,194,56,198,119,125,50,145,160,118,118,150,161,237,61,196,113,11,172,165,58,59,75,109,126,17,229,58,
+  160,210,145,186,163,36,142,151,69,121,62,158,231,225,185,46,74,201,148,10,34,181,221,176,34,109,205,194,102,131,218,204,
+  2,23,206,79,50,49,62,207,131,143,238,225,200,177,115,140,79,157,231,212,233,99,52,90,1,202,73,223,54,89,63,79,
+  46,87,194,81,146,40,10,8,227,38,89,225,130,200,131,53,56,78,68,146,52,241,157,44,158,235,163,164,68,88,112,149,
+  11,14,184,142,139,231,198,116,118,116,210,106,181,112,164,67,208,12,40,20,10,180,90,45,146,36,65,41,133,227,56,68,
+  97,72,144,196,20,50,30,245,122,141,169,169,41,186,186,123,8,90,49,70,27,250,7,7,241,179,89,50,94,134,56,12,
+  193,88,50,153,12,74,57,36,38,70,9,129,151,47,211,241,174,127,225,31,94,187,97,235,236,39,63,214,185,165,86,237,
+  143,161,95,192,67,255,17,206,84,161,53,115,233,109,254,253,3,162,48,194,132,115,80,200,210,95,94,117,9,128,94,44,
+  223,182,84,170,6,221,69,196,181,27,80,218,48,215,126,242,150,3,178,61,61,144,142,195,212,147,199,152,157,175,16,64,
+  193,194,138,166,80,203,54,189,243,237,57,229,56,36,66,97,173,69,160,81,54,66,135,117,226,86,29,19,69,224,68,72,
+  33,169,198,134,175,220,245,8,143,221,187,155,107,175,187,154,55,191,237,181,108,217,188,138,153,195,231,17,115,53,66,98,
+  76,148,208,116,35,138,110,142,233,125,39,176,89,65,71,119,145,156,155,33,227,103,81,66,96,226,136,56,136,16,114,73,
+  152,232,34,165,139,227,56,184,109,0,114,92,23,99,12,65,24,50,55,49,201,204,169,227,212,166,78,227,235,136,142,174,
+  46,170,147,1,31,252,139,191,162,34,11,72,71,225,59,138,124,161,204,115,121,209,32,132,38,142,66,130,32,100,97,113,
+  154,14,20,88,31,33,13,158,151,106,132,48,144,201,228,176,218,16,133,17,174,235,144,245,211,132,184,180,210,18,248,126,
+  22,185,180,162,17,37,20,75,69,106,213,218,197,10,72,72,73,20,199,52,91,45,178,94,150,233,233,105,124,207,167,80,
+  44,209,108,212,153,153,158,97,96,100,20,33,52,94,198,67,34,72,116,132,148,160,156,20,132,132,176,136,80,179,252,154,
+  235,229,252,216,138,177,199,255,238,3,165,45,199,143,246,20,161,59,134,251,11,112,120,13,84,138,96,47,5,55,127,31,
+  79,162,73,18,141,231,94,2,160,23,77,48,119,237,92,5,63,125,11,167,119,172,34,142,147,23,236,159,109,62,71,249,
+  61,127,65,117,166,34,61,232,49,176,198,172,95,55,180,252,218,43,68,208,172,3,42,157,120,91,129,213,22,97,4,7,
+  14,28,228,252,249,115,56,174,0,155,96,145,248,210,39,136,52,95,186,231,94,238,185,255,126,110,186,237,149,12,121,89,
+  174,232,30,196,183,224,8,65,172,35,60,153,26,238,139,4,142,61,245,8,61,158,143,182,2,63,159,167,216,221,135,223,
+  145,238,118,57,202,65,154,42,96,48,66,210,136,19,90,173,58,173,234,34,73,216,162,90,93,32,151,132,12,122,134,53,
+  195,14,121,175,139,76,161,72,166,152,167,171,203,39,138,29,132,80,8,173,211,165,84,155,198,246,8,33,104,181,90,100,
+  188,12,66,89,154,149,25,60,4,161,1,33,124,242,66,96,100,3,39,155,101,100,120,37,231,78,61,75,43,104,144,203,
+  117,147,196,26,207,115,201,248,89,130,86,61,53,63,75,12,89,223,167,218,38,151,93,215,33,142,19,176,233,106,137,144,
+  146,48,12,241,253,44,26,195,249,137,243,140,58,203,144,74,176,88,153,71,184,146,238,238,30,100,46,135,146,50,173,180,
+  68,186,80,155,113,61,12,26,35,32,105,54,233,30,24,70,255,187,95,239,220,247,137,15,95,179,242,235,247,116,13,192,
+  64,12,95,237,135,167,223,7,115,185,84,164,112,233,124,159,207,37,0,250,78,0,84,206,177,242,55,223,78,97,199,42,
+  28,11,241,124,125,105,10,253,15,201,61,33,57,143,37,1,47,3,195,13,88,237,92,113,69,103,174,171,19,130,26,200,
+  182,157,131,117,8,91,134,56,178,8,225,18,90,139,176,94,234,179,108,19,12,49,214,1,215,129,88,107,190,252,149,251,
+  209,38,130,155,111,229,142,181,27,104,132,53,116,20,17,37,13,172,7,11,103,166,216,212,157,165,91,47,18,197,134,160,
+  57,195,98,237,60,21,105,137,98,1,26,242,158,70,235,24,132,196,24,131,82,208,145,243,232,202,185,100,59,193,179,46,
+  33,9,129,114,208,78,30,145,43,19,213,27,36,42,139,138,45,74,90,180,1,99,82,0,18,237,134,84,107,67,172,45,
+  174,155,65,68,33,34,73,136,84,145,122,224,80,84,6,109,2,2,58,200,229,251,200,250,62,142,227,226,58,146,172,159,
+  67,39,233,184,189,213,170,147,203,103,169,87,91,180,146,136,124,190,192,212,204,20,65,216,74,205,207,172,33,227,186,196,
+  90,163,141,165,25,180,200,250,62,137,73,24,31,63,207,200,208,8,249,98,129,218,226,44,185,172,143,82,233,22,189,178,
+  110,10,100,66,181,157,52,221,116,191,77,9,162,48,0,41,232,121,231,187,114,199,135,134,183,206,125,226,227,229,245,81,
+  152,159,7,103,5,60,81,134,185,16,180,250,103,52,37,187,4,64,63,128,199,91,49,64,199,174,245,80,105,164,201,16,
+  124,139,119,164,35,241,166,23,217,120,126,134,253,144,179,48,90,135,145,149,175,185,53,231,180,219,47,41,82,247,63,105,
+  53,166,109,73,225,251,62,153,76,134,40,1,41,69,106,229,209,206,113,183,128,163,20,56,18,18,143,71,158,221,203,174,
+  177,21,120,128,107,72,205,200,200,112,238,248,105,114,45,232,89,110,41,120,154,66,162,233,83,146,4,151,216,180,72,226,
+  4,69,38,37,161,29,133,227,121,233,191,101,12,88,13,137,37,116,125,76,174,3,223,203,144,241,114,248,249,2,181,230,
+  34,97,164,177,194,71,155,182,72,13,153,122,253,8,145,114,58,194,162,117,128,235,100,105,181,2,162,56,192,136,50,21,
+  221,192,247,52,106,209,18,75,129,240,179,32,60,194,168,65,54,107,113,148,68,39,169,124,192,81,30,113,148,144,205,101,
+  169,84,43,184,142,147,90,223,11,73,28,199,72,41,105,180,90,169,37,145,76,249,32,107,12,25,207,35,20,33,179,243,
+  179,105,101,41,139,84,22,22,112,29,7,87,185,36,50,78,167,45,142,69,74,217,110,69,83,98,91,202,116,89,55,170,
+  69,244,188,226,6,103,118,112,112,213,254,15,126,192,221,50,53,237,89,40,238,134,39,94,7,231,207,64,216,184,116,25,
+  92,2,160,127,12,242,199,2,255,225,240,57,242,111,255,159,237,139,239,219,16,108,2,8,18,78,44,212,132,73,55,244,
+  87,200,177,177,190,161,93,59,132,14,67,116,98,176,194,34,164,66,0,113,156,198,221,44,44,204,147,196,26,219,94,198,
+  20,136,180,221,17,6,172,192,24,11,66,227,8,135,179,115,21,158,188,112,134,155,150,175,34,14,170,24,9,42,148,12,
+  100,75,28,57,126,150,229,43,150,83,246,154,248,82,35,66,11,73,130,114,219,91,238,90,161,68,146,122,60,199,33,56,
+  14,82,57,168,92,1,215,203,64,182,76,156,205,164,73,176,6,66,147,86,79,218,90,148,112,144,82,161,173,69,24,157,
+  174,122,0,190,239,183,219,81,75,172,35,170,139,85,220,36,194,201,100,72,156,14,90,97,3,234,211,148,186,7,137,202,
+  125,8,225,97,76,189,29,131,220,194,115,51,24,99,145,56,180,90,1,253,3,93,56,142,75,165,86,193,115,93,162,56,
+  68,170,244,249,114,93,151,36,73,136,227,228,226,90,147,163,20,158,239,81,169,84,112,84,202,109,37,218,32,133,32,231,
+  231,8,140,65,250,105,84,184,54,26,199,49,40,153,142,253,149,82,24,107,80,66,160,91,1,229,101,43,136,126,254,95,
+  143,238,251,240,7,95,189,230,196,241,238,28,244,41,184,127,59,156,116,160,230,94,42,132,46,1,208,247,227,44,245,249,
+  9,233,242,36,22,116,71,158,241,31,185,138,133,235,55,227,198,9,147,201,119,96,3,60,23,142,156,103,230,247,63,67,
+  0,153,44,140,6,176,62,185,106,87,111,247,72,31,81,216,192,81,109,245,133,0,163,53,73,28,33,133,192,243,188,246,
+  184,184,13,64,162,173,57,54,242,121,44,84,170,157,49,74,114,215,222,103,184,106,120,57,217,172,143,209,9,194,104,178,
+  34,131,34,203,185,169,144,174,117,62,166,217,66,198,2,233,132,184,133,44,20,58,49,38,3,218,34,173,70,74,129,227,
+  185,72,223,71,171,12,137,148,36,194,1,225,96,69,130,32,6,41,169,214,154,52,234,77,92,223,193,42,7,129,76,221,
+  17,17,8,37,72,18,147,106,114,172,70,11,77,117,161,134,215,168,113,228,232,126,190,254,236,125,76,157,59,77,148,127,
+  146,155,239,248,89,250,139,5,138,197,50,177,142,136,162,0,172,37,151,203,131,149,228,243,121,130,32,32,10,67,186,58,
+  59,152,157,157,65,199,49,38,142,113,189,12,113,18,183,129,39,125,129,172,16,88,1,65,20,81,173,215,112,149,199,204,
+  236,44,66,64,185,212,193,92,98,112,28,143,193,193,65,162,56,253,191,248,89,15,129,65,72,69,18,235,139,45,115,90,
+  57,41,140,209,200,254,97,17,254,155,95,233,127,236,99,31,190,113,211,99,143,116,15,64,95,8,247,70,176,231,231,97,
+  190,4,102,242,18,102,92,2,160,239,25,25,15,108,219,181,142,205,221,69,186,194,152,226,80,23,211,55,108,225,102,207,
+  101,98,160,19,25,166,214,3,223,241,248,30,162,210,196,79,127,102,65,192,170,10,172,236,186,225,218,172,227,8,116,144,
+  182,46,44,45,142,26,67,18,133,56,40,58,203,29,233,218,65,156,70,1,89,107,177,86,60,103,79,1,233,132,77,10,
+  140,167,56,51,53,205,67,135,14,242,234,203,47,35,172,46,160,140,129,48,98,89,103,63,11,103,23,176,43,251,16,109,
+  19,121,169,66,12,46,153,108,23,38,155,71,27,131,176,26,129,193,96,137,218,160,107,149,192,90,147,250,157,144,238,132,
+  105,35,105,133,49,219,119,172,231,192,193,99,180,106,6,63,151,79,125,161,69,42,102,140,163,4,221,230,86,98,27,179,
+  103,239,93,76,157,58,196,98,165,130,146,154,108,214,165,57,255,56,159,252,192,89,150,13,172,38,138,82,71,71,219,222,
+  130,15,154,1,126,54,143,16,130,124,46,155,146,197,94,134,124,46,143,49,154,140,231,81,15,154,44,9,31,4,224,184,
+  46,218,104,162,56,198,247,50,52,27,77,188,76,170,251,153,155,155,195,113,92,148,227,50,55,59,75,119,119,55,89,149,
+  218,128,184,142,76,247,221,108,2,66,166,147,53,241,60,208,23,2,27,71,184,142,67,199,187,127,42,255,100,111,239,229,
+  43,239,252,92,215,6,75,111,29,242,235,224,201,16,102,22,190,117,200,234,165,115,9,128,94,26,248,12,116,21,248,87,
+  255,225,141,172,29,234,166,22,167,187,74,54,78,24,176,22,147,68,47,108,248,251,2,39,171,44,247,43,203,33,16,111,
+  132,206,22,172,136,203,229,222,101,87,110,151,54,142,192,36,8,153,102,179,99,83,151,108,107,12,70,8,252,76,106,69,
+  33,180,65,182,243,183,82,140,50,207,245,130,128,181,26,109,64,185,89,30,56,122,152,171,182,110,199,117,92,116,28,99,
+  147,24,215,117,209,161,195,190,3,211,236,220,186,130,36,94,76,147,37,52,196,205,4,229,45,201,12,219,252,146,53,41,
+  207,34,117,234,120,212,254,207,10,36,72,197,108,181,198,186,45,59,248,236,47,254,42,15,125,253,1,62,243,233,47,240,
+  200,227,79,48,61,61,155,174,116,136,244,255,35,69,186,160,42,5,196,225,44,211,179,139,248,170,140,159,45,147,201,58,
+  100,85,1,226,26,141,234,73,10,165,30,226,8,48,26,107,192,38,134,70,189,134,21,6,173,99,114,126,17,41,4,171,
+  86,172,224,232,177,163,132,73,8,22,60,207,5,225,98,77,250,28,104,163,145,66,16,132,1,25,207,35,142,99,178,126,
+  26,63,61,61,61,157,182,139,90,115,226,216,49,70,199,198,200,102,179,40,41,200,249,153,246,243,107,47,62,183,66,164,
+  196,186,84,2,48,8,99,241,129,177,215,254,136,123,168,92,88,155,124,226,19,222,246,40,206,135,105,248,228,195,155,224,
+  204,187,33,248,219,75,216,113,9,128,190,11,122,135,0,216,91,206,241,200,131,251,137,155,209,119,178,75,249,246,252,143,
+  171,40,158,159,227,149,224,52,83,151,198,97,239,138,171,59,70,214,175,33,138,67,162,168,69,198,207,97,172,139,144,2,
+  99,211,181,3,229,58,184,174,131,148,18,41,68,106,99,33,190,177,245,122,110,196,102,112,141,69,187,25,206,87,170,60,
+  121,248,48,183,108,221,66,171,85,1,13,73,20,147,203,229,56,121,230,12,189,3,29,12,150,2,164,78,64,91,76,80,
+  195,77,124,28,79,97,52,88,218,91,241,8,208,54,213,199,72,129,65,128,112,81,46,44,212,22,232,90,182,21,63,231,
+  115,251,235,110,231,213,175,186,133,147,103,79,243,133,59,191,194,103,63,115,39,199,143,159,161,217,76,87,63,148,235,34,
+  99,133,75,142,76,33,143,167,92,60,199,193,87,25,28,89,194,45,130,227,8,114,25,129,117,115,52,72,39,128,74,57,
+  100,125,15,35,98,36,26,109,210,231,37,155,203,210,221,213,197,133,201,113,148,146,132,73,76,20,133,40,169,144,202,185,
+  8,32,66,136,180,146,65,18,4,1,74,130,14,2,38,38,38,88,54,186,140,36,78,24,191,112,129,174,238,238,148,195,
+  91,106,251,218,207,174,49,9,82,181,95,15,13,74,9,176,2,97,65,132,17,91,110,184,77,44,244,12,44,123,252,175,
+  254,50,187,177,86,237,85,80,94,132,175,254,71,56,161,33,108,94,154,144,93,2,160,151,123,44,176,239,212,52,242,143,
+  238,252,174,109,25,52,80,78,171,170,172,132,145,89,88,230,222,112,77,33,155,245,9,170,77,116,16,33,179,37,44,2,
+  71,74,130,56,73,167,96,206,243,114,167,236,18,215,163,17,66,126,67,11,38,132,196,8,77,198,74,180,21,68,158,195,
+  151,119,63,197,229,171,86,83,114,50,52,117,147,172,85,96,4,29,165,97,246,236,57,67,247,53,35,228,141,64,146,16,
+  55,154,104,55,192,233,44,145,40,23,35,36,82,39,8,97,144,10,72,156,212,149,82,25,12,160,173,75,66,134,124,169,
+  64,28,199,24,18,164,53,172,94,179,138,95,249,15,255,150,119,255,228,187,120,248,225,71,249,216,71,63,197,3,247,63,
+  68,171,213,32,227,122,196,65,72,98,193,235,44,180,195,84,61,148,35,200,248,46,249,98,145,140,159,37,12,2,124,64,
+  219,0,233,74,164,74,53,62,249,206,78,226,150,65,152,84,39,53,56,52,196,236,252,28,205,48,160,157,74,125,177,130,
+  115,29,7,173,77,10,28,214,98,140,166,86,171,226,103,92,242,249,18,205,48,96,110,97,30,41,211,240,196,106,165,130,
+  171,20,214,164,156,85,169,92,198,242,60,159,35,33,218,228,123,186,123,102,173,193,90,8,171,117,122,183,236,80,103,255,
+  237,175,15,220,245,161,191,45,222,112,252,136,219,1,98,6,238,250,87,112,34,130,214,225,75,24,114,9,128,94,42,240,
+  44,192,255,207,222,123,199,89,118,223,245,221,239,95,57,229,246,185,211,103,103,123,209,54,173,122,177,154,37,119,185,202,
+  13,8,37,33,129,0,126,72,131,39,161,132,36,15,36,36,144,74,66,66,28,74,32,4,176,41,46,184,55,92,100,201,
+  234,171,174,149,86,219,251,238,236,244,91,79,249,149,231,143,115,103,180,54,205,96,9,21,239,239,245,154,151,118,71,187,
+  51,103,239,156,243,185,223,242,41,156,2,126,128,111,186,203,250,75,143,4,42,80,23,176,105,57,174,76,95,246,186,107,
+  20,244,33,183,72,235,113,69,201,129,116,30,151,231,136,193,59,50,8,132,20,197,140,199,14,222,149,165,196,15,38,226,
+  43,96,4,133,113,188,207,13,62,84,156,238,119,249,232,93,119,243,247,223,248,38,66,151,98,113,96,37,97,20,211,239,
+  84,121,250,217,62,235,215,150,169,55,60,42,239,35,58,179,184,216,67,185,4,57,216,94,31,35,83,84,37,38,144,67,
+  24,47,176,54,3,21,146,187,18,41,154,80,123,180,47,200,139,86,40,50,3,222,180,169,15,149,120,251,123,110,231,205,
+  111,125,3,15,222,247,8,31,252,221,63,228,161,7,31,37,138,67,74,81,137,32,136,72,211,28,143,32,42,5,24,231,
+  17,40,36,18,147,91,242,204,162,148,64,105,89,16,6,131,128,74,84,193,135,130,220,230,56,60,81,28,177,121,203,86,
+  30,127,226,113,20,25,90,234,162,85,146,174,208,153,5,33,198,20,192,157,166,41,129,214,24,227,72,243,20,132,164,159,
+  37,164,54,167,159,244,9,195,128,86,171,77,225,40,154,227,128,90,163,134,84,18,55,88,48,40,169,17,82,23,44,174,
+  11,218,178,94,123,153,117,211,107,104,254,248,63,173,60,252,209,143,94,127,197,151,63,175,134,189,143,13,124,165,4,251,
+  183,192,82,5,252,69,29,217,69,0,250,166,42,149,73,10,13,215,142,231,177,124,86,192,19,32,231,138,66,104,58,219,
+  185,99,100,227,206,93,216,212,146,244,59,8,233,138,42,198,23,27,163,94,175,11,222,161,68,145,12,97,141,89,157,251,
+  60,199,50,94,49,79,24,84,65,120,140,42,102,53,101,35,80,42,230,107,7,158,100,219,206,77,188,97,199,165,244,150,
+  90,8,227,176,57,172,25,154,224,228,241,51,124,224,171,79,112,235,171,119,113,199,117,83,216,164,199,252,236,25,98,29,
+  81,206,45,54,201,88,204,12,102,104,136,145,53,101,130,64,35,188,4,165,153,157,159,71,72,69,183,211,197,171,25,234,
+  141,26,82,87,112,94,33,149,194,225,73,147,28,137,224,198,91,111,230,85,55,221,196,129,125,251,249,202,151,190,202,51,
+  207,60,195,220,220,18,74,4,100,169,37,233,91,42,165,50,161,87,68,198,147,24,143,49,142,60,205,80,113,9,107,29,
+  100,142,37,215,37,40,85,208,81,8,162,152,243,76,76,140,50,58,210,228,212,233,110,81,149,12,44,69,140,205,65,20,
+  91,49,47,32,140,35,140,49,56,147,99,58,150,48,138,152,95,92,160,223,79,152,28,155,196,26,67,179,217,196,123,79,
+  169,92,66,105,69,16,40,226,114,92,172,227,157,35,203,51,132,176,3,198,53,104,173,7,111,4,158,60,203,168,40,73,
+  237,111,127,79,233,228,244,248,117,230,247,63,80,155,204,237,68,79,138,207,143,35,30,250,53,231,230,43,224,22,120,101,
+  229,182,95,4,160,231,241,40,10,95,103,65,17,18,118,252,121,158,41,165,160,34,168,183,96,172,113,211,117,213,122,163,
+  129,107,183,240,214,160,66,129,84,2,225,5,46,203,200,211,180,136,151,246,126,96,71,81,188,227,66,65,144,91,25,64,
+  23,174,132,172,154,181,163,36,18,65,104,138,90,174,87,141,249,208,253,95,99,247,186,45,108,40,197,44,119,91,104,23,
+  146,229,142,169,181,27,105,239,123,154,95,248,149,79,32,126,244,157,212,134,234,220,125,239,62,226,44,229,71,190,235,38,
+  134,71,3,226,126,196,51,71,231,105,68,109,42,227,13,50,93,66,232,136,131,7,159,162,185,118,43,222,11,22,102,206,
+  211,91,156,163,212,104,82,105,142,82,173,84,10,95,34,95,120,10,101,105,23,240,236,216,179,149,75,118,108,227,220,153,
+  179,60,244,208,163,124,229,139,119,113,238,244,108,17,76,24,4,148,42,37,172,205,8,203,37,114,60,229,64,23,179,111,
+  40,230,58,78,128,41,82,53,34,165,137,163,136,32,214,92,126,249,30,218,189,22,110,169,69,154,24,210,36,91,229,4,
+  33,4,65,84,48,116,196,32,230,71,56,143,233,247,9,131,16,37,36,75,75,11,56,107,145,82,210,239,247,168,155,58,
+  81,20,130,244,88,107,168,86,171,72,41,144,97,136,179,30,231,138,24,162,149,159,197,10,113,209,123,240,221,140,145,215,
+  191,49,58,63,57,124,89,247,215,254,111,125,211,242,98,121,9,175,55,194,67,85,152,237,129,41,93,196,148,87,30,0,
+  125,171,206,117,9,133,153,188,164,176,164,204,95,128,235,139,139,55,191,81,7,35,91,46,223,173,36,96,50,131,183,25,
+  74,23,43,102,37,21,153,45,230,22,82,73,156,119,232,32,24,168,203,47,92,189,251,63,245,13,60,126,16,56,232,49,
+  20,179,26,25,132,204,183,219,124,224,11,159,231,159,221,241,86,156,42,24,214,74,20,38,242,223,247,198,55,241,95,126,
+  111,150,159,254,165,207,33,34,232,38,57,161,81,28,88,106,177,123,199,4,71,143,44,115,234,200,44,127,247,221,55,242,
+  222,219,47,195,36,243,232,234,40,235,199,199,120,228,153,253,116,83,197,182,29,59,49,198,50,127,110,134,246,210,34,181,
+  122,131,218,80,131,168,92,69,6,33,86,120,172,119,164,38,69,34,153,88,59,206,29,27,238,224,181,175,123,45,143,63,
+  246,36,95,250,226,157,28,63,114,140,36,55,84,170,117,84,168,177,222,147,103,6,99,220,96,123,101,168,196,101,164,119,
+  144,59,172,51,232,82,5,41,2,166,214,172,99,235,37,219,185,251,174,175,17,170,128,36,179,160,6,100,1,231,49,185,
+  41,12,213,100,97,65,43,133,24,48,206,29,89,158,211,106,183,240,206,17,134,154,90,173,86,204,216,36,76,6,147,184,
+  208,208,235,118,169,213,235,133,188,68,20,145,67,193,96,213,239,157,199,13,126,47,165,198,25,73,214,74,41,95,114,185,
+  92,248,7,63,182,57,251,205,255,169,183,207,156,143,60,52,143,193,253,13,56,190,5,146,228,34,174,188,178,0,40,191,
+  106,43,187,119,175,35,252,163,175,145,165,127,53,248,176,20,9,25,215,3,163,47,212,245,1,79,8,17,119,188,31,213,
+  245,198,232,212,13,87,107,156,197,101,25,206,228,56,95,2,81,112,115,140,205,201,77,134,180,6,165,195,1,35,167,168,
+  118,132,144,120,107,89,33,37,174,14,94,133,0,161,144,182,72,109,74,5,32,37,42,7,77,200,67,71,14,242,91,95,
+  249,10,239,186,246,90,148,51,72,163,201,101,78,173,164,248,238,55,190,129,95,248,208,23,104,231,61,100,73,145,89,205,
+  231,246,158,225,179,15,157,70,6,37,162,192,243,31,62,242,101,234,53,197,229,27,70,153,61,177,200,153,182,227,145,189,
+  79,241,203,191,254,33,182,238,220,205,187,223,253,110,94,253,170,203,8,69,74,107,110,158,197,249,121,42,245,58,245,225,
+  97,42,141,6,129,214,184,193,63,194,58,75,106,218,132,21,197,77,183,93,207,171,110,186,154,131,7,14,112,223,221,15,
+  243,181,59,247,226,241,148,43,49,46,246,180,187,93,202,141,152,176,20,145,38,9,222,43,2,29,32,101,72,174,37,113,
+  92,34,183,112,233,165,87,242,212,83,79,211,107,181,105,14,213,200,242,28,33,130,98,16,237,252,234,155,128,146,18,239,
+  92,17,83,173,60,233,128,240,24,230,41,51,51,231,200,243,140,181,211,107,73,251,125,150,151,150,145,82,18,132,30,209,
+  233,80,138,75,128,28,180,93,32,69,161,204,119,190,144,204,56,114,188,18,4,82,144,167,25,181,141,155,200,255,201,143,
+  173,127,246,183,126,227,246,245,135,142,78,148,97,84,194,157,167,224,224,20,180,215,95,92,144,189,124,1,72,0,121,163,
+  194,210,27,174,96,230,138,77,152,177,6,183,106,197,231,119,174,227,183,191,244,56,31,253,218,211,228,105,206,115,89,151,
+  127,246,113,20,121,222,55,12,90,176,244,5,122,1,159,5,209,246,190,9,172,173,108,217,212,28,222,52,141,181,6,147,
+  119,11,93,151,208,131,135,195,144,244,186,224,236,128,241,60,96,227,14,134,209,120,183,218,126,121,127,1,40,249,194,185,
+  112,229,239,32,5,94,120,148,3,229,21,46,138,248,236,19,251,104,150,154,220,182,117,19,89,146,162,51,75,191,103,216,
+  56,58,194,119,191,246,10,126,247,11,119,147,57,5,58,35,20,49,24,141,15,114,140,78,57,179,232,249,177,247,127,133,
+  225,102,133,110,39,101,177,221,38,115,22,21,132,156,252,218,131,60,242,200,19,188,241,182,27,121,215,59,223,202,174,221,
+  59,9,53,244,187,61,58,237,54,81,185,68,115,116,132,70,99,4,175,36,214,219,66,217,142,45,60,138,156,103,199,206,
+  75,216,121,217,101,220,254,246,183,240,229,47,124,145,189,247,61,200,236,217,89,134,202,117,92,167,133,75,3,164,183,164,
+  38,165,60,52,76,181,90,47,50,169,180,0,231,41,5,17,239,121,199,59,57,124,248,89,158,120,226,9,162,114,137,165,
+  229,22,97,28,145,13,88,210,114,16,249,147,101,57,30,79,54,72,96,245,56,58,221,54,181,106,13,99,114,58,221,22,
+  229,82,153,229,229,101,148,82,52,135,155,88,107,73,210,148,40,140,7,175,125,209,26,15,56,163,3,141,158,197,11,135,
+  247,2,169,21,89,158,32,106,227,200,31,253,137,177,187,255,240,119,94,189,235,129,251,135,214,195,104,15,190,252,42,120,
+  236,10,88,72,193,70,23,49,230,229,1,64,57,48,178,123,61,122,231,58,90,151,109,228,245,113,200,201,209,58,34,55,
+  8,99,73,115,203,244,112,149,159,255,222,219,248,123,175,187,156,234,151,30,71,126,237,105,236,159,83,17,57,138,16,194,
+  179,131,141,215,11,241,118,36,129,118,113,237,81,73,136,245,125,239,119,174,123,219,219,199,100,185,140,233,246,240,46,65,
+  137,0,208,197,128,217,249,85,63,100,6,156,151,40,12,137,226,136,86,183,187,26,123,188,34,205,88,253,62,82,146,187,
+  65,219,229,61,184,98,107,230,5,228,206,226,60,200,64,243,249,71,246,178,113,120,132,201,106,68,110,122,4,68,180,231,
+  123,188,113,247,30,22,151,58,124,244,190,135,16,97,8,34,35,84,93,80,224,92,97,89,177,216,207,152,235,167,68,90,
+  34,117,128,34,2,169,209,58,36,113,57,127,252,185,187,249,220,157,143,112,219,173,215,112,199,219,223,192,158,93,91,168,
+  148,98,156,49,204,30,63,193,114,121,137,161,137,9,170,181,234,192,243,87,161,131,16,132,162,211,233,179,124,254,12,179,
+  199,207,176,182,82,133,117,235,56,221,77,169,135,49,177,82,132,8,186,121,194,162,135,185,153,57,186,75,109,198,54,111,
+  33,8,36,105,150,99,109,78,24,106,190,255,251,190,143,143,125,252,227,124,249,43,119,2,30,107,114,180,208,171,131,107,
+  103,115,226,48,36,51,6,169,21,74,74,76,150,23,0,222,106,83,12,174,60,83,83,147,68,97,206,242,242,50,14,71,
+  115,120,152,74,69,145,101,57,229,178,94,5,33,6,111,16,206,186,98,254,230,67,112,133,246,77,106,79,154,56,74,81,
+  157,202,59,223,19,155,55,189,254,234,195,191,248,31,27,91,242,108,196,66,53,132,7,159,130,153,61,96,194,151,216,67,
+  191,79,202,213,88,171,111,43,0,74,128,141,19,67,252,236,15,188,129,70,28,98,7,15,85,131,34,139,107,221,244,8,
+  86,73,82,99,25,118,30,219,251,250,154,37,51,142,204,164,76,13,87,113,223,123,27,188,238,114,26,95,126,2,113,247,
+  62,220,5,64,180,18,45,123,30,88,203,11,231,247,187,242,3,108,65,213,123,191,149,56,222,210,124,219,235,171,18,75,
+  150,165,152,220,13,86,236,186,216,222,164,93,178,126,175,24,184,202,66,12,89,138,53,229,114,9,63,200,137,89,1,32,
+  107,221,170,254,85,136,98,85,239,133,192,27,139,240,14,137,194,121,143,8,20,210,58,188,55,44,187,156,15,221,123,55,
+  223,123,235,45,12,199,18,155,231,160,36,173,185,14,223,121,221,13,44,47,182,248,220,254,131,184,178,4,111,209,54,192,
+  88,80,202,18,72,80,14,228,64,29,39,40,252,155,17,16,149,202,248,146,198,163,120,248,209,253,156,58,113,134,93,219,
+  54,114,203,205,215,113,217,229,187,24,106,12,145,217,140,133,153,25,210,110,74,165,54,68,218,233,49,115,242,0,199,15,
+  28,96,230,228,9,226,126,159,114,98,112,78,210,64,49,57,189,113,176,66,79,200,77,142,202,12,205,80,179,182,92,99,
+  46,77,153,57,124,24,61,220,164,50,62,78,230,45,206,11,78,159,62,201,79,252,228,63,33,205,219,124,233,75,119,35,
+  69,165,160,38,136,140,40,14,169,196,53,58,221,14,90,10,188,45,242,230,65,160,85,17,1,237,188,35,205,51,150,150,
+  150,169,85,235,8,4,189,110,159,48,234,162,164,162,82,9,200,243,156,48,140,6,250,48,199,74,136,136,243,2,114,9,
+  42,196,147,35,29,84,194,144,78,107,137,209,106,153,239,251,233,127,166,62,181,110,253,246,189,63,246,99,149,43,186,189,
+  138,4,213,129,175,46,195,236,8,188,36,82,88,87,172,69,126,41,8,200,40,66,59,95,241,0,180,178,72,206,128,145,
+  177,6,191,250,99,119,176,126,98,168,48,154,186,96,78,99,160,248,92,246,156,115,255,159,91,45,25,7,38,133,225,42,
+  35,223,115,43,63,248,218,203,80,95,126,2,238,222,135,72,115,202,20,17,181,103,120,97,27,113,89,128,156,16,48,226,
+  96,115,112,217,158,53,205,203,182,8,159,27,112,41,185,145,72,157,82,81,10,188,34,239,247,17,198,34,80,24,28,126,
+  197,255,199,56,172,43,66,6,87,164,2,82,62,39,192,47,214,243,190,16,203,242,220,127,5,130,64,72,188,240,56,47,
+  201,133,227,208,226,57,62,255,248,227,124,199,245,55,19,136,20,200,201,156,193,119,3,190,247,213,111,96,222,165,220,115,
+  228,32,58,172,32,115,65,136,199,34,17,82,16,170,1,120,123,135,240,30,233,50,74,58,100,124,168,73,110,114,132,16,
+  140,141,77,17,149,74,156,154,79,249,228,103,239,229,190,251,30,229,170,61,59,216,126,201,70,58,237,22,237,185,46,237,
+  217,46,102,185,79,144,101,148,176,172,169,104,148,86,36,78,226,50,75,106,12,221,165,46,206,187,194,31,218,164,69,155,
+  3,216,180,79,83,8,106,181,26,11,189,148,238,169,179,232,161,17,42,245,58,231,103,23,233,245,230,249,169,159,252,127,
+  88,156,159,101,239,195,71,8,75,101,124,224,41,87,99,66,95,8,116,157,119,3,98,165,34,205,114,50,99,232,167,9,
+  121,158,34,148,196,26,75,28,197,76,140,79,33,165,160,221,106,19,4,33,82,104,84,173,134,181,133,231,145,82,43,222,
+  73,133,59,54,62,199,32,200,189,65,89,69,37,12,57,53,59,203,235,223,250,90,92,214,229,109,127,255,7,248,125,45,
+  215,126,242,239,255,240,107,223,105,221,9,7,79,206,192,124,11,220,139,61,16,18,131,89,232,191,14,67,238,148,154,186,
+  51,47,9,81,219,11,10,64,110,0,44,149,102,149,205,175,187,156,137,155,119,225,203,17,157,110,250,252,212,127,3,32,
+  154,24,174,97,191,231,86,14,189,254,114,110,253,195,175,177,243,209,195,0,172,249,27,120,1,123,16,28,131,113,11,235,
+  135,94,251,186,166,142,171,248,100,25,155,38,120,111,138,76,46,89,100,16,228,121,134,181,69,24,160,29,16,221,60,43,
+  186,172,1,24,15,124,130,254,172,90,235,66,113,170,117,5,143,104,69,84,169,156,67,11,137,11,35,30,58,122,144,241,
+  198,16,119,92,118,13,174,215,162,143,225,140,93,34,50,1,223,119,213,141,196,157,156,7,79,159,192,198,101,148,15,17,
+  214,227,188,199,42,129,86,133,69,170,181,6,231,114,242,212,50,115,110,142,56,148,132,74,50,111,78,49,57,53,65,189,
+  90,161,169,20,213,126,206,137,251,31,135,99,103,41,41,133,75,114,74,174,0,70,169,36,198,58,218,185,135,52,71,90,
+  135,177,22,99,29,153,207,200,172,41,146,58,132,7,45,80,229,18,149,114,131,70,189,1,65,192,194,177,19,44,204,204,
+  34,77,151,233,250,14,36,1,71,143,156,224,250,235,246,240,175,254,229,63,229,39,127,242,223,176,255,192,9,234,67,99,
+  52,74,195,88,99,16,84,233,13,50,168,60,158,48,12,81,74,209,207,82,4,144,101,25,222,58,206,156,57,131,115,48,
+  58,54,70,104,45,189,118,135,44,203,49,206,80,171,214,169,84,42,171,213,167,247,162,72,232,144,186,48,52,179,69,74,
+  108,146,37,84,107,21,46,185,100,43,38,203,9,189,164,50,58,202,130,84,177,178,174,44,64,71,20,113,226,238,69,126,
+  208,235,192,191,15,52,127,168,53,53,138,153,226,43,106,6,228,47,120,145,61,69,252,46,59,215,177,118,231,90,198,111,
+  217,77,216,168,144,37,25,100,230,121,111,62,141,177,96,44,253,225,58,63,243,67,111,34,253,185,15,242,244,249,165,23,
+  244,37,22,131,170,110,73,16,134,158,241,69,88,51,114,235,205,37,133,199,152,12,211,239,34,113,40,21,163,116,128,247,
+  22,147,167,5,104,120,135,148,69,128,173,214,130,56,14,87,163,108,87,212,217,95,255,157,10,209,164,64,192,128,211,178,
+  242,103,11,41,130,3,225,9,148,66,58,65,174,224,11,143,61,194,80,28,115,203,142,29,200,180,133,72,29,121,218,39,
+  182,154,247,190,234,213,52,158,126,156,135,79,31,165,235,10,143,105,97,4,210,41,2,87,172,178,5,158,32,140,40,7,
+  33,81,28,83,173,68,140,55,26,76,84,235,76,148,171,76,15,141,80,46,197,200,64,97,133,67,57,143,76,243,130,81,
+  237,13,185,243,128,66,234,136,126,55,37,21,150,196,103,232,40,160,50,90,165,54,50,78,169,89,163,57,49,78,117,104,
+  136,176,90,163,218,28,162,92,46,83,169,148,209,97,200,77,173,46,79,63,245,12,79,60,246,4,39,143,159,167,22,55,
+  57,123,102,134,94,111,43,107,166,70,249,133,127,247,207,249,231,63,253,139,204,205,166,3,110,133,39,75,83,148,146,88,
+  231,208,186,104,169,188,119,72,138,100,144,94,210,39,14,66,148,86,44,183,22,169,86,43,40,41,105,181,150,41,85,43,
+  69,180,144,43,140,203,74,165,18,74,169,194,187,9,81,196,71,231,14,44,232,72,50,59,115,158,75,182,111,165,222,168,
+  97,156,1,169,184,247,11,95,98,71,158,207,122,56,235,161,29,131,123,49,1,200,15,182,191,255,88,7,252,143,64,81,
+  161,224,139,188,84,236,102,181,80,223,130,24,65,74,86,254,190,6,42,151,111,66,150,66,244,45,187,177,149,24,49,61,
+  194,26,41,241,89,142,233,190,240,236,8,153,229,44,70,1,235,55,79,210,56,191,244,130,127,191,22,240,8,34,2,223,
+  12,54,108,104,214,247,236,146,152,156,60,233,99,6,201,12,222,151,65,106,172,205,72,147,94,97,52,54,0,24,231,44,
+  74,105,148,214,131,77,23,23,12,161,87,139,157,1,40,13,214,204,95,103,140,54,0,31,239,113,90,32,188,39,180,130,
+  80,132,244,69,202,239,63,240,85,114,109,184,117,227,86,84,219,98,8,200,164,71,59,203,219,118,238,225,198,75,182,178,
+  104,19,210,126,177,173,114,12,146,36,6,241,205,165,48,42,18,53,148,162,28,86,8,156,34,80,2,103,50,2,97,240,
+  89,23,111,53,90,106,188,150,248,40,32,32,66,100,142,126,150,179,220,239,211,241,45,214,111,219,204,216,218,81,202,163,
+  21,234,245,10,149,90,140,142,2,84,160,137,74,85,74,213,26,81,185,134,10,162,98,219,132,39,199,211,24,170,115,243,
+  173,183,112,243,205,55,113,238,212,57,158,120,252,25,14,60,251,52,135,14,157,96,251,182,141,108,219,182,149,127,243,175,
+  127,134,159,255,185,95,98,102,118,17,98,137,212,186,104,193,188,31,204,128,32,12,195,162,133,28,56,34,58,239,73,179,
+  156,115,231,207,227,61,108,222,180,165,104,7,251,69,102,189,53,57,173,214,50,206,123,106,213,106,33,135,65,226,173,67,
+  73,9,40,156,181,228,54,225,234,107,47,7,60,161,14,217,127,240,8,207,124,252,19,230,125,112,220,194,33,13,75,245,
+  193,140,243,197,60,95,144,138,223,213,154,0,255,146,99,106,107,51,119,254,91,40,3,4,56,199,145,127,242,118,110,202,
+  51,130,245,227,116,181,42,18,150,60,248,44,255,27,103,67,104,231,217,255,134,43,56,176,247,96,49,176,125,1,223,89,
+  98,96,220,251,178,135,145,112,203,214,161,161,169,113,92,178,68,210,235,146,103,25,82,41,52,26,33,4,73,210,37,75,
+  250,72,10,73,65,161,245,26,172,214,87,124,120,46,104,189,86,128,198,251,1,39,104,133,22,61,16,78,14,28,134,86,
+  127,14,210,121,156,176,24,41,138,12,83,173,233,248,156,143,221,127,15,83,81,149,45,19,83,164,73,15,103,12,185,201,
+  136,195,136,102,20,209,240,1,42,168,226,130,128,92,21,32,134,243,152,44,69,82,124,47,233,37,248,140,92,21,98,88,
+  165,4,50,0,173,3,194,160,132,150,154,204,89,82,233,88,204,61,243,2,206,217,148,182,75,72,178,46,75,157,121,174,
+  10,134,217,50,53,65,92,142,201,242,148,52,201,177,253,20,33,66,234,245,128,72,6,5,209,82,106,172,179,8,169,138,
+  170,33,77,16,192,228,218,49,38,55,76,114,211,242,13,28,126,246,32,207,30,58,129,240,134,29,59,118,242,19,63,245,
+  15,249,255,126,246,223,178,216,235,145,229,22,41,53,72,129,177,150,64,42,162,168,68,179,57,196,210,114,11,99,115,172,
+  241,228,121,78,160,53,173,78,139,243,179,231,24,29,29,195,121,8,130,238,160,237,114,116,41,194,22,203,229,74,97,215,
+  33,11,187,146,80,75,206,158,59,195,214,237,91,152,90,55,69,158,166,200,184,194,39,254,248,19,108,63,113,124,110,4,
+  158,78,224,72,31,250,127,60,24,246,190,88,51,160,42,240,159,2,205,146,128,202,75,113,13,159,30,125,246,91,255,42,
+  227,117,42,66,224,211,28,159,190,184,163,45,151,27,234,27,199,153,188,110,27,203,247,238,127,65,1,40,4,169,165,168,
+  230,206,143,235,230,112,69,73,143,119,166,240,44,70,96,156,163,44,11,73,64,175,219,42,230,63,190,40,199,133,4,33,
+  10,63,157,80,235,1,25,81,172,90,76,172,180,87,43,230,100,171,237,217,170,107,98,17,203,190,194,158,46,100,98,18,
+  163,5,214,21,32,18,137,128,212,102,252,225,125,247,242,206,91,110,102,107,115,24,233,28,38,10,200,180,68,100,14,97,
+  5,169,80,120,3,202,22,58,52,37,36,210,5,8,173,87,149,250,198,59,34,33,9,195,34,250,199,8,193,114,158,243,
+  236,249,25,90,253,62,105,32,201,227,128,32,174,162,194,26,178,222,164,108,42,212,228,48,253,190,225,206,187,30,224,190,
+  251,247,114,249,21,151,177,125,219,54,70,70,134,48,121,70,123,169,67,191,123,140,114,173,70,169,86,163,90,175,161,195,
+  16,164,196,123,71,38,61,69,253,97,193,164,196,213,144,61,87,95,193,214,254,37,28,218,255,52,15,61,250,8,227,163,
+  99,188,251,59,223,198,175,188,255,183,177,126,32,252,85,1,165,40,70,8,65,158,229,140,141,142,16,232,128,165,165,37,
+  210,52,197,25,143,113,142,94,191,207,169,51,103,136,227,18,163,195,99,152,44,167,211,110,175,254,12,236,192,132,191,82,
+  41,3,18,233,100,65,127,200,51,110,190,229,70,114,107,64,41,78,159,62,203,227,31,248,160,249,30,56,156,195,227,14,
+  78,255,79,48,159,124,177,159,240,32,36,148,138,242,138,156,231,165,6,64,66,61,15,99,32,99,95,244,33,219,215,129,
+  131,117,76,188,246,114,166,30,60,64,108,220,11,242,238,179,226,41,52,7,82,128,94,74,83,221,203,218,4,120,18,107,
+  81,113,140,116,150,168,84,198,153,140,164,215,43,252,119,156,67,106,133,27,112,160,165,210,132,97,225,197,44,132,94,5,
+  155,21,48,130,129,47,180,95,177,140,125,78,167,228,87,53,99,69,236,178,178,128,183,24,105,139,4,119,227,80,50,228,
+  88,210,227,255,124,233,203,220,176,105,59,87,109,222,204,84,165,76,32,32,215,6,35,28,194,57,20,30,159,231,132,74,
+  227,124,142,14,10,101,184,80,122,80,81,72,156,146,28,95,110,113,236,208,97,150,140,97,161,223,199,5,138,209,169,9,
+  26,149,6,54,243,136,92,130,233,17,42,77,164,21,198,42,130,32,102,116,122,10,25,6,28,62,182,200,129,3,119,51,
+  49,218,96,207,165,219,88,51,57,140,146,158,206,226,121,58,11,179,180,162,152,82,181,78,181,57,76,185,82,33,212,193,
+  192,56,3,44,186,176,6,17,150,168,164,184,236,218,107,217,190,123,55,167,78,28,229,202,252,42,246,92,246,0,247,61,
+  240,16,82,69,104,161,73,179,140,56,138,139,193,179,135,225,102,147,114,169,68,183,223,163,221,43,236,102,187,73,31,235,
+  28,71,143,29,199,89,201,154,169,73,100,36,105,181,90,24,107,168,84,138,90,83,105,73,92,138,9,101,192,169,83,167,
+  216,125,217,78,70,199,70,233,231,125,170,213,33,62,241,177,223,99,253,51,79,204,143,192,83,25,60,149,195,210,20,248,
+  247,240,226,144,237,34,224,30,41,57,174,36,218,191,116,73,217,175,72,49,170,207,12,193,166,9,22,174,217,198,254,251,
+  159,125,65,128,127,80,1,249,186,243,109,5,199,151,191,248,133,195,31,188,241,117,155,198,234,13,113,166,164,74,205,43,
+  246,68,107,174,190,92,236,186,118,13,209,112,25,99,115,220,64,107,36,173,69,200,24,239,51,180,202,10,107,10,21,124,
+  67,235,245,28,8,201,193,122,94,2,94,174,12,159,221,215,189,163,121,81,216,189,202,66,201,129,195,227,133,196,121,129,
+  208,154,101,39,249,204,254,125,124,245,232,1,118,142,141,115,249,212,90,214,77,140,83,46,151,8,181,38,116,2,97,13,
+  206,122,180,214,16,134,244,157,101,169,223,99,118,97,145,99,115,51,156,92,158,39,183,30,21,197,56,161,200,173,165,42,
+  171,72,25,98,157,196,107,72,76,78,40,161,84,9,139,217,150,113,24,160,223,206,104,84,98,42,186,142,12,60,231,206,
+  156,231,248,241,47,49,52,92,225,138,43,119,179,97,253,52,181,114,136,49,57,11,243,231,105,45,204,17,149,202,148,199,
+  70,168,150,107,148,75,53,132,18,88,145,98,189,197,122,143,77,19,164,128,205,219,182,178,105,203,22,174,186,250,58,62,
+  251,185,207,243,155,191,245,127,121,252,177,125,120,36,18,79,160,66,150,150,150,72,210,144,48,138,105,54,135,9,162,136,
+  126,175,143,71,146,152,148,124,113,158,44,55,244,210,46,107,166,166,136,227,152,165,197,37,242,204,210,28,86,164,73,66,
+  24,133,180,250,203,72,13,55,223,124,19,206,90,34,29,115,250,212,121,30,249,205,223,202,239,192,31,204,97,175,135,19,
+  215,65,246,134,23,241,25,56,43,4,215,135,209,115,109,250,69,0,250,27,110,197,172,99,232,245,87,176,254,225,67,168,
+  220,62,239,85,144,2,22,193,159,132,249,146,20,119,111,74,211,220,61,252,204,6,15,245,10,76,44,127,230,158,201,103,
+  66,53,126,248,250,43,71,174,252,169,31,175,142,111,223,36,122,102,22,235,52,113,10,50,116,56,45,64,36,131,97,178,
+  64,122,119,129,254,75,174,130,80,209,183,13,124,158,145,69,237,228,60,98,176,13,43,64,106,64,54,241,30,225,124,65,
+  58,19,96,241,104,83,36,107,248,80,145,56,203,3,167,143,179,247,212,113,154,97,133,169,70,147,201,161,49,214,84,203,
+  12,87,75,212,107,67,100,166,207,241,153,25,78,44,204,114,116,113,150,142,40,134,172,129,40,242,182,116,146,3,25,90,
+  41,98,165,48,253,62,11,221,46,94,64,20,197,140,143,143,19,148,11,51,51,75,225,225,147,154,132,133,158,39,10,3,
+  164,132,90,115,132,166,30,35,207,83,246,62,116,148,135,246,30,100,227,186,81,118,108,219,88,164,99,152,140,94,119,153,
+  243,201,34,101,25,51,90,110,82,30,31,161,92,175,160,148,198,51,240,215,150,146,196,230,72,33,104,140,84,248,222,31,
+  248,30,222,126,199,219,248,212,39,63,205,239,254,223,15,242,228,147,251,233,27,139,117,142,118,183,131,214,133,24,182,214,
+  168,81,42,149,232,245,122,88,231,48,194,51,215,158,163,125,184,205,252,252,28,155,55,109,97,120,120,152,110,167,131,214,
+  138,74,41,70,24,199,233,153,83,188,243,221,239,96,104,164,70,154,100,148,170,53,62,244,187,191,206,182,39,30,62,51,
+  10,15,36,240,112,11,22,62,51,40,88,95,140,83,1,126,55,8,56,73,193,253,185,8,64,47,198,201,12,126,227,4,
+  242,71,223,202,154,247,127,26,242,231,127,241,216,7,74,208,203,157,223,39,224,140,46,102,126,229,88,48,86,246,172,153,
+  202,236,166,252,238,189,59,14,221,255,247,46,219,123,199,235,54,237,252,225,247,68,235,39,183,145,36,139,72,221,66,136,
+  18,74,12,161,85,4,184,162,130,17,69,122,198,10,17,110,117,45,63,48,172,119,190,104,187,164,82,95,103,170,190,194,
+  7,186,112,139,38,87,62,47,37,129,82,88,99,11,251,213,48,194,11,232,144,115,176,53,195,254,185,211,72,233,9,164,
+  36,210,49,74,200,194,188,203,122,172,20,232,56,90,77,39,213,170,200,55,43,151,43,68,113,140,113,150,147,167,79,19,
+  199,37,198,199,39,24,105,142,96,115,203,236,204,44,113,28,175,234,245,162,40,30,236,44,86,248,75,57,214,22,60,29,
+  173,3,132,16,28,63,50,199,129,103,142,49,60,82,101,231,246,205,108,218,184,150,161,64,98,178,140,179,217,121,92,111,
+  137,122,28,81,175,84,24,106,142,16,68,85,242,129,161,91,110,7,196,186,44,71,7,146,239,249,219,223,199,219,223,254,
+  46,30,221,251,24,95,251,218,125,124,225,11,95,230,192,161,99,244,147,132,32,10,152,155,93,40,30,0,165,138,156,54,
+  239,80,66,225,242,156,153,153,51,100,105,159,203,47,191,156,145,145,113,242,60,163,221,105,211,237,119,216,184,105,3,59,
+  119,238,32,207,13,97,24,114,248,196,49,30,248,63,191,145,127,63,236,207,225,254,18,28,59,5,217,223,126,49,239,253,
+  48,68,42,93,204,125,46,2,208,139,119,68,146,49,127,249,102,178,31,125,43,27,223,255,105,196,243,12,66,26,232,22,
+  221,88,79,67,63,0,150,64,214,60,65,8,165,150,96,88,121,177,109,58,207,110,46,127,248,179,183,126,245,193,71,47,
+  189,228,39,126,108,232,134,215,95,67,175,107,7,3,77,129,51,5,229,95,14,252,160,221,138,6,98,208,146,173,216,77,
+  92,104,211,186,2,60,43,195,106,121,65,53,116,97,43,183,226,105,227,7,131,43,233,197,170,127,142,212,18,99,45,178,
+  172,81,66,32,45,24,36,198,175,204,47,67,74,186,200,143,151,10,226,74,9,111,29,165,114,133,48,138,200,178,12,188,
+  39,51,57,213,160,134,150,146,110,167,179,250,61,3,173,139,7,92,22,210,143,64,5,104,45,139,239,53,96,25,39,73,
+  138,14,52,113,80,162,57,60,133,195,210,89,94,228,179,95,184,151,102,57,224,150,203,118,49,185,110,140,242,196,8,153,
+  23,164,237,54,115,237,22,203,115,115,148,42,13,106,35,35,148,107,197,247,206,93,97,248,111,129,110,183,69,20,135,220,
+  124,219,141,188,250,53,175,230,71,254,193,63,224,222,123,31,230,163,127,252,97,238,249,218,221,164,105,70,20,70,196,113,
+  68,158,164,244,147,4,231,61,222,21,18,142,86,123,137,125,251,246,177,109,155,97,100,100,140,126,191,199,240,112,131,183,
+  189,237,205,224,29,89,106,208,181,144,79,125,224,119,184,250,240,129,99,117,184,191,7,251,2,104,189,19,120,138,63,61,
+  243,125,33,225,192,3,35,192,7,148,226,159,43,77,224,95,30,98,124,245,163,111,185,230,149,140,65,200,220,144,172,27,
+  163,191,126,140,161,71,14,33,158,71,82,252,50,48,63,88,135,43,10,233,199,97,240,195,96,110,133,36,135,37,7,231,
+  114,56,83,130,214,250,229,142,220,255,213,123,26,231,70,199,106,27,47,221,69,232,11,207,228,187,238,126,128,99,39,207,
+  34,6,98,157,21,95,232,213,56,154,193,44,200,57,55,208,39,125,189,80,245,27,65,103,229,215,95,71,106,84,18,47,
+  7,105,139,198,162,17,84,163,50,177,10,9,133,70,152,66,218,81,12,155,1,45,81,113,128,197,146,216,34,157,162,86,
+  169,33,164,32,77,19,58,157,46,253,94,15,132,96,100,120,152,90,165,86,180,70,222,23,219,62,32,138,162,85,66,95,
+  1,176,158,104,144,131,22,69,17,66,72,180,214,40,169,176,206,98,156,71,5,17,149,114,141,250,208,48,253,133,101,204,
+  233,89,78,31,58,68,167,213,166,17,86,168,13,213,32,16,228,182,24,236,247,151,151,232,245,150,17,18,202,165,26,82,
+  72,36,32,10,50,19,198,89,146,44,33,42,133,236,218,189,157,55,191,249,245,220,116,211,171,24,30,110,210,233,180,201,
+  147,140,230,240,8,65,16,210,239,245,113,110,197,255,71,18,6,17,173,86,139,209,209,81,192,241,93,127,235,93,76,77,
+  142,131,135,40,8,120,250,208,97,238,253,167,255,108,249,245,237,206,87,114,248,84,31,158,222,9,201,8,48,14,140,81,
+  144,0,199,6,191,127,161,63,246,42,201,63,14,34,114,254,108,171,97,33,64,13,136,173,43,213,180,82,197,27,66,16,
+  40,182,93,178,149,219,110,187,141,64,235,130,157,63,208,38,66,225,101,37,131,129,182,223,63,63,43,39,21,86,95,249,
+  0,180,10,66,235,199,72,166,71,105,60,114,248,121,3,161,229,98,11,198,32,114,144,14,133,58,126,18,216,58,184,249,
+  142,64,22,193,2,48,99,161,179,49,55,254,236,87,31,168,60,99,178,198,37,55,92,33,165,15,185,235,174,123,57,120,
+  248,40,98,0,38,43,244,255,21,32,185,16,100,86,254,255,159,85,13,21,22,18,254,235,51,197,6,21,149,23,69,154,
+  59,222,35,7,10,203,220,22,41,167,94,60,247,103,133,150,232,80,23,214,164,120,132,119,104,41,16,174,48,0,203,141,
+  25,196,240,20,128,40,133,160,90,173,82,46,149,9,244,192,169,144,130,252,87,42,149,208,90,175,138,58,181,46,182,124,
+  5,248,20,198,97,122,224,229,236,188,65,234,34,128,81,8,129,14,66,74,66,161,150,58,12,151,42,204,157,56,203,201,
+  253,135,56,183,52,143,174,151,41,85,170,68,74,131,119,164,105,135,110,167,67,191,157,130,49,4,90,19,69,1,171,92,
+  5,37,16,194,96,93,15,176,172,93,183,134,155,111,186,145,27,111,184,145,237,219,183,211,239,247,72,146,62,214,153,130,
+  57,237,4,90,6,228,198,144,36,61,188,201,121,247,187,223,206,21,87,237,128,65,36,80,88,42,243,191,126,225,23,217,
+  114,231,93,7,198,225,179,33,220,181,31,230,126,0,120,255,224,227,127,0,7,129,47,3,159,166,160,95,4,64,243,5,
+  186,207,127,58,8,216,43,20,241,159,215,17,92,4,160,23,25,132,54,140,147,172,29,165,241,232,17,132,115,207,27,0,
+  137,11,0,168,69,225,57,189,117,101,27,1,124,28,92,0,157,42,204,120,33,102,167,156,203,179,135,159,172,63,124,250,
+  196,208,182,215,223,166,31,121,120,31,79,238,219,143,80,23,182,96,69,98,231,133,192,115,97,69,115,97,160,222,133,31,
+  127,250,166,27,124,222,249,34,73,85,8,132,82,88,1,70,128,21,2,43,5,97,28,17,14,0,76,10,129,242,130,72,
+  40,68,110,136,229,74,52,51,40,165,136,194,16,147,229,148,202,101,132,148,88,99,168,148,43,40,161,80,74,209,104,52,
+  40,149,74,88,107,169,84,42,88,235,6,179,30,189,26,127,180,34,176,181,222,129,42,72,131,82,250,2,248,84,64,16,
+  134,4,129,98,105,126,150,10,138,166,138,8,132,100,118,97,129,243,11,45,250,25,116,146,156,70,115,132,48,8,144,94,
+  144,246,251,180,91,139,116,218,45,156,51,68,81,68,168,117,193,107,18,30,188,45,76,225,140,193,88,203,80,179,206,174,
+  221,59,185,245,214,155,217,115,217,110,202,229,98,91,54,55,191,136,16,146,40,10,177,38,225,59,223,115,7,111,127,251,
+  27,73,122,11,72,47,168,87,235,220,255,216,227,124,246,103,255,117,255,246,36,185,207,194,231,42,176,223,9,145,255,170,
+  82,76,3,63,2,188,9,248,126,224,106,224,243,131,22,105,106,80,17,189,16,231,83,82,241,184,148,127,46,219,249,34,
+  0,189,84,64,104,221,74,37,228,94,112,0,154,7,126,163,248,188,123,15,116,219,48,155,75,185,52,226,125,172,159,61,
+  54,246,200,153,51,213,67,185,212,199,142,159,64,72,113,65,11,245,167,65,230,27,103,60,23,126,254,194,57,209,133,109,
+  218,133,25,90,43,119,97,33,128,245,104,161,80,40,66,161,80,20,159,119,214,19,40,141,68,146,231,150,204,88,156,144,
+  196,229,242,64,246,225,168,86,170,200,193,48,58,12,2,130,32,32,142,34,148,146,228,121,70,28,199,212,106,85,140,177,
+  3,208,41,230,88,90,7,5,165,96,48,181,16,74,34,6,67,115,41,5,10,77,32,66,156,144,24,239,144,145,66,85,
+  35,252,82,155,138,0,161,5,37,17,19,82,97,98,221,86,206,39,57,15,62,254,52,210,72,42,81,68,169,22,162,180,
+  36,79,83,146,126,143,246,242,18,38,205,9,132,64,171,16,169,10,223,231,98,192,47,138,65,184,203,144,26,214,111,90,
+  203,141,55,189,138,55,221,126,59,91,54,95,194,210,252,34,103,207,158,225,166,87,93,197,143,255,216,15,147,167,139,96,
+  115,148,144,232,176,196,175,252,187,255,192,165,15,63,122,116,29,124,33,128,175,61,4,179,191,43,21,135,227,146,248,77,
+  107,185,213,123,70,6,85,112,23,248,42,176,133,194,30,230,133,114,230,252,152,122,249,1,208,183,93,44,143,234,38,180,
+  174,216,196,241,31,125,11,27,222,255,25,68,254,55,19,168,82,46,64,200,127,12,90,239,113,238,201,28,106,107,2,61,
+  162,62,123,119,248,137,122,109,109,80,10,3,147,101,5,176,32,240,190,96,224,202,11,218,178,11,129,71,107,189,170,156,
+  255,198,1,245,159,2,222,213,135,188,16,105,226,11,177,176,116,30,133,67,88,135,87,106,85,68,236,115,87,128,3,160,
+  116,0,74,174,182,94,74,106,130,32,64,169,34,125,52,75,83,2,29,144,36,9,165,184,132,214,138,52,77,72,211,180,
+  16,122,42,133,247,130,44,203,73,146,132,32,8,208,90,19,134,65,241,239,92,105,135,69,49,73,243,78,16,149,34,172,
+  183,32,61,149,177,81,146,133,14,121,110,136,69,70,100,37,73,63,99,97,102,158,181,87,238,161,149,24,172,136,176,132,
+  60,246,212,126,70,134,26,172,95,55,141,240,130,180,103,88,236,205,210,154,59,79,169,54,68,125,116,146,74,165,178,250,
+  58,20,129,140,30,164,163,159,180,208,82,50,54,222,224,123,254,238,119,113,199,187,222,198,125,119,223,69,123,105,142,3,
+  71,15,49,82,47,209,172,55,136,202,53,62,240,193,63,66,253,209,71,58,55,192,137,4,142,155,162,186,85,223,139,183,
+  239,77,19,191,222,89,186,20,130,207,139,190,172,223,198,91,176,63,31,132,210,191,113,16,26,36,103,240,105,224,59,160,
+  229,225,145,60,55,245,105,76,253,54,19,15,237,151,97,83,73,133,244,133,133,201,96,169,245,117,21,205,115,225,133,110,
+  117,229,126,97,149,115,33,0,93,88,49,201,65,98,132,148,5,168,136,193,12,200,225,177,24,130,32,40,218,160,193,106,
+  57,8,66,178,52,69,7,10,99,114,170,229,18,206,121,50,103,9,162,66,185,111,141,161,221,110,19,40,141,22,10,188,
+  164,215,235,83,173,86,17,162,112,23,140,99,63,72,251,240,171,177,67,118,85,205,47,16,190,144,91,40,89,128,159,147,
+  30,161,5,46,207,145,74,16,160,9,157,194,78,79,211,59,115,142,97,33,73,69,70,213,90,206,45,156,166,218,94,203,
+  214,233,181,180,150,231,217,126,229,53,148,71,154,236,123,252,81,206,157,122,130,169,241,49,214,173,157,70,135,138,126,218,
+  162,179,60,71,119,160,120,175,53,139,205,89,16,197,3,6,127,49,124,87,74,226,69,78,158,47,16,215,20,175,127,251,
+  107,49,73,194,241,99,199,120,230,137,39,57,113,98,158,196,30,227,127,252,231,255,225,254,89,97,183,90,115,176,205,192,
+  242,102,56,42,156,59,231,112,173,164,176,46,243,23,193,231,226,22,236,47,104,199,44,201,250,81,146,117,99,212,31,61,
+  140,176,127,245,178,242,155,105,193,78,3,95,24,108,41,174,0,62,3,236,46,90,179,100,20,18,15,147,75,129,222,113,
+  79,16,14,173,26,143,249,175,39,25,94,88,201,60,231,25,237,255,84,229,179,82,233,92,88,45,93,248,241,245,105,171,
+  98,0,72,2,37,139,217,77,173,86,43,42,22,87,228,198,107,173,6,118,20,121,81,53,88,91,248,47,11,177,202,221,
+  41,149,98,164,144,4,65,72,24,22,237,88,173,86,195,24,67,191,223,71,41,73,28,199,197,182,107,144,193,181,178,5,
+  91,189,14,85,72,116,133,148,148,162,98,132,170,131,194,196,204,216,156,64,23,100,199,186,214,4,145,38,208,10,149,24,
+  178,32,96,100,122,154,110,167,79,88,210,236,220,185,133,53,227,147,52,26,67,156,157,61,207,189,123,31,194,8,207,244,
+  154,117,133,87,146,77,201,210,132,94,183,69,175,189,140,201,82,162,149,175,39,20,82,42,112,133,246,12,1,206,228,120,
+  111,24,30,29,102,219,246,173,12,53,71,152,157,95,196,40,201,99,179,11,242,72,107,185,46,97,93,19,182,70,176,206,
+  64,195,129,232,64,222,1,227,193,141,83,240,197,190,10,108,186,216,130,253,233,25,208,255,243,230,171,191,109,209,87,100,
+  134,254,186,49,146,181,99,127,173,153,208,55,3,64,25,133,53,236,235,128,155,128,215,0,87,2,107,192,47,10,161,148,
+  16,235,231,2,125,197,93,81,52,94,216,119,20,55,134,251,51,222,63,47,36,27,94,72,58,252,198,13,217,10,224,92,
+  184,166,247,43,119,224,5,159,135,98,168,28,4,1,81,84,36,83,224,158,179,170,202,243,252,185,121,141,16,168,129,110,
+  80,14,4,158,90,43,226,48,162,92,42,35,101,1,52,65,16,124,29,96,73,41,87,179,207,86,190,215,55,94,183,146,
+  18,169,116,145,243,165,53,90,43,172,115,120,201,192,210,86,66,160,49,173,14,195,97,136,245,25,97,102,72,90,61,212,
+  88,19,89,169,113,254,236,121,54,78,79,81,27,169,177,216,91,230,247,127,255,35,254,254,223,254,80,254,216,159,124,213,
+  30,234,180,148,42,69,76,140,142,82,46,151,17,206,224,242,140,164,215,97,105,126,142,164,215,65,74,77,24,132,133,79,
+  211,224,7,106,125,1,150,198,26,28,158,106,181,198,246,93,59,120,211,91,222,44,118,191,229,109,106,118,235,246,210,231,
+  218,253,241,175,204,205,111,236,153,108,211,56,108,170,193,100,0,85,1,162,11,121,0,249,44,248,71,128,141,23,1,232,
+  79,207,128,38,38,38,94,54,120,241,66,181,212,246,205,55,96,190,244,56,225,190,111,45,174,112,197,34,227,194,27,96,
+  35,240,11,23,252,126,199,5,189,239,97,48,161,247,125,19,5,206,13,98,120,86,103,60,74,14,18,82,159,3,20,117,
+  1,251,249,194,10,231,66,160,249,70,55,197,231,42,158,194,33,80,12,188,94,87,190,222,74,85,149,37,105,225,43,228,
+  45,185,181,196,113,188,250,178,135,97,76,150,37,148,203,17,74,23,132,201,96,112,45,74,235,1,232,20,21,79,24,134,
+  69,64,160,16,171,243,22,231,28,229,114,153,52,43,28,33,117,16,20,195,231,193,133,25,87,248,236,228,185,193,5,97,
+  209,18,250,34,31,76,42,141,115,144,5,33,182,20,147,246,51,116,172,17,145,167,153,88,22,14,31,165,126,233,165,204,
+  182,150,56,126,242,4,179,251,186,252,187,159,248,41,191,227,145,39,91,63,14,103,37,36,119,254,250,31,76,252,247,15,
+  126,124,116,244,134,43,131,55,220,254,70,110,188,114,55,99,205,42,206,27,146,52,37,109,119,56,215,61,74,80,174,48,
+  52,220,164,54,84,71,69,49,129,150,216,188,216,70,122,33,48,214,147,166,61,132,16,92,178,101,138,75,127,252,135,249,
+  161,31,252,62,238,189,255,193,240,19,31,250,232,244,175,126,225,243,19,151,156,56,185,237,38,184,98,2,30,15,96,239,
+  89,120,188,15,199,190,23,218,7,94,58,62,96,47,157,25,80,24,134,47,151,107,245,47,220,23,86,200,231,1,212,11,
+  65,5,252,44,240,79,225,207,21,2,230,20,65,137,63,225,189,247,96,149,49,70,72,141,25,0,14,23,144,249,86,77,
+  199,248,122,210,225,74,43,243,141,159,91,153,15,93,56,59,90,169,128,132,120,78,200,170,68,49,68,214,74,81,173,86,
+  87,205,182,210,52,93,5,193,32,8,232,118,187,24,107,193,187,98,230,19,132,8,160,239,60,195,205,38,149,74,5,147,
+  23,128,83,46,151,87,1,111,229,250,87,6,214,174,184,217,176,198,224,188,71,5,1,38,207,65,136,2,180,156,37,140,
+  66,156,47,172,107,81,2,57,40,216,28,133,206,45,43,149,105,27,199,132,14,232,121,143,207,13,165,249,54,173,83,167,
+  104,14,53,249,157,223,251,48,159,253,253,15,154,239,59,63,159,222,10,173,20,142,59,152,191,3,230,111,233,244,183,61,
+  244,39,247,142,125,248,43,247,133,31,216,185,69,190,229,29,111,17,55,191,234,106,54,76,142,162,149,34,115,57,73,210,
+  102,230,84,155,133,185,136,122,115,152,90,189,73,20,215,48,190,104,73,133,0,169,139,64,73,99,251,216,110,66,41,82,
+  220,254,198,27,120,211,235,110,224,208,177,127,170,63,242,161,15,79,126,241,211,159,27,93,247,216,227,151,236,236,116,174,
+  24,134,7,26,112,87,0,143,77,194,185,114,81,20,95,60,43,0,228,47,142,202,120,62,94,131,112,48,239,249,183,20,
+  100,196,191,236,43,182,1,3,46,4,87,206,140,209,202,96,84,177,14,183,182,80,186,75,33,7,91,46,40,244,97,254,
+  235,170,158,11,183,98,43,45,149,187,192,162,99,5,152,164,148,24,91,228,207,23,218,44,177,10,94,206,58,242,126,74,
+  189,81,35,12,3,74,165,136,110,183,95,8,73,139,80,44,82,147,19,170,194,5,208,218,132,114,169,76,181,90,98,104,
+  104,168,104,159,2,137,28,204,145,86,218,172,149,108,245,149,225,55,23,108,239,140,41,18,73,181,214,104,253,28,123,90,
+  74,137,70,144,217,156,168,28,23,222,217,214,96,28,72,47,17,97,192,49,151,33,90,30,180,39,183,57,97,187,205,204,
+  99,143,179,254,85,215,81,171,14,83,93,88,238,93,9,157,54,4,22,38,34,8,45,148,70,192,191,13,220,205,198,243,
+  208,147,135,236,211,79,254,119,243,133,177,33,185,254,230,107,130,247,220,113,135,216,190,117,35,181,122,165,152,115,101,57,
+  115,167,79,51,119,118,134,90,189,201,208,96,104,141,42,108,79,156,181,104,41,7,105,181,134,44,105,225,17,108,89,63,
+  198,79,255,212,63,98,246,135,254,142,190,251,203,119,79,28,250,131,15,15,143,125,234,51,211,235,178,108,189,133,225,58,
+  124,41,40,110,147,231,221,189,230,132,16,124,94,74,162,151,217,222,77,95,196,224,111,97,144,61,120,1,203,192,239,3,
+  191,53,152,3,125,83,253,239,115,173,154,143,140,177,161,247,244,40,188,52,86,30,216,149,42,167,152,191,200,231,82,64,
+  47,168,124,86,54,75,23,174,227,197,64,114,113,97,251,182,98,249,90,128,128,194,89,183,250,224,59,239,72,211,148,94,
+  175,75,20,133,84,42,101,22,22,22,11,16,9,20,105,154,21,32,87,76,131,190,174,178,202,141,65,34,209,58,88,157,
+  37,73,41,139,54,234,2,64,52,198,224,6,243,158,149,107,14,130,160,152,177,24,51,240,20,95,177,25,113,88,99,81,
+  97,1,186,89,106,8,101,64,28,71,44,215,107,252,201,221,247,177,165,92,162,84,10,176,222,226,45,124,229,143,62,68,
+  180,102,154,242,230,237,165,223,58,125,202,212,148,10,250,121,190,45,200,51,43,173,113,147,222,186,141,144,55,65,93,5,
+  193,109,16,204,205,46,229,159,248,227,47,166,31,104,103,225,219,238,120,135,172,5,158,141,155,214,51,50,82,39,10,53,
+  185,201,232,46,157,167,187,52,71,189,57,76,99,100,132,82,185,134,212,26,235,5,43,221,110,241,227,114,88,215,199,164,
+  142,70,89,241,246,59,222,72,239,246,55,4,15,126,226,115,155,190,248,190,127,216,120,125,167,157,133,112,252,17,152,75,
+  161,255,124,62,120,49,240,39,66,114,94,8,94,110,217,244,223,246,0,228,129,72,73,30,84,146,57,254,108,13,205,159,
+  247,194,157,165,208,127,245,129,95,229,175,94,91,251,98,162,139,242,222,175,12,7,157,181,88,191,162,118,151,120,111,113,
+  206,15,120,65,254,207,229,4,5,90,99,173,35,179,41,184,175,31,151,121,231,86,245,86,197,223,187,160,234,27,128,88,
+  154,166,56,103,201,178,12,41,19,194,48,36,205,50,148,86,148,227,24,188,39,233,39,69,72,98,150,17,13,196,168,54,
+  55,12,53,134,6,3,242,66,130,177,242,245,86,42,177,114,185,24,82,155,60,95,53,81,211,90,127,93,219,168,180,198,
+  91,135,113,133,234,62,237,39,3,43,211,2,124,115,147,161,140,32,170,84,89,123,227,53,36,79,31,163,18,104,84,4,
+  65,47,97,107,86,38,157,235,114,199,149,215,4,217,149,215,12,103,70,144,228,150,110,150,144,184,54,39,90,139,254,104,
+  55,53,203,115,11,44,206,207,243,182,172,231,95,131,15,255,46,248,47,124,229,158,124,230,242,43,213,134,91,111,208,15,
+  238,125,148,102,179,196,174,93,219,25,31,29,198,228,133,60,163,179,180,64,187,181,72,165,58,68,115,100,156,32,174,160,
+  244,115,206,141,120,7,162,208,240,121,44,214,244,137,133,226,213,239,125,23,31,255,216,167,135,143,127,248,143,182,109,133,
+  53,195,16,206,64,127,246,175,112,175,253,101,167,2,220,163,95,158,143,242,183,61,0,5,74,210,109,117,249,254,133,54,
+  135,94,12,0,116,30,161,240,74,73,164,215,224,4,94,184,1,232,20,182,173,5,109,71,252,185,43,120,231,139,249,141,
+  240,224,132,28,232,187,184,224,255,23,155,45,53,144,118,172,240,129,164,44,196,160,94,21,153,92,248,162,85,11,130,162,
+  98,169,148,203,24,99,200,179,140,74,165,138,119,158,60,45,6,201,231,207,159,103,124,108,12,45,53,253,126,151,56,46,
+  97,109,78,191,223,93,173,12,86,218,176,110,183,139,28,180,103,43,109,151,25,16,27,87,255,77,206,225,114,143,213,26,
+  179,50,243,202,29,65,24,144,123,67,63,237,145,230,93,84,185,66,88,110,224,119,239,96,254,236,25,154,89,74,179,84,
+  163,30,164,88,44,198,88,60,1,78,121,188,4,89,142,208,97,9,53,57,41,188,44,5,29,239,57,221,235,241,216,147,
+  143,219,108,255,227,217,171,33,120,131,181,250,171,191,244,203,233,145,74,32,174,127,235,237,234,231,255,213,191,226,212,47,
+  189,159,55,191,243,173,220,254,166,55,178,97,106,2,157,165,100,54,161,215,94,162,215,94,34,46,149,169,52,134,9,226,
+  50,97,169,134,14,138,71,201,228,30,47,5,194,91,156,203,41,137,136,225,45,27,57,5,149,237,69,66,143,254,183,192,
+  195,207,235,122,70,18,73,73,153,151,31,241,241,219,26,128,60,80,137,67,126,243,179,15,114,232,204,220,139,118,25,66,
+  12,36,9,185,27,108,127,28,97,20,15,34,101,190,222,110,227,27,231,86,43,15,112,150,21,38,235,74,107,124,158,35,
+  7,131,95,9,127,106,118,100,76,65,62,92,221,168,249,98,104,92,138,99,164,145,171,179,155,44,203,138,234,42,12,177,
+  206,210,104,52,232,180,59,197,32,217,57,90,157,54,227,163,99,116,58,93,178,44,167,86,171,161,117,80,248,74,43,69,
+  167,211,193,90,75,189,94,39,138,99,202,23,108,197,46,188,30,127,129,207,245,133,28,40,147,231,228,89,182,218,190,9,
+  20,50,181,132,161,194,106,73,180,118,18,211,110,49,179,208,98,56,44,19,90,139,201,186,8,219,67,9,6,255,254,16,
+  155,129,145,2,71,70,37,210,92,90,41,177,254,218,107,212,93,101,229,245,99,143,154,219,156,87,183,122,252,190,255,244,
+  43,221,127,241,91,31,168,150,206,204,38,63,236,236,210,131,255,249,183,74,255,243,247,63,86,222,244,246,215,68,183,188,
+  245,118,118,109,216,136,179,69,234,109,175,219,163,211,238,34,164,162,92,169,50,52,60,76,92,107,12,6,238,131,159,13,
+  197,155,67,150,246,40,13,8,16,226,121,54,42,147,80,252,220,121,121,178,174,181,248,38,6,176,94,136,87,36,0,5,
+  74,114,126,169,195,175,124,252,158,23,251,82,68,97,77,33,73,243,108,176,249,178,95,183,126,191,208,120,236,194,141,88,
+  33,43,176,72,245,156,220,66,172,204,89,46,96,76,127,35,41,49,207,243,213,25,204,202,124,103,69,201,94,171,213,240,
+  222,211,233,116,200,178,98,254,179,242,255,148,86,197,60,202,88,250,189,62,105,154,49,52,52,132,177,197,26,62,8,10,
+  131,177,44,203,8,195,112,181,101,76,211,20,165,53,81,20,173,126,223,149,107,88,81,213,139,32,40,18,63,6,169,31,
+  22,86,171,55,49,232,29,51,151,97,41,252,137,164,128,160,62,132,13,74,156,57,55,79,61,205,9,130,136,72,43,148,
+  183,8,111,139,167,61,136,8,61,4,222,146,134,142,52,55,52,156,224,77,55,222,166,127,119,126,81,76,30,63,154,238,
+  128,238,206,126,178,212,56,117,46,105,192,137,38,254,216,110,208,189,211,11,235,246,255,234,71,182,253,218,135,62,191,97,
+  252,246,215,69,111,127,215,59,216,181,121,35,18,75,154,116,192,102,244,151,231,232,46,207,19,86,134,168,214,170,84,135,
+  234,232,48,196,91,71,47,203,232,236,223,239,47,131,118,6,61,1,246,223,82,240,197,190,85,187,212,50,112,191,84,252,
+  162,210,168,151,169,232,67,39,165,242,95,8,60,65,158,17,89,59,88,133,190,114,54,102,43,213,207,175,127,250,254,23,
+  179,250,1,16,218,58,167,115,235,173,64,104,165,48,3,34,226,133,91,172,11,43,134,149,7,248,194,85,188,86,186,0,
+  145,85,169,131,127,14,136,6,9,15,43,132,192,21,146,224,202,223,245,222,19,68,17,146,194,42,35,77,83,196,96,61,
+  190,2,122,121,158,175,242,123,242,44,39,142,34,154,205,38,105,150,50,51,151,16,40,141,51,150,48,140,104,54,203,116,
+  187,93,172,181,12,13,13,81,169,20,6,102,43,213,207,115,4,199,231,24,217,43,215,185,250,206,254,13,215,30,234,0,
+  165,4,137,183,164,38,69,101,80,139,74,32,53,190,18,163,55,213,233,44,204,211,95,92,32,76,44,85,52,35,213,58,
+  145,214,160,52,62,235,19,121,131,18,30,167,138,8,160,82,14,187,119,95,169,62,114,234,36,255,208,26,91,129,100,10,
+  191,15,184,179,15,143,74,200,53,172,191,26,174,222,62,223,185,254,238,15,124,124,215,255,252,228,159,76,172,123,211,107,
+  195,219,239,120,27,187,119,108,36,150,96,178,132,220,102,244,91,243,116,150,102,40,45,86,89,187,126,19,165,210,16,79,
+  28,61,65,250,208,195,189,13,112,58,133,153,12,50,1,12,125,139,55,141,2,122,192,31,234,96,53,212,242,101,9,64,
+  139,163,227,127,209,251,50,42,203,16,199,15,83,81,154,106,20,21,171,217,139,213,207,243,141,65,133,127,179,181,200,149,
+  182,228,2,87,196,213,85,246,224,172,0,193,202,92,200,88,75,150,103,148,227,210,234,223,231,207,40,201,173,181,95,71,
+  62,52,198,20,45,214,160,10,209,58,160,215,235,173,206,110,194,48,252,58,80,200,178,172,112,47,140,99,194,32,192,56,
+  135,25,84,72,65,89,19,14,192,107,121,185,181,186,142,95,1,62,231,28,225,192,7,104,5,120,130,32,40,4,173,131,
+  86,111,229,123,58,107,49,214,226,173,45,102,71,82,22,57,97,74,17,138,194,167,40,136,53,214,184,194,168,222,56,4,
+  158,225,13,27,17,155,54,211,106,183,56,115,226,56,159,190,243,43,92,177,121,11,187,166,167,25,174,213,200,136,145,73,
+  6,202,145,75,143,119,41,87,111,216,204,3,155,182,198,31,59,122,176,247,110,107,235,17,76,8,40,171,66,175,119,92,
+  192,225,12,14,68,240,212,91,224,154,155,91,189,171,30,253,208,167,182,253,241,231,191,60,246,241,27,175,41,95,255,166,
+  215,113,205,158,61,140,52,106,64,27,233,37,189,78,135,94,187,71,80,26,229,253,255,241,151,217,50,191,56,171,225,89,
+  3,167,114,72,119,125,139,237,146,167,144,246,252,11,29,240,172,148,148,95,206,0,244,23,201,15,132,16,24,33,216,55,
+  119,158,208,123,174,153,156,166,30,69,171,67,194,151,123,245,243,27,159,121,128,163,231,22,94,244,203,177,66,8,39,165,
+  80,30,172,53,8,41,86,3,9,87,230,49,43,60,153,11,213,241,43,109,145,16,130,64,7,132,65,56,112,31,20,44,
+  181,90,36,105,178,250,103,87,248,54,223,56,83,242,222,147,36,9,161,14,8,148,94,101,91,175,104,192,210,52,45,228,
+  11,131,207,25,99,80,90,17,199,49,73,146,32,7,127,206,24,75,187,221,38,73,82,148,210,12,15,15,147,166,41,73,
+  146,16,69,17,149,106,117,149,39,116,225,28,107,101,48,141,128,204,24,88,201,70,27,208,10,156,115,88,99,176,74,34,
+  188,165,174,52,10,137,183,158,92,128,177,25,101,25,18,7,1,253,110,11,39,5,165,106,137,203,110,188,142,153,229,121,
+  62,253,135,31,92,122,168,86,209,217,186,245,213,87,109,187,148,219,54,108,2,219,199,5,142,52,119,228,121,198,27,111,
+  121,141,252,108,84,105,250,220,149,166,142,62,91,190,62,239,165,85,88,246,208,139,225,204,60,28,140,97,198,195,254,18,
+  60,122,11,92,117,77,171,183,231,233,207,221,181,229,107,95,184,107,242,163,219,54,85,119,220,114,179,184,241,198,43,217,
+  186,101,35,81,37,226,248,92,139,255,253,239,126,146,214,7,254,168,117,19,60,154,194,163,17,204,236,1,103,249,214,34,
+  186,106,192,71,164,226,215,180,38,126,153,235,237,245,55,243,184,134,74,145,36,9,123,103,206,112,205,196,154,151,61,8,
+  5,74,50,187,220,125,137,84,63,224,149,20,102,144,199,190,210,130,173,156,231,136,133,114,53,177,211,185,231,126,191,2,
+  64,165,82,9,29,232,213,53,249,138,126,235,194,170,105,5,92,190,145,45,29,199,49,12,86,231,113,28,99,140,89,229,
+  243,36,73,66,150,101,171,85,138,16,130,126,82,172,227,123,221,238,115,178,139,82,137,82,41,166,217,28,161,84,42,175,
+  126,191,21,64,188,112,139,247,156,164,196,13,218,61,57,248,40,180,95,43,219,58,187,210,98,42,133,196,33,241,244,77,
+  94,132,57,170,112,224,68,233,201,92,74,181,86,98,106,106,130,109,27,54,50,57,62,78,185,28,115,229,213,187,249,103,
+  143,61,232,174,127,246,96,251,232,179,79,199,159,61,114,84,61,178,126,147,104,148,34,122,121,215,39,121,207,118,50,39,
+  95,117,253,205,242,159,252,227,31,86,111,254,142,247,86,62,252,145,79,85,62,243,207,126,252,198,239,94,94,232,89,200,
+  186,112,207,56,156,186,15,22,215,64,123,4,78,59,120,42,128,173,87,193,206,43,28,123,142,62,123,116,231,221,207,30,
+  93,251,137,15,124,184,220,216,48,173,171,99,195,114,225,216,73,179,246,228,217,243,223,9,15,123,248,140,135,71,66,104,
+  111,124,158,238,153,223,209,26,67,65,128,125,133,3,80,49,190,87,82,146,90,251,178,7,161,11,171,159,35,103,231,95,
+  2,205,23,3,134,113,225,137,140,179,5,33,111,181,109,242,3,23,65,143,16,138,21,73,156,181,102,181,34,82,74,21,
+  51,163,129,190,42,140,34,98,91,72,30,86,102,40,23,146,26,87,102,44,23,182,117,74,107,162,32,92,213,128,93,56,
+  35,42,170,167,149,245,127,33,82,93,94,90,34,10,67,70,199,70,49,166,216,144,85,202,85,226,56,94,117,67,92,249,
+  58,0,206,219,85,194,30,40,172,117,200,65,108,178,247,14,99,115,132,20,88,87,84,117,129,14,144,206,15,0,78,17,
+  73,79,20,72,140,82,244,83,67,158,230,140,12,85,152,94,51,194,182,29,219,216,180,125,51,81,169,136,146,206,109,74,
+  47,111,177,110,253,8,59,223,125,199,240,167,254,227,47,219,255,98,77,247,157,182,191,116,239,129,167,105,67,84,3,166,
+  192,30,17,68,95,242,95,27,254,251,255,224,45,162,119,226,253,220,241,234,75,248,204,85,219,26,31,253,202,3,55,222,
+  1,202,67,156,194,23,119,192,201,113,48,1,44,204,193,114,2,199,203,240,88,14,15,108,133,93,219,96,107,222,239,79,
+  183,247,31,26,207,246,67,13,206,85,224,217,12,30,1,30,11,225,204,231,192,206,62,15,131,231,95,15,66,190,58,88,
+  187,243,237,0,64,171,55,169,16,47,123,16,10,148,228,196,220,50,255,253,37,80,253,200,1,32,42,231,188,114,6,227,
+  37,88,139,210,133,77,134,117,190,16,66,122,0,183,106,82,182,82,65,88,187,226,52,168,233,39,253,213,200,158,114,92,
+  194,187,162,154,114,23,180,50,23,174,189,47,156,237,24,99,40,85,170,3,50,227,0,12,7,171,246,48,8,80,170,144,
+  216,22,12,103,69,146,244,241,222,19,199,49,253,164,143,247,20,145,205,81,12,136,85,250,192,74,139,24,4,33,73,210,
+  71,135,146,56,138,113,206,99,140,69,41,143,84,69,88,99,160,53,121,102,200,93,159,40,10,16,88,130,32,6,95,24,
+  154,73,41,233,247,123,116,146,46,211,235,183,113,217,149,87,176,235,210,73,154,67,18,69,72,234,13,137,73,208,94,17,
+  34,137,116,128,142,52,239,125,199,155,184,235,127,255,150,56,63,187,112,126,18,238,122,7,156,0,170,22,106,30,26,151,
+  122,54,29,62,55,115,233,71,62,252,209,202,143,191,117,138,118,251,52,127,247,125,63,192,151,47,191,97,234,19,239,255,
+  213,87,191,57,75,76,6,231,170,5,240,180,119,3,71,192,222,83,84,51,157,75,96,38,135,103,162,194,113,117,172,2,
+  99,213,34,63,242,188,129,51,227,48,235,160,253,24,216,127,241,188,220,192,33,82,169,87,4,248,252,149,1,232,149,0,
+  66,97,24,240,236,161,67,4,103,231,185,134,23,135,59,145,3,235,10,0,114,30,242,178,148,121,5,225,164,144,82,201,
+  16,111,61,94,8,4,69,91,226,188,43,204,213,97,96,105,186,146,152,250,28,49,49,205,178,213,121,141,28,56,24,22,
+  182,30,174,72,85,85,10,86,140,205,190,193,95,122,165,82,113,74,81,138,99,122,189,222,160,106,241,180,187,221,162,170,
+  137,34,164,42,230,81,73,146,160,6,109,185,119,80,169,214,88,88,88,164,20,198,171,121,101,245,122,189,168,148,150,151,
+  7,2,219,18,56,137,53,14,200,9,2,133,195,98,93,78,16,104,164,15,80,65,76,183,215,34,233,165,148,203,133,65,
+  126,28,133,244,122,29,146,92,48,181,118,45,183,223,188,155,157,59,182,83,137,99,108,178,64,150,245,232,199,160,100,76,
+  77,14,227,115,199,252,249,57,14,30,61,194,211,207,236,231,238,251,31,33,201,145,22,102,45,220,99,225,222,160,160,8,
+  197,22,154,33,92,247,247,50,155,254,193,175,255,201,213,223,243,213,241,202,223,249,222,157,124,215,119,220,192,77,215,190,
+  153,127,121,238,224,240,129,63,248,244,158,61,112,99,15,22,53,28,59,12,73,21,242,157,144,204,21,233,39,253,95,131,
+  126,6,51,215,66,16,13,186,162,37,200,230,32,255,106,16,184,207,72,197,130,27,36,226,126,43,15,171,82,104,165,94,
+  81,46,139,127,45,34,226,133,32,116,245,196,20,141,40,126,89,128,144,7,114,60,151,126,97,47,159,132,23,53,182,214,
+  3,45,48,61,88,172,88,63,55,153,154,116,127,160,75,2,95,8,30,157,69,42,139,195,226,68,134,20,1,160,159,99,
+  15,15,88,109,43,131,97,6,9,170,105,154,210,237,245,208,97,161,100,247,30,114,155,23,22,172,43,149,208,160,197,91,
+  5,161,129,236,220,230,134,174,237,98,108,1,50,214,59,116,16,96,156,165,213,237,16,5,69,164,78,16,20,155,42,173,
+  52,81,41,38,208,97,177,129,27,172,247,251,253,62,81,20,97,173,45,140,225,195,16,103,60,46,7,235,13,65,168,209,
+  129,68,74,141,201,13,89,102,16,164,4,2,130,64,98,93,136,115,138,126,63,37,142,45,219,47,217,202,158,203,47,99,
+  106,253,24,97,212,71,164,51,244,211,24,194,18,65,60,74,144,37,156,57,113,130,47,127,249,94,190,116,247,221,28,217,
+  255,172,239,159,62,237,242,86,151,27,44,173,239,86,122,46,18,242,73,227,221,193,16,142,29,131,52,2,49,5,97,2,
+  179,35,96,126,36,237,155,255,249,196,241,171,14,189,118,199,80,126,250,113,76,247,126,242,236,188,127,6,134,119,194,107,
+  203,48,12,28,113,176,32,96,113,35,156,222,10,167,247,194,252,113,72,26,66,184,159,10,163,172,3,249,15,228,153,187,
+  196,57,150,148,226,95,198,101,132,41,94,255,146,82,223,242,61,243,74,147,142,255,181,153,208,43,32,244,200,204,89,174,
+  126,153,84,66,58,10,88,126,234,56,159,187,247,41,190,213,77,196,183,122,28,176,6,242,6,44,74,239,231,107,34,207,
+  188,84,37,107,93,193,109,241,224,68,113,203,121,10,79,26,37,2,172,179,171,36,197,149,70,206,11,6,214,167,197,170,
+  60,73,18,170,213,234,64,237,110,10,112,241,30,59,224,232,10,64,12,92,8,205,10,25,208,59,210,204,80,42,151,209,
+  50,192,38,253,213,25,146,14,3,74,149,50,194,250,194,170,85,7,104,21,210,168,55,128,149,149,126,78,150,166,212,234,
+  117,226,184,96,113,175,172,214,87,54,119,133,252,162,184,0,33,21,94,56,180,10,9,116,76,150,118,73,109,138,195,208,
+  79,18,70,170,99,92,190,231,50,118,239,222,196,80,67,131,207,112,189,51,228,46,162,92,170,162,136,56,125,126,129,7,
+  31,122,148,135,191,120,15,247,222,251,0,237,67,207,158,127,167,243,226,53,208,108,20,65,145,167,198,224,17,97,205,163,
+  25,60,49,139,56,50,142,207,239,4,223,0,95,133,228,237,112,184,13,159,15,32,248,187,80,251,245,223,249,218,149,191,
+  184,212,209,239,124,245,110,126,228,123,222,34,62,89,154,174,253,183,15,124,114,247,20,118,203,8,180,154,208,217,2,115,
+  163,5,24,61,213,133,189,111,131,103,119,121,191,52,158,103,238,7,117,192,175,232,128,255,145,165,133,252,5,79,252,10,
+  5,143,23,21,128,86,64,40,177,150,135,103,206,188,44,64,168,36,37,127,231,143,239,226,99,238,165,113,43,252,12,248,
+  119,64,138,16,169,243,194,247,123,125,74,104,130,48,32,80,197,107,233,188,67,136,98,51,229,165,89,29,32,251,129,183,
+  143,25,200,46,16,197,0,214,73,48,206,162,164,36,138,35,108,226,209,66,224,6,62,60,43,44,99,49,200,85,151,162,
+  152,217,36,64,32,21,153,49,36,105,178,170,176,95,33,51,166,73,2,214,83,138,34,156,43,170,176,44,179,152,60,33,
+  77,18,26,245,6,89,150,145,231,249,42,137,113,197,107,202,185,162,133,244,88,16,154,60,55,228,166,88,193,91,45,72,
+  83,75,210,79,200,146,62,195,163,13,110,126,245,213,92,118,217,38,234,117,112,121,139,180,231,169,149,27,120,17,178,208,
+  106,243,244,147,251,216,251,213,175,241,209,79,126,129,103,79,46,32,109,137,53,19,147,184,205,219,199,190,60,59,107,190,
+  103,121,222,173,135,52,135,253,105,225,130,123,95,13,102,103,241,253,35,96,195,193,48,247,35,192,195,144,254,12,28,233,
+  195,87,134,96,226,187,22,186,67,255,245,195,15,109,126,253,235,47,83,55,110,232,81,249,225,55,197,15,204,44,199,229,
+  205,67,53,35,237,216,253,135,78,241,224,153,37,187,246,224,169,43,47,207,179,107,55,194,14,15,95,217,15,15,237,113,
+  238,204,127,201,179,236,45,66,176,3,248,80,209,44,191,92,177,65,92,80,120,189,96,33,175,223,178,22,236,229,2,66,
+  229,40,224,158,167,142,241,241,123,247,189,116,230,81,131,159,172,245,222,13,85,70,184,227,134,91,56,127,234,56,39,79,
+  157,98,126,113,1,235,28,106,176,90,71,136,162,101,49,22,196,96,51,38,4,114,32,236,92,49,154,95,145,56,204,46,
+  204,23,85,135,181,69,5,165,20,62,207,87,239,38,99,12,65,24,174,126,222,172,16,26,173,193,243,28,119,72,43,133,
+  183,174,16,60,70,17,245,198,16,189,110,159,40,140,137,194,8,194,152,102,163,73,185,84,194,154,156,94,191,143,181,142,
+  40,140,144,82,17,4,186,176,243,144,128,40,130,13,165,16,100,89,138,201,45,222,27,22,151,22,169,148,170,220,122,203,
+  205,92,127,243,46,42,117,135,164,143,233,89,170,97,21,33,60,7,159,58,206,99,251,246,99,204,97,166,226,156,93,99,
+  53,254,160,157,210,177,33,168,156,222,153,131,84,202,195,34,155,88,23,252,198,248,26,110,60,188,47,122,151,115,53,9,
+  210,67,107,45,116,52,69,100,114,95,8,62,161,20,39,164,226,113,224,90,147,39,55,57,119,208,192,87,182,192,212,107,
+  114,51,242,192,190,83,195,19,165,53,212,70,207,242,254,127,249,86,198,194,243,184,126,159,115,157,173,60,125,90,168,143,
+  124,234,145,225,79,30,57,54,180,235,192,209,137,215,56,214,120,24,202,225,75,175,247,254,68,201,123,115,39,80,113,150,
+  205,121,202,17,196,75,118,93,190,220,237,253,69,29,223,243,14,56,207,59,0,125,35,8,93,245,18,157,9,73,41,249,
+  111,127,124,23,47,37,3,182,213,85,59,176,102,88,249,31,253,185,31,36,112,158,179,167,207,243,228,190,131,60,241,196,
+  1,158,126,250,8,231,206,44,176,208,89,160,155,247,11,195,116,64,106,81,196,15,11,129,148,226,185,8,6,241,220,102,
+  107,176,59,195,251,226,123,72,165,80,131,129,179,31,172,236,173,115,152,34,178,162,120,109,132,64,105,133,51,6,41,6,
+  18,16,231,7,9,164,125,250,253,136,56,46,209,168,15,13,64,199,144,39,41,222,121,162,168,112,163,9,131,136,36,201,
+  16,162,79,181,82,37,10,74,228,62,195,120,135,55,197,32,189,223,239,210,235,181,25,159,104,240,250,107,175,227,154,43,
+  119,210,108,150,112,174,143,235,41,194,64,98,179,148,71,246,222,207,222,251,30,65,36,125,214,142,198,92,186,103,148,201,
+  24,194,160,201,77,87,93,198,19,159,219,75,32,21,129,14,232,245,251,204,31,120,134,109,59,118,211,122,251,119,213,14,
+  127,250,195,155,182,155,124,171,131,198,211,48,127,100,0,250,29,33,120,36,8,87,95,176,223,6,46,201,210,214,4,60,
+  147,195,179,187,83,119,205,127,251,181,7,154,187,214,191,87,92,219,60,67,205,159,101,230,76,153,251,246,206,185,110,119,
+  33,247,113,69,93,187,103,90,230,175,218,36,79,158,216,61,245,135,191,253,169,215,124,167,65,73,104,117,161,245,155,48,
+  255,223,87,122,231,36,1,41,249,86,114,87,180,14,8,165,228,149,120,158,55,53,252,115,32,116,246,37,55,152,126,41,
+  86,63,223,136,69,165,190,53,89,43,161,90,215,172,95,223,228,146,109,183,241,29,239,126,35,189,94,198,249,243,203,28,
+  58,126,150,199,158,216,199,190,125,207,112,226,212,25,102,103,103,233,116,123,197,170,94,7,40,93,84,24,214,121,148,28,
+  172,218,189,31,100,204,131,23,133,95,141,148,10,132,68,249,130,173,236,173,99,121,121,169,168,182,6,51,155,162,109,242,
+  148,74,33,194,67,160,20,81,41,38,203,115,148,82,196,113,72,28,5,148,74,49,54,203,11,189,21,80,138,203,68,81,
+  145,128,154,229,25,198,228,116,187,109,194,40,164,52,112,56,236,251,156,118,171,205,182,205,235,216,181,115,61,59,118,108,
+  64,71,2,159,167,100,253,46,81,88,69,88,120,230,169,103,57,250,204,83,44,159,63,202,166,137,42,215,108,158,102,88,
+  65,31,129,109,39,16,119,184,114,235,56,13,105,232,231,21,146,204,80,170,8,94,123,251,237,124,255,223,254,219,56,169,
+  120,232,115,31,171,237,52,249,176,134,210,62,144,191,9,174,60,104,9,127,60,77,248,62,10,61,85,213,123,22,138,185,
+  156,14,32,90,130,224,53,55,111,23,87,239,18,132,153,225,177,19,146,255,245,191,62,213,25,222,123,236,204,22,108,39,
+  131,176,23,4,149,71,26,209,248,219,127,234,7,43,251,191,247,13,245,79,253,223,63,185,246,61,112,220,194,145,119,66,
+  235,198,129,230,11,88,245,64,250,235,156,8,120,214,26,126,90,134,175,152,213,251,11,2,64,207,13,166,205,75,111,48,
+  45,37,255,249,99,119,243,82,179,159,29,100,71,121,128,48,199,229,169,67,250,12,227,60,173,110,159,178,74,169,6,138,
+  242,150,113,182,93,178,134,119,188,241,122,122,153,103,113,185,199,204,217,57,158,126,230,48,143,61,185,159,253,135,79,114,
+  244,228,97,58,221,101,146,126,66,55,77,87,13,194,180,214,232,32,64,135,18,231,115,108,238,8,116,132,240,2,155,102,
+  140,142,12,163,177,180,59,61,140,19,152,44,47,120,63,130,130,91,100,45,181,106,21,237,61,141,161,38,121,47,1,231,
+  10,65,129,205,129,194,30,67,233,0,99,115,66,17,20,148,1,239,168,85,202,131,86,78,146,39,41,189,212,18,84,43,
+  252,173,191,251,119,120,253,171,175,98,241,244,179,180,151,207,97,115,11,178,132,14,170,156,61,113,130,3,143,239,133,229,
+  57,46,223,56,198,186,29,187,136,108,135,60,239,208,77,5,58,140,144,218,227,130,156,53,235,70,169,197,138,161,250,90,
+  110,188,241,90,94,247,218,107,185,100,219,86,166,166,198,217,251,212,126,78,8,74,14,154,6,234,59,65,253,123,112,43,
+  117,196,144,115,104,10,81,104,27,8,32,246,176,193,193,182,131,181,234,200,123,223,179,142,178,106,243,248,137,26,63,250,
+  51,127,96,222,61,51,127,250,45,112,46,131,57,9,202,230,249,154,225,185,220,63,254,201,47,175,249,225,159,121,79,252,
+  75,143,31,31,59,249,216,129,61,83,176,41,132,103,95,15,89,157,111,221,123,85,2,111,177,150,131,210,242,155,175,32,
+  254,207,11,2,64,5,8,73,18,107,94,50,51,33,161,36,203,173,46,127,231,240,105,254,22,47,238,234,253,27,183,96,
+  235,138,119,224,60,130,190,233,206,219,133,222,105,182,143,94,70,63,53,24,23,16,226,193,165,96,139,253,149,140,37,37,
+  37,40,85,42,76,79,87,185,241,150,93,228,230,29,116,251,134,153,185,101,102,231,218,204,205,206,179,180,208,97,110,118,
+  145,67,135,15,242,196,83,143,49,59,127,142,94,43,39,75,66,156,205,232,185,148,74,53,30,196,225,8,100,32,105,12,
+  213,201,50,7,222,19,69,33,81,20,22,121,240,214,210,235,39,40,175,177,61,195,216,240,36,54,207,81,104,132,83,164,
+  73,74,46,28,97,12,113,37,68,40,64,73,74,213,42,30,65,110,44,66,132,76,172,27,231,85,183,188,138,43,174,190,
+  154,230,112,19,103,251,184,74,147,172,211,33,10,97,105,126,150,39,31,250,2,233,204,73,182,143,196,108,219,53,68,228,
+  123,100,221,54,125,93,69,69,138,168,98,177,193,16,157,4,206,156,237,112,190,167,248,161,31,122,31,59,118,92,205,244,
+  250,41,234,83,67,52,27,53,234,181,26,181,99,39,232,70,81,216,79,250,227,33,140,70,16,156,129,188,53,232,82,175,
+  133,85,251,210,62,176,4,141,26,108,159,129,45,126,199,198,242,214,181,195,56,99,249,195,63,121,138,205,51,243,11,111,
+  132,51,125,184,211,193,163,190,16,171,190,102,23,92,245,216,177,153,106,88,169,197,239,248,225,55,203,131,63,122,112,98,
+  26,63,145,64,105,14,90,125,158,31,243,231,18,240,3,38,231,247,47,240,120,186,8,64,47,19,16,82,129,102,249,83,
+  247,33,206,46,80,127,137,189,248,75,224,71,160,229,224,240,68,43,61,254,197,159,253,207,99,71,222,246,198,96,237,101,
+  151,49,189,101,51,107,38,155,84,130,10,206,148,16,190,87,188,243,187,0,239,37,194,123,92,158,161,165,160,57,164,24,
+  25,31,65,134,235,64,86,128,106,241,158,110,61,203,115,243,204,156,159,225,244,241,147,156,59,125,134,133,197,5,22,151,
+  22,57,112,240,8,7,15,30,165,223,205,9,196,40,82,25,202,129,193,26,75,185,84,42,152,206,229,10,90,199,248,33,
+  65,185,20,161,164,160,217,24,90,181,103,53,38,47,12,208,188,199,102,20,13,12,26,29,133,12,141,55,25,30,31,102,
+  199,158,29,236,217,115,41,107,38,199,208,10,200,115,76,190,128,144,154,201,233,13,152,126,151,175,253,201,39,57,247,212,
+  35,108,31,42,179,253,146,181,52,117,15,210,22,97,92,33,168,213,105,59,152,79,60,179,11,17,199,206,205,179,212,17,
+  120,93,195,196,13,202,205,38,135,15,31,98,219,246,181,172,221,48,129,73,83,114,147,80,174,196,196,113,232,252,50,101,
+  89,176,158,245,135,128,227,131,155,94,81,100,116,101,69,155,35,43,208,20,176,105,6,198,235,155,135,85,197,58,206,46,
+  88,14,239,61,216,251,91,112,198,195,147,192,231,66,120,58,131,97,15,211,18,182,145,137,94,167,103,217,181,125,130,211,
+  235,215,214,237,137,147,227,10,170,15,193,121,247,60,154,143,85,188,231,173,214,240,81,165,137,46,2,208,95,13,132,174,
+  154,88,67,227,69,2,161,220,57,54,125,249,209,213,160,192,151,218,121,12,150,22,224,225,245,48,58,250,196,209,185,51,
+  79,252,218,244,113,21,12,221,63,61,217,172,110,24,11,118,95,125,169,26,90,187,46,104,108,89,175,171,155,214,211,156,
+  154,162,28,7,196,74,128,177,24,11,121,90,184,41,138,164,131,84,41,82,46,35,84,33,157,104,140,72,26,195,35,92,
+  178,163,9,110,119,161,53,203,45,75,203,93,14,30,60,202,145,67,39,201,82,79,146,246,73,211,62,46,55,132,81,136,
+  7,180,46,17,148,234,228,22,112,14,147,246,65,72,194,40,64,202,98,125,223,235,117,25,30,25,97,253,166,205,148,235,
+  85,42,165,50,35,163,195,140,142,14,17,70,65,65,114,204,19,114,103,201,16,132,74,162,163,18,249,82,139,71,239,187,
+  135,199,239,254,28,81,119,150,119,92,191,141,122,4,157,158,229,124,94,165,151,151,56,191,208,99,190,183,68,39,243,88,
+  57,198,82,94,195,232,26,178,38,112,222,210,179,125,230,22,12,19,149,17,102,230,219,172,179,125,16,69,182,89,179,217,
+  192,53,234,42,155,57,95,45,193,120,31,42,191,3,173,234,224,117,207,40,76,193,84,241,95,113,2,2,15,37,1,106,
+  98,44,64,100,158,115,231,19,162,153,197,246,58,88,202,225,176,131,19,37,232,100,80,22,144,59,240,125,107,92,102,202,
+  212,42,150,160,86,14,129,161,8,74,29,16,191,8,254,249,2,11,1,100,121,14,66,62,151,219,125,17,128,190,89,16,
+  58,205,213,19,211,47,26,8,189,148,207,233,98,88,121,80,67,191,12,79,108,133,41,97,243,9,119,226,228,100,126,226,
+  100,57,189,251,145,242,18,140,207,73,57,121,118,98,108,124,97,199,182,70,237,242,75,163,137,93,219,88,187,101,3,155,
+  54,173,103,120,184,73,41,174,33,133,192,186,20,99,83,242,172,143,115,16,170,24,41,52,74,4,152,172,208,120,153,172,
+  131,119,41,91,54,142,178,109,227,40,89,154,145,228,9,72,135,207,13,43,89,238,65,92,103,106,211,118,116,92,1,163,
+  193,40,208,2,148,24,176,25,87,212,108,114,208,108,12,118,61,222,227,141,199,153,12,225,138,73,70,16,133,32,115,206,
+  30,62,204,157,95,252,10,15,63,242,4,103,142,159,98,251,250,73,154,18,126,251,147,79,208,233,91,90,189,46,34,170,
+  224,130,58,34,26,162,52,212,164,57,220,68,42,69,234,50,140,77,17,153,65,24,143,42,135,32,83,122,249,50,139,173,
+  5,188,243,120,103,9,116,68,164,20,163,55,222,24,62,113,224,200,228,171,113,219,37,76,157,128,217,93,131,139,156,3,
+  190,60,184,242,16,220,24,44,43,56,85,130,229,212,48,153,101,57,11,243,243,100,89,38,6,149,140,5,92,225,51,128,
+  22,16,166,160,109,185,92,174,212,170,120,221,193,24,231,11,168,198,103,3,144,123,62,89,64,10,216,232,28,39,165,124,
+  197,120,41,235,237,215,125,255,95,250,135,118,190,234,7,94,222,255,202,183,252,244,243,240,22,244,194,16,202,230,193,111,
+  129,238,52,28,122,22,78,54,10,141,82,213,65,173,4,97,0,113,21,38,112,110,211,248,217,153,141,253,179,51,107,231,
+  190,242,181,169,115,48,186,175,82,26,90,90,51,94,141,47,217,16,213,182,92,34,215,93,186,135,77,91,55,177,110,221,
+  52,227,99,163,212,235,53,4,10,172,7,161,81,218,16,153,20,163,20,221,238,50,253,36,37,75,250,56,151,99,173,195,
+  24,139,205,179,2,95,148,38,51,125,122,173,46,37,81,65,72,139,84,249,64,28,43,112,214,32,132,71,72,5,126,224,
+  130,236,44,48,176,214,208,234,185,192,196,52,229,169,135,30,228,83,159,248,20,159,252,212,167,121,246,192,81,134,134,39,
+  153,94,179,129,67,39,159,198,165,9,65,24,144,89,75,158,24,188,235,208,28,73,89,187,62,160,81,30,161,155,229,100,
+  157,22,82,116,113,222,19,251,18,37,221,192,102,14,173,61,129,43,234,17,225,11,78,212,137,163,135,57,125,242,60,187,
+  174,186,150,15,127,244,19,35,87,183,150,54,150,97,106,1,246,255,22,152,54,69,60,242,123,41,34,109,90,224,247,22,
+  18,139,103,134,224,248,249,179,201,150,174,117,186,82,18,68,165,216,38,105,55,174,192,90,9,19,14,18,9,163,10,198,
+  150,160,22,143,143,212,167,39,154,28,63,118,142,116,102,174,39,97,182,15,221,119,130,255,199,23,51,247,94,220,10,232,
+  226,249,230,78,13,168,131,61,6,189,59,160,167,96,113,22,196,99,32,42,69,193,29,55,160,238,97,36,132,241,13,48,
+  181,9,166,124,183,191,38,59,120,124,124,249,224,241,137,51,220,53,118,66,136,230,61,81,84,203,214,175,47,169,177,97,
+  61,178,101,61,83,91,215,203,203,118,109,102,108,98,140,198,240,48,205,161,97,170,113,137,122,189,74,181,86,34,203,250,
+  180,219,203,244,218,93,132,19,104,237,112,206,14,12,226,193,59,129,24,36,138,131,197,123,135,31,176,154,11,242,163,67,
+  72,141,64,22,149,17,142,180,215,102,97,118,142,179,167,207,114,255,67,123,185,239,206,59,217,251,240,227,28,63,187,132,
+  138,43,132,229,17,82,99,153,61,123,130,56,138,9,75,53,82,91,200,62,42,245,18,120,139,53,150,180,227,153,63,181,
+  136,14,219,68,97,76,88,170,224,194,12,143,32,245,41,65,20,144,91,139,164,132,233,105,78,159,56,195,236,185,25,146,
+  36,97,98,108,138,160,52,130,109,14,171,126,107,169,82,134,138,5,245,243,192,177,193,235,254,159,40,24,209,6,248,73,
+  232,141,194,177,97,56,80,189,247,153,43,230,111,223,58,62,62,218,160,182,102,72,204,47,117,101,29,46,205,225,53,2,
+  142,10,216,162,96,247,41,168,238,186,118,103,60,210,28,227,211,31,250,34,122,105,113,94,192,153,26,180,38,46,42,47,
+  46,2,208,203,237,136,193,59,178,2,95,3,255,191,128,219,193,46,64,126,51,116,54,193,57,7,7,90,16,59,168,9,
+  104,56,24,26,130,177,49,152,188,202,251,41,155,36,19,201,193,131,163,173,3,126,125,251,158,251,39,62,14,245,135,95,
+  123,121,227,150,171,183,115,250,204,25,162,184,74,84,170,17,150,107,140,78,174,97,124,106,13,229,74,153,56,14,8,180,
+  164,26,23,170,119,235,61,181,122,131,122,179,129,8,229,192,59,68,130,144,8,28,72,69,183,219,165,215,107,113,234,216,
+  9,150,206,157,243,51,39,79,249,7,159,120,74,238,59,112,136,217,147,231,124,127,118,209,170,86,175,119,14,66,83,10,
+  227,70,173,76,106,5,88,139,80,14,41,53,94,120,82,239,233,165,93,148,201,176,174,224,135,15,53,74,180,211,37,12,
+  61,70,154,67,152,220,226,130,0,85,46,225,28,228,72,172,51,120,145,177,220,159,229,236,188,102,236,116,149,161,230,48,
+  59,118,78,17,4,17,227,169,101,253,166,13,162,127,252,72,12,84,5,4,255,230,130,215,219,83,172,225,37,176,17,204,
+  83,136,153,53,248,253,147,179,11,39,239,253,227,189,35,111,251,161,215,168,87,191,243,186,177,47,30,254,68,242,174,212,
+  6,99,240,118,15,109,15,141,253,48,218,222,62,93,126,243,13,91,229,204,124,143,19,31,185,167,255,42,56,145,195,233,
+  16,250,209,197,219,249,34,0,189,220,193,104,69,54,145,20,31,190,10,118,67,145,170,144,92,1,203,17,156,217,14,114,
+  166,224,171,149,50,168,43,168,105,239,135,71,97,207,180,144,175,171,70,225,149,207,148,101,245,251,47,27,87,233,166,136,
+  158,177,44,165,158,185,36,229,236,217,3,28,58,184,143,249,133,54,70,123,124,32,144,66,210,79,18,148,86,108,222,188,
+  133,241,137,137,66,212,42,29,169,21,28,56,126,26,209,109,229,242,228,114,110,103,23,242,74,107,174,107,78,157,79,226,
+  229,180,31,56,223,159,0,53,14,98,24,178,33,208,147,80,250,96,40,235,255,7,166,3,11,161,42,106,169,32,44,177,
+  156,230,180,230,23,64,158,69,135,33,90,6,196,145,165,189,176,72,167,221,98,114,98,146,198,218,245,244,18,207,240,112,
+  132,245,9,190,163,72,178,140,52,77,16,10,194,40,70,14,53,88,78,187,60,240,208,19,32,61,111,122,243,107,216,188,
+  97,29,37,229,137,167,70,196,113,24,222,0,19,10,170,18,22,30,24,188,198,155,129,27,7,211,171,57,96,10,191,224,
+  225,137,9,120,228,177,47,62,59,253,145,117,83,147,111,189,121,157,154,123,223,237,27,126,227,55,190,84,190,177,151,196,
+  101,200,14,197,98,88,93,119,201,200,119,124,231,107,75,91,166,199,248,226,167,191,66,248,232,35,115,21,216,239,225,228,
+  83,144,253,48,133,19,217,197,115,17,128,94,17,71,14,192,72,20,115,35,18,240,21,176,91,192,238,131,252,36,116,46,
+  133,185,46,200,114,145,139,126,44,241,174,63,148,36,85,113,102,97,108,169,213,85,165,164,77,89,9,226,178,100,114,56,
+  226,202,75,154,56,225,49,182,137,203,99,146,158,167,211,109,23,246,24,66,160,116,134,74,79,23,158,212,222,209,11,135,
+  249,224,71,190,148,223,126,240,196,177,29,48,43,224,148,132,101,93,16,138,151,129,150,4,35,6,131,88,15,83,33,92,
+  95,113,178,57,57,62,65,218,238,98,114,83,240,139,140,65,74,129,86,10,139,193,25,139,5,226,74,141,13,187,47,229,
+  240,193,195,156,58,125,134,36,201,24,29,29,195,227,73,211,4,173,53,181,90,13,169,11,211,251,70,163,62,8,69,244,
+  116,243,28,235,50,142,30,57,193,214,13,235,9,117,200,229,55,220,200,129,63,250,88,93,88,51,166,160,218,1,121,15,
+  184,0,56,5,236,40,218,95,12,176,31,210,237,176,223,193,151,111,117,102,205,199,127,247,206,87,255,210,177,29,181,27,
+  110,189,90,92,250,125,183,140,223,249,208,147,195,59,154,147,249,141,215,174,141,174,223,51,42,17,130,15,127,250,65,158,
+  250,95,31,105,189,23,30,205,224,33,13,103,95,3,182,126,241,150,189,8,64,175,244,10,105,229,244,6,160,212,25,110,
+  250,131,205,134,93,58,63,107,175,109,119,79,84,181,126,56,52,230,138,238,153,214,149,109,162,168,28,22,218,45,105,5,
+  34,151,184,229,28,1,4,206,17,200,30,85,105,104,148,12,178,92,48,161,133,112,3,235,12,137,179,146,188,30,115,221,
+  134,166,217,112,240,68,47,128,167,172,20,95,180,206,159,116,208,11,161,107,33,233,22,193,208,94,129,80,176,93,194,88,
+  207,178,115,253,154,77,196,74,112,244,200,17,58,221,46,89,154,225,133,64,75,13,14,188,5,111,29,175,186,246,122,38,
+  39,38,56,127,110,150,164,215,47,116,103,67,67,148,202,21,26,205,26,245,122,131,48,12,240,94,144,101,57,74,6,104,
+  21,32,132,70,5,10,111,224,244,233,25,150,91,29,180,244,76,175,89,195,147,97,16,250,190,25,235,67,115,59,232,255,
+  8,217,138,51,207,255,11,60,58,248,245,187,192,189,19,22,246,193,131,26,134,223,149,25,185,247,75,79,237,121,252,208,
+  252,216,174,107,214,234,155,223,124,165,170,52,135,181,79,13,95,190,251,44,95,123,226,4,242,161,131,203,223,105,204,3,
+  17,124,214,194,35,21,104,109,0,54,92,188,69,47,2,208,183,211,113,83,19,44,252,192,247,50,188,126,154,143,252,246,
+  31,224,238,123,200,190,93,208,50,208,206,123,89,190,152,27,166,26,49,105,175,143,196,163,40,188,168,133,87,40,43,200,
+  148,47,108,223,125,48,136,193,25,152,224,83,248,66,75,29,82,25,169,49,186,99,93,176,240,197,199,101,3,150,188,231,
+  96,9,14,244,33,17,224,215,20,196,74,4,48,3,242,68,209,242,204,220,234,205,204,153,78,107,104,242,170,87,149,135,
+  170,77,22,22,23,201,77,78,102,114,28,5,243,186,211,110,177,48,187,128,179,142,44,73,217,181,99,7,195,35,163,84,
+  42,85,116,80,100,95,25,155,208,79,250,88,55,176,166,149,122,160,247,76,168,86,27,68,165,42,253,196,113,238,252,121,
+  238,186,235,46,174,187,250,74,238,191,239,126,150,250,125,37,96,212,193,72,0,186,83,152,205,83,5,222,116,1,0,181,
+  128,115,96,99,56,157,195,23,21,44,222,12,87,181,142,159,189,116,230,248,217,173,7,84,80,127,186,81,169,45,90,167,
+  77,43,177,219,124,222,121,3,254,145,10,124,34,133,47,215,224,244,221,96,211,65,251,252,170,139,183,229,69,0,250,118,
+  168,130,134,223,242,70,26,183,221,76,84,175,97,146,84,76,13,15,249,33,240,206,24,43,133,200,109,175,103,79,37,37,
+  174,220,115,9,174,223,66,249,28,235,44,120,135,82,18,229,29,214,131,68,161,181,92,181,0,89,177,252,80,74,33,188,
+  70,212,37,211,87,108,211,251,27,149,198,37,203,221,77,185,247,123,114,232,89,56,103,161,55,13,70,2,243,141,42,98,
+  215,70,39,239,123,106,209,195,145,117,48,183,113,238,252,154,92,7,229,230,208,48,181,90,157,86,187,77,16,6,131,88,
+  159,12,49,54,73,111,178,87,8,95,131,8,173,131,129,149,71,66,150,103,196,113,132,64,144,13,162,154,181,10,16,97,
+  225,85,148,36,9,185,113,68,253,132,126,214,102,124,188,193,198,141,27,24,159,152,96,253,244,26,191,8,153,129,146,132,
+  178,5,245,143,120,110,19,118,225,249,18,112,5,240,17,72,167,224,168,45,10,203,39,202,176,99,35,92,177,193,230,235,
+  174,88,88,26,77,11,32,115,1,28,17,112,103,14,119,213,225,248,207,67,246,137,111,24,114,95,60,23,1,232,149,59,
+  164,110,212,217,247,246,55,211,125,235,155,217,150,36,120,239,105,59,207,142,64,115,165,16,116,189,79,74,176,56,109,252,
+  242,209,99,167,39,237,27,174,195,7,2,47,13,129,26,228,194,11,240,88,180,1,37,3,132,44,124,36,44,30,55,8,
+  6,76,7,126,67,42,207,152,110,14,241,7,245,242,200,174,94,186,125,60,55,42,47,102,185,79,90,56,180,23,206,4,
+  208,146,73,154,29,58,122,150,42,180,135,224,128,18,28,191,172,181,188,225,107,231,79,143,150,154,77,149,180,179,65,212,
+  50,228,105,74,191,223,39,12,2,192,145,246,83,162,56,162,223,235,145,244,43,69,245,99,12,81,20,144,101,41,2,49,
+  8,106,84,244,122,125,230,231,231,209,90,83,42,101,196,177,230,250,235,174,226,134,27,174,102,168,86,248,16,110,219,182,
+  149,3,149,170,179,221,142,18,160,67,16,215,1,179,65,72,62,136,164,6,138,106,108,64,146,237,0,219,33,95,128,249,
+  47,192,210,142,98,179,245,132,128,33,7,163,162,248,112,18,78,117,225,208,90,56,255,31,33,255,196,197,219,242,34,0,
+  125,59,12,163,37,16,215,106,168,95,254,207,44,76,77,48,209,235,147,196,49,86,41,68,171,229,127,231,137,167,57,224,
+  61,255,16,250,30,63,55,10,173,39,79,30,243,56,35,164,119,40,99,81,94,22,188,65,4,74,134,69,150,186,51,120,
+  81,176,156,189,0,239,192,230,41,161,20,133,133,173,115,108,27,30,97,121,98,93,229,39,23,186,219,94,27,48,246,234,
+  212,109,158,118,254,42,233,253,129,4,246,37,240,116,150,230,199,55,156,155,95,152,128,252,12,28,55,158,199,54,165,189,
+  109,15,28,124,106,77,239,234,107,170,81,8,214,130,247,57,120,75,165,20,22,238,140,170,204,210,210,18,103,207,158,197,
+  218,124,53,39,205,121,71,191,215,45,140,236,189,165,181,188,76,187,221,65,74,77,185,92,102,120,116,140,184,18,115,237,
+  181,123,184,241,166,27,8,66,129,119,6,139,103,108,205,26,49,51,54,90,237,119,59,149,10,52,129,248,111,9,217,186,
+  87,107,102,133,64,175,12,247,133,160,159,38,171,175,177,162,160,62,255,30,216,159,131,37,15,45,11,50,40,200,161,161,
+  7,50,72,246,64,118,28,220,177,139,183,230,69,0,122,37,159,128,98,215,126,28,120,24,248,114,158,19,255,247,247,35,
+  173,165,7,188,15,120,167,16,252,215,52,67,29,61,193,247,131,114,208,80,48,18,10,21,157,93,108,139,204,59,148,42,
+  30,46,33,61,82,136,194,224,204,155,129,255,52,131,225,115,33,173,112,194,23,90,46,57,176,65,115,158,106,213,115,245,
+  149,235,248,204,254,131,165,195,81,163,244,39,50,29,191,50,207,214,223,108,237,37,187,172,189,162,238,121,54,133,71,12,
+  236,157,135,163,14,22,44,236,45,121,191,249,182,163,135,71,254,200,166,91,231,155,35,177,203,29,65,16,82,142,202,104,
+  37,137,74,37,116,16,225,40,92,18,17,208,238,180,240,120,22,151,150,57,55,115,22,53,240,59,170,84,170,140,143,79,
+  48,50,58,86,132,22,106,205,80,189,198,21,151,239,33,12,21,144,35,148,67,0,19,35,77,122,107,55,132,231,142,29,
+  107,108,131,181,93,24,218,229,221,236,118,107,253,169,11,42,32,6,32,116,161,101,139,184,0,240,123,224,158,1,183,9,
+  204,229,208,203,129,125,192,26,224,244,197,118,235,34,0,189,18,43,29,53,248,200,129,135,128,95,6,142,80,172,143,73,
+  18,120,228,177,213,63,191,56,0,169,53,192,111,128,170,195,154,30,220,164,165,186,233,161,90,48,189,239,124,143,133,118,
+  194,186,50,248,92,224,165,4,21,129,243,56,145,129,0,233,229,32,56,112,197,5,177,176,129,45,174,199,147,251,24,35,
+  36,187,166,107,12,37,22,167,5,115,26,245,105,17,14,127,1,221,188,50,79,166,111,79,211,141,215,122,191,85,194,250,
+  30,124,193,22,46,168,135,114,184,115,155,177,35,239,62,121,50,252,23,231,231,182,46,73,45,99,1,101,95,38,172,6,
+  4,177,64,26,138,181,251,248,48,97,57,226,158,7,238,69,15,12,243,165,80,12,213,154,140,143,143,179,113,227,70,198,
+  199,199,87,141,238,179,44,199,59,75,24,6,104,161,177,54,195,81,68,92,87,171,21,154,235,55,201,199,249,234,208,46,
+  216,100,96,179,135,179,151,102,105,251,75,20,86,28,223,76,187,43,191,97,238,118,225,231,46,158,139,0,244,138,57,126,
+  240,67,73,6,15,199,255,6,22,6,31,127,217,89,6,222,11,250,16,76,117,224,213,177,16,119,252,65,168,111,254,61,
+  236,72,48,55,199,137,83,103,217,176,107,109,49,244,21,133,188,66,10,89,44,204,133,3,235,87,99,148,189,16,72,33,
+  46,176,36,47,172,95,173,205,153,152,24,165,82,138,232,11,192,56,34,47,72,201,196,3,81,84,123,84,168,218,219,109,
+  191,249,221,150,114,232,92,71,120,206,106,56,105,138,124,244,53,151,24,63,125,117,224,38,254,68,209,200,77,78,223,38,
+  116,151,123,164,243,93,34,89,12,154,159,126,118,63,198,89,186,253,30,34,145,40,37,25,106,12,179,118,237,90,38,39,
+  39,209,90,51,55,55,143,247,131,156,51,15,222,103,124,228,35,127,204,238,221,151,177,118,237,52,195,35,117,20,160,149,
+  230,242,171,46,229,87,62,72,253,102,216,185,6,110,152,131,147,59,224,192,15,22,94,76,95,87,101,30,0,210,139,183,
+  225,69,0,250,118,4,30,63,0,158,47,1,63,55,40,241,191,217,179,161,0,160,82,38,196,250,16,110,18,222,191,229,
+  127,135,209,109,31,13,228,8,94,146,167,57,39,207,205,195,101,91,16,178,91,0,138,16,43,145,96,224,197,64,219,229,
+  7,96,35,193,23,15,183,240,224,10,89,59,206,121,214,173,157,98,100,180,206,177,249,101,2,10,206,144,146,162,136,241,
+  9,34,62,150,155,225,237,222,172,189,21,182,58,24,61,11,39,171,112,62,16,60,161,189,191,242,170,220,108,249,114,16,
+  52,144,18,239,40,90,60,29,20,154,89,41,56,114,252,88,145,119,95,174,96,237,202,160,92,112,250,244,25,206,156,57,
+  75,16,4,40,165,8,195,16,107,29,165,82,76,165,82,103,97,33,225,228,169,5,154,205,50,235,214,79,176,123,247,78,
+  166,215,108,224,29,111,124,43,7,126,232,168,254,191,127,248,123,219,222,215,90,190,182,6,15,108,47,218,195,60,185,160,
+  146,81,60,71,74,188,216,82,93,4,160,111,139,147,15,110,248,50,80,1,126,1,248,234,224,255,93,251,77,180,6,51,
+  192,15,0,187,10,150,239,142,208,251,215,57,120,221,199,75,149,43,63,22,139,17,107,50,148,137,200,172,101,223,193,83,
+  184,219,175,47,36,93,66,12,4,254,174,248,74,131,141,216,10,223,90,8,57,120,240,139,100,213,213,105,137,51,148,99,
+  69,163,22,194,156,35,80,69,112,33,222,128,213,164,169,231,93,239,253,110,17,156,56,84,239,223,251,181,161,16,234,1,
+  168,25,200,182,121,206,59,56,59,105,109,187,12,62,149,66,56,233,240,72,148,10,112,182,224,79,7,90,35,132,196,120,
+  143,10,52,214,89,150,150,151,49,253,156,198,80,131,122,189,78,173,86,163,82,169,18,199,37,202,229,50,72,73,84,138,
+  209,58,34,77,4,207,62,125,154,82,216,100,114,124,61,165,178,228,231,255,245,207,240,131,7,247,71,199,239,252,210,240,
+  229,133,46,76,253,18,112,248,207,120,93,35,224,141,23,31,142,139,0,244,237,112,222,77,33,64,45,1,223,55,248,248,
+  171,156,7,11,200,168,44,195,174,42,188,245,172,224,45,255,167,92,218,253,181,32,46,121,103,80,190,224,252,122,1,7,
+  14,159,33,51,30,137,7,87,4,31,10,236,32,190,65,32,6,182,26,43,109,13,12,76,237,253,115,21,129,115,142,56,
+  150,52,234,49,74,8,130,160,132,183,57,121,238,169,70,37,222,247,227,63,192,123,190,243,187,248,147,127,251,239,195,62,
+  68,10,74,77,144,83,133,71,78,23,88,28,242,190,87,177,206,116,33,208,222,226,172,199,75,191,90,69,57,15,222,90,
+  164,80,68,81,192,248,240,36,235,166,166,105,84,170,212,107,53,162,184,72,99,245,64,16,4,120,239,72,115,75,24,150,
+  80,90,83,175,87,217,118,201,22,182,109,221,194,190,167,158,225,240,145,131,212,155,195,28,59,120,144,184,120,41,228,95,
+  84,229,164,192,191,161,96,73,171,139,183,232,69,0,122,41,156,215,189,128,63,0,199,95,221,59,216,82,236,148,255,65,
+  193,109,217,80,134,55,158,144,226,237,255,169,84,185,236,105,233,149,50,109,132,139,240,94,35,149,65,4,130,227,39,230,
+  152,95,88,102,178,38,138,21,188,119,56,225,138,172,120,231,89,137,133,6,135,144,131,49,235,74,37,228,28,194,21,195,
+  233,176,172,24,27,174,17,42,141,183,144,102,25,245,106,147,31,249,123,63,196,59,223,115,19,67,13,205,182,233,233,220,
+  20,224,40,50,16,187,129,253,133,139,96,167,38,72,34,103,157,87,69,58,42,20,241,63,198,185,34,181,195,67,41,42,
+  209,108,52,217,181,107,23,107,166,214,80,45,87,240,222,145,231,57,214,88,188,240,56,231,177,174,216,118,149,162,18,227,
+  19,147,172,89,211,228,234,171,118,35,4,60,187,255,41,102,102,230,168,86,135,248,195,15,255,49,115,167,79,249,38,194,
+  88,188,141,192,95,79,225,11,244,103,101,118,61,53,152,7,133,23,111,253,139,0,244,82,56,175,127,137,93,143,27,180,
+  108,145,16,101,188,223,217,22,220,242,191,170,181,221,251,4,74,231,30,79,9,43,50,188,43,188,252,132,146,204,156,91,
+  224,212,137,51,108,188,98,29,125,91,184,25,22,98,11,177,106,30,38,86,36,175,162,0,31,111,61,110,80,25,121,231,
+  81,94,80,14,67,166,166,70,233,118,30,166,20,72,46,221,115,25,87,94,117,25,141,122,141,102,99,132,201,169,113,246,
+  251,126,222,43,170,12,57,68,65,238,235,128,40,131,172,120,196,168,208,249,113,124,36,112,72,100,33,173,16,16,232,128,
+  209,145,81,46,217,114,9,107,166,166,89,55,189,22,129,160,159,244,73,173,67,106,93,52,141,82,226,115,67,58,96,70,
+  215,170,130,13,235,135,184,245,182,155,112,38,231,216,177,147,76,142,79,179,115,199,30,158,120,242,81,190,118,255,221,236,
+  12,117,214,200,178,37,160,149,130,249,135,252,249,142,133,154,130,45,109,46,222,250,23,1,232,165,112,174,123,9,94,211,
+  192,178,163,166,97,243,211,65,180,249,113,108,232,51,135,245,113,97,24,166,52,94,166,224,21,82,4,36,253,132,19,167,
+  206,227,175,90,11,62,7,4,14,3,34,44,160,200,249,1,15,72,172,14,156,157,119,184,66,147,138,214,10,239,53,4,
+  33,67,205,58,245,106,153,239,120,247,247,176,126,243,6,114,155,51,185,102,146,161,102,5,103,115,116,92,97,48,85,18,
+  150,98,163,103,33,244,66,12,133,80,90,111,93,239,33,29,84,157,7,229,65,120,135,84,69,250,170,86,154,229,229,37,
+  146,94,66,187,221,102,168,222,64,107,77,84,142,144,82,16,133,1,214,58,80,138,204,230,56,239,89,106,45,243,232,99,
+  251,112,214,176,107,215,22,54,109,154,162,82,174,35,101,196,254,103,75,140,140,76,17,47,119,140,134,89,96,126,25,204,
+  201,191,164,197,242,131,121,144,189,120,251,95,4,160,23,251,76,191,4,193,39,7,206,123,31,199,48,124,88,138,70,99,
+  98,138,106,59,97,110,118,17,35,250,8,47,145,212,80,58,67,136,132,4,203,211,71,23,200,165,2,215,67,16,23,187,
+  103,167,17,94,34,164,29,12,157,45,120,139,16,197,0,88,138,128,48,16,72,37,232,186,58,123,15,180,104,140,172,225,
+  167,127,250,199,144,170,142,115,33,213,74,133,52,239,144,89,143,146,30,19,202,192,21,69,141,110,23,12,98,74,5,214,
+  196,66,16,189,38,235,157,251,92,216,168,38,65,165,44,179,30,18,139,117,138,229,86,155,36,205,88,88,94,34,77,83,
+  180,86,72,45,169,132,49,163,245,33,226,82,137,40,42,81,169,84,137,74,37,26,205,38,205,161,6,22,203,236,242,18,
+  159,251,220,253,220,253,149,199,185,100,251,122,118,239,94,207,244,134,53,188,254,246,155,121,231,99,111,227,225,95,248,69,
+  43,160,21,66,119,30,236,255,230,185,104,158,63,235,100,20,118,29,53,10,191,160,139,231,34,0,189,168,45,207,75,13,
+  128,6,251,43,7,100,77,155,102,54,77,89,183,126,19,235,214,173,167,155,46,49,115,126,129,78,59,37,79,83,84,160,
+  80,50,228,233,103,14,147,244,37,129,45,33,209,8,233,80,72,156,8,112,88,36,96,109,62,232,194,4,58,208,132,129,
+  166,155,123,14,29,155,227,201,103,102,88,232,69,68,141,105,140,212,68,161,38,75,22,233,46,11,170,149,53,104,145,16,
+  136,58,93,21,199,182,88,238,53,60,68,39,161,83,7,35,240,253,204,35,246,120,228,143,244,58,79,254,102,197,93,149,
+  196,34,200,19,137,246,197,171,236,125,97,207,90,252,90,224,12,116,178,30,121,63,39,140,66,172,177,32,36,185,177,212,
+  235,117,166,38,167,104,12,53,104,14,15,81,111,52,232,119,251,236,123,230,0,135,142,28,96,100,180,206,117,175,186,134,
+  207,125,250,19,220,14,139,1,204,247,160,183,13,252,251,191,201,7,164,51,168,148,46,174,230,47,2,208,139,118,142,191,
+  196,174,103,133,176,88,21,162,155,195,204,30,47,230,245,226,210,244,227,179,79,210,104,196,76,174,153,100,203,166,75,8,
+  180,32,237,119,88,110,167,204,207,44,112,232,232,57,206,47,100,108,24,109,128,237,227,101,134,243,57,194,150,240,214,225,
+  144,168,160,76,138,164,159,195,249,249,22,231,102,206,114,236,76,151,197,126,128,46,13,227,43,49,185,146,148,202,101,146,
+  52,33,77,36,198,12,102,73,153,7,235,104,197,97,220,130,177,113,216,24,194,104,13,22,13,116,173,231,24,130,115,192,
+  206,203,181,72,74,185,205,19,17,7,222,231,120,231,8,163,8,6,22,32,141,70,131,126,63,161,92,174,224,140,69,139,
+  194,34,68,135,1,90,43,66,231,201,179,156,131,7,15,161,165,162,82,46,177,231,242,203,24,25,155,64,139,128,44,73,
+  8,84,157,51,103,102,88,56,122,156,221,136,89,131,63,13,116,142,81,108,187,196,55,241,58,91,96,248,226,35,112,17,
+  128,94,204,243,95,94,98,215,99,128,49,224,31,120,223,13,224,244,136,245,51,147,222,154,185,32,210,237,118,155,229,103,
+  59,184,92,80,175,133,76,77,78,176,105,235,86,110,121,245,109,52,68,198,3,79,156,96,97,195,36,181,74,64,84,146,
+  4,65,68,137,162,95,234,244,115,206,47,182,57,126,182,197,249,165,140,110,30,96,9,208,165,117,136,90,72,46,13,173,
+  222,34,218,164,180,250,45,188,21,144,137,34,129,79,131,166,2,14,108,37,16,167,161,118,21,236,202,96,23,112,62,130,
+  94,7,14,43,207,19,61,33,214,253,161,100,251,178,242,101,209,55,132,50,196,169,98,160,12,20,110,137,65,72,110,44,
+  105,146,16,71,49,66,20,219,50,173,52,121,110,8,195,16,188,99,180,89,101,120,120,132,201,137,73,74,149,8,169,60,
+  206,11,130,82,5,39,52,79,221,247,128,255,206,126,119,121,13,254,132,135,147,25,244,254,3,112,146,111,110,203,213,5,
+  110,5,110,227,162,252,226,34,0,189,72,103,221,75,176,37,44,1,11,144,141,195,233,10,226,200,173,214,93,249,180,204,
+  71,141,112,88,43,144,66,145,36,41,71,79,156,224,196,185,179,4,58,100,203,212,52,71,142,214,24,170,55,80,90,82,
+  46,69,52,135,70,9,17,116,90,139,24,15,72,69,230,4,137,51,232,168,76,165,86,67,137,5,44,65,161,13,243,17,
+  206,20,137,24,38,233,19,12,146,127,58,253,46,86,120,2,33,25,91,183,65,252,110,173,217,188,178,189,184,117,28,110,
+  238,65,55,128,243,18,154,66,136,94,46,232,156,80,58,244,97,5,37,28,214,22,2,8,235,44,74,42,162,40,38,10,
+  2,112,30,225,60,54,55,244,243,156,82,169,132,146,154,168,28,51,49,49,65,189,86,99,168,209,160,217,28,70,75,137,
+  193,144,123,67,154,36,212,202,53,70,199,155,44,60,60,107,111,183,98,57,192,207,121,88,60,15,230,125,131,1,243,55,
+  219,86,245,41,12,203,236,197,86,236,34,0,189,24,231,255,188,68,175,235,36,228,7,224,140,240,126,223,245,38,191,254,
+  163,165,112,244,180,9,16,206,34,149,71,200,128,220,231,228,105,130,49,134,39,158,125,150,103,15,41,130,40,64,133,138,
+  90,181,70,37,170,163,162,128,48,10,152,24,159,68,75,133,205,60,90,104,42,101,79,191,221,163,50,236,209,21,141,18,
+  17,129,42,33,92,177,150,215,178,80,206,219,204,97,179,4,21,105,142,30,60,76,103,185,207,252,218,13,149,163,207,44,
+  70,27,225,218,0,70,92,241,12,107,229,253,90,9,161,206,93,230,227,40,10,171,134,110,167,131,203,139,73,139,117,142,
+  126,63,41,248,62,182,32,73,214,42,17,227,35,195,140,142,140,48,54,62,78,185,92,70,8,65,20,69,132,97,136,195,
+  97,188,47,88,222,30,134,155,37,94,115,235,141,92,113,217,78,246,239,154,214,159,124,232,222,230,219,230,59,99,14,38,
+  214,66,244,86,200,155,127,141,215,123,255,96,30,148,93,4,162,139,0,244,55,121,222,248,18,188,166,21,50,226,251,96,
+  217,195,201,9,231,103,174,116,62,61,165,227,72,248,46,206,25,50,35,33,16,8,161,48,153,65,160,232,91,79,47,233,
+  33,140,163,211,239,17,171,101,84,84,38,140,42,232,176,74,163,90,71,88,143,12,32,199,18,7,154,82,169,134,14,66,
+  132,119,40,85,100,135,57,60,120,133,113,10,37,28,19,195,35,28,56,116,138,167,247,237,227,181,175,187,141,255,241,203,
+  129,123,8,22,79,104,61,229,188,92,103,181,150,21,33,92,57,64,46,161,117,59,170,134,161,75,81,222,131,85,56,71,
+  225,196,40,11,167,67,147,27,194,32,64,41,73,20,6,84,74,101,134,26,13,162,32,32,237,247,169,54,26,232,64,99,
+  173,33,8,227,85,7,199,169,201,9,110,189,237,58,46,217,58,141,20,150,235,111,186,154,167,254,209,251,234,135,126,238,
+  63,239,188,4,174,204,225,217,99,112,164,249,215,216,45,236,24,84,159,103,185,200,146,190,8,64,127,131,231,170,151,224,
+  53,57,10,95,227,65,10,69,38,4,182,42,165,143,131,136,110,210,41,18,75,157,7,227,16,210,162,101,128,49,133,221,
+  134,0,92,46,177,94,18,232,18,181,48,160,18,56,122,243,243,140,148,107,84,26,53,148,10,64,74,226,161,6,42,8,
+  200,250,73,33,4,149,26,132,32,8,11,20,244,214,161,132,103,238,252,121,164,150,188,238,117,175,165,90,21,172,153,26,
+  13,207,93,115,203,229,95,61,115,60,156,154,92,167,174,189,226,90,230,44,72,161,169,212,74,220,184,116,134,207,124,242,
+  19,136,68,18,171,8,21,12,70,194,206,35,4,72,37,49,214,32,148,198,98,49,121,70,175,219,69,107,77,181,90,197,
+  230,25,137,183,84,42,101,180,86,244,147,62,151,94,186,155,55,190,225,54,154,67,1,206,119,81,129,32,235,119,120,239,
+  251,126,132,223,253,220,87,214,245,239,127,248,234,0,30,109,195,185,195,208,9,254,26,149,140,184,160,45,63,199,75,111,
+  67,122,17,128,94,129,231,223,188,68,175,75,22,109,129,159,7,183,224,157,168,199,37,182,148,202,246,169,118,87,9,153,
+  35,2,1,46,66,122,131,215,33,66,245,17,89,134,114,154,76,10,82,219,65,228,41,36,26,235,202,172,153,154,64,201,
+  152,40,168,34,20,212,26,85,2,93,162,159,244,208,218,33,116,128,84,17,74,122,2,157,17,8,65,154,90,38,39,167,
+  216,188,101,29,155,55,77,115,234,244,49,198,71,167,24,25,25,99,120,100,93,105,118,110,158,157,107,215,177,102,184,78,
+  47,43,172,99,227,200,147,14,130,14,51,233,49,94,96,242,124,224,69,45,176,214,21,50,11,33,200,83,135,23,109,210,
+  180,143,33,35,138,67,74,165,152,80,23,154,176,21,213,126,160,2,170,37,73,179,161,49,166,139,214,18,239,11,185,199,
+  80,179,204,238,31,127,95,229,228,119,255,200,206,109,206,93,106,224,169,3,208,221,86,24,63,254,181,78,147,98,25,176,
+  27,248,247,20,12,199,139,85,209,69,0,122,65,206,31,189,68,175,203,1,13,176,35,48,223,176,156,152,232,180,58,253,
+  114,117,180,26,196,136,32,34,174,134,196,186,138,182,146,118,183,67,43,179,100,42,64,228,154,177,48,227,93,239,184,137,
+  237,107,70,233,217,18,103,90,57,194,149,169,54,70,136,75,21,84,160,9,227,152,78,59,33,38,70,0,214,88,140,109,
+  81,171,86,24,170,15,17,70,138,93,59,118,16,87,34,230,230,103,249,204,103,238,100,105,97,137,55,189,233,117,100,166,
+  207,252,252,28,89,102,9,130,18,201,32,215,203,11,48,182,136,127,86,74,209,79,123,8,61,16,205,14,56,64,98,96,
+  134,239,189,39,203,50,242,44,3,231,232,245,82,164,10,112,192,232,200,24,198,58,242,60,3,4,129,214,236,125,248,49,
+  214,174,159,224,242,203,183,35,101,177,206,199,65,158,165,92,121,219,109,60,181,115,251,164,219,247,204,118,9,147,33,156,
+  121,166,224,115,126,75,175,191,167,16,20,87,46,206,133,46,2,208,11,117,190,239,37,124,109,39,33,63,4,103,34,120,
+  102,93,183,119,110,36,10,70,71,118,236,164,147,245,176,174,143,237,59,172,140,73,236,60,86,122,84,73,97,179,14,183,
+  223,176,153,159,253,123,155,137,84,10,229,6,169,108,98,41,225,228,24,186,60,73,88,153,192,137,6,157,174,225,247,255,
+  224,83,204,205,45,115,242,216,97,254,249,79,255,191,28,58,116,152,251,239,123,136,230,72,147,153,153,51,68,113,68,146,
+  88,164,8,145,42,230,240,225,83,44,183,114,218,157,30,149,106,153,82,57,194,59,79,158,231,8,37,145,66,226,133,160,
+  214,168,179,116,182,93,180,92,131,217,207,138,53,170,49,6,231,28,222,23,45,89,24,6,24,239,56,122,226,24,75,75,
+  75,108,88,191,145,141,27,55,161,117,33,205,16,194,35,68,192,87,239,188,135,233,233,73,214,172,25,193,56,131,24,24,
+  240,215,26,13,162,87,93,85,93,220,247,204,244,16,140,151,32,88,15,185,184,120,123,95,4,160,151,250,249,249,29,91,
+  191,181,86,73,10,122,189,132,67,199,78,174,38,156,246,6,239,160,1,127,125,23,62,75,145,111,254,67,133,33,226,177,
+  181,130,179,99,237,206,142,153,209,80,215,74,17,129,170,16,170,18,105,234,24,31,242,44,247,115,172,208,228,181,30,83,
+  163,107,8,114,205,222,199,78,145,5,150,141,107,107,132,13,141,170,70,104,175,200,243,148,74,217,48,180,174,70,179,17,
+  240,129,15,126,17,242,148,7,30,188,143,61,151,95,205,210,167,238,164,159,229,180,147,121,42,165,33,182,111,221,77,167,
+  187,196,114,107,137,71,31,125,156,115,231,218,68,113,25,17,44,34,148,69,135,33,185,183,164,105,138,146,18,235,29,185,
+  177,168,32,192,121,139,214,154,44,203,96,80,25,173,176,161,87,0,41,183,14,235,115,132,23,204,204,207,34,148,164,90,
+  171,50,210,28,37,12,61,198,88,148,22,156,57,59,207,222,189,143,243,174,119,223,142,183,14,63,16,211,134,129,100,250,
+  150,87,169,153,223,252,192,240,48,212,13,4,107,249,139,229,24,23,207,69,0,122,73,156,31,187,255,179,223,210,223,47,
+  151,75,220,119,223,94,110,185,245,157,171,159,251,238,65,217,254,216,96,142,176,226,126,250,87,121,71,94,81,197,183,33,
+  13,133,56,27,59,78,78,119,251,189,195,46,173,135,185,32,119,125,124,45,192,235,128,106,125,152,225,177,6,97,92,129,
+  60,195,233,46,198,78,112,223,125,207,240,197,131,135,185,100,119,137,218,80,7,212,12,167,207,156,36,77,186,236,216,178,
+  129,127,243,255,253,4,27,55,77,49,50,220,96,100,104,156,123,238,185,143,137,137,105,208,37,130,40,166,89,213,156,63,
+  187,72,107,185,195,249,185,89,188,128,135,30,121,4,80,236,218,185,147,165,86,225,96,152,231,22,131,35,75,115,178,52,
+  37,203,83,180,214,224,41,204,200,212,115,96,99,173,69,74,185,218,142,57,239,87,171,35,231,138,225,250,201,211,167,233,
+  245,82,46,191,116,15,235,214,173,71,107,61,168,162,44,173,78,191,176,154,5,148,84,32,37,198,231,108,189,226,82,230,
+  154,181,154,91,108,55,83,40,125,165,136,150,126,65,206,27,47,62,54,23,1,232,249,58,85,251,173,237,58,132,117,148,
+  221,215,79,8,110,43,230,55,84,129,255,10,156,31,252,186,207,115,62,65,249,55,1,72,10,120,24,76,15,102,180,243,
+  135,174,108,47,207,124,117,126,182,174,70,214,160,93,68,63,237,35,101,128,86,101,210,110,70,156,27,226,72,112,170,53,
+  71,223,247,152,152,108,32,207,72,74,19,163,76,111,220,76,175,103,57,112,114,14,239,20,79,63,123,134,179,231,186,172,
+  157,30,167,94,21,132,186,196,194,210,89,30,122,244,49,78,159,63,199,184,24,98,98,106,140,36,57,195,236,220,89,42,
+  149,33,54,109,222,204,179,7,247,243,192,131,247,48,221,29,193,121,69,210,179,40,209,199,88,135,49,22,155,27,112,48,
+  212,24,98,126,113,97,80,233,72,130,32,36,203,50,164,44,92,25,165,112,40,165,177,174,168,140,242,60,71,41,85,152,
+  232,75,197,242,242,34,243,139,11,76,79,175,41,116,109,58,196,139,136,32,136,17,74,129,43,190,142,160,240,179,30,25,
+  109,34,170,149,42,139,237,241,16,42,103,64,156,42,162,164,47,2,208,69,0,122,233,158,11,227,90,254,90,0,228,253,
+  159,250,26,43,70,100,43,118,15,45,224,43,3,16,42,81,48,117,71,41,72,111,127,225,215,6,198,192,183,97,209,10,
+  177,127,93,150,31,158,154,111,109,156,31,153,10,162,40,34,176,142,146,6,157,27,50,81,168,219,51,23,112,248,196,34,
+  39,103,151,216,176,105,8,189,183,69,127,169,11,137,35,150,130,169,225,33,150,206,157,102,235,230,38,190,127,156,114,216,
+  163,81,83,216,20,186,189,20,227,44,141,161,26,179,179,51,132,90,18,137,152,245,235,54,80,169,85,185,246,186,203,121,
+  226,233,251,184,251,222,47,241,244,211,251,208,170,138,223,185,7,173,53,173,238,50,198,24,194,64,67,110,169,150,203,68,
+  113,140,77,0,239,17,12,236,95,61,197,38,204,250,34,169,195,129,212,98,144,146,225,177,206,98,93,138,22,154,118,167,
+  77,146,37,4,161,64,168,16,188,98,121,185,75,158,231,32,36,14,129,146,10,165,4,214,89,150,189,11,37,212,98,8,
+  143,131,248,217,23,104,118,252,211,23,31,155,191,124,52,113,241,37,120,233,28,65,161,77,154,0,190,8,28,5,182,3,
+  123,254,146,143,75,129,203,129,0,223,75,225,217,80,240,192,119,47,47,28,12,14,62,109,246,31,57,202,242,226,18,42,
+  112,136,114,142,174,26,116,41,64,135,101,156,141,57,188,255,8,219,71,21,35,21,201,98,199,18,148,170,148,43,37,74,
+  33,216,108,129,157,219,198,56,115,232,46,204,242,51,76,52,43,56,159,163,180,160,181,180,204,200,200,16,185,201,72,186,
+  125,230,231,150,144,42,100,211,166,9,46,191,98,51,165,82,132,146,101,112,33,206,164,180,58,139,228,89,142,201,114,242,
+  44,39,75,51,140,117,40,169,16,222,83,45,151,169,213,106,68,97,56,112,201,231,185,132,14,60,90,235,194,255,200,217,
+  255,191,189,55,15,146,44,59,175,251,126,247,222,183,230,90,123,117,109,221,93,189,47,211,131,30,204,210,192,12,177,11,
+  6,33,130,32,77,82,166,68,195,33,129,4,69,74,54,35,108,81,98,72,38,195,132,21,150,195,225,176,197,144,130,52,
+  29,148,40,155,146,76,64,65,90,129,85,32,9,96,176,204,0,179,47,61,189,77,239,93,189,212,94,149,149,251,91,238,
+  226,63,94,246,0,8,1,3,96,134,164,12,76,158,142,138,138,232,204,172,170,124,121,227,188,239,126,247,59,231,96,116,
+  94,52,166,17,4,65,136,117,133,43,163,31,4,164,73,74,110,50,150,110,221,228,206,242,90,17,43,141,195,106,7,86,
+  160,173,163,107,139,248,69,59,176,224,31,98,72,64,67,124,155,202,104,21,248,220,160,89,125,237,123,32,175,147,14,61,
+  226,220,45,141,248,242,209,180,251,213,191,209,106,172,244,182,26,92,190,241,50,23,206,93,228,230,237,37,122,237,109,186,
+  93,135,113,154,209,160,196,75,55,218,4,85,159,233,168,205,230,214,38,205,78,147,64,132,4,50,166,229,199,252,238,191,
+  127,130,243,151,215,153,240,50,38,188,30,41,45,140,77,8,114,159,74,28,144,226,104,247,52,123,22,231,216,119,116,47,
+  111,121,248,1,68,232,168,213,107,56,87,70,250,1,202,47,230,122,250,253,4,147,107,116,154,99,181,195,104,71,41,46,
+  19,123,62,229,40,24,156,98,57,130,208,7,97,113,194,96,156,6,225,6,22,172,134,220,228,32,239,58,56,10,148,10,
+  25,169,141,81,10,107,24,93,228,153,42,101,200,18,205,210,213,6,74,21,75,92,72,176,100,32,60,66,43,173,43,10,
+  75,163,192,149,138,10,242,207,253,107,136,225,22,236,7,186,26,130,194,80,231,171,20,230,245,63,69,113,90,230,190,195,
+  157,35,7,222,3,157,147,206,157,239,195,243,7,123,189,147,123,43,229,217,139,8,181,186,177,196,78,179,196,214,102,13,
+  188,6,50,72,169,170,58,47,118,251,236,252,181,26,7,22,119,113,231,220,26,221,213,179,116,243,189,140,149,170,148,168,
+  48,58,162,8,186,91,160,199,136,199,171,44,63,187,66,185,84,97,125,189,69,73,167,28,61,124,136,249,137,69,14,44,
+  78,115,234,129,123,168,213,203,128,102,110,102,2,103,18,162,168,134,114,146,70,99,27,207,11,200,146,12,173,13,189,94,
+  15,99,13,158,39,208,218,160,133,37,203,50,58,157,14,8,129,49,166,120,159,178,120,167,58,207,64,184,194,138,213,57,
+  36,130,114,185,202,194,204,28,81,24,98,157,197,243,36,82,21,179,205,58,55,220,185,179,140,179,135,94,73,251,80,190,
+  162,219,92,102,188,215,105,1,155,29,232,253,44,184,15,51,156,102,30,18,208,16,175,250,33,245,129,255,7,120,43,69,
+  148,204,93,147,172,111,70,27,120,59,184,16,58,73,161,60,111,151,132,176,66,250,202,137,30,185,145,180,58,61,172,200,
+  208,46,99,211,180,184,157,106,254,241,239,126,145,191,245,254,123,120,231,67,251,161,26,3,77,164,55,193,187,222,249,1,
+  22,230,15,50,165,110,178,185,125,145,140,132,67,71,70,153,156,156,68,246,124,42,163,37,198,103,107,236,158,154,224,212,
+  91,78,48,49,81,198,217,14,66,195,7,127,252,199,248,228,39,30,229,169,167,159,38,10,2,218,237,22,213,106,141,36,
+  73,73,211,140,36,73,16,82,48,57,53,73,84,46,115,103,229,14,150,98,230,199,1,158,231,21,122,48,99,94,177,232,
+  16,131,198,51,22,172,113,4,129,79,92,42,84,243,206,26,114,173,145,158,135,64,160,148,160,209,216,38,77,19,124,79,
+  96,172,66,18,211,90,90,33,110,117,219,2,182,29,244,119,81,56,30,14,49,36,160,33,190,7,252,52,240,19,192,19,
+  131,187,118,192,183,118,80,13,176,14,166,94,88,143,54,234,190,49,70,91,223,19,49,198,129,181,109,180,177,56,23,163,
+  2,139,245,53,159,124,244,44,207,188,120,139,221,187,103,56,116,120,140,67,11,83,212,107,109,234,11,33,75,91,207,179,
+  122,227,50,89,175,203,242,102,204,244,244,4,181,186,207,248,220,12,165,114,141,217,189,99,220,127,114,150,209,233,58,56,
+  9,248,160,51,198,167,39,248,231,255,236,127,229,23,126,254,111,115,249,234,18,189,44,101,187,181,131,29,196,237,36,3,
+  151,198,173,157,109,148,231,35,165,194,225,80,210,67,155,98,0,209,31,52,156,139,237,150,43,236,98,1,207,11,144,158,
+  164,86,174,18,120,10,37,7,30,214,131,92,69,229,43,132,146,8,225,13,46,142,68,160,145,100,172,222,106,210,3,95,
+  64,41,6,191,199,95,156,197,198,232,112,185,14,9,232,135,13,201,96,91,246,78,224,89,96,135,226,196,204,251,166,173,
+  89,9,180,131,237,0,54,102,250,173,190,243,227,200,90,129,24,244,85,144,10,103,2,140,235,33,124,31,75,153,91,89,
+  206,202,173,45,158,91,234,17,184,171,40,207,65,52,69,165,62,198,226,158,89,142,239,153,39,40,69,108,53,183,88,223,
+  218,225,186,189,138,146,17,60,99,248,220,103,29,229,72,49,59,63,203,190,125,139,28,61,122,15,179,51,33,187,15,44,
+  242,214,71,30,230,220,203,87,144,73,194,198,214,6,113,24,147,244,19,250,253,62,97,28,209,207,18,154,173,22,210,83,
+  131,137,103,129,211,69,211,217,57,135,26,76,71,91,7,74,250,72,36,129,23,18,135,33,161,31,130,83,148,203,37,162,
+  56,194,104,135,31,201,98,230,40,213,196,113,140,231,21,77,109,15,9,120,172,145,114,14,198,143,195,180,134,242,93,253,
+  214,144,128,134,4,52,196,247,8,67,161,196,126,25,248,53,160,1,108,125,211,227,191,10,246,175,67,223,65,183,158,219,
+  76,6,2,161,114,156,17,88,235,33,132,69,73,141,209,6,163,66,156,144,248,57,196,158,163,54,82,161,82,153,97,98,
+  215,36,181,177,17,42,21,71,111,167,207,185,11,231,89,93,91,102,179,177,77,179,185,137,116,22,233,43,178,212,130,246,
+  17,46,39,174,88,164,231,51,90,155,224,239,254,242,207,243,139,31,249,48,207,61,253,44,22,104,118,90,196,186,68,191,
+  215,199,58,135,167,20,221,126,151,92,107,242,60,47,234,27,103,177,182,168,114,140,49,4,65,128,239,251,197,228,52,69,
+  142,189,51,130,122,165,198,216,232,24,66,72,74,229,50,81,185,130,148,30,65,24,19,134,1,202,43,198,30,234,245,42,
+  158,95,2,231,112,169,98,237,218,10,127,242,249,47,176,0,210,129,151,22,38,144,194,127,229,220,109,136,33,1,13,241,
+  61,33,7,222,11,60,10,252,51,96,134,98,34,186,15,28,43,66,119,50,5,189,58,46,19,206,33,132,1,225,144,162,
+  140,19,41,214,36,40,1,206,106,164,176,164,38,71,152,18,19,81,133,242,72,68,63,111,177,115,169,69,171,113,135,78,
+  163,73,39,181,164,182,143,39,3,112,17,34,16,120,65,113,196,45,194,24,79,122,8,149,224,16,172,110,36,116,58,154,
+  151,47,92,228,244,75,103,200,45,228,198,224,229,26,231,123,36,73,31,41,69,17,52,168,53,89,94,76,58,69,81,132,
+  49,26,41,213,43,83,208,214,218,34,185,213,82,16,82,224,227,73,15,171,161,82,45,17,132,33,97,28,33,253,0,49,
+  232,138,9,225,136,162,144,99,199,143,131,133,139,231,175,114,250,249,179,156,127,249,44,243,147,7,153,226,139,29,96,51,
+  130,238,24,184,128,161,136,116,72,64,67,188,38,56,138,38,234,223,1,62,62,40,251,19,32,130,158,7,235,39,181,219,
+  156,205,211,217,155,24,229,91,64,152,65,12,188,68,8,131,20,26,235,4,82,56,66,149,147,52,239,208,182,101,178,92,
+  225,76,137,82,181,74,125,122,138,78,71,226,59,77,57,14,112,78,17,198,49,35,99,163,148,226,16,63,18,84,226,49,
+  38,198,166,200,109,70,189,50,202,47,254,194,127,193,191,253,131,255,131,237,198,54,65,101,12,144,228,90,19,197,33,214,
+  26,180,30,68,66,15,100,22,206,21,249,207,190,31,144,164,41,97,24,17,69,33,58,215,69,106,171,18,4,65,64,41,
+  42,225,6,178,140,60,211,4,126,81,37,1,120,126,64,181,90,193,138,132,82,20,209,106,237,240,135,31,251,18,215,175,
+  44,225,203,136,95,252,165,95,224,137,175,127,157,165,223,163,237,96,93,65,183,207,95,156,187,225,196,112,121,14,9,232,
+  141,64,64,119,19,50,182,128,83,192,20,112,186,24,31,218,30,15,131,246,131,165,48,189,209,77,74,86,170,162,242,81,
+  69,195,215,90,240,60,31,79,80,104,165,140,132,176,140,8,170,76,78,140,16,71,49,129,31,82,42,151,145,162,208,89,
+  5,161,162,94,169,50,179,107,134,137,137,73,28,14,39,13,158,240,80,8,226,146,224,145,135,239,71,216,46,173,110,78,
+  92,25,33,51,133,61,172,181,57,73,226,80,170,176,227,112,20,138,119,156,35,80,30,105,47,65,248,30,126,20,227,71,
+  49,206,8,20,130,114,88,34,183,57,185,179,36,58,167,28,151,145,30,72,233,104,55,155,148,226,152,82,165,130,51,57,
+  59,141,62,78,100,228,229,140,79,253,135,79,83,138,75,188,253,221,239,226,161,83,135,9,227,18,238,209,62,1,100,18,
+  82,13,230,189,124,247,25,171,215,243,217,12,49,36,160,55,84,37,180,14,236,20,125,213,178,47,68,252,114,158,151,190,
+  214,151,37,127,208,233,16,66,97,140,123,197,248,235,174,221,133,4,130,80,224,156,161,92,41,225,123,146,40,10,8,131,
+  128,192,87,72,169,136,162,144,74,165,68,224,251,197,105,150,148,120,74,18,68,49,161,10,169,87,75,28,62,62,77,37,
+  86,124,229,203,79,178,111,225,94,222,254,240,187,121,244,241,79,225,251,1,86,23,106,119,165,84,49,84,168,53,82,74,
+  164,82,228,70,227,121,62,115,51,211,136,129,126,203,24,131,53,134,192,15,232,38,224,140,38,12,67,170,213,26,213,82,
+  137,145,250,40,56,208,58,71,98,73,91,77,16,29,250,253,62,219,166,207,187,223,243,54,62,240,193,247,49,58,85,197,
+  101,109,176,134,104,106,156,185,169,41,161,215,215,221,247,18,203,51,196,144,128,222,208,149,141,25,124,72,187,40,74,154,
+  18,223,26,21,156,2,71,65,156,7,239,33,8,182,161,156,20,102,91,71,34,231,30,74,60,127,98,203,6,56,12,190,
+  39,9,195,136,110,183,251,138,202,28,4,214,22,19,200,89,146,208,100,7,33,4,181,106,141,44,203,25,31,31,35,46,
+  197,72,225,176,78,179,211,106,80,142,74,4,126,128,53,154,137,169,41,132,130,169,201,136,131,251,22,200,82,201,179,79,
+  159,69,103,57,247,221,119,148,185,133,159,231,133,211,143,227,132,36,85,26,1,36,73,242,202,239,191,75,132,206,83,164,
+  24,86,183,214,241,157,0,235,240,252,16,148,96,164,28,226,17,146,181,13,58,213,244,58,29,226,32,160,213,106,146,166,
+  41,165,94,137,76,103,88,44,113,24,80,45,141,16,71,117,118,205,206,50,58,91,67,247,183,49,82,32,156,34,8,66,
+  162,169,113,225,214,215,69,34,165,192,14,71,16,135,4,52,68,209,60,29,144,75,31,216,11,140,23,167,234,126,8,234,
+  223,12,134,159,75,224,54,192,104,208,17,216,117,80,83,66,212,183,157,219,19,192,108,9,102,29,28,234,195,177,203,176,
+  248,25,231,38,115,44,146,162,250,81,74,49,49,49,65,154,166,228,121,142,181,208,235,246,72,242,12,223,243,200,179,46,
+  253,110,74,171,212,33,10,183,185,117,243,22,190,239,227,251,62,113,92,98,116,108,132,133,185,57,234,181,58,155,91,107,
+  204,206,142,112,248,224,62,230,231,75,52,183,55,184,118,169,199,72,117,146,227,199,15,82,29,243,216,189,56,202,169,251,
+  30,225,107,79,63,131,31,22,39,89,189,94,239,149,247,92,88,108,0,72,20,2,157,102,120,126,0,14,242,44,67,42,
+  133,116,146,241,145,17,118,207,237,197,89,139,201,52,82,120,40,165,216,181,107,154,241,137,9,132,242,176,194,81,41,133,
+  72,25,163,115,88,222,218,192,184,62,218,43,92,151,60,167,88,156,159,231,214,160,240,169,84,171,194,53,155,195,133,55,
+  36,160,97,181,3,133,26,126,180,56,30,142,238,133,154,129,81,11,147,41,212,227,193,103,101,192,106,232,118,97,219,66,
+  170,160,228,57,119,208,194,67,43,112,20,41,199,111,213,170,187,26,39,79,142,239,126,251,59,188,195,205,166,252,242,239,
+  253,139,65,165,99,233,118,187,56,231,136,227,152,169,169,105,70,71,198,169,86,43,180,90,109,182,54,55,201,210,28,165,
+  36,198,88,38,38,38,25,31,31,71,8,193,216,232,56,165,82,137,145,209,58,66,8,210,44,195,152,140,118,103,155,61,
+  123,223,74,175,189,77,210,117,28,62,186,64,165,86,193,201,140,92,167,148,234,227,156,58,245,16,143,62,246,85,124,79,
+  210,75,122,56,91,88,108,216,111,138,98,86,8,164,149,248,161,95,24,145,57,135,181,14,207,8,154,107,155,244,194,62,
+  211,115,62,115,51,187,144,82,226,43,69,16,248,148,43,101,164,82,224,64,105,200,123,25,81,92,194,23,10,229,2,164,
+  243,9,188,24,145,129,240,4,183,175,95,38,105,236,184,0,108,144,36,246,16,223,16,1,15,49,36,160,55,20,238,78,
+  50,123,192,75,224,111,195,136,15,115,33,44,90,88,20,176,96,96,174,11,99,41,120,10,80,96,21,180,125,216,12,5,
+  105,28,69,229,164,159,204,239,204,206,28,204,254,171,159,155,147,11,123,228,76,125,130,189,229,50,89,175,203,187,75,49,
+  31,255,216,199,217,222,217,65,74,133,49,150,110,183,83,184,4,58,75,158,231,248,254,60,167,30,58,69,165,92,45,44,
+  44,40,230,112,188,193,132,178,214,26,157,21,196,36,164,194,247,124,114,33,209,54,225,220,185,11,28,63,190,159,131,139,
+  123,153,158,142,192,43,38,108,180,201,10,159,103,107,185,255,161,147,148,75,1,137,205,209,90,23,91,75,99,64,12,200,
+  71,41,180,115,168,200,43,172,93,179,194,55,8,41,200,76,142,31,68,196,165,128,208,247,233,247,250,196,97,132,147,10,
+  223,47,114,226,115,173,9,130,8,63,10,81,190,135,23,23,199,249,189,180,79,175,101,72,147,46,43,55,110,112,231,153,
+  103,89,253,253,63,104,237,190,179,114,221,192,182,78,83,253,171,195,101,56,36,160,55,114,229,51,11,226,131,80,217,130,
+  61,62,220,39,225,254,46,28,219,169,148,23,178,67,123,199,163,251,78,148,107,71,78,4,37,63,166,84,46,145,246,58,
+  180,87,238,216,213,149,101,221,104,181,92,98,80,87,111,222,82,135,222,247,62,239,248,219,222,33,150,87,183,105,111,236,
+  208,189,122,19,155,167,228,121,70,28,149,193,53,6,149,5,24,171,139,74,8,65,224,71,92,191,126,157,213,149,85,14,
+  29,60,196,209,163,71,41,87,202,164,105,97,155,161,117,142,231,121,248,129,196,247,138,35,115,132,67,121,1,121,98,232,
+  39,9,207,60,119,150,253,123,23,8,60,176,178,136,242,81,158,194,232,156,76,119,57,118,124,15,19,83,35,92,188,118,
+  3,103,45,131,248,46,148,87,84,65,74,41,100,16,98,125,15,145,101,28,83,158,59,172,84,190,183,84,182,143,26,237,
+  223,240,148,10,203,17,74,74,60,169,16,82,14,12,235,65,121,1,129,167,240,124,69,169,82,65,202,0,47,240,137,3,
+  159,180,159,240,167,159,254,18,219,43,55,104,127,245,139,122,241,241,39,239,236,109,182,159,5,254,204,193,21,32,29,97,
+  120,90,53,36,160,55,68,185,227,8,162,144,221,129,79,158,229,76,2,199,65,25,152,84,112,111,0,111,111,194,195,75,
+  243,147,71,43,63,243,51,19,199,62,248,99,222,222,147,135,9,203,21,154,205,14,237,141,6,59,155,29,182,219,93,58,
+  51,123,81,38,15,246,197,37,158,126,242,41,174,108,231,196,205,62,222,197,139,120,94,21,163,193,58,133,242,3,74,149,
+  18,83,227,19,220,188,121,3,161,36,32,145,72,148,80,69,206,86,210,197,26,135,53,134,75,151,47,210,238,180,216,189,
+  123,55,51,51,51,175,24,201,131,64,9,137,177,57,18,133,117,96,140,35,240,67,242,76,115,229,210,45,110,222,92,230,
+  208,225,5,64,224,164,196,57,81,168,218,173,101,116,162,194,193,67,123,57,127,249,26,129,167,200,180,198,9,65,113,16,
+  47,113,210,99,26,120,176,215,79,222,150,235,205,195,206,173,214,178,180,17,109,111,143,236,175,215,247,255,47,229,242,88,
+  224,251,228,14,82,163,137,131,10,202,247,17,74,81,169,214,112,56,2,79,17,74,69,88,170,224,132,38,105,174,177,249,
+  242,6,249,205,149,124,242,210,153,237,61,27,203,87,74,198,60,101,225,177,28,94,168,192,74,2,230,129,225,202,28,18,
+  208,27,130,127,146,132,99,15,156,100,233,63,123,23,55,63,243,103,92,6,21,192,116,14,143,4,240,254,51,146,71,58,
+  31,120,239,222,247,127,244,127,8,14,221,123,47,141,173,45,46,157,187,204,213,203,55,105,108,247,72,181,33,213,144,234,
+  62,89,102,168,84,66,46,95,188,204,167,62,249,71,244,186,9,187,23,231,241,164,34,112,32,68,76,238,43,82,154,8,
+  153,48,59,51,70,240,66,128,243,4,185,51,4,25,72,2,82,211,39,239,25,98,47,194,218,20,227,52,102,217,176,181,
+  189,77,179,217,100,110,110,142,122,189,142,239,251,72,63,196,106,31,163,53,224,240,132,197,104,141,211,150,220,120,156,63,
+  127,135,253,7,23,17,50,47,230,145,133,4,5,78,88,188,48,228,240,225,227,216,79,125,1,35,61,82,37,177,18,170,
+  6,142,89,97,223,150,233,230,3,253,254,157,133,60,187,162,224,98,238,220,149,20,26,26,246,239,233,245,126,236,17,193,
+  67,87,54,55,162,242,174,24,105,37,189,230,54,196,49,165,145,81,68,183,139,236,103,208,107,131,238,89,215,221,209,213,
+  205,181,254,194,214,102,123,180,211,109,84,90,173,59,10,46,89,56,173,225,180,129,107,93,104,229,96,134,42,248,33,1,
+  253,224,117,138,95,243,235,29,202,247,249,92,24,112,95,241,63,117,3,15,89,248,169,143,73,222,51,246,119,126,105,242,
+  239,255,227,223,164,219,94,231,11,159,253,20,55,110,238,208,110,129,192,129,44,178,176,76,174,89,95,95,35,138,74,108,
+  110,44,243,248,227,143,209,235,167,56,41,217,105,117,200,115,69,224,28,34,239,80,246,60,2,127,140,52,239,179,231,224,
+  49,68,240,53,210,212,224,2,129,81,6,231,122,88,13,89,174,49,174,77,20,248,104,13,89,154,211,15,19,148,148,180,
+  90,45,198,199,199,25,31,31,167,62,50,74,28,151,17,66,160,117,142,186,187,205,234,91,148,15,75,55,111,209,108,118,
+  168,215,67,44,22,196,55,196,165,8,193,201,55,221,67,232,41,166,149,112,187,16,118,183,148,233,35,90,111,28,205,147,
+  235,37,99,46,230,112,33,131,139,22,150,20,108,196,144,165,112,201,215,58,255,112,171,125,167,215,237,207,245,183,215,199,
+  76,24,134,185,16,194,58,135,148,210,73,132,8,172,37,74,211,60,72,211,166,103,244,154,7,235,2,86,44,172,89,184,
+  237,224,102,14,203,211,176,179,1,217,39,128,95,228,91,199,25,134,24,18,208,255,175,33,74,175,207,182,92,4,62,171,
+  183,111,243,123,79,61,207,63,128,192,135,125,62,188,235,179,240,246,234,223,251,149,201,127,240,27,191,202,141,171,215,248,
+  202,87,94,164,223,55,40,95,96,85,134,115,18,97,171,24,151,147,230,109,234,213,10,198,88,46,156,63,67,171,221,64,
+  170,8,139,230,250,205,37,238,187,255,17,212,104,153,40,48,4,34,197,237,180,8,101,64,109,126,150,127,244,143,254,59,
+  158,121,254,12,159,250,211,79,225,2,1,58,71,80,38,10,21,34,75,200,50,131,211,125,4,105,97,16,102,52,173,86,
+  139,157,157,29,58,157,14,225,218,26,181,106,157,90,181,74,185,92,70,122,10,43,0,89,184,43,110,108,111,177,190,182,
+  201,216,216,158,226,116,203,13,196,163,88,208,154,197,253,251,248,201,35,135,242,159,184,177,212,155,108,119,151,125,99,206,
+  225,220,121,13,47,167,112,217,192,114,79,136,102,197,247,147,11,158,111,30,74,250,108,88,123,117,196,185,158,112,238,217,
+  178,205,166,43,121,54,37,122,189,210,160,133,228,238,222,23,92,209,208,207,5,108,3,171,6,182,51,104,4,208,201,161,
+  215,133,254,4,216,125,224,250,3,226,17,195,222,207,144,128,126,160,8,40,42,189,190,31,32,235,4,255,242,119,249,123,
+  183,151,69,6,19,62,220,127,11,30,156,248,200,223,156,254,165,223,252,135,60,245,245,103,121,233,165,203,116,123,25,16,
+  162,240,16,50,68,231,25,142,46,97,232,97,173,67,9,201,157,59,183,232,118,59,100,38,67,170,0,33,12,155,55,175,
+  163,154,219,16,180,192,53,168,69,41,39,142,204,51,191,231,0,99,115,135,136,199,39,105,172,174,242,147,63,185,204,51,
+  103,95,194,151,96,16,56,151,83,169,84,49,214,145,155,188,232,7,89,203,206,206,78,49,115,99,12,198,24,194,32,228,
+  70,118,3,107,45,227,227,227,76,79,79,179,123,247,110,194,40,34,205,50,250,73,206,202,234,38,135,143,238,25,76,88,
+  187,66,115,38,36,96,217,53,62,198,125,202,211,83,141,237,29,7,143,167,240,105,13,23,34,216,172,67,247,113,200,43,
+  74,33,222,249,30,236,252,110,158,250,250,99,212,94,62,223,115,112,195,193,173,42,132,14,162,154,84,190,21,66,8,163,
+  95,225,15,1,244,193,88,72,51,72,98,208,135,193,252,11,112,15,243,141,184,35,201,55,38,159,135,228,51,36,160,31,
+  44,200,215,227,242,235,179,178,118,147,223,252,151,255,154,143,64,148,192,225,28,30,217,60,116,226,224,207,253,198,175,169,
+  39,190,246,36,79,62,113,13,99,115,60,15,132,208,88,171,112,70,32,148,68,121,61,44,22,129,160,219,233,210,106,183,
+  104,236,52,0,131,167,124,156,235,48,26,231,132,233,69,222,60,57,202,190,153,128,241,218,24,206,131,157,214,13,46,175,
+  53,104,232,29,30,126,211,65,254,218,143,190,135,231,94,58,143,47,125,172,211,72,207,32,125,159,192,243,169,40,0,73,
+  224,135,180,90,173,87,44,82,181,214,68,81,52,240,232,129,181,181,53,54,54,54,72,210,148,137,201,73,162,40,6,33,
+  88,91,109,96,173,3,103,80,210,199,57,112,206,98,141,198,143,61,250,187,38,252,68,200,173,192,217,23,36,60,51,15,
+  107,255,70,74,247,246,19,111,102,227,194,75,200,44,163,49,62,65,82,171,211,154,156,98,230,229,243,220,4,115,13,204,
+  135,32,107,67,251,183,172,161,193,55,220,32,7,213,15,191,9,116,129,167,129,69,224,71,128,165,193,247,97,94,251,144,
+  128,126,240,241,75,31,121,29,87,217,99,102,117,157,95,185,179,194,29,24,173,194,61,107,130,19,39,63,250,235,99,171,
+  235,91,156,63,123,155,94,218,163,20,71,248,170,168,180,172,203,208,166,141,18,10,167,61,228,192,21,48,73,50,218,221,
+  30,105,102,200,116,70,73,194,104,181,198,63,252,200,125,188,247,68,149,216,211,108,172,246,249,202,217,62,59,193,4,170,
+  94,193,90,203,243,47,60,198,98,188,195,91,222,188,143,145,145,17,250,205,62,82,21,199,234,89,174,169,214,106,72,9,
+  158,244,81,202,43,60,155,141,161,84,46,83,169,86,201,178,194,203,89,12,254,85,171,85,60,63,32,207,53,206,245,9,
+  188,136,173,237,54,105,146,17,132,114,64,62,174,16,171,90,240,163,0,87,45,75,131,107,201,162,55,211,254,223,193,157,
+  149,146,131,135,142,32,174,188,12,89,134,52,6,97,12,106,144,29,47,191,169,202,113,20,105,33,235,223,230,18,255,253,
+  193,115,135,194,138,33,1,253,112,226,247,254,245,235,122,121,90,220,161,131,16,22,82,184,71,189,255,253,187,71,238,63,
+  36,31,251,15,143,210,235,121,120,94,136,39,61,28,26,156,5,103,17,214,67,103,96,156,198,247,36,78,56,180,161,232,
+  215,72,69,20,251,216,118,198,252,212,40,15,28,153,227,230,245,13,158,191,154,144,149,246,50,119,244,65,14,223,115,148,
+  201,93,19,40,4,43,43,151,184,126,229,22,15,190,243,4,123,15,236,225,236,51,103,65,130,176,30,54,203,6,166,96,
+  150,192,131,206,118,131,44,203,16,66,20,67,130,90,227,28,248,97,80,36,150,122,133,29,71,165,82,193,247,124,156,133,
+  208,143,104,182,123,36,105,70,169,84,193,9,133,47,60,172,21,24,157,162,100,64,85,6,22,231,114,1,89,2,246,143,
+  40,28,29,255,122,145,4,246,231,178,45,26,138,75,135,4,244,67,137,207,190,206,215,59,160,4,245,16,142,174,195,137,
+  221,63,255,145,145,243,23,174,176,182,182,142,241,71,16,66,33,149,162,82,138,241,148,44,242,175,140,64,27,75,175,155,
+  146,154,46,73,218,167,221,237,98,17,56,1,163,99,227,32,2,116,154,16,171,132,229,118,74,26,31,225,3,127,243,151,
+  153,152,170,145,247,91,172,173,109,114,230,250,50,141,164,204,198,250,50,129,159,115,242,205,39,120,230,241,39,9,85,5,
+  157,75,172,72,104,54,27,4,65,72,71,119,208,218,226,73,133,239,251,84,42,85,148,146,148,203,17,189,94,15,207,243,
+  8,195,152,153,153,57,42,229,10,121,166,65,129,182,119,27,207,170,16,183,74,139,115,2,41,68,161,118,247,21,42,146,
+  78,64,238,64,43,112,31,2,82,99,153,121,246,73,110,165,9,211,98,72,31,67,2,26,226,219,226,208,235,40,239,5,
+  144,129,216,134,154,133,197,246,145,195,123,153,159,147,207,127,246,243,100,198,225,185,14,190,95,71,201,136,114,80,101,106,
+  87,141,133,221,147,84,106,33,89,63,163,185,222,226,233,211,231,232,119,83,180,211,168,80,129,113,84,188,93,152,216,177,
+  222,91,166,35,160,62,86,97,178,60,143,114,25,79,61,253,12,91,43,13,178,84,210,74,250,84,203,147,92,93,185,68,
+  111,189,203,123,31,184,151,127,229,123,224,4,78,40,180,215,67,153,14,42,23,244,122,61,130,32,68,72,69,181,90,29,
+  28,187,27,164,204,240,60,143,192,47,51,55,187,155,122,173,74,150,247,7,114,10,31,129,193,23,6,231,2,140,5,165,
+  114,44,2,105,65,24,131,72,19,166,186,253,60,42,52,108,205,25,48,255,19,69,143,40,185,126,153,7,128,138,148,124,
+  42,8,96,72,68,67,2,26,226,91,209,150,30,145,213,175,137,132,4,133,133,170,145,66,9,235,194,185,201,73,121,249,
+  226,101,218,237,30,113,20,160,164,135,179,41,190,215,231,192,161,69,142,31,219,207,200,120,25,235,108,145,242,112,104,158,
+  202,68,137,63,250,227,47,83,142,74,96,53,213,74,181,176,39,45,89,214,150,187,108,54,20,123,38,234,92,249,234,139,
+  180,31,155,165,39,186,132,186,77,144,135,104,171,241,71,3,150,238,40,206,45,189,192,209,153,58,227,19,85,150,119,114,
+  202,153,198,225,145,43,3,54,37,8,2,106,181,26,97,24,99,140,193,247,139,192,192,66,51,22,16,199,49,99,99,99,
+  120,158,79,174,19,242,92,35,16,228,66,17,87,71,40,197,37,148,76,144,194,34,40,60,125,208,22,157,58,242,141,173,
+  84,194,70,10,59,189,66,209,143,30,92,159,10,69,21,53,255,212,19,44,191,239,175,146,6,193,240,164,106,72,64,67,
+  220,197,71,103,142,243,179,27,151,25,207,122,175,105,128,45,7,234,8,36,14,175,211,211,87,94,190,140,242,60,156,53,
+  88,28,81,232,113,207,241,67,156,122,232,40,82,229,8,50,24,52,114,51,221,231,240,161,93,28,59,184,200,234,202,50,
+  165,56,160,94,171,162,148,32,247,12,73,174,185,178,180,197,131,239,62,73,125,116,25,151,165,140,150,43,180,123,29,124,
+  153,178,103,102,140,23,47,95,66,101,227,184,102,29,229,239,112,96,62,230,246,198,38,130,26,46,47,99,92,15,200,145,
+  210,209,233,116,169,84,106,232,220,144,231,57,165,82,209,24,15,195,136,133,133,57,170,213,50,89,150,98,29,88,235,8,
+  67,137,231,251,76,78,77,17,4,62,66,244,193,89,156,182,197,73,158,12,57,119,254,69,154,171,171,122,15,244,203,144,
+  254,54,216,63,248,118,100,125,229,18,251,148,226,64,171,201,189,195,101,55,36,160,33,6,8,74,188,48,58,207,149,181,
+  75,223,119,163,51,5,126,6,152,118,206,51,16,172,151,170,126,203,130,176,22,169,20,2,69,28,150,89,92,88,196,147,
+  138,60,239,35,144,40,21,35,164,35,211,41,130,156,131,251,23,248,202,87,193,87,18,223,243,208,38,35,55,61,146,212,
+  240,153,39,110,241,115,63,254,22,222,245,224,28,143,95,110,211,82,146,204,102,216,238,37,222,250,222,15,178,123,254,24,
+  51,174,71,232,174,225,162,113,142,239,61,193,19,79,223,194,85,115,112,10,165,21,8,131,82,138,56,138,209,185,70,8,
+  73,28,199,4,65,64,28,151,168,86,107,212,106,181,65,83,218,97,140,197,243,124,162,40,70,231,25,83,211,35,8,101,
+  192,88,76,63,3,17,129,11,56,123,238,34,127,252,241,63,230,100,179,149,0,125,3,250,167,129,3,128,255,31,53,203,
+  28,189,151,207,51,201,127,156,121,54,196,144,128,222,176,240,157,229,98,105,148,207,188,198,215,63,2,226,158,194,178,198,
+  107,132,161,159,106,13,121,70,218,207,81,194,35,80,62,206,88,176,14,233,192,100,6,252,194,172,171,72,123,176,108,53,
+  54,177,54,71,56,65,154,100,180,123,13,182,183,54,8,163,18,207,157,89,225,242,218,14,71,78,236,99,185,213,97,114,
+  143,100,241,222,119,176,122,166,194,242,165,47,242,230,135,238,33,223,184,205,234,166,225,143,255,244,28,159,127,236,121,202,
+  126,133,220,119,8,145,160,80,4,65,9,223,247,9,163,176,120,207,190,55,248,30,16,69,37,198,199,39,8,163,0,173,
+  53,214,25,148,44,30,215,58,103,98,178,198,225,67,243,96,179,226,125,8,159,44,151,156,62,125,142,47,125,245,113,242,
+  181,6,211,189,254,182,133,13,160,87,5,222,253,29,8,70,80,184,63,150,135,203,110,72,64,67,20,208,206,176,55,30,
+  99,79,101,130,165,206,230,247,253,122,67,49,16,103,64,110,6,177,111,173,5,147,145,166,9,158,12,105,119,119,184,185,
+  124,131,197,197,147,56,99,16,202,2,41,166,216,231,208,234,102,188,248,210,121,12,154,94,191,152,201,105,181,154,228,185,
+  197,154,156,181,141,156,63,250,183,79,242,235,127,171,205,59,102,203,4,113,139,252,230,13,246,250,9,155,145,229,147,159,
+  252,18,95,127,106,155,11,75,61,158,56,127,150,70,99,135,48,10,144,89,140,144,2,233,65,24,132,32,10,151,194,32,
+  14,176,214,81,42,69,212,235,35,76,78,78,83,173,86,48,38,35,203,82,130,32,66,160,240,124,31,107,53,7,22,23,
+  152,26,175,14,124,131,34,214,55,119,120,241,197,23,120,252,107,95,39,40,133,252,149,83,15,57,62,247,39,77,7,155,
+  10,146,79,83,196,75,203,87,185,102,18,24,3,194,225,242,27,18,208,27,29,119,239,212,247,141,237,125,77,4,212,150,
+  66,72,207,19,46,203,197,213,141,77,185,92,190,78,144,118,209,14,202,229,49,114,157,240,252,139,167,57,126,104,31,147,
+  99,37,12,125,4,6,97,4,206,40,190,254,245,115,92,190,118,131,219,43,183,105,52,91,108,109,55,232,180,91,8,2,
+  156,53,136,32,231,183,63,251,20,126,205,240,142,251,247,145,52,250,60,250,244,10,103,111,238,32,130,58,126,181,66,101,
+  98,23,227,251,29,51,59,107,52,90,25,125,155,225,153,140,216,31,108,245,242,140,177,209,113,2,63,196,31,196,221,140,
+  140,140,50,54,54,70,20,21,113,58,214,25,60,95,146,101,41,190,23,99,173,102,100,180,206,187,222,241,118,60,20,91,
+  141,38,75,183,87,57,247,242,117,158,121,246,52,229,146,207,135,62,252,55,184,244,135,31,179,94,150,165,2,210,14,152,
+  127,69,49,3,244,221,16,1,31,102,56,205,60,36,160,55,56,4,144,59,195,92,121,244,53,85,65,117,235,156,201,114,
+  235,131,243,251,61,179,182,182,78,217,246,201,140,99,107,171,205,158,189,123,184,112,225,26,159,253,220,151,248,233,159,248,
+  81,170,181,10,189,78,151,141,141,109,158,127,238,28,159,249,179,175,113,107,229,14,107,27,183,89,91,109,97,140,69,72,
+  137,213,2,132,69,90,65,187,175,248,39,255,215,83,252,206,39,47,209,111,182,89,152,223,195,254,163,199,40,141,132,220,
+  92,90,162,183,233,216,53,61,195,177,197,7,89,187,149,176,153,172,128,167,208,46,67,106,139,26,184,31,214,106,117,162,
+  40,38,12,66,198,199,199,41,151,43,120,202,199,216,188,200,228,114,142,48,12,177,6,42,149,42,239,127,255,251,201,211,
+  148,39,191,118,158,229,149,117,94,190,188,196,205,213,6,251,14,237,227,167,254,243,247,49,187,48,198,153,141,85,83,118,
+  100,14,242,17,112,255,61,133,116,226,187,85,64,171,131,94,208,80,185,62,36,160,33,28,56,241,218,171,160,65,126,151,
+  213,155,183,76,143,24,191,18,211,75,183,72,251,45,148,39,152,156,28,231,209,199,30,231,197,179,103,88,152,159,195,88,
+  199,141,155,183,89,89,91,163,213,110,115,231,206,29,26,141,6,157,78,7,59,176,50,13,35,133,144,30,253,110,15,207,
+  179,24,171,216,218,106,33,149,32,26,169,241,210,153,23,185,179,124,7,173,29,199,143,159,96,114,98,158,218,68,153,217,
+  221,19,108,159,93,69,249,22,141,69,225,35,132,71,28,151,136,162,136,145,122,141,106,165,78,41,174,32,133,135,0,66,
+  63,160,223,55,132,97,136,195,17,197,30,71,14,29,100,109,121,153,23,159,221,102,117,117,149,102,227,38,211,149,113,254,
+  202,187,223,197,125,111,59,202,254,185,17,154,253,148,222,157,213,108,10,183,165,97,167,14,230,191,230,123,107,48,219,193,
+  86,109,133,225,148,243,144,128,134,64,91,195,76,121,148,71,38,247,115,102,227,234,171,222,193,239,162,75,113,218,35,192,
+  74,208,213,118,91,175,244,175,194,238,41,106,35,37,180,150,108,110,110,209,237,182,153,155,153,97,103,167,193,213,107,87,
+  11,77,86,146,113,103,101,149,126,210,39,75,83,180,214,133,68,98,16,103,227,7,1,8,247,74,198,151,64,32,85,113,
+  124,255,252,115,207,17,4,1,74,42,74,213,152,245,245,117,54,183,182,152,155,157,225,200,145,35,220,190,125,155,86,171,
+  53,168,164,44,190,231,177,111,223,62,74,113,76,20,132,248,42,0,109,169,148,35,74,213,18,142,194,204,222,58,135,242,
+  37,83,19,147,52,26,219,92,188,116,145,94,179,195,228,216,24,111,122,211,73,14,29,63,192,209,147,71,168,151,75,144,
+  229,228,105,134,235,119,50,96,83,194,78,0,38,227,123,27,236,20,131,30,208,20,176,54,92,176,67,2,26,2,180,115,
+  220,63,50,207,135,118,150,17,121,255,187,222,201,45,80,5,215,131,36,130,230,92,24,245,140,203,217,106,111,178,211,131,
+  188,229,33,21,212,70,98,110,175,88,202,113,17,63,188,177,177,78,179,221,38,73,179,194,28,62,207,49,198,224,156,195,
+  243,60,162,40,34,240,125,210,44,41,102,114,156,0,44,14,144,74,18,122,17,224,176,214,96,172,161,84,142,73,146,62,
+  253,126,194,216,232,4,15,191,245,17,190,252,229,175,208,75,250,68,129,79,173,82,163,215,233,161,211,156,190,239,83,171,
+  86,193,194,86,150,97,221,24,86,138,66,32,170,36,129,10,216,220,220,66,231,154,90,173,198,248,200,24,7,247,204,114,
+  228,196,62,118,31,95,68,8,135,236,39,133,177,124,150,35,114,99,92,97,149,145,255,83,176,191,13,196,223,207,53,167,
+  80,185,247,134,203,111,72,64,111,248,126,144,179,180,252,144,237,209,5,126,118,253,210,119,37,32,1,164,224,214,161,99,
+  97,61,180,174,147,27,77,214,234,99,243,12,151,6,8,37,72,117,200,214,214,22,58,47,140,224,173,45,146,33,140,27,
+  164,82,72,31,165,160,84,42,17,197,49,74,41,90,173,29,250,73,31,107,45,82,202,226,53,20,61,154,48,12,105,53,
+  119,144,82,146,235,156,102,163,133,153,53,248,190,143,231,121,204,207,47,176,127,255,126,110,221,188,197,161,195,135,11,31,
+  232,48,26,228,128,5,148,75,49,149,114,25,37,20,81,169,140,23,12,166,118,132,32,215,57,253,94,239,149,252,46,229,
+  251,220,243,192,125,28,56,92,39,205,83,252,220,71,56,139,139,28,237,126,15,63,147,133,64,30,92,62,184,46,253,239,
+  243,186,95,26,46,189,33,1,13,81,64,89,67,119,100,134,79,55,151,185,152,118,94,245,148,198,0,19,192,143,66,106,
+  160,61,233,92,111,97,124,146,43,171,55,9,125,129,13,44,214,64,183,219,5,1,149,82,25,231,138,237,158,213,182,72,
+  14,117,16,199,17,97,24,146,231,57,253,126,31,173,53,89,158,14,162,142,93,33,6,149,30,142,194,72,172,215,235,97,
+  29,8,91,184,19,250,158,143,148,146,36,73,104,54,155,128,96,223,226,62,78,61,120,10,223,247,209,86,147,231,154,36,
+  77,17,206,20,166,241,82,18,148,98,130,48,192,243,10,2,202,117,142,195,225,251,62,130,66,49,47,156,164,159,228,128,
+  195,211,57,82,75,50,15,124,17,177,121,233,26,193,173,149,190,131,158,6,243,87,129,105,190,255,44,174,187,150,28,191,
+  51,232,9,13,49,36,160,55,46,1,57,199,154,10,185,49,115,148,201,27,207,188,106,63,227,110,254,87,12,166,11,201,
+  136,54,253,227,243,115,110,105,107,83,88,157,0,69,76,177,67,22,238,126,73,70,24,68,248,94,128,117,22,207,83,8,
+  100,97,113,234,28,217,192,62,35,205,138,78,138,214,69,190,123,81,156,200,65,85,82,228,122,149,226,26,221,110,151,90,
+  173,198,236,204,44,35,35,163,120,158,95,228,171,87,171,56,99,144,82,208,107,119,48,206,21,141,114,229,21,57,91,65,
+  132,19,18,173,13,46,24,100,121,13,72,64,73,137,118,20,118,28,56,242,164,199,250,237,219,184,227,51,8,153,162,189,
+  132,160,84,231,198,229,43,172,254,246,239,247,38,175,93,61,99,224,106,94,84,129,188,214,52,10,31,248,101,224,183,248,
+  222,142,241,135,24,18,208,15,45,164,213,148,227,17,62,84,153,228,129,206,198,119,125,254,121,208,109,216,246,250,189,141,
+  55,151,131,188,245,35,111,15,190,252,165,47,225,97,145,24,156,28,156,147,185,98,186,56,8,130,34,59,29,135,20,96,
+  156,165,215,110,99,181,65,15,178,213,7,188,131,148,2,73,17,117,46,165,71,28,197,120,94,192,248,248,36,211,187,118,
+  177,184,103,145,106,173,74,28,71,228,70,147,38,9,206,90,130,48,64,122,62,141,78,151,181,149,85,70,171,53,198,198,
+  199,169,212,234,120,190,87,152,207,75,85,228,120,41,129,16,2,147,229,131,0,67,135,144,5,225,41,223,103,121,109,21,
+  157,38,248,165,0,43,224,153,207,127,145,139,191,250,209,230,220,153,243,79,1,159,13,224,89,160,125,138,215,55,229,252,
+  163,192,28,240,145,225,18,28,18,208,27,186,23,52,168,110,62,62,190,135,127,223,217,224,213,82,198,51,224,199,32,159,
+  133,213,28,174,30,184,117,103,123,249,173,239,216,181,118,239,253,92,60,127,6,169,187,8,43,144,74,34,165,122,133,124,
+  172,213,3,55,68,65,158,166,224,28,218,232,34,81,75,74,140,45,26,195,175,40,207,157,96,126,126,158,125,251,15,48,
+  57,53,205,232,232,24,113,24,163,60,143,164,159,144,101,26,135,165,86,175,129,20,116,27,219,52,207,158,177,245,151,47,
+  232,122,187,205,246,169,183,121,106,106,90,226,64,56,1,6,226,56,36,14,35,180,213,131,30,147,64,121,170,56,113,19,
+  18,103,45,206,15,176,113,136,240,28,55,207,94,224,201,223,255,152,238,254,223,255,110,101,177,217,121,86,194,159,120,240,
+  165,18,220,250,29,200,99,160,198,107,183,55,137,40,172,87,135,24,18,208,112,43,102,13,155,165,81,110,76,29,224,193,
+  245,43,40,190,253,124,75,6,204,20,237,160,181,12,206,238,186,113,237,202,200,129,197,169,83,15,63,40,199,106,37,46,
+  157,62,77,171,213,66,10,65,185,84,166,90,175,131,128,78,167,69,174,51,148,49,248,214,129,47,65,72,242,60,43,42,
+  16,107,200,179,12,68,153,61,187,15,240,240,155,223,204,222,61,11,88,9,61,155,163,60,15,172,165,151,116,169,142,84,
+  9,2,159,78,179,73,114,237,101,166,175,93,237,239,191,116,121,115,87,171,181,58,225,156,150,48,243,137,222,214,252,86,
+  104,101,28,9,130,48,64,57,137,22,142,204,104,140,209,24,35,193,249,4,94,72,106,83,148,7,81,57,70,167,9,165,
+  235,55,220,215,255,155,207,247,150,63,241,137,173,250,230,246,245,89,120,30,120,76,195,243,22,86,62,10,217,39,135,75,
+  102,136,33,1,253,249,193,1,129,53,28,157,56,192,223,238,53,57,248,42,91,177,12,120,17,90,192,185,32,201,158,59,
+  113,230,194,190,47,76,239,157,61,114,252,30,118,239,154,225,133,211,47,176,116,115,169,200,80,239,52,177,198,224,156,69,
+  231,57,218,128,239,135,4,202,199,26,73,166,29,58,207,41,197,101,14,239,187,135,99,71,143,113,248,240,65,194,48,164,
+  211,238,224,210,28,101,12,81,217,71,196,33,213,168,130,202,53,205,103,158,118,19,47,189,212,222,187,124,123,121,38,77,
+  46,120,112,94,195,245,4,144,112,106,223,203,23,223,219,169,141,237,73,246,29,19,65,77,225,252,16,89,13,113,78,160,
+  6,65,131,214,9,116,214,39,72,122,148,117,134,60,123,75,215,158,125,170,25,94,187,182,154,102,217,149,121,56,235,224,
+  124,14,23,114,184,49,2,173,223,2,51,36,159,33,134,4,244,250,118,92,238,59,61,208,119,134,127,55,177,200,111,188,
+  10,1,5,69,21,148,95,133,27,26,158,88,88,186,113,240,216,153,211,245,211,39,223,84,246,75,1,15,63,242,86,22,
+  118,47,176,178,186,70,191,215,67,8,65,191,223,163,223,235,97,133,71,169,82,67,73,1,90,83,158,171,48,63,191,192,
+  145,35,71,153,158,222,5,194,144,244,59,244,186,93,132,148,152,80,225,171,128,40,12,72,218,93,242,243,215,221,244,11,
+  207,108,159,188,117,243,70,93,235,139,14,94,178,240,146,129,107,1,108,38,224,57,88,58,218,106,53,103,190,252,232,91,
+  239,60,245,244,108,30,70,126,88,42,17,150,203,104,157,129,49,88,231,112,206,162,180,182,113,158,217,82,146,228,81,187,
+  181,86,178,246,162,131,11,182,248,186,146,193,198,94,232,124,5,242,39,249,54,182,27,67,12,49,36,160,239,187,216,121,
+  213,7,79,116,183,190,235,15,89,0,82,216,185,3,207,9,152,185,247,185,167,107,237,170,255,192,141,125,135,35,95,120,
+  220,115,248,24,39,142,221,75,158,229,104,173,49,185,38,244,3,180,40,82,48,42,81,137,122,181,74,185,84,38,42,197,
+  244,147,132,84,247,49,182,56,202,15,189,128,220,106,188,56,198,96,216,57,119,134,125,47,157,110,237,191,181,116,173,154,
+  36,207,105,120,206,193,121,3,75,26,54,28,244,207,130,253,47,129,23,32,233,67,163,174,243,211,99,237,198,140,107,23,
+  39,229,118,160,130,184,27,6,248,205,217,90,6,50,1,43,6,174,8,184,133,16,59,35,74,245,207,104,109,223,9,156,
+  7,110,48,148,81,12,49,36,160,191,80,24,227,136,59,13,150,10,130,121,213,50,202,130,25,131,91,91,240,133,216,104,
+  255,109,95,121,204,69,205,238,125,183,79,190,165,98,29,120,198,17,120,1,97,84,122,101,32,209,15,36,206,228,131,19,
+  41,73,187,219,161,213,239,224,135,33,42,240,240,157,79,53,174,128,146,100,121,74,239,218,117,70,95,120,186,127,224,252,
+  217,165,201,110,247,37,11,79,25,120,38,134,43,171,208,168,64,58,3,238,14,112,109,240,119,37,208,156,135,179,55,225,
+  90,9,226,210,64,132,110,41,28,29,131,111,67,36,61,48,9,244,35,33,186,7,14,29,200,211,195,251,221,212,196,8,
+  75,95,250,26,246,250,173,225,194,24,98,72,64,127,225,228,99,29,251,234,17,215,30,121,136,23,146,14,82,124,103,133,
+  152,39,37,75,221,46,201,115,207,166,191,226,220,149,77,248,211,64,91,115,234,217,231,146,169,102,251,77,23,223,252,224,
+  164,155,157,23,65,232,147,27,141,118,14,43,101,17,113,227,10,162,19,18,148,23,225,5,138,32,80,68,113,132,148,18,
+  50,141,185,190,68,233,233,39,251,251,47,156,185,189,171,213,56,39,29,207,26,120,110,16,129,188,118,24,250,159,6,142,
+  81,72,27,238,18,138,1,38,129,189,144,158,133,116,22,26,255,219,128,120,74,158,98,97,116,140,155,141,6,169,214,175,
+  156,254,5,20,121,92,231,129,119,252,200,91,168,253,212,143,99,146,62,38,246,169,47,175,13,9,104,136,33,1,253,101,
+  32,183,150,15,28,159,231,161,125,179,69,64,240,171,118,146,4,120,30,239,217,217,225,127,190,114,57,249,187,112,169,15,
+  105,136,219,58,116,249,226,234,200,157,219,167,206,47,238,95,216,62,113,50,142,23,22,240,3,133,242,61,60,21,160,42,
+  101,132,44,68,167,65,224,19,122,30,158,16,36,157,54,237,75,231,92,240,228,83,189,189,55,174,223,158,236,118,206,75,
+  120,206,192,139,249,128,120,22,161,87,3,187,243,77,149,216,119,130,164,104,152,127,124,64,64,191,246,158,119,114,100,113,
+  47,255,227,255,249,251,223,242,188,24,248,111,7,63,75,249,62,86,128,233,37,72,5,54,207,135,219,174,33,134,4,244,
+  151,5,37,4,89,154,146,234,239,238,92,83,141,34,170,74,241,135,192,12,36,31,129,171,13,104,229,176,58,213,235,222,
+  24,63,247,210,253,203,183,150,14,95,157,157,223,149,238,222,29,245,162,72,154,56,22,34,12,113,206,81,169,85,104,182,
+  90,168,141,117,29,111,108,234,218,198,122,251,158,181,181,149,145,52,189,12,60,111,224,197,92,138,75,210,186,85,191,176,
+  63,181,21,10,85,249,119,83,239,127,59,210,24,13,124,198,148,122,245,215,56,203,43,83,145,67,12,49,36,160,191,92,
+  184,239,247,201,119,165,19,64,21,244,255,11,107,143,192,19,10,150,4,188,176,187,213,188,103,161,213,60,144,93,186,48,
+  154,64,156,249,126,77,123,94,221,89,43,124,104,187,60,111,199,90,247,98,104,43,88,6,174,89,196,229,28,119,57,129,
+  245,178,117,189,17,176,222,224,215,189,158,106,196,216,194,132,108,136,33,134,4,244,195,86,57,1,91,192,117,176,191,14,
+  173,231,161,155,192,178,134,211,22,166,34,107,43,1,132,54,77,71,101,154,78,57,80,18,54,44,108,73,72,53,244,50,
+  216,150,176,237,227,218,14,250,115,96,253,111,170,78,134,110,130,67,12,9,104,136,87,45,136,238,110,112,170,96,34,104,
+  93,131,206,12,220,186,13,106,18,68,25,162,118,209,118,17,9,244,125,72,19,48,62,216,147,160,159,6,171,129,121,94,
+  187,196,97,136,33,254,178,33,220,176,180,30,98,136,33,254,19,65,14,47,193,16,67,12,241,159,10,255,31,228,61,54,
+  41,71,79,28,213,0,0,0,0,73,69,78,68,174,66,96,130,
+};
+
+};
diff --git a/higan/target-loki/resource/resource.hpp b/higan/target-loki/resource/resource.hpp
new file mode 100644
index 0000000..a665316
--- /dev/null
+++ b/higan/target-loki/resource/resource.hpp
@@ -0,0 +1,3 @@
+namespace resource {
+  extern const uint8_t loki[121905];
+};
diff --git a/higan/target-loki/settings/settings.cpp b/higan/target-loki/settings/settings.cpp
new file mode 100644
index 0000000..f841b15
--- /dev/null
+++ b/higan/target-loki/settings/settings.cpp
@@ -0,0 +1,57 @@
+#include "../loki.hpp"
+unique_pointer<Settings> settings;
+
+Settings::Settings() {
+  settings = this;
+
+  video.append(video.driver = ruby::Video::optimalDriver(), "Driver");
+  video.append(video.synchronize = false, "Synchronize");
+  append(video, "Video");
+
+  audio.append(audio.driver = ruby::Audio::optimalDriver(), "Driver");
+  audio.append(audio.synchronize = true, "Synchronize");
+  audio.append(audio.mute = false, "Mute");
+  append(audio, "Audio");
+
+  input.append(input.driver = ruby::Input::optimalDriver(), "Driver");
+  append(input, "Input");
+
+  terminal.append(terminal.backgroundColor = 0x383838, "BackgroundColor");
+  terminal.append(terminal.foregroundColor = 0xffffff, "ForegroundColor");
+  append(terminal, "Terminal");
+
+  geometry.append(geometry.presentation = "", "Presentation");
+  geometry.append(geometry.terminal = "", "Terminal");
+  append(geometry, "Geometry");
+
+  load();
+}
+
+void Settings::load() {
+  Configuration::Document::load(locate("settings.bml"));
+  Configuration::Document::save(locate("settings.bml"));
+}
+
+void Settings::unload() {
+  //remember window geometry for next run
+  //geometry.presentation = presentation->geometry().text();
+  //geometry.terminal = ::terminal->geometry().text();
+
+  Configuration::Document::save(locate("settings.bml"));
+}
+
+void Settings::command(string s, lstring args) {
+  unsigned argc = args.size();
+  s.ltrim("settings.");
+
+  if(s == "video.driver" && argc == 1) { video.driver = args[0]; return; }
+  if(s == "video.synchronize" && argc == 1) { video.synchronize = args[0] != "false"; ::video->set(ruby::Video::Synchronize, video.synchronize); return; }
+  if(s == "audio.driver" && argc == 1) { audio.driver = args[0]; return; }
+  if(s == "audio.synchronize" && argc == 1) { audio.synchronize = args[0] != "false"; ::audio->set(ruby::Audio::Synchronize, audio.synchronize); return; }
+  if(s == "audio.mute" && argc == 1) { audio.mute = args[0] != "false"; return; }
+  if(s == "input.driver" && argc == 1) { input.driver = args[0]; return; }
+  //if(s == "terminal.background-color" && argc == 1) { terminal.backgroundColor = hex(args[0]); ::terminal->setColors(); return; }
+  //if(s == "terminal.foreground-color" && argc == 1) { terminal.foregroundColor = hex(args[0]); ::terminal->setColors(); return; }
+
+  echo("Error: unrecognized setting: ", s, "\n");
+}
diff --git a/higan/target-loki/settings/settings.hpp b/higan/target-loki/settings/settings.hpp
new file mode 100644
index 0000000..21acb57
--- /dev/null
+++ b/higan/target-loki/settings/settings.hpp
@@ -0,0 +1,34 @@
+struct Settings : Configuration::Document {
+  struct Video : Configuration::Node {
+    string driver;
+    bool synchronize;
+  } video;
+
+  struct Audio : Configuration::Node {
+    string driver;
+    bool synchronize;
+    bool mute;
+  } audio;
+
+  struct Input : Configuration::Node {
+    string driver;
+  } input;
+
+  struct Terminal : Configuration::Node {
+    unsigned backgroundColor;
+    unsigned foregroundColor;
+  } terminal;
+
+  struct Geometry : Configuration::Node {
+    string presentation;
+    string terminal;
+  } geometry;
+
+  Settings();
+  void load();
+  void unload();
+
+  void command(string s, lstring args);
+};
+
+extern unique_pointer<Settings> settings;
diff --git a/higan/target-loki/terminal/about-window.cpp b/higan/target-loki/terminal/about-window.cpp
new file mode 100644
index 0000000..d1c9430
--- /dev/null
+++ b/higan/target-loki/terminal/about-window.cpp
@@ -0,0 +1,18 @@
+unique_pointer<AboutWindow> aboutWindow;
+
+AboutWindow::AboutWindow() {
+  aboutWindow = this;
+
+  layout.setMargin(5);
+  canvas.setIcon({locate("loki.png")});
+  information.setFont(Font().setFamily(Font::Sans).setBold()).setAlignment(0.5).setText({
+    Emulator::Name, "/loki v", Emulator::Version, "\n\n"
+    "Author: ", Emulator::Author, "\n",
+    "License: ", Emulator::License, "\n",
+    "Website: ", Emulator::Website
+  });
+
+  setTitle("About loki ...");
+  setSize(layout.minimumSize());
+  setCentered();
+}
diff --git a/higan/target-loki/terminal/terminal.cpp b/higan/target-loki/terminal/terminal.cpp
new file mode 100644
index 0000000..eac6003
--- /dev/null
+++ b/higan/target-loki/terminal/terminal.cpp
@@ -0,0 +1,26 @@
+#include "../loki.hpp"
+#include "about-window.cpp"
+unique_pointer<Terminal> terminal;
+
+Terminal::Terminal() {
+  terminal = this;
+  new AboutWindow;
+
+  onClose([&] { program->quit(); });
+
+  helpMenu.setText("Help");
+  aboutAction.setText("About ...").onActivate([&] { aboutWindow->setFocused(); });
+
+  console.setBackgroundColor({ 56,  56,  56});
+  console.setForegroundColor({255, 255, 255});
+  console.setFont(Font().setFamily(Font::Mono).setSize(8));
+  console.setPrompt("$ ");
+
+  setTitle({"loki v", Emulator::Version});
+  setSize({800, 480});
+  setAlignment({0.0, 1.0});
+  setVisible();
+}
+
+auto Terminal::showAboutWindow() -> void {
+}
diff --git a/higan/target-loki/terminal/terminal.hpp b/higan/target-loki/terminal/terminal.hpp
new file mode 100644
index 0000000..0179703
--- /dev/null
+++ b/higan/target-loki/terminal/terminal.hpp
@@ -0,0 +1,22 @@
+struct Terminal : Window {
+  Terminal();
+  auto showAboutWindow() -> void;
+
+  MenuBar menuBar{this};
+    Menu helpMenu{&menuBar};
+      MenuItem aboutAction{&helpMenu};
+
+  VerticalLayout layout{this};
+    Console console{&layout, Size{~0, ~0}};
+};
+
+struct AboutWindow : Window {
+  AboutWindow();
+
+  VerticalLayout layout{this};
+    Canvas canvas{&layout, Size{288, 360}, 15};
+    Label information{&layout, Size{~0, 0}};
+};
+
+extern unique_pointer<Terminal> terminal;
+extern unique_pointer<AboutWindow> aboutWindow;
diff --git a/higan/target-star-rod/GNUmakefile b/higan/target-star-rod/GNUmakefile
new file mode 100644
index 0000000..a8e5055
--- /dev/null
+++ b/higan/target-star-rod/GNUmakefile
@@ -0,0 +1,114 @@
+ifndef name
+  name := star-rod
+endif
+
+flags += -DDEBUGGER
+
+ifndef profile
+  include sfc/GNUmakefile
+else ifeq ($(profile),accuracy)
+  include sfc/GNUmakefile
+else ifeq ($(profile),balanced)
+  include sfc-balanced/GNUmakefile
+endif
+include processor/GNUmakefile
+
+ui_objects := star-rod-laevateinn star-rod-program star-rod-configuration
+ui_objects += star-rod-debugger star-rod-tracer
+ui_objects += star-rod-console star-rod-presentation
+ui_objects += star-rod-cpu star-rod-smp star-rod-memory
+ui_objects += star-rod-breakpoint star-rod-properties
+ui_objects += star-rod-vram star-rod-bg star-rod-palette
+ui_objects += ruby hiro
+ui_objects += $(if $(call streq,$(platform),windows),star-rod-resource)
+
+# platform
+ifeq ($(platform),windows)
+  ruby := video.wgl audio.wasapi input.windows
+else ifeq ($(platform),macosx)
+  ruby := video.cgl audio.openal input.quartz
+else ifeq ($(platform),linux)
+  ruby := video.xshm audio.openal input.sdl
+else ifeq ($(platform),bsd)
+  ruby := video.xshm audio.oss input.sdl
+endif
+
+# ruby
+include ../ruby/GNUmakefile
+link += $(rubylink)
+
+# hiro
+include ../hiro/GNUmakefile
+link += $(hirolink)
+
+# rules
+objects := $(ui_objects) $(objects)
+objects := $(patsubst %,obj/%.o,$(objects))
+
+obj/ruby.o: ../ruby/ruby.cpp $(call rwildcard,../ruby/)
+	$(compiler) $(rubyflags) -c $< -o $@
+
+obj/hiro.o: ../hiro/hiro.cpp $(call rwildcard,../hiro/)
+	$(compiler) $(hiroflags) -c $< -o $@
+
+obj/star-rod-laevateinn.o: $(ui)/laevateinn.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-program.o: $(ui)/program/program.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-configuration.o: $(ui)/configuration/configuration.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-debugger.o: $(ui)/debugger/debugger.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-tracer.o: $(ui)/tracer/tracer.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-console.o: $(ui)/console/console.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-cpu.o: $(ui)/cpu/cpu.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-smp.o: $(ui)/smp/smp.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-presentation.o: $(ui)/presentation/presentation.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-memory.o: $(ui)/memory/memory.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-breakpoint.o: $(ui)/breakpoint/breakpoint.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-properties.o: $(ui)/properties/properties.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-vram.o: $(ui)/vram/vram.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-bg.o: $(ui)/bg/bg.cpp $(call rwildcard,$(ui)/)
+obj/star-rod-palette.o: $(ui)/palette/palette.cpp $(call rwildcard,$(ui)/)
+
+obj/star-rod-resource.o:
+	windres data/resource.rc obj/star-rod-resource.o
+
+# targets
+build: $(objects)
+	$(strip $(compiler) -o out/$(name) $(objects) $(link))
+ifeq ($(platform),macosx)
+	@if [ -d out/$(name).app ]; then rm -r out/$(name).app; fi
+	mkdir -p out/$(name).app/Contents/MacOS/
+	mkdir -p out/$(name).app/Contents/Resources/
+	mv out/$(name) out/$(name).app/Contents/MacOS/$(name)
+	cp data/$(name).plist out/$(name).app/Contents/Info.plist
+	sips -s format icns data/$(name).png --out out/$(name).app/Contents/Resources/$(name).icns
+endif
+
+install:
+ifeq ($(shell id -un),root)
+	$(error "make install should not be run as root")
+else ifeq ($(platform),windows)
+else ifeq ($(platform),macosx)
+	mkdir -p ~/Library/Application\ Support/$(name)/
+	mkdir -p ~/Emulation/System/
+	cp -R out/$(name).app /Applications/$(name).app
+	cp -R systems/* ~/Library/Application\ Support/$(name)/
+else ifneq ($(filter $(platform),linux bsd),)
+	mkdir -p $(prefix)/bin/
+	mkdir -p $(prefix)/share/icons/
+	mkdir -p $(prefix)/share/$(name)/
+	cp out/$(name) $(prefix)/bin/$(name)
+	cp data/$(name).desktop $(prefix)/share/applications/$(name).desktop
+	cp data/$(name).png $(prefix)/share/icons/$(name).png
+	cp -R systems/* $(prefix)/share/$(name)/
+endif
+
+uninstall:
+ifeq ($(shell id -un),root)
+	$(error "make uninstall should not be run as root")
+else ifeq ($(platform),windows)
+else ifeq ($(platform),macosx)
+	if [ -d /Applications/$(name).app ]; then rm -r /Applications/$(name).app; fi
+else ifneq ($(filter $(platform),linux bsd),)
+	if [ -f $(prefix)/bin/$(name) ]; then rm $(prefix)/bin/$(name); fi
+	if [ -f $(prefix)/share/applications/$(name).desktop ]; then rm $(prefix)/share/applications/$(name).desktop; fi
+	if [ -f $(prefix)/share/icons/$(name).png ]; then rm $(prefix)/share/icons/$(name).png; fi
+endif
diff --git a/higan/target-star-rod/bg/bg.cpp b/higan/target-star-rod/bg/bg.cpp
new file mode 100644
index 0000000..84f667e
--- /dev/null
+++ b/higan/target-star-rod/bg/bg.cpp
@@ -0,0 +1,202 @@
+#include "../laevateinn.hpp"
+unique_pointer<BGViewer> bgViewer;
+
+BGViewer::BGViewer() {
+  bgViewer = this;
+  setTitle("BG Viewer");
+  statusBar.setFont(Font().setBold());
+  statusBar.setVisible();
+
+  layout.setMargin(5);
+  bgLabel.setText("Mode:");
+  bgSelection.append(ComboButtonItem().setText("BG1"));
+  bgSelection.append(ComboButtonItem().setText("BG2"));
+  bgSelection.append(ComboButtonItem().setText("BG3"));
+  bgSelection.append(ComboButtonItem().setText("BG4"));
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  canvas.setSize({1024, 512});
+
+  bgSelection.onChange({ &BGViewer::bgChanged, this });
+  update.onActivate({ &BGViewer::updateTiles, this });
+
+  canvas.onMouseLeave([&] { statusBar.setText(""); });
+  canvas.onMouseMove([&](Position position) {
+    SFC::PPU::Background* bg;
+    switch(bgSelection.selected().offset()) {
+    case SFC::PPU::Background::ID::BG1: bg = &SFC::ppu.bg1; break;
+    case SFC::PPU::Background::ID::BG2: bg = &SFC::ppu.bg2; break;
+    case SFC::PPU::Background::ID::BG3: bg = &SFC::ppu.bg3; break;
+    case SFC::PPU::Background::ID::BG4: bg = &SFC::ppu.bg4; break;
+    }
+    uint x = position.x(), y = position.y() + scroll.position() * 8, mode = bg->io.mode;
+    uint tile = 0, address = 0;
+    if(mode != SFC::PPU::Background::Mode::Mode7) {
+      tile = bg->getTile(x, y) & 0x03ff;
+      x /= 8, y /= 8;
+      address = bg->io.tiledataAddress + tile * (16 << mode);
+    } else {
+      x /= 8, y /= 8;
+      tile = SFC::ppu.vram[y * 128 + x].byte(0) & 0x03ff;
+      address = tile * 8 * 8 * 2 + 1;
+    }
+    string output = { x, ", ", y, ", " };
+    output.append(
+      "Tile: 0x", hex(tile, 4L), ", ",
+      "Address: 0x", hex(address, 4L)
+    );
+    statusBar.setText(output);
+  });
+
+  scroll.setLength(1);
+  scroll.setPosition(0);
+  scroll.onChange({ &BGViewer::updateTiles, this });
+
+  bgChanged();
+
+  setGeometry({{128, 128}, layout.minimumSize()});
+}
+
+auto BGViewer::bgChanged() -> void {
+  updateTiles();
+}
+
+auto BGViewer::updateTiles() -> void {
+  uint32_t* dp = canvas.data();
+  for(uint y : range(512))
+  for(uint x : range(1024)) {
+    *dp++ = 0xff800000;
+  }
+  dp = canvas.data();
+  uint16 tiledata;
+  const uint16* sp = SFC::ppu.vram.data;
+  SFC::PPU::Background* bg;
+  switch(bgSelection.selected().offset()) {
+  case 0: bg = &SFC::ppu.bg1; break;
+  case 1: bg = &SFC::ppu.bg2; break;
+  case 2: bg = &SFC::ppu.bg3; break;
+  case 3: bg = &SFC::ppu.bg4; break;
+  }
+  uint16 screenAddress = bg->io.screenAddress;
+  uint pitch = 8 << bg->io.mode;
+  bool hires = SFC::ppu.io.bgMode == 5 || SFC::ppu.io.bgMode == 6;
+  bool tileHeight = bg->io.tileSize;
+  bool tileWidth  = tileHeight || hires;
+
+  uint10 tileID;
+  uint3 palette;
+  bool priority;
+  bool mirrorX;
+  bool mirrorY;
+  uint color;
+
+  uint canvasTileY = 0;
+  if(bg->io.mode != SFC::PPU::Background::Mode::Mode7) {
+    scroll.setLength((tileHeight & bg->io.screenSize.bit(1)) * 64 + 1);
+    for(uint tileY : range(scroll.position(), scroll.position() + (32 << (tileHeight | bg->io.screenSize.bit(1))))) {
+      canvasTileY = tileY - scroll.position();
+      for(uint tileX : range(32 << (tileWidth + bg->io.screenSize.bit(0)))) {
+        tiledata = bg->getTile(tileX * 8, tileY * 8);
+        tileID   = tiledata.bits( 9,  0);
+        palette  = tiledata.bits(12, 10);
+        priority = tiledata.bit(13);
+        mirrorX  = tiledata.bit(14);
+        mirrorY = tiledata.bit(15);
+        if(tileWidth  && (tileX & 1) ^ mirrorX) tileID +=  1;
+        if(tileHeight && (tileY & 1) ^ mirrorY) tileID += 16;
+        sp = SFC::ppu.vram.data + (bg->io.tiledataAddress + tileID * pitch);
+        switch(bg->io.mode) {
+        case SFC::PPU::Background::Mode::BPP2:
+          for(uint y : (!mirrorY ? range(8) : rrange(8))) {
+            uint16 d[] = { sp[0] };
+            for(uint x : (!mirrorX ? range(8) : rrange(8))) {
+              color = 0;
+              color += d[0] & 0x0080 ? 1 : 0;
+              color += d[0] & 0x8000 ? 2 : 0;
+              for(auto& b : d) b <<= 1;
+              color += palette << 2;
+              color = SFC::ppu.screen.cgram[color];
+              color = (255u << 24) |
+                (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+                (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+                (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+              dp[(canvasTileY * 8 + y) * 1024 + (tileX * 8 + x)] = color;
+            }
+            sp++;
+          }
+          break;
+
+        case SFC::PPU::Background::Mode::BPP4:
+          for(uint y : (!mirrorY ? range(8) : rrange(8))) {
+            uint16 d[] = { sp[0], sp[8] };
+            for(uint x : (!mirrorX ? range(8) : rrange(8))) {
+              color = 0;
+              color += d[0] & 0x0080 ? 1 : 0;
+              color += d[0] & 0x8000 ? 2 : 0;
+              color += d[1] & 0x0080 ? 4 : 0;
+              color += d[1] & 0x8000 ? 8 : 0;
+              for(auto& b : d) b <<= 1;
+              color += palette << 4;
+              color = SFC::ppu.screen.cgram[color];
+              color = (255u << 24) |
+                (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+                (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+                (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+              dp[(canvasTileY * 8 + y) * 1024 + (tileX * 8 + x)] = color;
+            }
+            sp++;
+          }
+          break;
+
+        case SFC::PPU::Background::Mode::BPP8:
+          for(uint y : (!mirrorY ? range(8) : rrange(8))) {
+            uint16 d[] = { sp[0], sp[8], sp[16], sp[24] };
+            for(uint x : (!mirrorX ? range(8) : rrange(8))) {
+              color = 0;
+              color += d[0] & 0x0080 ?   1 : 0;
+              color += d[0] & 0x8000 ?   2 : 0;
+              color += d[1] & 0x0080 ?   4 : 0;
+              color += d[1] & 0x8000 ?   8 : 0;
+              color += d[2] & 0x0080 ?  16 : 0;
+              color += d[2] & 0x8000 ?  32 : 0;
+              color += d[3] & 0x0080 ?  64 : 0;
+              color += d[3] & 0x8000 ? 128 : 0;
+              for(auto& b : d) b <<= 1;
+              color = SFC::ppu.screen.cgram[color];
+              color = (255u << 24) |
+                (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+                (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+                (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+              dp[(canvasTileY * 8 + y) * 1024 + (tileX * 8 + x)] = color;
+            }
+            sp++;
+          }
+          break;
+
+        }
+      }
+    }
+  } else {
+    scroll.setLength(64 + 1);
+    for(uint tileY : range(scroll.position(), scroll.position() + 64)) {
+      canvasTileY = tileY - scroll.position();
+      for(uint tileX : range(128)) {
+        tileID = SFC::ppu.vram[tileY * 128 + tileX].byte(0);
+        sp = SFC::ppu.vram.data + (tileID * 8 * 8);
+        for(uint y : range(8)) {
+          for(uint x : range(8)) {
+            color = SFC::ppu.screen.cgram[sp[x] >> 8];
+            color = (255u << 24) |
+              (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+              (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+              (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+            dp[(canvasTileY * 8 + y) * 1024 + (tileX * 8 + x)] = color;
+          }
+          sp += 8;
+        }
+      }
+    }
+  }
+
+  canvas.update();
+}
diff --git a/higan/target-star-rod/bg/bg.hpp b/higan/target-star-rod/bg/bg.hpp
new file mode 100644
index 0000000..6c8d14e
--- /dev/null
+++ b/higan/target-star-rod/bg/bg.hpp
@@ -0,0 +1,20 @@
+struct BGViewer : Window {
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Label bgLabel{&controlLayout, Size{0, 0}, 5};
+      ComboButton bgSelection{&controlLayout, Size{~0, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    HorizontalLayout canvasLayout{&layout, Size{~0, 0}, 5};
+      Canvas canvas{&canvasLayout, Size{1024, 512}};
+      VerticalScrollBar scroll{&canvasLayout, Size{0, ~0}};
+
+  StatusBar statusBar{this};
+
+  auto bgChanged() -> void;
+  auto updateTiles() -> void;
+  BGViewer();
+};
+
+extern unique_pointer<BGViewer> bgViewer;
diff --git a/higan/target-star-rod/breakpoint/breakpoint.cpp b/higan/target-star-rod/breakpoint/breakpoint.cpp
new file mode 100644
index 0000000..83690e6
--- /dev/null
+++ b/higan/target-star-rod/breakpoint/breakpoint.cpp
@@ -0,0 +1,242 @@
+#include "../laevateinn.hpp"
+unique_pointer<BreakpointEditor> breakpointEditor;
+
+BreakpointEntry::BreakpointEntry() {
+  static uint id = 1;
+  enable.setText({ "#", id++ });
+  addr.setFont(Font().setFamily(Font::Mono));
+  data.setFont(Font().setFamily(Font::Mono));
+  type.append(ComboButtonItem().setText("Read"));
+  type.append(ComboButtonItem().setText("Write"));
+  type.append(ComboButtonItem().setText("Exec"));
+  source.append(ComboButtonItem().setText("CPU"));
+  source.append(ComboButtonItem().setText("SMP"));
+  source.append(ComboButtonItem().setText("VRAM"));
+  source.append(ComboButtonItem().setText("OAM"));
+  source.append(ComboButtonItem().setText("CGRAM"));
+
+  append(enable, {0, 0}, 5);
+  append(addr, {50, 0}, 5);
+  append(data, {25, 0}, 5);
+  append(type, {0, 0}, 5);
+  append(source, {0, 0});
+
+  enable.onToggle([&] {
+    bool flag = !enable.checked();
+    addr.setEnabled(flag);
+    data.setEnabled(flag);
+    type.setEnabled(flag);
+    source.setEnabled(flag);
+    breakpointEditor->synchronize();
+  });
+}
+
+BreakpointEditor::BreakpointEditor() {
+  breakpointEditor = this;
+  setTitle("Breakpoint Editor");
+
+  layout.setMargin(5);
+  for(auto &bp : breakpointEntry) layout.append(bp, {0, 0}, 5);
+
+  setGeometry({128, 128, layout.minimumSize().width(), layout.minimumSize().height()});
+  synchronize();
+}
+
+//enable checkbox toggled on one of the five BreakpointEntry items:
+//cache settings to decrease testing overhead whilst debugging
+auto BreakpointEditor::synchronize() -> void {
+  breakpoint.reset();
+  uint id = 0;
+  for(auto &entry : breakpointEntry) {
+    id++;
+    if(!entry.enable.checked()) continue;
+    Breakpoint bp;
+    bp.id = id;
+    bp.compare = entry.data.text().length() > 0;
+    bp.addr = entry.addr.text().hex();
+    bp.data = entry.data.text().hex();
+    bp.type = entry.type.selected().offset();
+    bp.source = entry.source.selected().offset();
+    breakpoint.append(bp);
+  }
+
+  breakpointReadCPU.reset();
+  breakpointWriteCPU.reset();
+  breakpointExecCPU.reset();
+
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Read && bp.source == Breakpoint::CPU) breakpointReadCPU.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Write && bp.source == Breakpoint::CPU) breakpointWriteCPU.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Exec && bp.source == Breakpoint::CPU) breakpointExecCPU.append(bp);
+
+  for(auto &bp : breakpointReadCPU) bp.addr = cpuDebugger->mirror(bp.addr);
+  for(auto &bp : breakpointWriteCPU) bp.addr = cpuDebugger->mirror(bp.addr);
+  for(auto &bp : breakpointExecCPU) bp.addr = cpuDebugger->mirror(bp.addr);
+
+  breakpointReadSMP.reset();
+  breakpointWriteSMP.reset();
+  breakpointExecSMP.reset();
+
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Read && bp.source == Breakpoint::SMP) breakpointReadSMP.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Write && bp.source == Breakpoint::SMP) breakpointWriteSMP.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Exec && bp.source == Breakpoint::SMP) breakpointExecSMP.append(bp);
+
+  breakpointReadVRAM.reset();
+  breakpointWriteVRAM.reset();
+
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Read && bp.source == Breakpoint::VRAM) breakpointReadVRAM.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Write && bp.source == Breakpoint::VRAM) breakpointWriteVRAM.append(bp);
+
+  breakpointReadOAM.reset();
+  breakpointWriteOAM.reset();
+
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Read && bp.source == Breakpoint::OAM) breakpointReadOAM.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Write && bp.source == Breakpoint::OAM) breakpointWriteOAM.append(bp);
+
+  breakpointReadCGRAM.reset();
+  breakpointWriteCGRAM.reset();
+
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Read && bp.source == Breakpoint::CGRAM) breakpointReadCGRAM.append(bp);
+  for(auto &bp : breakpoint) if(bp.type == Breakpoint::Write && bp.source == Breakpoint::CGRAM) breakpointWriteCGRAM.append(bp);
+}
+
+//S-CPU
+//=====
+
+auto BreakpointEditor::testReadCPU(uint24 addr) -> bool {
+  addr = cpuDebugger->mirror(addr);
+  for(auto &bp : breakpointReadCPU) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != cpuDebugger->read(addr)) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testWriteCPU(uint24 addr, uint8 data) -> bool {
+  addr = cpuDebugger->mirror(addr);
+  for(auto &bp : breakpointWriteCPU) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != data) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testExecCPU(uint24 addr) -> bool {
+  addr = cpuDebugger->mirror(addr);
+  for(auto &bp : breakpointExecCPU) {
+    if(bp.addr == addr) {
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+//S-SMP
+//=====
+
+auto BreakpointEditor::testReadSMP(uint16 addr) -> bool {
+  for(auto &bp : breakpointReadSMP) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != smpDebugger->read(addr)) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testWriteSMP(uint16 addr, uint8 data) -> bool {
+  for(auto &bp : breakpointWriteSMP) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != data) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testExecSMP(uint16 addr) -> bool {
+  for(auto &bp : breakpointExecSMP) {
+    if(bp.addr == addr) {
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+//S-PPU
+//=====
+
+auto BreakpointEditor::testReadVRAM(uint16 addr) -> bool {
+  for(auto &bp : breakpointReadVRAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != SFC::ppu.vram[addr]) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testWriteVRAM(uint16 addr, uint8 data) -> bool {
+  for(auto &bp : breakpointWriteVRAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != data) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testReadOAM(uint16 addr) -> bool {
+  for(auto &bp : breakpointReadOAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != SFC::ppu.obj.oam.read(addr)) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testWriteOAM(uint16 addr, uint8 data) -> bool {
+  for(auto &bp : breakpointWriteOAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != data) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testReadCGRAM(uint16 addr) -> bool {
+  for(auto &bp : breakpointReadCGRAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != SFC::ppu.screen.cgram[addr]) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
+
+auto BreakpointEditor::testWriteCGRAM(uint16 addr, uint8 data) -> bool {
+  for(auto &bp : breakpointWriteCGRAM) {
+    if(bp.addr == addr) {
+      if(bp.compare && bp.data != data) continue;
+      debugger->print("Breakpoint #", bp.id, " hit\n");
+      return true;
+    }
+  }
+  return false;
+}
diff --git a/higan/target-star-rod/breakpoint/breakpoint.hpp b/higan/target-star-rod/breakpoint/breakpoint.hpp
new file mode 100644
index 0000000..644f112
--- /dev/null
+++ b/higan/target-star-rod/breakpoint/breakpoint.hpp
@@ -0,0 +1,60 @@
+struct BreakpointEntry : HorizontalLayout {
+  CheckLabel enable;
+  LineEdit addr;
+  LineEdit data;
+  ComboButton type;
+  ComboButton source;
+
+  BreakpointEntry();
+};
+
+struct BreakpointEditor : Window {
+  VerticalLayout layout{this};
+  BreakpointEntry breakpointEntry[8];
+
+  struct Breakpoint {
+    enum : uint { Read, Write, Exec };
+    enum : uint { CPU, SMP, VRAM, OAM, CGRAM };
+    uint id;
+    bool compare;
+    uint addr;
+    uint data;
+    uint type;
+    uint source;
+  };
+  vector<Breakpoint> breakpoint;
+  vector<Breakpoint> breakpointReadCPU;
+  vector<Breakpoint> breakpointWriteCPU;
+  vector<Breakpoint> breakpointExecCPU;
+  vector<Breakpoint> breakpointReadSMP;
+  vector<Breakpoint> breakpointWriteSMP;
+  vector<Breakpoint> breakpointExecSMP;
+  vector<Breakpoint> breakpointReadVRAM;
+  vector<Breakpoint> breakpointWriteVRAM;
+  vector<Breakpoint> breakpointReadOAM;
+  vector<Breakpoint> breakpointWriteOAM;
+  vector<Breakpoint> breakpointReadCGRAM;
+  vector<Breakpoint> breakpointWriteCGRAM;
+  auto synchronize() -> void;
+
+  auto testReadCPU(uint24 addr) -> bool;
+  auto testWriteCPU(uint24 addr, uint8 data) -> bool;
+  auto testExecCPU(uint24 addr) -> bool;
+
+  auto testReadSMP(uint16 addr) -> bool;
+  auto testWriteSMP(uint16 addr, uint8 data) -> bool;
+  auto testExecSMP(uint16 addr) -> bool;
+
+  auto testReadVRAM(uint16 addr) -> bool;
+  auto testWriteVRAM(uint16 addr, uint8 data) -> bool;
+
+  auto testReadOAM(uint16 addr) -> bool;
+  auto testWriteOAM(uint16 addr, uint8 data) -> bool;
+
+  auto testReadCGRAM(uint16 addr) -> bool;
+  auto testWriteCGRAM(uint16 addr, uint8 data) -> bool;
+
+  BreakpointEditor();
+};
+
+extern unique_pointer<BreakpointEditor> breakpointEditor;
diff --git a/higan/target-star-rod/configuration/configuration.cpp b/higan/target-star-rod/configuration/configuration.cpp
new file mode 100644
index 0000000..67b96b2
--- /dev/null
+++ b/higan/target-star-rod/configuration/configuration.cpp
@@ -0,0 +1,22 @@
+#include "../laevateinn.hpp"
+Settings settings;
+
+Settings::Settings() {
+  Markup::Node::operator=(BML::unserialize(string::read(locate("settings.bml"))));
+
+  auto set = [&](const string& name, const string& value) {
+    //create node and set to default value only if it does not already exist
+    if(!operator[](name)) operator()(name).setValue(value);
+  };
+
+  set("Video/Synchronize", false);
+
+  set("Audio/Synchronize", true);
+  set("Audio/Mute", false);
+
+  //Input
+}
+
+auto Settings::quit() -> void {
+  file::write(locate("settings.bml"), BML::serialize(*this));
+}
diff --git a/higan/target-star-rod/configuration/configuration.hpp b/higan/target-star-rod/configuration/configuration.hpp
new file mode 100644
index 0000000..1ef04b2
--- /dev/null
+++ b/higan/target-star-rod/configuration/configuration.hpp
@@ -0,0 +1,6 @@
+struct Settings : Markup::Node {
+  Settings();
+  auto quit() -> void;
+};
+
+extern Settings settings;
diff --git a/higan/target-star-rod/console/about.cpp b/higan/target-star-rod/console/about.cpp
new file mode 100644
index 0000000..94903ff
--- /dev/null
+++ b/higan/target-star-rod/console/about.cpp
@@ -0,0 +1,28 @@
+unique_pointer<AboutWindow> aboutWindow;
+
+AboutWindow::AboutWindow() {
+  aboutWindow = this;
+  setTitle("About star-rod");
+  setResizable(false);
+
+  layout.setMargin(10);
+  layout.setAlignment(0.5);
+  canvas.setSize({224, 360});
+  title.setFont(Font().setBold());
+  title.setText("star-rod");
+  version.setFont(Font().setBold());
+  version.setText({"Based on higan/laevateinn v", Emulator::FromVersion});
+  website.setFont(Font().setBold());
+  website.setText("http://byuu.org/");
+
+  layout.append(canvas, {224, 360});
+  layout.append(title, {0, 0});
+  layout.append(version, {0, 0});
+  layout.append(website, {0, 0});
+
+  image logo(resource::star_rod);
+  logo.alphaBlend(backgroundColor().value());
+  canvas.setIcon(logo);
+
+  setGeometry({128, 128, layout.minimumSize().width(), layout.minimumSize().height()});
+}
diff --git a/higan/target-star-rod/console/console.cpp b/higan/target-star-rod/console/console.cpp
new file mode 100644
index 0000000..2597733
--- /dev/null
+++ b/higan/target-star-rod/console/console.cpp
@@ -0,0 +1,189 @@
+#include "../laevateinn.hpp"
+unique_pointer<ConsoleWindow> consoleWindow;
+
+#include "about.cpp"
+
+ConsoleWindow::ConsoleWindow() {
+  consoleWindow = this;
+  setTitle({"Console - star-rod v", Emulator::Version});
+  setGeometry({64, 640, 640, 400});
+
+  menuEmulation.setText("&Emulation");
+    menuEmulationReloadCartridge.setText("Reload Cartridge");
+    menuEmulationPowerCycle.setText("Power Cycle");
+    menuEmulationReset.setText("Reset");
+    menuEmulationSynchronizeAudio.setText("Synchronize Audio");
+    menuEmulationSynchronizeAudio.setChecked(settings["Audio/Synchronize"].boolean());
+    menuEmulationMuteAudio.setText("Mute Audio");
+    menuEmulationMuteAudio.setChecked(settings["Audio/Mute"].boolean());
+
+  menuDebug.setText("&Debug");
+    menuDebugCPU.setText("CPU");
+    menuDebugCPU.setChecked(debugger->debug.cpu);
+    menuDebugSMP.setText("SMP");
+    menuDebugSMP.setChecked(debugger->debug.smp);
+
+  menuTracer.setText("&Tracer");
+    menuTracerEnable.setText("Enable");
+    menuTracerMask.setChecked(tracer->mask);
+    menuTracerMask.setText("Mask");
+    menuTracerMaskReset.setText("Reset Mask");
+
+  menuWindows.setText("&Windows");
+    menuWindowsPresentation.setText("Video");
+    menuWindowsCPUDebugger.setText("CPU Debugger");
+    menuWindowsSMPDebugger.setText("SMP Debugger");
+    menuWindowsMemoryEditor.setText("Memory Editor");
+    menuWindowsBreakpointEditor.setText("Breakpoint Editor");
+    menuWindowsPropertiesViewer.setText("Properties Viewer");
+    menuWindowsVRAMViewer.setText("VRAM Viewer");
+    menuWindowsBGViewer.setText("BG Viewer");
+    menuWindowsPaletteViewer.setText("Palette Viewer");
+
+  menuState.setText("&State");
+    menuStateSave1.setText("Save - Slot 1");
+    menuStateSave2.setText("Save - Slot 2");
+    menuStateSave3.setText("Save - Slot 3");
+    menuStateSave4.setText("Save - Slot 4");
+    menuStateSave5.setText("Save - Slot 5");
+    menuStateLoad1.setText("Load - Slot 1");
+    menuStateLoad2.setText("Load - Slot 2");
+    menuStateLoad3.setText("Load - Slot 3");
+    menuStateLoad4.setText("Load - Slot 4");
+    menuStateLoad5.setText("Load - Slot 5");
+
+  menuHelp.setText("&Help");
+    menuHelpAbout.setText("About ...");
+
+  layout.setMargin(5);
+  runButton.setText("Run");
+  stepButton.setText("Step");
+  clearButton.setText("Clear");
+  console.setFont(Font().setFamily(Font::Mono));
+
+  onClose([&] {
+    setVisible(false);
+    if(Intrinsics::platform() == Intrinsics::Platform::MacOSX) {
+      program->unloadMedium();
+    } else {
+      Application::quit();
+    }
+  });
+
+  menuEmulationReloadCartridge.onActivate([&] {
+    program->loadMedium(*emulator, emulator->media[0]);
+  });
+
+  menuEmulationPowerCycle.onActivate([&] {
+    emulator->power();
+    print("System power cycled\n");
+  });
+
+  menuEmulationReset.onActivate([&] {
+    emulator->reset();
+    print("System reset\n");
+  });
+
+  menuEmulationSynchronizeAudio.onToggle([&] {
+    audio->set(Audio::Synchronize, settings["Audio/Synchronize"].setValue(menuEmulationSynchronizeAudio.checked()));
+  });
+
+  menuEmulationMuteAudio.onToggle([&] {
+    settings["Audio/Mute"].setValue(menuEmulationMuteAudio.checked());
+  });
+
+  menuDebugCPU.onToggle([&] { debugger->debug.cpu = menuDebugCPU.checked(); });
+  menuDebugSMP.onToggle([&] { debugger->debug.smp = menuDebugSMP.checked(); });
+
+  menuTracerEnable.onToggle([&] { tracer->enable(menuTracerEnable.checked()); });
+  menuTracerMask.onToggle([&] { tracer->mask = menuTracerMask.checked(); });
+  menuTracerMaskReset.onActivate([&] {
+    tracer->resetMask();
+    debugger->print("Tracer mask reset\n");
+  });
+
+  menuWindowsPresentation.onActivate([&] {
+    presentation->setVisible();
+    presentation->setFocused();
+  });
+
+  menuWindowsCPUDebugger.onActivate([&] {
+    cpuDebugger->setVisible();
+    cpuDebugger->setFocused();
+  });
+
+  menuWindowsSMPDebugger.onActivate([&] {
+    smpDebugger->setVisible();
+    smpDebugger->setFocused();
+  });
+
+  menuWindowsMemoryEditor.onActivate([&] {
+    memoryEditor->updateView();
+    memoryEditor->setVisible();
+    memoryEditor->setFocused();
+  });
+
+  menuWindowsBreakpointEditor.onActivate([&] {
+    breakpointEditor->setVisible();
+    breakpointEditor->setFocused();
+  });
+
+  menuWindowsPropertiesViewer.onActivate([&] {
+    propertiesViewer->setVisible();
+    propertiesViewer->setFocused();
+  });
+
+  menuWindowsVRAMViewer.onActivate([&] {
+    vramViewer->setVisible();
+    vramViewer->setFocused();
+  });
+
+  menuWindowsBGViewer.onActivate([&] {
+    bgViewer->setVisible();
+    bgViewer->setFocused();
+  });
+
+  menuWindowsPaletteViewer.onActivate([&] {
+    paletteViewer->setVisible();
+    paletteViewer->setFocused();
+  });
+
+  menuStateSave1.onActivate([&] { program->saveState(1); });
+  menuStateSave2.onActivate([&] { program->saveState(2); });
+  menuStateSave3.onActivate([&] { program->saveState(3); });
+  menuStateSave4.onActivate([&] { program->saveState(4); });
+  menuStateSave5.onActivate([&] { program->saveState(5); });
+
+  menuStateLoad1.onActivate([&] { program->loadState(1); });
+  menuStateLoad2.onActivate([&] { program->loadState(2); });
+  menuStateLoad3.onActivate([&] { program->loadState(3); });
+  menuStateLoad4.onActivate([&] { program->loadState(4); });
+  menuStateLoad5.onActivate([&] { program->loadState(5); });
+
+  menuHelpAbout.onActivate([&] { aboutWindow->setVisible(); });
+
+  runButton.onActivate([&] {
+    if(debugger->paused) {
+      print("\n");
+      debugger->resume();
+    } else {
+      debugger->suspend();
+    }
+  });
+
+  stepButton.onActivate([&] {
+    debugger->flags.step = true;
+    debugger->resume();
+  });
+
+  clearButton.onActivate([&] {
+    console.setText("");
+  });
+}
+
+auto ConsoleWindow::print(const string& text) -> void {
+  string output = console.text();
+  output.append(text);
+  console.setText(output);
+  console.cursor().setOffset(~0);
+}
diff --git a/higan/target-star-rod/console/console.hpp b/higan/target-star-rod/console/console.hpp
new file mode 100644
index 0000000..ece7d84
--- /dev/null
+++ b/higan/target-star-rod/console/console.hpp
@@ -0,0 +1,73 @@
+struct ConsoleWindow : Window {
+  MenuBar menuBar{this};
+    Menu menuEmulation{&menuBar};
+      MenuItem menuEmulationReloadCartridge{&menuEmulation};
+      MenuItem menuEmulationPowerCycle{&menuEmulation};
+      MenuItem menuEmulationReset{&menuEmulation};
+      MenuSeparator menuEmulationSeparator{&menuEmulation};
+      MenuCheckItem menuEmulationSynchronizeAudio{&menuEmulation};
+      MenuCheckItem menuEmulationMuteAudio{&menuEmulation};
+
+    Menu menuDebug{&menuBar};
+      MenuCheckItem menuDebugCPU{&menuDebug};
+      MenuCheckItem menuDebugSMP{&menuDebug};
+
+    Menu menuTracer{&menuBar};
+      MenuCheckItem menuTracerEnable{&menuTracer};
+      MenuCheckItem menuTracerMask{&menuTracer};
+      MenuItem menuTracerMaskReset{&menuTracer};
+
+    Menu menuWindows{&menuBar};
+      MenuItem menuWindowsPresentation{&menuWindows};
+      MenuSeparator menuWindowsSeparator1{&menuWindows};
+      MenuItem menuWindowsCPUDebugger{&menuWindows};
+      MenuItem menuWindowsSMPDebugger{&menuWindows};
+      MenuSeparator menuWindowsSeparator2{&menuWindows};
+      MenuItem menuWindowsMemoryEditor{&menuWindows};
+      MenuItem menuWindowsBreakpointEditor{&menuWindows};
+      MenuItem menuWindowsPropertiesViewer{&menuWindows};
+      MenuItem menuWindowsVRAMViewer{&menuWindows};
+      MenuItem menuWindowsBGViewer{&menuWindows};
+      MenuItem menuWindowsPaletteViewer{&menuWindows};
+
+    Menu menuState{&menuBar};
+      MenuItem menuStateSave1{&menuState};
+      MenuItem menuStateSave2{&menuState};
+      MenuItem menuStateSave3{&menuState};
+      MenuItem menuStateSave4{&menuState};
+      MenuItem menuStateSave5{&menuState};
+      MenuSeparator menuStateSeparator{&menuState};
+      MenuItem menuStateLoad1{&menuState};
+      MenuItem menuStateLoad2{&menuState};
+      MenuItem menuStateLoad3{&menuState};
+      MenuItem menuStateLoad4{&menuState};
+      MenuItem menuStateLoad5{&menuState};
+
+    Menu menuHelp{&menuBar};
+      MenuItem menuHelpAbout{&menuHelp};
+
+  VerticalLayout layout{this};
+    HorizontalLayout commandLayout{&layout, Size{~0, 0}, 5};
+      Button runButton{&commandLayout, Size{80, ~0}, 5};
+      Button stepButton{&commandLayout, Size{80, ~0}, 5};
+      Widget spacer{&commandLayout, Size{~0, 0}};
+      Button clearButton{&commandLayout, Size{80, ~0}};
+    TextEdit console{&layout, Size{~0, ~0}};
+
+  auto print(const string& text) -> void;
+
+  ConsoleWindow();
+};
+
+struct AboutWindow : Window {
+  VerticalLayout layout{this};
+    Canvas canvas;
+    Label title;
+    Label version;
+    Label website;
+
+  AboutWindow();
+};
+
+extern unique_pointer<ConsoleWindow> consoleWindow;
+extern unique_pointer<AboutWindow> aboutWindow;
diff --git a/higan/target-star-rod/cpu/cpu.cpp b/higan/target-star-rod/cpu/cpu.cpp
new file mode 100644
index 0000000..924d53e
--- /dev/null
+++ b/higan/target-star-rod/cpu/cpu.cpp
@@ -0,0 +1,143 @@
+#include "../laevateinn.hpp"
+unique_pointer<CPUDebugger> cpuDebugger;
+
+#include "registers.cpp"
+
+CPUDebugger::CPUDebugger() {
+  cpuDebugger = this;
+  opcodePC = 0x008000;
+
+  setTitle("CPU Debugger");
+  setGeometry({128, 128, 620, 260});
+
+  layout.setMargin(5);
+  stepInto.setText("Step Into");
+  stepNMI.setText("NMI");
+  stepIRQ.setText("IRQ");
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  disassembly.setFont(Font().setFamily(Font::Mono));
+  registers.setFont(Font().setFamily(Font::Mono));
+  registers.setText(" ");
+
+  stepInto.onActivate([&] {
+    debugger->flags.cpu.stepInto = true;
+    debugger->resume();
+  });
+
+  stepNMI.onActivate([&] {
+    debugger->flags.cpu.nmi = true;
+    debugger->resume();
+  });
+
+  stepIRQ.onActivate([&] {
+    debugger->flags.cpu.irq = true;
+    debugger->resume();
+  });
+
+  update.onActivate({ &CPUDebugger::updateDisassembly, this });
+
+  registers.onActivate([&] {
+    cpuRegisterEditor->loadRegisters();
+    cpuRegisterEditor->setVisible();
+  });
+}
+
+auto CPUDebugger::mirror(uint24 addr) -> uint24 {
+  if((addr & 0x40e000) == 0x0000) addr = 0x7e0000 | (addr & 0x1fff);  //$00-3f:80-bf:0000-1fff WRAM
+  return addr;
+}
+
+auto CPUDebugger::read(uint24 addr) -> uint8 {
+  if((addr & 0x40e000) == 0x2000) return ~0;  //$00-3f|80-bf:2000-3fff  MMIO
+  if((addr & 0x40e000) == 0x4000) return ~0;  //$00-3f|80-bf:4000-5fff  MMIO
+  return SFC::bus.read(mirror(addr), SFC::cpu.r.mdr);
+}
+
+auto CPUDebugger::write(uint24 addr, uint8 data) -> void {
+  if((addr & 0x40e000) == 0x2000) return;  //$00-3f|80-bf:2000-3fff  MMIO
+  if((addr & 0x40e000) == 0x4000) return;  //$00-3f|80-bf:4000-5fff  MMIO
+  if((addr & 0x40e000) == 0x0000) addr = 0x7e0000 | (addr & 0x1fff);  //$00-3f:80-bf:0000-1fff WRAM
+  return SFC::bus.write(mirror(addr), data);
+}
+
+auto CPUDebugger::opcodeLength(uint24 addr) -> uint {
+  #define M 5
+  #define X 6
+  static uint lengthTable[256] = {
+    2, 2, 2, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+    3, 2, 4, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+
+    1, 2, 2, 2,  3, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  3, 2, 2, 2,  1, 3, 1, 1,  4, 3, 3, 4,
+    1, 2, 3, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+
+    2, 2, 3, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+    X, 2, X, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+
+    X, 2, 2, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  2, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+    X, 2, 2, 2,  2, 2, 2, 2,  1, M, 1, 1,  3, 3, 3, 4,
+    2, 2, 2, 2,  3, 2, 2, 2,  1, 3, 1, 1,  3, 3, 3, 4,
+  };
+
+  uint length = lengthTable[SFC::bus.read(addr, SFC::cpu.r.mdr)];
+  if(length == M) return 3 - (SFC::cpu.r.e | SFC::cpu.r.p.m);
+  if(length == X) return 3 - (SFC::cpu.r.e | SFC::cpu.r.p.x);
+  return length;
+  #undef M
+  #undef X
+}
+
+auto CPUDebugger::updateDisassembly() -> void {
+  string line[15];
+  string text = SFC::cpu.disassemble(opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x);
+  line[7] = { "> ", text };
+
+  int addr = opcodePC;
+  for(int o = 6; o >= 0; o--) {
+    for(int b = 1; b <= 4; b++) {
+      if(addr - b >= 0 && (debugger->cpuUsage.data[addr - b] & Usage::Exec)) {
+        addr -= b;
+        text = SFC::cpu.disassemble(addr, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x);
+        line[o] = { "  ", text };
+        break;
+      }
+    }
+  }
+
+  addr = opcodePC;
+  for(int o = 8; o <= 14; o++) {
+    for(int b = 1; b <= 4; b++) {
+      if(addr + b <= 0xffffff && (debugger->cpuUsage.data[addr + b] & Usage::Exec)) {
+        addr += b;
+        text = SFC::cpu.disassemble(addr, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x);
+        line[o] = { "  ", text };
+        break;
+      }
+    }
+  }
+
+  string output;
+  for(auto& n : line) {
+    if(!n) output.append("  ...\n");
+    else   output.append(n, "\n");
+  }
+  output.trimRight("\n");
+
+  disassembly.setText(output);
+  registers.setText({
+     "A:", hex(SFC::cpu.r.a.w, 4L), " X:", hex(SFC::cpu.r.x.w, 4L), " Y:", hex(SFC::cpu.r.y.w, 4L),
+    " S:", hex(SFC::cpu.r.s.w, 4L), " D:", hex(SFC::cpu.r.d.w, 4L), " DB:", hex(SFC::cpu.r.db, 2L), " ",
+    SFC::cpu.r.p.n ? "N" : "n", SFC::cpu.r.p.v ? "V" : "v",
+    SFC::cpu.r.e ? (SFC::cpu.r.p.m ? "1" : "0") : (SFC::cpu.r.p.m ? "M" : "m"),
+    SFC::cpu.r.e ? (SFC::cpu.r.p.x ? "B" : "b") : (SFC::cpu.r.p.x ? "X" : "x"),
+    SFC::cpu.r.p.d ? "D" : "d", SFC::cpu.r.p.i ? "I" : "i",
+    SFC::cpu.r.p.z ? "Z" : "z", SFC::cpu.r.p.c ? "C" : "c",
+  });
+}
diff --git a/higan/target-star-rod/cpu/cpu.hpp b/higan/target-star-rod/cpu/cpu.hpp
new file mode 100644
index 0000000..b6de084
--- /dev/null
+++ b/higan/target-star-rod/cpu/cpu.hpp
@@ -0,0 +1,59 @@
+struct CPUDebugger : Window {
+  uint24 opcodePC;
+
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Button stepInto{&controlLayout, Size{80, 0}, 5};
+      Button stepNMI{&controlLayout, Size{40, 0}, 5};
+      Button stepIRQ{&controlLayout, Size{40, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    TextEdit disassembly{&layout, Size{~0, ~0}, 5};
+    Button registers{&layout, Size{~0, 0}};
+
+  auto mirror(uint24 addr) -> uint24;
+  auto read(uint24 addr) -> uint8;
+  auto write(uint24 addr, uint8 data) -> void;
+
+  auto opcodeLength(uint24 addr) -> uint;
+  auto updateDisassembly() -> void;
+  CPUDebugger();
+};
+
+struct CPURegisterEditor : Window {
+  VerticalLayout layout;
+    HorizontalLayout primaryLayout;
+      Label regALabel;
+      LineEdit regAValue;
+      Label regXLabel;
+      LineEdit regXValue;
+      Label regYLabel;
+      LineEdit regYValue;
+      Label regSLabel;
+      LineEdit regSValue;
+      Label regDLabel;
+      LineEdit regDValue;
+      Label regDBLabel;
+      LineEdit regDBValue;
+    HorizontalLayout secondaryLayout;
+      CheckLabel flagN;
+      CheckLabel flagV;
+      CheckLabel flagM;
+      CheckLabel flagX;
+      CheckLabel flagD;
+      CheckLabel flagI;
+      CheckLabel flagZ;
+      CheckLabel flagC;
+    HorizontalLayout tertiaryLayout;
+      CheckLabel flagE;
+      Widget spacer;
+      Button update;
+
+  auto loadRegisters() -> void;
+  auto saveRegisters() -> void;
+  CPURegisterEditor();
+};
+
+extern unique_pointer<CPUDebugger> cpuDebugger;
+extern unique_pointer<CPURegisterEditor> cpuRegisterEditor;
diff --git a/higan/target-star-rod/cpu/registers.cpp b/higan/target-star-rod/cpu/registers.cpp
new file mode 100644
index 0000000..d8414fc
--- /dev/null
+++ b/higan/target-star-rod/cpu/registers.cpp
@@ -0,0 +1,105 @@
+unique_pointer<CPURegisterEditor> cpuRegisterEditor;
+
+CPURegisterEditor::CPURegisterEditor() {
+  cpuRegisterEditor = this;
+  setTitle("CPU Register Editor");
+
+  layout.setMargin(5);
+  regALabel.setText("A:");
+  regAValue.setFont(Font().setFamily(Font::Mono));
+  regXLabel.setText("X:");
+  regXValue.setFont(Font().setFamily(Font::Mono));
+  regYLabel.setText("Y:");
+  regYValue.setFont(Font().setFamily(Font::Mono));
+  regSLabel.setText("S:");
+  regSValue.setFont(Font().setFamily(Font::Mono));
+  regDLabel.setText("D:");
+  regDValue.setFont(Font().setFamily(Font::Mono));
+  regDBLabel.setText("DB:");
+  regDBValue.setFont(Font().setFamily(Font::Mono));
+  flagN.setText("N");
+  flagV.setText("V");
+  flagM.setText("M");
+  flagX.setText("X");
+  flagD.setText("D");
+  flagI.setText("I");
+  flagZ.setText("Z");
+  flagC.setText("C");
+  flagE.setText("E");
+  update.setText("Update");
+
+  loadRegisters();
+
+  layout.append(primaryLayout, {~0, 0}, 5);
+    primaryLayout.append(regALabel, {0, 0}, 5);
+    primaryLayout.append(regAValue, {0, 0}, 5);
+    primaryLayout.append(regXLabel, {0, 0}, 5);
+    primaryLayout.append(regXValue, {0, 0}, 5);
+    primaryLayout.append(regYLabel, {0, 0}, 5);
+    primaryLayout.append(regYValue, {0, 0}, 5);
+    primaryLayout.append(regSLabel, {0, 0}, 5);
+    primaryLayout.append(regSValue, {0, 0}, 5);
+    primaryLayout.append(regDLabel, {0, 0}, 5);
+    primaryLayout.append(regDValue, {0, 0}, 5);
+    primaryLayout.append(regDBLabel, {0, 0}, 5);
+    primaryLayout.append(regDBValue, {0, 0});
+  layout.append(secondaryLayout, {~0, 0}, 5);
+    secondaryLayout.append(flagN, {0, 0}, 5);
+    secondaryLayout.append(flagV, {0, 0}, 5);
+    secondaryLayout.append(flagM, {0, 0}, 5);
+    secondaryLayout.append(flagX, {0, 0}, 5);
+    secondaryLayout.append(flagD, {0, 0}, 5);
+    secondaryLayout.append(flagI, {0, 0}, 5);
+    secondaryLayout.append(flagZ, {0, 0}, 5);
+    secondaryLayout.append(flagC, {0, 0});
+  layout.append(tertiaryLayout, {~0, 0});
+    tertiaryLayout.append(flagE, {0, 0}, 5);
+    tertiaryLayout.append(spacer, {~0, 0});
+    tertiaryLayout.append(update, {80, 0});
+  append(layout);
+
+  update.onActivate([&] {
+    saveRegisters();
+    cpuDebugger->updateDisassembly();
+    setVisible(false);
+  });
+
+  setGeometry({{128, 128}, layout.minimumSize()});
+}
+
+void CPURegisterEditor::loadRegisters() {
+  regAValue.setText(hex(SFC::cpu.r.a.w, 4L));
+  regXValue.setText(hex(SFC::cpu.r.x.w, 4L));
+  regYValue.setText(hex(SFC::cpu.r.y.w, 4L));
+  regSValue.setText(hex(SFC::cpu.r.s.w, 4L));
+  regDValue.setText(hex(SFC::cpu.r.d.w, 4L));
+  regDBValue.setText(hex(SFC::cpu.r.db, 2L));
+  flagN.setChecked(SFC::cpu.r.p.n);
+  flagV.setChecked(SFC::cpu.r.p.v);
+  flagM.setChecked(SFC::cpu.r.p.m);
+  flagX.setChecked(SFC::cpu.r.p.x);
+  flagD.setChecked(SFC::cpu.r.p.d);
+  flagI.setChecked(SFC::cpu.r.p.i);
+  flagZ.setChecked(SFC::cpu.r.p.z);
+  flagC.setChecked(SFC::cpu.r.p.c);
+  flagE.setChecked(SFC::cpu.r.e);
+}
+
+void CPURegisterEditor::saveRegisters() {
+  SFC::cpu.r.a.w = regAValue.text().hex();
+  SFC::cpu.r.x.w = regXValue.text().hex();
+  SFC::cpu.r.y.w = regYValue.text().hex();
+  SFC::cpu.r.s.w = regSValue.text().hex();
+  SFC::cpu.r.d.w = regDValue.text().hex();
+  SFC::cpu.r.db = regDBValue.text().hex();
+  SFC::cpu.r.p.n = flagN.checked();
+  SFC::cpu.r.p.v = flagV.checked();
+  SFC::cpu.r.p.m = flagM.checked();
+  SFC::cpu.r.p.x = flagX.checked();
+  SFC::cpu.r.p.d = flagD.checked();
+  SFC::cpu.r.p.i = flagI.checked();
+  SFC::cpu.r.p.z = flagZ.checked();
+  SFC::cpu.r.p.c = flagC.checked();
+  SFC::cpu.r.e = flagE.checked();
+  //SFC::cpu.updateTable();  //cache E/M/X flags
+}
diff --git a/higan/target-star-rod/debugger/debugger.cpp b/higan/target-star-rod/debugger/debugger.cpp
new file mode 100644
index 0000000..51a9a54
--- /dev/null
+++ b/higan/target-star-rod/debugger/debugger.cpp
@@ -0,0 +1,79 @@
+#include "../laevateinn.hpp"
+unique_pointer<Debugger> debugger;
+
+#include "hook.cpp"
+#include "usage.cpp"
+
+Debugger::Debugger() {
+  debugger = this;
+  paused = true;
+
+  flags.step = false;
+  flags.cpu.stepInto = false;
+  flags.cpu.nmi = false;
+  flags.cpu.irq = false;
+  flags.smp.stepInto = false;
+
+  debug.cpu = true;
+  debug.smp = false;
+
+  cpuUsage.allocate(16 * 1024 * 1024);
+  apuUsage.allocate(64 * 1024);
+
+  SFC::debugger.cpu.execute = {&Debugger::cpu_execute, this};
+  SFC::debugger.cpu.read = {&Debugger::cpu_read, this};
+  SFC::debugger.cpu.write = {&Debugger::cpu_write, this};
+
+  SFC::debugger.cpu.nmi = {&Debugger::cpu_nmi, this};
+  SFC::debugger.cpu.irq = {&Debugger::cpu_irq, this};
+
+  SFC::debugger.smp.execute = {&Debugger::smp_execute, this};
+  SFC::debugger.smp.read = {&Debugger::smp_read, this};
+  SFC::debugger.smp.write = {&Debugger::smp_write, this};
+
+  SFC::debugger.ppu.vram.read = {&Debugger::ppu_vramRead, this};
+  SFC::debugger.ppu.vram.write = {&Debugger::ppu_vramWrite, this};
+
+  SFC::debugger.ppu.oam.read = {&Debugger::ppu_oamRead, this};
+  SFC::debugger.ppu.oam.write = {&Debugger::ppu_oamWrite, this};
+
+  SFC::debugger.ppu.cgram.read = {&Debugger::ppu_cgramRead, this};
+  SFC::debugger.ppu.cgram.write = {&Debugger::ppu_cgramWrite, this};
+}
+
+auto Debugger::run() -> void {
+  if(paused) {
+    usleep(2000);
+    return;
+  }
+
+  emulator->run();
+  if(cpuDebugger->autoUpdate.checked()) cpuDebugger->updateDisassembly();
+  if(smpDebugger->autoUpdate.checked()) smpDebugger->updateDisassembly();
+  if(memoryEditor->autoUpdate.checked()) memoryEditor->updateView();
+  if(propertiesViewer->autoUpdate.checked()) propertiesViewer->updateProperties();
+  if(vramViewer->autoUpdate.checked()) vramViewer->updateTiles();
+  if(bgViewer->autoUpdate.checked()) bgViewer->updateTiles();
+  if(paletteViewer->autoUpdate.checked()) paletteViewer->updateColors();
+}
+
+auto Debugger::echo(const string& text) -> void {
+  consoleWindow->print(text);
+}
+
+auto Debugger::resume() -> void {
+  if(!paused) return;
+  paused = false;
+  consoleWindow->runButton.setText("Stop");
+}
+
+auto Debugger::suspend() -> void {
+  if(paused) return;
+  paused = true;
+  flags.step = false;
+  flags.cpu.stepInto = false;
+  flags.cpu.nmi = false;
+  flags.cpu.irq = false;
+  flags.smp.stepInto = false;
+  consoleWindow->runButton.setText("Run");
+}
diff --git a/higan/target-star-rod/debugger/debugger.hpp b/higan/target-star-rod/debugger/debugger.hpp
new file mode 100644
index 0000000..4910986
--- /dev/null
+++ b/higan/target-star-rod/debugger/debugger.hpp
@@ -0,0 +1,71 @@
+struct Usage {
+  enum : uint { Read = 4, Write = 2, Exec = 1 };
+  uint8_t* data;
+  uint size;
+
+  auto allocate(uint size) -> void;
+  auto reset() -> void;
+  Usage();
+  ~Usage();
+};
+
+struct Debugger {
+  bool paused;
+
+  struct Flags {
+    bool step;
+    struct CPU {
+      bool stepInto;
+      bool nmi;
+      bool irq;
+    } cpu;
+    struct SMP {
+      bool stepInto;
+    } smp;
+  } flags;
+
+  struct Debug {
+    bool cpu;
+    bool smp;
+  } debug;
+
+  Usage cpuUsage;
+  Usage apuUsage;
+  auto loadUsage() -> void;
+  auto saveUsage() -> void;
+  auto resetUsage() -> void;
+
+  auto run() -> void;
+  auto echo(const string& text) -> void;
+  auto resume() -> void;   //start running until breakpoint is reached
+  auto suspend() -> void;  //stop running as soon as possible
+
+  //S-CPU
+  auto cpu_execute(uint24 addr) -> void;
+  auto cpu_read(uint24 addr, uint8 data) -> void;
+  auto cpu_write(uint24 addr, uint8 data) -> void;
+  auto cpu_nmi() -> void;
+  auto cpu_irq() -> void;
+
+  //S-SMP
+  auto smp_execute(uint16 addr) -> void;
+  auto smp_read(uint16 addr, uint8 data) -> void;
+  auto smp_write(uint16 addr, uint8 data) -> void;
+
+  //S-PPU
+  auto ppu_vramRead(uint17 addr, uint8 data) -> void;
+  auto ppu_vramWrite(uint17 addr, uint8 data) -> void;
+  auto ppu_oamRead(uint10 addr, uint8 data) -> void;
+  auto ppu_oamWrite(uint10 addr, uint8 data) -> void;
+  auto ppu_cgramRead(uint9 addr, uint8 data) -> void;
+  auto ppu_cgramWrite(uint9 addr, uint8 data) -> void;
+
+  Debugger();
+
+  template<typename... Args> void print(Args&&... args) {
+    string text(std::forward<Args>(args)...);
+    echo(text);
+  }
+};
+
+extern unique_pointer<Debugger> debugger;
diff --git a/higan/target-star-rod/debugger/hook.cpp b/higan/target-star-rod/debugger/hook.cpp
new file mode 100644
index 0000000..301a07a
--- /dev/null
+++ b/higan/target-star-rod/debugger/hook.cpp
@@ -0,0 +1,190 @@
+//S-CPU
+//=====
+
+auto Debugger::cpu_execute(uint24 addr) -> void {
+  cpuUsage.data[addr] |= Usage::Exec;
+  cpuDebugger->opcodePC = addr;
+  bool breakpointHit = breakpointEditor->testExecCPU(addr);
+
+  if((debug.cpu && tracer->enabled() && !tracer->maskCPU(addr))
+  || (debug.cpu && flags.step)
+  || flags.cpu.stepInto
+  || breakpointHit
+  ) {
+    string text = SFC::cpu.disassemble(addr, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x);
+
+    if(debug.cpu && tracer->enabled()) tracer->print(text, "\n");
+    if((debug.cpu && flags.step) || flags.cpu.stepInto || breakpointHit) {
+      print(text, "\n");
+      if(debug.cpu && flags.step) {
+        consoleWindow->stepButton.setFocused();
+      }
+      if(flags.cpu.stepInto) {
+        cpuDebugger->stepInto.setFocused();
+        cpuDebugger->updateDisassembly();
+      }
+      suspend();
+      SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+    }
+  }
+}
+
+auto Debugger::cpu_read(uint24 addr, uint8 data) -> void {
+  cpuUsage.data[addr] |= Usage::Read;
+  bool breakpointHit = breakpointEditor->testReadCPU(addr);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::cpu_write(uint24 addr, uint8 data) -> void {
+  cpuUsage.data[addr] |= Usage::Write;
+  bool breakpointHit = breakpointEditor->testWriteCPU(addr, data);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::cpu_nmi() -> void {
+  if(flags.cpu.nmi) {
+    print("CPU NMI\n");  //, text, "\n");
+    flags.cpu.stepInto = true;
+  }
+}
+
+auto Debugger::cpu_irq() -> void {
+  if(flags.cpu.irq) {
+    print("CPU IRQ\n");
+    flags.cpu.stepInto = true;
+  }
+}
+
+//S-SMP
+//=====
+
+auto Debugger::smp_execute(uint16 addr) -> void {
+  apuUsage.data[addr] |= Usage::Exec;
+  smpDebugger->opcodePC = addr;
+  bool breakpointHit = breakpointEditor->testExecSMP(addr);
+
+  if((debug.cpu && tracer->enabled() && !tracer->maskSMP(addr))
+  || (debug.smp && flags.step)
+  || flags.smp.stepInto
+  || breakpointHit
+  ) {
+    string text = SFC::smp.disassemble(addr, SFC::smp.regs.p.p);
+
+    if(debug.smp && tracer->enabled()) tracer->print(text, "\n");
+    if((debug.smp && flags.step) || flags.smp.stepInto || breakpointHit) {
+      print(text, "\n");
+      if(debug.smp && flags.step) {
+        consoleWindow->stepButton.setFocused();
+      }
+      if(flags.smp.stepInto) {
+        smpDebugger->stepInto.setFocused();
+        smpDebugger->updateDisassembly();
+      }
+      suspend();
+      SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+    }
+  }
+}
+
+auto Debugger::smp_read(uint16 addr, uint8 data) -> void {
+  apuUsage.data[addr] |= Usage::Read;
+  bool breakpointHit = breakpointEditor->testReadSMP(addr);
+
+  if(breakpointHit) {
+    print(SFC::smp.disassemble(smpDebugger->opcodePC, SFC::smp.regs.p.p), "\n");
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::smp_write(uint16 addr, uint8 data) -> void {
+  apuUsage.data[addr] |= Usage::Write;
+  bool breakpointHit = breakpointEditor->testWriteSMP(addr, data);
+
+  if(breakpointHit) {
+    print(SFC::smp.disassemble(smpDebugger->opcodePC, SFC::smp.regs.p.p), "\n");
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+//S-PPU
+//=====
+
+auto Debugger::ppu_vramRead(uint17 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testReadVRAM(addr);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::ppu_vramWrite(uint17 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testWriteVRAM(addr, data);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::ppu_oamRead(uint10 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testReadOAM(addr);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::ppu_oamWrite(uint10 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testWriteOAM(addr, data);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::ppu_cgramRead(uint9 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testReadCGRAM(addr);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
+
+auto Debugger::ppu_cgramWrite(uint9 addr, uint8 data) -> void {
+  bool breakpointHit = breakpointEditor->testWriteCGRAM(addr, data);
+
+  if(breakpointHit) {
+    print(SFC::cpu.disassemble(cpuDebugger->opcodePC, SFC::cpu.r.e, SFC::cpu.r.p.m, SFC::cpu.r.p.x), "\n");
+
+    suspend();
+    SFC::scheduler.exit(SFC::Scheduler::Event::Debugger);
+  }
+}
diff --git a/higan/target-star-rod/debugger/usage.cpp b/higan/target-star-rod/debugger/usage.cpp
new file mode 100644
index 0000000..2d2703a
--- /dev/null
+++ b/higan/target-star-rod/debugger/usage.cpp
@@ -0,0 +1,57 @@
+Usage::Usage() {
+  data = nullptr;
+  size = 0;
+}
+
+Usage::~Usage() {
+  if(data) delete[] data;
+}
+
+auto Usage::allocate(uint size_) -> void {
+  if(data) delete[] data;
+  size = size_;
+  data = new uint8_t[size]();
+}
+
+auto Debugger::loadUsage() -> void {
+  file fp;
+
+  //if cartridge image was modified after the usage files,
+  //then it is possible that the memory map has changed.
+  //will print invalidation message when files do not exist as well.
+
+  if(file::timestamp({program->mediumPaths(1), "program.rom"    }, file::time::modify) >=
+     file::timestamp({program->mediumPaths(1), "debug/usage.cpu"}, file::time::modify)
+  ) {
+    print("CPU usage invalidated\n");
+  } else {
+    if(fp.open({program->mediumPaths(1), "debug/usage.cpu"}, file::mode::read)) {
+      fp.read(cpuUsage.data, min(cpuUsage.size, fp.size()));
+      fp.close();
+    }
+  }
+
+  if(file::timestamp({program->mediumPaths(1), "program.rom"    }, file::time::modify) >=
+     file::timestamp({program->mediumPaths(1), "debug/usage.apu"}, file::time::modify)
+  ) {
+    print("APU usage invalidated\n");
+  } else {
+    if(fp.open({program->mediumPaths(1), "debug/usage.apu"}, file::mode::read)) {
+      fp.read(apuUsage.data, min(apuUsage.size, fp.size()));
+      fp.close();
+    }
+  }
+}
+
+auto Debugger::saveUsage() -> void {
+  string filename;
+  filename = {program->mediumPaths(1), "debug/usage.cpu"};
+  file::write(filename, cpuUsage.data, cpuUsage.size);
+  filename = {program->mediumPaths(1), "debug/usage.apu"};
+  file::write(filename, apuUsage.data, apuUsage.size);
+}
+
+auto Debugger::resetUsage() -> void {
+  if(cpuUsage.data) memset(cpuUsage.data, 0, cpuUsage.size);
+  if(apuUsage.data) memset(apuUsage.data, 0, apuUsage.size);
+}
diff --git a/higan/target-star-rod/laevateinn.cpp b/higan/target-star-rod/laevateinn.cpp
new file mode 100644
index 0000000..b8e4159
--- /dev/null
+++ b/higan/target-star-rod/laevateinn.cpp
@@ -0,0 +1,41 @@
+#include "laevateinn.hpp"
+#include "resource/resource.cpp"
+unique_pointer<Video> video;
+unique_pointer<Audio> audio;
+unique_pointer<Input> input;
+Emulator::Interface* emulator = nullptr;
+
+auto locate(string name) -> string {
+  string location = {Path::program(), "star-rod-", name};
+  if(inode::exists(location)) return location;
+
+  location = {Path::config(), "star-rod/", name};
+  if(inode::exists(location)) return location;
+
+  directory::create({Path::local(), "star-rod/"});
+  return {Path::local(), "star-rod/", name};
+}
+
+auto locateHigan(string name) -> string {
+  string location = {Path::program(), name};
+  if(inode::exists(location)) return location;
+
+  location = {Path::config(), "higan/", name};
+  if(inode::exists(location)) return location;
+
+  return {Path::local(), "higan/", name};
+}
+
+auto locateSystem(string name) -> string {
+  string location = {program->higan_settings["Library/Location"].text(), "System/", name};
+  if(inode::exists(location)) return location;
+
+  return locate(name);
+}
+
+#include <nall/main.hpp>
+auto nall::main(string_vector args) -> void {
+  Application::setName("star-rod");
+  new Program(args);
+  Application::run();
+}
diff --git a/higan/target-star-rod/laevateinn.hpp b/higan/target-star-rod/laevateinn.hpp
new file mode 100644
index 0000000..69c7013
--- /dev/null
+++ b/higan/target-star-rod/laevateinn.hpp
@@ -0,0 +1,39 @@
+#include <nall/nall.hpp>
+#include <ruby/ruby.hpp>
+#include <hiro/hiro.hpp>
+using namespace nall;
+using namespace ruby;
+using namespace hiro;
+extern unique_pointer<Video> video;
+extern unique_pointer<Audio> audio;
+extern unique_pointer<Input> input;
+
+#include <emulator/emulator.hpp>
+extern Emulator::Interface* emulator;
+
+#if defined(PROFILE_BALANCED)
+#include <sfc-balanced/sfc.hpp>
+#else
+#include <sfc/sfc.hpp>
+#endif
+namespace SFC = SuperFamicom;
+
+auto locate(string name) -> string;
+auto locateHigan(string name) -> string;
+auto locateSystem(string name) -> string;
+
+#include "program/program.hpp"
+#include "configuration/configuration.hpp"
+#include "debugger/debugger.hpp"
+#include "tracer/tracer.hpp"
+#include "console/console.hpp"
+#include "presentation/presentation.hpp"
+#include "cpu/cpu.hpp"
+#include "smp/smp.hpp"
+#include "memory/memory.hpp"
+#include "breakpoint/breakpoint.hpp"
+#include "properties/properties.hpp"
+#include "vram/vram.hpp"
+#include "bg/bg.hpp"
+#include "palette/palette.hpp"
+#include "resource/resource.hpp"
diff --git a/higan/target-star-rod/memory/memory.cpp b/higan/target-star-rod/memory/memory.cpp
new file mode 100644
index 0000000..b3d5d74
--- /dev/null
+++ b/higan/target-star-rod/memory/memory.cpp
@@ -0,0 +1,112 @@
+#include "../laevateinn.hpp"
+unique_pointer<MemoryEditor> memoryEditor;
+
+MemoryEditor::MemoryEditor() {
+  memoryEditor = this;
+  setTitle("Memory Editor");
+  setGeometry({128, 128, 585, 235});
+
+  gotoLabel.setText("Goto:");
+  gotoAddress.setFont(Font().setFamily(Font::Mono));
+  source.append(ComboButtonItem().setText("CPU-Bus"));
+  source.append(ComboButtonItem().setText("APU-Bus"));
+  source.append(ComboButtonItem().setText("VRAM"));
+  source.append(ComboButtonItem().setText("OAM"));
+  source.append(ComboButtonItem().setText("CGRAM"));
+  exportMemory.setText("Export");
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  editor.setFont(Font().setFamily(Font::Mono));
+  editor.setColumns(16);
+  editor.setRows(16);
+
+  layout.setMargin(5);
+
+  gotoAddress.onChange([&] {
+    editor.setAddress(gotoAddress.text().hex());
+    editor.update();
+  });
+
+  gotoAddress.onActivate([&] {
+    gotoAddress.doChange();
+  });
+
+  update.onActivate({ &MemoryEditor::updateView, this });
+
+  source.onChange({ &MemoryEditor::selectSource, this });
+  exportMemory.onActivate({ &MemoryEditor::exportMemoryToDisk, this });
+  editor.onRead({ &MemoryEditor::read, this });
+  editor.onWrite({ &MemoryEditor::write, this });
+}
+
+auto MemoryEditor::read(uint addr) -> uint8_t {
+  if(!SFC::system.loaded()) return 0x00;
+  switch(source.selected().offset()) {
+  case CPU:   return cpuDebugger->read(addr);
+  case APU:   return smpDebugger->read(addr);
+  case VRAM:  return SFC::ppu.vram[(addr & 0xffff) >> 1].byte(addr & 1);
+  case OAM:   return SFC::ppu.obj.oam.read(addr % 544);
+  case CGRAM: return SFC::ppu.screen.cgram[(addr & 0xff) >> 1].byte(addr & 1);
+  }
+  return ~0;
+}
+
+auto MemoryEditor::write(uint addr, uint8_t data) -> void {
+  if(!SFC::system.loaded()) return;
+  switch(source.selected().offset()) {
+  case CPU:
+    SFC::cartridge.rom.writeProtect(false);
+    cpuDebugger->write(addr, data);
+    SFC::cartridge.rom.writeProtect(true);
+    break;
+  case APU:
+    smpDebugger->write(addr, data);
+    break;
+  case VRAM:
+    SFC::ppu.vram[(addr & 0xffff) >> 1].byte(addr & 1) = data;
+    break;
+  case OAM:
+    SFC::ppu.obj.oam.write(addr % 544, data);
+    break;
+  case CGRAM:
+    SFC::ppu.screen.cgram[(addr & 0xff) >> 1].byte(addr & 1) = data;
+    break;
+  }
+}
+
+auto MemoryEditor::selectSource() -> void {
+  editor.setAddress(0);
+  switch(source.selected().offset()) {
+  case CPU:   editor.setLength(16 * 1024 * 1024); break;
+  case APU:   editor.setLength(64 * 1024); break;
+  case VRAM:  editor.setLength((SFC::ppu.vram.mask + 1) << 1); break;
+  case OAM:   editor.setLength(544); break;
+  case CGRAM: editor.setLength(512); break;
+  }
+  updateView();
+}
+
+auto MemoryEditor::exportMemoryToDisk() -> void {
+  string filename = {program->mediumPaths(1), "debug/"};
+  switch(source.selected().offset()) {
+  case CPU:   filename.append("work.ram"); break;
+  case APU:   filename.append("apu.ram"); break;
+  case VRAM:  filename.append("video.ram"); break;
+  case OAM:   filename.append("object.ram"); break;
+  case CGRAM: filename.append("palette.ram"); break;
+  }
+  file fp;
+  if(fp.open(filename, file::mode::write) == false) return;
+  switch(source.selected().offset()) {
+  case CPU:   for(uint addr : range(0xffffff)) fp.write(cpuDebugger->read(addr)); break;
+  case APU:   for(uint addr : range(0xffff)) fp.write(smpDebugger->read(addr)); break;
+  case VRAM:  for(uint addr : range((SFC::ppu.vram.mask + 1) << 1)) fp.write(SFC::ppu.vram[addr]); break;
+  case OAM:   for(uint addr : range(0x021f)) fp.write(SFC::ppu.obj.oam.read(addr)); break;
+  case CGRAM: for(uint addr : range(0x01ff)) fp.write(SFC::ppu.screen.cgram[addr]); break;
+  }
+  debugger->print("Exported memory to ", filename, "\n");
+}
+
+auto MemoryEditor::updateView() -> void {
+  editor.update();
+}
diff --git a/higan/target-star-rod/memory/memory.hpp b/higan/target-star-rod/memory/memory.hpp
new file mode 100644
index 0000000..29482d5
--- /dev/null
+++ b/higan/target-star-rod/memory/memory.hpp
@@ -0,0 +1,23 @@
+struct MemoryEditor : Window {
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Label gotoLabel{&controlLayout, Size{0, 0}, 5};
+      LineEdit gotoAddress{&controlLayout, Size{50, 0}, 5};
+      ComboButton source{&controlLayout, Size{0, 0}, 5};
+      Button exportMemory{&controlLayout, Size{80, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    HexEdit editor{&layout, Size{~0, ~0}};
+
+  enum : uint { CPU, APU, VRAM, OAM, CGRAM };
+
+  auto read(uint addr) -> uint8_t;
+  auto write(uint addr, uint8_t data) -> void;
+  auto selectSource() -> void;
+  auto exportMemoryToDisk() -> void;
+  auto updateView() -> void;
+  MemoryEditor();
+};
+
+extern unique_pointer<MemoryEditor> memoryEditor;
diff --git a/higan/target-star-rod/palette/palette.cpp b/higan/target-star-rod/palette/palette.cpp
new file mode 100644
index 0000000..d9a325b
--- /dev/null
+++ b/higan/target-star-rod/palette/palette.cpp
@@ -0,0 +1,57 @@
+#include "../laevateinn.hpp"
+unique_pointer<PaletteViewer> paletteViewer;
+
+PaletteViewer::PaletteViewer() {
+  paletteViewer = this;
+  setTitle("Palette Viewer");
+  statusBar.setFont(Font().setBold());
+  statusBar.setVisible();
+
+  layout.setMargin(5);
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  canvas.setSize({256, 256});
+
+  update.onActivate({ &PaletteViewer::updateColors, this });
+
+  canvas.onMouseLeave([&] { statusBar.setText(""); });
+  canvas.onMouseMove([&](Position position) {
+    uint x = position.x() / 16, y = position.y() / 16;
+    string output = { x, ", ", y, ", " };
+    uint color = y << 4 | x;
+    color = SFC::ppu.screen.cgram[color];
+    output.append("Color: 0x", hex(color, 4L), ", RGB: ",
+      image::normalize(color >>  0 & 31, 5, 8), ",",
+      image::normalize(color >>  5 & 31, 5, 8), ",",
+      image::normalize(color >> 10 & 31, 5, 8)
+    );
+    statusBar.setText(output);
+  });
+
+  updateColors();
+
+  setGeometry({{128, 128}, layout.minimumSize()});
+}
+
+auto PaletteViewer::updateColors() -> void {
+  uint32_t* dp = canvas.data();
+
+  uint color;
+
+  for(uint paletteID : range(16)) {
+    for(uint colorID : range(16)) {
+      color = SFC::ppu.screen.cgram[paletteID << 4 | colorID];
+      color = (255u << 24) |
+        (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+        (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+        (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+      for(uint y : range(16)) {
+        for(uint x : range(16)) {
+          dp[(paletteID * 16 + y) * 256 + (colorID * 16 + x)] = color;
+        }
+      }
+    }
+  }
+
+  canvas.update();
+}
diff --git a/higan/target-star-rod/palette/palette.hpp b/higan/target-star-rod/palette/palette.hpp
new file mode 100644
index 0000000..0c4496b
--- /dev/null
+++ b/higan/target-star-rod/palette/palette.hpp
@@ -0,0 +1,15 @@
+struct PaletteViewer : Window {
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    Canvas canvas{&layout, Size{256, 256}};
+
+  StatusBar statusBar{this};
+
+  auto updateColors() -> void;
+  PaletteViewer();
+};
+
+extern unique_pointer<PaletteViewer> paletteViewer;
diff --git a/higan/target-star-rod/presentation/presentation.cpp b/higan/target-star-rod/presentation/presentation.cpp
new file mode 100644
index 0000000..b583e7d
--- /dev/null
+++ b/higan/target-star-rod/presentation/presentation.cpp
@@ -0,0 +1,33 @@
+#include "../laevateinn.hpp"
+unique_pointer<Presentation> presentation;
+
+Presentation::Presentation() {
+  presentation = this;
+  setTitle("Video");
+  setBackgroundColor({0, 0, 0});
+  setResizable(false);
+  setGeometry({64, 64, 512, 480});
+  statusBar.setFont(Font().setBold());
+  statusBar.setVisible();
+
+  splash.allocate(512, 480);
+  splash.verticalGradient(0xff00005f, 0xff000000, 512, 480, 256, 0);
+  nall::image floor;
+  floor.allocate(512, 480);
+  floor.radialGradient(0xffff0000, 0x00000000, 384, 240, 256, 415);
+  splash.impose(image::blend::sourceAlpha, 0, 0, floor, 0, 0, floor.width(), floor.height());
+  nall::image logo(resource::star_rod);
+  splash.impose(image::blend::sourceAlpha, (512 - logo.width()) / 2, (480 - logo.height()) / 2, logo, 0, 0, logo.width(), logo.height());
+}
+
+auto Presentation::drawSplashScreen() -> void {
+  uint32_t* output;
+  uint pitch;
+  if(video->lock(output, pitch, 512, 480)) {
+    for(uint y = 0; y < 480; y++) {
+      memcpy((uint8_t*)output + y * pitch, splash.data() + y * splash.pitch(), 512 * sizeof(uint32_t));
+    }
+    video->unlock();
+    video->refresh();
+  }
+}
diff --git a/higan/target-star-rod/presentation/presentation.hpp b/higan/target-star-rod/presentation/presentation.hpp
new file mode 100644
index 0000000..d56b6af
--- /dev/null
+++ b/higan/target-star-rod/presentation/presentation.hpp
@@ -0,0 +1,13 @@
+struct Presentation : Window {
+  Presentation();
+  auto drawSplashScreen() -> void;
+
+  FixedLayout layout{this};
+    Viewport viewport{&layout, Geometry{0, 0, 512, 480}};
+
+  StatusBar statusBar{this};
+
+  nall::image splash;
+};
+
+extern unique_pointer<Presentation> presentation;
diff --git a/higan/target-star-rod/program/interface.cpp b/higan/target-star-rod/program/interface.cpp
new file mode 100644
index 0000000..909eacb
--- /dev/null
+++ b/higan/target-star-rod/program/interface.cpp
@@ -0,0 +1,117 @@
+auto Program::path(uint id) -> string {
+  return mediumPaths(id);
+}
+
+auto Program::open(uint id, string name, vfs::file::mode mode, bool required) -> vfs::shared::file {
+  if(name == "manifest.bml" && !path(id).endsWith(".sys/")) {
+    if(!file::exists({path(id), name})) {
+      if(auto manifest = execute("icarus", "--manifest", path(id))) {
+        return vfs::memory::file::open(manifest.output.data<uint8_t>(), manifest.output.size());
+      }
+    }
+  }
+
+  if(auto result = vfs::fs::file::open({path(id), name}, mode)) return result;
+
+  if(required) {
+    debugger->print("Error: missing required file:\n", path(id), name, "\n\n");
+  }
+
+  return {};
+}
+
+auto Program::load(uint id, string name, string type) -> maybe<uint> {
+  string location;
+  if(mediumQueue) {
+    location = mediumQueue.takeLeft().transform("\\", "/");
+    if(!location.endsWith("/")) location.append("/");
+  } else {
+    location = BrowserDialog()
+    .setTitle({"Load ", name})
+    .setPath({higan_settings["Library/Location"].text(), name})
+    .setFilters({string{name, "|*.", type}, "All|*.*"})
+    .openFolder();
+  }
+  if(!directory::exists(location)) return mediumQueue.reset(), nothing;
+
+  directory::create({location, "debug/"});
+
+  uint pathID = mediumPaths.size();
+  mediumPaths.append(location);
+  return pathID;
+}
+
+auto Program::videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void {
+  uint32_t* output;
+  uint length;
+
+  if(video->lock(output, length, width, height)) {
+    pitch >>= 2, length >>= 2;
+
+    for(auto y : range(height)) {
+      memory::copy(output + y * length, data + y * pitch, width * sizeof(uint32));
+    }
+
+    video->unlock();
+    video->refresh();
+  }
+
+  /*
+  uint32* output = presentation->canvas.data();
+  pitch >>= 2;
+
+  bool interlace = pitch == 512;
+  if(interlace == false) {
+    for(uint y = 0; y < height; y++) {
+      const uint32 *sp = data + y * pitch;
+      uint32* dp0 = output + y * pitch, *dp1 = dp0 + (pitch >> 1);
+      for(uint x = 0; x < width; x++) {
+        *dp0++ = palette[*sp];
+        *dp1++ = palette[*sp++];
+      }
+    }
+  } else {
+    for(uint y = 0; y < height; y++) {
+      const uint32* sp = data + y * pitch;
+      uint32* dp = output + y * 512; // outputPitch
+      for(uint x = 0; x < width; x++) {
+        *dp++ = palette[*sp++];
+      }
+    }
+  }
+
+  presentation->canvas.setData();
+  */
+}
+
+auto Program::audioSample(const double* samples, uint channels) -> void {
+  if(settings["Audio/Mute"].boolean()) return audio->sample(0, 0);
+  int16 left  = sclamp<16>(samples[0] * 32768.0);
+  int16 right = sclamp<16>(samples[1] * 32768.0);
+  audio->sample(left, right);
+}
+
+auto Program::inputPoll(uint port, uint device, uint input) -> int16 {
+  if(presentation->focused() == false) return 0;
+
+  if(port == SFC::ID::Port::Controller1) {
+    if(device == SFC::ID::Device::Gamepad) {
+      switch(input) {
+      case SFC::Gamepad::Up:     return hiro::Keyboard::pressed("Up");
+      case SFC::Gamepad::Down:   return hiro::Keyboard::pressed("Down");
+      case SFC::Gamepad::Left:   return hiro::Keyboard::pressed("Left");
+      case SFC::Gamepad::Right:  return hiro::Keyboard::pressed("Right");
+      case SFC::Gamepad::B:      return hiro::Keyboard::pressed("Z");
+      case SFC::Gamepad::A:      return hiro::Keyboard::pressed("X");
+      case SFC::Gamepad::Y:      return hiro::Keyboard::pressed("A");
+      case SFC::Gamepad::X:      return hiro::Keyboard::pressed("S");
+      case SFC::Gamepad::L:      return hiro::Keyboard::pressed("D");
+      case SFC::Gamepad::R:      return hiro::Keyboard::pressed("C");
+      case SFC::Gamepad::Select: return hiro::Keyboard::pressed("Apostrophe");
+      case SFC::Gamepad::Start:  return hiro::Keyboard::pressed("Enter");
+      }
+    }
+  }
+
+  return 0;
+}
diff --git a/higan/target-star-rod/program/medium.cpp b/higan/target-star-rod/program/medium.cpp
new file mode 100644
index 0000000..e955e4a
--- /dev/null
+++ b/higan/target-star-rod/program/medium.cpp
@@ -0,0 +1,39 @@
+auto Program::loadMedium() -> void {
+  if(!mediumQueue) return;
+
+  string location = mediumQueue.left();
+  string type = Location::suffix(location).trimLeft(".", 1L);
+
+  for(auto& medium : emulator->media) {
+    if(medium.type != type) continue;
+    return loadMedium(*emulator, medium);
+  }
+
+  mediumQueue.reset();
+}
+
+auto Program::loadMedium(Emulator::Interface& interface, const Emulator::Interface::Medium& medium) -> void {
+  unloadMedium();
+
+  mediumPaths.append(locateSystem({medium.name, ".sys/"}));
+  debugger->print(medium.name, "\n");
+
+  Emulator::audio.reset(2, audio->get(Audio::Frequency).get<uint>(44100));
+  emulator->connect(SFC::ID::Port::Controller1, SFC::ID::Device::Gamepad);
+  emulator->connect(SFC::ID::Port::Controller2, SFC::ID::Device::None);
+  emulator->load(medium.id);
+  emulator->set("Blur Emulation", false);
+  emulator->set("Color Emulation", false);
+  emulator->set("Scanline Emulation", false);
+  emulator->power();
+
+  presentation->setTitle(Location::base(mediumPaths(1)).trimRight("/"));
+  debugger->print(SFC::cartridge.information.manifest.cartridge, "\n");
+  debugger->suspend();
+}
+
+auto Program::unloadMedium() -> void {
+  emulator->unload();
+  debugger->print("Cartridge unloaded\n");
+  mediumPaths.reset();
+}
diff --git a/higan/target-star-rod/program/program.cpp b/higan/target-star-rod/program/program.cpp
new file mode 100644
index 0000000..29ced4a
--- /dev/null
+++ b/higan/target-star-rod/program/program.cpp
@@ -0,0 +1,78 @@
+#include "../laevateinn.hpp"
+#include "interface.cpp"
+#include "medium.cpp"
+#include "state.cpp"
+#include "utility.cpp"
+unique_pointer<Program> program;
+
+Program::Program(string_vector args) {
+  program = this;
+  Application::onMain({&Program::main, this});
+
+  emulator = new SFC::Interface;
+  emulator->bind = this;
+
+  new Settings;
+  new Debugger;
+  new Tracer;
+  new ConsoleWindow;
+  new AboutWindow;
+  new Presentation;
+  new CPUDebugger;
+  new CPURegisterEditor;
+  new SMPDebugger;
+  new SMPRegisterEditor;
+  new MemoryEditor;
+  new BreakpointEditor;
+  new PropertiesViewer;
+  new VRAMViewer;
+  new BGViewer;
+  new PaletteViewer;
+
+  higan_settings = BML::unserialize(string::read(locateHigan("settings.bml")));
+
+  video = Video::create();
+  video->set(Video::Handle, presentation->viewport.handle());
+  if(!video->init()) video = Video::create("None");
+  video->set(Video::Synchronize, settings["Video/Synchronize"].boolean());
+  video->set(Video::Filter, Video::FilterNearest);
+
+  audio = Audio::create();
+  audio->set(Audio::Handle, presentation->viewport.handle());
+  audio->set(Audio::Synchronize, settings["Audio/Synchronize"].boolean());
+  audio->set(Audio::Exclusive, false);
+  audio->set(Audio::Latency, 80u);
+  if(!audio->init()) audio = Audio::create("None");
+
+  input = Input::create();
+  input->set(Input::Handle, presentation->viewport.handle());
+  if(!input->init()) input = Input::create("None");
+
+  args.takeLeft();  //ignore program location in argument parsing
+  for(auto& argument : args) {
+    if(directory::exists(argument)) mediumQueue.append(argument);
+  }
+  loadMedium(*emulator, emulator->media[0]);
+
+  consoleWindow->setVisible();
+  presentation->setVisible();
+  consoleWindow->setFocused();
+  presentation->drawSplashScreen();
+
+  cpuDebugger->updateDisassembly();
+  smpDebugger->updateDisassembly();
+  memoryEditor->selectSource();
+  propertiesViewer->updateProperties();
+  vramViewer->updateTiles();
+  bgViewer->updateTiles();
+}
+
+auto Program::main() -> void {
+  debugger->run();
+}
+
+auto Program::quit() -> void {
+  unloadMedium();
+  settings.quit();
+  Application::quit();
+}
diff --git a/higan/target-star-rod/program/program.hpp b/higan/target-star-rod/program/program.hpp
new file mode 100644
index 0000000..490f596
--- /dev/null
+++ b/higan/target-star-rod/program/program.hpp
@@ -0,0 +1,34 @@
+struct Program : Emulator::Interface::Bind {
+  //program.cpp
+  Program(string_vector args);
+  auto main() -> void;
+  auto quit() -> void;
+
+  //interface.cpp
+  auto path(uint id) -> string override;
+  auto open(uint id, string name, vfs::file::mode mode, bool required) -> vfs::shared::file override;
+  auto load(uint id, string name, string type) -> maybe<uint> override;
+  auto videoRefresh(const uint32* data, uint pitch, uint width, uint height) -> void override;
+  auto audioSample(const double* samples, uint channels) -> void override;
+  auto inputPoll(uint port, uint device, uint index) -> int16 override;
+  auto dipSettings(Markup::Node node) -> uint override { return 0u; }
+
+  //medium.cpp
+  auto loadMedium() -> void;
+  auto loadMedium(Emulator::Interface& interface, const Emulator::Interface::Medium& medium) -> void;
+  auto unloadMedium() -> void;
+
+  //state.cpp
+  auto loadState(uint slot) -> bool;
+  auto saveState(uint slot) -> bool;
+
+  //utility.cpp
+  auto message(const string& text) -> void;
+
+  vector<string> mediumQueue;  //for command-line and drag-and-drop loading
+  vector<string> mediumPaths;  //for keeping track of loaded folder locations
+
+  Markup::Node higan_settings;
+};
+
+extern unique_pointer<Program> program;
diff --git a/higan/target-star-rod/program/state.cpp b/higan/target-star-rod/program/state.cpp
new file mode 100644
index 0000000..7958612
--- /dev/null
+++ b/higan/target-star-rod/program/state.cpp
@@ -0,0 +1,18 @@
+auto Program::loadState(uint slot) -> bool {
+  string filename = {mediumPaths(1), "state-", slot, ".bst"};
+  auto memory = file::read(filename);
+  if(memory.size() == 0) return debugger->print("Slot ", slot, " does not exist\n"), false;
+  serializer s(memory.data(), memory.size());
+  bool result = SFC::system.unserialize(s);
+  if(result) debugger->print("Loaded state from ", filename, "\n");
+  return result;
+}
+
+auto Program::saveState(uint slot) -> bool {
+  SFC::system.runToSave();
+  serializer s = SFC::system.serialize();
+  string filename = {mediumPaths(1), "state-", slot, ".bst"};
+  bool result = file::write(filename, s.data(), s.size());
+  if(result) debugger->print("Saved state to ", filename, "\n");
+  return result;
+}
diff --git a/higan/target-star-rod/program/utility.cpp b/higan/target-star-rod/program/utility.cpp
new file mode 100644
index 0000000..a32b800
--- /dev/null
+++ b/higan/target-star-rod/program/utility.cpp
@@ -0,0 +1,3 @@
+auto Program::message(const string &text) -> void {
+  debugger->print(text, "\n");
+}
diff --git a/higan/target-star-rod/properties/properties.cpp b/higan/target-star-rod/properties/properties.cpp
new file mode 100644
index 0000000..442c094
--- /dev/null
+++ b/higan/target-star-rod/properties/properties.cpp
@@ -0,0 +1,210 @@
+#include "../laevateinn.hpp"
+unique_pointer<PropertiesViewer> propertiesViewer;
+
+PropertiesViewer::PropertiesViewer() {
+  propertiesViewer = this;
+  setTitle("Properties Viewer");
+  setGeometry({128, 128, 300, 400});
+
+  layout.setMargin(5);
+  sourceLabel.setText("Source:");
+  sourceSelection.append(ComboButtonItem().setText("PPU"));
+  sourceSelection.append(ComboButtonItem().setText("DMA"));
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  properties.setFont(Font().setFamily(Font::Mono));
+
+  sourceSelection.onChange({ &PropertiesViewer::updateProperties, this });
+  update.onActivate({ &PropertiesViewer::updateProperties, this });
+}
+
+auto PropertiesViewer::updateProperties() -> void {
+  string output;
+
+  switch(sourceSelection.selected().offset()) {
+  case PPU: {
+    output.append("$2100  INIDISP\n"
+      "  Display Brightness = ", SFC::ppu.io.displayBrightness, "\n",
+      "  Display Disable = ", SFC::ppu.io.displayDisable, "\n",
+      "\n"
+    );
+
+    output.append("$2101  OBSEL\n"
+      "  OAM Tiledata Address = $", hex(SFC::ppu.obj.io.tiledataAddress << 1, 4L), "\n",
+      "  OAM Name Select = $", hex(SFC::ppu.obj.io.nameselect << 12 << 1, 4L), "\n",
+      "  OAM Base Size = ", SFC::ppu.obj.io.baseSize, "\n",
+      "\n"
+    );
+
+    output.append("$2102  OAMADDL\n"
+                  "$2103  OAMADDH\n"
+      "  OAM Priority = ", SFC::ppu.io.oamPriority, "\n",
+      "  OAM Base Address = $", hex(SFC::ppu.io.oamBaseAddress, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$2105  BGMODE\n"
+      "  BG Mode = ", SFC::ppu.io.bgMode, "\n",
+      "  BG Priority = ", SFC::ppu.io.bgPriority, "\n",
+      "  BG1 Tile Size = ", SFC::ppu.bg1.io.tileSize ? "16Ã16" : "8Ã8", "\n",
+      "  BG2 Tile Size = ", SFC::ppu.bg2.io.tileSize ? "16Ã16" : "8Ã8", "\n",
+      "  BG3 Tile Size = ", SFC::ppu.bg3.io.tileSize ? "16Ã16" : "8Ã8", "\n",
+      "  BG4 Tile Size = ", SFC::ppu.bg4.io.tileSize ? "16Ã16" : "8Ã8", "\n",
+      "\n"
+    );
+
+    output.append("$2106  MOSAIC\n"
+      "  BG1 Mosaic = ", 1u + SFC::ppu.bg1.io.mosaic, "Ã", 1u + SFC::ppu.bg1.io.mosaic, "\n",
+      "  BG2 Mosaic = ", 1u + SFC::ppu.bg2.io.mosaic, "Ã", 1u + SFC::ppu.bg2.io.mosaic, "\n",
+      "  BG3 Mosaic = ", 1u + SFC::ppu.bg3.io.mosaic, "Ã", 1u + SFC::ppu.bg3.io.mosaic, "\n",
+      "  BG4 Mosaic = ", 1u + SFC::ppu.bg4.io.mosaic, "Ã", 1u + SFC::ppu.bg4.io.mosaic, "\n",
+      "\n"
+    );
+
+    static string_vector screenSizes = {"32xÃ32y", "64xÃ32y", "32xÃ64y", "64xÃ64y"};
+
+    output.append("$2107  BG1SC\n"
+      "  BG1 Screen Size = ", screenSizes[SFC::ppu.bg1.io.screenSize], "\n",
+      "  BG1 Screen Address = $", hex(SFC::ppu.bg1.io.screenAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$2108  BG2SC\n"
+      "  BG2 Screen Size = ", screenSizes[SFC::ppu.bg2.io.screenSize], "\n",
+      "  BG2 Screen Address = $", hex(SFC::ppu.bg2.io.screenAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$2109  BG3SC\n"
+      "  BG3 Screen Size = ", screenSizes[SFC::ppu.bg3.io.screenSize], "\n",
+      "  BG3 Screen Address = $", hex(SFC::ppu.bg3.io.screenAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$210a  BG4SC\n"
+      "  BG4 Screen Size = ", screenSizes[SFC::ppu.bg4.io.screenSize], "\n",
+      "  BG4 Screen Address = $", hex(SFC::ppu.bg4.io.screenAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$210b  BG12NBA\n"
+      "  BG1 Tiledata Address = $", hex(SFC::ppu.bg1.io.tiledataAddress << 1, 4L), "\n",
+      "  BG2 Tiledata Address = $", hex(SFC::ppu.bg2.io.tiledataAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    output.append("$210c  BG34NBA\n"
+      "  BG3 Tiledata Address = $", hex(SFC::ppu.bg3.io.tiledataAddress << 1, 4L), "\n",
+      "  BG4 Tiledata Address = $", hex(SFC::ppu.bg4.io.tiledataAddress << 1, 4L), "\n",
+      "\n"
+    );
+
+    static string_vector vramMappings = {"Direct", "2-bit", "4-bit", "8-bit"};
+    output.append("$2115  VMAINC\n"
+      "  VRAM Increment Mode = ", SFC::ppu.io.vramIncrementMode ? "high" : "low", "\n",
+      "  VRAM Mapping        = ", vramMappings[SFC::ppu.io.vramMapping], "\n",
+      "  VRAM Increment Size = ", SFC::ppu.io.vramIncrementSize, "\n",
+      "\n"
+    );
+
+    output.append("$2116  VMADDL\n"
+                  "$2117  VMADDH\n"
+      "  VRAM Address = $", hex(SFC::ppu.io.vramAddress << 1, 4L),
+      " ($", hex(SFC::ppu.io.vramAddress, 4L), ")\n",
+      "\n"
+    );
+
+    output.append("$212c  TM\n"
+      "  BG1 Above = ", SFC::ppu.bg1.io.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG2 Above = ", SFC::ppu.bg2.io.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG3 Above = ", SFC::ppu.bg3.io.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG4 Above = ", SFC::ppu.bg4.io.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  OBJ Above = ", SFC::ppu.obj.io.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "\n"
+    );
+
+    output.append("$212d  TS\n"
+      "  BG1 Below = ", SFC::ppu.bg1.io.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG2 Below = ", SFC::ppu.bg2.io.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG3 Below = ", SFC::ppu.bg3.io.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG4 Below = ", SFC::ppu.bg4.io.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  OBJ Below = ", SFC::ppu.obj.io.belowEnable ? "Enabled" : "Disabled", "\n",
+      "\n"
+    );
+
+    output.append("$212e  TMW\n"
+      "  BG1 Above Window = ", SFC::ppu.window.io.bg1.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG2 Above Window = ", SFC::ppu.window.io.bg2.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG3 Above Window = ", SFC::ppu.window.io.bg3.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  BG4 Above Window = ", SFC::ppu.window.io.bg4.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "  OBJ Above Window = ", SFC::ppu.window.io.obj.aboveEnable ? "Enabled" : "Disabled", "\n",
+      "\n"
+    );
+
+    output.append("$212f  TSW\n"
+      "  BG1 Below Window = ", SFC::ppu.window.io.bg1.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG2 Below Window = ", SFC::ppu.window.io.bg2.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG3 Below Window = ", SFC::ppu.window.io.bg3.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  BG4 Below Window = ", SFC::ppu.window.io.bg4.belowEnable ? "Enabled" : "Disabled", "\n",
+      "  OBJ Below Window = ", SFC::ppu.window.io.obj.belowEnable ? "Enabled" : "Disabled", "\n",
+      "\n"
+    );
+
+    output.append("$2130  CGWSEL\n"
+      "  Direct Color = ", SFC::ppu.screen.io.directColor ? "Enabled" : "Disabled", "\n",
+      "  Blend Mode   = ", SFC::ppu.screen.io.blendMode   ? "Enabled" : "Disabled", "\n",
+      "  Window Color Below Mask = ", SFC::ppu.window.io.col.belowMask ? "Enabled" : "Disabled", "\n",
+      "  Window Color Above Mask = ", SFC::ppu.window.io.col.aboveMask ? "Enabled" : "Disabled", "\n",
+      "\n"
+    );
+
+    break;
+  }
+  
+  case DMA: {
+    for(uint c : range(8)) {
+      output.append("$43", c, "0  DMAP", c, "\n"
+        "  Direction        = ", SFC::cpu.channel[c].direction ? "decrement" : "increment", "\n",
+        "  (HDMA) Indirect  = ", SFC::cpu.channel[c].indirect,        "\n",
+        "  Reverse Transfer = ", SFC::cpu.channel[c].reverseTransfer, "\n",
+        "  Fixed Transfer   = ", SFC::cpu.channel[c].fixedTransfer,   "\n",
+        "  Transfer Mode    = ", SFC::cpu.channel[c].transferMode,    "\n",
+        "\n"
+      );
+
+      output.append("$43", c, "1  DDBAD", c, "\n"
+        "  Bus B Address = $", hex(SFC::cpu.channel[c].targetAddress, 2L), "\n",
+        "\n"
+      );
+
+      output.append("$43", c, "2  A1T", c, "L\n"
+                    "$43", c, "3  A1T", c, "H\n"
+        "  Bus A Address = $", hex(SFC::cpu.channel[c].sourceAddress, 4L), "\n",
+        "\n"
+      );
+
+      output.append("$43", c, "4  A1B", c, "\n"
+        "  Bus A Bank = $", hex(SFC::cpu.channel[c].sourceBank, 2L), "\n",
+        "\n"
+      );
+
+      output.append("$43", c, "5  DAS", c, "L\n"
+                    "$43", c, "6  DAS", c, "H\n"
+        "  (DMA) Transfer Size     = $", hex((SFC::cpu.channel[c].transferSize - 1) % 65536 + 1, 4L), "\n",
+        "  (HDMA) Indirect Address = $", hex( SFC::cpu.channel[c].indirectAddress,               4L), "\n",
+        "\n"
+      );
+
+      output.append("$43", c, "7  DASB", c, "\n"
+        "  (HDMA) Indirect Bank = $", hex(SFC::cpu.channel[c].indirectBank, 2L), "\n",
+        "\n"
+      );
+    }
+
+    break;
+  }
+
+  }
+
+  properties.setText(output);
+}
diff --git a/higan/target-star-rod/properties/properties.hpp b/higan/target-star-rod/properties/properties.hpp
new file mode 100644
index 0000000..a3fdf7a
--- /dev/null
+++ b/higan/target-star-rod/properties/properties.hpp
@@ -0,0 +1,17 @@
+struct PropertiesViewer : Window {
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Label sourceLabel{&controlLayout, Size{0, 0}, 5};
+      ComboButton sourceSelection{&controlLayout, Size{0, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{0, 0}};
+    TextEdit properties{&layout, Size{~0, ~0}};
+
+  enum : uint { PPU, DMA };
+
+  auto updateProperties() -> void;
+  PropertiesViewer();
+};
+
+extern unique_pointer<PropertiesViewer> propertiesViewer;
diff --git a/higan/target-star-rod/resource/resource.bml b/higan/target-star-rod/resource/resource.bml
new file mode 100644
index 0000000..32eae3d
--- /dev/null
+++ b/higan/target-star-rod/resource/resource.bml
@@ -0,0 +1,2 @@
+namespace name=resource
+  binary name=star_rod file=star-rod.png
diff --git a/higan/target-star-rod/resource/resource.cpp b/higan/target-star-rod/resource/resource.cpp
new file mode 100644
index 0000000..0b80fd2
--- /dev/null
+++ b/higan/target-star-rod/resource/resource.cpp
@@ -0,0 +1,2610 @@
+namespace resource {
+const nall::vector<uint8_t> star_rod = { //size: 83364
+  137,80,78,71,13,10,26,10,0,0,0,13,73,72,68,82,0,0,0,224,0,0,1,104,8,6,0,0,0,78,185,247,
+  224,0,0,0,4,103,65,77,65,0,0,177,143,11,252,97,5,0,0,0,9,112,72,89,115,0,0,14,194,0,0,14,
+  194,1,21,40,74,128,0,0,0,24,116,69,88,116,83,111,102,116,119,97,114,101,0,112,97,105,110,116,46,110,101,116,
+  32,52,46,48,46,54,252,140,99,223,0,0,255,142,73,68,65,84,120,94,236,189,5,188,109,101,181,254,255,255,41,221,
+  221,33,221,13,42,97,32,216,40,160,98,160,40,118,96,99,7,138,8,136,221,29,32,118,32,113,14,39,57,193,233,14,
+  234,208,112,14,187,206,238,21,179,215,26,255,231,59,230,124,247,94,7,189,247,23,87,239,213,123,247,220,159,241,153,107,
+  175,152,241,206,241,140,231,25,111,254,127,19,219,196,54,177,77,108,19,219,196,54,177,77,108,19,219,196,54,177,77,108,
+  255,69,91,187,157,28,85,189,156,216,38,182,137,237,63,107,51,107,236,85,20,217,116,217,32,251,234,237,137,109,98,155,
+  216,254,158,91,154,166,199,228,121,254,202,162,200,23,101,121,210,110,164,73,59,201,163,118,51,75,101,117,139,242,204,173,
+  145,101,237,122,214,188,172,153,212,94,105,102,155,87,63,159,216,38,182,137,237,127,183,181,219,237,45,91,173,124,145,236,
+  254,78,43,100,205,172,53,24,101,133,69,105,238,214,76,5,58,1,175,161,253,104,82,183,186,246,88,51,171,233,179,65,
+  223,215,162,193,135,6,154,181,87,140,140,140,236,44,48,62,181,58,205,196,54,177,77,108,79,222,0,136,36,228,36,1,
+  206,74,203,44,207,82,203,242,88,64,75,44,138,99,107,198,163,86,79,134,173,17,15,90,189,217,103,141,168,71,239,61,
+  33,235,178,102,34,75,245,58,121,76,182,193,70,235,93,54,18,245,234,189,141,2,227,144,13,70,163,223,173,78,53,177,
+  77,108,19,219,147,55,177,223,81,14,188,34,19,248,34,103,183,40,21,155,177,143,54,90,210,124,194,242,102,151,197,209,
+  227,250,255,1,1,114,157,128,182,86,224,91,83,90,138,233,127,222,195,162,123,180,127,64,32,45,1,89,143,0,103,223,
+  112,20,61,113,122,117,202,137,109,98,155,216,216,242,60,251,189,114,187,97,0,152,32,45,211,33,129,106,64,32,234,214,
+  94,150,220,103,73,188,210,210,100,133,165,233,98,203,178,121,122,61,83,54,163,178,233,22,167,147,44,141,239,208,235,89,
+  250,253,66,125,127,161,197,241,114,139,146,213,2,43,128,188,95,246,160,236,209,70,148,62,241,135,137,252,112,98,251,31,
+  191,21,69,241,246,188,200,138,102,222,18,211,53,100,163,2,156,36,163,100,101,148,222,47,91,35,64,9,76,233,28,107,
+  101,83,44,79,38,89,43,191,217,218,249,159,100,191,149,253,74,246,75,217,245,178,27,172,72,126,93,253,207,103,127,180,
+  86,242,39,189,119,91,5,208,185,2,227,82,29,27,214,188,223,250,135,30,187,171,221,190,123,151,234,82,38,182,137,237,
+  127,214,166,124,239,125,121,1,252,10,175,48,25,138,36,55,147,245,2,199,125,98,174,213,150,36,75,44,207,103,91,145,
+  78,177,86,124,147,0,245,59,107,103,55,234,245,207,181,255,137,236,251,110,173,236,155,202,21,191,173,215,223,208,103,95,
+  183,118,250,77,153,62,75,126,44,0,254,76,175,127,174,99,221,40,251,163,101,241,84,73,219,249,178,37,58,207,93,146,
+  172,119,61,48,26,111,88,89,79,186,230,76,48,226,196,246,63,102,43,138,230,59,169,100,41,178,72,224,27,41,129,151,
+  222,43,91,101,177,24,175,149,207,18,112,110,21,168,126,99,237,88,236,22,255,72,255,255,192,218,13,129,171,126,157,254,
+  191,214,218,205,47,106,127,149,128,118,133,62,251,188,190,123,165,94,107,31,85,22,127,73,123,89,252,21,49,231,119,245,
+  249,79,197,132,55,90,150,254,86,160,158,36,86,149,84,205,22,138,21,201,25,31,178,209,184,207,234,201,198,15,199,54,
+  114,112,117,153,19,219,196,246,223,111,107,183,227,131,196,126,235,139,52,178,172,217,99,89,254,136,87,160,196,98,166,34,
+  155,38,70,251,147,152,75,82,50,253,177,64,38,102,107,126,89,118,181,236,26,217,103,4,194,79,107,255,9,237,63,92,
+  217,135,170,253,7,4,78,153,191,190,92,246,81,125,239,83,2,161,190,159,124,86,0,20,88,51,49,100,246,61,7,99,
+  44,32,166,200,211,152,156,113,133,64,168,252,48,221,32,38,30,28,110,182,155,251,84,151,59,177,77,108,255,189,182,86,
+  43,181,52,23,243,37,3,146,133,235,44,201,150,75,106,42,199,75,149,219,101,0,239,135,2,141,152,46,22,224,226,207,
+  9,68,159,20,152,62,38,251,72,9,176,250,123,173,93,123,167,236,237,214,170,191,85,251,75,101,111,150,189,165,180,209,
+  119,104,255,46,125,239,61,110,173,232,125,214,106,234,119,137,142,17,9,144,176,100,118,157,101,217,119,5,246,235,45,143,
+  39,9,140,243,5,62,129,48,93,39,105,218,109,141,116,104,131,242,209,31,215,211,226,13,213,101,79,108,19,219,191,246,
+  214,110,183,119,40,138,124,105,139,118,189,100,163,37,241,67,86,20,139,37,7,111,87,126,247,103,129,226,103,98,190,111,
+  8,36,146,151,145,24,203,65,247,65,129,73,128,27,21,224,70,222,102,237,97,1,110,244,98,107,15,189,78,255,191,74,
+  255,95,164,253,107,100,175,208,247,180,31,126,181,94,203,248,206,200,27,180,7,152,0,244,45,86,52,116,140,198,251,4,
+  106,177,99,252,41,157,247,11,50,1,93,121,98,43,187,217,210,116,166,130,194,106,175,160,161,237,176,158,214,36,81,163,
+  91,148,27,110,81,221,194,196,54,177,253,107,110,146,156,31,149,173,110,183,229,212,2,95,28,9,124,217,106,107,21,147,
+  203,90,203,76,114,51,190,78,76,133,196,132,233,222,47,208,136,201,134,223,36,16,9,72,35,0,237,124,1,239,101,214,
+  30,148,13,189,208,218,3,103,203,206,209,255,231,202,158,175,247,244,255,176,246,195,250,108,232,69,250,254,5,122,95,230,
+  128,148,213,46,145,189,205,138,166,88,49,22,176,19,157,39,185,82,57,225,183,244,255,47,172,136,255,34,73,122,71,89,
+  57,19,63,166,124,112,192,162,60,181,162,85,252,165,186,141,137,109,98,251,215,219,204,226,131,105,223,203,138,166,24,167,
+  219,98,57,120,145,207,151,236,156,38,240,81,193,162,60,47,33,191,251,164,229,72,204,209,183,11,68,175,23,112,46,44,
+  65,55,248,2,217,115,4,182,179,172,189,241,233,178,19,101,199,203,142,173,246,71,87,251,96,39,201,244,189,254,51,244,
+  155,103,203,4,80,0,59,250,114,1,240,181,50,177,163,36,107,209,124,119,201,176,77,114,196,175,73,250,254,68,0,252,
+  189,100,241,29,22,69,119,89,35,90,175,96,49,36,16,182,232,149,243,179,137,174,108,19,219,191,220,38,217,185,181,192,
+  183,6,0,198,200,206,124,157,24,103,190,128,247,167,138,245,190,34,185,169,60,175,254,97,129,66,18,113,72,108,55,40,
+  105,57,248,146,146,225,250,159,33,19,160,250,14,179,86,223,211,172,213,187,159,108,79,107,117,239,33,219,199,138,238,221,
+  100,187,251,123,69,223,238,110,173,190,125,101,251,235,189,35,4,68,129,180,255,84,217,153,214,26,57,219,90,163,98,198,
+  81,129,186,38,128,215,196,174,98,68,175,188,73,4,194,232,75,202,67,127,46,16,222,170,107,165,153,66,82,52,22,91,
+  199,137,119,141,211,182,85,117,91,19,219,196,246,207,191,201,97,55,147,236,156,142,243,230,69,195,178,248,97,203,242,165,
+  214,46,104,94,248,145,12,214,251,148,0,32,240,13,10,124,131,2,197,160,192,1,99,9,48,237,62,177,89,223,193,150,
+  245,8,104,125,59,89,209,187,189,181,122,182,21,240,182,150,109,89,217,102,229,190,103,51,125,206,255,91,185,21,61,59,
+  232,61,192,184,183,236,32,1,241,72,217,9,58,182,142,139,68,29,150,52,173,41,143,172,189,193,90,117,73,221,72,32,
+  140,63,171,92,240,219,150,102,191,19,11,206,81,78,184,210,154,209,19,98,193,166,229,173,66,249,106,241,222,234,214,38,
+  182,137,237,159,127,19,251,29,15,248,138,86,234,237,124,69,177,72,210,243,118,1,239,87,114,120,49,95,243,227,98,190,
+  143,10,4,151,74,106,42,175,19,56,90,189,199,11,64,71,202,196,96,93,98,186,46,1,169,123,115,25,0,43,247,173,
+  238,45,244,254,54,229,30,235,209,251,2,96,105,229,235,162,79,64,236,17,32,187,4,216,174,237,244,219,29,244,222,174,
+  206,164,46,77,7,197,174,72,219,97,201,92,207,13,37,123,155,186,150,232,139,146,162,63,85,62,248,103,239,125,19,209,
+  183,52,238,183,40,142,20,68,10,229,176,237,237,171,219,155,216,38,182,127,222,173,221,206,78,21,251,141,230,121,102,113,
+  54,96,52,176,23,201,237,214,74,4,62,26,197,155,146,157,163,239,23,8,222,40,217,249,82,129,79,57,91,223,17,2,
+  139,216,174,75,204,213,179,141,64,243,212,18,84,14,34,0,199,126,91,75,187,118,182,188,107,23,139,159,216,195,178,174,
+  93,37,65,247,208,123,59,141,125,167,16,240,138,190,167,150,191,231,61,127,127,107,189,183,185,101,2,97,171,87,108,216,
+  127,154,206,253,92,157,91,82,119,244,53,2,224,155,44,143,148,19,38,159,144,125,69,224,251,141,24,123,146,69,217,10,
+  229,130,93,86,143,106,22,43,23,108,183,243,231,85,183,56,177,77,108,255,156,155,192,119,154,192,87,184,244,204,168,245,
+  124,80,204,55,67,242,238,70,107,69,52,172,95,45,135,151,228,163,153,96,64,32,232,63,209,101,98,218,187,155,229,235,
+  247,16,0,119,178,92,32,202,36,41,115,229,119,105,215,177,22,247,60,203,162,141,207,183,180,255,124,43,134,46,178,108,
+  232,141,150,110,120,173,21,195,23,91,178,254,21,22,247,191,220,226,190,115,44,238,61,195,162,158,99,45,233,221,75,210,
+  117,59,1,85,236,39,192,2,194,162,103,11,29,23,54,220,75,32,60,90,231,85,126,57,240,156,178,114,102,84,121,103,
+  237,141,94,67,218,78,63,39,240,125,95,50,244,119,186,246,197,2,224,227,98,240,225,9,0,78,108,255,252,155,242,190,
+  109,4,190,219,0,95,146,55,45,137,159,16,3,46,240,118,182,118,252,29,73,188,43,37,59,63,40,240,137,117,6,158,
+  175,188,236,24,177,156,88,73,64,129,221,138,13,219,91,220,189,189,141,116,31,96,163,221,199,89,58,242,122,129,246,99,
+  222,56,223,242,14,214,202,31,139,233,178,153,178,169,178,41,50,250,137,254,94,246,187,242,123,201,181,86,212,222,33,176,
+  190,200,154,93,71,90,44,41,219,124,160,100,205,86,215,142,98,67,164,233,30,58,239,225,58,255,41,98,65,201,209,81,
+  73,224,209,139,116,109,111,210,239,63,172,235,189,206,90,241,111,45,79,231,42,15,188,87,214,107,205,44,178,172,200,31,
+  173,110,117,98,155,216,254,185,54,179,236,44,129,47,9,224,107,166,125,202,155,238,146,51,79,147,172,251,185,152,239,26,
+  243,110,99,67,23,123,14,86,8,124,105,31,181,152,59,136,249,182,183,226,137,173,5,18,201,201,158,147,45,170,95,102,
+  121,242,125,129,235,47,21,216,230,89,187,181,168,178,165,127,181,47,138,37,218,47,150,45,147,45,44,129,73,175,154,232,
+  26,43,70,46,181,236,177,211,44,239,21,232,144,179,228,148,93,202,17,187,118,19,8,159,38,38,60,85,1,129,102,10,
+  26,243,47,22,11,190,67,215,251,25,5,140,239,27,29,193,227,120,149,242,64,6,251,214,45,17,8,181,253,175,234,150,
+  39,182,137,237,159,99,75,211,244,100,129,47,2,124,12,166,109,198,98,140,248,65,203,114,1,39,251,131,192,39,233,217,
+  248,164,181,135,47,237,96,190,189,149,151,41,63,147,52,76,123,182,183,244,129,195,44,30,126,181,181,210,31,9,64,147,
+  5,170,5,2,50,224,90,99,45,1,172,229,199,186,67,44,55,185,50,49,95,38,22,204,4,182,124,182,126,3,240,150,
+  73,58,174,210,247,1,39,160,188,83,159,253,69,249,231,87,45,233,127,149,181,30,62,92,146,116,7,201,209,205,61,39,
+  44,250,36,79,201,9,201,7,135,47,176,150,88,48,107,188,213,138,88,18,25,22,84,46,24,167,243,196,128,15,89,173,
+  49,44,6,76,39,0,56,177,253,115,109,121,158,253,82,224,171,151,53,158,153,69,217,160,165,201,253,150,231,243,5,136,
+  219,198,217,111,228,50,177,223,43,93,246,181,122,104,203,219,90,249,216,102,202,241,118,179,168,251,20,139,71,223,39,167,
+  191,209,82,253,174,16,144,74,86,155,37,9,250,59,201,200,43,172,118,255,251,108,100,229,235,108,100,217,203,108,100,233,
+  139,109,120,233,11,244,250,37,54,178,252,229,54,122,207,91,172,241,240,135,148,23,126,65,64,255,181,128,115,187,0,59,
+  183,100,195,150,246,200,214,236,103,150,12,191,203,154,61,39,88,179,123,151,178,162,70,32,164,77,177,189,81,12,57,120,
+  158,3,176,160,105,162,169,107,205,116,172,228,135,229,16,166,120,141,213,27,125,214,72,197,236,69,123,162,57,98,98,251,
+  231,216,4,188,89,37,235,149,224,75,232,102,150,60,34,230,91,32,167,167,189,239,6,129,79,76,50,244,41,129,239,77,
+  146,123,103,137,113,14,22,0,197,66,189,219,89,222,179,179,0,113,154,164,226,21,254,253,44,95,172,99,9,120,197,28,
+  203,107,55,90,178,254,67,54,178,228,217,86,155,122,144,53,167,238,109,209,237,187,202,118,182,116,202,22,86,76,223,210,
+  162,201,219,90,172,255,27,55,239,98,205,41,123,90,255,180,131,172,127,206,51,172,190,230,85,150,60,193,144,36,229,134,
+  173,249,98,210,21,146,195,2,99,126,131,128,244,110,171,245,30,43,233,187,147,87,204,180,186,197,130,61,71,233,250,206,
+  45,155,37,70,95,107,173,250,219,148,11,126,92,0,252,166,143,152,136,36,67,27,140,204,103,122,140,44,254,67,117,251,
+  19,219,196,246,95,183,153,165,39,10,128,181,0,192,52,27,178,40,162,177,125,181,0,68,55,179,223,200,129,145,158,180,
+  247,41,175,26,121,177,181,54,30,38,224,237,42,163,73,97,87,75,30,58,93,12,119,133,21,249,100,129,100,137,216,79,
+  224,203,39,89,222,253,5,27,90,118,174,13,223,126,144,13,79,221,222,242,201,219,88,49,9,219,218,218,147,159,106,237,
+  73,79,209,190,178,73,79,181,214,36,1,105,242,102,150,77,23,163,78,219,210,134,167,236,96,67,83,158,102,189,203,95,
+  107,217,208,143,172,200,230,74,150,42,63,44,102,233,92,63,179,198,208,37,214,236,58,90,204,75,59,35,13,251,251,89,
+  187,79,129,96,244,165,85,46,248,70,93,187,242,213,236,90,75,210,223,41,247,91,212,1,192,104,176,221,110,239,87,21,
+  195,196,54,177,253,215,108,2,221,23,2,248,90,173,166,88,226,113,57,231,42,129,104,142,28,254,143,98,181,239,9,124,
+  87,202,153,223,173,28,235,85,146,121,39,91,218,71,151,177,45,197,124,59,89,214,123,130,190,35,153,87,76,173,228,166,
+  0,146,254,217,226,135,223,103,195,179,79,181,250,100,201,68,129,174,53,85,32,155,50,110,173,41,146,141,216,164,205,199,
+  65,40,107,77,175,62,191,157,207,182,178,236,246,29,4,222,61,109,227,157,103,88,250,4,227,1,103,148,231,160,226,38,
+  249,158,197,27,159,103,89,247,190,10,4,146,194,212,144,210,52,65,3,189,131,80,44,24,191,79,82,246,11,150,103,215,
+  91,26,83,27,250,168,53,211,81,1,50,51,1,240,208,170,24,38,182,137,237,63,127,51,27,217,89,236,151,150,224,139,
+  172,16,59,228,41,149,37,115,196,132,127,180,34,250,177,36,221,87,229,200,31,177,150,192,87,108,60,83,192,123,154,69,
+  146,158,81,239,46,86,235,57,198,138,209,143,9,124,147,244,251,21,178,197,14,190,250,154,55,88,109,250,97,150,79,217,
+  214,242,233,219,88,38,230,115,118,155,38,96,205,0,92,202,219,166,108,102,197,84,129,102,178,216,16,80,2,190,10,164,
+  128,144,239,194,138,128,55,159,188,185,13,137,65,55,222,113,180,36,233,21,202,231,238,208,53,174,86,126,58,83,121,222,
+  53,86,239,62,85,215,36,160,119,211,205,109,95,73,228,147,42,0,210,67,230,173,2,32,195,150,190,231,253,67,189,57,
+  34,29,178,56,143,45,203,178,51,170,162,152,216,38,182,255,220,173,86,171,237,86,20,249,221,37,248,18,139,155,3,150,
+  70,235,196,122,179,37,31,111,178,34,249,137,100,229,151,172,53,242,9,107,13,188,77,78,253,60,57,247,193,150,245,237,
+  102,113,207,118,86,239,59,92,159,127,68,224,251,139,216,114,185,101,176,95,242,107,107,60,240,118,27,152,121,160,0,182,
+  165,3,170,53,125,115,203,166,109,86,2,10,144,241,154,247,3,35,222,14,208,244,191,242,65,222,43,102,60,213,115,195,
+  18,128,152,36,41,108,168,207,70,167,238,108,189,202,13,139,129,239,139,1,97,91,106,85,127,103,241,240,197,22,63,178,
+  143,229,189,59,138,1,119,213,181,30,47,169,76,135,237,87,90,171,65,30,168,235,140,190,42,32,254,81,185,45,163,230,
+  123,44,202,233,150,150,13,85,197,49,177,77,108,255,121,91,163,209,216,75,192,235,102,62,151,172,136,45,111,13,88,28,
+  63,84,229,87,211,36,219,126,46,135,253,138,164,39,125,60,197,32,3,47,19,248,142,246,238,101,121,239,78,150,247,29,
+  168,156,236,205,2,234,31,189,194,37,47,86,10,176,55,89,244,192,187,109,112,198,129,22,1,62,229,113,197,52,129,111,
+  202,214,214,156,182,181,165,211,181,159,186,131,37,211,183,23,160,36,95,245,57,214,186,93,223,187,93,12,169,220,47,21,
+  88,147,105,91,88,50,21,240,42,39,172,64,154,76,37,55,124,170,128,188,173,64,248,52,27,88,253,22,203,163,91,117,
+  237,75,61,31,108,167,87,91,163,235,88,201,97,218,4,233,43,170,224,48,76,239,24,242,192,183,42,48,124,76,247,244,
+  101,201,208,95,73,94,47,178,90,189,71,44,216,20,131,78,0,112,98,251,47,216,218,237,226,125,48,95,150,215,149,23,
+  245,90,146,0,190,149,14,190,118,250,27,107,55,191,38,251,148,28,248,18,49,224,75,172,181,241,84,163,99,53,57,86,
+  220,181,151,164,232,121,222,28,208,106,205,179,56,91,38,214,156,33,6,186,220,70,102,30,101,233,172,237,5,184,173,108,
+  116,218,118,54,124,199,158,86,155,189,191,141,222,121,136,213,22,157,104,141,149,103,89,125,213,153,86,95,166,215,11,142,
+  177,198,252,131,45,154,177,187,141,76,219,89,160,221,90,96,221,74,96,148,77,146,52,21,72,93,178,86,57,97,33,217,
+  218,146,36,205,116,220,141,51,79,16,11,126,83,12,72,195,190,100,111,254,91,107,14,188,202,82,31,222,180,139,0,120,
+  168,181,7,78,31,3,96,209,124,191,2,202,23,5,194,95,90,18,207,177,70,204,172,109,195,2,96,58,1,192,137,237,
+  63,119,51,179,173,74,217,153,73,142,81,227,249,128,37,202,251,96,146,86,242,91,1,79,142,205,136,118,230,100,97,212,
+  250,198,103,138,245,246,171,250,98,238,106,249,163,79,215,231,215,200,241,103,202,22,202,137,167,91,182,225,147,54,60,251,
+  120,139,166,237,106,217,140,29,108,120,238,129,182,113,217,233,86,123,232,37,150,117,189,86,114,80,18,182,198,196,74,159,
+  20,192,63,169,124,140,9,153,62,106,197,208,101,150,61,241,58,139,238,58,221,154,179,15,180,100,242,14,98,205,109,74,
+  70,12,249,34,249,32,224,19,171,34,87,97,197,198,228,61,109,112,213,27,21,4,110,211,53,172,208,181,223,105,89,227,
+  227,214,236,218,223,251,141,182,122,246,211,117,31,171,235,39,15,188,88,50,244,189,98,193,43,4,62,102,84,155,33,240,
+  49,103,204,192,4,0,39,182,255,252,45,0,176,104,13,89,35,218,32,6,91,43,7,158,43,118,248,147,0,162,220,170,
+  121,149,181,135,169,241,124,181,88,228,92,107,73,206,229,189,2,69,247,86,22,117,31,98,57,19,35,229,127,18,123,210,
+  75,101,190,181,70,191,99,131,243,158,97,141,59,246,178,193,233,251,90,115,245,89,150,15,80,253,255,9,129,141,169,6,
+  101,25,195,131,152,201,76,204,154,145,139,125,213,50,89,43,147,204,205,174,182,118,252,73,203,135,47,181,198,93,167,218,
+  240,244,61,36,77,149,243,1,60,0,136,12,149,252,108,77,213,123,128,82,150,78,221,198,6,22,157,169,223,124,71,215,
+  176,188,180,244,103,22,245,28,111,5,29,181,187,119,23,0,15,175,106,67,95,37,0,190,71,215,243,105,5,152,111,11,
+  128,211,4,190,123,189,57,34,202,234,69,81,100,239,171,138,102,98,155,216,254,177,91,146,36,135,9,124,87,230,69,226,
+  21,17,105,122,159,156,119,129,64,112,171,181,162,235,5,190,47,201,97,223,39,123,165,192,119,142,181,122,143,177,84,57,
+  95,210,179,165,213,187,197,130,67,111,176,86,254,251,42,239,91,44,6,189,201,106,119,93,108,27,103,31,108,181,149,39,
+  40,7,123,141,142,241,1,73,210,171,5,174,239,106,15,227,252,206,45,79,127,171,223,50,130,254,47,62,66,129,217,175,
+  211,228,23,2,133,242,205,228,91,2,16,243,131,126,208,134,30,57,215,234,119,238,166,92,112,75,43,166,151,121,32,249,
+  32,181,165,133,242,72,94,103,2,232,192,172,253,44,122,244,131,206,126,14,192,226,102,203,134,95,108,105,15,29,180,119,
+  44,1,56,240,12,177,239,5,214,170,95,170,115,40,159,77,105,144,255,179,69,241,74,129,112,131,0,88,67,9,204,122,
+  244,209,71,39,70,201,79,108,255,248,173,40,106,239,105,37,53,1,160,79,142,247,160,28,87,249,83,113,75,89,233,2,
+  248,134,47,23,107,48,157,196,115,148,247,29,225,189,76,242,222,45,172,214,189,175,197,3,2,101,126,163,126,35,230,107,
+  223,167,223,76,183,232,161,15,217,198,185,39,216,200,26,125,191,33,57,153,93,35,70,197,201,127,41,176,77,245,62,160,
+  173,98,157,190,255,136,126,167,125,235,17,43,242,135,181,127,200,242,108,149,206,189,68,0,4,252,191,145,125,87,32,185,
+  78,255,127,214,234,143,188,192,6,231,238,165,92,114,23,7,156,179,33,121,224,180,178,221,48,19,16,27,202,29,27,247,
+  73,98,102,55,121,195,127,198,36,192,181,183,75,34,31,104,69,223,246,186,254,67,172,221,47,185,172,28,214,27,228,155,
+  151,235,216,215,72,110,255,222,226,116,161,53,89,28,198,1,232,211,84,236,88,21,209,196,54,177,253,99,54,73,173,143,
+  230,69,189,157,228,3,146,159,247,203,249,23,139,165,232,12,253,11,57,231,151,205,167,15,164,155,217,192,11,37,59,143,
+  244,113,125,116,176,142,186,118,183,120,227,203,229,232,63,16,112,196,150,206,54,11,45,217,112,149,192,247,12,27,94,122,
+  170,21,195,239,181,44,249,134,100,229,175,44,201,238,144,83,11,92,128,46,235,23,104,27,250,63,209,255,245,234,117,170,
+  215,205,242,255,118,183,236,94,129,117,166,229,76,226,155,232,28,200,210,248,19,214,88,119,182,53,103,236,41,25,186,133,
+  181,102,10,128,178,98,154,152,80,82,148,28,145,158,50,35,11,158,46,224,234,250,93,134,50,39,233,23,44,235,62,65,
+  50,116,7,221,195,1,21,0,95,44,70,135,153,223,35,214,189,74,172,255,75,129,112,174,197,209,195,198,226,49,76,169,
+  63,1,192,137,237,31,186,165,105,122,98,94,52,5,190,97,1,96,131,21,197,10,49,19,179,87,139,169,162,175,88,139,
+  26,207,193,183,203,206,151,211,158,34,214,219,211,226,110,70,173,239,97,73,175,24,164,169,252,173,152,170,223,210,49,123,
+  150,229,67,95,178,141,11,206,178,190,217,199,89,220,117,145,183,177,181,105,184,47,232,175,41,134,107,11,120,54,84,217,
+  176,165,197,160,76,204,155,215,45,111,141,40,0,140,106,95,183,162,61,36,27,208,247,215,233,122,230,10,188,191,178,52,
+  251,186,174,235,171,86,12,94,102,205,37,71,89,49,83,172,71,46,88,89,58,117,11,129,80,57,233,228,109,108,100,218,
+  193,86,244,43,120,232,188,89,46,41,154,254,208,138,174,179,45,239,222,217,242,190,253,45,101,86,53,31,162,244,26,49,
+  244,59,4,236,207,139,157,127,38,150,158,35,6,100,222,208,97,49,114,54,1,192,137,237,31,183,201,185,88,48,115,69,
+  209,30,21,67,136,113,90,107,100,146,107,202,199,90,209,247,45,101,122,248,58,224,83,174,212,123,178,181,186,15,146,244,
+  220,206,226,190,29,109,180,247,20,43,234,87,57,232,144,158,45,229,91,173,232,59,54,178,250,44,219,56,239,48,171,223,
+  123,190,100,221,103,196,40,127,16,248,196,66,109,192,55,42,139,100,176,28,251,134,76,82,79,140,23,152,176,104,213,100,
+  252,15,35,138,9,109,163,222,127,64,231,185,83,199,250,165,114,199,111,8,76,87,90,178,254,66,171,205,221,89,192,19,
+  243,193,132,161,86,116,198,102,250,127,51,171,205,220,199,26,15,188,91,247,66,115,132,44,255,131,238,227,21,94,9,195,
+  140,106,237,141,71,249,44,106,158,211,210,143,53,254,164,130,5,35,35,110,87,14,124,183,172,95,50,52,153,0,224,196,
+  246,143,217,138,34,125,125,154,37,83,89,60,165,213,2,124,200,189,185,114,212,223,10,72,63,85,46,248,101,203,234,239,
+  19,75,188,74,140,241,108,129,239,64,203,187,118,16,235,237,110,35,221,199,90,26,125,92,160,155,36,91,161,223,202,196,
+  152,181,181,175,176,141,51,15,177,218,154,179,172,53,250,41,201,206,111,151,189,96,218,93,2,18,108,134,180,4,124,177,
+  12,240,149,0,116,16,58,0,59,223,231,186,144,164,128,182,71,231,184,199,65,216,206,148,147,138,9,139,232,67,54,180,
+  228,72,203,239,16,227,205,216,210,129,215,154,85,50,33,61,102,146,169,219,233,122,196,192,244,222,97,204,32,237,152,181,
+  183,74,134,238,37,0,238,237,243,211,248,228,77,62,133,225,155,197,244,244,136,249,134,229,241,45,101,69,76,218,111,205,
+  9,0,78,108,255,136,45,207,147,11,5,64,253,137,113,98,192,135,115,43,135,203,111,18,187,124,79,206,120,149,229,62,
+  173,196,171,229,164,207,18,248,24,228,186,139,37,61,219,91,179,235,56,203,233,227,153,255,94,0,185,211,242,98,145,55,
+  83,212,239,127,171,13,44,56,209,106,139,79,177,246,240,71,5,144,239,88,150,253,73,224,121,176,98,49,192,23,192,133,
+  193,110,195,50,73,209,142,207,90,72,79,177,159,191,22,0,75,96,2,82,64,40,134,22,59,179,84,25,21,50,205,117,
+  103,88,60,115,231,146,1,103,62,181,100,65,55,88,113,27,27,94,244,124,49,219,95,244,59,228,241,76,49,221,229,150,
+  116,31,80,206,25,211,199,72,121,26,228,1,224,37,186,7,221,111,250,37,229,129,191,82,254,199,60,49,235,173,145,213,
+  133,191,228,200,170,216,38,182,137,237,239,179,181,90,217,204,52,31,17,59,245,149,224,147,68,107,101,172,221,240,83,57,
+  236,213,101,55,179,161,55,26,19,26,181,122,14,147,252,220,93,78,187,133,69,176,32,35,222,189,145,155,230,6,186,123,
+  77,183,230,67,31,178,190,121,71,217,232,146,227,197,150,239,148,35,127,91,142,252,27,177,35,21,46,131,178,191,5,62,
+  49,162,231,129,236,5,196,240,153,241,125,0,199,255,176,96,217,31,181,124,175,203,243,185,140,190,168,233,23,45,99,178,
+  166,249,146,148,119,8,116,176,223,108,129,144,215,51,159,98,217,244,237,108,100,222,105,186,222,235,117,173,244,13,21,11,
+  54,36,93,197,222,25,179,178,245,209,49,251,84,49,245,139,5,64,6,232,190,71,247,126,149,216,255,6,229,130,179,173,
+  17,63,226,107,213,199,121,243,174,170,216,38,182,137,237,63,190,41,231,187,195,7,214,74,98,121,94,198,136,242,92,44,
+  145,255,76,192,98,22,107,106,60,223,90,182,245,245,148,204,151,245,110,110,141,238,61,45,218,40,182,200,168,89,100,158,
+  150,213,250,205,52,203,122,174,176,193,37,207,176,193,133,71,91,186,254,53,98,38,218,249,126,85,30,215,193,23,64,215,
+  97,128,204,129,87,129,112,147,207,0,229,248,239,0,31,61,115,202,156,81,114,180,117,151,206,251,103,75,105,184,87,238,
+  54,188,112,127,203,102,109,46,0,10,124,115,100,128,80,108,88,204,216,218,26,179,14,22,216,190,224,215,226,227,16,179,
+  239,91,212,119,134,79,117,216,234,219,75,121,224,209,98,249,23,136,5,47,178,162,161,92,55,249,156,202,133,197,62,103,
+  72,130,42,15,84,25,101,121,60,1,192,137,237,239,179,201,161,79,144,244,28,161,141,171,200,149,151,57,136,166,138,177,
+  110,144,201,161,233,14,198,106,67,3,207,147,115,50,129,238,110,98,190,205,172,222,189,139,213,135,206,43,151,251,42,230,
+  88,225,204,119,135,229,131,87,216,232,242,211,29,124,205,135,94,46,7,254,130,242,200,95,88,158,206,20,104,30,181,220,
+  165,36,236,87,49,154,141,148,32,250,43,240,85,185,95,144,163,29,0,28,175,176,9,149,54,143,89,146,77,19,80,126,
+  224,193,162,190,236,56,139,238,220,166,108,142,152,91,1,80,64,68,150,214,166,239,111,241,195,239,245,107,109,211,252,145,
+  255,198,162,193,11,45,170,102,226,110,111,84,30,56,168,123,29,125,149,0,248,54,93,255,39,21,60,4,210,244,22,107,
+  198,84,196,60,97,67,89,54,1,192,137,237,63,190,181,219,217,211,27,201,112,30,231,67,22,101,143,11,32,247,202,49,
+  103,139,21,196,86,222,193,250,179,98,148,119,9,124,202,155,250,142,182,162,103,87,177,223,246,214,232,217,219,70,122,207,
+  150,228,211,119,220,145,151,201,145,5,194,225,239,217,208,242,115,109,228,206,131,44,186,239,92,201,187,171,44,139,127,110,
+  153,192,215,110,223,95,2,204,65,85,129,173,61,226,205,13,101,222,55,96,89,139,247,144,158,0,20,0,134,10,24,192,
+  202,247,4,86,255,29,149,48,65,194,242,126,175,174,97,137,242,192,95,90,158,124,209,70,238,58,211,162,57,219,143,51,
+  32,86,229,130,233,204,29,173,185,246,2,5,151,41,229,117,23,183,91,54,244,78,107,246,236,175,251,219,81,247,121,152,
+  0,24,186,164,49,81,211,199,36,111,191,101,69,54,89,224,91,99,163,81,143,53,146,161,9,0,78,108,255,177,173,221,
+  110,195,124,181,162,232,23,131,61,42,240,81,233,66,115,3,163,218,191,37,240,136,249,234,202,221,70,95,110,173,141,200,
+  78,129,175,103,59,229,124,187,90,189,231,20,43,146,107,229,192,52,55,48,218,124,174,126,243,67,27,89,253,58,27,88,
+  116,156,213,30,120,158,181,234,159,176,72,239,165,201,116,43,90,15,9,36,180,245,1,188,78,169,137,33,47,1,96,120,
+  191,98,60,103,57,0,134,241,63,22,152,146,239,242,61,216,19,0,234,189,246,93,98,193,63,40,120,124,205,226,199,47,
+  180,26,121,32,192,131,1,49,94,11,144,249,220,173,109,104,201,153,186,79,125,215,167,56,156,109,113,244,121,159,75,180,
+  197,84,21,228,129,131,250,156,166,136,218,37,150,71,239,23,88,153,41,237,15,98,193,133,2,225,6,107,102,163,19,0,
+  156,216,254,223,55,49,223,25,73,18,55,243,214,176,197,217,19,114,194,114,116,3,205,13,237,228,59,98,190,207,149,13,
+  209,35,231,89,187,255,100,107,245,50,178,97,7,203,186,247,17,83,156,106,69,244,41,111,110,40,29,120,137,181,154,191,
+  180,250,125,175,179,225,89,199,219,240,242,179,45,99,126,207,76,199,97,130,166,246,125,2,200,198,18,48,98,176,180,96,
+  15,24,49,128,84,130,40,43,2,32,75,38,44,90,35,214,82,190,88,56,200,2,16,97,62,64,88,201,86,25,13,244,
+  165,60,101,237,193,219,100,223,177,124,227,59,172,126,231,129,227,236,119,167,242,193,10,136,249,220,45,109,104,254,225,10,
+  46,63,214,181,211,83,103,145,114,212,111,89,220,45,134,151,4,165,57,34,119,0,82,19,250,58,5,34,41,128,228,42,
+  43,210,95,74,37,44,80,14,232,61,98,54,42,32,28,87,21,231,196,54,177,253,159,111,237,118,122,66,145,167,73,28,
+  71,114,40,57,110,235,65,57,151,36,98,254,107,229,58,2,77,124,133,156,243,125,214,30,86,254,182,241,52,129,239,0,
+  129,111,123,99,244,120,220,117,130,181,70,63,236,236,81,20,243,196,154,43,228,156,183,90,243,190,183,219,192,252,67,108,
+  120,197,73,114,254,119,137,45,190,165,124,76,76,10,176,105,42,112,176,133,90,77,216,174,4,32,205,11,165,188,12,204,
+  22,128,9,96,55,90,75,239,197,121,144,164,88,0,162,108,147,90,82,94,63,42,169,59,67,231,254,174,21,245,143,88,
+  186,244,104,49,222,102,14,186,148,124,112,110,249,186,37,0,142,204,223,207,178,46,24,156,142,217,98,240,236,122,107,13,
+  136,213,251,118,148,237,237,65,167,236,146,118,161,202,226,45,98,192,43,44,73,126,102,105,60,69,0,124,192,135,38,69,
+  105,253,162,170,72,39,182,137,237,255,108,203,178,236,180,36,47,70,91,81,67,204,55,42,0,209,233,153,169,4,255,36,
+  39,251,158,152,173,154,197,26,199,235,23,248,250,148,23,117,239,46,103,221,81,121,223,113,150,14,191,87,224,211,119,61,
+  239,187,83,204,113,171,37,235,63,97,221,115,78,21,243,29,175,207,149,51,165,95,23,16,254,32,134,92,36,80,208,216,
+  30,164,101,5,24,223,139,193,116,254,130,26,209,74,78,166,206,128,128,47,48,33,32,12,175,245,157,20,160,234,119,206,
+  126,28,167,147,25,177,30,5,133,37,202,215,190,111,105,253,163,22,173,125,166,165,179,196,104,14,188,0,190,18,128,205,
+  59,118,182,250,58,122,196,208,32,79,59,226,205,150,13,156,39,137,189,187,197,125,187,41,240,48,54,144,17,242,21,0,
+  233,17,147,126,95,1,106,170,197,241,90,175,9,157,0,224,196,246,127,188,209,115,35,207,243,151,21,69,86,228,173,166,
+  101,249,160,192,183,193,90,57,149,16,127,113,231,98,217,230,118,227,19,138,252,111,178,98,232,44,49,158,36,92,55,139,
+  156,236,36,230,59,208,178,193,183,9,52,191,147,195,50,233,237,98,49,205,100,75,5,190,193,37,79,183,161,229,39,91,
+  218,125,137,228,223,87,148,135,253,84,159,43,39,164,115,181,87,168,84,149,39,190,215,255,57,210,145,215,72,81,172,4,
+  104,209,170,152,178,221,235,255,111,98,225,251,176,96,5,228,86,26,24,177,94,129,119,72,247,115,183,229,201,143,4,152,
+  79,11,96,47,177,104,250,238,86,220,185,99,9,60,100,168,44,153,187,149,197,243,118,177,230,93,84,196,76,86,57,48,
+  190,113,170,69,131,239,212,125,238,97,113,175,64,219,203,114,102,200,208,151,121,143,152,118,252,113,229,184,223,176,86,244,
+  71,177,32,115,133,118,77,0,240,31,189,201,105,183,249,191,181,118,187,189,117,245,243,127,154,77,215,181,185,128,183,54,
+  41,10,203,125,62,23,122,143,208,214,183,90,128,153,35,64,252,82,142,120,157,192,247,17,201,206,203,100,231,137,249,14,
+  83,78,196,146,97,59,201,118,179,100,128,238,91,63,148,163,206,20,192,150,122,247,180,188,231,106,27,92,246,108,27,92,
+  126,130,37,93,175,85,206,248,37,43,226,223,232,179,105,58,246,61,2,4,61,93,0,91,5,26,7,83,96,67,64,5,
+  155,133,215,189,146,163,65,170,86,239,109,98,0,149,99,148,224,115,64,135,215,50,175,73,213,121,24,50,149,209,65,59,
+  189,86,193,225,213,22,205,63,208,138,89,59,8,120,91,90,107,158,100,232,188,109,245,255,214,86,204,223,197,70,86,60,
+  199,90,49,115,212,48,90,227,14,93,255,39,172,169,160,211,100,57,180,222,131,74,0,14,191,204,90,44,220,210,148,42,
+  96,232,83,244,123,177,251,18,107,38,93,214,200,210,245,42,219,137,229,171,255,94,155,156,244,61,178,15,99,81,22,125,
+  56,47,82,99,2,162,88,17,59,205,89,33,103,212,124,241,145,108,68,22,233,117,226,198,130,254,88,249,127,60,26,101,
+  117,253,254,111,91,162,227,134,115,100,69,241,225,36,74,252,117,120,63,43,202,255,255,61,19,144,254,230,251,165,37,58,
+  79,219,143,205,177,56,103,51,173,221,161,189,242,61,93,127,198,112,158,251,5,144,37,14,166,86,194,250,13,223,146,49,
+  159,203,219,44,239,191,80,57,144,242,60,6,169,138,253,210,174,253,172,213,255,82,175,152,201,125,202,119,230,129,89,34,
+  134,252,129,13,175,124,153,13,44,62,201,154,143,41,87,140,174,144,51,255,212,10,255,14,227,249,54,56,32,202,252,14,
+  0,2,188,206,252,174,175,218,243,191,24,175,16,248,156,249,58,217,111,156,29,203,125,0,29,108,24,228,39,0,47,65,
+  88,190,126,204,114,230,38,141,191,108,153,24,57,93,116,148,21,179,119,22,240,182,175,108,59,129,81,54,111,47,27,89,
+  162,156,175,249,51,151,173,222,49,59,253,134,165,61,71,137,201,183,22,0,247,115,9,238,147,10,215,94,87,173,33,120,
+  101,213,35,102,190,69,35,15,73,134,214,132,191,9,0,254,135,182,162,40,222,154,23,121,191,192,214,31,165,141,54,0,
+  203,138,18,100,84,80,68,89,191,162,107,191,10,251,9,89,143,216,163,79,239,109,144,252,96,249,173,39,4,56,102,203,
+  146,28,201,250,252,243,40,219,88,253,110,88,70,207,121,153,0,28,49,123,180,239,89,240,177,174,223,54,244,90,123,201,
+  168,84,255,23,121,195,18,189,102,73,231,60,38,162,151,159,167,10,0,81,158,201,73,232,165,146,234,243,76,239,177,10,
+  81,36,201,150,233,247,77,229,109,124,87,191,43,18,93,123,67,215,222,208,158,96,80,30,131,33,52,140,233,75,242,110,
+  177,204,67,114,54,230,68,97,97,147,27,229,168,204,231,162,252,166,246,14,43,250,95,174,124,239,56,243,213,131,196,2,
+  73,247,174,150,108,60,71,142,247,45,129,175,170,112,41,150,90,49,242,3,27,89,243,114,7,223,232,6,214,85,248,140,
+  28,243,187,186,135,91,75,240,57,243,13,235,92,128,130,118,188,170,130,5,134,243,241,124,2,25,123,255,222,19,29,166,
+  124,241,111,178,96,39,107,114,172,74,138,250,241,3,16,41,51,222,123,66,215,122,123,89,153,52,122,185,53,22,159,108,
+  249,60,5,145,249,146,149,243,3,16,119,182,98,222,30,54,184,224,16,5,155,175,168,220,22,234,222,88,191,254,55,146,
+  159,103,42,15,220,74,10,96,119,1,144,254,171,207,215,113,94,35,160,190,83,229,240,41,129,239,7,150,197,211,45,137,
+  30,80,185,142,76,0,240,255,117,147,84,60,168,213,202,111,160,79,97,148,199,114,90,156,125,72,133,10,128,4,164,84,
+  145,180,120,84,242,228,1,237,31,18,0,238,115,43,71,105,223,171,215,12,209,89,163,7,183,166,122,125,143,246,48,11,
+  223,97,255,128,156,225,81,217,227,110,173,214,99,218,111,16,104,112,50,57,96,190,209,115,158,86,49,40,199,221,40,96,
+  43,127,105,247,89,33,199,165,105,160,165,125,51,29,240,107,162,22,48,21,120,179,66,160,206,25,35,55,42,0,151,13,
+  216,236,25,166,19,105,207,239,146,124,72,123,2,192,160,174,187,71,191,233,209,123,56,254,122,25,21,46,43,37,59,239,
+  208,249,127,47,240,125,79,204,245,25,7,31,82,139,26,207,130,229,161,187,149,35,245,108,103,13,36,88,114,173,202,96,
+  174,174,255,94,253,118,153,216,224,39,214,88,251,82,171,45,57,213,154,235,74,240,21,201,15,101,55,251,177,195,8,7,
+  58,78,151,61,94,42,240,193,108,14,62,128,22,246,24,101,20,12,214,228,58,57,6,32,132,37,3,0,49,24,17,171,
+  164,171,131,176,147,1,1,227,19,146,192,243,116,143,186,183,248,147,54,42,153,153,44,220,183,4,30,0,92,160,156,112,
+  246,142,150,207,21,3,46,56,192,178,199,62,170,160,50,77,207,142,94,60,183,89,54,240,82,229,190,250,110,47,83,84,
+  28,95,77,85,200,34,158,151,72,45,92,46,25,254,13,229,152,147,45,138,238,243,192,54,1,192,255,203,141,138,8,177,
+  72,150,234,69,156,36,122,80,77,203,155,114,104,128,151,62,40,167,45,1,230,221,177,124,212,52,253,27,145,85,202,149,
+  100,69,49,91,160,81,142,227,198,66,145,79,54,106,7,169,89,195,24,115,70,59,19,86,86,92,56,251,184,173,146,221,
+  45,135,161,211,51,123,100,27,246,96,101,157,142,137,163,2,224,192,18,97,143,179,242,154,61,64,231,59,24,191,39,8,
+  232,216,126,252,187,170,243,233,26,138,25,146,138,2,95,42,7,109,126,190,108,104,247,230,134,83,4,60,49,5,178,179,
+  123,39,75,251,78,20,248,174,210,189,206,20,200,9,48,75,4,190,159,91,252,240,69,54,188,228,56,107,174,121,174,156,
+  242,19,98,190,159,168,12,97,62,125,71,32,75,21,36,202,154,205,144,243,5,19,219,181,184,86,64,198,158,113,128,76,
+  109,200,181,18,172,202,125,139,6,251,177,251,170,88,210,193,86,129,206,173,51,31,12,50,23,89,170,243,242,27,93,107,
+  154,254,200,24,237,30,61,122,158,101,75,14,44,193,55,127,87,217,110,46,73,211,89,123,88,109,254,30,214,88,39,112,
+  249,92,165,228,129,179,45,30,121,135,100,247,222,146,224,219,171,76,88,184,229,44,1,80,229,83,187,88,126,242,94,229,
+  130,95,86,176,249,179,0,184,86,65,17,213,83,155,92,185,214,196,246,191,219,138,34,95,36,41,151,166,202,213,144,105,
+  176,78,145,244,10,124,93,98,161,135,229,12,56,42,64,97,152,10,0,155,164,135,195,42,172,172,208,250,107,69,191,27,
+  220,124,189,243,244,122,237,127,161,132,255,231,218,51,22,237,199,122,239,71,178,95,200,193,249,76,223,205,245,61,100,158,
+  87,114,240,154,213,92,101,140,48,160,163,115,118,139,246,178,77,0,204,42,176,2,59,230,128,225,53,1,32,0,184,211,
+  200,93,8,16,236,249,159,215,24,205,10,10,0,126,188,219,101,220,199,45,114,200,63,232,218,152,78,2,217,249,57,129,
+  239,93,114,174,87,72,106,157,37,224,61,77,210,115,91,175,116,73,31,61,89,236,241,89,253,110,138,156,140,117,250,228,
+  156,217,31,44,186,255,181,54,178,232,25,98,192,179,44,31,250,176,21,202,153,10,95,133,72,229,38,160,192,200,62,148,
+  201,1,8,80,170,124,47,72,79,7,96,197,196,72,97,7,160,130,143,7,136,176,39,96,72,69,56,64,245,253,0,192,
+  96,14,196,78,9,202,190,178,49,0,222,171,251,252,141,100,232,117,150,110,124,163,69,139,15,176,214,162,221,101,123,57,
+  0,91,139,196,136,2,95,180,112,31,27,90,241,108,61,27,61,91,159,54,99,190,21,141,79,88,214,117,176,164,41,61,
+  98,14,84,217,156,94,141,140,184,216,218,13,229,129,233,213,146,252,127,176,36,94,106,81,194,226,157,3,83,43,247,154,
+  216,254,173,77,50,97,47,1,239,33,114,166,204,87,112,149,180,203,215,139,237,238,151,60,227,161,195,72,98,43,95,145,
+  85,82,138,174,88,172,240,67,117,122,246,125,21,250,55,196,6,95,113,57,230,235,156,187,125,81,118,133,76,142,218,248,
+  116,105,81,181,111,72,214,241,126,243,74,57,178,28,29,107,126,65,118,149,190,115,157,246,58,78,204,60,38,178,38,35,
+  13,190,174,99,43,103,73,190,171,215,2,49,96,142,101,25,35,17,0,183,64,147,10,196,190,255,181,156,75,96,206,116,
+  125,76,136,155,222,232,206,230,255,203,124,158,78,7,59,223,175,174,63,230,184,58,7,147,40,113,205,181,247,139,245,46,
+  181,114,14,79,57,88,247,33,2,223,158,62,26,160,217,115,164,165,245,79,168,28,20,8,60,0,8,252,241,31,172,241,
+  248,187,109,80,178,115,100,229,179,44,235,249,184,192,247,77,75,125,162,93,1,223,155,26,0,3,44,84,49,147,131,79,
+  230,21,43,146,146,99,204,93,50,95,169,50,40,123,216,21,118,166,59,27,38,25,235,96,68,21,192,140,176,96,144,162,
+  28,151,61,32,4,108,65,126,150,0,108,249,249,145,191,146,252,186,102,70,201,23,35,239,180,218,114,73,201,5,2,223,
+  130,125,172,181,80,64,20,248,248,63,215,255,67,75,159,46,128,169,124,252,220,139,37,47,191,97,105,239,137,222,39,180,
+  213,71,69,140,148,193,40,83,84,92,164,231,170,128,149,126,94,247,126,163,0,200,216,192,71,172,25,245,79,0,240,223,
+  219,4,190,157,179,34,237,166,146,130,60,137,229,147,155,41,171,221,220,47,105,197,60,39,128,14,134,96,232,77,229,184,
+  206,100,56,45,14,11,112,62,110,41,85,244,245,15,200,228,188,245,247,90,91,82,165,61,250,166,114,124,92,237,245,122,
+  253,106,153,246,188,166,251,210,48,251,55,200,222,44,123,139,236,173,178,183,235,183,239,145,81,213,207,158,227,125,80,246,
+  225,202,148,99,52,62,165,243,201,26,0,24,3,228,2,50,114,145,107,105,208,92,64,32,80,0,104,96,122,205,123,128,
+  186,241,101,237,153,44,169,218,235,55,204,221,146,115,237,52,174,211,196,192,244,240,131,76,33,120,118,37,59,15,246,46,
+  102,204,225,89,244,28,106,9,215,163,178,96,165,89,207,139,148,239,164,143,126,194,70,150,158,110,195,107,207,180,140,113,
+  125,9,115,176,136,225,153,27,84,210,55,43,34,103,190,18,20,236,145,136,0,37,228,113,0,176,98,63,73,204,34,11,
+  224,91,43,67,230,211,157,45,24,64,32,32,242,185,190,231,44,24,142,5,3,86,236,234,249,30,210,51,0,48,4,128,
+  65,93,83,175,242,192,91,244,124,191,109,69,243,99,214,88,113,210,24,0,179,69,2,161,0,152,204,226,255,125,173,177,
+  244,56,75,123,84,190,58,183,15,77,74,127,106,81,207,233,42,139,157,196,130,204,21,122,156,181,70,168,136,161,95,168,
+  158,121,66,133,211,47,4,192,69,2,223,3,19,0,252,247,182,122,187,189,71,156,199,247,141,164,185,53,82,192,71,77,
+  230,131,2,226,106,217,2,69,178,201,98,8,230,157,188,94,246,3,203,88,211,46,194,113,175,182,214,16,221,177,62,38,
+  160,9,40,163,98,139,81,229,0,131,23,201,46,84,98,254,114,203,7,148,156,15,60,75,17,242,212,202,244,144,251,78,
+  210,94,242,109,128,125,105,173,62,69,216,62,177,140,12,169,215,30,144,173,87,254,36,0,100,125,231,106,255,2,217,139,
+  100,47,169,236,165,2,200,5,50,157,135,185,74,6,94,171,253,235,116,78,1,124,80,96,31,4,64,2,190,239,101,204,
+  74,230,160,234,180,183,91,54,250,14,43,6,95,95,254,110,232,124,153,142,61,168,72,238,192,211,117,9,108,173,174,61,
+  44,239,218,89,182,147,53,186,14,210,111,244,91,228,182,0,208,162,194,37,187,221,146,245,159,181,193,213,231,216,200,234,
+  211,197,144,23,75,198,126,213,210,152,41,4,165,24,60,239,4,8,213,144,32,207,201,168,44,234,144,160,99,204,135,33,
+  61,149,235,9,92,133,79,210,27,100,51,57,50,93,194,230,11,248,252,207,251,48,161,216,145,28,216,155,38,42,22,204,
+  56,7,199,15,64,132,5,3,19,86,251,92,239,51,17,20,233,128,2,89,253,238,51,45,93,32,214,67,122,202,50,73,
+  207,214,98,229,133,139,246,183,198,194,195,173,241,144,158,177,15,167,210,249,148,114,48,163,91,222,189,187,64,200,148,245,
+  71,171,204,206,144,31,156,231,139,119,122,16,148,58,161,38,212,43,98,38,0,248,183,183,70,187,189,119,150,39,125,212,
+  110,2,190,134,242,188,102,122,175,128,183,212,242,124,182,164,134,88,143,246,162,244,39,2,157,128,23,195,34,48,13,99,
+  223,196,70,67,31,40,87,248,129,45,70,94,32,32,200,113,251,207,240,78,186,197,198,163,45,233,147,108,235,85,178,222,
+  171,164,190,123,103,229,78,116,86,86,84,101,29,4,150,65,238,222,94,15,145,70,236,93,228,224,250,95,214,234,230,51,
+  73,32,146,252,78,235,222,127,124,223,173,188,195,123,160,136,153,186,15,147,29,238,81,184,180,19,100,167,201,0,245,73,
+  150,118,159,162,215,2,188,0,197,123,165,241,127,120,125,170,190,71,15,255,35,100,7,149,230,215,40,121,197,116,236,221,
+  91,90,172,235,110,118,31,105,245,145,55,42,159,253,157,156,94,129,137,222,49,44,150,217,119,165,141,172,122,129,242,164,
+  51,45,121,92,229,192,160,218,88,178,182,0,124,143,73,234,13,8,168,176,79,0,96,103,69,73,159,215,234,110,34,59,
+  169,100,26,99,62,242,86,229,218,14,60,201,92,207,89,25,89,193,123,24,159,83,171,138,12,221,160,227,145,75,2,118,
+  76,64,211,57,90,237,1,229,241,188,230,61,0,200,117,48,130,66,32,21,144,211,228,122,31,177,17,61,116,129,197,11,
+  149,227,46,86,249,46,218,207,210,133,42,235,133,123,138,1,247,211,254,16,75,238,127,141,223,175,87,188,33,189,107,111,
+  180,116,189,64,74,57,49,52,137,169,10,135,21,36,235,82,49,145,148,136,2,117,17,223,100,81,124,151,0,216,59,1,
+  192,191,181,101,69,246,113,42,90,154,138,152,141,228,9,217,186,10,124,179,196,124,183,9,120,191,87,65,42,167,2,124,
+  172,91,224,178,79,82,109,228,189,2,152,10,122,232,66,103,140,212,89,142,78,186,114,100,166,97,232,218,87,32,2,116,
+  56,240,22,50,22,252,223,214,138,222,157,148,27,1,182,157,45,243,207,247,176,184,103,87,201,155,221,44,22,72,179,94,
+  250,24,238,170,207,202,239,48,166,14,233,151,8,168,14,206,46,69,92,7,177,146,127,255,76,199,119,219,166,250,31,3,
+  56,124,7,64,239,166,253,78,227,38,201,180,201,255,99,198,241,88,149,86,215,216,163,99,117,111,163,107,221,89,192,219,
+  197,71,179,143,50,178,161,198,116,17,202,55,189,214,86,249,152,36,121,49,250,121,139,215,60,223,6,231,159,101,241,163,
+  172,149,160,224,164,96,213,74,167,202,193,5,10,103,37,88,8,185,169,125,11,167,7,128,84,154,148,210,179,108,114,9,
+  53,179,228,125,128,15,102,67,118,146,115,3,184,59,245,60,168,120,34,21,144,85,76,56,14,192,251,101,21,0,157,241,
+  144,157,140,156,168,24,113,76,134,98,77,201,72,24,82,224,44,86,88,154,150,67,147,210,238,215,89,182,236,32,107,47,
+  81,80,91,116,128,181,150,136,9,43,0,22,11,15,20,187,95,160,251,162,50,105,149,101,249,28,5,227,143,43,224,16,
+  172,84,222,221,135,42,144,41,192,1,64,210,11,38,105,202,24,154,244,91,139,163,229,86,143,54,76,0,240,201,155,242,
+  190,205,154,73,227,70,86,53,109,196,189,214,76,238,43,193,151,42,202,102,55,201,110,144,142,103,77,3,42,65,200,177,
+  232,255,248,30,43,250,223,38,214,83,33,251,92,151,2,94,223,49,138,128,98,163,190,189,229,176,48,151,64,208,189,89,
+  101,2,94,207,118,165,132,235,214,231,221,138,164,189,199,123,67,110,220,247,34,75,251,95,102,177,228,100,220,255,18,107,
+  110,124,177,246,47,182,70,255,217,146,55,207,181,100,227,179,45,237,59,67,223,83,174,33,70,139,123,79,181,168,235,20,
+  107,118,157,160,243,28,175,215,71,11,168,7,235,152,7,234,216,114,18,29,63,235,218,83,231,226,26,4,98,7,225,142,
+  150,63,33,134,237,222,65,255,239,96,249,134,237,245,155,237,244,58,152,2,130,64,154,185,204,220,75,193,97,127,139,122,
+  247,183,122,239,17,214,208,249,226,129,23,91,115,88,57,13,13,214,249,239,196,122,52,159,72,22,50,194,97,244,155,54,
+  188,234,133,54,178,246,233,22,63,244,114,107,213,174,178,86,114,163,156,238,118,57,183,0,225,142,255,228,92,79,32,204,
+  96,35,88,175,83,118,34,83,145,157,84,172,80,217,2,176,0,58,181,187,212,52,207,168,246,212,214,62,25,132,200,84,
+  154,82,0,48,13,244,58,23,253,63,131,252,148,101,173,192,138,0,176,218,195,136,2,123,150,222,172,239,43,192,14,189,
+  195,26,43,165,32,0,224,82,164,167,152,15,57,170,28,176,88,176,191,13,45,127,158,152,253,231,250,13,249,167,206,203,
+  76,221,61,39,84,53,161,251,123,0,110,13,51,66,254,181,202,41,223,37,63,186,210,98,5,172,36,185,83,0,124,124,
+  149,217,240,78,149,235,77,108,108,109,228,103,90,179,102,188,81,18,225,81,139,82,37,216,201,12,229,52,183,150,145,62,
+  163,235,21,21,24,146,155,35,146,155,48,192,208,165,2,223,43,45,19,88,232,3,216,234,69,186,177,172,242,118,178,45,
+  124,186,117,64,135,69,15,236,32,39,62,212,106,202,225,82,201,149,188,113,133,229,177,142,153,73,206,122,83,133,164,156,
+  143,24,192,254,172,124,137,90,85,154,32,20,145,229,236,237,236,70,89,85,171,201,111,210,31,123,83,70,43,249,174,28,
+  225,155,178,175,202,174,145,125,65,129,66,1,34,254,180,15,175,105,137,161,147,218,251,44,169,191,75,57,234,219,172,144,
+  37,245,247,232,154,47,181,104,227,37,2,245,37,214,24,122,189,165,189,175,183,104,232,34,139,250,47,177,92,223,201,196,
+  234,113,253,131,202,89,104,52,167,2,229,199,186,142,191,200,217,0,194,114,75,178,37,86,78,164,52,71,249,230,55,108,
+  116,237,121,54,180,246,12,107,174,59,95,231,252,168,202,238,251,178,89,146,124,128,15,128,149,108,83,74,65,192,7,27,
+  150,128,24,7,30,70,155,95,217,220,80,182,171,10,124,176,158,55,143,72,242,21,82,34,110,122,46,92,143,191,7,24,
+  131,20,165,233,133,218,80,0,72,109,40,231,24,7,95,121,190,42,239,27,179,10,160,98,233,52,147,140,78,126,168,123,
+  248,152,53,87,41,200,45,20,155,45,82,234,176,88,0,20,248,90,11,5,64,201,210,145,165,103,148,147,245,122,91,175,
+  174,81,207,38,234,63,71,193,13,9,202,28,49,199,9,128,202,219,67,143,152,244,211,150,103,63,16,0,239,80,128,151,
+  186,74,251,31,174,92,111,98,107,183,147,35,178,52,221,152,70,195,2,224,99,98,191,123,36,69,238,112,217,153,211,126,
+  151,177,158,0,171,235,208,92,64,174,199,160,211,75,181,191,64,246,124,21,246,137,2,223,211,196,110,176,140,36,91,207,
+  102,62,249,80,210,179,181,69,2,100,210,115,178,37,67,175,178,36,250,172,28,153,206,201,183,73,238,204,145,116,193,89,
+  22,150,142,236,149,8,252,31,170,213,217,119,26,18,12,54,224,187,188,166,214,143,223,96,180,225,33,207,96,8,177,146,
+  239,43,102,240,54,194,41,178,201,213,190,211,112,94,57,178,59,51,109,151,2,127,94,181,55,186,147,227,244,115,117,173,
+  243,229,60,75,180,7,16,216,42,229,113,250,63,190,69,192,189,198,154,119,93,104,195,171,159,105,181,199,206,213,61,94,
+  174,239,210,13,237,22,201,201,32,59,203,138,150,146,105,244,218,129,128,60,68,18,2,78,64,135,209,222,247,152,206,3,
+  0,233,20,16,100,167,174,35,163,198,25,35,48,117,24,163,50,156,9,97,99,192,0,8,85,78,14,98,177,234,24,0,
+  59,64,216,9,64,191,54,246,180,19,174,87,78,171,231,65,154,17,127,206,162,117,231,90,190,242,40,107,47,83,26,1,
+  11,142,129,240,64,171,175,60,193,162,135,63,162,251,132,125,9,68,127,81,112,187,88,0,148,212,87,106,209,222,120,140,
+  124,3,6,188,72,96,126,187,242,191,15,235,216,223,20,0,103,42,192,63,102,195,209,104,171,145,140,190,180,114,193,255,
+  217,91,154,231,117,207,253,146,30,21,208,189,146,33,180,237,76,18,187,252,94,78,246,35,69,69,201,78,150,191,106,124,
+  200,90,35,239,18,248,94,39,201,121,158,76,5,236,181,150,146,124,189,91,87,50,115,51,201,192,109,172,217,189,147,213,
+  186,79,177,104,248,13,98,36,201,49,28,155,74,131,177,92,5,80,133,198,111,34,56,38,71,203,5,140,92,206,47,64,
+  180,114,57,150,255,15,16,136,240,56,88,176,82,146,209,229,171,236,117,131,4,227,61,140,26,66,128,201,121,48,254,103,
+  15,120,177,0,234,240,255,124,43,138,5,150,80,145,226,65,32,252,190,252,94,158,45,22,40,176,153,186,151,63,138,89,
+  127,165,96,243,69,107,220,245,26,171,47,59,221,70,151,11,124,235,94,230,75,138,165,217,87,45,73,255,228,96,205,91,
+  253,214,26,147,156,193,241,235,42,87,170,254,201,253,0,95,96,61,172,179,189,143,182,62,202,135,50,33,48,160,4,80,
+  4,116,82,192,104,254,193,244,62,237,176,65,142,122,249,234,186,189,135,144,142,9,208,91,186,134,86,5,64,151,165,176,
+  29,163,32,66,83,68,8,12,27,149,39,42,184,208,62,26,93,99,201,195,175,178,104,233,177,146,161,135,200,158,102,237,
+  165,202,241,150,80,9,179,191,53,151,30,103,181,123,223,160,243,223,82,158,79,207,49,175,189,87,169,192,94,158,223,251,
+  28,49,62,89,239,171,37,199,223,34,181,243,49,5,117,186,164,221,34,0,222,43,95,235,19,11,142,166,186,142,61,43,
+  55,252,159,183,73,118,30,210,106,229,191,143,227,84,146,83,236,135,244,204,148,136,75,38,20,172,99,23,255,80,133,166,
+  124,32,253,156,30,200,71,205,219,226,104,195,131,249,6,36,47,54,158,42,9,183,143,64,87,230,121,69,239,83,157,253,
+  18,229,94,53,229,109,5,185,34,78,195,176,149,124,177,156,156,70,106,1,133,134,234,84,140,51,242,99,69,205,107,173,
+  249,248,167,108,232,254,15,216,240,253,239,176,225,251,222,98,67,107,94,99,27,239,122,163,141,172,123,179,141,174,123,155,
+  213,31,124,183,53,30,126,143,197,235,63,36,251,136,53,31,251,140,114,183,171,36,113,175,149,252,147,244,28,250,134,228,
+  206,247,252,120,109,106,28,99,122,212,208,19,135,115,235,60,110,244,158,97,145,20,12,103,133,25,201,165,42,134,108,193,
+  32,2,169,216,206,29,57,155,42,160,220,238,214,174,221,104,197,224,183,44,30,188,210,26,92,227,170,87,90,99,197,51,
+  228,156,199,89,180,82,121,232,195,175,176,98,244,51,165,82,64,38,3,94,201,191,188,197,84,241,129,241,130,228,4,120,
+  128,97,68,249,33,121,31,172,7,240,176,170,139,217,24,248,116,77,57,157,28,232,60,128,76,167,131,65,232,104,32,115,
+  32,2,76,152,16,54,215,253,120,112,10,0,212,49,157,101,171,74,31,7,32,215,1,219,49,109,125,103,101,204,168,209,
+  129,158,223,229,177,206,153,124,85,234,229,173,214,92,126,178,24,80,18,116,145,242,186,165,79,243,92,176,189,232,96,139,
+  22,31,41,185,253,74,149,53,77,48,101,179,72,81,255,162,114,242,67,164,126,182,146,31,48,89,175,0,56,252,10,1,
+  83,178,158,177,129,205,47,41,128,253,214,226,100,137,124,237,97,249,26,117,13,27,127,94,185,227,255,188,45,107,183,79,
+  139,242,182,242,156,72,5,50,96,205,145,123,149,40,207,83,196,191,213,10,122,108,208,235,223,123,178,208,40,253,62,57,
+  162,100,231,200,171,196,124,52,47,156,44,230,163,214,107,187,18,124,138,122,177,128,216,236,222,75,185,213,57,146,29,98,
+  77,119,112,24,6,70,81,174,132,100,235,255,158,30,220,101,54,188,248,185,54,48,243,112,27,156,118,128,13,77,221,195,
+  106,83,246,177,198,140,253,108,100,198,238,250,127,47,183,193,169,123,218,240,244,189,108,116,230,94,54,50,125,15,183,209,
+  25,123,219,200,204,125,244,189,125,108,112,214,211,108,104,246,193,54,188,224,32,27,90,120,180,13,205,59,194,6,22,157,
+  96,67,139,142,183,250,146,83,124,18,161,230,154,179,196,84,47,148,189,68,118,158,213,214,94,96,241,186,215,89,114,255,
+  91,44,121,240,77,150,62,170,156,240,129,75,245,255,219,221,82,1,190,121,207,27,44,186,231,117,178,139,244,90,185,221,
+  210,179,101,207,181,145,149,167,217,240,210,19,172,177,92,185,209,170,147,173,241,224,57,10,4,239,81,25,125,73,0,81,
+  222,20,11,16,84,200,56,168,96,151,178,246,177,4,94,167,209,60,32,32,116,178,158,3,47,244,167,5,124,10,12,46,
+  57,201,125,233,157,35,233,78,30,234,70,222,204,123,178,156,96,163,28,217,3,12,193,132,64,2,123,147,7,210,30,8,
+  203,194,120,213,121,201,63,97,67,129,110,124,222,24,174,147,142,245,236,31,87,206,75,141,183,100,244,192,7,172,185,242,
+  233,214,90,161,60,80,32,116,32,74,138,178,79,23,31,102,35,247,156,109,173,250,143,116,60,84,131,228,178,212,82,179,
+  251,68,75,80,67,190,102,196,51,21,172,89,182,76,42,40,145,58,136,62,41,191,250,161,101,201,84,249,220,74,1,241,
+  94,75,155,79,40,237,233,123,119,229,146,255,179,54,0,216,164,143,103,42,249,25,245,168,80,238,82,1,205,84,238,71,
+  215,172,111,137,245,232,6,70,83,3,149,46,111,83,97,190,214,155,25,218,253,42,88,73,140,86,143,228,6,181,139,221,
+  101,133,75,173,107,55,139,251,95,166,200,46,38,112,185,89,74,186,34,158,108,121,223,117,214,191,236,60,219,48,243,100,
+  27,158,182,159,37,55,239,104,233,95,182,179,248,182,29,173,126,203,46,214,156,188,171,53,167,239,102,67,115,15,180,193,
+  185,135,217,224,157,178,105,135,216,208,244,125,108,244,206,3,108,116,250,158,54,58,103,15,139,102,239,102,209,29,187,217,
+  232,188,157,173,121,231,118,22,221,41,208,223,185,173,191,78,244,126,243,206,29,45,159,175,239,204,219,211,45,158,181,187,
+  254,223,203,178,5,251,91,54,255,96,75,230,201,121,4,212,108,193,17,86,191,243,24,27,157,117,148,53,22,31,107,249,
+  178,99,173,185,232,8,107,44,58,210,234,75,143,183,198,210,19,101,199,122,175,15,223,139,9,134,87,60,221,134,87,62,
+  223,210,199,94,105,69,237,50,57,21,11,166,124,93,38,134,164,169,129,181,29,228,244,176,222,216,90,12,200,188,98,168,
+  146,157,149,28,245,26,79,12,0,82,227,9,248,66,91,31,224,35,119,133,249,232,75,11,216,190,47,19,195,143,25,255,
+  87,32,116,0,34,69,145,248,176,96,0,160,128,76,35,190,3,176,3,252,72,80,218,1,5,60,134,120,57,19,235,218,
+  50,93,103,57,107,182,174,41,87,224,100,174,208,218,39,109,244,238,211,29,128,1,120,237,101,7,91,123,49,0,60,220,
+  106,43,207,178,104,144,138,24,2,172,88,59,253,181,197,61,103,8,132,59,90,226,115,196,60,125,12,128,121,164,64,149,
+  210,28,113,141,246,191,180,44,22,8,149,111,34,71,27,205,158,245,81,82,91,145,52,155,43,178,34,95,49,18,199,7,
+  83,43,95,185,233,127,223,173,153,53,79,99,209,140,145,104,196,26,209,227,146,3,43,44,79,111,113,246,163,255,101,222,
+  164,210,229,114,73,207,119,75,203,191,73,114,226,124,73,207,170,169,129,133,57,104,43,83,190,7,3,166,189,219,217,104,
+  223,89,2,223,87,203,118,67,159,182,97,142,28,245,122,69,202,119,139,237,78,177,218,109,59,91,122,251,246,86,76,218,
+  198,226,41,202,17,111,219,195,154,11,143,17,3,189,216,210,13,175,179,108,88,242,118,84,231,26,249,144,30,154,206,59,
+  242,62,203,135,223,99,89,207,91,197,156,175,183,116,253,133,150,61,254,114,107,60,118,158,197,247,159,109,241,61,207,145,
+  61,203,34,57,9,54,186,86,172,180,246,25,54,178,234,120,139,239,62,222,162,181,39,42,71,19,99,173,56,77,82,234,
+  36,129,232,20,107,172,60,67,118,166,53,86,61,75,246,92,75,215,60,215,26,171,207,81,164,63,195,106,119,61,93,199,
+  57,203,106,178,228,254,23,232,186,158,111,201,163,231,91,250,132,36,212,224,59,149,255,126,76,81,254,11,114,160,235,44,
+  203,190,45,217,254,51,69,243,63,169,188,36,171,189,237,173,204,175,96,150,86,139,49,125,2,157,59,121,144,161,157,121,
+  95,232,92,13,248,24,142,5,243,73,202,1,62,49,31,221,214,90,200,204,68,96,35,160,233,124,227,0,100,125,63,64,
+  8,43,234,89,209,21,208,115,65,42,148,196,130,158,7,83,17,163,99,135,166,8,153,47,81,230,175,97,64,216,175,35,
+  7,148,49,46,18,233,204,18,102,173,68,199,110,92,161,60,239,108,203,150,233,121,47,17,240,168,140,89,78,219,32,64,
+  60,66,106,224,233,150,60,241,9,165,23,211,149,139,175,209,239,38,89,220,247,114,75,123,182,246,154,112,134,38,181,135,
+  94,164,103,122,161,242,192,75,149,146,188,93,199,253,184,124,228,58,75,99,41,44,22,253,76,230,88,18,175,176,40,97,
+  210,166,39,188,173,50,163,211,191,136,161,93,20,31,108,183,227,67,42,119,253,239,183,53,97,192,172,169,40,212,39,123,
+  208,50,201,207,114,228,129,30,110,243,58,201,72,21,22,11,109,192,126,195,176,159,10,147,46,89,125,44,202,65,222,39,
+  173,223,173,194,22,3,166,221,202,9,162,207,10,120,211,189,2,130,92,175,24,254,129,164,225,139,109,248,246,167,89,122,
+  155,190,63,73,57,226,228,167,90,125,202,182,86,155,115,172,101,27,94,169,220,237,3,114,50,170,249,127,96,105,246,13,
+  31,18,83,40,135,75,210,159,202,126,34,73,204,208,29,154,29,176,239,233,225,137,153,177,208,41,59,81,4,102,106,136,
+  244,139,202,47,190,160,235,165,253,237,179,250,252,51,186,254,79,235,127,25,211,1,98,202,73,211,154,238,169,161,215,117,
+  254,255,172,222,167,159,98,181,167,150,151,25,169,153,231,37,254,188,31,179,157,126,69,32,99,25,175,239,43,143,249,65,
+  217,150,149,254,94,78,119,171,64,134,163,119,244,189,172,28,186,21,122,150,248,255,85,238,229,242,15,233,41,64,56,0,
+  3,248,2,243,161,22,148,191,121,141,172,114,190,156,174,126,63,213,181,32,53,1,28,29,206,3,19,178,15,82,84,198,
+  119,97,75,111,198,81,206,234,215,69,30,72,78,41,57,236,215,54,170,235,226,122,96,98,0,200,126,188,6,148,129,192,
+  133,24,176,104,81,105,179,76,101,241,99,221,239,231,4,176,87,91,186,242,36,229,125,146,161,203,15,181,98,133,210,142,
+  229,71,10,132,135,10,152,199,73,194,35,47,111,149,239,40,213,40,102,89,182,241,109,214,160,55,83,247,150,242,13,253,
+  134,174,132,35,242,27,234,13,196,132,128,48,111,42,157,33,184,71,95,211,121,110,240,138,25,230,65,141,178,69,42,223,
+  149,2,228,253,150,200,39,91,205,81,203,27,163,195,69,99,244,102,49,226,22,149,219,254,247,217,74,6,28,177,122,131,
+  182,191,123,45,73,36,27,137,166,56,92,204,76,95,31,83,33,72,58,212,232,59,249,10,1,144,53,14,96,191,114,0,
+  106,105,91,40,247,219,223,226,225,75,228,148,146,65,45,170,236,151,91,49,250,43,229,98,47,182,126,229,119,241,237,91,
+  88,241,23,201,212,219,182,178,250,164,157,109,68,57,90,190,145,89,179,4,216,236,235,114,240,159,11,184,127,22,112,167,
+  104,79,37,66,168,157,92,236,149,55,222,20,192,194,144,217,12,125,78,149,188,190,167,60,162,149,202,89,179,155,245,250,
+  47,110,173,228,143,86,80,75,25,255,78,15,246,55,50,42,41,112,228,31,235,115,57,108,34,231,21,163,48,101,122,198,
+  40,10,119,228,202,177,115,57,122,130,35,255,82,199,249,165,36,165,28,90,82,188,128,225,210,219,244,27,106,105,103,234,
+  58,36,183,152,179,211,229,93,197,46,206,32,101,215,178,172,96,94,78,57,116,96,26,223,87,0,132,93,178,78,0,210,
+  205,12,230,43,107,98,189,233,3,38,243,138,150,42,199,27,51,42,94,0,28,215,203,94,215,172,188,179,4,162,62,71,
+  134,134,218,80,1,176,236,31,74,69,76,21,28,100,229,116,134,176,112,181,119,64,74,142,194,218,62,16,152,192,193,251,
+  235,4,10,5,226,248,90,169,143,183,88,180,236,52,201,78,177,223,138,195,173,181,82,114,84,0,108,45,63,198,226,229,
+  199,73,117,188,90,229,117,147,158,11,65,68,207,171,193,162,45,7,43,64,111,37,22,164,77,112,191,138,9,233,156,77,
+  231,123,229,214,248,19,126,149,50,105,211,53,146,163,180,153,222,32,240,93,175,0,124,179,55,109,100,233,2,177,228,106,
+  139,163,135,4,198,13,150,53,122,255,220,72,134,126,216,72,235,110,2,228,230,149,27,255,235,110,0,112,56,174,11,124,
+  93,178,187,69,253,210,254,122,248,153,242,154,118,242,57,1,240,131,42,80,70,48,92,44,240,189,76,209,236,116,201,207,
+  67,84,184,59,9,120,101,3,59,243,94,214,123,159,163,239,255,68,242,117,145,30,196,74,129,96,186,13,173,121,147,213,
+  110,217,195,178,219,36,69,110,17,243,221,182,153,213,245,186,54,239,68,43,6,222,165,243,72,134,200,121,178,252,102,75,
+  115,170,206,201,89,30,19,171,208,118,85,213,218,249,10,176,227,206,59,158,59,209,200,220,57,248,86,198,136,122,223,227,
+  212,84,102,4,195,193,59,45,180,39,98,157,239,83,243,216,249,59,156,23,153,200,241,201,211,56,47,224,161,242,164,38,
+  32,42,199,43,112,216,88,215,204,130,39,72,78,57,180,131,174,188,238,204,39,211,229,250,251,229,224,0,1,249,73,222,
+  247,136,126,3,251,113,206,192,124,52,55,252,78,70,109,39,0,171,228,37,29,15,198,154,28,168,144,9,53,161,124,30,
+  36,169,64,73,224,244,218,94,106,120,239,244,166,164,178,34,6,6,164,118,179,156,29,160,188,190,138,1,157,253,198,131,
+  68,153,3,2,196,199,21,220,110,151,42,144,226,24,184,204,26,107,158,99,185,0,87,172,58,194,90,203,142,18,248,142,
+  149,41,136,174,56,222,70,87,189,72,223,187,81,207,144,46,112,247,234,245,13,150,61,166,239,123,151,52,186,27,238,33,
+  0,30,46,223,17,136,169,188,27,145,31,249,40,9,129,176,246,14,31,49,147,197,87,10,120,95,146,63,124,89,215,77,
+  48,228,254,174,87,25,223,164,64,57,219,59,61,36,241,90,139,197,140,205,88,169,82,218,99,245,100,36,169,165,181,36,
+  203,19,182,87,85,46,253,175,181,245,55,155,167,213,162,33,207,255,98,233,240,194,25,69,15,95,133,225,149,47,77,228,
+  231,155,85,96,175,82,238,119,174,10,242,20,21,232,222,178,178,205,175,232,217,82,154,127,111,203,25,164,234,85,224,203,
+  5,226,121,86,91,247,113,27,154,170,8,57,117,103,107,75,118,182,111,125,138,3,176,54,253,64,229,83,42,248,244,203,
+  86,143,37,49,51,57,29,78,232,53,129,204,189,18,203,81,169,12,72,203,161,58,238,12,24,175,43,249,212,105,193,145,
+  112,32,143,228,72,42,42,24,136,240,188,198,225,144,126,56,32,145,253,111,88,248,108,76,34,210,123,132,215,165,83,150,
+  199,230,187,28,159,227,114,29,0,15,198,11,198,53,114,77,157,0,196,104,2,224,247,189,37,0,157,249,202,38,135,150,
+  231,125,48,31,77,51,128,239,143,42,23,122,250,132,252,14,86,163,130,133,182,63,26,221,233,32,64,147,3,205,43,0,
+  17,38,36,47,132,201,249,13,205,18,52,187,0,192,178,34,38,207,0,69,89,182,229,189,4,176,177,231,94,184,110,238,
+  43,220,103,185,130,146,95,183,126,159,73,110,183,234,159,177,209,7,206,21,11,2,186,163,61,255,107,249,235,227,173,181,
+  246,4,27,93,113,134,229,3,146,235,172,137,8,163,75,197,228,205,15,91,163,75,41,70,239,238,242,147,29,164,154,20,
+  176,233,44,223,67,231,120,1,145,122,132,65,122,201,48,125,225,197,202,15,21,228,235,31,144,218,250,168,124,78,126,23,
+  73,250,71,95,246,180,36,71,149,100,140,83,156,108,133,20,72,156,46,145,84,93,165,156,113,157,69,241,35,2,99,175,
+  53,155,3,121,146,143,206,17,43,110,87,185,246,191,198,230,18,52,25,20,251,61,108,113,66,129,43,130,34,105,148,7,
+  181,99,21,4,237,126,181,55,42,106,157,167,66,123,182,181,123,143,20,248,118,83,65,210,236,240,84,1,112,91,139,122,
+  152,134,225,91,42,28,156,105,145,30,216,239,173,127,246,51,173,33,169,153,254,101,27,203,39,33,61,183,181,97,129,49,
+  186,231,28,177,234,103,228,24,63,20,248,144,171,202,127,218,56,189,128,210,98,194,91,38,72,34,10,55,171,104,92,237,
+  189,114,0,96,141,138,97,3,0,169,54,47,229,94,249,63,243,187,148,64,41,7,153,242,186,106,135,211,158,17,0,45,
+  95,178,25,38,40,127,83,190,199,82,206,122,143,142,209,114,194,80,81,193,168,129,210,49,1,167,190,239,78,203,119,130,
+  19,99,0,181,175,108,63,115,192,133,247,195,103,21,8,29,120,161,201,1,86,133,165,97,224,170,205,81,192,42,188,59,
+  94,200,243,96,64,152,15,64,149,178,178,149,211,147,39,244,216,97,32,49,76,200,119,97,64,64,8,96,249,62,61,120,
+  8,134,228,129,4,55,24,60,0,176,195,60,168,148,101,51,118,79,33,208,165,60,15,177,89,242,91,49,208,181,150,60,
+  246,58,203,215,156,104,249,202,35,172,189,84,50,20,54,92,121,148,242,193,195,172,185,236,4,107,62,248,22,203,35,73,
+  117,201,94,42,224,184,190,116,240,195,86,235,57,211,98,214,67,236,219,92,126,67,115,213,174,2,226,254,242,159,131,5,
+  68,129,145,33,105,12,81,27,150,127,13,49,130,230,82,249,219,59,93,121,181,27,180,27,210,231,248,106,177,241,55,5,
+  198,31,169,140,174,23,32,255,44,187,77,62,36,48,38,11,5,196,101,98,69,26,246,31,181,70,210,181,161,30,173,127,
+  109,189,254,132,108,227,107,139,34,125,109,251,159,112,202,203,177,205,1,152,2,192,251,165,183,25,11,166,36,158,121,79,
+  36,9,218,241,229,46,17,124,160,236,224,75,85,80,103,148,242,147,117,0,42,0,166,61,187,136,1,21,197,20,161,18,
+  6,102,42,146,167,235,175,176,193,233,7,120,133,75,113,219,150,150,77,222,222,146,219,182,183,254,233,135,89,214,253,118,
+  69,182,171,197,146,146,41,116,242,38,135,202,197,120,128,78,57,8,51,146,21,45,177,11,14,129,99,56,163,0,150,113,
+  167,31,7,70,120,111,208,129,88,254,95,2,16,231,242,245,209,1,103,245,59,62,247,53,19,88,73,168,250,109,206,208,
+  160,177,227,132,239,240,123,128,91,29,147,255,253,59,193,4,170,54,160,42,153,50,45,42,89,236,108,199,103,52,176,243,
+  91,192,215,171,123,2,120,128,0,240,81,41,2,248,232,70,71,141,39,237,164,168,14,229,157,158,231,33,43,1,18,185,
+  40,181,154,180,237,85,140,230,61,134,104,231,155,164,207,244,156,188,79,108,167,12,165,54,20,9,139,12,5,128,228,210,
+  146,219,126,94,2,0,215,200,61,118,4,138,206,50,246,224,66,89,87,193,78,18,60,207,167,40,143,254,182,181,70,63,
+  104,209,189,231,90,182,250,100,107,175,162,70,244,112,201,209,195,172,189,92,254,160,124,176,177,74,146,179,91,96,33,23,
+  47,228,71,98,67,234,3,18,1,168,57,240,98,139,186,14,144,175,48,162,132,17,38,98,196,110,198,12,62,77,198,176,
+  177,99,29,136,89,223,153,242,51,169,172,193,151,11,140,175,23,24,203,193,216,173,198,123,229,51,31,147,95,210,36,118,
+  173,251,103,166,0,69,111,29,206,65,96,106,21,243,44,74,87,10,140,119,75,170,174,19,24,31,150,61,161,247,6,232,
+  109,179,180,86,235,222,93,236,248,207,215,249,123,36,27,57,173,158,108,84,4,185,207,18,1,162,200,104,255,83,52,101,
+  238,19,201,8,159,124,200,1,24,218,254,14,18,240,232,104,45,112,245,109,105,41,163,13,24,49,46,224,229,5,205,14,
+  83,173,182,230,149,54,114,219,206,86,220,178,133,76,223,153,188,131,213,167,110,99,131,244,168,136,62,174,168,250,109,177,
+  152,162,24,115,201,200,105,91,217,248,114,90,244,210,7,36,30,157,221,217,3,48,130,85,146,110,172,90,63,236,255,61,
+  11,192,1,156,225,184,97,143,227,85,175,221,25,49,0,136,19,6,214,29,103,223,0,204,146,37,135,125,49,148,77,207,
+  21,174,175,50,119,252,48,172,8,201,201,232,134,14,240,57,155,41,183,243,252,153,202,20,100,36,21,71,48,25,109,122,
+  179,228,96,116,179,35,71,70,170,146,43,210,70,8,19,210,70,8,104,3,11,2,64,154,35,8,162,98,193,49,0,146,
+  27,147,7,210,3,166,100,236,241,235,11,236,71,217,112,239,148,5,198,103,93,206,104,89,118,163,21,201,151,173,24,124,
+  155,13,175,125,158,197,203,78,178,214,74,129,144,182,193,149,135,89,177,250,112,203,86,30,111,35,171,94,98,69,127,217,
+  249,130,81,242,101,71,117,230,80,253,153,101,195,239,183,168,251,121,214,232,62,204,226,39,246,146,223,236,108,73,53,234,
+  132,105,61,90,244,166,234,131,21,143,146,143,193,138,82,91,3,242,185,33,49,35,181,239,35,151,200,228,139,10,4,204,
+  126,80,48,6,53,162,6,92,1,72,199,111,203,111,25,52,64,192,200,178,59,196,142,243,181,95,169,188,242,62,139,163,
+  71,36,85,153,14,115,227,19,105,222,119,117,222,30,190,186,102,181,221,42,8,252,215,110,37,3,246,90,20,221,235,163,
+  149,115,198,119,57,0,25,100,75,227,123,96,192,231,143,1,144,181,205,1,96,222,183,141,53,123,148,15,164,215,232,65,
+  151,237,78,204,128,60,48,247,52,75,111,221,206,242,155,21,241,38,111,110,241,148,173,172,49,101,107,107,62,250,60,21,
+  204,23,21,81,229,100,204,126,6,43,56,99,4,103,151,1,40,143,200,56,1,224,194,57,130,179,132,174,92,178,208,175,
+  145,61,253,28,5,218,86,82,1,41,124,231,255,216,58,24,193,95,7,235,252,78,144,147,122,205,117,72,178,2,72,63,
+  167,203,89,206,203,231,200,233,138,13,255,10,124,52,55,84,29,200,157,209,0,31,57,223,79,45,21,0,153,214,161,4,
+  31,185,30,185,49,101,74,255,85,42,105,168,56,194,244,158,3,112,90,245,61,242,35,64,72,14,168,99,120,206,168,247,
+  199,100,40,77,17,247,202,96,96,93,207,216,61,134,251,10,247,164,50,207,120,6,33,8,17,104,116,79,237,7,20,44,
+  21,152,35,177,109,243,203,150,108,120,171,13,173,22,19,174,57,193,218,43,143,20,8,149,11,174,56,70,242,244,48,139,
+  150,159,104,245,181,23,149,221,3,51,186,246,85,21,107,72,109,216,91,44,79,215,196,100,224,229,22,245,29,111,181,238,
+  3,4,200,189,148,194,236,100,73,239,54,198,148,142,12,210,110,117,239,45,48,62,205,71,214,148,51,36,200,239,6,149,
+  186,192,140,131,175,18,16,223,32,96,10,140,245,15,233,154,62,41,99,218,145,47,73,177,125,75,190,245,163,210,191,232,
+  203,42,50,160,159,112,38,153,202,180,248,105,124,143,76,82,53,90,47,118,92,223,72,178,190,90,51,25,89,155,166,27,
+  79,18,59,254,175,10,18,255,185,91,153,3,6,0,78,83,193,201,1,124,94,23,1,144,249,28,199,24,240,5,94,16,
+  222,233,90,192,99,164,3,83,145,39,189,146,16,233,119,4,44,186,34,173,176,214,208,247,108,96,234,211,44,189,73,185,
+  31,0,156,180,149,181,39,61,197,18,177,96,182,225,98,21,12,67,134,228,36,98,130,162,205,42,63,131,146,104,67,110,
+  94,155,232,235,22,96,1,144,255,6,160,198,106,23,43,171,0,217,98,90,133,177,247,113,174,210,193,104,18,64,110,142,
+  127,214,105,128,139,189,190,235,224,9,32,122,210,247,66,0,208,190,149,176,199,65,59,175,143,223,83,83,139,1,60,0,
+  72,83,67,24,215,23,230,114,161,47,44,236,247,59,149,7,209,91,224,97,184,151,131,7,217,121,155,238,131,142,231,128,
+  79,65,173,192,137,1,47,57,35,224,69,138,34,93,145,162,84,198,4,233,42,6,245,99,72,197,120,131,60,32,166,41,
+  34,140,13,4,128,220,107,184,95,238,161,202,13,189,204,169,88,10,0,36,21,224,25,32,217,215,9,132,114,102,214,142,
+  136,174,178,184,255,109,214,92,37,95,88,113,162,242,192,83,44,95,117,178,181,150,30,224,189,99,242,229,167,88,125,197,
+  11,173,249,200,7,165,168,126,173,107,159,37,22,101,170,14,49,98,62,167,252,95,247,216,138,191,110,121,243,163,150,13,
+  189,197,70,123,159,43,95,58,206,26,93,251,138,17,25,52,173,0,223,189,131,143,27,109,49,19,2,51,18,48,21,72,
+  175,64,79,26,52,32,48,210,184,207,172,11,76,146,85,123,151,231,140,57,107,241,51,185,23,147,127,69,223,84,121,0,
+  70,106,142,39,233,188,146,210,42,183,86,107,129,72,230,94,111,103,108,166,143,88,35,234,178,56,237,179,70,86,191,117,
+  52,25,61,172,130,197,127,222,54,34,0,186,4,165,79,30,11,66,102,180,125,209,5,141,38,136,15,232,230,222,82,86,
+  25,143,40,7,20,0,139,94,1,176,103,43,239,118,22,117,111,103,137,228,130,247,214,240,225,67,139,5,178,171,109,116,
+  242,222,202,253,182,178,236,47,91,91,46,0,182,110,219,194,226,233,42,216,225,119,201,113,191,166,4,90,14,210,190,79,
+  224,99,101,31,42,68,74,7,40,187,110,233,161,167,0,15,128,225,224,176,218,80,41,249,198,0,240,55,64,233,142,4,
+  235,208,76,32,240,248,255,124,95,230,175,1,7,255,7,7,44,129,89,238,131,61,233,251,52,72,143,125,183,243,181,204,
+  207,35,11,159,249,111,216,3,58,250,129,86,141,236,99,57,31,229,3,24,144,144,0,71,74,195,43,81,168,116,65,122,
+  86,57,159,179,151,24,206,187,118,9,112,126,12,126,175,124,204,167,127,164,162,139,174,106,140,15,100,148,136,64,236,44,
+  90,29,199,115,71,162,63,21,55,0,144,227,8,192,94,241,83,49,96,85,142,4,37,38,98,42,239,57,72,109,128,88,
+  49,32,61,81,60,8,114,191,10,32,228,90,209,79,189,82,38,237,127,179,197,15,8,104,119,61,203,154,107,78,183,98,
+  13,77,19,71,91,123,145,36,233,146,35,108,120,197,179,172,126,207,43,45,235,23,59,197,191,21,232,38,75,14,82,51,
+  11,155,175,213,189,44,116,64,56,83,19,244,197,98,25,139,188,108,124,169,164,233,211,149,79,30,42,48,238,85,205,130,
+  0,40,203,217,15,90,93,146,170,44,0,227,211,140,136,25,89,254,27,169,10,24,7,1,35,121,163,114,70,175,192,81,
+  206,216,252,154,174,153,0,167,50,162,77,55,70,117,76,177,148,73,150,229,175,173,66,204,152,222,163,220,81,57,99,180,
+  161,165,188,113,122,94,239,61,183,130,199,63,126,43,37,40,51,158,209,9,251,78,75,146,155,4,40,214,186,99,161,201,
+  15,26,11,108,248,82,83,163,101,37,12,115,175,48,39,10,149,48,145,34,84,66,13,22,78,160,8,71,67,121,242,216,
+  167,44,186,121,7,75,166,108,105,153,128,215,250,203,102,202,1,183,176,198,172,125,148,67,0,64,229,18,244,158,111,83,
+  251,9,200,170,229,181,244,160,199,218,160,66,62,226,236,87,2,176,172,233,148,147,184,3,1,156,14,115,48,224,244,56,
+  25,237,117,84,122,4,32,84,142,231,160,196,120,29,254,135,21,194,251,157,159,85,159,143,53,27,116,126,22,190,91,1,
+  117,147,207,56,55,21,30,1,124,140,231,11,204,135,227,193,124,147,203,242,114,240,193,92,200,198,39,85,184,84,114,190,
+  60,6,199,194,42,80,123,187,33,32,228,88,212,158,82,25,3,139,146,7,34,67,145,177,244,162,161,71,140,0,138,147,
+  251,177,84,14,33,247,243,178,125,82,238,92,229,184,222,95,213,1,40,32,134,25,186,189,220,5,66,218,45,243,153,150,
+  199,63,179,34,189,218,178,250,71,44,239,121,163,141,172,126,177,141,46,59,205,114,49,162,231,134,203,143,177,100,217,113,
+  222,159,118,120,217,233,2,234,69,150,60,254,201,178,211,54,195,203,96,161,98,177,84,207,2,5,95,238,133,246,202,121,
+  202,27,117,63,25,29,40,190,46,201,123,185,101,3,175,177,90,207,217,2,227,81,22,41,79,140,104,83,236,218,90,36,
+  192,114,223,123,200,232,12,66,141,42,82,85,204,216,47,95,28,2,140,146,170,228,141,244,222,82,206,152,50,128,220,103,
+  233,99,233,112,249,118,244,67,129,82,229,239,53,201,2,100,70,174,189,64,96,92,46,37,39,34,138,30,204,204,30,191,
+  180,130,200,63,118,243,74,152,104,208,154,241,131,222,11,134,132,155,201,115,88,52,196,167,228,99,141,55,38,161,117,0,
+  158,165,155,5,128,2,150,3,112,87,201,17,221,180,126,195,68,180,173,108,142,213,214,125,76,12,168,104,117,219,230,178,
+  45,173,184,101,43,43,110,221,202,106,179,246,180,98,228,61,58,254,87,84,192,114,54,242,18,31,163,86,86,186,148,235,
+  33,208,158,198,202,173,85,46,87,177,223,38,142,178,137,193,56,0,1,231,4,76,193,249,121,141,145,247,132,218,71,192,
+  193,123,236,249,62,22,222,3,176,236,3,136,48,94,119,126,198,62,252,54,188,23,44,28,7,176,115,126,42,61,0,31,
+  147,229,34,27,97,63,42,80,96,44,242,54,24,11,208,224,4,228,124,84,166,192,124,212,118,34,61,113,74,26,208,185,
+  110,142,203,61,98,58,175,119,16,232,204,5,233,176,77,30,8,139,6,0,114,76,0,205,64,93,34,61,21,49,128,89,
+  191,119,22,127,82,57,142,85,76,17,228,4,60,15,128,60,15,172,2,163,175,71,15,19,174,147,163,74,70,198,191,150,
+  90,146,236,141,175,177,98,244,3,150,110,184,200,234,15,73,74,174,62,209,146,149,71,89,178,252,112,229,133,135,91,186,
+  244,16,75,150,30,110,163,75,158,169,252,240,60,107,62,240,118,49,220,149,82,67,2,163,15,9,99,60,39,195,212,150,
+  10,148,4,41,94,51,217,148,212,24,195,176,20,160,232,143,28,141,188,209,154,253,103,43,111,60,90,198,84,38,123,123,
+  13,188,79,131,216,205,18,224,187,41,24,28,44,101,38,22,134,29,7,196,142,67,103,107,127,158,212,155,82,40,102,174,
+  171,191,219,114,22,80,173,51,255,44,236,248,101,1,241,123,178,27,228,147,127,20,179,211,22,139,250,96,108,232,18,217,
+  178,143,183,219,247,28,88,65,229,31,179,149,12,200,218,14,140,3,92,166,200,38,71,160,77,137,73,113,161,113,218,100,
+  200,1,71,105,7,60,83,192,59,92,0,220,86,123,201,202,222,221,45,237,123,174,190,255,75,215,214,169,52,126,253,193,
+  143,89,227,102,0,184,153,229,55,41,90,77,42,115,193,250,44,69,172,65,86,202,249,166,40,31,0,202,193,188,194,133,
+  135,28,246,60,252,78,167,160,39,73,135,163,248,251,200,190,106,239,78,9,80,42,199,247,92,7,201,7,8,216,119,26,
+  239,253,45,195,193,3,112,1,82,216,135,215,28,59,0,43,188,135,113,76,156,26,11,199,215,222,25,15,169,8,235,97,
+  228,113,180,245,81,105,2,88,88,77,23,230,35,231,171,128,34,182,242,145,20,62,160,24,153,170,223,249,53,137,93,29,
+  48,128,131,128,196,125,235,60,14,104,154,124,144,161,28,179,172,200,25,111,63,4,216,228,62,161,57,130,252,28,64,115,
+  141,85,249,109,98,213,241,253,28,72,80,172,122,30,254,76,0,102,199,243,161,28,148,239,23,153,114,170,248,207,50,157,
+  51,186,86,12,199,96,237,119,88,252,240,107,44,186,235,28,139,151,43,71,20,27,54,23,29,105,217,210,163,5,68,189,
+  22,43,142,46,62,214,154,203,159,105,205,123,47,180,228,225,203,172,216,120,157,242,55,58,26,32,151,169,164,34,103,92,
+  42,127,90,44,35,208,80,97,69,94,252,39,107,177,24,106,227,51,150,110,188,212,26,61,103,8,136,135,139,25,247,176,
+  172,135,73,180,118,148,100,165,102,149,137,183,246,149,237,103,45,111,230,56,69,190,251,108,49,35,77,28,231,203,68,42,
+  67,242,197,161,247,91,171,255,19,242,243,43,101,95,84,94,248,29,49,239,119,165,2,120,46,4,175,153,102,197,188,145,
+  118,123,201,225,102,119,255,99,250,161,150,227,1,35,27,137,251,44,74,215,248,64,204,140,9,118,233,140,220,148,108,104,
+  74,79,3,64,95,243,156,110,104,74,136,153,243,67,50,212,181,121,239,169,122,224,215,43,90,160,167,231,91,252,232,21,
+  54,114,187,110,252,230,178,247,11,0,196,134,238,216,205,138,1,221,184,0,200,67,243,181,23,144,60,65,118,202,242,130,
+  197,85,250,189,114,230,175,128,183,137,145,235,85,140,224,224,32,71,130,109,112,124,140,26,71,152,2,48,84,128,0,40,
+  254,158,62,243,239,235,245,24,136,0,14,255,227,160,250,108,204,58,129,22,62,3,0,28,135,243,112,206,206,215,0,35,
+  24,64,130,245,0,137,34,189,192,80,206,204,253,11,57,46,32,1,128,33,87,163,198,144,166,6,126,163,223,58,131,202,
+  201,253,94,59,216,200,59,25,136,129,199,206,69,46,72,223,81,73,250,177,124,146,99,195,130,2,101,104,202,240,99,51,
+  76,138,251,32,136,132,220,53,24,224,67,146,6,38,36,32,2,54,94,87,101,46,38,100,245,171,50,48,242,155,110,61,
+  59,24,249,110,177,225,28,217,31,196,32,186,6,250,16,39,215,88,171,246,57,203,55,94,38,64,188,198,210,7,158,111,
+  205,85,167,89,188,236,20,139,151,28,109,241,98,177,227,146,163,196,142,71,91,180,244,4,171,173,120,142,0,123,129,53,
+  30,120,167,229,3,74,125,106,116,64,184,205,152,6,179,172,73,37,136,193,250,220,51,193,4,64,210,247,87,231,19,147,
+  229,35,111,83,254,248,66,49,160,216,119,195,193,150,62,182,183,206,139,76,221,73,242,21,134,220,75,254,122,128,147,71,
+  187,239,88,25,61,113,206,145,189,68,224,191,88,228,162,220,113,244,45,86,48,226,167,193,104,23,186,97,254,84,121,34,
+  243,184,234,249,232,26,90,173,53,127,81,249,253,253,187,187,181,5,192,36,73,109,152,193,184,74,70,139,124,154,78,122,
+  163,156,132,249,62,69,213,204,66,237,51,88,195,128,244,132,57,84,116,79,219,205,118,218,239,108,89,239,137,146,18,146,
+  62,174,227,165,163,7,190,108,3,147,15,118,6,164,246,179,125,203,102,14,192,198,76,10,227,13,114,142,175,74,103,255,
+  90,96,83,129,250,131,141,116,115,85,229,139,30,110,89,49,80,178,223,95,27,108,16,36,20,114,8,0,2,12,192,69,
+  110,68,109,33,15,137,215,79,182,181,58,15,96,132,149,112,224,206,207,0,16,239,179,199,198,127,243,215,175,59,223,11,
+  134,116,194,112,148,138,241,198,106,58,73,250,149,243,49,154,157,102,6,202,202,217,10,150,2,32,228,68,0,164,172,69,
+  46,3,132,216,207,243,181,146,121,198,131,20,249,24,57,167,130,142,159,87,128,165,162,197,187,169,117,54,71,200,28,128,
+  2,38,145,220,23,188,209,245,121,0,161,233,135,99,87,249,96,40,75,223,3,60,106,166,245,154,103,224,185,95,248,78,
+  101,254,108,20,40,117,109,116,58,47,89,179,199,152,251,134,73,137,61,159,202,126,37,64,254,84,62,244,93,217,151,228,
+  204,87,136,25,63,100,201,163,23,91,242,224,5,2,227,217,22,173,56,221,50,150,230,94,114,140,216,241,8,203,23,29,
+  100,141,133,135,121,222,56,180,244,108,75,238,125,141,229,235,63,32,96,125,85,18,145,90,221,59,20,224,41,35,202,22,
+  131,45,145,234,11,229,179,42,103,157,147,245,39,90,245,15,90,50,160,243,108,124,142,252,243,56,249,220,65,218,239,90,
+  86,230,8,140,25,77,29,146,173,121,143,82,162,71,105,119,164,50,231,233,86,244,203,183,89,233,106,88,36,81,251,176,
+  252,253,90,93,247,183,21,52,233,236,192,212,40,212,224,222,213,18,113,156,83,65,231,239,179,209,119,46,47,242,69,35,
+  12,73,138,31,182,36,157,43,137,248,91,21,156,228,76,243,74,37,176,31,213,5,209,23,84,121,32,0,244,9,107,153,
+  124,117,59,183,180,251,80,201,2,6,100,82,56,139,205,70,126,102,3,243,206,178,104,202,54,37,0,39,149,0,172,77,
+  219,193,178,39,206,19,248,174,182,88,142,152,209,249,218,243,41,28,44,215,158,222,47,229,3,29,235,90,214,25,129,189,
+  134,18,208,33,61,67,173,38,242,17,240,1,26,34,100,153,67,148,76,194,158,107,194,74,54,106,209,87,209,95,135,125,
+  248,30,198,239,249,63,128,9,3,76,225,117,56,62,239,117,126,143,215,156,131,99,146,187,16,157,169,252,128,153,58,243,
+  61,216,9,128,4,137,40,153,51,150,163,49,114,129,9,159,4,42,151,158,146,213,238,236,181,10,124,48,79,197,130,158,
+  247,194,60,0,80,231,245,230,136,91,116,188,208,40,207,241,145,162,156,131,60,144,246,64,201,95,191,70,5,15,63,62,
+  129,11,121,27,202,22,48,6,16,50,135,77,120,255,223,50,158,11,189,143,144,168,48,39,121,58,129,17,101,34,128,43,
+  192,161,134,178,228,47,150,80,167,224,77,36,76,107,194,8,155,171,197,52,31,183,108,227,91,172,121,223,249,202,11,207,
+  178,134,164,105,125,177,252,104,241,126,150,44,220,203,242,133,251,91,177,240,0,107,222,185,191,0,122,148,141,174,126,137,
+  213,214,189,67,193,254,43,34,132,95,72,34,82,89,21,154,88,86,75,185,173,178,132,17,51,60,71,207,139,169,88,249,
+  137,128,123,165,164,173,36,241,144,114,207,190,19,109,84,96,28,237,218,203,226,158,173,117,172,109,173,232,219,218,18,73,
+  87,166,210,47,186,88,217,151,14,0,204,184,254,58,17,201,187,228,255,44,113,192,144,183,31,73,154,50,230,147,32,176,
+  40,106,183,151,61,191,130,207,223,103,139,138,246,71,152,11,148,5,51,155,233,74,21,156,162,178,75,26,1,43,249,164,
+  110,250,61,2,224,107,116,97,210,208,186,72,102,63,99,158,77,0,232,243,110,178,238,131,71,114,37,174,201,36,107,220,
+  117,169,13,77,213,231,83,1,224,83,173,152,182,181,53,167,108,103,141,149,207,208,205,124,200,193,157,40,170,196,249,74,
+  129,77,15,51,235,140,242,165,249,52,237,30,241,255,22,27,226,132,157,149,18,0,16,48,84,32,240,10,10,164,31,206,
+  137,77,215,57,0,5,83,44,82,17,194,176,162,255,19,171,126,235,198,235,39,127,198,195,14,255,83,147,134,179,51,133,
+  132,24,207,217,71,172,231,192,163,194,161,146,134,14,140,142,252,140,158,45,14,110,216,25,246,171,36,162,223,59,229,82,
+  170,131,114,205,64,0,168,251,135,113,50,177,153,255,142,251,164,87,140,206,233,207,140,243,133,202,24,174,161,170,13,245,
+  252,18,198,16,251,187,106,32,136,5,38,12,6,8,131,61,169,204,157,13,131,52,5,116,79,250,220,1,201,231,225,123,
+  44,246,82,130,177,156,173,78,146,50,163,183,202,207,4,24,250,116,150,96,164,87,75,214,255,30,165,46,175,179,250,58,
+  164,234,51,173,190,240,8,203,22,31,100,233,188,3,172,88,176,175,53,23,30,104,181,133,135,216,0,83,142,44,125,186,
+  213,238,126,169,197,93,146,183,131,76,151,66,157,5,65,111,73,89,17,40,63,200,11,84,16,166,251,245,249,135,232,33,
+  163,103,145,124,221,98,165,85,249,232,69,2,227,113,86,235,218,219,210,222,45,188,83,73,171,135,145,61,242,217,199,197,
+  138,125,39,203,215,207,150,60,189,68,126,255,33,229,138,76,115,249,61,1,159,148,65,101,45,63,139,179,117,119,215,106,
+  235,254,126,189,105,162,162,254,250,193,230,72,206,116,132,222,28,145,130,120,37,165,233,231,45,99,68,60,237,43,131,47,
+  215,133,61,87,23,203,106,176,36,185,98,181,158,109,189,237,198,107,225,96,7,177,76,243,241,111,217,198,153,138,106,83,
+  233,9,179,149,165,83,182,18,24,55,247,185,93,26,15,188,84,55,114,149,30,194,247,84,40,211,244,144,200,225,136,164,
+  24,178,39,128,144,7,13,19,226,136,202,21,199,30,52,206,129,179,0,66,156,21,6,68,22,86,210,207,219,150,2,11,
+  209,222,134,4,164,54,77,114,15,135,204,254,80,22,164,87,126,136,53,124,31,12,41,199,103,157,251,39,27,224,226,187,
+  250,188,90,89,169,115,168,16,75,175,141,87,138,0,58,162,191,162,177,191,79,114,175,223,123,35,249,228,242,122,9,28,
+  99,249,38,138,128,252,44,72,207,114,136,19,193,169,28,224,171,247,18,202,3,128,82,203,10,0,97,221,112,159,225,188,
+  161,99,118,85,201,83,117,230,46,155,55,228,152,158,11,162,30,168,33,166,18,11,198,165,76,43,149,177,9,176,42,243,
+  103,19,158,19,234,36,188,207,245,178,167,182,148,231,86,61,67,169,25,191,86,255,94,96,71,164,243,106,1,69,169,74,
+  118,179,228,221,245,114,108,249,77,250,125,125,151,129,185,87,42,255,187,92,170,234,77,22,201,79,106,107,158,105,53,177,
+  99,33,118,140,102,239,101,233,252,221,173,57,119,79,27,158,185,171,13,206,19,48,37,91,235,203,207,176,250,221,23,75,
+  93,125,222,138,225,159,90,171,249,71,201,69,130,18,140,72,13,244,90,177,99,72,19,170,154,99,249,67,145,124,211,178,
+  161,215,219,72,247,145,214,96,137,132,94,1,208,65,184,149,94,239,32,146,97,58,13,17,6,125,160,135,104,232,167,129,
+  159,65,217,4,185,91,188,130,168,213,90,215,251,119,157,92,184,25,247,191,131,57,65,153,13,59,147,150,167,247,121,11,
+  22,132,138,89,217,104,176,236,17,147,247,157,34,61,125,136,180,244,246,162,242,45,173,222,125,184,21,116,7,242,104,126,
+  151,244,255,84,69,170,151,218,232,100,233,236,219,169,9,221,218,218,147,159,98,169,152,176,54,251,80,37,218,111,211,77,
+  124,89,44,40,0,0,156,240,16,253,65,242,16,59,36,87,37,69,203,14,212,88,136,212,48,96,144,160,20,48,209,29,
+  0,194,74,48,11,18,176,202,191,200,15,96,6,122,114,248,168,122,170,207,101,236,125,144,46,239,1,22,216,3,7,14,
+  123,164,35,239,135,125,120,205,231,97,4,2,199,225,216,236,105,10,208,222,191,135,12,196,244,158,183,243,1,118,218,236,
+  96,73,93,159,51,53,0,66,118,82,209,67,48,1,0,148,1,78,78,110,156,143,89,232,43,91,6,38,130,15,247,29,
+  0,168,227,249,189,18,16,56,63,67,148,116,13,222,43,230,87,98,30,70,239,135,243,34,219,104,23,172,242,193,177,230,
+  24,128,24,88,49,148,117,48,24,143,53,43,202,206,236,164,8,127,37,83,199,0,202,53,162,90,248,159,96,17,158,99,
+  48,228,43,237,167,176,227,221,146,116,203,229,99,119,40,216,223,100,153,156,155,129,210,212,19,248,122,26,141,143,91,62,
+  244,110,203,30,125,133,165,15,60,219,154,202,23,155,139,14,182,120,193,126,22,207,217,209,210,185,91,90,52,139,249,128,
+  118,179,145,57,135,218,200,220,167,91,115,245,139,173,241,200,165,242,75,102,241,251,177,238,155,224,131,95,114,223,148,23,
+  61,139,164,188,80,72,42,175,172,249,105,139,251,206,177,180,235,105,2,30,109,140,82,108,88,31,115,219,138,100,36,93,
+  91,140,131,29,126,183,72,72,1,162,201,146,226,42,103,47,203,53,34,145,135,238,49,27,218,177,130,208,127,120,251,95,
+  141,244,129,183,54,226,123,115,166,15,79,82,69,80,214,200,243,229,189,232,23,202,10,66,175,116,122,38,121,109,245,209,
+  16,186,185,197,221,59,88,74,77,169,110,182,236,54,181,210,242,222,47,91,255,204,227,196,130,146,169,183,235,102,166,62,
+  213,243,193,230,237,59,89,157,46,76,245,143,40,215,252,174,76,242,13,233,229,78,197,67,19,224,24,22,180,201,67,195,
+  233,200,51,194,3,15,142,10,19,80,43,25,34,28,0,132,253,2,35,192,88,48,19,21,20,114,72,6,122,234,156,45,
+  7,14,0,2,48,85,165,197,38,175,1,95,120,141,67,99,1,92,225,123,204,232,29,142,195,255,56,142,246,128,208,193,
+  12,80,177,32,57,97,34,100,42,243,181,192,124,56,3,101,69,237,171,0,224,247,5,243,149,12,82,74,114,216,15,240,
+  133,138,170,48,224,151,123,215,111,92,182,74,118,59,0,145,190,0,144,107,175,128,63,6,66,42,100,96,94,156,81,142,
+  231,193,10,213,16,228,40,42,4,3,140,176,33,229,11,16,199,193,56,62,2,5,171,158,147,172,85,12,41,56,2,184,
+  240,204,0,97,169,90,202,224,201,82,225,67,10,234,124,95,159,85,19,84,141,7,89,88,82,1,149,220,212,175,9,150,
+  154,228,53,144,204,150,94,168,76,153,63,166,96,122,145,250,7,229,87,151,90,252,240,133,22,173,126,166,13,47,58,204,
+  234,11,246,178,250,157,59,184,101,51,182,179,124,206,150,86,155,190,189,13,77,223,215,6,230,159,100,195,75,206,181,248,
+  161,119,89,214,167,124,176,134,15,220,162,107,70,9,192,142,40,54,5,108,5,207,122,223,249,14,194,92,76,88,74,210,
+  205,100,91,200,199,119,21,19,158,40,191,191,200,218,35,140,141,189,74,223,215,53,233,121,166,94,75,123,183,20,99,247,
+  227,186,183,191,223,220,166,141,164,103,144,209,17,81,58,69,32,212,69,199,138,72,116,122,173,49,89,18,107,64,188,76,
+  55,244,44,93,220,33,150,246,177,70,158,34,81,239,73,250,222,215,189,17,53,203,229,84,233,116,139,31,124,167,109,156,
+  126,176,37,211,183,182,214,164,205,189,61,48,159,162,2,154,183,139,141,60,170,124,50,166,99,182,28,134,238,89,238,0,
+  149,115,21,79,142,156,213,251,222,241,154,8,90,57,194,24,0,201,3,1,33,206,216,9,64,100,39,149,0,212,100,233,
+  60,172,237,62,6,64,64,131,179,2,16,156,180,195,18,28,54,56,238,248,251,222,62,196,68,73,190,138,47,160,102,85,
+  95,142,129,188,132,229,194,111,0,28,231,198,200,193,168,52,128,129,168,112,9,185,24,21,34,85,115,131,223,7,247,137,
+  83,210,25,129,61,96,235,28,240,27,62,171,202,98,44,255,85,224,161,225,154,201,113,93,98,3,122,192,71,96,0,136,
+  92,95,184,79,201,111,150,25,240,222,49,4,44,114,103,2,64,144,192,1,140,21,16,3,43,202,90,62,102,179,170,252,
+  210,249,91,41,224,226,153,148,105,66,43,197,120,15,182,172,242,119,7,106,249,252,202,213,127,149,39,230,229,243,99,13,
+  127,222,167,211,69,217,9,3,128,18,100,81,54,128,241,46,1,133,70,249,233,186,230,63,138,117,184,175,31,8,144,223,
+  210,255,44,154,122,149,21,131,151,75,141,189,201,154,143,157,107,181,213,39,217,232,188,253,173,62,83,233,206,29,79,177,
+  98,198,230,242,187,29,44,153,185,163,69,51,182,151,108,221,221,6,230,28,111,195,107,94,109,241,6,229,158,222,224,142,
+  252,167,12,37,137,155,63,144,36,125,190,213,186,247,210,49,55,171,88,176,52,152,208,155,224,6,95,163,207,222,167,188,
+  240,75,10,8,10,198,60,91,49,107,145,63,168,220,178,251,62,169,146,45,43,8,253,199,182,36,233,58,178,201,8,249,
+  116,190,180,178,162,38,32,164,131,43,53,162,195,111,215,133,188,182,172,144,217,120,162,46,232,64,111,111,137,159,216,207,
+  234,253,229,186,225,121,14,221,207,83,196,186,193,134,87,188,220,70,166,237,102,249,116,69,148,201,91,90,75,5,51,50,
+  109,91,27,89,112,96,57,54,48,253,134,177,110,158,39,203,122,192,62,77,30,206,22,34,170,63,76,61,164,12,7,8,
+  242,19,0,242,0,121,88,212,232,177,76,246,106,177,4,131,65,67,95,75,0,72,37,4,160,169,156,146,113,142,238,148,
+  48,148,100,163,3,133,239,96,212,88,134,60,47,188,86,1,251,107,164,163,142,199,154,136,33,255,243,61,0,227,123,97,
+  207,57,43,27,3,29,172,71,62,74,94,130,20,90,168,235,164,130,0,199,175,164,159,179,63,78,24,152,142,189,242,62,
+  103,193,240,94,24,160,76,153,224,228,252,6,71,133,73,75,214,240,107,242,53,27,21,16,98,2,12,247,139,92,6,144,
+  42,3,207,9,255,172,188,94,249,160,131,144,188,25,57,74,62,121,183,28,137,107,10,64,196,130,60,13,70,205,105,96,
+  70,158,67,120,22,186,22,223,87,230,224,227,185,1,42,130,41,207,148,192,193,117,3,50,190,199,111,57,14,247,193,119,
+  170,160,235,53,225,60,91,130,18,224,231,26,152,190,227,46,127,182,25,243,213,166,191,150,95,234,30,61,133,160,221,145,
+  245,74,62,100,209,134,87,217,208,138,195,173,38,121,154,220,177,189,124,77,224,153,166,188,78,86,204,16,73,76,219,198,
+  231,160,221,56,227,36,107,62,240,102,229,159,58,134,231,197,11,117,108,1,61,255,161,141,246,156,171,124,146,10,198,106,
+  65,33,152,208,167,214,168,102,249,22,8,219,163,31,147,188,165,86,247,23,186,22,42,232,148,103,198,15,91,222,232,122,
+  97,5,161,255,216,102,102,91,140,38,79,28,17,71,119,229,105,162,139,139,37,111,164,125,75,16,74,138,58,8,47,208,
+  5,49,61,225,241,2,224,238,222,3,33,126,240,68,139,106,162,105,73,29,150,96,206,243,59,173,24,253,177,13,46,120,
+  190,197,211,116,19,211,159,226,185,96,52,117,43,27,21,8,107,11,78,179,162,38,80,3,66,28,71,78,217,242,218,62,
+  69,122,30,160,30,68,206,136,247,177,135,59,14,192,196,71,61,232,181,71,105,216,96,157,162,107,200,137,84,40,140,236,
+  119,128,5,0,10,120,200,233,49,86,128,181,0,17,77,1,176,2,61,45,176,169,122,141,131,150,181,159,76,183,215,242,
+  182,209,201,254,121,59,155,108,121,130,221,46,155,226,159,149,32,99,95,214,180,150,22,114,81,36,31,15,25,217,73,83,
+  0,178,19,233,71,115,0,82,143,123,192,249,74,166,43,43,94,74,0,150,239,133,249,102,96,64,172,19,128,101,165,70,
+  41,189,57,183,130,165,231,154,149,228,102,2,170,177,123,70,62,3,66,202,4,86,230,154,97,100,174,141,128,0,27,86,
+  29,24,198,0,200,53,106,63,246,94,103,165,13,231,39,0,146,191,243,76,248,31,134,12,207,170,100,188,18,140,37,240,
+  124,236,100,213,255,215,191,19,24,213,143,33,86,77,194,188,164,248,64,5,90,25,211,148,148,51,31,40,15,101,25,109,
+  42,238,188,118,85,138,135,245,9,93,225,232,62,147,47,40,103,124,151,13,47,63,195,134,231,237,97,197,28,129,103,6,
+  62,167,244,71,126,135,255,181,38,111,102,137,210,162,250,140,157,109,104,201,57,86,12,9,72,122,70,116,14,47,104,58,
+  137,190,37,53,119,142,177,236,120,203,251,157,146,19,10,196,0,210,87,124,162,71,141,82,49,134,235,37,223,85,64,160,
+  44,151,138,68,214,41,215,238,138,163,168,239,172,10,70,255,241,45,138,54,102,105,116,143,146,99,177,19,221,199,226,239,
+  148,39,118,16,94,82,129,144,254,161,44,215,188,167,177,220,88,179,11,41,122,133,63,220,130,222,251,249,44,75,159,184,
+  218,250,231,156,36,16,74,30,168,64,220,166,109,102,145,100,65,124,255,11,148,108,127,66,5,200,116,131,212,12,170,112,
+  253,1,18,5,121,16,202,135,244,16,202,1,176,56,44,86,69,92,228,143,75,22,26,167,75,217,82,78,125,143,243,83,
+  53,15,192,36,11,157,241,228,128,12,179,98,142,77,127,96,56,170,88,203,89,10,208,241,27,228,43,44,69,115,70,104,
+  223,99,207,255,188,14,64,162,2,133,61,239,179,199,202,72,26,126,75,0,242,117,224,253,247,200,61,114,14,229,108,94,
+  225,66,229,81,233,116,33,231,43,193,133,236,12,76,199,235,178,6,52,0,113,220,0,97,25,124,90,62,66,66,231,240,
+  218,95,58,122,195,210,98,104,134,55,209,240,63,150,163,194,132,148,131,222,115,169,44,214,47,196,238,158,147,114,237,92,
+  235,10,177,32,215,169,64,88,224,224,228,152,72,52,174,187,83,166,2,196,138,189,221,96,171,106,239,207,134,64,201,243,
+  194,0,95,5,70,7,158,254,87,78,152,21,85,131,127,0,163,63,239,14,38,244,251,228,190,75,31,160,25,38,43,202,
+  96,148,106,207,188,65,229,121,233,155,58,219,210,48,142,53,249,154,37,3,31,180,145,37,199,91,52,123,107,107,79,169,
+  252,13,3,128,52,141,85,96,28,158,182,171,64,120,158,101,3,42,19,129,47,73,41,203,249,82,110,159,178,102,239,225,
+  34,22,70,238,83,51,90,50,97,209,187,141,8,71,190,222,127,161,252,95,68,211,188,206,114,169,67,38,178,166,13,183,
+  85,72,53,254,189,88,144,45,142,251,207,105,52,187,162,36,81,126,69,132,205,126,165,156,71,249,96,116,133,46,146,53,
+  34,0,225,203,4,194,211,116,145,7,235,130,119,179,164,103,119,171,247,62,75,212,252,35,37,222,43,5,136,251,36,31,
+  103,43,113,190,220,6,60,31,148,12,69,142,78,123,138,229,183,75,138,206,216,203,210,199,95,35,240,125,89,5,240,11,
+  221,144,128,64,100,31,3,96,25,249,125,62,75,127,80,68,219,39,87,10,200,92,170,208,165,12,70,144,67,113,189,238,
+  140,2,154,51,96,144,100,21,3,194,4,161,122,222,129,7,83,1,36,242,51,142,65,175,20,30,8,78,136,177,110,94,
+  89,113,66,205,93,225,85,219,124,14,123,224,180,236,249,29,21,9,56,108,41,235,54,101,21,242,43,100,28,247,192,253,
+  225,68,161,194,133,251,12,140,135,252,44,219,255,198,43,95,198,25,208,199,76,58,227,224,244,180,7,146,7,34,189,5,
+  38,151,192,72,81,170,203,1,32,242,147,123,230,222,49,24,49,84,208,144,175,82,57,131,2,128,241,145,165,75,21,201,
+  9,24,203,253,62,199,239,169,227,190,60,136,112,63,48,100,144,167,164,2,24,215,196,61,86,129,113,12,144,220,51,6,
+  43,134,209,45,220,11,128,211,253,0,40,7,41,207,147,207,249,94,85,217,83,61,99,166,10,73,115,190,95,150,149,79,
+  163,31,158,61,207,45,250,165,124,136,138,176,107,5,152,87,9,128,251,91,126,135,128,131,20,157,73,94,40,54,99,148,
+  206,100,49,219,237,122,95,126,56,52,109,95,27,92,124,129,21,245,27,45,77,24,17,1,105,252,217,226,161,243,45,98,
+  232,147,47,38,43,127,117,19,24,153,225,109,224,217,86,12,75,194,54,63,37,159,96,16,176,2,185,130,96,158,138,5,
+  219,15,254,253,0,200,22,37,253,139,146,38,57,150,34,122,118,155,30,206,207,84,104,95,245,169,228,138,198,187,21,9,
+  94,47,99,178,222,83,117,129,44,25,205,192,219,125,173,57,120,177,64,248,7,1,144,7,168,135,153,220,98,245,187,223,
+  100,67,179,14,178,124,10,181,162,37,8,139,59,182,181,209,133,199,88,107,248,50,29,251,107,138,96,114,10,114,19,103,
+  186,97,73,131,72,209,46,147,35,18,245,43,176,201,198,155,37,42,115,57,132,67,224,240,212,110,1,170,78,22,68,130,
+  5,39,132,9,202,74,137,146,1,145,111,68,49,216,171,2,150,71,252,74,130,57,99,1,30,12,231,11,239,211,158,22,
+  44,56,38,175,195,111,194,239,42,7,13,142,56,22,229,203,252,46,88,248,191,19,140,229,123,33,31,172,216,207,131,17,
+  199,193,217,117,124,7,9,44,8,139,139,5,93,138,10,88,206,116,176,61,247,27,238,93,42,102,147,114,64,150,146,211,
+  194,134,157,64,100,201,237,160,0,200,21,9,72,4,153,10,136,30,84,184,231,0,196,96,4,66,128,8,75,114,255,228,
+  113,33,232,240,76,195,243,18,0,121,166,94,227,45,235,172,92,19,104,203,231,75,62,24,222,11,0,230,53,191,33,120,
+  85,0,245,242,236,42,3,125,122,131,21,209,151,5,198,203,45,186,235,92,177,220,78,150,77,223,220,178,153,155,91,174,
+  61,237,209,233,180,45,220,7,115,114,195,41,91,88,125,250,62,86,191,239,237,150,71,82,107,169,238,83,138,136,37,186,
+  235,221,199,88,222,199,208,59,36,40,179,0,50,7,46,44,120,156,181,6,94,101,173,161,247,139,5,89,143,82,105,142,
+  55,75,220,109,113,242,216,220,191,235,232,122,29,236,169,69,209,181,54,98,56,127,62,95,116,123,171,37,228,107,190,54,
+  188,164,227,232,101,202,251,94,239,53,72,173,158,227,196,130,116,132,221,201,70,187,143,176,172,70,15,25,166,146,131,9,
+  89,75,239,79,86,91,251,38,21,202,161,86,204,220,74,5,35,16,74,38,212,165,199,163,187,206,84,161,49,73,171,64,
+  72,127,66,30,178,71,81,242,2,0,136,3,134,104,88,73,80,253,95,78,126,84,61,60,30,52,15,221,29,132,110,73,
+  84,124,192,132,146,39,206,8,200,48,76,206,231,77,5,48,0,21,38,228,67,20,32,19,10,19,253,137,244,65,42,226,
+  64,88,229,60,99,255,63,217,170,200,239,175,217,115,237,72,178,32,199,184,198,32,55,199,115,188,242,222,194,156,162,128,
+  46,176,96,96,190,240,122,252,55,126,140,32,221,0,55,249,144,3,4,249,93,49,161,203,81,42,144,168,96,66,5,112,
+  255,48,31,74,160,211,96,73,216,16,176,210,190,69,78,12,136,145,229,202,127,29,140,72,110,192,8,16,3,24,9,84,
+  1,140,228,180,128,145,224,131,10,121,80,126,18,2,20,123,64,73,249,4,118,236,4,83,48,253,239,146,146,26,87,238,
+  139,103,205,179,229,62,3,112,97,77,36,58,101,70,208,162,60,40,139,234,24,2,125,146,76,179,6,171,121,101,95,180,
+  246,200,101,214,88,112,148,69,115,183,179,214,29,84,196,108,85,202,79,100,169,36,104,38,0,230,211,182,86,106,180,189,
+  13,204,60,209,178,141,250,93,235,78,249,170,148,80,254,23,75,251,47,178,166,20,93,209,43,16,122,215,75,229,129,190,
+  20,195,129,98,65,165,78,3,111,87,58,246,249,178,51,65,118,139,126,75,173,234,35,130,204,223,121,122,11,69,154,93,
+  26,241,99,93,205,244,126,139,179,69,162,93,154,39,126,234,178,209,187,18,53,223,101,237,154,228,168,168,185,92,15,126,
+  31,129,112,95,139,30,57,89,159,127,220,88,227,47,47,148,23,233,198,90,181,223,218,208,178,23,217,224,244,125,45,155,
+  129,60,216,202,82,129,176,57,127,103,203,30,19,147,54,37,111,35,186,42,81,65,0,16,228,192,149,83,150,133,141,35,
+  243,80,180,207,66,126,17,30,0,142,79,244,197,9,112,146,0,66,1,76,32,132,189,189,209,220,107,67,229,124,46,193,
+  200,133,136,252,180,71,34,65,145,93,65,50,2,64,64,20,30,126,21,0,88,210,203,167,70,84,228,245,243,50,127,74,
+  191,238,177,2,133,59,19,159,7,35,90,99,65,110,114,47,33,215,235,4,92,201,124,1,144,165,147,149,142,22,130,80,
+  249,25,32,174,202,194,157,86,215,234,185,26,76,136,132,38,167,163,11,22,64,132,225,131,18,160,2,70,247,236,146,28,
+  224,193,142,21,0,125,207,251,84,78,133,218,97,0,28,2,84,167,84,71,41,96,128,145,242,10,236,56,46,217,91,158,
+  63,162,36,2,8,97,71,212,64,8,84,149,185,148,38,104,141,179,99,89,233,70,121,151,101,182,201,107,47,163,96,124,
+  6,27,18,216,152,86,114,72,224,161,93,238,6,145,196,87,165,186,174,176,198,125,47,177,230,204,221,172,53,107,75,175,
+  140,33,7,116,35,31,156,46,73,58,89,76,40,27,185,101,111,27,92,246,82,249,31,227,2,73,185,20,200,226,207,42,
+  157,58,161,26,8,12,0,203,53,80,188,27,38,51,65,12,188,86,4,196,96,223,175,203,103,21,228,104,14,82,32,250,
+  187,3,144,173,217,236,223,167,153,110,180,166,116,46,99,180,90,12,32,37,162,38,215,89,54,242,105,93,200,123,148,15,
+  190,82,121,225,179,4,194,163,202,124,176,107,15,139,123,158,41,230,83,52,194,25,244,192,50,214,29,28,252,166,141,44,
+  122,186,69,179,118,149,44,216,70,76,184,165,53,231,110,107,67,11,158,102,233,19,111,212,141,235,251,176,19,15,219,65,
+  128,196,168,34,63,133,29,36,200,38,18,37,24,15,180,236,101,81,58,7,210,76,231,246,134,106,57,21,206,198,148,244,
+  212,16,226,116,238,104,68,253,80,99,185,68,210,75,14,229,18,84,231,118,6,195,1,42,217,232,243,147,150,214,42,4,
+  36,31,162,51,254,94,9,174,18,96,99,78,226,22,130,8,192,42,107,53,199,1,200,231,127,253,255,166,199,10,175,195,
+  239,171,239,249,108,2,128,16,38,68,126,3,66,192,64,165,10,50,146,202,25,164,169,0,228,128,194,200,17,145,157,114,
+  26,175,49,5,124,140,94,0,136,65,37,252,196,152,58,114,156,25,1,34,172,88,50,163,31,211,219,52,1,34,231,194,
+  0,63,96,164,220,1,99,135,57,16,1,33,114,60,128,112,28,116,165,81,83,74,80,13,229,141,5,213,208,105,4,62,
+  222,199,0,102,40,27,106,74,31,149,127,222,110,205,228,135,242,209,175,89,218,247,70,27,157,45,66,144,143,149,149,47,
+  2,208,100,89,85,17,88,144,14,77,145,68,157,180,185,173,159,122,136,197,93,87,234,222,150,43,88,227,227,191,181,104,
+  240,2,73,209,93,197,130,146,160,46,67,1,160,192,40,31,247,5,106,135,145,161,12,236,189,81,223,39,136,223,243,143,
+  1,160,14,250,148,134,53,246,106,166,189,77,134,45,37,210,219,165,67,235,97,177,110,60,107,169,179,118,224,40,11,119,
+  50,112,151,74,153,157,172,209,187,143,165,172,162,75,13,106,232,126,149,79,181,188,247,106,171,205,60,92,224,83,206,56,
+  125,107,139,230,108,107,181,89,219,89,115,245,201,214,106,188,79,249,227,87,196,156,122,232,56,147,216,165,157,83,240,98,
+  19,30,148,30,130,55,222,102,128,176,131,1,131,172,241,135,75,14,130,67,226,12,176,129,0,230,21,20,48,64,200,7,
+  113,56,57,160,215,134,86,21,50,206,30,56,17,0,230,24,68,105,206,1,232,117,78,111,38,25,151,65,229,235,192,94,
+  124,6,131,133,46,100,129,181,96,177,114,196,199,56,171,241,155,242,88,229,251,161,226,37,48,95,96,74,12,176,149,0,
+  46,143,89,30,119,220,25,3,19,34,245,96,27,42,128,144,135,203,244,61,58,40,35,31,41,3,128,8,128,96,69,140,
+  198,123,152,145,246,65,202,37,176,33,70,197,77,168,192,209,222,59,26,252,78,38,57,239,138,129,223,19,180,80,42,148,
+  25,134,130,32,103,4,136,72,249,178,50,103,92,170,234,121,56,8,43,105,255,87,82,20,5,129,117,62,83,58,121,7,
+  192,113,191,50,255,188,227,153,120,217,168,28,253,61,86,248,101,69,99,86,94,250,170,20,216,7,108,100,233,81,150,204,
+  18,139,209,33,68,170,203,123,101,1,70,152,176,154,52,44,19,40,89,195,100,120,249,43,164,144,36,193,93,61,221,97,
+  73,67,126,221,123,160,249,226,67,143,84,0,196,122,14,18,0,95,96,197,70,198,16,94,37,0,178,136,14,50,116,229,
+  63,6,128,97,107,198,163,87,69,81,151,69,190,140,89,149,95,81,253,219,188,82,192,249,136,181,70,104,35,60,191,172,
+  25,237,219,199,154,125,123,88,179,235,64,233,235,151,232,65,234,65,123,164,148,116,201,103,88,242,200,123,108,232,142,35,
+  149,20,239,32,41,42,41,48,107,107,171,221,185,179,197,247,157,46,73,171,99,37,215,123,159,84,143,158,60,152,140,7,
+  129,36,109,74,238,49,155,117,21,1,199,30,24,159,33,25,217,35,107,2,19,234,124,46,159,74,41,234,82,139,70,92,
+  242,64,159,141,12,54,160,33,157,220,39,72,44,250,11,226,48,138,214,238,36,58,135,71,219,242,97,143,179,16,86,57,
+  134,91,201,86,37,160,202,62,156,1,76,229,126,156,205,58,65,214,249,157,206,247,203,247,2,192,249,191,243,92,24,231,
+  167,12,96,14,238,155,224,3,203,0,66,238,125,117,85,17,6,40,184,47,128,18,242,68,192,8,152,168,180,81,185,120,
+  57,32,63,171,118,68,130,171,203,117,114,42,88,49,72,84,88,177,234,120,224,129,139,74,44,142,7,32,97,92,29,223,
+  193,8,240,151,137,133,57,55,172,44,105,231,185,117,85,49,229,185,93,149,207,111,2,68,238,133,242,230,121,195,134,149,
+  220,231,126,29,116,213,107,127,30,88,89,22,62,57,51,159,9,240,94,49,66,143,153,228,147,54,186,246,233,214,144,218,
+  42,27,229,25,161,35,83,30,232,230,67,230,4,196,219,55,179,232,182,109,172,127,206,9,86,12,41,61,113,37,177,68,
+  64,254,150,213,123,142,149,146,19,128,153,98,63,0,112,195,30,214,238,123,129,124,93,138,173,65,218,68,160,146,146,146,
+  127,255,67,1,104,159,251,220,83,138,214,208,212,56,121,204,43,86,10,103,22,69,70,186,230,52,175,211,197,124,76,50,
+  244,173,2,226,11,141,169,199,243,190,189,44,22,8,179,190,131,45,103,166,99,30,176,131,80,145,50,251,189,213,31,124,
+  179,13,206,218,207,178,59,183,243,26,209,98,238,230,54,50,119,87,75,186,47,212,241,190,34,61,255,51,61,64,61,92,
+  103,180,186,64,137,35,134,194,47,11,158,232,72,14,54,6,66,223,83,9,66,62,72,126,68,97,202,33,200,243,188,105,
+  162,106,156,167,183,8,185,172,119,61,131,5,36,207,92,42,227,164,228,55,250,29,17,219,29,37,56,2,121,92,96,160,
+  39,3,16,128,192,128,124,30,58,80,143,191,87,238,3,208,2,123,6,192,149,175,203,239,132,188,111,252,253,206,255,75,
+  11,231,46,143,95,150,3,129,136,42,124,100,56,44,67,153,81,75,138,156,86,16,243,114,128,221,1,6,106,4,86,36,
+  71,198,0,35,1,136,124,49,200,212,235,37,75,97,18,152,17,0,226,100,236,169,65,166,204,144,176,212,36,35,225,171,
+  158,63,222,97,1,32,2,194,192,138,24,229,9,8,21,20,252,186,144,161,33,191,238,4,31,6,0,85,222,57,96,163,
+  220,3,224,176,0,186,242,89,116,90,217,137,131,207,238,18,0,165,206,24,127,152,93,97,205,251,94,104,181,233,59,89,
+  113,59,77,96,37,240,0,98,200,7,97,67,242,195,100,202,86,54,48,237,96,203,54,124,94,215,25,136,226,6,107,194,
+  116,180,9,210,35,166,167,234,43,218,189,155,165,189,103,11,128,82,125,13,230,37,253,142,181,82,86,247,90,240,143,5,
+  32,91,61,173,31,159,68,189,159,142,18,214,19,164,119,249,124,61,36,57,54,141,220,204,229,207,136,226,33,150,51,83,
+  132,216,120,172,116,248,158,186,216,29,45,234,58,76,82,149,89,180,111,151,76,88,108,25,93,214,148,139,36,15,188,204,
+  70,238,216,211,90,243,116,131,179,20,137,230,108,99,181,187,14,177,98,224,237,186,169,107,45,214,131,47,188,171,90,191,
+  10,25,199,166,160,59,163,34,51,85,63,249,33,98,48,2,109,68,72,209,138,1,188,86,20,231,82,20,199,177,188,177,
+  26,22,68,98,233,161,185,180,146,51,186,243,240,27,42,100,116,140,112,76,63,119,233,252,157,204,84,190,46,1,86,2,
+  37,128,15,11,223,9,192,45,223,219,148,69,195,123,157,108,23,126,199,49,3,40,75,9,90,190,95,202,220,242,187,28,
+  163,12,74,190,46,6,6,24,19,57,112,40,135,177,178,160,6,19,105,8,40,130,193,142,0,18,38,11,64,36,88,145,
+  35,135,178,10,140,72,237,41,12,73,185,17,184,0,34,140,8,112,111,245,94,66,101,207,160,144,39,6,16,34,73,73,
+  41,168,49,229,122,144,161,148,43,44,24,152,144,50,230,185,114,253,85,121,143,73,205,242,89,111,202,130,213,123,218,151,
+  125,74,41,3,61,51,229,111,169,3,240,243,22,175,123,145,37,179,119,26,103,61,228,231,223,0,96,49,121,107,27,157,
+  182,159,213,239,145,172,244,190,162,0,240,143,22,141,92,104,17,211,176,120,195,124,217,59,198,167,214,103,194,224,161,87,
+  203,167,89,67,229,235,2,189,136,72,247,249,15,7,96,216,26,81,223,183,162,228,113,49,148,146,108,103,66,177,91,252,
+  45,93,140,52,241,192,135,100,111,209,69,50,114,226,48,43,24,121,220,189,147,244,244,201,150,199,159,23,104,231,40,89,
+  6,188,115,173,168,125,223,134,22,159,107,141,57,146,9,51,36,19,102,111,105,141,217,59,91,109,205,25,150,55,222,173,
+  130,252,146,165,201,239,4,118,36,161,10,219,165,40,18,165,44,248,242,33,224,104,68,203,74,134,248,255,2,165,231,70,
+  72,81,106,9,113,0,1,203,37,23,14,3,19,146,231,16,213,201,115,136,234,68,116,162,57,9,53,78,169,252,197,101,
+  19,32,4,228,156,131,104,27,114,185,114,180,66,0,202,56,8,203,207,194,123,155,126,94,130,169,4,92,249,221,240,187,
+  241,247,194,49,2,32,3,40,57,206,248,185,55,53,192,200,247,2,168,195,107,202,7,86,193,161,145,230,72,84,49,59,
+  204,232,229,66,69,9,128,36,64,133,74,155,42,79,116,105,10,200,66,101,13,224,163,49,63,0,145,242,211,251,254,29,
+  190,75,158,125,139,2,39,101,88,182,175,142,179,33,249,33,231,225,57,82,193,69,121,2,188,160,90,130,241,236,130,4,
+  173,246,99,204,87,61,239,191,105,1,148,247,202,39,127,47,246,254,190,36,228,151,44,235,125,177,197,2,224,24,232,66,
+  207,24,76,185,95,251,118,1,80,50,148,73,164,163,219,119,178,129,197,47,210,61,233,222,9,192,74,91,242,198,155,45,
+  239,97,94,82,214,181,216,74,44,184,153,252,89,249,96,239,177,98,192,215,202,223,47,183,194,23,26,69,221,205,254,207,
+  3,96,187,221,222,182,17,15,53,162,232,1,75,82,30,158,34,31,57,66,243,155,158,152,182,235,98,194,17,105,228,129,
+  231,40,98,48,155,218,78,150,138,186,155,189,207,150,102,254,182,88,141,233,223,150,138,9,239,176,98,228,171,54,186,244,
+  153,150,223,185,135,242,65,209,252,157,219,90,180,96,79,139,238,23,128,227,143,9,132,12,224,157,164,188,143,232,89,213,
+  158,1,54,7,68,37,71,170,72,57,62,16,180,50,151,59,228,29,21,19,186,228,162,2,66,145,219,171,226,137,230,56,
+  19,142,4,8,137,250,146,19,25,114,20,185,182,70,15,146,202,13,42,100,42,7,113,48,240,176,3,48,0,16,236,20,
+  0,83,254,31,62,43,255,15,128,10,239,5,80,150,199,8,159,149,223,11,192,45,129,57,254,30,223,37,0,148,159,151,
+  159,253,109,70,28,127,63,48,111,229,196,46,85,43,231,247,114,161,217,6,16,18,160,144,234,228,203,200,72,154,31,168,
+  61,14,121,97,0,32,224,235,4,97,0,32,223,35,176,193,156,228,150,252,30,54,5,132,228,214,1,128,212,138,210,49,
+  33,168,22,246,60,75,174,139,231,5,251,85,1,214,203,186,2,94,96,66,223,243,89,245,191,91,249,157,196,59,243,175,
+  21,0,171,105,85,164,160,154,247,191,208,162,89,59,59,208,0,93,89,27,42,115,6,100,152,92,249,154,217,27,226,219,
+  119,85,30,248,108,107,71,176,25,190,50,219,242,209,15,248,204,15,14,190,177,154,80,58,104,31,33,0,94,104,237,225,
+  15,91,150,92,39,0,170,140,254,51,1,200,214,204,6,158,25,55,55,52,163,148,254,131,2,33,19,175,242,48,18,129,
+  144,126,163,67,239,43,163,132,143,33,60,68,81,99,23,75,187,246,181,156,42,220,244,135,150,59,8,245,224,169,113,234,
+  250,140,13,45,57,220,210,153,52,156,170,80,230,73,138,46,62,64,223,191,88,199,187,70,249,224,15,44,163,170,215,163,
+  39,15,170,98,187,177,200,135,241,240,136,246,68,209,96,252,175,135,204,239,188,70,78,160,114,167,128,9,229,52,238,88,
+  212,140,226,76,84,50,0,66,57,18,12,224,11,156,32,209,136,218,56,107,37,155,28,244,128,161,148,146,227,32,9,206,
+  94,50,79,249,122,28,104,227,159,1,146,240,126,249,186,60,94,39,112,202,223,108,250,189,242,156,229,189,142,255,174,243,
+  56,227,191,235,4,249,248,241,55,45,171,80,113,67,174,76,131,62,32,12,114,148,188,144,50,146,42,96,108,168,143,64,
+  160,172,0,30,21,51,236,81,15,1,128,48,32,0,164,236,170,156,48,52,89,56,11,6,0,6,89,15,240,58,217,143,
+  231,52,236,67,151,124,98,174,16,88,159,252,124,253,255,240,89,176,234,59,12,119,210,61,180,242,223,40,128,234,250,162,
+  107,172,118,247,153,22,207,20,96,4,54,218,254,202,54,64,25,61,177,168,5,133,1,49,1,51,189,157,138,152,51,173,
+  85,215,189,122,77,232,28,203,155,31,183,38,235,85,120,59,32,61,99,0,160,124,20,0,178,120,140,0,90,46,20,35,
+  0,42,208,252,167,2,144,173,150,116,31,221,136,187,135,152,91,52,167,199,11,209,143,68,157,126,163,181,79,119,128,240,
+  217,150,178,152,75,239,190,150,108,216,203,138,65,170,124,245,240,244,96,0,97,158,221,106,205,135,222,98,181,57,7,138,
+  1,183,177,98,238,102,22,207,219,73,160,60,198,178,190,119,233,187,87,139,105,5,218,140,188,66,192,242,36,157,130,231,
+  97,85,81,50,60,56,143,156,124,38,11,17,127,204,209,232,187,137,20,37,88,132,74,153,74,134,250,158,220,166,138,230,
+  99,77,19,33,114,119,48,97,135,19,4,134,10,44,86,190,87,2,161,124,63,128,34,128,102,156,17,199,63,231,55,129,
+  193,0,78,39,235,133,223,6,135,227,255,241,215,229,247,74,70,28,255,44,148,73,105,229,181,133,239,142,191,95,150,13,
+  42,1,38,44,155,47,202,74,8,64,136,140,36,31,252,77,249,172,28,128,84,198,0,62,246,82,15,158,63,135,60,144,
+  242,148,57,248,96,64,0,24,154,42,56,46,146,30,21,67,16,237,200,251,220,120,78,60,55,93,183,179,27,215,143,81,
+  206,88,248,31,227,57,115,253,188,14,247,194,123,146,215,58,95,75,207,210,103,120,143,62,105,205,229,39,88,58,93,249,
+  27,29,63,152,30,5,240,5,9,58,105,203,177,154,80,44,185,117,123,219,56,235,116,177,158,242,222,42,55,6,128,81,
+  215,254,2,28,93,209,164,206,200,1,187,148,83,246,29,41,246,19,0,81,122,76,222,228,35,122,254,147,25,48,108,195,
+  195,195,39,143,214,123,139,102,250,144,64,162,7,167,104,232,203,109,213,170,193,188,35,239,180,214,200,75,45,233,61,85,
+  17,228,112,81,250,14,98,60,1,109,244,109,250,238,77,2,32,18,118,166,21,201,79,108,228,174,243,149,3,238,105,201,
+  60,105,110,73,209,120,254,30,22,173,122,186,142,241,110,43,210,175,138,9,127,39,39,162,74,155,38,2,30,156,10,222,
+  31,92,245,16,252,61,22,205,68,198,240,224,0,97,249,94,89,51,74,141,32,133,139,131,73,34,121,251,150,88,111,12,
+  128,48,33,53,125,72,81,106,248,144,162,176,66,136,222,202,41,67,228,30,3,97,0,218,56,0,59,223,47,65,17,64,
+  20,44,72,200,241,207,203,255,55,101,192,0,212,241,247,202,223,114,252,242,51,190,207,107,36,104,245,93,106,4,189,183,
+  78,184,142,240,155,78,224,202,188,236,66,185,132,246,195,80,54,48,23,82,29,80,201,33,29,128,40,5,44,212,136,18,
+  172,80,12,21,251,85,53,162,190,154,45,179,29,32,101,199,42,98,66,45,40,57,117,144,243,149,17,76,189,60,1,17,
+  129,179,2,90,85,193,50,126,189,0,179,122,166,254,30,175,195,119,96,191,187,4,188,63,232,220,223,210,53,92,103,197,
+  192,59,109,116,225,211,44,159,33,240,144,3,134,60,176,98,192,214,164,45,54,105,142,96,17,161,190,217,167,91,81,35,
+  159,83,57,84,12,24,247,210,49,187,202,255,168,5,237,146,164,245,117,239,105,140,47,1,72,99,252,127,9,3,134,173,
+  153,142,204,11,51,108,251,168,6,230,83,100,14,254,38,93,214,62,42,0,137,5,135,89,101,233,84,203,251,246,86,114,
+  188,163,168,253,120,43,234,98,73,218,224,228,228,0,177,53,250,93,27,90,122,186,13,206,219,199,138,57,74,126,231,239,
+  102,201,130,221,173,121,239,57,214,170,93,161,227,50,223,228,111,229,104,122,160,254,0,5,62,95,85,169,122,64,157,15,
+  54,124,30,94,135,124,208,115,30,73,34,207,117,136,240,161,182,15,240,5,89,69,100,167,82,230,86,177,58,81,28,86,
+  168,26,233,21,105,139,214,120,191,197,0,156,78,6,227,122,198,193,4,128,2,67,241,127,248,94,0,101,9,142,240,189,
+  240,254,248,255,28,43,252,54,84,252,148,160,45,143,59,126,252,242,58,198,65,29,126,95,26,229,212,177,112,169,171,2,
+  152,47,244,39,229,30,37,23,189,22,147,114,33,56,1,62,1,77,121,120,139,230,38,122,18,133,220,207,37,59,242,147,
+  242,3,128,180,11,194,126,200,87,249,128,131,143,60,154,145,227,98,64,7,31,109,128,213,243,8,70,103,108,15,158,92,
+  87,0,217,248,245,150,22,94,135,247,131,241,63,221,1,123,116,206,217,2,224,79,116,157,95,182,86,243,42,139,30,121,
+  137,141,206,100,112,46,29,177,37,29,29,120,218,195,126,72,82,129,208,115,66,207,1,159,98,141,219,119,182,254,121,74,
+  151,154,186,111,247,143,169,150,51,216,183,7,0,234,24,99,0,220,69,0,60,65,202,142,249,98,0,32,93,223,228,147,
+  74,169,254,203,0,216,215,215,183,93,35,217,176,164,153,222,231,146,50,201,202,217,175,218,77,61,44,38,118,170,149,221,
+  213,90,195,103,123,13,82,196,212,246,189,59,91,212,125,150,10,235,235,186,225,106,110,76,221,116,210,115,185,13,44,60,
+  198,210,89,187,43,23,220,193,138,249,187,216,224,130,131,172,177,238,85,146,182,159,83,1,127,67,223,149,60,4,76,46,
+  101,120,104,213,131,241,4,190,179,155,19,210,38,228,27,68,123,218,161,96,65,28,110,174,206,39,134,243,218,59,201,44,
+  119,172,74,90,141,73,81,24,128,72,142,140,98,156,223,93,146,218,72,81,24,152,138,140,114,32,105,105,161,34,132,107,
+  193,2,0,74,192,148,64,9,128,11,0,11,64,12,128,45,63,43,191,223,201,130,229,241,203,223,241,189,242,243,242,156,
+  227,231,14,54,126,220,18,128,12,120,45,203,166,95,1,140,218,80,177,158,215,132,134,102,9,42,96,84,166,94,251,169,
+  192,51,150,31,135,160,132,236,12,121,31,229,67,144,234,0,95,144,236,42,207,66,185,122,70,197,156,3,154,230,28,164,
+  39,221,209,104,126,8,202,165,195,156,189,48,158,99,7,176,92,217,8,116,126,221,1,132,213,115,246,207,43,176,234,249,
+  182,20,68,18,177,95,156,137,253,210,43,45,235,191,204,6,23,31,238,221,28,75,214,19,112,2,240,60,15,212,126,114,
+  213,69,173,2,224,224,212,157,109,112,249,203,21,108,36,189,185,118,73,240,188,126,153,53,1,96,215,86,227,211,84,116,
+  237,42,0,210,129,251,2,1,240,114,249,183,252,49,254,147,215,131,252,151,1,48,108,205,180,107,74,154,41,31,204,144,
+  51,114,112,30,16,171,210,176,32,6,125,70,71,95,237,53,163,190,220,117,239,14,62,250,56,233,125,141,30,232,141,126,
+  3,180,17,182,147,155,173,118,207,37,214,148,252,204,230,41,225,213,190,49,119,111,171,47,62,222,242,158,87,234,88,87,
+  91,17,255,200,50,218,107,252,193,82,57,50,162,135,128,163,50,132,169,146,136,60,32,239,33,17,30,54,13,244,157,141,
+  244,128,16,199,3,132,127,214,53,132,81,3,56,26,142,167,215,228,55,138,236,173,106,225,142,113,41,74,36,15,224,7,
+  20,1,132,227,246,183,193,212,249,57,159,5,219,244,179,242,243,241,247,198,207,1,8,75,118,11,255,143,131,47,252,166,
+  51,8,224,160,186,70,119,116,24,143,0,4,240,66,15,153,69,186,55,154,31,200,137,1,82,0,94,200,245,58,202,130,
+  247,89,234,203,115,62,128,135,209,129,1,214,3,124,58,142,55,242,195,120,148,45,35,37,232,126,6,224,171,14,13,2,
+  75,46,160,97,60,51,102,61,40,165,102,149,179,143,201,203,10,104,30,64,171,103,57,246,190,238,209,89,143,128,170,231,
+  160,32,82,196,127,180,156,57,122,232,198,88,251,144,213,239,62,219,234,179,247,246,182,229,18,120,149,1,60,64,120,251,
+  22,222,246,23,0,9,16,233,142,22,61,240,14,221,211,76,175,207,64,1,228,253,175,177,124,3,19,144,149,115,136,150,
+  166,28,80,0,108,13,208,255,249,114,41,189,239,89,17,177,92,246,63,1,0,219,237,246,150,141,168,239,137,36,42,199,
+  17,250,131,97,106,118,88,14,41,58,244,22,49,161,162,76,183,180,246,250,114,150,237,236,193,48,124,233,54,75,37,85,
+  152,219,177,85,255,174,231,126,209,188,29,45,157,189,135,181,22,28,108,181,5,251,217,232,210,195,85,0,239,20,19,126,
+  205,90,44,2,201,162,30,206,132,68,193,42,250,251,131,14,114,166,227,33,122,187,32,142,0,8,169,213,164,105,130,90,
+  88,28,144,124,167,51,234,7,199,211,181,139,33,153,158,98,188,61,139,10,25,122,201,116,178,111,9,8,94,151,192,40,
+  217,109,156,189,58,223,27,103,168,0,154,240,187,240,94,249,221,206,215,229,177,0,117,249,189,242,156,229,255,227,236,87,
+  190,47,243,81,227,37,59,140,231,121,180,137,34,191,201,199,202,38,135,114,202,13,201,205,148,137,115,153,137,44,220,63,
+  128,35,223,227,127,44,244,128,161,203,26,21,45,228,123,84,180,76,210,239,103,232,89,35,55,41,27,128,7,171,82,115,
+  12,227,145,239,113,13,229,64,106,198,250,197,25,107,128,148,160,42,59,14,132,60,174,147,217,120,110,48,96,245,190,94,
+  19,92,91,45,202,132,114,208,61,41,16,178,44,94,43,254,181,229,201,247,5,132,175,88,209,252,132,53,238,126,145,13,
+  207,218,223,146,217,98,63,6,228,134,74,23,172,35,23,108,223,94,129,79,236,215,186,121,51,235,157,121,140,229,27,37,
+  39,139,185,242,67,1,48,249,145,21,253,207,147,143,210,11,166,172,1,117,6,236,81,14,216,127,154,252,248,245,242,233,
+  79,59,0,91,9,125,151,87,252,215,3,144,173,17,111,124,91,28,61,161,40,200,131,94,104,69,242,23,93,164,100,75,
+  243,26,107,215,63,162,11,191,84,55,122,190,181,250,78,145,28,221,89,82,116,43,139,89,52,35,102,76,214,60,73,88,
+  229,13,249,36,139,214,95,110,163,139,14,177,108,193,62,150,205,217,215,167,47,143,22,236,109,141,213,103,43,193,22,155,
+  178,222,188,119,158,213,67,151,180,201,91,68,69,177,142,131,15,217,194,3,85,68,245,202,6,30,120,101,158,11,98,48,
+  1,14,67,165,67,213,75,198,43,100,112,56,0,168,61,147,177,138,25,90,25,121,13,17,158,218,60,242,64,49,168,119,
+  83,227,60,56,73,0,84,9,146,18,28,1,64,1,48,37,35,150,64,225,245,147,25,178,100,67,142,17,254,47,247,28,
+  171,19,184,88,56,103,248,78,120,79,64,38,39,246,188,138,128,3,8,200,123,149,26,56,43,1,18,238,151,60,143,102,
+  6,0,133,221,160,123,100,46,216,18,112,153,203,76,238,157,0,132,33,199,201,9,3,227,241,123,114,99,24,15,169,89,
+  77,240,4,35,185,204,68,133,148,192,251,107,11,53,160,176,96,40,63,153,3,142,231,85,5,80,88,110,236,158,121,182,
+  44,95,71,48,121,76,234,103,169,238,83,215,193,250,13,158,151,150,43,52,37,15,158,107,245,185,187,91,62,71,224,11,
+  236,55,235,73,32,12,6,248,188,9,226,169,150,76,222,209,70,22,191,212,242,230,159,229,127,4,90,165,80,201,23,148,
+  34,41,224,247,136,253,122,55,183,84,32,4,128,105,239,62,2,32,235,17,210,227,139,49,129,10,84,4,162,214,170,175,
+  86,16,248,175,221,204,254,191,255,213,108,246,95,150,197,15,22,69,65,143,23,221,76,244,59,153,162,42,163,39,104,59,
+  33,122,12,190,80,55,116,128,143,60,110,118,237,105,209,208,197,114,248,27,85,0,243,245,155,37,138,102,191,182,145,149,
+  231,88,58,255,0,107,221,41,22,188,115,23,49,225,158,214,88,120,176,53,30,124,190,192,76,244,249,133,64,40,118,114,
+  64,16,73,229,172,30,65,171,7,233,17,86,15,153,101,176,253,161,7,70,0,128,200,80,164,50,181,176,85,46,152,201,
+  201,200,255,136,254,76,101,232,149,49,228,55,1,128,212,18,210,79,148,10,5,177,10,199,116,160,7,16,149,32,28,7,
+  209,56,208,198,157,105,211,255,75,208,194,128,225,55,129,217,198,191,207,251,252,95,190,199,231,37,0,203,223,4,249,9,
+  227,85,14,30,122,189,120,5,11,129,144,235,174,114,94,152,203,229,102,104,130,193,66,205,38,236,39,16,58,219,1,58,
+  130,18,223,165,243,117,103,195,58,149,43,0,143,99,35,201,145,154,176,93,57,129,239,24,136,220,184,166,234,186,188,188,
+  80,32,60,27,64,215,201,118,148,35,247,21,238,47,24,247,197,61,145,187,47,87,126,57,213,18,159,183,246,123,10,20,
+  95,22,16,175,176,98,248,237,86,95,123,166,213,36,59,211,57,98,171,217,2,29,192,155,35,163,93,185,2,93,104,144,
+  119,41,58,137,69,132,158,106,249,164,205,109,120,234,33,54,252,192,135,117,111,98,84,212,1,221,234,70,223,100,113,247,
+  158,14,58,44,239,221,76,255,43,37,234,59,76,190,251,18,129,239,50,49,224,213,242,65,5,42,202,36,95,242,247,157,
+  146,226,63,186,165,209,19,111,138,210,135,44,77,215,42,178,78,215,133,254,70,166,7,205,170,165,116,206,30,124,165,162,
+  202,233,150,116,179,130,205,246,2,225,17,86,48,170,66,206,238,82,84,76,152,117,125,70,172,119,164,181,230,237,166,92,
+  112,87,107,45,220,211,242,197,251,90,77,9,118,107,240,18,151,182,232,255,22,13,250,1,128,254,32,195,195,4,128,60,
+  64,162,45,78,0,0,101,158,15,1,64,36,25,185,16,181,127,56,24,32,4,128,33,7,162,173,235,183,37,211,58,0,
+  67,165,130,0,104,116,40,174,28,105,12,12,37,232,74,80,149,12,85,2,46,128,168,243,243,39,51,96,120,191,147,57,
+  159,12,216,241,223,140,59,104,117,207,99,224,35,184,208,221,140,17,17,129,225,233,1,68,205,38,149,74,228,112,128,47,
+  48,125,0,32,57,175,2,142,51,31,108,135,212,164,81,29,67,130,211,160,78,229,10,109,169,52,5,193,120,228,148,4,
+  34,24,175,4,94,185,194,21,204,70,62,55,94,254,105,30,0,24,202,76,22,0,232,223,235,188,31,246,188,207,253,240,
+  156,244,124,179,201,98,165,95,73,81,209,73,92,41,77,250,5,5,225,203,44,126,248,5,54,180,224,16,27,156,183,151,
+  100,167,192,7,232,48,0,232,64,44,65,151,76,219,194,89,207,1,56,85,175,5,60,102,110,111,76,217,209,6,23,73,
+  106,54,127,175,107,100,110,24,49,96,242,61,139,122,158,35,223,220,166,4,96,53,87,104,90,229,127,69,159,8,100,228,
+  67,242,191,111,233,58,254,128,175,222,99,182,234,239,55,85,253,223,107,139,162,135,47,111,38,15,182,243,108,177,156,248,
+  54,1,80,114,38,98,12,225,135,45,235,123,163,52,246,75,37,67,143,246,170,221,98,195,14,22,247,208,253,76,236,163,
+  136,157,178,128,75,252,115,171,175,122,142,51,95,107,254,78,37,0,23,238,97,141,101,123,216,200,253,207,21,152,37,1,
+  36,67,146,148,168,69,100,13,15,17,135,4,116,60,96,61,220,77,24,48,56,105,200,137,144,149,56,169,64,70,155,22,
+  0,100,38,109,207,129,112,70,100,151,114,89,119,62,190,139,243,145,67,82,249,195,241,199,193,21,64,179,233,126,83,137,
+  249,215,239,227,112,129,57,55,253,94,105,225,248,124,94,178,165,231,77,29,3,132,75,199,46,43,89,242,140,220,150,74,
+  22,114,112,128,167,107,207,96,50,64,165,242,119,224,33,49,185,63,140,215,4,29,154,21,130,212,236,100,188,217,58,47,
+  235,228,73,246,229,40,6,242,187,74,106,122,25,80,174,37,131,229,202,241,202,10,22,192,8,8,195,53,18,28,1,34,
+  207,129,215,35,202,7,145,149,124,22,202,35,178,172,5,104,249,188,100,188,60,95,40,134,155,100,49,243,129,166,52,176,
+  11,120,241,23,172,24,121,175,101,235,207,179,250,210,35,173,38,101,148,205,145,68,156,43,240,137,237,242,185,155,251,68,
+  76,14,194,138,249,48,230,167,45,166,110,93,178,223,20,201,211,219,54,179,108,210,246,54,56,247,16,75,122,116,76,151,
+  158,42,55,250,179,54,222,102,73,215,33,101,251,95,24,134,36,203,122,69,4,27,159,107,89,207,187,229,195,95,20,104,
+  127,161,107,154,170,235,95,252,197,202,229,255,249,182,102,210,53,80,20,138,150,122,152,173,88,14,30,195,130,138,94,67,
+  72,209,139,164,167,159,174,196,246,0,69,153,109,45,127,232,64,203,135,222,171,239,34,5,228,236,249,84,107,60,124,153,
+  53,23,170,48,22,40,15,156,191,155,21,180,11,46,218,207,154,107,78,181,118,237,131,70,191,191,66,223,43,43,26,58,
+  153,15,135,224,33,151,236,144,230,85,78,226,142,90,74,208,44,97,93,68,242,34,228,25,210,76,206,23,36,232,152,20,
+  195,25,105,138,224,123,212,130,146,3,118,54,129,4,0,5,80,5,160,224,88,37,168,194,103,229,123,157,53,150,227,192,
+  45,223,11,12,87,178,230,184,149,199,26,119,104,238,179,98,152,177,123,34,40,144,215,114,141,212,110,178,34,20,121,30,
+  65,69,247,65,123,158,131,175,195,92,98,115,143,52,41,208,238,25,218,242,144,170,48,62,53,191,149,212,244,198,122,24,
+  143,178,35,255,173,202,211,65,69,57,140,170,172,81,5,188,23,172,146,163,1,128,225,122,245,91,192,90,248,125,83,30,
+  42,39,214,168,247,10,50,218,38,23,235,217,220,46,224,93,175,123,248,190,236,107,242,155,207,41,96,191,211,154,247,61,
+  207,234,203,142,177,198,60,5,109,192,22,128,38,240,249,154,17,115,183,177,88,230,32,236,0,96,107,138,88,204,103,230,
+  211,235,169,79,181,230,212,237,172,127,250,161,22,63,250,78,249,208,36,229,149,76,167,33,169,30,127,221,154,61,167,248,
+  252,70,37,240,116,14,122,193,72,165,229,221,135,202,103,95,33,25,250,57,125,239,107,186,174,63,235,119,11,71,218,237,
+  133,91,87,238,254,207,183,213,154,143,159,159,196,85,15,20,69,99,166,121,111,53,148,56,211,8,207,146,193,131,231,138,
+  5,153,202,130,27,222,89,212,255,60,57,203,111,20,145,202,10,131,98,224,27,54,176,248,76,203,22,42,23,20,0,91,
+  139,4,68,217,232,226,227,20,145,222,163,194,251,166,64,116,155,30,40,14,40,71,96,202,186,224,168,129,1,59,157,194,
+  29,232,49,25,210,6,57,197,117,145,3,50,164,6,105,6,3,82,11,168,189,156,151,137,121,61,32,80,171,235,249,31,
+  77,31,85,51,132,159,167,140,224,37,128,2,120,2,32,249,191,148,84,37,128,2,152,202,207,198,191,83,30,39,88,9,
+  220,242,251,165,244,12,223,229,247,124,151,28,87,78,237,247,19,42,91,42,240,209,247,146,74,18,2,7,77,5,222,188,
+  34,176,37,157,224,19,219,57,227,85,237,120,99,181,154,10,100,168,129,177,252,142,251,133,241,170,230,4,175,120,234,40,
+  75,25,146,179,236,191,201,53,117,126,86,49,225,88,80,12,247,72,224,32,95,132,45,245,61,114,70,106,53,117,14,175,
+  254,87,0,40,146,27,44,151,18,42,4,188,60,185,194,178,145,75,45,123,224,121,22,45,59,210,154,243,247,181,76,233,
+  72,65,111,169,32,53,1,88,37,61,139,59,100,179,37,49,145,159,157,32,12,205,16,147,183,180,230,244,157,109,104,198,
+  161,214,184,143,25,218,127,239,231,245,126,201,82,10,217,224,171,149,250,200,199,28,120,0,80,160,245,225,72,7,136,44,
+  206,18,113,188,195,218,163,95,17,35,255,92,57,232,44,217,130,15,84,174,254,207,185,153,217,83,27,205,199,239,203,51,
+  37,235,72,153,132,94,50,98,24,86,85,26,161,129,254,85,210,213,98,65,37,188,169,52,119,93,81,38,143,20,97,60,
+  223,146,67,41,50,143,172,122,169,53,84,240,14,192,5,74,180,23,237,99,141,37,199,40,34,94,166,28,240,235,146,42,
+  58,166,79,236,219,25,109,97,62,162,115,136,208,56,42,6,83,226,80,227,108,225,142,167,220,168,37,70,40,231,71,33,
+  31,130,25,196,30,212,144,122,19,4,14,73,19,68,168,237,227,60,161,242,164,108,36,15,0,41,193,2,240,198,243,186,
+  77,65,84,130,172,124,13,88,3,200,66,197,75,121,172,242,255,32,65,67,14,40,71,118,231,198,201,201,103,185,31,2,
+  28,242,16,7,22,91,59,248,96,115,192,71,197,74,144,212,176,30,181,154,48,30,93,200,66,173,230,76,57,20,44,31,
+  114,60,218,240,20,160,252,216,128,5,182,19,80,124,38,2,128,4,168,158,20,216,58,217,206,175,15,11,223,127,146,249,
+  103,92,251,67,186,47,210,0,42,222,20,4,252,122,191,45,217,249,37,165,42,159,81,174,245,118,139,30,122,145,53,197,
+  120,44,224,153,204,219,209,59,102,20,180,15,99,212,116,206,5,112,2,150,246,158,239,1,72,128,199,123,119,232,115,246,
+  1,132,211,54,183,104,234,110,54,120,199,41,22,63,242,46,41,178,155,4,62,38,83,86,160,81,142,28,143,190,215,26,
+  93,135,251,240,185,113,233,185,185,197,93,123,75,122,62,211,210,94,249,234,208,39,45,165,237,47,97,25,191,69,51,228,
+  223,155,85,174,254,207,187,53,154,235,239,137,227,138,113,242,41,2,161,28,60,186,70,55,35,9,185,241,205,214,30,120,
+  150,88,112,207,178,186,183,107,55,201,208,55,168,64,230,137,222,87,104,63,201,210,135,223,161,200,7,3,42,23,4,128,
+  115,247,179,198,242,83,173,24,188,204,178,244,43,138,66,55,89,90,192,2,56,6,192,11,15,30,32,86,145,217,107,223,
+  168,29,236,4,32,57,29,181,160,114,66,22,95,17,235,149,0,172,186,89,57,51,80,235,23,24,1,249,9,123,114,28,
+  206,81,2,172,4,8,128,2,56,1,128,157,64,234,252,188,180,242,189,113,160,150,22,62,239,100,208,78,144,62,9,128,
+  99,247,3,0,169,112,81,160,24,147,210,21,243,121,37,11,149,45,72,80,88,189,2,159,223,91,213,164,32,214,203,104,
+  251,114,169,9,240,66,27,30,50,59,0,108,72,74,67,247,230,231,231,222,67,128,227,58,96,181,142,247,188,236,59,141,
+  207,195,107,128,203,119,30,86,90,192,224,236,91,245,252,126,161,114,103,84,193,21,74,79,46,151,178,121,139,197,235,158,
+  111,233,146,227,44,93,120,176,64,167,231,174,220,191,53,95,0,92,176,147,229,128,239,78,49,19,18,84,192,75,253,53,
+  0,172,192,6,0,29,140,37,0,211,233,98,68,189,223,156,182,179,2,249,113,150,60,246,41,61,235,73,22,101,203,45,
+  206,228,147,228,186,145,152,246,161,19,45,238,217,94,126,184,133,21,180,251,245,62,85,249,161,242,198,62,134,31,93,32,
+  19,97,48,251,3,101,75,185,181,23,238,91,185,248,63,247,214,76,55,220,211,76,153,219,31,71,129,5,229,32,209,55,
+  84,216,76,99,113,169,0,120,142,242,64,21,116,159,110,118,195,174,150,246,188,220,157,132,196,191,16,0,242,222,203,45,
+  157,247,52,129,111,47,107,45,57,208,162,69,135,8,128,39,91,49,164,40,38,231,74,243,57,138,100,228,65,225,97,99,
+  21,24,221,41,66,211,3,224,129,189,112,178,10,128,228,58,94,251,137,236,236,172,134,71,154,225,160,0,16,54,70,138,
+  41,7,114,167,196,129,56,54,224,10,189,81,198,243,189,210,198,255,15,32,42,141,107,172,128,52,6,184,240,186,147,53,
+  55,5,41,0,44,65,24,156,152,123,2,40,220,79,5,64,218,230,0,87,202,130,161,65,110,2,68,153,51,31,140,119,
+  171,172,236,185,146,249,218,235,0,23,102,71,194,171,140,92,102,2,44,164,97,121,158,150,130,23,149,38,101,206,22,238,
+  135,114,85,32,240,235,9,215,4,11,242,94,40,251,240,25,199,194,244,140,188,118,118,129,64,119,171,165,233,13,150,102,
+  223,80,16,189,90,254,240,1,203,250,94,109,209,218,167,91,115,241,17,86,44,63,216,90,139,247,183,140,128,75,37,220,
+  2,0,184,107,57,123,194,60,229,120,119,110,53,6,192,49,11,0,156,177,153,101,119,8,116,119,108,110,217,172,45,173,
+  62,99,55,73,206,67,172,118,207,27,172,168,51,65,177,210,10,103,122,192,167,103,156,124,214,162,174,179,148,6,237,34,
+  198,235,232,245,210,179,163,181,1,223,192,11,173,61,252,78,165,77,52,59,80,142,211,45,201,23,92,95,185,247,63,255,
+  214,76,251,4,192,39,148,88,147,200,51,81,175,0,200,170,163,62,193,47,243,138,2,192,131,20,109,182,183,164,107,103,
+  75,186,207,208,77,42,63,193,241,149,127,21,125,159,177,230,29,251,235,33,236,99,197,226,125,173,177,232,96,107,174,61,
+  211,138,209,15,249,220,49,49,147,234,50,53,69,120,224,30,177,121,224,149,35,120,148,6,128,84,34,0,62,216,24,71,
+  224,248,228,127,48,6,224,67,166,193,18,161,155,21,236,128,44,163,230,147,182,63,28,148,99,81,185,83,2,39,0,109,
+  28,140,37,96,74,0,133,207,74,38,27,103,177,78,9,26,156,148,215,193,2,16,199,129,92,130,176,122,237,247,70,192,
+  1,52,143,89,206,140,1,2,146,175,126,132,148,166,170,222,151,79,195,42,54,247,251,33,207,163,91,29,247,20,242,59,
+  114,90,2,19,140,71,185,133,178,19,163,141,5,154,10,76,99,160,12,101,203,117,135,255,233,14,24,130,73,135,249,103,
+  98,105,15,16,51,5,186,63,232,154,174,215,245,137,149,25,75,87,255,148,84,207,235,108,116,205,115,108,100,217,105,214,
+  100,101,220,69,251,85,160,83,192,133,253,148,114,160,124,60,5,145,4,117,0,58,232,144,160,149,204,244,124,16,240,49,
+  21,253,86,14,192,230,220,29,173,119,250,161,54,122,215,107,44,27,96,154,10,42,153,184,119,2,170,82,15,5,171,162,
+  241,126,171,245,156,106,205,46,249,22,249,158,100,103,209,199,252,47,146,161,204,128,70,215,201,17,249,232,88,175,23,214,
+  25,92,172,91,91,182,119,229,222,255,252,91,51,221,120,79,156,116,89,34,0,122,195,60,12,216,252,182,110,76,146,131,
+  54,193,1,58,105,51,189,253,54,138,66,146,9,61,231,170,112,84,88,46,251,22,89,241,196,167,45,185,243,64,75,102,
+  243,48,246,178,198,226,253,44,126,128,201,124,175,242,42,234,150,79,62,4,48,0,27,209,187,4,73,238,139,184,240,26,
+  249,137,84,195,74,0,182,124,141,7,36,27,93,177,24,33,31,216,15,103,133,253,112,214,208,246,87,13,69,106,211,222,
+  21,228,45,86,74,197,77,129,23,0,54,14,188,114,63,14,194,18,124,1,160,88,201,108,229,251,157,223,239,60,14,231,
+  211,239,117,143,229,72,140,192,228,143,170,76,89,32,132,102,7,154,28,20,161,125,33,154,138,253,198,130,9,81,159,182,
+  60,242,94,114,60,238,135,99,144,23,119,86,174,8,48,110,148,29,108,134,154,168,206,31,164,239,38,223,171,254,247,235,
+  15,101,0,120,169,164,18,67,235,25,38,217,116,229,76,191,243,138,21,159,1,61,185,210,138,145,15,89,182,225,18,139,
+  238,121,158,197,203,78,182,120,209,81,214,90,42,230,91,113,176,101,11,5,182,133,122,214,14,184,221,75,16,122,45,248,
+  158,150,45,222,65,210,84,74,9,224,33,61,231,8,140,52,190,207,4,132,155,41,61,217,198,106,243,118,183,129,5,39,
+  90,227,254,183,42,72,127,67,57,229,45,150,231,244,218,97,238,87,158,167,202,65,193,182,24,190,84,204,119,172,114,60,
+  192,182,109,153,243,209,243,165,123,175,114,204,159,82,163,246,160,210,161,198,39,172,85,11,93,206,144,234,107,126,94,185,
+  246,191,198,86,79,71,197,128,189,122,64,52,71,204,45,155,35,26,138,128,181,207,234,6,149,3,246,147,3,170,208,187,
+  21,185,4,192,98,64,122,219,171,254,89,16,69,242,114,253,71,44,155,143,4,61,208,98,73,144,104,249,225,146,43,111,
+  18,112,190,161,168,63,69,15,26,71,170,34,181,59,4,43,240,16,153,113,4,152,17,0,226,112,48,6,236,119,143,229,
+  25,149,47,176,159,174,133,1,149,99,108,65,117,124,41,61,203,154,79,201,20,111,120,199,73,137,230,1,120,128,37,72,
+  67,28,111,156,189,2,104,202,125,96,201,0,46,28,180,243,119,124,175,236,207,233,0,243,61,239,5,182,44,1,25,142,
+  85,50,14,14,95,213,228,122,181,61,193,132,209,254,183,148,160,243,188,15,38,167,93,143,96,50,77,247,66,237,166,88,
+  200,43,145,96,114,164,116,5,32,151,135,157,210,157,224,69,13,103,248,92,231,244,115,135,50,238,0,158,151,73,248,156,
+  61,255,19,20,86,148,53,200,10,104,45,95,34,252,155,2,222,85,214,26,249,168,165,79,188,218,154,119,61,215,154,74,
+  35,50,165,19,109,229,121,88,107,193,126,2,222,190,98,192,189,44,95,188,143,229,243,37,59,245,186,4,162,108,222,14,
+  218,11,40,115,37,47,157,5,183,182,68,0,204,103,202,88,174,122,230,1,54,188,92,44,250,224,197,214,106,202,191,242,
+  25,202,49,145,216,200,77,152,79,1,55,191,205,210,232,90,139,123,207,151,175,29,226,65,63,84,184,20,221,219,41,7,
+  212,121,122,143,149,127,41,192,15,203,55,89,35,158,14,36,44,97,87,48,128,252,161,123,234,233,250,227,42,215,254,215,
+  216,70,226,250,61,205,100,131,110,96,173,156,97,134,0,168,28,171,254,245,114,212,252,224,171,149,228,158,234,149,47,84,
+  249,54,187,197,116,163,204,160,70,126,178,76,145,243,86,139,239,125,131,18,109,1,84,81,48,94,176,187,197,15,43,50,
+  73,186,100,201,207,85,32,171,44,45,136,182,114,210,176,122,171,156,139,156,165,124,77,174,132,92,11,0,36,95,226,129,
+  4,246,11,157,176,101,222,219,255,79,202,43,233,235,56,167,2,32,21,47,15,202,153,170,154,64,119,180,18,32,37,176,
+  66,254,23,70,42,0,24,190,243,111,25,223,9,236,198,239,2,131,134,227,149,0,12,159,151,175,59,143,137,147,195,90,
+  4,146,123,173,200,194,120,62,58,19,80,147,72,101,11,247,3,0,165,52,60,152,72,250,249,26,138,48,31,205,9,161,
+  114,5,137,169,32,229,13,224,24,247,7,200,244,218,63,11,101,24,190,203,103,92,67,231,119,244,191,171,130,65,93,239,
+  253,202,237,96,153,169,146,197,191,82,126,247,93,111,87,99,217,186,214,240,7,44,125,236,181,54,186,246,108,107,44,59,
+  197,178,229,199,137,241,4,186,165,7,86,12,135,204,20,203,5,0,186,236,44,89,111,12,128,158,3,10,132,115,118,180,
+  226,142,173,188,221,47,85,46,216,152,183,151,141,44,57,195,146,199,63,96,69,237,23,242,139,25,242,139,59,117,207,176,
+  29,207,89,140,71,207,158,244,58,107,138,209,70,122,79,18,0,119,87,142,87,177,30,115,190,116,239,96,121,143,174,101,
+  144,142,214,23,202,228,131,245,207,72,118,254,72,126,5,248,150,91,154,220,243,237,127,138,14,215,255,183,27,18,52,203,
+  31,85,161,44,86,52,164,115,182,28,100,228,75,222,47,180,24,120,169,232,158,222,48,219,91,222,69,4,58,185,148,80,
+  46,149,100,163,63,182,218,138,231,89,174,124,32,95,180,183,141,46,58,212,242,254,183,235,161,42,162,18,97,29,84,229,
+  66,46,155,58,12,6,251,1,62,242,191,80,89,1,248,66,117,61,249,200,207,5,56,166,51,199,97,127,163,247,169,164,
+  8,185,159,206,239,57,146,164,107,5,190,113,208,5,227,255,146,13,75,160,0,16,156,19,167,12,123,229,140,190,28,87,
+  0,209,184,149,0,12,22,0,215,105,1,176,225,55,28,159,251,129,249,200,99,171,222,60,94,153,36,217,238,12,8,147,
+  43,176,120,195,58,109,123,4,18,242,88,73,66,239,54,214,89,70,24,210,178,2,147,31,159,125,0,91,245,154,207,101,
+  190,62,95,1,83,115,173,124,214,163,247,148,90,228,11,229,248,127,17,0,127,101,89,250,61,217,151,75,224,141,188,207,
+  146,71,46,178,228,238,179,45,94,121,170,212,203,201,86,200,90,203,143,177,246,50,49,208,210,3,28,116,14,54,229,126,
+  190,95,80,190,151,9,132,116,198,47,129,184,151,21,179,168,253,220,218,103,58,27,190,115,95,27,94,120,136,213,214,156,
+  37,70,125,175,130,185,84,140,183,97,178,32,208,50,75,114,249,26,149,82,153,82,148,198,103,229,103,47,183,102,207,145,
+  74,111,246,16,248,228,107,125,155,149,53,156,93,59,40,237,65,114,30,43,201,249,124,243,78,214,172,91,217,100,57,62,
+  29,211,125,129,89,175,215,95,255,47,9,190,90,180,241,57,141,164,43,102,208,36,67,61,232,19,234,125,232,184,201,193,
+  55,89,107,227,179,21,125,36,47,187,20,213,122,246,178,100,224,98,57,143,64,128,243,11,36,105,207,39,108,104,254,145,
+  74,202,247,181,166,162,96,116,175,10,41,186,90,5,75,129,11,36,94,21,143,179,224,168,79,2,224,38,224,11,14,11,
+  248,112,86,170,235,97,63,228,154,2,130,215,18,254,70,145,155,92,137,220,143,38,10,106,7,105,178,64,178,149,53,126,
+  1,36,227,140,23,156,84,230,146,23,71,229,252,176,12,172,201,117,136,177,252,189,192,34,127,11,140,225,88,37,144,203,
+  227,7,0,86,159,85,96,46,239,137,90,92,192,135,81,153,68,183,51,218,255,96,241,95,42,208,209,212,32,73,10,3,
+  120,30,75,133,203,6,203,138,142,124,207,165,121,184,182,234,250,252,26,185,14,64,23,238,57,200,95,26,221,9,68,24,
+  44,76,159,83,201,178,100,146,2,24,11,163,40,223,162,57,33,253,130,21,131,239,181,248,193,243,108,244,190,103,89,178,
+  234,68,203,215,28,101,197,74,5,90,1,175,57,231,72,1,79,57,223,178,35,172,181,68,160,83,78,15,248,178,69,7,
+  88,177,228,160,14,48,86,204,72,30,56,79,236,55,127,23,31,39,58,180,240,72,171,173,147,132,236,254,188,64,78,111,
+  30,210,21,130,204,106,153,164,175,252,204,217,191,249,89,75,251,95,102,205,174,99,36,55,119,243,74,150,178,130,165,108,
+  94,72,96,192,30,201,95,95,130,250,213,2,223,7,68,12,95,112,214,107,167,116,66,159,169,123,95,109,81,246,216,207,
+  105,207,174,92,250,95,107,107,38,143,159,207,68,190,121,33,39,160,159,29,67,147,70,175,209,141,50,97,211,121,214,222,
+  120,180,128,183,167,162,208,142,214,232,18,251,177,64,75,171,156,49,173,21,223,96,245,187,46,16,248,246,210,195,217,219,
+  154,75,14,183,124,227,187,244,157,31,249,67,47,243,25,228,231,223,154,174,158,247,113,84,140,234,122,36,27,141,213,228,
+  74,228,126,176,95,144,107,84,86,208,73,249,38,73,186,80,75,72,238,199,241,97,13,128,132,51,2,136,50,39,43,29,
+  18,32,1,58,192,6,179,84,230,192,15,149,62,24,142,142,227,99,157,12,84,58,248,184,149,224,11,231,217,148,25,171,
+  239,240,59,142,137,156,244,74,42,2,69,39,163,227,144,24,157,169,137,222,84,62,192,126,228,139,228,141,157,128,11,82,
+  148,125,21,56,252,60,148,101,231,53,85,229,234,193,78,138,67,96,166,50,45,87,122,144,49,100,203,43,125,152,3,232,
+  179,150,15,188,195,234,143,158,111,209,186,103,43,207,59,205,138,181,199,88,107,165,128,182,226,48,49,222,225,110,173,21,
+  39,8,124,71,89,123,201,161,37,11,46,217,223,210,69,10,194,139,37,1,23,146,7,138,1,157,9,197,122,11,247,82,
+  218,113,160,143,130,169,45,61,205,106,247,188,194,242,161,207,233,156,212,146,211,68,180,76,65,5,181,84,117,39,76,127,
+  100,185,210,147,188,239,21,150,118,31,99,113,215,30,218,111,87,201,205,237,181,223,89,41,143,142,189,145,177,165,167,148,
+  62,40,121,220,30,188,74,215,207,212,27,215,91,158,79,81,238,72,27,229,93,150,68,143,166,205,188,235,130,202,157,255,
+  245,54,0,24,167,114,22,229,33,94,249,2,251,213,104,126,120,147,164,228,233,42,168,253,84,40,187,72,126,238,101,181,
+  161,87,232,123,68,109,34,246,124,139,70,175,182,250,162,163,45,185,99,55,61,132,61,44,186,251,44,29,227,243,122,232,
+  55,150,57,141,145,207,84,172,50,230,204,129,97,66,35,53,214,217,240,46,118,163,86,208,107,59,197,122,99,0,164,242,
+  5,246,131,49,20,77,93,122,194,156,156,163,148,159,110,58,79,161,156,137,41,244,0,102,146,115,158,0,114,206,163,223,
+  180,112,118,140,255,113,122,246,124,30,2,2,85,254,200,99,192,160,235,246,107,175,2,72,135,227,7,240,141,1,209,87,
+  200,5,36,58,134,51,31,1,37,0,144,222,60,138,250,33,168,84,149,47,148,99,9,64,114,96,238,133,32,192,181,135,
+  64,21,246,92,3,199,39,160,116,6,134,242,156,45,63,39,195,203,238,144,99,254,89,207,65,231,73,190,161,188,232,75,
+  214,170,127,212,90,3,239,180,232,193,87,9,32,207,17,232,142,151,137,241,86,203,214,136,237,196,122,88,177,234,72,107,
+  47,21,232,168,120,193,170,28,176,189,244,105,250,255,32,107,47,174,216,15,224,73,126,198,11,247,177,161,69,199,216,224,
+  210,51,172,241,192,37,202,207,190,227,117,2,37,219,81,27,73,0,98,112,49,157,59,190,103,69,253,61,242,169,103,137,
+  241,14,18,232,36,45,123,1,221,86,150,116,111,107,73,159,24,20,165,213,115,156,164,230,115,197,118,231,75,30,191,165,
+  146,155,223,20,49,208,19,138,154,239,185,214,76,239,182,40,125,208,154,201,250,235,219,245,222,61,43,87,254,215,219,154,
+  89,255,101,205,244,177,41,222,201,53,133,253,228,232,76,227,54,242,126,69,156,87,42,2,29,103,81,207,78,150,177,4,
+  84,175,162,163,180,58,9,51,171,220,120,71,236,117,151,8,120,2,232,29,219,91,172,8,153,172,191,84,121,198,117,94,
+  173,92,58,184,28,138,166,6,7,67,229,196,140,18,112,39,5,24,143,233,88,124,15,249,185,86,44,188,80,12,71,91,
+  217,31,149,171,0,60,44,244,122,9,195,110,232,22,37,199,118,0,226,176,37,195,142,51,1,199,70,126,5,208,225,216,
+  58,190,159,131,246,56,6,191,210,237,174,124,93,30,7,38,5,132,124,55,252,142,189,44,56,191,7,146,78,230,41,25,
+  176,4,98,166,107,18,43,250,189,233,94,5,242,22,179,146,143,49,160,24,27,176,1,192,36,0,144,28,240,54,125,70,
+  101,22,247,195,185,123,44,111,113,63,35,42,23,206,133,156,5,112,193,2,240,170,235,240,247,56,223,67,42,175,121,150,
+  102,127,50,86,31,162,255,109,59,86,142,71,69,88,223,91,45,126,228,66,107,48,7,231,218,147,44,19,248,90,171,100,
+  43,143,149,145,231,141,3,176,181,252,72,129,242,8,1,17,214,19,203,33,63,149,3,182,23,11,128,11,75,6,76,244,
+  156,51,253,95,95,120,168,53,86,159,99,209,163,31,20,227,125,87,254,83,205,213,162,224,236,29,8,104,207,164,210,41,
+  249,133,101,67,239,183,232,145,23,90,173,123,127,249,211,246,74,91,182,16,216,104,211,219,74,50,85,32,20,11,182,250,
+  228,95,222,172,240,74,49,222,187,245,250,51,214,170,125,91,62,73,16,38,248,78,181,56,91,108,73,122,159,0,184,222,
+  26,201,19,223,174,220,248,95,115,75,211,141,39,55,226,13,173,150,59,162,146,227,84,146,33,250,182,101,209,103,44,170,
+  189,78,17,232,92,107,119,233,65,117,75,139,247,238,96,209,240,203,74,7,162,129,84,209,45,27,250,145,141,44,84,212,
+  156,191,171,177,158,96,243,174,211,117,12,229,22,0,134,252,80,14,91,78,63,136,147,224,188,176,158,108,12,124,56,120,
+  85,85,239,215,64,158,68,79,17,177,159,87,84,208,229,12,230,35,15,100,156,156,28,152,218,50,28,90,108,153,230,2,
+  76,144,104,28,215,103,94,230,53,242,18,0,97,84,234,144,87,194,68,33,31,11,204,68,211,0,198,107,106,31,1,34,
+  64,13,236,8,187,234,250,90,129,9,1,34,247,195,121,198,65,56,6,64,175,100,2,20,200,89,157,219,239,137,156,7,
+  181,64,7,108,170,252,85,198,62,234,65,198,107,103,64,0,72,77,46,172,11,248,152,0,151,145,8,128,12,0,18,84,
+  8,96,156,159,251,43,207,231,1,71,255,183,90,15,43,160,204,82,110,167,114,103,5,218,88,57,210,200,135,148,10,188,
+  94,140,247,2,139,239,57,91,108,119,170,181,215,30,103,173,181,39,203,78,17,240,180,95,113,172,128,38,153,185,252,80,
+  7,158,51,224,106,49,224,50,177,220,50,192,135,237,95,50,33,163,93,4,188,120,241,97,146,153,167,216,200,154,243,173,
+  249,200,199,173,213,32,143,229,30,168,92,1,124,74,11,10,134,158,233,121,37,215,90,49,252,70,139,123,78,19,219,9,
+  200,93,172,104,187,109,153,227,245,110,46,101,181,131,252,106,31,165,56,58,239,198,115,172,232,191,72,170,139,154,205,143,
+  139,4,190,236,82,179,108,235,93,36,224,173,20,232,30,146,109,144,245,60,92,111,246,253,84,57,223,83,42,87,254,215,
+  220,226,164,119,126,150,208,217,86,236,151,223,236,236,215,106,126,81,250,252,221,122,128,2,223,70,61,176,245,7,72,122,
+  238,98,113,255,81,150,167,215,170,48,200,191,150,121,199,224,198,186,119,91,227,206,125,45,155,189,157,229,202,21,242,238,
+  75,20,133,191,33,6,84,84,247,104,142,131,226,60,65,130,106,63,230,68,29,0,164,17,221,65,2,75,192,126,114,76,
+  103,190,0,64,129,158,7,225,185,18,206,74,205,39,64,145,147,143,229,72,28,19,214,3,124,98,51,207,191,0,23,213,
+  255,24,114,8,7,193,96,36,64,193,30,35,63,129,169,48,174,131,70,253,0,66,93,31,93,232,60,199,12,185,33,32,
+  172,128,161,123,12,242,115,44,255,44,250,148,123,193,182,0,157,99,19,176,168,84,82,185,248,189,17,209,201,1,169,209,
+  173,88,195,193,15,219,118,220,143,27,101,23,152,142,123,172,152,47,176,189,238,23,245,146,208,217,129,33,65,205,79,89,
+  242,216,165,214,120,236,21,214,188,231,89,150,174,125,122,9,184,85,0,79,182,18,246,211,115,93,137,201,241,189,210,229,
+  40,153,222,135,1,87,232,255,21,52,184,43,31,172,36,40,57,97,83,108,55,178,228,36,27,189,235,66,107,14,126,198,
+  178,6,207,132,231,17,202,17,137,77,240,20,83,201,135,18,129,41,234,61,77,82,147,41,46,89,52,165,108,199,243,142,
+  28,221,187,90,187,71,128,220,40,240,111,124,166,24,239,2,1,239,157,74,123,88,209,86,172,221,20,235,37,40,30,106,
+  135,1,223,58,129,238,49,89,183,36,103,223,198,102,115,96,191,202,133,255,117,183,70,227,209,19,155,201,35,73,171,88,
+  173,232,201,108,197,55,8,128,74,210,137,62,35,23,171,96,78,242,188,15,246,203,186,89,67,240,82,21,46,114,137,190,
+  159,11,172,24,253,137,13,45,121,134,213,230,108,111,195,243,148,255,221,251,28,69,188,171,148,251,253,74,206,40,135,34,
+  247,147,147,38,57,142,83,57,207,152,17,229,159,144,227,32,249,112,84,156,158,166,7,218,201,112,210,144,247,253,168,116,
+  82,239,37,130,163,50,228,136,135,141,92,235,204,217,42,198,113,54,37,143,196,233,113,12,64,7,96,73,254,229,28,46,
+  137,216,35,99,97,82,162,54,249,23,21,58,128,4,112,242,27,88,11,163,86,248,65,89,217,157,172,100,68,64,2,24,
+  1,33,140,94,171,192,7,43,41,23,76,5,64,49,32,191,43,50,238,139,235,165,67,129,206,237,43,1,203,113,97,63,
+  88,144,74,37,15,44,186,70,239,114,214,89,249,18,172,98,220,49,6,44,243,192,212,165,174,202,177,181,78,129,145,138,
+  150,114,166,233,172,231,245,86,147,44,140,61,207,59,213,114,217,56,227,157,228,64,116,208,9,104,228,123,173,85,39,234,
+  181,192,183,66,159,3,64,106,61,177,229,250,124,249,177,214,20,80,71,150,63,215,70,238,127,173,165,125,159,210,117,43,
+  32,82,134,94,78,171,124,152,144,207,126,71,99,126,244,105,75,135,47,180,72,170,41,17,219,197,61,213,104,117,25,75,
+  135,101,221,219,89,2,240,122,149,227,245,63,91,18,243,165,2,223,27,228,111,151,203,239,174,86,158,74,5,139,0,172,
+  60,143,89,238,226,116,181,242,215,0,190,141,86,139,251,222,93,185,239,191,246,86,175,247,236,209,136,215,143,68,217,93,
+  2,211,92,1,240,79,42,188,175,171,0,62,163,2,145,246,30,124,137,10,76,146,67,58,157,232,149,244,156,33,112,209,
+  238,135,179,138,253,26,127,150,4,121,173,53,148,251,165,115,182,176,145,121,146,22,3,111,211,195,249,169,156,65,15,7,
+  103,173,28,165,197,248,191,77,28,170,95,78,10,56,215,203,97,97,177,192,20,114,126,1,163,149,8,112,14,190,208,237,
+  172,170,120,25,27,241,0,155,33,215,170,218,207,144,223,57,136,1,13,14,207,117,210,184,27,64,199,239,5,108,111,214,
+  8,35,12,144,54,51,100,124,30,190,35,96,186,115,149,149,60,89,138,36,94,46,54,131,77,57,39,215,11,240,1,125,
+  7,88,116,159,153,0,225,64,244,96,211,35,0,210,147,135,32,128,81,9,65,173,110,57,4,201,43,71,60,175,5,128,
+  4,22,0,72,87,61,1,220,193,221,89,94,24,202,1,230,171,9,120,163,222,206,215,242,105,35,30,83,206,71,199,121,
+  129,34,189,70,172,243,106,107,174,61,195,37,103,118,87,41,57,219,107,149,231,141,1,16,6,172,88,16,0,174,20,211,
+  173,5,140,33,255,163,217,65,207,93,140,23,45,57,214,106,2,222,232,61,111,179,100,232,59,82,53,4,138,5,186,199,
+  160,38,116,205,148,97,118,163,101,245,79,251,58,125,12,83,139,124,161,76,242,59,201,204,96,189,91,88,220,181,87,71,
+  142,119,190,210,155,183,11,116,31,50,95,40,136,94,44,222,217,98,178,202,109,137,206,193,130,59,247,88,51,122,124,160,
+  153,244,244,39,201,198,195,226,184,247,224,202,125,255,245,183,102,218,119,101,18,203,113,113,14,21,98,161,7,216,106,94,
+  45,25,240,1,107,245,95,44,61,254,108,37,238,172,27,184,165,197,221,251,74,142,10,92,114,90,154,41,90,249,28,129,
+  242,106,27,152,117,130,229,115,182,178,38,43,37,221,243,116,203,155,98,63,129,167,64,250,121,14,84,58,76,89,121,209,
+  225,76,206,86,48,9,231,199,177,201,191,0,159,88,10,7,77,126,169,194,167,202,252,135,250,159,118,63,106,10,37,75,
+  157,173,112,102,100,34,185,21,140,1,240,120,141,212,228,24,228,89,115,60,122,250,212,235,185,36,140,131,13,230,161,86,
+  21,0,208,118,196,94,150,42,127,241,255,197,74,99,166,255,83,190,63,69,12,38,101,224,125,77,3,67,2,110,152,58,
+  72,212,170,249,194,239,141,251,133,149,8,60,235,21,212,58,131,1,215,5,184,111,214,113,21,96,96,63,159,205,13,25,
+  55,85,231,96,188,27,199,212,241,198,100,46,64,164,187,30,181,155,72,77,36,47,140,139,252,228,60,48,35,35,196,111,
+  181,34,250,142,130,231,135,37,59,95,100,217,218,211,74,192,173,57,201,193,215,166,137,161,2,96,177,230,25,150,174,150,
+  36,149,4,5,124,110,202,249,242,181,135,89,182,124,111,1,239,48,107,44,149,108,92,245,98,165,23,239,176,98,144,142,
+  20,83,84,158,179,37,113,231,233,92,12,137,154,171,189,158,7,43,98,141,124,192,210,254,231,88,243,209,195,197,120,2,
+  24,242,82,62,227,93,199,186,118,178,172,107,31,5,239,3,37,53,79,176,214,0,140,247,50,237,165,164,152,173,154,25,
+  23,124,194,92,242,188,155,149,186,220,33,50,88,34,208,61,112,119,148,60,254,233,70,210,251,105,179,71,183,170,92,246,
+  191,207,86,79,71,94,219,136,158,104,101,25,43,38,205,209,195,251,189,216,239,123,42,140,207,88,225,195,142,94,40,137,
+  160,220,160,123,103,107,246,236,104,181,126,229,130,98,163,114,46,70,61,132,232,6,171,175,121,169,164,231,14,86,204,20,
+  248,230,30,104,249,224,59,44,97,198,99,152,164,141,3,149,236,71,228,110,165,149,252,12,140,225,57,26,172,37,7,118,
+  0,226,208,128,135,42,122,250,124,202,49,199,38,91,162,150,144,154,79,146,124,28,153,200,75,4,6,180,88,168,224,168,
+  36,158,131,141,94,50,250,13,189,234,233,213,15,131,114,28,111,210,80,254,229,123,26,194,171,253,88,59,35,249,38,123,
+  12,128,240,121,217,238,56,198,150,99,146,149,115,210,108,80,5,1,103,98,192,131,180,230,254,144,173,92,31,160,133,137,
+  105,128,135,1,9,2,228,128,129,1,201,1,9,46,200,100,169,128,49,121,11,0,75,75,11,253,239,0,172,128,231,185,
+  31,0,212,231,42,143,34,209,241,226,175,43,104,190,215,154,119,63,215,146,187,158,33,105,41,16,174,62,185,2,32,21,
+  47,2,160,44,91,113,170,64,39,6,92,85,246,112,41,86,29,238,114,52,95,115,156,152,243,52,27,189,247,197,22,63,
+  252,49,73,194,159,91,30,115,93,225,94,85,238,4,34,58,223,167,223,183,92,249,90,173,231,76,177,218,62,99,108,87,
+  174,207,183,157,108,15,43,54,236,42,31,58,80,50,83,215,192,202,91,131,47,47,251,108,214,223,47,251,180,124,237,107,
+  242,163,31,203,55,126,173,64,53,89,126,181,72,76,126,119,51,206,215,61,79,101,249,207,59,117,196,223,99,107,102,125,
+  203,25,120,155,251,64,218,219,202,8,196,0,198,145,203,188,160,90,189,138,86,221,123,75,191,239,96,181,238,163,45,109,
+  126,84,223,99,98,87,64,50,219,210,39,62,102,195,243,153,84,149,94,238,228,126,47,213,195,186,82,210,83,15,173,16,
+  59,121,173,39,0,132,17,66,238,82,70,243,178,226,165,106,243,115,240,33,61,121,184,56,168,64,3,40,188,215,11,227,
+  254,144,159,114,174,177,110,103,56,3,142,218,97,176,166,255,150,138,27,88,139,154,82,129,38,253,133,100,25,195,105,144,
+  102,0,26,11,64,227,117,231,30,227,156,128,62,140,76,215,158,53,234,249,142,51,21,192,37,15,229,90,144,170,72,87,
+  192,200,117,16,16,8,4,98,48,159,74,158,6,240,149,114,44,62,227,154,3,0,97,100,174,143,123,4,224,220,31,0,
+  212,241,56,142,75,106,202,134,64,69,16,171,202,204,129,136,220,12,236,215,148,220,133,13,187,197,76,119,138,165,117,156,
+  248,90,177,205,91,188,7,18,0,204,239,122,166,3,238,201,0,108,173,150,209,191,211,155,29,202,138,151,198,242,211,109,
+  116,213,69,150,173,255,164,181,106,220,171,2,153,51,247,50,177,29,202,2,149,116,171,202,243,106,75,134,95,39,191,120,
+  166,47,220,147,120,191,96,218,240,170,78,210,158,174,236,40,6,220,91,215,114,180,181,55,158,46,127,34,199,99,122,75,
+  38,72,250,184,88,239,90,159,234,196,151,168,206,40,207,153,22,165,43,173,153,221,247,227,40,187,255,217,149,139,254,247,
+  221,106,81,223,153,44,208,210,42,228,48,48,70,10,248,20,141,250,233,112,173,130,234,63,67,73,252,254,46,61,211,158,
+  125,45,30,190,72,15,228,6,151,6,56,9,235,178,13,47,63,219,134,102,236,102,141,185,59,88,125,30,3,116,63,165,
+  40,252,67,69,48,177,4,53,121,238,48,128,48,128,15,171,42,93,114,177,67,139,28,138,26,63,156,21,231,5,68,84,
+  188,240,80,0,67,5,128,77,6,220,226,240,228,102,84,210,4,57,39,135,6,120,14,92,164,36,44,87,49,154,47,211,
+  5,136,37,99,125,238,152,240,63,160,235,52,222,103,15,56,1,31,160,3,140,140,57,172,64,169,123,243,239,185,28,230,
+  28,84,187,211,127,243,182,114,148,7,229,232,204,72,222,8,91,224,188,37,99,20,190,84,27,215,92,177,179,51,96,168,
+  96,226,152,48,188,142,53,6,64,41,131,206,94,56,146,183,158,235,121,25,86,1,141,74,31,103,65,149,165,202,164,69,
+  175,146,88,224,120,236,85,98,192,179,202,90,207,85,167,84,205,14,10,166,107,79,114,57,234,6,248,150,31,43,214,59,
+  222,98,1,47,186,239,2,5,84,201,193,81,249,129,247,46,90,42,54,90,101,73,206,58,32,179,244,188,110,85,0,254,
+  166,229,82,70,209,134,103,88,188,158,30,43,219,10,100,91,155,207,68,237,115,177,108,103,57,211,67,244,237,45,22,102,
+  96,236,105,202,239,94,104,109,154,177,96,188,81,49,106,164,60,47,249,174,114,106,177,126,246,23,63,54,147,16,71,233,
+  93,214,76,30,248,237,191,100,255,205,255,155,77,55,184,69,94,140,174,108,38,221,205,166,47,214,169,200,140,115,11,124,
+  190,110,252,224,59,45,237,59,79,236,167,196,188,123,123,233,246,173,44,122,240,76,229,133,210,233,114,172,132,104,46,25,
+  22,63,120,153,69,243,246,179,116,214,86,54,52,115,79,139,215,73,158,42,119,108,41,178,199,217,114,43,198,100,230,147,
+  218,174,60,239,67,154,81,121,129,92,35,119,67,162,225,172,98,7,28,115,108,196,3,64,16,32,92,34,2,64,88,135,
+  92,174,114,118,7,158,222,115,54,169,128,231,0,10,86,57,183,31,3,64,10,96,149,228,100,206,202,242,184,191,214,107,
+  164,41,53,172,188,199,255,236,177,32,75,1,96,96,70,140,192,192,113,57,30,223,35,119,212,53,16,201,189,119,6,215,
+  69,165,15,108,23,42,127,8,22,252,207,107,93,191,51,41,206,94,93,163,3,176,147,1,85,54,206,122,228,149,52,71,
+  108,180,86,40,207,49,0,6,41,42,6,84,222,228,171,34,69,159,22,152,94,228,237,176,48,93,114,207,115,29,136,237,
+  123,4,184,251,78,212,123,84,188,232,245,154,227,173,88,113,146,213,86,157,227,107,44,20,195,223,214,53,40,152,185,180,
+  15,114,89,215,74,185,70,215,88,178,241,34,139,250,78,180,180,107,79,203,233,7,204,164,183,200,77,140,26,78,166,0,
+  236,62,64,57,158,36,109,191,88,151,245,248,70,223,36,240,189,195,210,6,109,121,215,232,56,223,181,148,201,156,83,164,
+  252,12,1,124,133,37,241,58,229,122,143,89,35,233,254,253,114,91,190,121,229,166,255,61,55,129,111,231,180,72,150,53,
+  211,33,221,252,122,1,101,173,34,243,237,74,122,229,72,172,146,91,127,175,21,253,23,171,0,207,180,236,177,125,172,80,
+  68,139,104,167,25,102,17,140,91,196,126,228,87,138,230,67,223,182,129,59,143,179,116,246,14,214,156,185,189,141,46,58,
+  216,210,218,219,116,156,175,72,122,138,161,198,106,240,198,243,191,241,72,46,96,58,248,48,228,39,114,141,202,20,22,12,
+  37,247,147,51,147,19,57,243,116,2,16,153,82,178,77,105,122,237,21,40,191,147,117,48,137,24,47,115,201,136,83,3,
+  54,100,168,156,157,28,208,27,240,37,79,179,91,229,4,156,107,170,88,3,201,26,100,171,192,156,137,69,211,234,123,14,
+  106,106,98,1,33,215,3,240,152,90,29,227,218,0,37,32,212,249,57,135,51,55,206,69,174,10,203,81,105,193,177,9,
+  26,1,140,236,5,52,174,219,25,151,99,86,64,38,191,28,3,32,149,83,128,175,148,158,62,35,153,151,33,121,52,229,
+  137,20,13,121,96,151,229,153,142,75,112,104,92,110,241,67,207,23,235,9,104,48,94,37,57,97,64,175,9,93,13,235,
+  29,165,156,239,88,171,221,117,166,37,98,189,86,10,243,46,210,179,91,44,191,128,165,145,200,122,6,202,209,242,193,11,
+  173,217,125,148,152,109,23,129,172,106,191,35,215,243,28,111,7,207,243,232,171,217,222,200,232,132,231,42,128,211,87,83,
+  140,55,34,169,57,202,154,236,159,19,240,190,170,235,83,90,162,231,149,75,214,102,10,226,73,188,198,162,248,17,139,146,
+  81,203,155,141,95,87,46,250,223,123,203,139,244,161,102,54,100,113,250,184,104,159,90,179,57,210,224,127,84,212,84,244,
+  171,51,218,129,138,151,151,88,187,239,48,47,224,66,218,62,237,57,67,206,170,60,138,90,79,42,72,210,223,89,109,205,
+  197,214,156,190,187,21,51,55,183,218,29,59,89,83,249,70,43,251,178,213,226,27,245,16,197,102,206,114,68,232,192,124,
+  33,127,209,222,129,71,126,131,131,81,249,2,0,201,45,112,76,64,69,94,4,152,2,219,0,36,36,95,168,68,9,6,
+  243,84,57,148,203,69,0,130,85,108,231,159,51,19,150,156,221,25,19,231,167,189,143,90,76,218,6,49,122,226,51,58,
+  189,170,57,245,200,191,64,0,166,19,0,215,35,64,8,248,45,7,214,207,244,126,37,101,29,124,0,7,227,220,24,215,
+  24,206,91,177,181,87,218,132,128,193,53,132,107,65,42,115,15,48,32,199,16,144,29,128,2,43,0,68,17,184,4,133,
+  249,202,129,182,172,181,80,150,33,65,140,215,212,40,19,224,80,24,2,32,193,36,166,253,239,99,202,255,158,37,0,150,
+  128,43,65,120,178,203,80,246,237,229,135,90,177,250,24,171,11,124,105,207,123,116,110,198,206,149,77,57,180,225,165,146,
+  177,173,230,103,44,233,125,190,64,199,180,35,213,168,4,129,207,103,156,118,16,242,255,46,2,222,65,10,214,199,203,158,
+  37,208,9,120,35,111,20,227,189,93,140,199,58,124,242,167,244,90,29,143,148,228,247,58,199,244,178,130,37,185,207,154,
+  241,6,107,54,123,102,214,106,221,187,215,106,181,221,69,12,255,252,51,149,253,71,183,118,59,127,113,51,173,39,205,180,
+  79,5,113,191,192,36,198,73,25,235,7,251,73,94,14,191,87,0,188,64,145,236,84,37,209,138,106,12,255,232,58,84,
+  185,222,229,114,12,164,201,10,129,118,154,146,234,43,108,100,254,137,22,205,216,213,226,185,91,91,125,133,162,233,208,101,
+  2,233,143,5,108,38,91,162,38,80,209,153,149,95,221,81,130,140,98,175,156,38,84,188,248,184,64,228,231,106,61,248,
+  80,243,41,167,28,99,155,192,52,176,76,0,33,76,8,232,96,72,190,7,131,240,93,190,3,240,228,208,94,157,47,246,
+  114,54,17,136,28,112,228,99,56,25,53,149,156,155,154,87,36,94,168,8,66,10,243,62,215,126,191,238,147,218,88,126,
+  131,220,158,166,232,77,96,128,105,145,164,4,7,12,208,117,74,82,254,135,201,184,70,152,19,57,90,153,3,176,98,69,
+  103,70,222,23,51,251,125,240,91,238,79,255,187,4,229,122,169,85,29,207,1,199,186,161,85,128,220,84,134,150,0,100,
+  80,173,175,181,222,252,184,37,247,157,43,153,137,220,60,81,32,164,237,79,207,107,165,0,184,82,44,181,242,72,139,150,
+  157,106,201,195,111,85,46,166,115,74,125,180,88,144,83,229,159,167,95,177,104,248,124,27,233,81,222,216,181,183,114,188,
+  237,75,198,99,173,117,103,61,154,20,118,183,118,47,140,167,28,79,82,179,61,242,34,49,221,107,148,235,233,120,228,121,
+  172,178,204,242,118,9,147,41,81,179,121,179,252,109,182,212,214,18,107,166,15,90,148,109,248,120,35,30,190,148,84,168,
+  114,205,255,254,155,110,246,169,173,86,254,195,44,79,149,232,246,168,48,238,81,129,207,20,59,220,160,104,119,157,10,238,
+  67,2,31,179,94,43,113,7,116,210,248,73,183,146,236,141,175,82,33,82,59,71,55,163,249,2,235,207,108,104,201,57,
+  86,159,182,155,53,230,108,103,131,98,193,228,1,69,190,198,181,150,36,98,82,164,164,59,244,144,242,168,202,73,66,212,
+  118,199,65,126,226,236,176,31,224,11,221,179,168,124,9,178,44,48,26,142,253,117,25,108,3,243,240,62,246,83,57,218,
+  79,4,138,159,104,95,74,212,86,2,48,248,45,78,14,232,96,145,208,70,7,168,0,28,121,167,0,87,244,42,240,192,
+  196,186,30,159,131,38,228,166,213,231,190,199,248,13,237,138,228,68,243,20,96,168,236,129,213,0,87,96,222,192,134,88,
+  0,96,8,20,124,143,220,48,24,108,136,132,134,253,248,95,140,231,0,228,222,96,64,164,50,82,80,185,87,155,235,30,
+  103,192,114,36,71,144,241,122,237,77,15,65,134,118,48,160,3,240,242,10,128,165,4,117,0,174,57,193,90,171,245,90,
+  242,179,181,250,56,27,94,38,118,235,251,166,174,133,188,91,108,43,233,221,18,115,38,2,84,212,181,151,130,172,2,176,
+  79,253,176,149,229,12,134,237,102,32,44,61,161,14,20,248,4,226,126,106,53,25,12,251,10,5,238,55,90,171,33,38,
+  101,198,188,232,10,157,159,126,155,148,205,159,4,236,25,11,210,108,225,236,40,186,103,118,51,91,253,140,187,239,190,123,
+  11,249,226,127,239,74,150,191,181,233,166,183,203,138,68,224,27,180,56,126,88,185,156,30,50,14,146,232,33,144,32,143,
+  188,89,5,122,78,89,241,194,34,156,138,124,181,46,61,172,198,213,98,39,106,239,230,235,97,77,82,110,241,33,27,153,
+  118,184,207,219,216,152,185,157,13,44,56,202,90,163,239,213,195,251,161,36,134,228,91,200,253,188,103,6,242,179,2,222,
+  152,241,25,0,68,122,210,91,133,154,79,242,74,218,197,200,185,126,167,7,23,28,27,0,18,69,1,33,76,8,83,4,
+  103,103,68,188,0,232,140,135,163,83,241,65,205,221,18,69,113,5,151,49,134,43,43,47,198,152,3,135,101,45,4,95,
+  143,79,230,93,184,42,25,231,12,173,239,72,162,151,223,229,55,0,146,110,103,202,201,188,121,97,161,128,8,8,145,143,
+  84,218,32,33,185,30,174,21,171,216,209,175,11,16,10,84,94,217,194,119,3,16,97,191,10,196,99,18,84,224,117,9,
+  170,99,59,3,110,42,65,157,1,253,154,176,113,0,142,175,173,223,165,242,144,180,213,53,196,209,135,45,186,79,0,91,
+  73,83,67,85,227,185,66,114,84,192,99,184,81,190,250,4,107,222,243,122,125,87,215,17,42,191,154,95,178,184,231,89,
+  150,117,239,44,245,19,242,60,36,231,150,22,247,237,33,9,122,136,24,143,202,149,179,228,39,231,150,193,122,20,185,201,
+  138,67,84,176,124,86,224,251,138,142,249,35,201,116,2,246,12,201,206,69,183,154,253,225,127,14,203,253,91,91,20,69,
+  251,23,69,218,21,167,131,150,198,235,36,17,113,34,6,178,126,207,242,228,74,69,49,201,199,129,11,164,231,37,81,186,
+  246,183,188,139,233,230,247,181,124,244,13,114,138,155,140,229,171,233,60,220,26,248,182,13,221,121,182,197,83,118,17,0,
+  37,61,231,236,111,209,134,243,5,226,107,75,41,91,172,43,29,196,101,103,41,153,178,170,226,192,27,144,253,51,28,26,
+  112,0,64,30,126,200,253,112,106,134,206,32,203,2,211,225,208,223,146,1,62,94,7,153,23,28,92,96,117,73,55,77,
+  199,169,24,207,123,164,80,251,170,243,177,230,158,59,44,78,204,249,203,107,40,59,3,0,186,39,179,51,142,76,251,26,
+  96,172,242,43,127,63,84,26,113,221,0,145,102,5,106,52,201,15,5,36,159,32,138,128,17,2,68,0,20,215,136,193,
+  136,129,21,117,205,99,249,171,222,27,147,160,33,7,212,253,116,74,208,170,38,185,240,123,9,247,3,232,184,78,140,114,
+  70,234,211,14,168,114,224,58,162,143,88,237,30,229,128,171,245,60,233,116,237,253,59,149,11,210,197,108,205,209,214,88,
+  254,116,203,54,136,173,60,39,91,44,137,56,197,138,145,75,196,114,7,10,116,52,39,0,62,230,92,161,93,111,47,5,
+  229,195,44,235,101,4,250,11,101,23,138,241,88,105,232,93,2,30,171,13,125,70,207,255,58,61,55,5,74,175,221,156,
+  170,28,111,54,13,233,237,70,252,240,91,43,23,252,159,189,21,69,178,49,206,234,74,124,233,240,204,138,182,114,246,84,
+  236,193,104,6,95,5,247,13,214,234,127,142,10,251,32,177,223,78,2,224,238,101,87,161,228,219,150,228,75,37,87,23,
+  74,82,252,202,70,214,188,206,106,83,15,180,120,218,54,214,184,99,59,171,45,80,158,80,255,136,128,252,99,29,87,14,
+  41,103,73,115,156,131,232,28,28,133,118,170,193,49,32,142,49,160,87,188,32,17,97,86,106,8,201,139,168,121,132,1,
+  201,235,112,106,192,22,216,37,180,223,33,241,126,165,104,127,147,206,137,44,166,210,4,103,165,239,164,164,111,104,55,147,
+  115,230,5,149,23,188,38,255,228,117,233,204,227,6,32,75,112,250,103,161,187,156,51,119,37,237,58,191,235,178,20,54,
+  68,58,175,212,241,23,233,26,168,65,230,186,67,110,24,152,16,171,130,197,152,9,108,14,66,192,167,189,223,75,0,32,
+  128,37,7,12,0,12,12,88,5,141,191,37,65,199,64,8,155,35,173,167,171,92,190,175,103,37,41,137,4,5,124,62,
+  170,65,74,134,241,126,43,142,182,124,237,225,150,172,57,211,242,129,107,244,125,186,213,161,132,254,96,73,223,57,98,59,
+  1,206,87,149,213,158,90,205,190,67,149,130,208,123,133,154,205,151,138,241,94,45,198,19,235,213,223,45,224,125,92,64,
+  187,78,57,255,183,116,78,42,158,110,178,44,158,33,117,181,90,182,248,160,40,122,112,255,202,253,38,182,52,174,183,155,
+  81,175,197,201,58,129,111,150,229,241,111,245,144,190,101,25,209,139,126,157,131,47,87,193,31,235,21,47,145,228,103,36,
+  32,182,106,44,162,34,73,67,15,149,98,190,37,27,62,101,67,51,143,181,124,202,54,190,152,198,208,172,61,149,39,92,
+  42,6,253,170,24,82,44,0,8,112,102,119,6,57,133,71,107,172,131,73,220,153,168,29,13,18,148,220,143,182,38,218,
+  204,200,139,148,35,49,208,210,219,0,113,208,74,162,185,225,180,146,114,94,185,194,117,233,119,92,155,231,119,200,222,18,
+  100,227,204,198,185,229,184,178,114,121,229,80,141,31,174,37,56,51,182,81,65,134,107,235,120,79,247,145,21,157,215,142,
+  1,110,12,176,234,156,173,251,74,16,210,118,198,181,59,8,97,110,0,133,116,134,21,177,170,18,169,19,132,206,124,124,
+  151,192,2,88,21,104,96,68,111,136,71,242,75,154,143,49,96,159,174,189,243,58,184,62,130,3,64,12,193,66,223,147,
+  4,79,82,157,43,84,194,172,134,249,170,142,213,180,251,249,254,72,171,47,127,150,229,253,146,245,174,26,20,192,36,139,
+  155,61,207,181,212,199,230,41,239,27,107,82,80,158,55,242,2,1,79,172,55,242,26,107,213,223,104,105,243,131,10,204,
+  159,149,255,124,77,82,243,167,2,221,159,165,170,102,89,18,45,183,102,244,176,213,155,235,127,105,246,185,127,237,113,121,
+  127,239,45,205,122,218,113,76,21,179,180,190,64,213,138,174,183,44,185,186,172,177,26,124,173,10,251,116,73,207,253,36,
+  65,118,180,102,215,1,150,12,41,218,17,157,189,22,112,149,181,154,127,177,161,69,207,177,198,212,221,172,152,186,149,87,
+  190,212,72,232,155,159,247,232,87,100,176,223,195,114,4,156,191,204,169,74,230,9,82,14,48,84,50,208,89,4,6,164,
+  235,25,12,8,0,233,217,66,14,135,156,164,182,17,137,70,142,68,190,68,227,182,246,254,153,152,210,187,115,233,62,188,
+  6,85,199,170,24,162,4,29,139,77,86,142,185,137,179,194,18,229,117,149,14,203,158,165,185,152,151,134,145,4,141,138,
+  97,248,62,123,12,48,118,130,244,111,152,7,18,216,144,33,56,72,82,88,156,54,67,102,109,3,132,157,108,136,1,198,
+  78,70,132,33,1,39,159,33,65,5,76,175,164,161,169,4,86,167,86,150,123,228,124,225,122,202,156,176,45,69,83,178,
+  53,35,34,120,13,0,103,89,145,252,196,178,232,10,171,173,121,177,114,61,229,124,171,148,163,51,158,143,57,93,170,177,
+  125,205,85,146,167,253,202,215,28,128,122,198,42,227,102,239,115,45,239,101,238,21,169,31,192,71,67,250,200,243,5,190,
+  87,136,245,46,177,34,122,151,181,18,129,47,253,188,236,123,186,191,63,138,1,149,231,37,14,188,34,201,123,150,234,26,
+  246,152,61,123,246,127,255,230,132,255,155,173,153,214,175,74,154,235,45,103,190,69,57,122,43,146,99,55,37,27,154,151,
+  171,96,149,227,13,188,64,26,95,140,39,233,201,100,56,205,238,51,84,216,202,11,105,51,163,93,44,155,102,141,7,222,
+  103,67,83,247,177,98,210,182,150,77,221,198,122,102,30,100,217,224,27,245,16,190,41,237,47,246,242,46,103,56,198,136,
+  36,40,78,50,88,177,78,249,186,4,30,145,28,176,208,12,129,227,234,55,99,0,164,118,17,67,138,74,30,123,117,253,
+  173,98,215,73,178,178,17,155,181,36,198,165,153,242,177,0,104,57,35,44,151,251,26,235,13,157,23,25,89,73,179,224,
+  180,157,210,210,45,200,55,246,128,143,61,192,229,187,0,180,19,128,213,241,28,4,156,175,2,64,248,223,115,67,216,124,
+  133,64,56,94,147,219,242,252,14,16,146,195,194,134,161,18,41,128,175,179,226,230,223,2,32,249,108,121,175,4,180,192,
+  228,126,125,92,243,88,64,225,26,145,160,51,28,128,237,232,179,214,188,247,188,18,128,43,149,86,172,174,38,85,242,241,
+  125,71,89,186,242,12,203,135,174,211,57,144,240,2,33,0,236,121,78,153,122,244,29,40,112,158,170,192,252,108,107,141,
+  138,253,228,35,69,243,61,58,166,252,37,145,108,21,107,167,201,20,5,240,69,22,197,15,90,146,244,89,148,142,190,177,
+  114,183,137,173,115,27,25,25,217,185,200,7,86,196,233,3,146,137,119,42,231,251,163,10,78,206,128,244,172,93,42,89,
+  113,158,216,239,36,229,126,123,138,253,196,108,93,135,89,33,233,137,19,197,2,44,83,131,199,67,95,176,129,121,39,90,
+  122,251,86,2,224,86,214,156,178,151,69,15,156,103,173,198,23,244,32,36,13,11,164,18,160,26,119,108,103,63,119,98,
+  216,79,175,157,245,48,164,27,38,167,242,142,202,1,128,116,205,194,20,193,145,189,129,237,252,61,242,20,36,217,18,253,
+  14,201,41,71,115,160,0,152,224,144,165,149,21,21,225,51,156,147,235,193,65,195,117,192,146,24,255,87,192,242,235,6,
+  156,229,181,111,242,187,240,153,191,23,64,248,36,243,251,225,222,96,194,101,86,228,244,249,4,132,84,206,0,180,82,142,
+  22,14,68,12,224,97,129,249,66,5,19,0,148,132,253,43,0,150,44,191,41,0,59,175,177,10,36,4,3,239,111,42,
+  0,198,159,179,232,190,243,5,192,99,60,231,107,173,56,178,98,192,18,132,217,42,177,91,47,179,25,84,205,53,2,96,
+  212,247,12,49,224,14,2,224,126,98,63,250,111,42,239,27,189,64,207,249,157,2,222,39,116,92,22,57,249,133,229,209,
+  237,150,70,76,46,188,65,96,87,192,43,106,31,171,220,109,98,123,242,214,72,71,238,75,162,71,45,77,23,139,173,244,
+  96,153,110,156,6,210,250,101,42,92,73,207,129,51,5,62,230,247,220,193,18,114,191,1,134,26,233,1,138,249,18,228,
+  106,122,189,13,41,95,104,76,217,69,224,219,198,98,229,127,195,243,142,178,98,228,114,105,127,57,23,125,72,13,7,9,
+  14,129,35,208,99,3,39,199,81,2,147,116,58,43,22,114,64,218,216,144,185,128,144,154,80,166,105,32,31,132,13,105,
+  82,128,241,0,41,192,35,207,171,216,199,157,238,175,1,88,2,159,207,171,107,241,235,1,108,129,205,0,103,245,222,147,
+  193,53,118,188,234,59,237,48,175,75,152,95,179,33,22,230,216,35,14,4,206,149,21,213,249,156,25,9,66,146,140,45,
+  166,230,87,192,96,168,206,88,133,18,237,149,33,215,195,190,93,237,3,248,2,0,3,3,2,12,100,182,202,200,115,206,
+  113,166,223,228,26,59,239,195,107,65,23,41,208,50,7,204,21,98,192,11,44,95,117,66,9,64,230,120,89,35,249,185,
+  140,65,183,135,91,186,226,233,150,61,241,89,5,216,233,222,25,3,0,22,131,231,122,187,175,251,195,128,216,112,128,198,
+  245,87,91,187,241,126,43,210,171,45,150,236,76,147,233,22,71,119,11,124,125,250,127,116,126,146,36,71,86,174,54,177,
+  253,173,173,25,63,209,136,99,69,82,164,103,44,73,196,172,88,205,143,89,123,248,109,222,221,172,213,195,56,191,221,140,
+  21,142,106,93,122,64,209,71,244,93,242,44,61,124,73,208,100,195,39,109,112,234,126,150,221,186,157,87,190,12,205,148,
+  68,125,224,69,202,5,174,177,156,206,180,84,201,187,28,194,129,177,192,48,56,187,28,116,172,230,179,116,154,241,255,5,
+  36,175,77,68,134,210,16,191,74,82,150,26,197,208,21,172,202,243,124,144,45,185,37,78,200,239,2,107,1,136,81,31,
+  117,94,58,35,211,14,178,231,243,242,179,241,235,41,207,61,230,180,149,249,52,248,29,199,42,239,163,35,144,120,255,74,
+  140,99,226,228,76,112,139,92,45,143,235,146,183,186,207,177,61,236,236,32,92,46,102,32,152,208,180,66,30,75,94,72,
+  133,11,204,7,232,104,215,252,166,236,107,178,78,0,210,84,161,252,215,89,127,211,28,144,153,4,202,166,156,0,58,174,
+  145,251,147,121,143,35,5,190,98,89,217,28,16,125,202,25,176,88,113,162,49,214,207,243,192,165,204,233,121,136,192,120,
+  148,37,203,78,177,116,125,57,172,204,149,133,174,177,209,251,226,178,241,189,251,96,249,198,179,229,35,47,44,1,24,127,
+  64,129,24,233,249,11,75,227,59,45,110,108,24,205,25,173,253,63,161,235,216,255,235,70,225,52,162,158,31,52,162,251,
+  219,44,154,239,15,53,66,122,126,78,210,66,18,147,182,28,86,184,237,98,126,207,29,45,234,222,217,82,122,52,80,235,
+  232,181,139,11,36,69,127,110,125,243,159,45,201,185,155,21,183,109,45,9,186,189,13,207,63,194,219,127,90,158,132,203,
+  73,220,225,112,134,224,16,84,104,140,186,115,194,18,129,41,74,39,149,227,56,35,86,255,251,111,171,46,105,206,132,119,
+  91,150,173,80,116,189,79,224,166,35,50,0,37,255,9,224,227,55,156,39,128,37,0,5,32,133,243,51,13,68,53,229,
+  124,0,171,3,15,32,241,153,190,163,247,217,151,75,52,135,99,4,43,191,55,102,126,205,213,185,199,206,207,103,56,126,
+  199,251,254,25,231,226,245,56,19,150,172,46,73,77,69,146,119,59,11,146,52,128,46,24,149,49,250,204,219,1,3,3,
+  174,82,89,48,76,11,0,118,230,157,88,8,122,186,30,7,36,101,32,101,209,90,233,253,46,219,241,167,172,121,223,5,
+  150,73,114,102,107,152,207,229,16,159,191,211,39,212,93,118,132,197,139,79,176,228,209,15,234,60,82,26,94,9,243,103,
+  107,14,93,104,41,163,216,123,244,93,150,247,26,166,217,225,53,242,155,15,232,58,174,179,60,254,141,0,56,223,26,205,
+  245,143,87,110,54,177,253,91,91,51,171,253,140,225,29,73,204,148,17,202,167,98,201,31,250,122,210,167,115,240,77,42,
+  224,231,121,27,15,21,47,73,247,54,138,126,135,91,220,188,82,17,148,113,95,43,245,64,38,91,237,158,75,109,116,202,
+  1,214,186,101,11,107,223,246,84,171,79,21,80,215,189,92,199,145,116,73,110,144,19,223,235,224,74,138,202,17,220,49,
+  75,128,100,69,96,134,206,188,5,195,161,199,63,43,157,149,252,9,32,34,49,121,29,64,135,17,241,171,105,24,252,251,
+  0,56,48,15,199,10,166,207,220,9,185,134,48,59,117,152,38,158,247,244,153,190,87,120,239,156,126,177,31,11,193,112,
+  252,234,56,129,73,28,180,124,191,195,252,59,33,112,240,123,38,248,37,176,116,130,144,99,112,126,206,195,255,220,23,205,
+  20,244,156,161,157,147,90,94,154,89,2,8,145,163,0,17,251,177,20,5,224,11,77,45,244,27,133,1,5,64,166,89,
+  4,88,99,231,169,204,193,23,174,141,115,243,26,6,92,169,32,86,2,48,126,248,2,49,157,36,232,114,229,245,171,170,
+  25,174,23,179,162,209,65,214,92,113,188,69,247,147,235,211,156,67,167,130,91,28,128,204,88,214,234,217,95,57,224,25,
+  10,180,146,160,181,139,203,154,242,248,90,1,240,6,1,112,153,0,216,59,1,192,255,221,166,40,181,158,54,191,52,87,
+  36,165,189,137,249,93,188,187,217,187,4,64,58,91,31,171,130,222,81,114,99,115,107,136,253,50,73,141,188,96,205,246,
+  117,122,136,43,36,73,191,100,93,51,78,180,244,230,109,173,61,233,41,86,76,222,210,70,103,31,232,147,169,230,202,49,
+  152,54,0,6,99,182,233,50,26,227,124,193,41,248,191,116,206,177,222,47,110,193,137,59,45,128,172,243,189,80,187,201,
+  103,225,117,231,231,56,29,123,192,82,157,215,143,13,16,217,3,18,62,27,22,19,43,47,2,8,204,149,146,47,247,28,
+  169,77,183,58,218,66,51,230,138,33,247,164,19,56,121,40,181,171,244,191,100,2,41,0,196,177,43,16,58,211,112,222,
+  202,28,104,157,185,110,117,93,188,159,113,29,124,79,239,249,148,240,128,16,73,31,218,10,1,33,121,33,146,148,102,9,
+  237,125,70,52,169,15,228,170,215,0,207,214,245,145,3,210,198,73,165,83,121,142,241,242,164,140,9,118,180,85,114,30,
+  202,125,88,207,111,181,165,176,105,122,165,69,15,136,209,150,29,103,173,149,213,84,242,75,197,108,75,152,213,250,48,203,
+  4,204,248,62,5,98,239,248,77,237,248,20,75,7,95,91,74,208,30,42,97,4,192,81,0,248,26,165,46,31,84,14,
+  120,157,37,201,175,45,142,87,89,218,232,153,0,224,191,183,209,209,53,137,238,223,80,164,98,191,68,210,39,86,82,222,
+  252,148,10,83,224,27,122,157,0,248,60,21,242,62,178,205,220,162,174,19,173,136,191,97,89,78,212,93,45,121,121,187,
+  13,45,127,153,213,166,238,107,237,155,159,234,0,108,76,217,202,70,86,156,34,16,127,94,236,199,242,98,146,181,21,51,
+  149,192,195,89,43,135,117,16,252,45,176,253,173,247,136,222,252,30,192,176,199,112,228,224,116,65,122,225,208,252,94,242,
+  49,193,241,106,98,33,242,190,210,9,75,64,224,248,250,174,179,233,253,10,62,202,135,242,219,45,201,254,44,86,248,131,
+  197,233,47,228,72,55,148,227,4,105,172,150,165,146,210,244,184,97,168,21,157,9,90,217,100,125,62,75,247,71,205,238,
+  250,177,115,142,177,140,75,212,72,231,29,146,179,151,237,136,127,251,190,184,94,174,7,32,195,98,212,248,2,66,152,144,
+  202,25,218,56,1,28,61,72,104,188,167,175,40,239,233,121,21,183,41,48,48,211,55,57,32,109,157,161,44,56,79,5,
+  108,204,203,140,123,103,31,0,120,111,5,192,207,41,199,19,160,22,31,233,19,43,249,100,186,62,149,188,0,184,112,63,
+  203,23,31,109,181,181,151,232,92,2,187,3,240,14,1,235,109,2,224,190,10,202,37,0,91,29,0,244,177,124,209,77,
+  82,84,43,173,145,76,48,224,191,187,213,155,143,255,140,238,64,228,17,190,166,31,163,144,145,17,204,237,57,116,158,164,
+  231,9,214,234,101,117,209,205,85,224,187,90,214,79,167,220,155,20,73,145,34,179,44,235,185,206,250,167,29,106,217,45,
+  91,91,251,214,167,88,107,50,242,115,23,171,223,247,18,61,216,107,244,128,229,44,140,120,64,102,82,17,225,141,192,56,
+  103,5,194,0,42,119,192,191,229,156,37,168,198,7,151,150,175,89,25,55,43,148,59,142,189,175,104,47,231,42,167,99,
+  199,241,145,147,24,175,155,114,254,208,126,167,115,8,44,69,33,246,242,233,207,233,4,252,7,129,235,122,7,88,154,125,
+  77,1,230,107,2,33,11,245,171,44,104,72,78,62,91,90,166,156,56,189,90,223,185,86,224,251,154,165,9,235,202,221,
+  160,247,254,40,32,82,11,203,200,14,1,200,59,100,11,112,190,230,3,210,150,185,62,43,199,87,32,24,207,115,203,123,
+  27,175,29,197,0,33,76,72,158,75,167,243,144,23,194,134,228,134,116,210,6,128,72,79,122,249,80,11,60,71,12,184,
+  92,191,163,22,180,108,3,28,63,94,191,202,170,44,155,49,160,115,29,57,123,49,189,216,181,200,190,104,201,227,23,90,
+  188,68,12,184,76,169,6,235,249,45,2,132,44,168,185,191,229,139,14,183,250,218,87,235,254,117,126,31,15,121,135,183,
+  245,197,93,244,5,221,71,0,84,176,117,9,250,6,5,240,15,40,232,93,39,95,250,173,21,209,93,150,214,7,39,0,
+  248,111,109,245,104,253,164,36,185,215,219,252,202,138,23,177,95,227,83,86,52,222,161,2,125,165,114,191,179,172,221,43,
+  57,210,189,173,101,189,140,116,63,94,5,252,141,210,49,90,11,173,21,221,104,67,75,94,110,35,147,118,179,252,166,173,
+  172,125,203,83,45,159,188,181,13,77,213,255,125,84,190,124,221,34,214,139,112,105,36,103,112,6,168,28,192,163,177,246,
+  21,232,188,202,190,114,154,196,23,202,28,255,31,27,239,121,130,137,217,216,227,228,30,209,43,54,149,149,78,31,214,243,
+  227,189,10,232,62,224,151,182,183,149,150,167,211,188,63,102,33,41,87,196,223,148,19,178,220,214,23,117,111,31,83,36,
+  255,160,181,250,223,101,69,223,155,148,23,189,90,185,143,28,243,254,151,88,253,209,23,75,166,189,66,142,250,10,5,157,
+  139,173,53,160,251,171,125,84,191,97,28,155,126,207,204,112,217,13,58,30,149,34,202,227,188,91,24,32,36,8,132,160,
+  19,140,255,171,241,142,85,187,157,223,151,7,34,238,15,16,138,153,125,244,7,76,72,175,25,154,90,170,158,63,46,59,
+  203,241,139,76,159,152,103,10,36,94,11,218,201,128,227,86,150,85,40,167,234,90,92,13,8,32,25,221,248,174,21,3,
+  94,108,205,165,39,8,116,7,57,251,181,22,29,88,173,104,187,175,165,11,15,177,225,85,10,198,44,135,166,235,161,79,
+  109,81,255,128,0,168,207,89,234,25,0,58,3,178,212,243,251,245,220,191,172,28,240,102,149,243,234,9,6,252,247,182,
+  70,244,200,162,56,166,111,162,30,38,137,190,231,126,151,11,124,111,22,251,61,95,185,159,216,175,103,111,159,177,170,41,
+  25,154,14,80,243,169,188,195,101,200,76,57,226,85,54,56,229,8,75,254,188,157,21,55,111,233,22,223,190,181,245,207,
+  82,254,80,251,136,128,173,7,145,43,122,87,78,225,125,37,221,1,130,225,112,65,126,97,155,50,93,201,12,212,144,146,
+  63,33,33,1,33,6,251,85,223,219,4,124,97,122,119,177,158,75,65,49,140,215,142,210,134,56,95,178,249,183,30,241,
+  25,3,7,203,49,38,145,85,156,114,1,46,125,236,213,202,115,158,107,205,213,207,176,100,229,41,202,135,36,181,151,31,
+  111,249,242,227,44,211,62,91,122,140,21,43,142,179,212,237,4,203,238,122,134,69,119,61,95,191,187,200,178,141,44,115,
+  252,49,57,168,36,119,250,29,177,161,128,200,116,15,228,115,222,65,154,252,52,4,158,234,90,189,98,134,123,120,178,108,
+  14,129,6,16,146,143,86,114,116,172,7,208,237,50,128,136,41,39,243,10,24,0,72,78,138,124,45,155,33,198,203,143,
+  115,179,167,60,164,16,40,95,174,129,85,152,218,247,233,217,223,32,0,51,43,218,235,45,93,122,116,185,122,17,107,249,
+  45,60,160,4,32,18,84,251,145,149,82,52,145,192,10,3,42,23,46,162,143,251,232,247,86,247,30,2,224,241,149,4,
+  189,196,90,13,49,160,0,88,68,191,147,162,88,107,141,102,223,4,0,255,173,45,138,239,95,148,102,12,5,33,10,126,
+  93,0,148,196,26,126,95,41,63,25,199,213,123,120,57,141,64,247,22,54,218,125,184,229,204,189,31,170,162,147,155,109,
+  100,245,197,54,116,203,254,150,253,121,27,43,110,218,194,138,219,182,177,198,212,109,108,116,225,81,138,136,159,208,3,248,
+  186,156,158,249,94,202,124,45,206,105,79,195,1,121,248,149,51,226,112,128,168,2,214,152,19,142,1,139,125,176,32,163,
+  194,247,112,44,246,1,216,28,143,207,0,30,181,138,171,220,65,115,229,169,9,29,182,211,239,235,30,191,234,211,39,228,
+  3,111,183,244,241,151,91,243,238,231,217,232,170,147,44,90,114,148,69,139,142,180,120,225,161,190,166,29,93,176,48,207,
+  131,150,136,13,150,177,198,65,48,218,199,36,187,151,29,99,205,229,39,88,125,205,179,44,126,224,37,14,228,118,252,105,
+  1,252,155,58,223,207,45,75,196,254,72,72,175,177,5,104,176,80,117,223,186,31,111,122,81,80,105,137,141,242,144,159,
+  234,126,198,230,66,13,76,56,6,66,106,72,153,38,3,16,210,243,103,138,203,65,20,73,57,166,145,10,161,160,30,40,
+  7,246,193,170,50,229,181,159,159,50,91,167,64,244,43,1,240,75,122,206,151,88,99,169,36,40,107,247,1,192,5,0,
+  80,76,40,6,204,22,31,104,195,43,152,169,140,254,190,116,136,95,42,128,125,202,154,140,134,233,219,165,12,212,195,47,
+  46,1,168,28,176,149,126,73,234,232,183,202,1,87,77,212,130,254,91,91,163,113,239,201,81,178,116,212,23,217,143,127,
+  160,232,198,80,163,143,8,128,114,162,97,69,187,141,39,74,118,238,233,67,78,152,70,46,234,123,174,10,246,255,111,239,
+  63,192,228,40,175,117,127,116,35,77,236,201,73,163,44,129,200,201,100,36,146,109,50,54,216,4,17,108,130,77,54,24,
+  219,216,216,198,96,99,108,112,32,39,147,51,2,9,33,36,148,115,150,38,41,199,209,72,163,25,73,163,201,185,115,168,
+  238,158,247,190,239,215,93,98,204,182,239,221,255,125,246,57,255,115,135,90,207,179,158,234,174,238,174,174,174,174,223,247,
+  174,245,69,254,1,166,196,45,67,184,237,37,52,46,253,6,2,179,243,17,155,153,134,184,241,84,248,23,102,193,187,241,
+  108,222,232,204,153,84,161,19,89,194,146,158,121,136,153,122,61,145,15,69,236,81,3,135,0,211,214,134,50,1,235,161,
+  155,200,60,215,254,175,186,62,167,42,119,85,38,72,249,116,243,234,253,10,53,107,121,158,101,188,41,153,43,169,87,73,
+  228,109,222,48,252,125,158,135,17,105,185,21,222,221,23,193,77,21,11,87,141,133,181,110,44,98,188,193,18,43,248,232,
+  134,227,141,87,153,168,9,236,91,175,218,192,209,198,77,88,166,213,126,180,248,164,230,196,84,71,229,141,244,205,39,194,
+  218,118,44,253,68,120,182,159,139,112,253,245,188,25,127,137,40,195,210,88,136,57,165,185,102,234,172,32,53,236,175,132,
+  234,216,157,252,173,230,183,107,189,134,36,132,135,126,191,92,224,10,68,117,66,96,152,169,102,0,51,85,161,254,135,181,
+  84,91,165,3,118,35,188,154,100,108,0,245,61,73,117,53,223,33,168,117,221,5,166,93,16,212,26,0,99,2,176,243,
+  14,42,61,21,144,33,104,164,34,177,86,191,237,90,74,172,123,221,133,252,93,255,224,119,169,32,168,66,56,240,20,130,
+  205,199,37,0,212,124,64,61,23,125,169,128,193,191,176,16,154,142,96,120,163,3,224,191,179,64,120,135,101,114,63,133,
+  148,90,80,211,244,247,212,242,189,183,17,64,173,108,116,188,105,116,183,52,194,89,83,14,116,51,204,210,108,93,42,133,
+  163,171,224,217,253,8,122,231,13,67,100,102,54,226,95,164,160,79,62,103,16,124,243,243,209,187,129,127,70,240,113,150,
+  134,111,242,70,89,198,63,90,165,184,254,112,133,135,118,41,156,188,41,204,13,167,215,236,27,209,6,82,175,233,177,253,
+  126,251,125,137,154,197,196,227,196,235,102,158,75,3,31,21,128,37,116,88,208,135,38,179,0,224,247,71,212,149,238,1,
+  68,246,93,139,192,182,243,16,88,119,44,2,90,135,176,124,8,243,28,222,104,246,218,229,42,249,43,9,88,213,40,211,
+  3,68,240,37,0,36,156,130,79,16,82,253,226,27,198,242,117,222,112,234,170,181,81,189,70,52,73,237,177,137,207,108,
+  56,10,193,141,167,192,189,241,155,8,183,252,152,215,128,133,80,228,121,230,193,239,50,108,83,13,34,33,52,48,217,191,
+  209,254,221,2,78,192,232,183,10,18,253,222,164,10,218,191,223,228,139,82,117,123,92,164,148,72,91,53,133,40,223,212,
+  53,78,14,177,226,241,76,101,212,161,232,64,199,151,2,234,26,38,175,171,121,223,126,94,171,169,38,135,141,49,140,246,
+  49,2,48,21,48,90,211,143,215,165,143,121,160,174,77,132,133,82,87,213,153,176,180,238,163,162,31,41,96,248,37,42,
+  160,134,164,229,18,64,254,118,45,69,231,189,131,240,241,30,10,107,9,232,79,9,160,211,14,248,47,45,16,170,123,62,
+  20,174,234,179,194,186,81,237,118,63,230,48,158,187,8,160,230,121,25,143,120,59,111,198,150,76,211,233,58,216,202,146,
+  209,207,240,51,174,112,135,202,18,152,139,142,117,87,193,247,69,33,98,115,92,132,111,48,250,102,14,70,124,94,42,66,
+  51,115,225,217,48,158,127,130,110,62,42,171,194,37,222,56,150,153,36,72,55,131,74,250,4,56,230,6,52,55,136,110,
+  196,126,32,18,166,68,227,184,214,176,227,126,115,35,233,6,178,111,218,132,155,202,22,3,163,58,107,215,32,100,173,98,
+  222,249,33,75,223,87,121,243,63,131,184,251,97,132,234,110,66,112,251,4,4,43,198,33,86,54,20,177,181,60,231,202,
+  210,196,154,228,101,132,208,148,242,201,176,139,55,94,164,98,120,178,253,75,208,17,182,13,201,213,94,169,12,6,70,66,
+  104,26,170,53,83,216,102,117,90,78,128,168,126,147,125,85,12,217,55,30,14,107,235,49,240,111,60,13,161,61,87,50,
+  212,85,72,246,52,11,131,87,25,142,79,225,121,110,38,28,130,48,9,69,18,152,47,97,75,2,104,187,249,253,54,148,
+  170,93,21,104,82,59,85,108,169,243,181,242,196,100,239,23,27,64,251,184,198,85,48,37,175,161,125,237,205,241,244,124,
+  63,98,209,105,9,181,110,187,29,126,134,225,90,36,53,94,193,235,83,201,235,98,66,81,93,159,81,232,173,58,157,133,
+  49,11,51,163,192,74,65,222,64,168,229,76,126,46,63,1,160,6,225,122,111,131,101,70,189,11,192,41,84,231,10,7,
+  192,175,26,208,92,236,15,239,217,17,141,174,33,124,186,248,132,68,185,159,143,185,95,207,173,116,38,211,102,105,49,222,
+  160,173,105,8,55,171,235,25,47,174,58,102,75,253,232,145,214,87,209,177,148,127,8,115,63,163,126,179,7,161,111,238,
+  32,19,138,134,169,136,158,202,211,120,204,135,169,174,175,192,210,164,71,166,143,166,155,97,40,111,180,67,0,217,143,5,
+  166,74,235,126,110,246,169,135,74,178,10,223,126,63,111,38,149,236,137,227,8,88,65,124,144,33,84,57,191,231,51,254,
+  225,175,153,155,61,238,253,45,34,7,39,194,205,240,208,183,113,36,66,188,129,172,213,195,9,92,49,183,132,78,240,241,
+  6,235,35,148,182,171,218,221,220,116,21,90,58,89,55,29,213,177,74,121,80,242,61,235,143,49,128,153,199,84,64,163,
+  134,12,73,99,155,184,101,72,26,93,127,50,157,32,154,117,210,143,224,227,163,16,217,120,18,130,91,207,69,180,157,106,
+  104,154,49,180,220,243,76,68,163,155,249,219,154,147,149,48,73,87,51,141,185,38,250,157,253,246,235,61,70,205,4,141,
+  92,33,166,60,25,94,30,170,100,249,103,87,216,31,137,106,102,108,61,22,128,253,65,228,245,52,207,15,82,153,103,242,
+  250,189,128,88,247,61,8,109,96,56,109,214,110,31,106,174,67,188,74,215,76,215,171,20,238,138,99,96,117,240,55,36,
+  199,4,198,169,234,193,182,115,97,181,8,64,245,7,253,38,175,187,66,208,159,178,176,17,128,31,243,183,150,193,23,104,
+  114,0,236,111,94,239,238,99,3,161,93,188,240,106,91,250,152,160,168,54,240,55,44,189,52,210,253,6,186,194,79,150,
+  228,45,197,166,225,61,194,60,208,210,194,24,12,161,76,215,179,232,50,184,119,220,141,206,57,170,124,201,76,168,95,178,
+  1,94,97,104,100,102,22,124,171,168,54,129,159,51,255,121,149,33,142,218,142,148,255,244,82,161,212,219,68,249,154,160,
+  82,40,105,195,40,224,180,181,161,82,41,173,27,73,55,137,253,158,132,135,44,213,148,170,107,24,75,239,216,70,170,202,
+  44,126,135,66,77,170,158,247,81,22,28,215,192,191,249,36,4,202,75,17,41,43,32,84,44,205,215,50,76,94,155,99,
+  30,199,202,139,9,24,157,48,38,74,120,42,94,57,67,45,59,20,173,228,77,87,201,155,207,132,167,124,204,208,212,228,
+  134,218,86,38,107,8,233,166,186,94,121,162,237,85,2,79,78,152,55,16,86,109,165,140,27,191,1,175,214,91,104,186,
+  22,113,22,74,106,63,140,90,31,83,169,55,32,214,191,9,66,112,29,250,157,186,6,130,145,215,197,116,26,183,175,137,
+  222,163,107,197,215,44,237,211,115,93,51,65,155,168,41,78,28,203,86,66,251,184,2,47,113,252,196,178,100,252,14,27,
+  64,141,163,84,219,103,247,253,137,74,24,83,248,40,58,208,245,225,239,23,140,85,195,208,91,121,52,243,231,223,241,124,
+  212,247,151,121,160,53,153,0,94,192,125,106,35,230,239,151,2,122,110,128,165,54,228,240,223,152,115,127,196,208,187,138,
+  0,30,112,0,236,111,222,240,246,99,131,145,45,44,193,212,235,69,235,2,168,242,69,77,15,44,165,53,67,177,122,182,
+  183,31,205,240,147,23,182,37,133,97,199,72,68,153,88,171,246,205,204,98,22,158,143,182,181,23,192,59,115,8,98,95,
+  164,83,1,83,19,42,56,151,33,232,204,20,68,103,102,194,183,168,4,86,211,205,6,10,203,154,130,168,26,169,209,194,
+  18,217,86,54,123,69,216,47,193,74,184,110,170,228,99,59,140,50,251,52,212,71,159,137,112,159,42,116,180,128,9,195,
+  103,134,116,81,141,153,139,60,138,168,251,14,120,182,143,135,143,64,133,214,230,34,186,54,139,208,209,215,100,38,182,107,
+  169,214,107,210,204,254,192,214,92,132,171,178,16,171,24,130,240,134,66,222,100,44,229,77,222,163,202,7,2,171,144,148,
+  199,49,80,86,106,191,66,50,41,98,2,62,229,137,135,106,11,215,73,57,233,82,75,163,138,201,94,36,6,76,170,32,
+  115,206,32,149,208,191,225,12,132,106,175,72,70,6,207,155,115,143,107,248,20,67,202,136,81,56,253,214,228,111,143,216,
+  215,130,224,152,10,43,194,98,96,210,86,174,107,163,207,200,5,150,70,185,11,192,68,211,134,58,39,36,86,69,18,136,
+  9,240,18,64,171,22,186,63,128,154,243,103,46,175,225,107,136,245,252,156,0,158,204,243,103,97,164,8,65,191,89,215,
+  69,17,1,175,167,175,252,8,194,198,251,192,140,181,212,60,65,83,17,232,184,132,209,16,223,211,206,208,188,251,252,47,
+  1,100,8,170,190,160,150,85,6,127,184,193,1,176,191,5,130,187,58,67,17,213,158,77,74,212,82,134,254,104,42,41,
+  204,212,224,154,197,74,249,159,218,119,52,133,120,107,58,47,250,241,136,248,213,241,122,45,111,24,94,120,239,199,104,92,
+  118,10,130,179,20,126,166,154,230,7,163,130,10,67,185,141,207,27,12,223,252,76,120,183,171,221,136,185,101,84,171,12,
+  77,227,103,55,241,230,144,114,217,42,167,155,194,86,194,254,106,216,223,85,114,235,102,211,212,17,65,42,159,170,236,107,
+  121,195,80,189,213,47,50,248,52,111,156,135,96,237,191,10,238,202,227,224,94,91,108,214,27,140,8,186,21,41,136,175,
+  74,67,124,117,6,93,16,74,5,249,155,214,240,188,181,149,171,148,47,35,128,101,249,136,86,242,185,81,62,222,120,82,
+  62,19,142,142,64,148,55,100,136,97,89,172,156,133,18,85,47,74,165,11,109,56,133,91,85,88,16,58,230,139,125,235,
+  120,189,84,67,170,182,179,100,174,24,223,168,144,85,106,120,156,81,71,109,131,27,24,146,238,186,136,215,144,97,90,152,
+  121,225,33,8,213,86,168,28,78,144,232,250,244,191,6,182,186,125,181,163,250,191,243,196,245,18,120,137,118,211,36,128,
+  218,207,99,155,142,239,230,184,252,15,160,229,169,231,49,4,125,3,177,222,7,9,224,137,132,142,5,141,185,46,140,30,
+  202,138,14,93,31,47,195,208,80,131,58,100,107,84,188,58,7,204,64,176,235,187,8,51,66,82,103,13,83,112,123,38,
+  178,48,191,31,177,200,159,25,149,124,136,112,120,21,1,116,20,240,144,1,43,83,2,145,173,221,161,200,92,94,244,247,
+  8,6,213,79,179,18,123,239,33,128,215,17,192,11,77,254,167,238,69,113,51,195,113,6,2,173,103,35,30,126,133,234,
+  165,252,175,18,193,134,231,224,158,203,27,210,168,31,21,146,121,160,1,208,246,153,131,205,107,238,53,199,32,230,101,105,
+  31,124,142,249,192,251,136,133,52,235,180,114,193,126,125,21,147,161,231,63,169,225,161,18,94,175,235,38,209,123,53,40,
+  183,158,159,103,8,204,28,74,107,195,169,166,45,218,121,7,252,155,198,195,90,81,2,255,242,2,4,9,87,108,53,193,
+  91,205,130,64,190,82,91,194,71,40,19,42,200,223,180,54,47,113,131,169,132,215,99,3,99,14,1,35,160,229,188,217,
+  24,118,133,43,199,34,80,121,20,220,235,78,131,119,195,121,232,217,112,9,124,219,191,79,191,5,254,234,235,153,91,94,
+  137,158,245,23,35,176,241,12,4,43,143,135,181,78,227,231,4,164,156,224,169,210,198,52,104,19,98,57,247,43,119,84,
+  143,18,127,213,49,8,237,190,148,215,91,243,165,60,195,130,68,205,20,106,43,84,23,54,169,86,66,169,190,244,100,248,
+  248,79,144,245,243,67,21,47,182,219,208,169,118,88,175,39,129,182,213,210,228,216,246,113,5,160,122,210,16,64,207,47,
+  97,109,34,128,235,120,190,101,137,107,98,174,147,185,70,89,204,163,121,141,247,223,198,115,85,243,135,198,4,206,69,168,
+  251,251,8,181,81,45,91,168,250,93,231,18,192,239,177,48,191,211,0,24,139,190,79,0,87,194,31,168,117,0,180,205,
+  31,174,125,56,20,169,164,250,125,193,92,228,31,244,39,9,224,47,9,224,157,232,235,249,62,213,143,73,117,7,111,40,
+  141,243,106,73,99,30,200,112,173,147,55,139,166,194,51,221,207,214,35,180,239,183,166,249,33,54,91,161,103,170,129,206,
+  86,65,1,105,26,228,103,101,34,48,183,16,190,221,84,84,211,143,82,131,73,181,78,130,32,212,116,239,234,157,146,24,
+  54,163,174,100,137,245,234,88,58,155,201,100,117,147,168,150,80,160,106,184,145,192,219,204,207,107,78,77,141,10,80,206,
+  250,8,194,251,190,15,127,197,9,4,47,15,177,21,44,12,86,166,193,162,127,9,158,237,4,114,13,95,103,8,26,50,
+  234,151,132,81,37,251,42,193,88,8,139,165,123,176,124,148,169,134,247,108,60,15,222,221,55,32,208,192,27,178,245,41,
+  222,80,31,241,252,153,255,70,22,211,151,209,121,30,161,47,184,255,125,68,154,255,142,192,222,251,225,222,122,21,186,214,
+  157,75,101,60,9,81,1,168,16,180,138,225,104,149,170,244,121,115,86,112,171,182,70,134,168,10,75,195,27,78,64,176,
+  250,50,196,221,140,60,44,22,130,140,18,180,212,119,162,86,83,191,155,133,80,84,144,216,145,65,66,5,19,133,146,30,
+  39,96,75,244,26,82,101,140,29,110,218,16,10,64,129,102,195,38,0,165,124,9,184,163,113,185,174,181,0,92,154,0,
+  208,247,91,132,53,37,161,174,139,157,51,219,74,168,107,199,176,212,183,135,105,133,230,18,53,125,84,23,32,220,125,61,
+  130,166,178,78,179,162,141,39,128,223,69,220,119,55,11,221,199,249,95,191,153,0,48,228,40,160,177,118,180,103,251,67,
+  123,253,154,52,87,157,143,227,214,139,188,145,254,128,120,128,113,189,247,86,150,200,188,120,189,223,68,188,237,24,198,245,
+  69,208,186,220,2,48,210,161,139,254,41,99,254,170,196,248,174,61,63,67,247,194,124,211,239,243,159,148,47,9,98,100,
+  70,150,169,156,177,8,104,215,18,230,88,13,12,109,213,8,174,222,33,214,171,136,242,15,140,199,212,113,88,243,114,38,
+  26,142,19,115,131,234,134,80,133,132,212,78,85,235,117,124,95,21,172,240,98,158,175,70,136,191,206,243,125,18,22,115,
+  61,247,142,51,205,242,102,145,165,252,62,45,244,41,224,86,208,87,37,125,233,160,126,16,10,192,4,152,70,29,215,100,
+  48,167,113,33,186,38,7,17,130,215,83,113,12,122,55,140,135,103,39,75,238,246,39,17,243,127,196,252,69,19,61,169,
+  115,181,242,29,133,235,170,249,211,250,230,235,19,35,59,204,212,23,234,149,178,134,215,113,46,21,249,19,68,154,254,132,
+  222,173,19,121,172,179,16,96,62,104,49,124,141,169,70,113,221,49,116,229,138,202,25,9,33,85,80,251,2,149,199,32,
+  184,243,91,84,113,66,24,121,153,249,210,36,94,7,85,112,232,186,180,48,58,17,44,2,80,10,150,12,217,13,88,122,
+  46,245,74,246,135,253,79,46,80,147,143,13,112,201,90,100,243,60,241,89,211,49,221,12,54,214,180,20,203,16,228,181,
+  141,121,127,133,0,11,16,147,255,153,66,138,16,42,4,53,97,123,26,243,234,98,248,118,241,191,212,120,81,27,192,158,
+  137,240,107,72,146,89,247,225,140,228,164,76,119,34,28,252,3,66,145,55,8,224,114,1,24,15,69,186,110,79,222,134,
+  95,95,235,236,171,201,9,132,183,243,134,94,192,27,122,50,195,132,103,96,5,127,207,146,252,62,94,180,91,120,241,174,
+  160,2,158,201,132,122,44,98,173,154,110,60,29,49,173,247,208,251,35,222,252,211,13,12,234,223,232,223,193,176,111,14,
+  255,152,164,250,245,119,19,146,126,145,137,232,12,230,93,179,82,224,95,152,137,222,149,199,19,194,31,18,158,199,121,179,
+  62,203,63,230,109,88,161,79,121,14,179,13,140,106,66,136,69,213,182,164,233,37,232,154,205,204,212,208,206,224,103,168,
+  120,225,87,249,30,22,22,190,135,205,172,218,238,117,71,193,191,170,16,81,169,221,242,36,112,203,8,220,10,186,182,114,
+  193,167,237,114,186,13,101,82,17,195,188,177,124,203,71,160,183,226,27,240,110,189,6,161,230,63,32,170,46,86,82,54,
+  211,173,75,112,169,183,135,20,95,179,150,49,228,74,122,76,10,168,49,147,102,152,208,74,19,150,135,204,185,111,226,115,
+  194,19,156,130,72,251,239,225,171,185,10,189,90,43,157,225,166,122,214,36,242,67,85,106,168,70,145,106,168,17,7,234,
+  133,195,48,55,184,131,16,118,171,230,240,25,94,147,73,188,38,252,46,173,47,193,194,232,203,208,92,29,24,180,21,52,
+  42,164,146,32,26,216,20,178,11,174,100,244,112,40,108,87,161,102,127,70,81,133,222,163,231,130,144,91,83,241,211,206,
+  107,187,132,10,200,124,58,244,107,132,212,169,192,40,30,1,92,157,204,153,245,152,17,68,112,165,11,254,45,223,67,52,
+  60,135,133,144,0,92,202,188,241,78,4,155,89,176,24,5,60,157,97,236,101,4,249,199,60,214,163,44,196,18,0,6,
+  66,117,8,88,157,247,39,111,195,175,175,9,192,80,184,130,201,241,231,188,232,31,242,15,127,154,161,220,111,89,226,51,
+  100,80,242,108,154,31,206,34,128,76,194,205,66,138,84,64,150,110,86,7,227,254,232,44,2,168,252,107,54,252,155,111,
+  64,232,11,134,125,201,176,51,70,208,148,247,29,130,112,166,192,164,210,204,86,141,168,11,193,5,57,240,44,30,135,224,
+  190,27,76,31,76,51,122,32,200,208,46,248,15,254,241,111,35,24,249,152,254,9,253,35,158,27,225,12,191,198,210,255,
+  5,254,129,207,242,28,159,96,72,243,107,88,7,175,67,111,229,233,240,173,24,142,216,66,42,216,18,126,207,82,126,247,
+  210,76,68,24,126,198,248,216,90,197,144,88,144,25,248,228,12,135,87,177,48,224,13,20,163,91,101,249,44,12,198,194,
+  183,254,36,2,114,11,98,221,82,101,181,81,82,197,76,143,18,245,240,208,96,91,245,181,92,196,223,252,57,95,103,104,
+  200,243,136,5,30,71,212,243,11,130,250,32,98,193,223,82,241,168,148,225,103,89,160,104,150,55,245,141,21,176,234,38,
+  70,101,143,106,182,231,73,8,237,127,16,189,27,191,197,60,145,249,31,115,194,248,58,2,87,62,4,161,205,197,4,79,
+  77,28,137,166,12,171,130,5,10,33,140,119,223,207,235,251,60,33,215,56,196,101,136,197,247,26,104,18,163,58,2,72,
+  116,83,19,92,2,75,219,36,84,122,143,233,59,106,87,174,216,208,233,185,62,67,120,109,85,60,244,154,250,155,74,29,
+  185,79,67,157,8,96,220,255,107,120,52,27,218,218,252,4,116,170,53,150,235,154,174,229,117,92,193,116,100,27,21,206,
+  154,153,184,78,234,148,225,189,143,5,24,11,19,141,9,236,56,197,132,160,125,94,22,216,26,204,29,126,153,255,225,66,
+  248,131,245,232,12,120,29,0,5,160,186,6,197,169,44,102,93,240,128,154,31,126,67,101,185,35,1,160,186,159,117,158,
+  202,240,83,0,242,194,183,164,48,199,41,66,72,205,19,6,64,134,96,4,208,179,233,106,120,102,150,124,153,247,125,5,
+  192,190,153,106,152,39,28,51,211,209,199,215,244,62,255,252,98,134,173,163,225,230,31,24,235,84,67,45,149,87,185,15,
+  75,253,88,228,53,134,166,175,240,156,146,211,240,69,158,35,156,76,226,123,31,64,168,254,7,240,149,159,129,240,146,60,
+  68,23,243,251,230,243,248,11,6,25,0,99,75,25,122,46,229,241,151,18,60,2,104,194,78,169,158,29,126,174,114,33,
+  182,166,8,129,181,37,112,47,25,9,247,70,30,103,63,195,76,55,115,200,136,70,118,107,42,63,169,87,5,127,27,195,
+  77,115,35,206,78,76,157,216,251,103,132,59,239,128,103,223,21,240,182,158,204,82,94,203,110,243,88,173,67,16,104,31,
+  205,231,199,34,192,18,223,215,113,57,162,65,13,73,226,245,52,32,170,162,74,195,117,152,179,70,22,82,217,158,98,88,
+  122,5,130,85,223,160,243,230,102,104,154,168,97,165,18,170,185,131,97,106,184,146,185,103,197,40,134,163,223,230,247,254,
+  154,255,11,127,127,248,61,30,67,61,136,148,19,38,102,91,59,164,108,182,130,245,3,240,144,18,26,21,148,34,246,135,
+  209,86,68,125,214,254,156,13,39,247,233,123,164,128,140,48,188,155,143,69,68,21,89,43,84,113,197,235,107,87,104,177,
+  112,139,46,207,130,127,19,11,10,51,36,73,81,2,195,115,255,131,8,181,28,197,208,125,40,1,252,198,191,4,208,81,
+  192,164,245,245,149,229,132,35,44,237,5,160,25,21,240,103,94,40,77,182,123,59,250,220,215,80,1,47,50,0,42,156,
+  48,139,109,152,21,111,242,16,233,150,2,78,67,98,0,238,18,120,183,125,31,222,153,197,9,248,84,233,50,131,10,148,
+  132,49,225,252,156,160,60,4,100,226,125,129,89,121,232,158,63,12,93,203,143,133,119,203,121,240,215,124,15,86,243,15,
+  16,110,190,3,209,246,219,97,53,221,6,139,249,98,112,207,119,225,221,52,1,222,149,204,205,22,21,33,184,48,219,64,
+  167,134,254,248,2,30,111,33,183,75,228,12,65,23,113,187,56,21,177,249,188,105,168,140,130,47,186,156,97,240,178,84,
+  248,86,230,161,119,205,56,230,100,151,83,141,52,73,44,243,156,232,34,134,79,202,179,42,77,35,190,185,145,52,160,213,
+  122,7,17,173,18,235,158,8,79,203,217,84,235,35,16,100,169,30,22,120,202,113,180,204,86,115,49,157,225,89,115,190,
+  233,126,21,227,227,200,254,145,8,52,82,85,59,198,35,228,253,9,21,241,29,30,79,97,172,20,85,115,180,16,108,223,
+  123,240,238,250,49,122,171,88,0,216,33,169,105,240,31,134,240,166,98,132,5,36,243,67,171,114,52,2,91,190,201,156,
+  80,147,218,62,203,104,224,3,68,180,188,153,89,19,95,161,165,13,20,243,66,83,163,105,135,159,114,169,162,42,103,180,
+  181,223,39,23,124,122,93,208,37,94,51,237,128,198,245,122,7,65,95,196,239,81,103,252,135,225,33,128,33,22,92,166,
+  169,198,206,161,21,190,175,96,33,199,104,194,91,57,129,17,128,6,88,75,1,5,224,111,17,57,160,133,89,135,163,175,
+  93,67,146,148,3,10,64,173,114,43,0,23,32,16,220,75,8,219,29,0,253,225,109,43,35,90,19,92,235,50,104,46,
+  72,3,160,42,96,4,224,181,95,2,168,213,109,180,210,13,1,180,24,138,122,59,175,38,128,204,25,181,72,11,85,48,
+  176,235,22,2,88,242,79,192,125,249,56,249,188,191,34,38,93,144,170,171,90,96,86,62,2,179,179,17,154,157,67,47,
+  68,96,201,48,248,23,148,34,176,72,158,71,207,166,187,16,89,196,247,47,38,204,139,24,210,206,39,128,244,56,225,51,
+  48,106,155,124,28,95,172,215,120,124,2,25,93,144,6,247,202,33,232,88,122,4,122,54,171,31,230,223,24,106,105,228,
+  184,198,230,37,42,81,180,226,170,81,63,13,200,85,143,13,239,15,225,107,61,11,238,150,19,224,107,30,131,104,203,17,
+  8,183,143,64,172,245,104,150,234,167,38,194,242,206,111,242,218,92,144,232,110,213,113,102,34,220,106,27,71,8,135,34,
+  218,86,130,80,107,30,149,114,20,2,157,19,16,209,160,222,216,23,135,190,207,116,221,10,127,138,240,190,159,51,47,60,
+  15,193,10,141,56,63,220,168,159,220,244,200,81,207,147,242,225,12,147,9,225,86,230,225,189,234,63,250,44,52,174,48,
+  209,151,118,135,1,200,238,140,16,142,246,135,140,110,96,20,96,4,211,86,72,179,63,9,104,191,231,118,211,132,153,29,
+  64,149,48,177,121,176,120,63,104,173,191,222,77,71,35,188,134,255,189,218,81,21,77,8,64,57,115,237,48,1,116,151,
+  159,142,112,112,146,249,109,198,3,127,68,168,233,88,94,7,22,200,237,39,24,0,131,170,208,11,253,134,199,123,145,249,
+  254,28,2,184,203,1,80,22,8,110,223,21,142,172,96,8,241,49,195,163,151,88,226,61,206,82,138,225,160,146,102,211,
+  6,168,1,184,82,192,81,116,134,31,102,14,152,44,4,219,47,36,128,44,217,213,157,140,225,85,176,225,119,232,89,48,
+  28,145,57,84,189,57,234,255,217,175,49,158,30,159,245,159,43,103,254,147,171,209,158,97,106,124,94,6,162,179,169,94,
+  154,206,66,93,217,228,60,230,161,199,182,75,245,22,242,123,22,240,156,4,162,194,76,170,160,217,207,199,145,37,169,132,
+  54,7,157,203,78,70,104,215,173,8,183,61,11,51,15,169,153,74,93,249,153,230,18,213,180,24,204,237,194,31,32,234,
+  126,20,193,166,171,209,219,114,58,195,73,2,215,60,150,185,47,111,160,6,150,226,29,231,35,166,73,102,187,191,71,159,
+  136,120,215,143,16,99,30,28,239,186,157,219,155,25,66,95,135,120,207,85,204,217,88,96,181,159,110,106,141,163,44,180,
+  20,174,135,169,138,190,182,19,16,236,85,69,196,107,252,62,169,237,118,222,228,101,140,60,102,195,106,123,130,234,254,109,
+  248,9,97,148,161,103,84,189,109,76,85,127,49,162,171,139,17,171,80,115,200,112,4,183,77,224,119,252,140,255,209,203,
+  252,191,222,99,225,199,144,89,16,82,209,18,225,168,42,101,18,61,138,18,53,165,118,37,77,82,241,250,1,103,212,207,
+  132,177,234,87,155,124,15,213,50,49,254,48,209,23,52,162,208,63,240,16,21,240,104,158,71,50,151,86,173,178,182,82,
+  66,249,138,52,166,3,39,17,50,245,9,86,33,198,130,37,248,119,70,10,39,176,176,26,194,123,71,10,200,123,72,0,
+  82,1,163,145,231,17,13,207,64,48,184,19,129,64,139,3,160,0,140,168,22,79,0,134,8,96,232,79,12,143,248,39,
+  75,1,77,37,204,101,188,136,103,243,134,82,173,22,75,64,45,182,216,154,67,117,56,153,55,237,11,188,224,137,41,8,
+  35,157,175,225,224,146,147,16,152,195,247,40,223,83,63,208,255,164,130,253,92,160,217,175,171,233,34,169,142,241,57,82,
+  74,250,92,170,215,156,12,30,135,224,242,113,223,60,121,18,60,41,159,84,78,174,60,111,177,148,142,133,195,252,116,66,
+  151,13,107,81,58,60,203,10,209,189,242,40,248,170,175,70,180,227,25,88,33,205,16,38,229,81,129,161,38,3,213,96,
+  82,249,53,57,20,149,37,208,122,37,188,4,47,210,62,142,74,55,134,191,149,55,85,251,89,252,253,223,37,96,44,136,
+  122,24,114,247,168,96,122,16,17,223,111,249,152,238,255,3,175,209,35,44,168,212,103,246,23,132,227,126,134,138,188,209,
+  186,175,33,152,204,107,25,130,198,234,142,70,172,137,249,115,51,149,189,105,56,115,200,43,248,157,204,231,20,226,69,117,
+  46,155,168,186,203,24,110,63,131,222,45,87,192,95,201,220,73,141,244,234,236,108,212,176,20,177,117,67,25,134,230,51,
+  44,29,13,223,246,115,249,61,247,50,63,214,146,94,10,109,153,163,154,169,246,165,96,130,72,0,217,179,113,219,211,111,
+  168,98,197,126,45,9,33,221,140,26,33,128,9,120,181,79,175,243,189,44,152,226,26,13,65,0,99,254,7,224,222,48,
+  6,145,85,202,253,146,10,104,215,30,171,54,121,217,96,42,32,97,115,19,86,115,93,233,106,90,226,253,17,107,19,128,
+  199,38,122,195,120,111,226,245,122,144,175,61,77,0,103,82,253,170,29,5,148,37,0,92,74,53,147,2,242,34,106,161,
+  77,59,4,245,92,207,27,77,205,16,4,176,117,44,47,104,22,93,0,166,35,208,54,22,150,151,55,97,108,53,1,100,
+  110,19,153,139,246,170,75,209,53,123,4,194,115,9,142,20,171,63,128,2,204,64,249,165,171,70,52,177,77,79,188,78,
+  87,109,169,166,176,208,123,5,163,81,78,1,168,247,246,87,63,41,30,161,52,16,154,80,51,19,193,121,5,232,94,52,
+  156,224,157,14,255,238,235,16,232,86,197,202,60,211,156,17,55,83,6,42,95,165,250,105,18,163,200,115,102,44,99,160,
+  237,155,240,183,28,131,112,203,209,132,239,120,42,29,213,190,151,234,222,173,240,91,29,17,126,202,18,252,1,22,74,188,
+  121,52,58,68,147,83,105,252,155,143,30,96,129,165,101,185,3,79,209,255,140,184,255,49,94,187,135,121,237,152,175,121,
+  120,253,122,174,101,152,74,229,60,120,34,1,100,1,102,166,238,47,65,128,96,91,170,232,210,74,78,204,155,162,90,222,
+  153,170,24,243,60,143,222,141,23,162,183,108,4,44,53,79,16,68,107,237,151,93,191,98,204,9,3,229,195,8,33,255,
+  143,222,123,89,104,62,207,252,242,99,254,182,133,204,197,165,132,26,249,174,174,107,54,92,253,192,50,225,168,66,209,47,
+  1,252,82,1,237,54,65,133,171,13,60,23,69,68,12,41,121,141,162,84,119,191,190,223,168,31,255,15,1,104,148,143,
+  174,199,140,52,124,101,44,52,220,44,84,12,128,252,45,209,87,120,61,25,50,83,249,255,9,192,208,175,233,79,51,196,
+  255,156,33,232,14,42,224,65,7,192,96,100,243,46,75,149,2,145,201,244,87,9,160,20,240,231,188,129,120,243,153,81,
+  16,90,120,229,28,3,96,92,35,33,90,8,72,155,11,209,86,222,72,61,4,84,51,113,153,90,195,149,188,185,94,68,
+  203,220,211,204,120,64,193,19,157,201,188,65,16,73,209,4,93,178,145,94,224,197,25,158,70,85,35,154,132,241,80,126,
+  168,48,84,160,234,185,253,88,159,155,107,195,199,207,207,227,57,48,76,141,45,102,137,76,213,179,248,56,184,128,240,173,
+  60,11,222,93,119,242,166,121,145,127,242,92,68,205,74,72,170,129,84,51,2,111,142,216,28,88,225,167,96,185,175,39,
+  120,167,48,204,60,202,116,48,143,180,158,192,155,228,28,170,56,195,71,253,166,238,251,140,170,197,124,90,167,92,112,61,
+  133,72,248,85,211,176,174,57,77,52,179,151,110,208,120,88,51,159,169,71,12,195,175,240,155,124,159,128,100,84,224,35,
+  168,26,255,166,53,19,205,241,46,103,4,241,13,94,187,163,24,150,50,167,109,41,128,191,141,225,166,214,67,215,124,158,
+  102,36,129,10,136,149,188,145,95,49,61,104,124,149,12,97,77,167,103,186,122,161,104,24,144,154,41,202,139,17,88,203,
+  124,89,243,210,180,221,99,206,45,30,122,135,133,76,114,78,30,141,7,52,61,134,18,179,175,37,66,81,193,165,10,23,
+  187,210,70,192,73,237,20,186,218,42,169,247,240,115,84,228,24,115,251,184,105,3,252,19,172,253,151,35,176,42,247,75,
+  224,86,241,63,85,211,142,84,112,57,255,71,2,232,93,121,56,239,7,141,9,84,104,207,107,205,107,225,111,153,192,28,
+  144,57,108,219,241,137,238,104,4,48,30,226,53,9,254,213,0,24,12,109,37,128,245,14,128,193,200,198,93,90,10,216,
+  84,194,152,169,34,158,224,159,202,146,202,123,55,111,158,155,121,243,124,223,84,50,244,117,28,67,229,83,173,95,150,129,
+  48,220,194,210,188,245,92,68,212,118,103,170,238,215,178,84,159,11,247,142,59,225,94,112,4,44,193,71,5,52,46,5,
+  179,1,147,207,209,150,80,246,223,215,255,177,160,147,130,10,64,237,23,124,250,140,154,47,230,17,186,121,60,102,210,67,
+  139,10,209,179,228,4,248,171,39,34,218,243,34,127,199,28,158,139,122,170,108,229,205,37,101,145,226,125,134,88,232,49,
+  4,221,63,128,187,237,52,4,247,241,183,52,31,135,56,115,181,196,58,229,215,208,25,98,250,168,74,61,234,132,206,155,
+  201,79,136,131,239,18,186,41,116,205,181,169,78,0,26,105,177,140,161,35,127,175,105,94,80,24,203,173,194,192,216,108,
+  190,143,112,6,9,164,71,181,201,79,195,10,252,14,177,128,58,52,252,132,48,50,140,53,29,26,142,32,56,133,102,9,
+  47,211,86,230,249,33,143,251,1,85,108,29,66,150,26,238,87,240,28,94,71,96,199,117,204,9,199,153,182,54,245,62,
+  9,111,164,18,170,34,36,217,19,37,184,98,8,34,235,79,100,97,195,188,50,252,119,134,139,239,48,36,213,132,188,170,
+  8,81,131,189,148,48,17,114,134,162,170,92,17,124,9,5,76,64,167,218,81,133,173,10,79,5,160,222,123,128,231,177,
+  10,97,141,159,100,158,25,235,249,21,11,3,94,175,53,2,144,240,49,220,140,173,80,27,32,207,201,0,152,128,210,191,
+  84,171,98,241,190,97,97,103,86,78,38,188,97,45,79,103,0,60,50,9,32,11,34,21,74,234,15,26,18,128,219,28,
+  0,61,225,166,163,253,161,29,29,170,5,77,172,169,206,82,207,226,133,12,177,244,15,220,203,27,233,22,222,12,170,136,
+  249,54,1,100,24,213,54,156,74,200,27,192,84,196,164,194,106,25,131,168,102,201,86,137,25,93,206,63,174,146,207,39,
+  195,93,121,37,220,115,71,32,202,208,210,154,77,181,156,161,92,46,9,86,18,50,237,83,83,197,161,158,51,246,107,130,
+  77,138,151,172,144,137,241,24,26,75,24,155,175,101,205,50,17,153,159,134,208,236,92,120,22,148,160,103,249,137,240,237,
+  186,25,145,14,134,154,209,89,48,253,38,77,85,184,42,88,8,161,1,239,111,240,119,79,132,191,227,20,248,91,153,203,
+  104,20,127,231,120,222,20,204,109,123,8,94,207,29,124,252,59,42,30,193,243,176,0,242,190,195,155,239,19,196,35,179,
+  168,150,11,17,99,126,102,122,120,152,10,134,245,176,152,183,89,209,29,244,157,188,145,183,242,53,230,75,252,62,173,100,
+  20,87,175,152,208,92,130,59,141,174,201,151,94,102,169,255,4,65,252,45,11,39,133,165,87,243,187,39,24,213,181,90,
+  70,34,162,41,253,9,97,95,207,141,188,49,63,164,98,175,102,40,169,89,218,24,214,187,63,64,112,231,141,240,175,228,
+  53,55,35,55,120,173,212,3,101,149,122,163,228,24,24,173,149,46,68,180,98,81,143,230,221,252,11,66,84,105,139,255,
+  99,220,98,74,161,217,208,168,104,81,51,227,156,242,63,63,31,171,130,70,57,159,0,84,88,42,32,213,116,209,198,109,
+  29,149,111,53,33,182,235,2,254,134,104,227,117,240,172,40,66,88,192,73,1,213,156,179,132,255,189,105,95,77,60,151,
+  187,151,171,80,121,56,121,253,21,130,126,192,255,228,18,22,214,44,176,219,24,101,24,0,249,27,125,76,109,66,12,213,
+  173,41,8,135,214,17,192,253,95,111,0,219,218,218,46,242,5,119,133,195,145,213,132,71,205,16,4,80,115,165,4,212,
+  16,207,48,84,53,87,221,4,80,51,91,41,15,108,59,26,177,118,134,161,166,45,48,149,55,144,70,197,159,193,247,254,
+  129,23,125,58,149,33,209,253,42,230,249,24,189,235,175,133,103,206,112,134,163,69,102,100,132,20,81,170,23,99,78,103,
+  122,201,36,33,180,129,180,221,40,166,242,61,129,72,215,56,66,235,11,23,194,4,217,154,155,13,207,188,33,232,88,206,
+  48,119,199,245,136,117,243,70,161,50,133,45,229,120,27,120,131,41,204,84,62,59,13,81,230,26,30,247,205,240,180,158,
+  199,112,232,72,4,181,92,114,231,41,136,119,93,194,27,94,21,42,191,32,20,202,215,254,132,184,239,37,88,161,247,8,
+  222,20,3,80,36,186,134,94,142,112,84,171,19,109,231,227,157,8,70,118,32,20,170,69,32,188,23,129,72,3,189,73,
+  253,25,205,114,202,129,72,29,161,169,230,57,108,227,247,87,18,90,173,34,53,131,33,234,39,8,107,138,6,230,82,17,
+  77,237,97,70,151,40,183,188,152,55,232,169,12,229,71,80,37,10,16,106,25,135,40,115,206,120,248,69,30,99,62,1,
+  209,117,172,98,78,57,9,193,237,87,193,90,83,128,232,138,76,132,237,209,27,234,231,170,10,16,230,101,17,194,232,91,
+  59,198,172,225,208,23,124,132,55,248,51,44,60,222,33,204,51,204,239,136,153,105,9,149,27,170,51,119,7,247,201,213,
+  65,91,222,74,101,212,212,140,252,207,152,195,71,8,159,102,172,211,196,201,49,94,31,255,198,227,17,92,205,2,52,25,
+  106,154,220,47,9,157,241,197,252,63,23,40,252,215,50,227,247,153,239,51,97,112,116,10,66,109,23,19,202,60,42,190,
+  134,36,157,207,223,206,255,43,168,254,173,127,166,79,34,128,149,4,112,135,19,130,6,130,187,118,133,35,171,88,122,126,
+  78,21,124,147,55,193,211,136,107,10,250,160,70,67,104,46,24,230,129,154,13,77,137,52,19,106,117,73,83,14,104,26,
+  229,233,90,15,48,212,121,1,162,225,151,120,227,169,177,121,51,157,32,132,166,33,88,123,31,186,151,80,121,102,151,210,
+  243,17,153,65,245,252,74,95,209,47,159,51,103,36,144,6,86,51,148,137,127,46,243,196,248,156,140,196,124,50,179,134,
+  160,103,213,25,8,84,83,241,58,9,30,21,42,209,184,93,70,240,152,67,41,20,100,62,26,241,63,142,112,207,213,240,
+  183,159,10,111,219,177,204,245,142,131,213,193,208,79,107,22,118,223,8,205,76,214,215,243,55,254,54,170,147,134,47,133,
+  62,96,201,79,165,12,207,163,138,175,36,0,235,8,221,22,134,131,59,9,214,14,4,8,93,87,79,35,186,3,237,244,
+  174,164,247,160,217,211,13,119,168,19,94,95,7,223,211,72,128,27,120,83,237,225,103,119,34,26,81,67,190,214,140,88,
+  68,16,149,51,242,59,66,47,51,4,163,202,186,127,198,243,96,104,223,163,25,230,78,103,232,54,142,215,112,12,124,205,
+  227,16,236,96,184,175,206,229,38,151,82,133,209,98,230,161,111,194,183,249,26,120,214,142,36,128,153,136,169,175,171,194,
+  65,85,138,48,12,12,83,25,61,149,57,112,87,140,129,87,75,137,105,36,69,152,97,158,245,52,11,166,127,176,224,120,
+  23,102,22,114,179,126,131,82,5,21,16,4,83,171,82,177,176,178,24,178,135,8,132,63,252,62,223,79,248,84,7,224,
+  190,7,254,45,204,167,151,23,34,188,34,131,170,71,224,87,232,123,109,0,181,77,42,225,66,205,120,94,138,200,254,7,
+  147,0,242,188,89,0,250,249,251,52,121,87,220,140,9,212,26,17,215,241,190,226,185,5,121,124,22,118,225,80,121,167,
+  39,92,125,84,242,54,252,250,90,32,82,187,75,3,113,205,172,202,234,177,97,61,195,139,244,56,93,234,192,18,91,42,
+  168,37,199,76,131,60,115,38,134,79,177,246,33,116,1,200,208,132,57,97,184,141,161,84,7,195,84,134,64,137,198,109,
+  65,72,245,136,44,161,74,189,198,60,226,110,180,174,62,23,61,11,198,194,61,171,20,225,47,152,63,206,200,49,19,247,
+  70,103,166,29,130,78,33,169,153,204,215,84,208,100,80,245,178,208,53,239,8,52,173,60,27,190,221,247,16,30,222,156,
+  209,121,188,201,203,249,103,39,186,119,169,196,141,51,127,141,50,180,177,186,47,71,160,233,56,4,155,79,160,170,156,140,
+  184,66,77,85,34,73,241,186,31,34,0,252,243,85,131,25,124,61,17,102,134,53,139,244,18,222,120,85,84,176,77,8,
+  251,119,49,18,216,67,165,219,11,47,149,173,161,173,30,77,29,173,56,216,225,193,193,238,48,26,61,1,116,250,195,244,
+  32,149,208,139,112,176,23,225,0,225,115,31,132,213,185,31,86,107,53,75,253,45,8,118,175,68,196,205,240,53,68,0,
+  45,122,248,11,126,159,166,249,120,141,206,16,191,151,209,69,55,67,95,173,161,175,129,206,140,44,172,246,18,4,90,71,
+  18,66,158,175,245,54,127,35,1,54,21,51,101,44,84,222,129,119,219,229,112,151,13,75,128,167,202,16,213,72,174,73,
+  71,136,80,202,213,78,231,94,91,2,207,198,111,48,50,185,138,208,51,141,176,254,194,239,125,129,42,252,10,33,123,141,
+  215,232,77,88,145,183,232,31,154,198,252,8,31,39,166,237,120,141,207,159,227,246,113,88,189,119,33,176,153,5,221,82,
+  70,46,234,253,34,200,14,129,247,21,87,251,43,183,193,69,204,103,107,239,78,116,24,55,5,199,116,196,187,191,199,123,
+  67,211,82,36,115,64,179,74,46,243,97,126,135,198,58,134,67,101,206,112,36,89,192,218,115,150,0,212,58,234,154,38,
+  34,209,20,241,87,222,40,204,139,52,34,94,99,2,189,63,224,5,228,159,170,229,134,219,213,62,54,134,0,178,116,51,
+  53,162,169,70,9,3,166,122,253,66,68,131,127,101,201,207,60,72,77,19,170,8,81,72,22,154,143,72,239,167,8,55,
+  62,131,158,77,63,64,215,242,9,104,93,116,34,220,51,75,209,203,144,210,59,171,216,184,123,110,9,90,230,141,67,231,
+  226,147,209,185,244,116,248,182,92,131,208,222,7,17,243,242,166,9,42,212,84,126,167,176,48,113,99,198,52,239,75,240,
+  111,8,244,220,192,80,243,84,248,155,142,66,172,227,180,132,90,11,188,110,22,30,238,95,80,253,180,164,26,75,247,0,
+  11,136,200,7,132,120,58,111,18,221,44,155,16,9,87,179,180,174,69,75,235,42,236,218,181,29,157,238,78,248,131,237,
+  4,174,19,187,218,186,81,221,238,195,214,142,48,234,122,98,104,245,71,224,243,91,136,248,124,136,118,182,35,184,109,59,
+  90,167,127,142,3,159,60,138,250,199,127,137,125,127,186,15,13,239,62,136,186,143,31,71,103,229,163,104,175,248,24,238,
+  189,211,152,3,206,227,77,167,89,198,53,219,192,139,60,15,222,132,94,213,52,171,96,96,72,220,53,1,209,214,177,136,
+  180,231,35,208,50,4,161,14,134,252,81,213,142,150,49,12,174,162,130,81,153,189,255,128,119,235,183,16,88,150,197,176,
+  147,138,180,134,55,183,61,206,49,233,26,86,101,173,78,131,175,98,4,124,219,206,68,68,74,171,230,14,213,148,70,152,
+  39,171,134,54,242,42,193,83,101,21,31,27,197,227,255,173,25,10,152,118,104,222,28,247,186,163,17,90,57,4,209,165,
+  44,16,77,191,218,36,124,139,233,234,228,96,218,94,147,110,58,191,15,130,119,81,1,2,26,19,200,136,196,164,33,4,
+  48,202,212,69,21,77,125,237,199,240,247,157,149,200,127,125,90,166,154,81,0,1,12,69,86,59,0,202,204,112,164,200,
+  102,88,225,69,44,13,181,46,2,75,73,235,169,196,133,242,63,200,82,235,126,222,44,63,226,5,100,40,218,115,57,111,
+  60,134,19,29,39,176,212,214,244,20,76,178,147,161,168,70,73,68,90,138,209,219,242,13,68,181,126,160,165,238,82,11,
+  169,44,90,177,118,3,75,243,114,134,184,203,89,10,47,161,98,204,97,9,249,6,223,79,120,14,60,10,255,190,95,195,
+  87,247,32,124,245,15,34,208,240,39,134,100,79,243,207,98,232,166,206,209,166,67,180,84,85,106,183,153,240,17,28,134,
+  76,113,255,83,12,53,111,97,126,199,124,144,57,158,213,118,2,207,235,60,134,155,84,235,94,22,26,10,197,124,90,205,
+  233,5,170,192,59,204,63,168,146,81,230,87,60,150,250,123,70,99,181,252,205,77,104,108,168,197,194,69,139,241,217,212,
+  79,177,116,213,26,116,5,188,216,211,235,71,141,215,66,69,163,7,27,154,124,168,107,247,192,219,75,232,246,239,71,231,
+  146,37,216,247,215,191,97,237,197,151,96,233,225,71,98,217,208,145,88,51,106,20,246,156,121,12,118,95,54,30,173,143,
+  31,143,221,191,187,25,123,95,184,19,251,62,254,43,122,54,60,9,247,158,169,204,55,231,80,145,102,242,26,124,200,223,
+  197,115,162,98,247,249,127,197,243,188,133,202,206,112,180,83,35,78,152,19,182,103,50,175,30,77,24,175,231,239,124,157,
+  231,188,140,215,110,163,57,239,104,239,211,240,110,60,31,189,43,135,34,76,64,4,219,33,0,85,35,105,148,138,16,174,
+  204,128,119,237,16,134,173,135,51,124,61,141,225,225,37,140,14,110,66,212,115,63,255,155,95,51,20,84,52,240,128,169,
+  64,179,90,239,66,132,249,163,183,242,116,244,174,25,142,208,170,124,42,31,143,155,12,51,99,139,51,146,125,107,147,158,
+  236,105,100,247,54,146,123,22,151,194,91,125,19,11,13,134,180,166,111,48,1,236,154,200,66,69,99,2,21,130,10,192,
+  239,51,215,102,74,19,97,158,202,28,53,16,89,233,0,40,211,50,100,161,200,198,191,132,34,107,24,170,124,65,112,62,
+  96,216,68,165,8,49,79,10,242,6,14,171,99,246,221,244,219,8,205,53,116,141,142,96,72,161,6,107,245,24,49,67,
+  148,164,132,44,129,147,205,19,254,230,99,25,146,81,45,123,212,217,153,165,126,84,211,165,171,186,94,85,248,12,169,88,
+  170,39,218,189,248,103,169,178,33,198,82,222,84,224,168,166,81,109,98,21,38,252,74,40,221,122,190,198,220,34,198,28,
+  205,98,216,232,253,61,243,186,239,18,186,179,224,105,57,158,138,71,69,238,58,143,231,117,37,98,157,63,66,172,151,138,
+  167,254,172,44,237,227,193,119,249,103,127,102,190,183,207,228,118,219,153,219,53,240,120,45,188,1,58,209,213,219,134,25,
+  51,166,227,213,103,158,196,31,255,244,7,84,174,95,135,150,96,4,181,254,40,182,118,134,176,165,161,23,141,45,29,232,
+  174,217,141,154,215,94,194,242,241,231,99,241,136,209,40,27,50,20,59,115,115,81,151,150,133,253,169,153,168,79,73,65,
+  29,125,111,78,46,14,22,21,99,223,101,103,162,254,186,243,81,251,244,109,168,123,247,78,212,127,114,31,122,118,78,130,
+  219,253,17,130,97,13,175,98,129,96,49,7,237,81,115,199,175,121,115,178,128,115,11,194,211,121,45,71,242,90,22,192,
+  207,112,52,218,205,16,85,106,149,172,129,85,142,26,235,122,5,221,149,223,134,127,77,9,98,2,206,30,219,40,24,212,
+  76,176,76,77,4,153,166,143,166,181,60,13,238,101,217,232,93,158,15,127,121,62,122,168,140,61,149,99,209,83,117,28,
+  122,214,29,207,231,163,225,45,31,78,85,45,70,96,69,22,63,107,31,199,134,139,207,165,114,11,210,19,192,153,206,238,
+  201,215,4,162,58,67,16,74,223,252,60,4,106,126,200,123,71,57,185,0,156,133,40,163,146,152,10,104,51,53,161,0,
+  100,72,170,81,241,97,70,86,145,247,16,9,45,116,0,180,205,31,169,62,53,24,89,231,183,66,75,121,113,180,204,149,
+  166,120,96,120,162,132,57,168,80,244,23,244,251,88,130,50,20,237,101,40,33,8,123,206,35,132,39,50,196,80,127,73,
+  77,85,207,144,133,16,170,195,182,213,156,75,215,220,49,163,97,29,184,130,112,252,140,64,51,4,82,136,107,218,204,212,
+  123,70,213,246,107,8,197,90,134,89,137,27,44,209,132,160,154,76,85,16,8,26,130,107,218,39,159,35,120,204,77,58,
+  190,69,117,60,30,193,214,35,224,111,63,25,209,14,22,4,106,167,84,168,229,166,154,120,52,239,228,43,166,210,67,75,
+  131,153,213,131,12,228,219,88,50,239,35,116,237,198,189,17,15,220,33,31,26,154,15,224,177,63,60,134,59,238,184,3,
+  215,95,115,13,118,237,174,70,27,115,188,3,254,56,182,55,185,177,103,111,43,14,76,154,130,153,151,92,142,233,5,197,
+  216,153,150,137,6,2,119,32,37,13,13,131,83,208,114,216,96,180,209,219,233,173,244,134,193,169,124,61,29,77,217,5,
+  216,127,236,56,212,92,253,45,236,186,237,114,236,122,245,71,216,255,233,195,104,223,240,9,11,142,79,25,146,51,223,214,
+  244,248,1,181,23,242,186,184,121,141,89,192,245,185,25,230,171,231,76,11,195,209,182,60,170,251,80,22,46,215,241,255,
+  208,212,31,21,140,76,164,132,235,153,47,254,157,16,158,68,104,88,248,25,181,34,8,130,144,64,42,23,20,72,9,152,
+  24,153,104,196,130,129,105,16,194,43,24,165,16,74,223,114,23,124,107,242,16,90,145,142,168,114,73,169,39,95,183,33,
+  75,52,53,8,46,110,5,156,20,144,110,94,255,23,91,175,150,157,219,245,3,170,59,255,51,83,9,243,25,115,73,134,
+  160,173,197,84,192,49,44,88,206,228,111,211,188,48,183,19,64,134,196,150,6,229,46,114,0,236,111,225,112,229,81,193,
+  72,69,71,76,243,124,154,169,30,222,38,124,188,57,20,42,5,126,143,184,251,65,222,224,76,162,53,73,175,105,184,102,
+  238,210,173,209,0,103,19,196,147,153,108,51,124,82,181,179,102,77,51,240,49,116,105,101,8,211,146,103,218,188,66,12,
+  77,195,173,23,35,214,253,99,196,2,191,102,72,168,246,70,170,20,213,32,174,137,160,194,26,125,254,6,253,117,196,194,
+  207,49,84,250,3,98,158,59,96,117,125,7,209,246,51,153,79,28,206,18,117,20,195,214,99,17,110,187,128,74,199,63,
+  180,151,165,174,143,33,178,255,247,60,199,23,9,159,150,1,99,120,75,197,52,211,91,196,107,168,118,106,38,104,162,183,
+  192,27,238,129,47,210,11,183,21,65,40,26,192,138,101,75,112,246,153,227,49,118,204,88,156,121,250,153,216,223,209,141,
+  78,170,95,143,55,132,198,242,74,44,251,213,207,240,183,225,35,48,63,59,23,91,210,51,80,51,104,176,81,186,6,110,
+  91,6,167,25,0,5,159,32,52,207,233,205,41,233,56,224,202,197,246,188,92,108,26,53,28,187,46,29,143,109,143,221,
+  128,242,39,30,196,210,143,254,142,230,213,79,35,210,250,62,127,47,175,179,106,72,165,210,26,131,73,229,54,109,146,221,
+  87,81,49,206,129,86,24,82,14,21,219,119,4,85,143,191,51,162,5,77,89,112,41,20,143,45,69,240,192,67,232,90,
+  117,18,124,43,242,17,89,162,134,242,20,132,53,20,203,192,196,235,110,106,41,9,136,192,82,222,38,144,76,8,169,253,
+  9,224,250,191,158,24,83,73,112,213,222,186,132,42,170,207,47,33,188,11,120,76,186,96,51,239,211,177,108,32,213,39,
+  151,30,154,95,132,192,110,70,72,38,85,16,128,159,35,228,102,254,222,202,60,181,125,36,127,207,25,201,16,244,199,252,
+  221,15,51,7,125,13,161,240,114,7,192,175,90,40,80,249,137,166,34,48,67,117,212,48,207,11,165,118,165,190,192,147,
+  204,185,88,74,187,213,71,84,35,229,85,141,78,8,61,87,242,198,185,20,17,77,188,99,70,76,28,67,31,101,32,140,
+  180,48,164,105,79,167,243,79,109,79,53,107,73,88,109,37,8,52,51,228,97,254,24,108,29,199,63,232,68,4,219,206,
+  32,156,103,195,223,56,1,225,166,179,249,120,2,66,7,79,135,191,233,24,190,119,44,130,77,99,76,5,69,188,245,56,
+  126,7,67,153,174,43,248,221,204,37,212,171,194,171,126,153,234,34,246,33,115,203,89,4,111,9,129,83,174,184,139,185,
+  103,61,98,241,38,4,45,169,94,79,173,47,212,122,161,47,212,73,247,93,216,27,10,93,232,11,122,110,249,227,227,143,
+  33,203,229,66,70,70,38,174,165,2,182,187,131,8,5,194,232,88,183,30,31,94,116,9,254,145,149,131,25,133,197,88,
+  73,181,219,153,158,141,253,131,82,113,144,42,119,80,0,10,58,186,148,79,222,76,248,4,230,126,250,190,212,52,236,166,
+  175,225,177,151,12,41,193,170,147,143,199,210,239,95,129,157,191,253,33,106,222,253,57,234,167,190,142,64,211,116,2,56,
+  141,215,152,133,93,232,31,252,29,44,232,116,125,187,121,125,169,30,177,246,19,9,224,112,122,41,175,195,49,8,169,176,
+  209,218,239,188,193,163,12,167,173,208,76,132,234,31,96,104,121,18,162,139,11,16,95,153,107,42,77,98,139,164,136,4,
+  80,160,245,171,189,52,224,16,192,216,2,213,108,38,224,20,84,177,69,4,78,99,38,5,155,194,77,163,122,220,154,16,
+  51,241,121,163,116,2,88,251,146,199,73,64,155,112,255,194,161,8,238,86,59,96,50,226,96,14,232,239,190,28,209,54,
+  22,12,237,195,190,2,224,175,248,127,189,134,72,112,97,40,16,168,254,126,242,214,115,204,182,112,112,237,242,152,181,128,
+  170,52,157,16,106,238,149,87,168,132,106,154,248,11,111,18,42,141,106,213,220,84,66,141,136,247,80,13,61,234,41,115,
+  17,47,50,115,190,174,9,9,53,212,170,56,76,190,163,173,163,25,74,101,211,25,158,182,187,248,135,100,155,80,85,83,
+  219,247,247,72,107,22,75,252,108,222,108,185,244,124,196,26,75,9,49,161,107,59,130,199,58,137,33,215,5,12,55,21,
+  250,242,251,122,169,120,62,205,89,195,220,200,47,240,230,155,169,206,53,191,104,140,138,23,141,237,165,55,195,10,183,19,
+  190,30,4,44,239,54,230,185,25,201,159,119,200,86,174,92,121,228,53,87,95,139,84,42,154,252,23,15,254,10,254,142,
+  30,180,206,153,135,73,103,158,133,127,164,166,226,195,65,41,152,203,215,214,12,30,140,106,62,110,34,128,77,132,237,95,
+  185,96,212,182,145,190,143,239,223,73,16,55,16,194,165,249,5,248,140,16,206,61,118,44,42,111,186,18,179,111,191,21,
+  245,159,77,68,235,170,23,8,225,52,196,252,154,226,130,121,178,231,37,94,99,245,33,101,78,216,171,218,81,245,31,101,
+  126,203,194,39,216,90,68,63,6,97,47,115,234,232,116,254,190,74,134,237,12,213,89,80,6,234,239,129,123,245,241,8,
+  47,202,33,76,188,182,139,168,100,2,198,128,39,160,8,150,148,79,190,48,1,153,1,203,168,33,1,92,72,181,83,59,
+  95,127,85,147,218,113,107,191,199,184,160,155,151,124,143,182,122,78,197,140,207,79,133,119,49,83,141,134,63,16,190,13,
+  44,248,88,0,50,122,10,116,126,139,145,75,14,255,187,17,188,47,18,149,48,166,50,47,172,254,160,175,178,0,89,132,
+  64,104,155,211,16,255,85,235,235,171,200,100,110,182,37,170,26,200,168,74,104,229,83,234,164,173,106,108,117,76,86,143,
+  127,229,133,204,185,204,186,17,10,155,168,136,102,244,0,33,233,186,148,219,11,25,154,42,71,28,79,128,142,230,141,116,
+  56,250,218,52,169,147,186,178,13,35,140,12,173,218,139,15,121,188,125,40,95,99,190,211,70,245,36,184,113,13,117,82,
+  69,143,57,150,0,167,42,184,121,99,106,248,15,115,38,213,106,170,223,165,201,17,99,85,132,175,134,240,53,18,184,54,
+  170,93,151,160,131,63,226,13,91,209,80,45,208,155,159,252,105,255,100,191,252,229,47,143,60,245,148,83,144,153,154,129,
+  52,66,182,226,165,151,176,239,163,119,49,255,196,83,241,113,134,11,31,30,54,8,83,211,210,49,155,175,173,165,2,214,
+  18,42,129,213,31,186,102,186,173,130,54,132,218,119,128,240,9,192,205,244,85,131,6,97,14,183,211,24,198,78,62,242,
+  112,204,185,232,91,168,254,221,117,168,251,224,94,116,111,126,12,93,219,167,80,185,231,179,192,155,138,168,34,14,53,132,
+  107,45,70,245,77,237,254,14,163,134,211,89,112,21,35,220,82,200,194,235,20,170,200,207,205,255,162,10,42,129,24,143,
+  204,132,175,246,103,232,90,115,18,34,243,25,250,51,199,179,85,79,29,213,77,223,89,133,145,73,85,51,251,147,64,153,
+  173,128,149,154,245,135,46,9,226,161,247,209,195,139,121,12,65,151,28,137,18,91,144,142,176,224,157,151,138,222,37,199,
+  50,87,229,61,98,198,87,170,96,120,18,33,22,156,49,2,168,154,221,47,107,65,19,33,104,92,107,131,132,23,242,127,
+  90,239,0,248,175,172,175,111,211,237,145,240,42,211,61,201,204,66,166,18,90,57,161,230,241,212,138,62,90,53,201,12,
+  205,121,132,185,90,50,55,116,11,196,91,120,195,104,38,109,150,118,90,71,190,155,0,245,124,27,241,158,115,248,152,185,
+  98,39,67,17,205,17,162,202,155,67,126,10,253,212,196,107,106,226,232,162,154,118,51,204,236,214,88,68,170,172,6,160,
+  106,5,38,143,26,208,223,96,216,166,181,253,212,171,67,21,57,106,222,216,139,144,149,168,213,100,168,201,63,213,77,247,
+  189,227,13,123,175,73,254,156,127,105,227,199,143,63,114,120,233,48,184,210,50,112,4,33,217,248,171,135,176,104,248,104,
+  172,46,44,193,199,4,230,253,65,135,97,58,193,91,156,146,138,45,244,58,194,167,16,83,10,39,183,129,179,183,45,84,
+  71,229,131,205,12,81,247,209,183,242,189,235,146,0,126,65,152,63,161,26,190,202,144,246,163,177,163,177,248,91,231,161,
+  246,225,27,176,111,202,3,216,176,224,93,52,30,156,133,112,120,41,115,223,143,77,143,34,141,40,55,99,15,123,111,74,
+  92,143,142,227,153,83,15,97,40,58,4,190,22,130,38,149,52,189,128,182,17,194,114,94,143,207,16,174,123,8,157,203,
+  78,64,100,105,22,44,133,147,73,208,20,94,70,205,212,28,201,60,206,6,77,175,75,245,4,21,159,27,213,236,7,152,
+  237,26,242,21,155,159,70,133,77,212,132,38,94,215,190,76,194,237,130,69,16,61,21,231,178,64,100,202,162,177,150,234,
+  64,16,124,8,193,246,99,89,168,150,16,192,254,205,16,4,48,248,43,104,174,31,205,194,23,176,202,29,0,255,157,69,
+  130,235,174,15,5,203,44,133,10,38,28,213,18,90,10,73,173,55,18,97,169,38,9,210,188,158,234,217,97,66,83,222,
+  20,170,45,237,125,128,48,222,201,11,206,18,188,135,121,139,134,227,168,39,77,15,129,234,249,30,95,147,95,197,199,244,
+  94,213,96,170,66,71,42,39,224,212,235,70,48,51,76,241,61,156,60,182,42,87,212,67,71,35,18,52,9,20,75,88,
+  211,239,178,142,192,53,33,16,238,48,240,117,7,125,97,42,223,214,190,62,119,33,67,206,193,201,159,241,111,45,61,61,
+  253,72,87,90,38,242,24,90,94,193,28,240,179,113,71,163,62,59,31,235,210,210,240,49,129,249,136,240,204,162,175,38,
+  64,219,147,121,159,148,77,192,217,138,167,173,173,122,246,62,185,96,221,206,247,86,240,179,75,248,120,14,183,159,17,230,
+  183,82,210,240,26,33,92,58,102,20,234,191,115,38,54,254,253,118,188,253,196,111,177,175,252,111,168,171,81,59,233,50,
+  254,54,230,121,234,12,237,87,27,230,189,188,30,132,144,33,190,134,51,197,90,70,48,71,46,49,35,246,99,62,94,27,
+  77,75,97,106,121,117,77,230,33,188,255,87,112,175,57,25,254,69,12,245,237,26,204,36,104,82,48,3,144,157,195,37,
+  65,60,4,154,13,162,220,134,113,54,85,211,12,253,34,104,154,99,231,80,110,72,39,136,22,21,215,51,167,148,10,172,
+  252,84,99,27,183,240,156,248,31,121,111,129,191,153,145,76,179,230,17,82,79,24,59,4,101,129,26,96,14,232,0,248,
+  95,179,96,172,252,7,161,72,25,204,148,21,186,192,209,47,232,2,145,97,169,198,192,169,27,147,41,177,85,25,162,110,
+  94,116,213,72,106,196,184,26,153,213,219,67,110,58,118,51,119,235,214,13,165,14,201,124,236,230,99,179,236,181,194,88,
+  245,10,33,192,93,10,111,159,228,251,95,66,60,64,181,11,126,200,239,210,119,106,232,143,154,40,182,24,240,98,86,7,
+  130,225,94,130,215,13,175,63,16,14,4,186,174,241,69,125,151,36,79,251,191,100,233,255,241,31,71,166,17,182,209,135,
+  29,134,59,114,242,176,156,185,90,93,122,6,42,9,140,0,156,146,154,142,133,12,65,87,243,249,198,126,10,104,67,102,
+  3,40,248,228,253,247,239,209,103,248,222,114,130,183,152,143,231,17,188,79,120,140,55,233,147,249,124,109,78,14,54,143,
+  25,129,207,174,189,10,111,253,244,39,120,253,133,191,99,67,197,18,88,150,214,89,215,100,72,44,232,66,234,185,35,8,
+  85,32,105,202,139,11,17,103,126,29,102,184,174,156,208,170,31,207,247,48,36,215,154,240,113,141,210,40,227,255,65,8,
+  169,132,61,21,231,51,47,99,184,191,136,208,9,56,66,104,128,179,93,192,245,11,51,13,80,118,165,138,182,198,5,31,
+  195,78,2,104,32,84,222,168,80,86,159,211,235,4,208,55,187,8,157,171,207,70,180,147,209,73,178,173,178,207,122,11,
+  161,142,139,16,210,36,94,26,132,220,102,247,132,145,2,42,7,252,21,255,63,205,118,55,207,1,240,191,98,161,200,198,
+  187,131,214,250,121,177,88,217,188,152,214,117,87,167,94,133,165,209,233,140,231,39,49,108,210,90,18,175,83,13,213,207,
+  145,121,128,218,181,164,142,38,76,77,186,160,50,33,171,237,4,205,0,171,234,119,186,143,159,161,199,120,12,181,225,197,
+  195,159,211,231,32,22,85,127,72,141,114,168,134,21,219,59,47,104,53,205,139,88,157,243,130,193,224,60,134,153,243,2,
+  145,224,188,222,222,208,225,201,83,253,127,100,231,156,121,102,91,70,74,58,14,39,108,47,140,28,142,157,217,57,216,157,
+  158,134,133,132,230,3,66,50,53,61,19,139,9,224,18,134,142,130,114,47,93,42,104,131,119,8,184,126,21,51,141,84,
+  83,65,170,247,10,192,21,220,46,164,207,229,49,5,222,91,84,193,207,153,83,110,207,205,197,154,194,98,60,114,196,145,
+  248,222,69,23,227,145,95,253,28,139,22,171,215,208,1,134,211,101,84,8,53,5,81,245,213,25,130,97,126,220,12,236,
+  189,26,86,231,183,17,99,56,26,105,47,66,72,121,225,193,241,136,121,89,224,69,103,51,172,211,210,219,171,169,162,43,
+  17,237,120,22,221,149,151,154,30,42,145,37,137,121,117,76,184,185,144,161,35,115,66,51,168,89,207,5,147,66,74,19,
+  86,246,123,252,85,215,107,115,248,217,57,12,59,231,48,20,157,203,207,206,77,129,123,201,88,120,119,240,220,76,71,111,
+  169,223,10,68,169,220,238,230,35,152,175,170,131,198,48,230,254,26,144,123,158,1,48,18,184,23,49,22,204,241,208,203,
+  142,2,254,119,44,18,89,115,114,95,124,205,174,120,116,121,52,202,36,90,211,175,155,138,154,40,195,195,136,6,174,126,
+  68,127,159,32,105,237,117,85,173,43,84,165,251,147,219,164,199,77,103,232,183,232,239,80,233,52,12,104,18,253,99,51,
+  82,58,102,186,159,169,159,230,122,196,226,187,8,96,93,40,18,59,112,75,242,20,254,199,172,32,55,191,35,139,64,124,
+  131,160,124,168,158,45,25,89,216,154,151,131,207,9,203,251,132,101,54,1,92,74,88,150,80,9,191,10,96,127,87,8,
+  170,156,208,188,70,0,235,249,62,41,160,212,111,25,183,243,232,51,152,103,42,164,125,151,121,229,140,193,131,176,43,195,
+  101,0,252,14,67,223,227,70,140,196,196,171,190,135,170,245,85,8,70,14,82,213,183,178,224,225,239,87,180,161,188,59,
+  160,222,50,204,179,189,183,34,214,163,85,170,212,101,109,28,195,209,66,68,154,139,9,228,217,136,248,30,162,114,106,248,
+  81,114,198,53,117,183,243,190,1,239,150,31,192,189,248,232,196,4,87,243,50,8,211,96,230,131,132,72,57,156,212,108,
+  62,97,234,15,153,253,88,99,49,185,181,22,164,38,159,107,180,202,96,104,105,1,77,23,162,161,101,158,5,133,232,46,
+  187,144,223,163,78,2,138,78,212,254,247,9,130,76,55,252,205,170,104,75,51,21,108,234,182,152,24,142,116,29,172,192,
+  253,252,191,89,160,68,212,57,124,186,3,224,127,215,250,162,107,46,234,139,175,125,57,30,91,93,163,1,171,170,141,140,
+  71,230,240,15,160,106,169,151,135,166,71,160,199,195,83,9,166,166,111,208,144,156,79,232,130,148,30,158,198,237,52,190,
+  151,249,2,63,23,51,115,210,44,71,44,150,24,206,162,33,61,177,88,125,111,48,180,255,229,255,74,62,247,223,49,215,
+  224,148,142,28,66,113,17,85,110,102,233,48,236,201,200,195,182,76,23,38,19,146,15,9,221,44,130,163,252,109,45,65,
+  82,133,138,218,247,4,156,29,114,74,5,109,37,212,115,189,46,245,19,128,106,176,223,64,95,70,128,103,243,249,84,2,
+  248,33,31,191,205,199,139,169,168,59,93,217,152,63,124,36,198,179,0,72,227,190,35,169,132,117,251,53,238,80,109,150,
+  245,8,133,183,67,211,105,196,213,155,71,29,21,168,132,113,255,67,176,212,91,70,109,175,157,19,16,111,61,154,33,222,
+  16,4,169,132,234,15,27,85,88,111,177,48,52,93,249,170,8,241,58,94,99,222,228,117,63,67,247,170,115,208,59,111,
+  36,34,243,242,16,93,200,220,144,249,156,42,79,20,90,246,153,153,5,146,160,253,43,55,106,199,48,116,22,129,34,124,
+  177,217,132,111,97,17,186,86,156,141,112,171,38,151,210,208,41,141,228,103,62,202,188,61,212,124,2,247,231,18,190,44,
+  22,20,163,9,224,73,84,239,11,9,224,15,89,40,63,64,85,127,12,62,166,47,17,53,67,88,155,29,0,255,87,172,
+  175,171,42,183,175,111,77,201,151,190,234,184,120,108,237,222,120,108,217,222,104,100,201,94,141,204,214,20,14,166,198,206,
+  184,42,25,180,229,159,22,211,112,162,10,122,162,147,117,216,170,33,116,213,254,176,213,176,55,16,105,124,162,175,239,96,
+  97,242,107,254,199,237,220,241,231,222,155,235,114,197,243,9,201,53,153,25,88,89,88,194,252,47,19,235,153,3,126,76,
+  0,63,34,116,179,233,203,9,71,25,183,2,234,32,33,235,31,130,126,53,239,179,1,148,82,10,88,129,171,240,115,22,
+  183,83,248,92,205,26,239,241,216,171,211,92,168,204,45,198,187,197,165,56,146,175,169,9,228,27,199,31,143,206,238,22,
+  104,69,40,191,169,84,218,207,235,177,139,78,152,162,42,188,152,111,155,21,139,153,243,153,169,66,174,160,170,156,131,136,
+  58,62,152,65,189,4,177,249,40,230,135,55,176,112,99,26,160,65,201,154,14,223,84,88,45,102,232,250,2,220,219,174,
+  71,231,178,99,209,179,104,40,252,139,114,77,147,69,116,94,22,149,145,121,162,153,244,138,174,105,64,236,169,64,102,37,
+  115,192,57,132,245,11,87,194,103,186,224,91,80,130,230,149,19,248,93,207,240,248,138,84,52,234,101,21,115,187,191,35,
+  126,224,60,51,192,56,222,156,77,0,75,9,223,113,44,44,206,76,20,26,222,155,9,223,175,152,170,252,137,145,206,59,
+  78,59,224,255,9,139,197,42,111,239,139,173,239,231,149,183,199,184,149,247,197,182,208,183,39,188,175,238,246,80,172,238,
+  118,95,104,207,197,201,143,254,111,179,105,211,166,165,253,240,186,137,235,138,8,197,16,66,113,111,118,54,214,211,107,169,
+  132,75,9,204,7,220,255,25,247,47,32,28,10,33,21,74,10,64,187,233,193,6,80,161,167,173,128,141,131,211,204,235,
+  251,248,62,187,2,70,0,46,82,206,167,10,29,110,63,16,216,124,92,70,0,55,228,150,224,249,226,97,24,205,231,25,
+  132,254,202,239,94,9,143,63,49,67,89,32,28,38,132,30,134,163,237,8,135,119,240,38,87,127,216,15,147,57,246,83,
+  132,80,227,52,111,99,94,120,5,226,26,118,165,121,75,155,135,155,155,62,210,58,6,222,206,43,9,236,211,252,220,60,
+  30,175,146,158,168,37,85,20,18,110,250,35,220,235,46,67,247,162,113,8,205,201,66,104,129,139,33,41,149,80,115,185,
+  74,237,236,185,120,108,245,155,147,98,150,18,80,8,27,154,151,13,239,194,17,252,252,119,17,233,120,201,40,116,152,42,
+  107,102,20,143,78,70,160,235,122,132,205,242,117,84,212,102,117,182,24,155,104,90,146,250,121,174,229,57,223,78,5,252,
+  57,21,157,33,117,88,139,116,174,116,0,252,58,218,243,207,63,159,121,221,119,190,139,108,134,130,163,14,59,12,127,58,
+  252,72,236,100,136,184,155,10,56,147,224,188,207,28,237,51,190,166,218,75,1,168,182,60,53,170,75,253,108,8,237,240,
+  211,14,69,13,132,116,213,148,86,243,125,235,249,249,53,4,80,16,11,230,41,41,105,120,135,143,63,229,254,13,233,46,
+  148,83,1,239,113,101,161,144,239,207,200,200,192,79,31,248,25,188,33,111,121,44,22,93,21,165,251,2,177,85,254,72,
+  239,170,96,100,95,40,98,81,97,76,62,248,14,111,222,151,120,19,63,97,218,94,35,26,65,209,125,45,172,246,139,77,
+  19,69,92,13,245,173,25,8,182,142,64,184,101,60,95,255,37,63,163,174,107,10,235,53,255,168,20,113,53,115,48,45,
+  153,246,27,244,84,92,142,174,149,39,161,123,201,88,244,206,42,69,112,126,54,162,4,49,58,39,19,145,57,25,8,16,
+  184,240,220,28,66,55,12,29,139,142,128,103,237,55,17,170,127,136,133,128,58,212,175,132,69,248,44,69,51,204,255,67,
+  158,7,224,53,139,177,16,102,51,52,45,57,27,154,58,83,104,168,149,247,22,134,167,26,11,248,91,170,32,11,17,158,
+  151,21,94,220,192,244,98,80,242,111,113,236,235,98,19,39,78,204,60,249,216,227,145,77,85,58,134,0,126,88,58,10,
+  251,169,74,53,105,153,248,140,240,188,195,253,147,9,205,66,62,86,8,170,92,206,132,160,244,254,97,103,127,8,109,0,
+  53,74,66,225,167,194,214,175,2,248,6,125,50,95,219,150,145,137,85,121,37,152,72,0,243,249,122,110,78,30,126,113,
+  239,189,211,121,51,166,38,79,241,144,5,163,158,250,64,72,243,116,50,148,140,41,199,214,132,75,170,105,214,212,22,4,
+  172,151,225,168,218,79,53,61,190,148,80,163,39,90,11,16,109,30,9,95,243,113,8,245,124,159,121,36,111,120,213,90,
+  155,102,2,13,251,210,118,21,195,192,69,176,60,239,33,124,224,247,240,108,189,129,64,94,64,208,142,71,23,189,99,241,
+  73,232,92,114,10,122,170,190,133,96,205,61,8,181,170,247,145,242,250,53,204,45,19,199,49,97,174,245,22,252,61,183,
+  17,250,147,17,53,179,35,100,32,214,162,14,216,195,24,126,170,55,147,106,63,175,38,128,119,16,124,230,127,97,134,208,
+  22,11,145,208,76,132,67,21,78,103,236,175,163,141,28,57,50,179,192,149,141,92,194,117,46,97,155,49,122,20,106,210,
+  179,177,149,42,248,9,129,80,69,201,84,238,151,2,150,209,183,17,154,250,36,124,253,27,221,109,248,52,18,66,0,170,
+  155,154,26,223,21,126,170,241,94,225,172,242,63,1,56,57,37,21,239,211,231,115,95,181,43,15,211,74,74,113,14,213,
+  208,197,239,201,201,204,196,187,111,191,251,143,228,233,253,147,245,245,117,230,248,131,109,59,194,225,26,68,34,26,19,73,
+  8,181,130,149,245,44,44,117,126,48,93,1,169,46,221,84,153,238,11,19,74,104,102,43,200,71,164,45,11,126,42,81,
+  164,253,100,4,152,127,197,53,174,208,52,23,84,152,81,246,225,104,153,9,35,149,151,199,35,11,25,162,206,37,40,83,
+  233,83,0,223,20,194,57,151,251,22,80,117,181,242,173,166,58,76,212,116,106,134,3,179,112,13,115,82,171,243,7,8,
+  52,29,149,28,122,150,65,0,181,29,193,194,96,28,225,59,155,97,242,197,4,240,122,30,147,5,133,86,92,14,177,224,
+  136,188,194,239,99,129,208,183,112,88,242,103,58,246,53,179,76,53,63,228,17,148,137,89,217,40,47,42,65,77,134,11,
+  149,204,197,148,167,201,231,18,20,117,33,43,231,123,54,209,247,208,5,153,122,194,236,227,103,229,106,243,107,76,205,160,
+  103,226,32,189,129,143,119,167,164,27,0,87,242,243,170,65,21,196,211,8,160,26,246,223,227,241,86,166,164,96,99,110,
+  14,222,28,94,138,99,121,140,76,122,73,241,16,236,174,171,249,151,0,202,122,123,247,231,251,67,109,7,52,79,141,102,
+  175,139,91,234,26,72,8,213,65,62,192,124,80,195,177,122,53,68,236,70,250,21,230,198,143,181,30,11,75,99,241,90,
+  210,16,106,113,17,196,98,248,90,207,134,191,247,30,130,252,50,226,209,57,166,71,145,129,73,249,97,108,61,149,109,61,
+  172,136,42,196,20,174,174,55,205,25,145,136,198,104,170,146,69,121,164,186,254,205,66,36,252,34,44,223,61,8,182,159,
+  197,156,47,143,138,151,202,239,73,71,172,185,40,145,139,106,14,152,206,83,121,46,84,101,179,44,217,15,16,11,240,28,
+  205,64,220,63,243,152,111,32,26,158,15,127,223,106,7,192,175,163,157,120,252,137,191,203,36,40,165,12,9,31,45,24,
+  130,245,185,133,168,206,116,153,38,3,245,255,84,109,229,76,229,112,105,105,88,205,125,155,9,201,94,1,152,146,97,194,
+  208,189,131,211,80,203,240,113,83,102,14,42,50,114,80,158,87,132,114,170,218,26,30,99,121,86,14,230,242,61,51,153,
+  79,78,30,156,138,207,168,122,211,232,130,79,53,160,229,58,110,97,17,158,42,46,198,88,126,143,0,188,228,155,223,132,
+  55,24,252,183,0,202,250,250,188,37,193,112,219,142,96,104,23,67,200,149,188,137,167,17,66,245,66,34,132,90,83,81,
+  93,0,61,170,29,85,135,248,239,161,175,235,66,170,144,86,180,34,16,102,77,71,23,194,173,249,240,55,143,97,184,56,
+  1,225,158,27,17,242,62,68,37,122,150,199,249,128,174,165,183,151,18,176,196,32,233,68,141,117,98,34,226,190,8,85,
+  48,172,177,161,143,50,175,188,9,189,237,4,185,125,20,194,102,84,139,242,61,57,31,183,107,237,16,194,199,239,237,235,
+  238,91,76,157,0,0,69,136,73,68,65,84,62,31,113,207,229,60,167,137,136,107,16,110,240,65,250,111,120,28,77,252,
+  52,25,145,208,42,248,253,27,28,0,191,142,54,166,120,200,142,116,222,248,99,8,202,115,69,67,25,18,230,27,5,84,
+  15,24,41,149,192,153,150,154,142,69,244,117,105,233,216,158,154,138,237,124,255,6,66,87,89,82,130,85,39,156,132,213,
+  151,92,134,134,95,252,24,245,127,250,21,106,255,242,24,246,79,122,28,117,79,60,130,181,247,223,143,149,215,92,139,183,
+  206,56,19,111,31,127,34,158,29,49,26,79,21,13,193,211,153,89,120,143,199,217,144,155,139,149,5,69,248,73,110,62,
+  84,11,235,34,156,143,63,246,71,213,126,254,127,5,80,214,215,215,151,238,15,54,175,11,68,54,7,34,97,77,193,248,
+  5,213,80,83,227,63,207,155,155,199,240,255,18,113,230,132,241,174,31,211,175,71,188,147,32,154,246,194,195,9,72,1,
+  183,204,207,8,141,213,150,77,69,44,130,167,249,72,248,90,190,1,95,231,21,136,105,165,39,183,86,249,125,152,254,7,
+  186,38,102,230,115,207,47,16,235,188,3,145,214,115,225,105,57,156,121,229,16,4,53,108,172,61,133,97,238,96,30,47,
+  141,170,167,49,127,35,9,158,150,109,99,222,167,70,119,77,175,97,114,63,134,190,126,77,159,255,107,158,231,147,4,253,
+  85,170,248,103,204,255,214,118,120,189,187,139,147,63,205,177,175,139,189,248,226,139,103,15,45,41,245,166,51,52,60,142,
+  62,169,184,20,187,50,179,233,5,166,221,207,110,42,248,34,43,23,139,153,19,86,17,204,213,12,81,23,150,14,195,134,
+  107,46,71,195,59,239,193,187,113,3,195,187,86,230,55,189,136,135,130,176,194,97,222,84,22,243,165,16,66,193,0,98,
+  61,93,8,55,236,71,207,150,205,216,178,96,17,150,252,241,73,188,58,97,60,158,43,44,198,138,162,82,204,30,62,28,
+  215,103,101,33,143,160,103,50,236,157,57,123,198,127,9,64,219,66,161,154,111,5,66,59,17,177,24,58,70,149,167,125,
+  192,243,120,30,177,48,33,84,158,165,14,220,30,141,34,153,136,96,103,98,198,53,51,171,185,201,13,53,252,75,83,5,
+  50,100,100,216,168,138,19,141,193,180,52,222,144,112,5,218,164,108,67,17,106,46,37,104,154,108,119,56,162,77,67,232,
+  57,230,125,106,234,136,182,106,160,181,96,230,49,218,135,16,238,163,18,141,237,114,213,122,186,165,124,130,239,135,244,219,
+  153,171,50,79,13,83,165,205,44,108,31,240,90,45,67,32,184,249,237,228,207,113,236,235,100,151,92,114,201,85,5,249,
+  249,200,96,104,121,1,21,105,46,243,175,218,172,66,236,164,10,78,34,128,147,164,128,84,166,121,170,48,161,106,205,24,
+  61,26,107,175,190,26,237,211,166,241,102,107,227,205,238,131,21,245,35,72,232,130,33,139,219,24,66,22,61,26,71,192,
+  138,35,18,139,155,231,93,190,40,246,119,71,176,179,35,140,221,7,91,209,90,93,131,46,30,163,252,198,31,224,149,51,
+  206,194,49,252,254,108,134,192,35,138,135,98,235,182,173,97,0,135,37,79,241,191,100,122,127,40,88,61,45,28,41,51,
+  93,247,44,181,19,106,226,223,160,166,15,97,104,169,201,143,148,123,105,34,36,207,165,84,70,205,233,122,22,85,42,81,
+  73,19,39,112,102,141,15,2,101,42,78,140,19,48,134,146,90,253,202,158,233,206,172,132,101,63,111,86,37,75,46,243,
+  75,66,167,92,175,101,4,204,56,79,51,148,236,108,3,186,89,7,208,140,122,16,124,84,213,192,79,120,205,168,126,90,
+  16,39,162,238,137,211,160,41,48,3,225,106,7,192,175,163,21,21,21,93,229,114,185,80,192,60,238,214,172,108,134,131,
+  197,168,75,207,193,154,140,44,76,34,144,239,16,10,117,27,155,226,202,193,180,211,79,71,253,228,119,153,239,28,68,48,
+  216,203,27,39,106,60,22,179,12,112,161,176,197,80,42,130,112,48,196,125,124,77,16,70,251,224,179,250,208,236,139,99,
+  79,119,12,155,219,195,88,219,232,197,142,214,30,4,189,84,203,134,6,76,126,238,69,228,241,28,148,135,158,116,252,9,
+  152,55,111,225,127,107,90,6,96,99,170,47,176,109,82,36,172,73,149,231,34,18,254,132,240,169,137,66,29,184,181,40,
+  204,79,17,167,2,133,53,145,150,114,67,179,188,192,121,116,45,30,154,156,86,178,77,35,22,18,107,23,126,233,9,48,
+  213,153,58,214,42,32,169,120,102,249,109,85,234,240,189,26,96,171,153,206,180,236,152,105,106,56,211,28,55,81,227,153,
+  8,59,165,124,42,4,162,90,232,53,242,56,115,214,151,168,214,159,170,251,89,52,16,94,123,141,223,191,203,201,255,190,
+  142,150,54,56,237,170,244,212,52,148,14,74,197,19,84,159,13,204,197,246,164,102,98,25,247,105,164,194,123,249,133,120,
+  171,116,40,86,254,228,94,120,183,108,97,233,237,38,104,30,120,9,150,63,18,161,202,245,25,133,19,104,145,24,183,225,
+  56,194,4,209,207,173,246,121,232,110,190,231,160,63,142,90,2,184,137,0,46,111,116,99,135,59,140,14,143,133,30,119,
+  16,127,255,219,83,200,202,204,68,22,191,243,148,147,78,169,155,49,99,198,255,210,205,24,138,174,127,210,138,172,110,136,
+  170,41,33,52,149,74,248,14,1,84,13,233,99,136,106,61,10,77,174,236,209,18,3,55,114,171,113,152,154,209,238,2,
+  196,186,169,88,102,48,180,86,137,26,71,215,20,32,132,82,149,41,205,84,73,42,101,148,176,89,154,165,192,228,119,154,
+  119,245,24,194,119,148,249,92,172,251,28,30,231,219,60,238,101,60,46,225,54,240,17,118,194,23,165,242,197,66,234,245,
+  194,156,50,242,23,68,35,31,33,26,210,20,248,107,239,76,158,182,99,95,71,203,28,156,121,149,26,224,143,102,168,249,
+  198,208,209,216,193,92,111,15,149,111,6,247,61,87,88,130,183,143,63,9,91,62,156,132,32,115,60,55,243,58,169,156,
+  69,208,252,17,134,151,209,4,120,82,184,158,164,251,248,92,251,108,247,211,187,13,128,17,163,128,2,112,109,131,27,117,
+  238,8,186,3,113,116,185,67,184,249,214,219,204,28,52,234,3,122,210,73,39,189,153,60,181,255,37,235,235,43,203,137,
+  70,215,237,138,69,151,71,250,44,117,128,103,72,170,121,81,53,239,104,224,15,132,131,185,161,231,110,88,12,11,195,10,
+  15,5,139,231,74,170,150,22,170,249,22,21,140,185,155,66,84,169,153,153,177,64,96,82,221,212,151,179,159,202,37,66,
+  77,110,181,38,62,195,205,136,71,80,95,159,240,164,242,69,131,247,209,239,231,57,252,22,241,200,31,25,30,191,66,24,
+  167,83,253,230,223,158,60,93,199,190,174,38,5,204,79,77,199,169,188,249,231,148,12,195,238,204,28,84,185,114,241,76,
+  78,30,102,76,188,1,245,21,155,209,220,17,68,59,115,184,94,130,20,48,208,49,220,100,110,151,128,140,106,71,24,109,
+  224,108,0,131,116,59,4,237,14,197,113,192,19,71,77,87,20,85,205,94,84,236,239,66,67,48,142,54,2,216,220,209,
+  137,243,207,63,223,192,151,205,60,147,167,244,63,218,21,43,24,89,247,195,112,100,57,111,252,153,204,187,148,23,106,26,
+  124,77,166,245,24,149,240,55,176,52,211,121,240,103,6,20,163,86,154,217,206,205,156,173,151,202,216,125,57,183,151,26,
+  143,247,82,217,186,206,231,246,91,116,194,166,231,234,211,169,229,202,21,202,186,53,35,158,62,123,3,143,115,75,210,111,
+  103,216,123,111,50,236,124,24,125,214,223,153,247,105,242,165,169,136,88,75,14,6,131,115,70,39,79,211,177,175,171,165,
+  165,165,93,229,74,79,199,37,233,25,88,147,91,140,117,217,69,152,121,252,137,88,248,151,191,163,103,103,45,14,182,118,
+  97,95,87,16,157,4,70,112,5,13,84,9,229,147,171,146,69,91,133,153,126,1,106,32,77,192,167,215,4,103,23,65,
+  219,235,142,97,91,167,133,202,38,15,214,183,250,209,24,238,67,123,164,15,219,234,155,49,106,228,40,100,240,28,52,29,
+  34,79,233,127,188,47,36,176,50,197,10,45,152,21,141,204,106,215,242,104,102,214,130,160,150,211,38,136,26,65,31,212,
+  156,172,154,161,224,94,3,141,81,46,207,77,116,173,130,69,55,234,72,40,61,223,75,250,68,250,117,201,125,82,59,189,
+  135,202,167,69,123,212,41,220,119,23,98,254,59,141,242,105,202,193,190,200,163,116,126,151,245,26,98,214,199,86,44,50,
+  237,199,255,187,134,148,57,246,255,103,54,120,240,224,171,242,210,50,112,77,126,1,214,230,149,96,201,49,199,161,125,242,
+  167,216,177,175,25,213,45,62,236,32,52,251,125,132,136,0,26,176,148,239,89,209,67,0,254,59,143,197,19,149,48,94,
+  2,216,202,252,79,0,110,108,11,162,188,177,7,91,58,66,104,18,128,132,117,238,252,121,80,37,144,43,53,3,135,143,
+  30,251,191,5,64,219,66,161,69,71,90,214,212,51,227,145,79,107,98,129,247,250,250,130,175,16,192,196,10,72,125,33,
+  66,18,120,4,102,218,16,223,253,4,72,48,222,145,116,65,249,35,186,106,50,229,246,62,251,117,186,239,78,83,201,146,
+  168,104,73,128,23,87,79,151,48,143,45,216,35,90,19,113,114,95,32,60,229,123,201,211,113,204,177,4,128,37,131,6,
+  225,193,226,82,124,122,244,137,56,240,202,27,240,182,182,161,172,190,21,235,154,8,32,195,198,6,111,28,110,85,174,80,
+  209,172,88,148,57,95,56,17,130,18,46,133,154,54,116,202,247,236,199,118,136,218,75,112,155,9,224,110,79,140,202,23,
+  68,5,143,185,167,39,134,230,80,31,186,8,225,95,159,120,2,170,4,114,165,100,96,226,85,87,225,241,199,31,255,63,
+  50,26,32,26,157,250,237,184,53,245,51,179,30,189,214,31,52,144,252,157,32,106,90,16,194,24,212,28,62,15,33,30,
+  248,5,195,72,134,168,190,159,80,37,239,227,246,94,196,253,63,227,62,230,116,254,159,154,215,226,102,80,45,223,27,252,
+  5,129,99,168,41,15,61,134,120,232,239,136,106,44,162,22,206,9,126,188,32,20,88,112,95,242,235,29,115,44,97,57,
+  105,174,206,161,204,189,30,27,123,4,182,62,254,56,172,206,78,236,107,247,163,236,160,199,52,25,84,119,71,209,68,128,
+  188,84,171,68,126,199,176,146,91,193,24,8,125,25,138,246,119,189,102,131,169,208,181,137,10,42,144,43,154,120,220,70,
+  55,234,2,4,144,240,117,132,163,184,236,178,43,144,150,154,138,44,230,161,79,60,254,103,70,102,255,231,134,227,0,211,
+  6,199,163,211,94,166,34,182,245,133,5,162,102,61,167,34,134,254,154,8,25,213,81,90,29,188,13,144,106,187,163,7,
+  168,144,218,6,31,74,184,122,180,168,255,169,70,53,132,255,204,207,72,77,255,10,203,122,137,138,247,22,243,189,15,186,
+  227,214,236,121,125,181,47,167,39,191,214,49,199,190,180,130,148,244,248,240,244,76,188,118,239,189,240,55,213,152,133,54,
+  183,16,188,138,102,191,129,230,64,183,133,54,95,12,110,130,164,38,5,95,52,106,0,84,110,167,182,62,53,188,11,52,
+  187,217,65,91,169,159,0,148,119,48,207,147,130,154,252,175,217,139,213,4,112,63,115,194,54,30,111,95,115,51,78,96,
+  190,153,54,56,5,57,217,217,88,48,115,246,255,81,0,109,243,251,23,14,139,91,51,246,196,195,147,9,97,114,61,14,
+  173,17,168,89,216,194,79,37,128,12,169,219,24,213,209,122,140,251,8,166,69,215,86,203,75,107,77,15,235,105,186,230,
+  136,165,154,106,118,60,235,35,66,56,163,219,23,153,122,98,242,107,28,115,236,159,141,97,223,116,53,126,107,254,149,154,
+  29,219,225,11,244,24,56,214,48,76,92,211,232,195,118,66,211,212,27,65,103,200,98,216,25,132,59,217,222,119,200,169,
+  138,97,238,235,15,159,182,182,250,169,121,162,157,199,171,103,200,185,165,35,66,245,243,98,67,171,31,205,132,178,131,0,
+  110,222,190,21,67,135,14,69,202,224,193,24,198,237,250,245,235,106,254,223,0,80,70,53,76,139,134,230,93,30,143,78,
+  47,239,139,78,41,143,135,223,143,153,25,208,181,100,119,224,77,2,37,39,92,22,243,70,13,99,10,190,136,184,197,173,
+  150,84,35,176,234,254,214,103,125,204,48,245,51,88,193,185,125,65,107,202,35,125,125,11,28,213,115,236,95,91,218,127,
+  252,199,81,153,131,83,58,51,25,126,94,125,249,229,232,12,4,169,126,1,212,123,99,88,222,228,193,10,250,54,66,163,
+  10,152,78,130,165,134,119,133,160,166,105,33,169,122,95,245,254,0,170,173,80,0,182,48,215,211,74,186,155,121,172,85,
+  77,110,108,237,10,162,133,0,42,52,253,98,214,28,100,103,101,33,131,33,232,209,199,28,131,153,115,230,95,157,60,189,
+  255,215,173,47,56,253,130,190,208,103,23,90,161,185,113,13,188,141,133,102,36,26,245,53,161,150,53,5,86,120,134,89,
+  103,94,147,105,89,161,57,102,53,229,120,104,246,159,162,161,249,23,70,67,139,190,157,60,140,99,142,253,107,59,124,212,
+  152,95,169,239,101,86,90,6,126,207,220,171,149,80,180,7,66,168,243,196,176,66,161,98,179,15,123,152,255,53,187,45,
+  120,9,150,26,217,5,151,122,187,132,130,97,132,251,53,69,124,213,77,143,24,110,123,66,113,52,51,252,220,221,29,195,
+  186,214,32,214,82,89,171,123,163,104,33,124,29,193,8,94,122,249,5,184,210,210,76,35,252,184,195,143,216,146,60,181,
+  255,171,12,40,59,37,28,170,236,13,135,215,32,18,93,107,230,26,141,132,151,117,70,130,11,167,89,225,5,191,76,190,
+  205,49,199,254,159,217,200,225,35,124,26,250,147,155,233,194,212,69,171,77,165,72,11,65,219,214,238,71,121,147,31,91,
+  213,252,64,120,218,253,154,16,41,81,241,34,168,164,108,81,230,126,234,5,35,165,83,190,103,43,223,87,93,13,247,202,
+  255,212,3,102,125,91,144,57,160,27,181,204,39,59,9,187,242,201,59,110,191,29,233,233,233,72,101,14,120,219,196,235,
+  254,175,4,80,22,12,174,30,21,10,109,24,215,215,87,54,46,212,183,97,92,160,111,203,136,228,75,142,57,246,223,179,
+  212,193,131,9,96,6,70,14,27,134,173,53,123,25,130,18,54,250,70,2,168,218,74,85,154,212,245,198,208,78,21,19,
+  76,2,78,224,153,218,79,62,239,223,229,76,21,50,118,111,24,109,245,154,128,237,36,212,117,84,60,181,37,74,253,42,
+  155,253,104,240,75,253,4,118,12,231,156,126,150,105,130,80,13,232,59,239,190,255,127,45,128,142,57,246,63,110,84,29,
+  95,22,1,60,245,27,167,160,166,181,211,116,11,107,97,190,183,190,37,136,170,230,0,182,119,70,177,207,77,0,9,139,
+  212,202,244,112,177,226,166,199,139,64,179,59,89,7,195,234,144,45,53,140,155,252,48,200,247,232,125,2,176,149,159,85,
+  23,52,51,2,162,197,143,202,150,0,26,8,116,11,193,220,94,179,7,5,121,249,200,74,73,199,200,130,34,236,221,91,
+  231,0,232,216,215,195,134,150,148,220,202,188,43,154,57,56,13,223,187,250,122,52,122,195,6,192,3,222,152,105,40,47,
+  35,44,170,1,85,239,21,85,152,248,164,112,12,51,237,110,103,242,96,36,1,93,36,18,38,120,86,34,39,140,68,96,
+  89,201,199,132,211,212,128,170,7,12,1,44,107,242,18,196,16,90,2,22,90,3,17,204,152,61,7,233,204,255,178,7,
+  13,198,132,211,207,128,167,179,211,1,208,177,129,111,83,166,76,41,189,230,234,171,251,148,119,101,13,78,197,111,126,253,
+  27,116,6,163,38,7,220,227,142,98,77,163,23,85,84,42,181,1,154,26,208,100,8,106,187,70,186,43,15,140,80,249,
+  130,225,40,65,140,38,213,177,207,212,148,154,97,74,116,55,63,167,6,124,229,127,26,132,187,166,209,99,106,88,219,67,
+  22,85,53,130,71,126,243,219,68,3,124,74,10,110,156,120,61,188,30,175,3,160,99,3,223,90,91,91,150,158,120,194,
+  9,102,240,171,26,192,167,125,62,29,221,12,21,15,134,250,76,222,183,172,201,99,134,12,169,6,180,133,0,117,83,1,
+  251,3,104,187,69,181,211,192,91,3,98,50,252,52,13,244,86,8,1,130,217,74,197,172,15,196,140,146,110,108,11,161,
+  178,193,141,54,95,20,61,220,223,230,235,198,165,223,253,158,81,64,53,65,252,249,177,223,83,73,67,235,147,167,232,152,
+  99,3,215,214,173,95,127,160,184,176,8,89,233,25,40,204,47,196,206,234,26,51,92,72,163,19,212,251,69,185,218,206,
+  46,11,187,59,2,232,96,8,169,17,14,234,128,29,84,152,25,9,82,241,8,93,32,136,136,219,131,72,91,7,124,7,
+  26,17,172,169,133,85,75,223,183,15,177,174,78,196,125,94,184,125,62,52,186,131,216,222,29,193,106,134,159,149,84,192,
+  70,30,79,125,67,27,155,90,240,141,147,79,49,10,232,202,204,196,39,83,166,160,179,175,47,39,121,138,142,57,54,112,
+  237,237,119,222,57,144,169,220,203,149,131,9,227,39,160,181,55,108,106,37,155,168,116,27,90,3,204,1,189,216,218,25,
+  70,157,143,225,34,129,81,155,95,156,208,69,221,154,88,169,22,238,165,75,80,243,212,211,168,186,245,86,108,62,237,52,
+  148,31,113,20,54,158,120,34,86,30,117,2,214,28,127,50,86,156,61,1,27,239,188,3,7,167,124,138,222,61,123,80,
+  221,212,129,173,45,94,148,53,251,76,31,208,86,111,20,91,183,84,99,236,176,145,38,4,30,146,95,140,117,85,149,232,
+  115,0,116,236,235,96,55,222,116,195,129,204,212,12,164,167,164,225,222,59,239,50,125,50,85,211,89,235,141,160,226,64,
+  23,54,19,148,221,157,17,28,236,165,226,9,190,198,131,232,154,57,3,53,119,223,133,181,19,38,96,229,232,49,88,159,
+  149,133,29,233,46,212,166,101,162,158,199,210,246,160,38,225,77,115,97,51,193,158,199,215,223,42,41,197,155,227,207,193,
+  166,191,255,13,7,55,237,64,67,115,47,191,43,98,38,103,154,57,103,1,242,115,242,80,120,216,96,156,56,246,8,28,
+  172,173,159,129,127,49,13,189,99,142,13,56,27,49,108,228,129,172,148,76,51,0,246,249,87,94,55,221,204,90,153,255,
+  237,237,37,128,251,186,176,157,0,118,116,250,225,219,190,13,123,94,123,29,11,47,190,24,171,139,135,162,198,149,143,90,
+  66,87,159,150,129,230,65,41,102,26,122,77,75,175,25,177,205,218,16,131,211,204,114,100,90,180,165,146,62,147,251,223,
+  42,26,138,71,139,74,240,222,21,223,65,119,213,58,132,124,157,232,246,5,241,215,191,254,13,90,139,62,135,159,185,246,
+  123,87,35,24,12,63,154,60,61,199,28,27,216,150,150,154,118,64,203,80,23,228,23,96,222,146,213,232,240,199,140,239,
+  110,15,96,75,125,39,218,182,236,198,182,23,255,129,21,167,159,137,37,121,249,88,159,157,131,58,77,53,159,146,97,64,
+  19,120,90,243,161,133,225,163,86,191,109,162,242,105,191,224,211,50,100,59,12,128,137,101,200,38,103,184,240,126,102,22,
+  94,203,200,194,244,139,47,131,123,203,102,120,66,157,184,234,202,43,161,181,232,213,6,248,231,63,253,25,86,204,114,0,
+  116,108,96,91,52,26,189,180,188,98,45,138,138,138,76,247,175,209,163,70,97,203,206,93,240,248,35,240,4,194,104,105,
+  108,198,206,73,31,227,211,115,206,195,228,236,60,108,202,114,161,38,61,3,251,9,159,214,124,111,33,108,205,132,176,149,
+  143,237,213,143,154,181,159,91,173,9,81,79,224,180,16,167,22,110,209,58,16,90,214,76,211,208,107,90,251,207,249,184,
+  44,175,8,155,110,186,6,129,237,219,113,242,241,39,152,17,240,174,76,151,58,96,119,36,79,209,49,199,6,174,197,98,
+  209,178,73,147,38,33,55,51,7,153,25,153,56,155,160,213,119,185,209,219,219,141,222,221,117,152,252,211,7,240,228,200,
+  209,152,170,153,175,83,82,140,154,105,109,63,193,117,8,56,179,77,132,156,2,175,141,143,181,213,74,185,122,175,189,16,
+  167,0,156,206,237,39,132,242,163,65,135,153,231,187,9,220,130,161,35,177,230,87,191,194,176,172,28,100,81,1,71,149,
+  14,195,129,61,187,29,0,29,27,248,38,0,31,249,221,239,144,203,188,43,155,161,223,143,126,116,27,220,237,173,232,42,
+  95,131,79,46,191,2,79,13,25,134,207,9,198,194,212,52,108,164,114,237,34,64,90,219,93,107,252,9,48,193,39,216,
+  180,228,244,151,48,126,249,154,222,171,165,200,170,24,126,10,56,45,67,166,133,93,180,188,89,37,143,217,144,230,194,150,
+  130,34,252,241,196,147,48,134,175,107,17,150,51,78,60,17,157,205,77,14,128,142,13,124,243,132,34,101,151,93,122,41,
+  210,120,243,23,17,136,153,79,60,129,158,233,51,48,237,212,211,240,70,90,6,62,76,77,199,60,186,224,81,14,183,155,
+  91,45,61,38,0,109,216,190,234,54,144,122,93,121,161,189,16,167,142,161,21,117,5,224,84,134,160,155,169,170,90,170,
+  108,163,43,11,47,12,31,129,34,2,174,85,112,175,185,236,114,4,2,61,14,128,142,13,124,107,109,109,45,27,59,102,
+  44,50,24,250,29,78,80,86,62,244,16,22,28,127,34,230,231,23,50,71,27,132,79,9,138,22,99,17,60,155,249,122,
+  45,183,70,253,146,128,253,43,248,180,213,123,180,32,231,126,190,95,235,6,106,29,120,45,99,61,133,199,211,186,18,211,
+  233,181,153,185,216,73,32,203,75,135,227,129,145,35,81,76,245,211,24,192,71,126,251,75,68,163,33,7,64,199,6,190,
+  173,94,181,170,76,93,191,242,211,51,113,110,122,6,38,143,30,129,242,220,66,172,204,200,54,160,76,33,20,11,8,197,
+  90,194,163,80,82,21,42,118,120,105,67,38,224,164,138,253,65,180,21,176,142,91,173,29,47,248,22,208,165,124,90,89,
+  73,199,220,195,240,83,203,80,207,28,123,20,174,204,47,64,22,149,80,0,126,250,201,39,136,199,172,207,147,167,232,152,
+  99,3,211,250,250,172,51,95,122,241,197,128,110,250,226,65,41,184,221,149,141,197,37,67,176,141,32,204,36,44,111,19,
+  62,45,160,185,132,96,86,242,177,154,18,108,208,108,0,109,21,180,247,11,60,91,33,245,92,75,86,11,64,173,1,175,
+  5,57,63,33,128,90,91,112,85,186,11,123,211,178,176,43,35,7,83,143,59,1,227,11,10,77,7,236,60,134,165,27,
+  55,111,141,246,245,245,141,73,158,166,99,142,13,76,235,236,109,253,214,173,183,220,106,70,158,15,77,73,195,131,132,96,
+  93,86,1,170,9,193,12,2,51,137,64,44,224,107,107,210,210,177,158,219,106,134,139,130,74,174,80,83,240,53,15,78,
+  53,192,217,149,48,77,201,173,246,169,13,80,149,54,85,244,69,60,222,12,130,39,85,21,128,27,153,87,106,185,234,109,
+  121,197,248,228,130,11,112,20,247,169,253,239,152,113,199,192,211,220,246,105,242,20,29,115,108,224,218,220,133,75,191,117,
+  214,89,19,144,158,146,138,35,168,120,175,14,25,110,150,147,222,204,220,76,0,74,173,230,38,115,55,169,216,46,2,41,
+  176,108,248,236,124,175,191,219,251,164,136,106,130,16,128,250,236,18,126,118,10,97,85,5,140,142,189,141,143,235,82,93,
+  216,58,100,24,94,63,247,92,20,18,72,45,194,121,211,141,55,33,234,247,59,0,58,54,240,237,247,15,255,254,91,135,
+  143,29,139,76,42,220,201,132,229,179,162,33,168,118,21,162,140,225,161,29,42,170,217,96,41,95,83,5,204,94,130,106,
+  135,156,202,253,236,199,253,189,255,62,85,216,168,6,84,21,48,243,169,160,170,208,17,128,115,248,124,23,97,171,205,200,
+  197,150,195,71,227,214,227,142,69,54,129,204,32,132,127,82,15,24,203,58,55,121,138,142,57,54,112,109,249,242,101,193,
+  146,194,18,222,252,41,248,38,21,106,73,81,33,106,211,92,204,207,50,240,49,225,249,132,240,216,53,160,234,201,178,155,
+  110,131,215,202,156,209,6,206,238,249,162,238,104,114,85,210,236,227,123,5,160,192,93,193,99,72,73,39,17,190,15,233,
+  107,179,92,216,77,224,182,107,29,248,211,78,199,149,220,170,23,78,110,78,14,62,156,49,123,67,242,244,28,115,108,96,
+  219,11,47,60,31,209,228,71,249,132,228,250,76,23,214,22,148,48,204,76,195,18,2,169,92,237,83,190,54,159,170,183,
+  150,175,11,64,213,128,42,4,21,120,234,9,211,48,136,57,161,64,52,221,210,184,85,151,52,1,200,247,42,252,220,205,
+  156,46,209,255,115,240,161,252,79,205,16,235,169,184,141,124,207,142,188,92,204,189,240,66,156,68,248,52,6,112,228,136,
+  145,184,231,142,123,46,72,158,158,99,142,13,92,11,90,222,243,239,184,237,182,104,6,97,43,37,20,143,20,151,98,243,
+  144,18,212,168,226,133,112,40,84,252,52,45,3,243,8,144,26,209,5,160,84,205,14,49,19,21,47,169,38,215,211,190,
+  198,193,132,138,110,64,228,115,51,2,130,240,86,242,120,11,9,160,66,218,119,121,76,1,184,69,185,36,161,221,64,0,
+  167,95,118,17,134,103,100,33,131,138,120,218,41,167,98,222,172,89,14,128,142,13,124,107,113,187,63,56,243,244,51,205,
+  244,239,71,29,118,24,158,31,59,14,155,114,243,177,147,106,164,74,18,181,213,125,202,156,108,33,31,171,18,165,154,174,
+  208,82,112,217,97,168,182,253,221,128,72,0,245,62,117,65,211,103,164,128,11,168,164,211,8,158,160,158,37,48,25,226,
+  238,230,190,21,67,135,225,149,11,191,141,124,22,2,42,8,78,56,252,136,170,157,59,119,166,37,79,209,49,199,6,166,
+  245,245,245,149,108,218,188,185,166,168,176,208,132,126,103,18,134,201,195,71,98,123,134,11,91,50,50,240,25,97,249,136,
+  160,104,180,130,154,33,4,96,13,93,106,103,106,65,169,86,10,53,109,53,148,219,205,16,13,4,80,239,171,165,11,192,
+  114,2,184,144,219,207,121,204,201,84,196,101,60,222,94,134,185,187,9,250,138,99,142,193,79,207,61,23,154,137,219,69,
+  216,39,94,121,229,154,228,41,58,230,216,192,53,79,216,115,212,212,105,147,77,247,51,85,192,92,202,237,124,134,160,187,
+  50,179,177,62,35,211,84,150,72,1,213,93,108,5,149,76,93,201,106,153,223,237,87,136,169,241,127,131,191,108,15,108,
+  36,60,118,183,52,169,160,61,44,73,3,112,237,17,16,170,200,81,141,234,7,220,86,16,194,3,4,184,38,205,133,170,
+  239,126,7,19,79,63,195,116,192,206,86,191,211,247,222,115,0,116,108,224,155,199,227,57,234,137,63,61,14,77,65,95,
+  66,48,238,200,114,153,113,121,213,174,92,172,100,126,166,124,77,174,230,2,187,15,104,29,223,171,142,213,141,4,76,185,
+  160,93,25,35,151,26,182,211,85,19,42,37,60,72,64,5,160,148,83,33,236,52,2,246,54,63,255,54,63,47,192,15,
+  164,102,96,123,126,62,54,252,242,87,24,86,84,100,194,224,162,252,66,108,218,186,193,1,208,177,129,111,171,42,43,143,
+  186,230,154,107,145,75,48,134,50,255,251,99,126,1,182,102,231,160,58,211,133,249,132,97,50,195,65,1,168,10,24,181,
+  225,85,167,187,176,143,74,215,64,223,47,37,76,2,185,151,239,107,160,239,225,113,106,210,50,177,37,61,19,91,185,93,
+  159,155,135,245,153,89,168,164,162,46,37,208,234,255,249,33,143,171,166,13,141,128,216,199,99,172,31,82,138,85,191,248,
+  5,138,121,124,117,133,155,48,126,60,66,33,191,3,160,99,3,223,158,120,226,137,163,206,60,235,76,20,19,140,35,254,
+  227,63,240,92,241,16,108,75,207,192,102,141,68,39,16,239,15,30,100,134,13,205,231,227,10,250,46,2,166,145,237,202,
+  239,228,53,84,177,141,57,133,40,27,58,28,229,227,142,194,150,203,46,197,230,137,215,98,231,237,55,96,211,196,137,88,
+  124,198,217,88,48,122,28,222,47,44,193,251,105,233,248,152,254,14,225,157,201,239,216,155,234,50,16,175,59,233,100,252,
+  238,130,243,145,79,69,21,128,119,252,232,71,154,3,116,94,242,20,29,115,108,224,218,5,23,92,112,212,240,97,195,77,
+  248,121,26,1,155,52,118,28,161,202,194,38,66,167,222,42,31,17,8,85,196,44,166,98,169,22,179,38,37,29,187,169,
+  130,91,50,243,176,33,55,31,235,191,117,1,106,31,250,13,218,102,190,143,72,245,14,196,90,154,17,243,185,17,235,237,
+  65,92,222,212,136,222,170,50,236,122,243,31,88,248,195,155,241,250,169,167,227,149,156,124,124,146,91,136,29,220,214,164,
+  102,162,226,220,51,112,243,217,167,17,192,20,184,248,189,127,251,219,223,176,96,129,179,112,165,99,95,3,155,58,117,234,
+  129,156,140,108,134,159,131,240,125,170,217,146,146,97,102,234,192,10,238,251,140,121,156,194,79,85,192,168,249,160,156,170,
+  184,33,39,23,171,8,105,217,213,215,160,107,234,20,88,4,44,230,238,69,204,239,135,21,12,65,235,195,155,149,143,52,
+  251,181,102,199,142,70,17,10,240,177,63,4,95,107,59,218,119,212,98,207,103,31,99,230,205,183,99,233,200,49,168,202,
+  45,193,198,239,94,142,147,198,140,53,21,48,133,132,114,254,188,121,168,173,173,117,0,116,108,224,219,207,238,255,105,167,
+  166,32,204,163,186,253,156,138,86,86,80,204,28,46,3,171,24,42,126,200,125,31,14,78,197,52,230,120,243,8,224,39,
+  121,121,168,184,225,70,180,124,49,11,209,198,122,68,163,65,88,126,31,162,145,48,130,201,165,199,228,102,250,249,164,155,
+  231,161,24,90,253,17,212,116,133,176,171,35,136,218,230,86,248,182,239,198,246,191,63,139,143,14,63,10,139,126,114,23,
+  70,20,23,155,73,120,71,149,14,199,142,237,219,208,215,231,0,232,216,215,192,38,156,61,161,83,10,152,159,150,134,63,
+  150,14,67,85,126,1,234,50,179,177,40,61,11,31,166,51,103,83,95,208,162,18,124,114,250,153,104,122,251,13,19,98,
+  198,131,1,68,44,11,241,80,0,86,56,108,214,4,12,4,163,135,86,189,237,239,102,185,234,80,20,141,124,189,186,43,
+  140,205,45,126,172,218,219,130,234,54,63,252,237,237,216,240,230,155,248,226,153,103,81,144,149,135,116,42,224,137,71,29,
+  139,158,158,110,7,64,199,6,190,41,204,43,45,41,237,204,38,108,35,169,112,47,141,40,69,117,78,54,182,229,100,97,
+  6,115,191,23,168,134,47,14,27,133,69,15,253,26,61,117,21,176,34,221,8,133,45,4,195,49,248,35,177,228,122,16,
+  125,4,48,6,143,86,63,250,10,124,114,45,202,18,8,7,113,208,31,197,206,158,40,214,183,133,176,178,209,131,237,189,
+  97,180,251,124,8,186,219,240,228,147,127,65,118,90,22,50,82,210,240,195,27,111,132,207,231,249,19,128,195,146,167,233,
+  152,99,3,207,120,131,187,54,172,175,66,49,213,77,67,144,206,77,77,197,204,98,2,152,229,194,198,156,60,188,154,95,
+  132,87,47,185,2,187,166,77,131,175,169,25,190,96,132,185,29,149,142,161,102,152,224,105,169,49,173,241,23,34,136,122,
+  108,175,126,107,187,158,107,105,106,159,21,71,91,32,136,125,190,24,54,119,132,177,190,53,136,117,141,94,52,250,99,232,
+  100,104,234,11,248,113,253,196,137,208,74,188,2,240,47,132,49,18,10,221,153,60,77,199,28,27,152,6,52,187,166,126,
+  58,25,249,174,92,228,49,247,250,126,134,11,203,10,74,177,49,55,15,179,78,60,14,85,127,124,4,155,170,27,176,187,
+  173,7,237,84,43,79,64,176,80,241,8,84,44,78,16,109,216,254,141,242,105,125,64,109,149,7,54,16,180,93,94,203,
+  44,194,89,222,18,64,85,147,219,44,246,217,69,111,237,14,224,200,113,71,34,117,240,96,179,26,211,218,181,101,8,133,
+  34,14,128,142,13,108,219,184,113,163,235,15,143,252,30,185,105,25,102,6,178,187,9,222,178,33,67,177,242,27,167,161,
+  245,179,105,168,223,189,15,155,247,247,160,174,51,132,22,119,196,172,15,209,75,23,80,38,175,75,130,246,175,92,97,167,
+  66,83,61,246,17,208,253,4,173,218,29,197,214,206,136,89,220,115,107,71,4,205,254,196,50,100,155,183,110,67,78,118,
+  182,201,255,70,143,28,133,131,205,13,136,197,98,14,128,142,13,108,123,235,173,183,92,63,184,246,90,83,245,63,108,208,
+  32,60,52,98,20,222,63,239,2,116,87,172,70,79,47,85,106,95,55,54,183,5,113,160,43,132,102,3,96,20,61,12,
+  61,15,213,108,38,253,75,232,190,132,207,222,39,239,98,40,218,204,112,115,111,119,212,44,234,89,118,208,195,92,208,50,
+  171,237,182,49,151,124,235,131,73,102,21,38,157,199,248,179,206,134,215,211,139,88,200,239,0,232,216,192,182,43,175,188,
+  210,117,234,55,78,54,43,32,141,101,8,250,216,37,151,162,167,172,76,203,64,99,87,151,133,170,102,191,89,175,189,150,
+  202,181,191,55,106,0,84,27,159,13,150,13,159,189,38,252,151,0,106,95,34,252,12,243,53,55,195,86,41,168,13,224,
+  186,3,93,216,227,147,2,198,208,193,237,47,126,254,11,184,210,51,77,14,120,243,141,63,68,192,231,119,20,208,177,129,
+  111,195,134,13,115,229,100,231,152,233,31,70,12,25,130,134,21,171,225,241,132,209,170,202,146,3,61,40,111,242,153,156,
+  77,235,183,183,49,92,244,49,252,12,71,162,8,89,81,3,150,159,207,213,252,160,112,212,206,9,109,24,109,23,164,157,
+  193,24,154,2,81,179,4,117,25,143,89,214,236,65,147,47,106,114,192,214,46,47,190,251,157,43,77,229,75,90,74,42,
+  158,252,243,159,17,181,34,62,32,250,173,228,105,58,230,216,192,179,190,190,190,244,191,253,245,175,43,179,82,51,77,223,
+  203,139,46,188,8,126,42,95,11,193,104,98,94,86,213,208,131,178,70,159,89,187,253,128,135,160,112,159,114,185,48,149,
+  77,192,9,64,85,190,168,249,161,63,112,114,91,9,85,9,163,165,171,59,9,218,62,79,12,27,8,96,69,147,155,91,
+  31,154,20,126,134,226,104,104,108,194,73,39,157,108,150,33,203,102,65,48,125,218,52,196,227,209,186,228,105,58,230,216,
+  192,180,112,56,112,213,79,239,190,199,140,60,23,128,119,222,117,15,220,33,134,153,12,23,15,248,226,4,197,111,20,107,
+  71,71,24,13,222,196,234,184,130,234,223,85,190,120,251,61,54,112,170,73,130,174,240,179,157,234,185,167,135,170,218,22,
+  64,69,99,15,54,181,121,13,128,6,244,77,91,81,90,90,106,106,64,181,38,253,246,29,219,25,126,90,191,76,158,166,
+  99,142,13,76,171,169,217,113,213,217,103,158,105,0,204,204,200,192,155,111,191,133,30,127,212,172,3,191,151,42,88,158,
+  4,176,58,9,96,15,213,170,63,112,242,68,77,103,114,127,178,41,66,170,103,43,160,220,35,208,8,96,109,47,21,176,
+  53,136,242,131,61,124,204,252,47,210,135,22,190,246,217,231,159,35,59,43,27,153,12,63,143,57,250,24,120,188,30,244,
+  245,249,134,36,79,211,49,199,6,166,189,243,230,59,87,141,27,53,198,76,65,81,88,80,128,5,203,214,160,205,19,65,
+  27,161,216,211,107,153,252,111,75,71,4,181,84,174,70,229,127,253,160,234,239,170,108,49,121,95,18,64,121,127,149,236,
+  38,208,251,8,240,206,174,232,33,0,235,168,138,2,176,151,80,255,238,247,143,153,21,144,180,26,211,141,19,175,39,192,
+  161,57,0,156,121,96,28,27,216,86,85,190,38,54,164,168,216,0,56,202,172,130,187,27,45,204,213,212,52,176,165,217,
+  139,242,70,47,67,197,16,234,9,96,11,149,209,6,170,191,186,201,255,85,72,218,191,34,166,139,199,171,39,128,219,8,
+  243,186,214,0,1,236,70,131,190,135,96,182,251,67,204,61,47,68,250,224,52,100,80,1,95,122,254,5,68,163,145,87,
+  146,167,232,152,99,3,215,62,120,239,221,120,94,70,166,169,1,61,243,172,9,216,223,225,67,75,136,225,34,129,81,103,
+  105,133,160,59,58,45,3,96,15,21,203,159,12,65,251,119,182,254,106,184,153,168,21,77,84,210,232,125,189,84,69,65,
+  189,151,0,110,167,2,150,31,36,216,7,61,38,36,109,230,123,235,26,155,48,118,204,24,211,254,87,192,48,116,249,138,
+  149,97,192,63,52,121,138,142,57,54,112,237,231,63,123,32,158,153,146,98,38,98,186,251,174,123,208,22,136,160,149,0,
+  238,35,28,101,13,189,168,106,9,96,7,161,105,246,68,9,32,225,11,245,235,122,150,116,193,39,55,149,46,246,126,139,
+  121,161,105,47,100,248,73,152,213,219,165,166,59,102,242,201,245,251,123,176,181,61,100,42,95,84,51,186,114,77,185,233,
+  1,163,57,96,142,28,61,26,155,54,109,120,59,121,122,142,57,54,176,237,210,243,206,139,11,62,213,128,126,244,225,71,
+  232,84,72,72,223,213,35,165,82,83,65,8,53,4,176,205,109,193,31,84,103,235,47,33,147,26,42,204,236,223,221,204,
+  86,72,185,221,7,180,155,10,216,224,139,99,55,1,92,223,18,68,5,21,176,142,249,165,84,177,139,199,252,224,163,143,
+  225,162,2,187,168,128,103,157,126,58,166,124,248,225,201,201,211,115,204,177,129,107,155,183,110,253,245,176,210,161,125,82,
+  30,45,130,185,98,221,118,116,38,195,197,45,29,33,130,226,49,138,85,75,112,212,89,58,20,138,28,2,176,127,115,131,
+  26,225,195,253,114,64,41,97,40,28,65,80,35,37,248,92,0,170,13,81,21,48,155,218,194,88,207,227,30,240,81,85,
+  169,180,157,129,16,126,253,235,223,154,2,32,141,0,158,118,242,41,91,104,249,201,83,116,204,177,129,105,125,125,125,57,
+  211,191,152,94,169,220,79,55,255,113,199,30,139,253,13,141,204,255,226,38,252,92,223,26,64,69,179,31,27,25,42,238,
+  245,37,0,212,8,8,77,43,33,181,243,36,97,75,132,159,4,78,61,99,204,144,36,110,109,231,123,253,65,11,173,129,
+  40,246,123,98,38,255,147,162,86,49,180,109,164,202,182,50,52,109,119,119,227,218,171,175,49,231,224,74,205,192,13,19,
+  111,112,38,96,114,108,224,91,192,10,156,254,212,211,127,135,75,55,126,74,6,174,184,248,82,52,247,248,77,179,64,189,
+  242,191,54,63,214,49,92,84,159,205,253,84,47,229,106,222,112,162,23,76,15,93,0,6,67,97,134,153,17,196,162,1,
+  196,187,187,16,239,234,68,220,227,70,188,177,17,209,253,245,136,118,181,32,214,221,13,143,215,141,122,66,188,174,217,131,
+  138,38,15,214,19,64,59,255,219,223,214,67,213,59,25,121,131,168,194,60,143,123,238,185,231,216,228,41,58,230,216,192,
+  181,186,186,186,211,111,190,249,22,83,243,152,70,8,127,250,192,3,232,240,70,76,163,248,94,170,85,165,194,79,194,183,
+  77,93,208,8,138,26,224,125,145,68,215,179,112,56,0,43,34,232,218,224,169,172,64,253,27,111,161,238,225,71,177,238,
+  182,75,177,252,236,241,88,198,60,174,226,236,179,176,225,219,231,161,252,250,235,177,249,55,15,99,223,219,239,161,101,195,
+  122,52,212,30,192,254,206,30,180,105,16,46,143,187,102,103,45,74,10,139,76,3,252,144,194,98,240,212,6,37,206,208,
+  49,199,6,176,45,91,60,255,138,9,167,159,101,106,30,211,211,210,240,230,91,239,194,237,143,162,53,20,69,93,111,196,
+  52,21,40,92,220,229,177,176,151,161,103,71,48,70,165,139,32,222,211,141,240,158,221,104,124,241,37,44,63,247,124,44,
+  31,123,4,214,21,15,197,246,172,28,212,184,242,209,144,230,50,83,212,55,15,74,65,29,21,109,125,122,6,22,22,15,
+  193,39,37,67,241,250,49,39,98,42,161,111,92,178,20,161,174,118,120,253,110,76,122,247,93,211,0,175,80,88,147,240,
+  62,254,248,227,14,128,142,13,124,171,223,85,237,59,138,240,164,166,166,194,229,114,97,217,202,53,104,243,134,141,2,214,
+  119,6,25,46,250,77,248,89,227,214,104,5,134,154,86,47,172,93,59,80,251,135,63,96,205,89,103,99,115,222,16,236,
+  116,229,97,79,122,54,234,51,115,113,128,192,29,76,73,172,13,161,181,32,52,37,189,89,235,143,202,182,156,62,35,61,
+  19,31,164,101,224,69,87,54,222,23,180,15,62,136,222,109,235,240,251,187,238,48,240,41,7,188,247,238,123,28,0,29,
+  27,248,22,143,70,254,186,124,217,114,20,16,6,41,224,240,225,35,176,167,185,21,173,4,173,141,185,217,246,102,47,214,
+  19,192,109,173,1,116,116,249,225,111,106,70,221,171,175,97,245,217,103,160,210,149,131,250,84,23,97,203,32,104,41,102,
+  193,21,173,122,164,105,233,181,6,160,158,107,77,136,22,62,222,199,240,118,103,90,58,214,240,59,102,107,38,108,190,103,
+  210,160,65,216,68,165,220,158,238,66,197,249,231,225,156,209,99,224,98,33,144,77,165,124,230,217,103,119,59,0,58,54,
+  224,141,0,62,243,242,11,207,155,106,127,141,191,187,240,194,11,209,225,183,76,79,23,53,65,108,220,215,109,20,240,64,
+  155,7,1,130,186,244,250,155,176,122,232,72,84,83,197,26,83,210,141,186,9,52,185,189,8,139,182,130,206,172,7,56,
+  40,53,177,88,11,149,111,19,191,67,43,41,105,77,121,173,130,52,57,53,13,187,25,162,214,103,100,97,246,136,209,56,
+  147,96,102,14,78,69,81,81,17,46,187,236,178,239,39,79,209,49,199,6,174,197,163,190,103,174,191,110,162,9,251,82,
+  232,143,254,254,15,102,184,80,171,63,142,131,158,40,182,214,82,241,106,27,176,227,205,119,177,228,152,19,176,58,191,136,
+  170,167,101,166,83,14,173,118,164,165,199,164,122,90,13,201,94,5,41,177,42,82,98,105,106,133,163,187,9,158,150,48,
+  91,198,173,150,162,214,82,100,95,16,192,61,4,121,87,102,22,166,23,13,193,105,124,45,155,224,142,30,53,10,127,126,
+  236,49,7,64,199,6,190,181,180,180,60,115,226,17,227,76,207,19,87,102,38,102,206,156,133,78,191,186,160,197,81,215,
+  30,64,235,234,213,88,121,199,143,241,209,144,161,168,205,82,158,231,50,202,167,144,179,85,97,38,61,1,219,151,203,145,
+  217,161,167,32,77,0,152,110,22,239,180,151,34,211,74,72,2,112,9,21,111,47,67,206,77,89,249,120,101,228,104,140,
+  228,235,90,143,190,168,160,184,122,210,164,73,89,201,83,116,204,177,129,107,159,76,153,250,204,168,162,98,3,224,200,210,
+  97,216,190,105,43,188,190,8,194,225,48,234,230,207,199,7,23,93,140,247,50,179,81,201,188,76,203,143,153,213,111,5,
+  29,161,50,139,112,82,13,5,153,246,219,203,83,75,21,155,24,118,154,215,153,31,106,45,64,173,158,84,37,0,25,138,
+  106,93,137,201,244,42,30,83,225,233,166,156,66,252,161,176,20,249,124,175,66,225,209,35,71,255,44,121,122,142,57,54,
+  112,173,207,231,27,50,109,242,148,176,43,35,211,204,189,114,218,105,167,161,169,169,13,161,150,118,236,95,184,12,207,127,
+  227,20,188,75,69,90,196,208,112,3,95,175,103,136,218,72,72,164,112,130,76,91,173,247,110,171,158,114,62,123,191,220,
+  86,70,133,168,187,232,21,244,185,84,192,73,60,214,20,62,94,151,225,66,45,143,185,162,176,24,63,201,206,69,46,161,
+  214,121,240,212,114,18,103,232,152,99,3,216,218,219,247,15,125,242,143,127,64,46,195,74,85,126,92,113,249,21,240,117,
+  180,227,192,63,94,195,130,99,143,195,103,4,100,58,85,170,156,170,180,131,174,149,109,165,116,130,203,212,110,210,165,96,
+  130,76,225,102,179,9,77,147,208,233,181,228,227,122,126,110,43,125,37,225,251,156,42,250,33,213,111,6,159,111,99,8,
+  90,195,239,158,53,116,8,46,99,33,144,77,53,205,77,207,82,37,140,3,160,99,3,223,166,77,155,54,244,198,235,38,
+  26,213,209,58,240,207,252,226,23,104,124,233,101,172,28,57,18,235,51,50,76,101,201,116,2,179,54,45,13,123,250,229,
+  122,9,224,190,124,108,3,105,32,228,86,224,169,57,66,97,168,214,122,175,165,130,106,9,235,213,84,211,169,116,173,45,
+  191,128,251,170,9,96,117,102,14,62,29,62,12,231,113,127,54,213,117,220,152,35,112,206,57,231,56,0,58,54,240,237,
+  215,63,250,209,208,179,78,57,197,172,1,81,122,216,97,248,224,236,9,88,60,246,8,108,205,45,48,203,70,107,33,78,
+  65,88,78,120,180,212,180,96,51,249,93,210,15,133,154,4,205,134,79,251,5,163,194,206,70,42,218,1,194,109,3,184,
+  132,91,229,126,2,112,25,129,223,151,150,137,173,12,61,223,41,44,193,209,220,175,185,104,206,63,231,60,220,113,199,29,
+  14,128,142,13,124,59,254,248,227,135,106,246,177,12,170,212,25,4,110,202,168,195,81,235,202,193,94,2,41,88,166,16,
+  138,197,12,27,215,19,30,211,184,110,3,215,111,107,231,124,102,75,149,52,128,38,195,82,61,150,18,238,164,87,241,56,
+  11,121,76,53,190,127,68,0,43,168,120,117,169,46,108,205,41,198,239,243,11,49,146,5,128,139,33,236,79,238,186,27,
+  179,102,205,114,0,116,108,224,219,91,111,189,181,197,149,233,162,250,13,194,15,179,115,176,180,112,8,26,152,131,237,75,
+  203,192,82,194,242,57,247,171,221,78,249,155,186,151,169,93,207,6,206,52,178,39,93,251,244,60,161,130,255,28,170,10,
+  220,29,244,114,130,167,202,28,41,160,154,32,214,51,231,171,75,205,194,218,188,98,220,150,158,137,124,190,39,135,223,253,
+  242,203,175,160,179,179,211,1,208,177,129,111,247,223,113,71,131,70,30,140,34,16,63,47,40,193,10,42,145,22,225,220,
+  230,114,153,28,77,0,46,33,56,187,248,88,170,214,66,183,85,238,171,10,216,38,64,169,164,173,73,245,179,115,196,189,
+  4,107,59,21,117,21,143,177,128,143,21,126,126,206,99,110,39,248,53,25,217,152,95,58,28,23,166,103,32,139,225,103,
+  62,195,209,89,51,231,16,192,62,7,64,199,6,190,29,123,204,177,13,154,1,237,8,2,241,212,208,18,108,36,20,219,
+  115,115,80,158,157,133,89,4,102,22,225,20,56,234,197,210,60,56,45,169,118,9,133,251,167,74,24,129,201,109,127,85,
+  180,107,64,247,18,204,141,4,111,57,115,200,185,41,105,70,1,231,242,120,213,153,249,168,201,204,194,71,195,199,226,100,
+  126,143,242,191,97,133,69,168,169,222,9,13,16,78,158,162,99,142,13,92,203,115,229,52,164,81,181,142,36,0,175,140,
+  28,134,77,4,112,55,67,195,53,84,44,213,86,206,166,87,16,206,61,4,70,141,234,130,206,6,80,110,3,39,21,84,
+  248,41,133,180,193,20,128,242,221,4,75,225,231,98,30,99,38,183,106,132,95,76,32,107,211,178,176,45,39,31,127,29,
+  58,18,227,184,79,179,96,159,113,234,233,112,187,123,29,0,29,27,248,246,187,223,253,238,230,146,130,34,19,250,157,69,
+  21,156,86,50,20,181,233,46,51,186,97,37,1,148,82,205,39,40,170,189,84,59,158,13,157,96,179,31,247,223,167,174,
+  105,166,135,76,114,159,218,1,213,110,104,242,191,180,52,3,224,23,60,166,142,187,150,96,215,166,102,98,93,110,62,126,
+  53,116,56,198,154,10,152,52,220,118,235,173,154,230,98,43,128,140,228,105,58,230,216,192,180,203,47,185,252,254,252,204,
+  28,20,18,136,235,51,51,177,172,176,132,170,148,142,234,12,23,230,19,22,229,127,243,8,197,78,230,103,106,82,176,67,
+  75,193,101,63,254,231,125,132,143,10,104,55,192,203,235,83,210,13,128,107,168,124,243,233,58,166,106,86,43,211,50,9,
+  96,26,214,48,228,188,149,121,159,154,64,178,82,50,241,218,43,47,107,13,136,71,146,167,232,152,99,3,215,30,125,228,
+  17,100,16,144,98,170,214,131,249,5,88,231,114,225,0,213,112,91,70,182,9,21,231,209,87,209,119,49,68,221,79,55,
+  149,48,132,74,97,231,161,208,51,89,225,34,55,149,49,124,110,224,227,251,165,126,130,81,77,16,43,9,244,28,30,107,
+  26,247,207,36,128,26,150,180,155,160,207,46,30,138,243,249,184,136,160,231,17,196,178,242,114,159,101,89,227,147,167,232,
+  152,99,3,215,110,188,241,70,230,93,41,24,65,32,158,164,250,237,34,16,2,109,121,122,38,62,39,52,75,248,154,70,
+  47,104,20,67,29,1,82,37,76,211,224,244,67,234,166,92,175,129,224,104,100,196,193,228,136,7,181,249,9,98,189,127,
+  31,31,107,16,238,70,130,183,130,62,149,207,167,166,166,99,17,247,213,102,100,97,87,102,54,62,45,25,129,147,249,90,
+  14,63,123,212,225,71,162,225,64,67,123,242,244,28,115,108,96,219,216,209,99,76,197,199,137,4,99,210,136,17,84,164,
+  28,236,97,46,184,140,0,126,202,125,234,9,163,241,123,2,201,132,149,84,202,253,132,167,158,159,217,147,158,142,221,124,
+  95,45,223,191,141,97,236,102,194,187,137,249,220,70,122,25,67,203,181,220,238,204,205,194,246,148,84,134,159,131,49,67,
+  149,58,105,25,120,143,207,231,115,123,48,187,0,59,179,139,240,143,162,18,28,193,240,51,155,96,159,119,206,121,232,238,
+  236,114,0,116,236,235,97,106,128,215,234,67,223,38,76,243,8,99,61,243,178,157,25,153,88,64,176,166,82,9,213,16,
+  47,0,53,148,72,109,124,106,223,83,222,182,43,35,3,235,115,115,176,97,228,24,172,59,255,219,40,255,225,173,216,249,
+  196,239,177,239,181,127,96,223,235,175,99,223,63,94,196,166,63,63,130,242,31,220,140,101,19,206,197,130,145,163,49,165,
+  168,20,239,243,216,31,240,152,107,93,249,230,187,182,17,192,223,36,123,192,100,101,102,225,166,155,126,128,237,123,246,28,
+  145,60,61,199,28,27,216,166,217,199,52,252,231,14,87,54,22,229,23,161,129,97,228,86,66,57,141,42,55,141,97,233,
+  106,134,134,2,176,150,64,30,76,205,192,94,42,228,6,230,138,107,47,184,0,245,175,60,7,111,85,37,66,205,77,8,
+  247,244,34,230,161,251,188,136,134,253,136,133,131,136,122,123,17,109,111,71,176,182,22,29,75,150,163,226,225,71,240,222,
+  153,227,241,54,243,204,249,84,189,154,172,44,148,49,231,187,133,158,67,165,213,104,252,191,253,229,175,8,133,66,99,147,
+  167,231,152,99,3,215,14,31,125,248,205,186,233,135,16,176,223,228,22,96,83,118,54,234,8,227,22,134,136,106,42,152,
+  78,248,214,210,55,243,249,198,236,60,172,26,50,20,27,174,190,6,109,147,222,134,85,95,143,152,215,141,72,212,103,22,
+  92,137,68,44,132,2,97,132,163,137,149,143,186,173,56,252,102,198,108,11,29,129,32,186,221,30,52,55,180,97,223,214,
+  189,56,56,243,13,44,255,225,77,88,62,114,36,62,30,50,4,223,164,242,101,241,59,180,20,245,226,197,139,65,115,0,
+  116,108,96,219,91,111,189,229,26,49,108,216,102,133,159,163,9,217,243,5,69,216,145,159,135,198,52,23,214,49,28,85,
+  101,201,124,134,154,234,3,186,172,176,8,107,206,158,128,142,15,222,67,176,117,63,226,86,4,161,200,151,203,146,105,201,
+  49,173,5,17,137,68,16,9,243,181,104,136,240,89,244,24,58,9,226,126,127,20,59,221,17,84,53,123,177,182,174,3,
+  7,59,123,17,161,106,54,191,245,54,94,28,127,14,142,227,119,41,15,205,207,43,192,182,157,213,51,8,160,51,11,154,
+  99,3,219,182,111,219,178,240,240,49,137,233,255,78,229,205,63,185,104,8,234,93,57,102,226,164,53,4,239,179,180,12,
+  204,161,42,206,202,201,197,166,59,238,132,103,211,38,196,3,237,240,19,62,111,56,118,104,29,8,173,251,167,173,13,162,
+  20,208,178,194,84,197,176,89,37,201,77,117,220,31,176,176,211,99,161,162,197,143,178,3,61,216,211,99,161,151,251,130,
+  189,62,188,254,226,11,200,230,247,107,34,224,179,206,60,19,157,33,107,74,242,20,29,115,108,224,218,154,21,101,86,97,
+  97,33,178,9,224,119,9,219,172,162,97,168,163,250,237,100,254,167,6,248,143,213,63,115,228,104,236,126,246,57,4,27,
+  27,25,110,122,8,89,8,62,2,232,179,2,240,90,90,104,133,240,89,90,134,58,177,226,145,63,9,162,129,145,202,23,
+  141,199,204,204,106,251,189,49,236,232,12,99,61,1,172,104,236,69,29,159,183,5,226,232,244,199,112,247,221,247,152,74,
+  32,133,159,247,255,236,231,10,63,7,39,79,209,49,199,6,174,189,252,194,75,86,122,90,186,25,254,115,163,43,11,75,
+  9,224,129,204,108,108,33,12,159,101,231,226,207,197,67,80,251,193,135,240,30,172,67,167,215,130,155,225,166,212,205,0,
+  70,0,3,124,172,176,83,0,186,153,243,125,21,64,139,175,107,127,7,65,107,238,9,163,186,195,103,150,182,174,106,246,
+  163,137,251,90,220,204,13,153,23,94,112,254,249,102,34,224,12,134,189,239,127,240,129,230,129,113,204,177,129,111,63,187,
+  239,126,75,51,143,149,12,74,193,239,138,74,177,170,96,8,106,210,51,176,54,191,8,127,59,238,56,236,156,245,5,154,
+  154,186,208,234,11,161,59,185,8,103,132,80,37,22,224,140,33,164,245,254,232,130,205,151,132,207,126,46,101,212,99,95,
+  36,76,0,163,216,211,29,198,150,246,16,225,11,96,43,149,80,83,221,107,201,179,93,123,106,80,82,50,196,76,4,92,
+  76,53,174,172,40,119,0,116,108,224,155,123,231,193,194,211,190,113,154,1,176,152,234,243,81,233,104,108,202,46,194,146,
+  156,124,76,62,249,52,180,206,91,136,218,150,110,108,237,136,96,191,143,121,28,195,72,163,112,201,74,151,67,222,47,255,
+  19,160,90,37,201,94,154,218,31,138,193,203,207,53,123,227,168,238,142,98,11,143,85,214,232,195,206,158,136,89,3,176,
+  195,31,198,210,37,203,144,199,28,211,53,56,13,227,14,63,2,245,117,123,29,0,29,27,248,182,125,253,214,15,11,120,
+  227,103,242,198,63,113,112,42,166,18,192,181,121,37,88,122,198,89,112,207,153,131,93,245,237,216,214,30,198,174,110,11,
+  173,158,168,89,132,211,6,205,31,233,7,157,30,39,159,7,35,137,247,216,107,194,75,5,187,131,113,52,17,96,173,130,
+  187,190,53,132,138,6,55,246,122,19,171,224,118,243,152,175,190,243,49,178,92,154,137,45,13,19,206,62,7,7,155,14,
+  190,148,60,69,199,28,27,152,214,215,23,58,114,206,172,25,177,172,180,52,228,13,26,132,111,103,100,98,250,136,35,176,
+  226,184,147,208,60,231,11,236,169,107,199,218,54,31,42,58,2,216,211,21,134,219,31,131,79,33,104,18,58,43,106,153,
+  213,111,15,169,93,248,75,117,212,115,251,125,10,73,187,184,175,129,10,184,131,0,86,50,252,172,60,232,70,3,161,108,
+  35,128,29,222,0,126,246,243,95,154,153,216,164,128,119,220,113,59,122,188,61,231,39,79,211,49,199,6,166,121,60,77,
+  71,63,241,231,223,155,94,39,197,135,13,194,117,121,249,248,226,184,19,177,251,239,207,34,220,218,142,234,3,61,40,107,
+  241,99,107,119,4,117,238,104,98,21,92,43,177,228,180,60,22,79,44,71,45,200,236,218,79,219,245,220,178,107,68,249,
+  153,78,194,86,223,19,99,254,23,70,165,42,96,26,221,104,100,248,217,106,42,97,66,184,226,178,203,77,243,131,58,131,
+  191,253,246,91,176,172,160,3,160,99,3,219,90,90,90,238,189,229,150,155,205,10,184,69,84,192,31,12,27,142,25,55,
+  221,136,200,158,90,180,245,132,176,110,95,23,42,91,188,216,220,17,198,126,127,28,237,38,207,75,172,239,110,131,166,182,
+  63,193,104,183,1,10,72,59,244,180,159,123,233,102,101,93,2,184,169,45,148,88,93,183,45,136,102,179,12,117,20,7,
+  90,58,205,26,244,2,48,43,205,133,207,63,251,108,117,242,20,29,115,108,224,90,75,123,83,167,86,157,85,219,91,41,
+  1,124,248,194,139,208,189,99,11,186,253,94,211,86,87,222,160,101,200,60,12,27,45,180,16,64,111,50,252,12,90,9,
+  192,236,38,7,65,102,171,157,42,96,236,215,109,247,16,180,102,126,126,15,143,179,77,21,48,7,122,81,221,99,153,245,
+  230,181,222,224,170,242,74,228,100,231,152,38,136,49,163,70,99,255,129,253,14,128,142,13,124,219,81,127,160,115,236,168,
+  81,200,228,141,95,194,16,116,222,180,41,232,117,119,160,133,160,237,236,14,162,252,96,183,89,7,126,79,119,12,221,12,
+  21,253,220,47,181,19,84,82,181,0,1,12,39,159,203,251,43,159,26,223,237,199,61,4,173,193,19,71,13,243,63,45,
+  107,173,10,152,122,31,67,79,238,239,9,70,240,230,235,175,155,48,88,93,208,190,115,209,197,90,99,222,1,208,177,129,
+  111,151,95,254,189,83,115,93,57,200,76,73,199,184,225,35,208,211,126,0,157,225,168,169,28,217,218,234,51,10,168,101,
+  168,235,60,49,211,83,197,110,122,80,165,138,201,253,250,53,61,72,1,213,54,104,63,214,235,114,181,1,246,16,222,125,
+  4,78,21,48,235,91,131,204,255,60,104,164,34,182,241,120,237,190,48,238,186,235,46,163,126,10,133,127,243,203,135,208,
+  208,208,80,144,60,69,199,28,27,184,150,150,150,118,116,70,106,58,92,169,25,248,254,247,191,143,54,79,16,29,132,111,
+  63,97,43,107,242,96,77,163,66,81,11,77,221,17,116,81,253,52,178,65,238,166,234,153,206,214,17,213,130,126,217,232,
+  222,191,89,194,6,80,77,18,82,79,1,184,157,0,86,52,250,176,169,217,135,38,126,143,194,207,230,246,78,156,118,218,
+  25,6,192,204,244,12,188,251,206,219,234,130,150,150,60,69,199,28,27,184,150,246,31,4,48,37,205,132,127,143,62,250,
+  123,184,213,40,46,88,168,120,171,155,188,88,215,18,68,53,161,105,36,60,189,84,59,41,159,0,20,96,70,237,66,22,
+  124,253,242,192,68,127,208,196,104,8,27,68,47,85,174,131,106,119,160,39,138,109,237,33,148,31,232,33,136,97,180,152,
+  246,191,56,118,238,173,103,222,55,202,204,128,86,148,95,128,121,115,231,110,39,128,41,201,83,116,204,177,129,107,2,80,
+  121,151,26,192,103,204,156,142,118,42,146,214,128,223,237,142,154,158,42,235,24,46,42,108,60,200,253,2,208,128,71,181,
+  51,21,46,73,240,250,247,249,52,174,74,152,126,121,97,47,1,108,245,197,80,223,157,8,63,203,15,246,96,87,23,149,
+  150,223,211,69,159,95,190,14,37,37,37,112,13,26,140,195,135,13,195,71,239,190,123,71,242,244,28,115,108,96,155,0,
+  76,31,156,138,145,35,71,98,227,214,93,38,252,84,88,184,163,93,160,120,177,141,192,236,238,142,25,40,77,141,167,237,
+  4,75,205,14,10,65,45,203,50,109,126,2,241,63,193,72,87,13,232,65,183,133,157,4,112,77,139,58,97,247,96,191,
+  39,106,0,236,36,156,175,188,61,9,174,244,76,230,161,169,152,48,254,28,212,212,31,116,0,116,236,235,97,76,180,142,
+  86,238,117,242,137,39,226,192,193,86,163,128,26,157,176,157,160,108,108,112,99,59,243,191,58,47,247,49,52,181,67,79,
+  219,19,33,231,151,181,162,253,247,71,9,164,6,233,10,86,245,1,109,36,128,91,58,195,88,206,188,178,140,249,159,114,
+  204,14,238,87,133,207,189,247,220,107,38,2,206,74,75,199,85,87,93,181,255,224,193,131,153,201,211,115,204,177,129,109,
+  54,128,87,95,125,53,154,187,125,9,0,169,108,235,154,189,166,187,216,182,142,48,246,17,64,213,86,122,190,82,193,98,
+  154,28,190,2,165,92,189,99,76,215,52,134,162,202,15,91,121,204,198,222,40,118,240,88,171,27,189,168,104,11,160,153,
+  223,161,158,49,29,161,8,46,185,240,34,20,48,252,204,74,203,192,237,247,222,119,103,242,212,28,115,108,224,91,234,224,
+  148,150,212,212,84,252,241,79,127,66,59,213,72,0,30,8,198,176,170,177,215,228,127,219,219,67,166,3,181,96,209,48,
+  163,67,67,141,8,151,32,11,71,163,12,77,165,130,81,238,139,34,26,12,194,242,251,17,15,5,96,249,124,136,249,125,
+  240,4,188,104,235,242,98,111,107,23,202,26,122,176,185,51,196,144,54,6,119,48,138,186,134,253,24,86,58,148,10,152,
+  138,194,220,60,12,29,58,180,36,121,106,142,57,54,176,45,107,208,160,27,211,82,82,172,244,244,116,204,152,62,29,93,
+  254,144,233,26,86,235,141,162,130,10,168,26,80,13,65,58,64,0,187,34,9,248,108,0,213,180,16,12,17,184,64,128,
+  208,17,52,79,39,98,181,123,208,181,116,62,234,62,248,0,181,207,61,135,138,95,63,132,178,135,127,139,165,127,125,18,
+  251,62,155,130,238,141,27,209,94,93,135,78,183,7,173,252,14,245,1,93,190,98,21,178,210,93,200,160,250,157,120,212,
+  49,152,56,113,162,3,160,99,95,11,75,73,79,75,255,68,225,231,144,226,18,236,168,59,104,186,138,181,132,99,216,222,
+  21,49,10,88,69,0,107,186,44,19,66,170,33,61,168,254,159,150,15,209,144,23,113,159,23,225,246,118,116,172,89,141,
+  166,39,158,64,5,67,216,197,199,159,132,202,188,33,168,36,80,91,50,243,176,38,39,31,11,115,243,49,201,149,141,151,
+  242,10,241,236,168,177,248,252,7,55,162,117,234,20,132,15,30,64,175,199,139,167,159,123,193,84,192,168,3,118,198,224,
+  116,103,248,145,99,95,15,187,244,210,75,71,185,82,82,77,231,231,211,79,59,13,157,62,170,159,63,134,131,204,245,170,
+  154,221,168,98,168,88,221,25,65,83,119,216,180,213,5,3,97,2,232,70,216,95,135,208,222,109,104,125,235,45,172,188,
+  232,98,148,143,62,2,59,24,58,86,103,102,155,85,116,15,166,103,163,73,171,33,209,247,164,165,99,75,70,38,150,166,
+  166,97,58,65,159,68,208,62,39,144,139,142,56,6,149,55,221,132,158,181,101,184,243,250,27,144,153,146,97,218,33,75,
+  75,74,29,0,29,251,122,216,53,87,95,179,83,213,254,186,241,127,252,163,31,195,205,240,179,141,121,153,186,160,85,53,
+  245,98,115,91,0,59,9,96,189,219,66,87,32,106,114,185,96,205,78,236,127,254,89,172,61,119,2,86,149,150,160,58,
+  59,11,53,169,46,236,215,26,16,131,211,204,66,44,198,9,159,150,174,222,157,154,142,42,42,219,114,66,174,133,61,63,
+  25,52,24,101,4,178,46,195,133,117,132,118,206,25,103,225,187,35,70,34,135,159,77,39,164,87,93,122,169,3,160,99,
+  3,223,90,91,91,127,118,222,57,231,198,51,83,210,76,215,175,23,94,122,25,189,33,134,154,204,233,234,125,49,108,108,
+  11,97,35,115,192,61,29,94,52,119,6,225,111,62,128,206,119,223,195,218,51,206,196,198,220,34,212,49,196,212,98,43,
+  90,120,69,75,148,105,81,22,45,192,178,143,144,233,185,212,79,107,70,84,243,248,149,60,190,214,0,156,202,199,159,29,
+  54,8,27,8,218,65,190,86,71,56,167,151,148,98,130,134,31,81,1,115,51,115,240,183,103,158,117,0,116,108,224,219,
+  190,3,13,241,99,198,142,67,1,33,208,228,71,179,230,44,98,142,103,161,61,16,196,30,143,133,117,141,30,108,33,132,
+  221,13,29,104,91,179,6,107,110,188,1,235,11,139,80,159,193,48,115,80,42,65,75,53,139,177,216,203,146,105,25,50,
+  65,184,95,240,37,97,212,227,26,42,91,25,21,118,246,160,65,102,90,123,45,111,166,117,38,246,17,220,221,132,248,147,
+  33,35,113,116,90,38,92,132,185,180,100,8,42,170,170,28,0,29,27,216,214,215,103,157,93,190,110,93,223,176,194,98,
+  100,242,198,31,49,124,4,170,118,236,66,123,136,249,30,195,207,173,173,126,236,110,117,163,165,122,31,106,94,252,7,86,
+  29,247,13,236,200,42,68,45,161,57,64,240,164,108,205,124,220,78,208,228,90,142,204,94,126,90,224,217,235,2,238,31,
+  156,142,106,2,168,69,56,103,209,165,126,75,8,227,182,76,134,171,60,198,78,151,11,175,12,47,197,88,126,70,0,158,
+  55,126,60,252,126,175,3,160,99,3,219,226,113,107,222,167,83,62,66,22,67,67,53,63,28,119,194,201,168,239,246,153,
+  209,234,251,221,49,236,96,232,217,190,97,51,170,238,189,15,101,35,70,99,107,86,30,246,51,87,108,37,52,246,34,156,
+  102,209,77,194,213,127,37,92,121,255,231,82,68,1,168,197,92,164,126,159,210,215,242,59,119,81,1,181,168,203,250,156,
+  92,252,177,160,16,69,4,80,33,232,3,15,220,135,120,60,234,0,232,216,192,54,1,248,235,95,61,132,180,212,84,3,
+  224,205,55,222,132,54,111,16,221,254,40,220,158,16,234,42,170,48,255,202,171,176,136,249,89,93,90,58,246,165,51,100,
+  36,36,82,57,41,94,35,31,107,193,78,169,161,13,161,128,180,33,180,213,176,158,175,109,229,123,181,156,217,84,194,39,
+  175,224,119,170,102,84,211,221,47,41,45,198,15,179,115,76,15,152,108,238,251,120,210,199,14,128,142,13,124,139,5,125,
+  243,190,115,197,119,144,193,155,94,53,143,175,191,254,166,153,18,208,237,245,194,187,117,11,222,186,248,18,76,118,101,99,
+  91,86,174,129,173,137,225,166,128,146,242,9,64,173,114,91,75,223,207,253,218,103,3,39,23,140,122,143,1,48,37,19,
+  27,249,121,45,105,173,245,223,181,14,252,14,126,103,29,225,219,75,16,103,141,24,133,211,25,122,102,19,84,229,161,213,
+  91,183,244,197,252,254,71,147,167,233,152,99,3,211,246,182,245,206,27,54,116,152,201,187,10,179,243,80,177,190,10,30,
+  127,0,158,154,173,248,244,242,203,241,33,33,89,65,223,201,124,77,53,154,109,135,165,28,202,247,228,218,215,64,245,179,
+  129,212,214,14,61,229,2,82,57,158,42,96,170,248,222,133,73,0,181,6,252,46,129,203,240,179,158,112,191,51,116,56,
+  142,228,107,25,220,119,242,177,39,160,169,185,57,152,60,69,199,28,27,184,54,117,234,103,243,50,25,122,230,51,180,28,
+  51,122,12,26,91,90,16,220,183,15,11,191,247,125,188,197,28,109,46,161,169,36,20,7,152,151,53,211,91,146,10,40,
+  176,180,34,174,13,162,96,83,115,131,218,255,236,181,225,205,123,232,82,201,106,30,71,171,42,205,77,2,184,128,192,31,
+  200,200,50,21,53,91,10,242,240,120,65,9,134,241,181,116,190,247,226,111,95,12,175,207,227,0,232,216,192,183,91,111,
+  185,117,158,153,250,47,37,21,151,48,220,244,213,215,97,203,207,31,196,23,165,195,240,9,129,18,128,27,5,75,106,230,
+  161,30,45,106,223,19,100,13,131,211,77,190,39,208,244,124,159,222,199,247,11,80,59,15,108,224,115,133,168,91,184,93,
+  73,192,108,0,151,242,249,129,180,76,243,254,117,185,5,120,32,63,207,84,192,104,44,226,93,119,221,9,203,10,57,0,
+  58,54,240,109,220,184,35,231,101,242,166,207,39,60,143,252,240,54,236,127,242,73,44,31,51,6,149,25,217,152,76,80,
+  230,18,158,13,2,43,89,193,34,168,108,0,85,249,162,125,130,77,110,191,71,143,237,247,42,68,221,73,184,149,255,45,
+  35,124,106,130,80,254,183,54,51,155,80,103,152,215,23,151,148,226,182,236,92,51,17,176,66,208,247,222,120,3,177,120,
+  236,243,228,41,58,230,216,192,180,235,175,191,62,45,63,51,115,89,110,90,6,142,230,141,255,202,196,235,177,230,136,35,
+  81,157,85,128,50,66,39,165,90,146,4,176,129,16,41,156,20,84,130,207,86,57,237,235,239,77,73,8,15,193,74,192,
+  246,240,243,10,99,85,3,42,248,190,224,190,77,153,89,12,87,19,121,229,23,133,197,248,110,70,38,178,249,60,219,149,
+  141,53,229,229,232,246,249,78,74,158,166,99,142,13,76,187,239,174,187,78,63,102,204,17,102,18,222,99,233,211,14,63,
+  28,219,115,115,177,59,45,221,52,152,207,32,44,11,184,85,248,104,135,150,54,88,242,214,65,169,6,184,254,251,213,239,
+  211,168,33,223,47,80,235,83,210,176,139,94,197,252,111,126,74,10,62,226,49,151,17,180,189,105,89,12,93,83,76,45,
+  232,135,35,135,226,36,190,174,246,191,145,35,70,162,173,171,27,145,190,136,3,160,99,3,219,206,59,239,188,211,135,21,
+  151,48,236,75,197,89,132,98,222,208,161,216,149,154,142,250,52,151,201,215,12,128,84,190,173,124,205,238,86,38,183,21,
+  208,222,10,62,229,129,122,108,215,132,218,175,73,1,183,211,203,121,60,229,147,31,14,58,204,244,5,173,39,108,202,39,
+  119,100,186,240,108,233,8,28,78,16,115,92,57,248,254,229,151,33,100,5,209,231,0,232,216,64,183,209,163,71,159,158,
+  157,149,133,28,2,118,33,65,91,48,188,20,187,25,10,214,80,1,109,0,21,130,42,127,51,0,18,24,211,233,58,9,
+  87,127,0,181,149,11,68,61,215,107,250,76,45,93,0,150,233,120,116,229,149,171,120,252,125,170,212,33,248,155,152,251,
+  221,153,157,131,18,190,39,43,213,133,223,253,238,17,68,163,145,42,0,217,201,211,116,204,177,129,105,147,62,153,236,115,
+  101,102,162,152,55,255,13,89,217,88,157,87,128,134,180,76,236,74,207,192,34,130,39,0,151,49,52,20,128,38,4,85,
+  184,169,176,179,31,104,135,66,207,228,86,251,165,130,2,80,159,81,13,232,6,110,151,115,171,206,215,234,3,186,158,199,
+  223,199,188,115,47,125,21,191,247,70,158,67,46,97,84,97,240,209,164,143,16,139,89,115,147,167,232,152,99,3,215,94,
+  125,227,109,191,139,128,169,251,215,221,121,249,168,200,47,68,173,250,103,166,167,27,0,167,19,22,13,158,85,51,68,109,
+  106,134,233,255,217,95,233,4,221,87,27,223,237,54,65,1,168,246,191,93,60,118,37,93,74,170,227,169,39,204,230,244,
+  44,134,185,9,0,151,22,13,193,57,169,169,102,22,180,98,158,195,138,213,107,25,126,6,70,38,79,209,49,199,6,166,
+  245,245,249,46,249,104,210,39,145,44,194,166,69,88,110,206,202,193,170,220,66,211,165,76,3,103,213,100,32,5,156,79,
+  112,170,24,150,10,36,59,228,84,219,158,182,2,207,6,209,6,80,239,209,86,240,213,240,125,155,232,10,103,213,252,144,
+  8,105,83,152,103,166,161,145,64,215,80,241,62,45,46,197,73,220,151,195,247,141,25,49,2,53,187,170,53,13,253,160,
+  228,105,58,230,216,192,51,77,243,30,141,134,63,92,180,100,62,242,50,93,200,229,205,127,21,33,91,85,60,20,123,9,
+  131,134,14,105,212,130,128,17,56,106,62,80,24,186,151,219,58,2,170,118,64,229,131,130,77,0,218,170,216,196,207,105,
+  159,198,6,10,62,125,166,130,159,95,196,99,170,249,65,35,32,202,249,154,194,207,218,244,76,236,200,42,192,95,75,135,
+  224,104,238,207,224,123,198,159,61,1,189,238,30,7,64,199,6,182,241,6,207,136,199,35,179,171,42,203,145,159,155,107,
+  212,103,2,193,88,50,172,20,181,234,243,73,200,54,165,165,99,22,193,16,56,234,183,169,90,204,205,124,223,78,122,173,
+  42,81,82,82,77,142,167,138,150,253,132,199,110,166,168,167,122,214,240,88,219,248,92,159,89,193,199,115,248,250,39,60,
+  134,25,1,207,199,6,64,170,224,146,130,98,220,158,155,143,82,126,70,93,208,30,252,201,79,16,14,4,29,0,29,27,
+  248,22,143,71,159,173,217,85,131,177,35,71,194,149,146,129,227,9,204,20,230,99,170,5,85,143,150,29,233,57,152,71,
+  88,38,37,193,89,72,64,212,54,184,158,239,19,136,170,217,84,5,139,237,187,233,123,76,248,154,129,77,124,188,142,175,
+  175,226,251,231,211,85,251,249,46,125,10,143,87,195,28,179,137,239,169,206,112,97,238,176,209,56,155,32,22,242,248,217,
+  220,191,120,225,60,85,192,108,34,128,135,37,79,211,49,199,6,166,17,192,167,58,58,218,113,214,89,103,33,131,224,140,
+  35,4,255,40,30,130,157,174,44,19,70,238,201,200,66,101,118,62,62,230,126,249,23,4,72,161,232,50,186,154,20,164,
+  110,202,239,108,85,84,99,189,182,218,167,215,148,247,169,189,239,11,126,86,99,255,222,227,243,185,41,105,216,45,0,25,
+  170,110,206,206,193,83,197,37,24,121,216,97,166,7,204,89,39,157,140,182,174,150,26,194,151,151,60,69,199,28,27,216,
+  230,15,5,253,55,223,252,67,51,16,183,120,112,42,126,94,80,128,181,249,37,56,168,89,205,152,227,237,102,168,184,152,
+  208,168,75,154,148,112,58,33,82,83,194,28,186,106,73,213,180,176,156,143,165,116,171,13,120,137,10,23,85,224,44,224,
+  99,133,175,10,61,213,251,229,115,66,86,65,248,4,96,61,67,216,185,204,55,47,204,200,192,16,190,150,67,21,252,237,
+  239,30,65,48,24,252,99,242,212,28,115,108,224,27,85,176,118,217,27,175,35,147,97,167,86,162,253,22,183,147,71,141,
+  192,94,170,159,154,28,212,139,101,55,193,169,36,48,159,19,42,41,161,194,81,129,165,137,149,52,178,65,48,202,103,18,
+  70,77,53,248,25,129,85,99,251,84,126,246,125,62,127,135,175,125,50,232,48,211,20,177,159,175,213,240,59,214,231,21,
+  226,181,146,225,56,34,61,19,37,124,125,36,149,176,178,178,188,187,175,175,47,43,121,106,142,57,54,240,141,225,94,113,
+  87,123,235,246,227,143,59,14,153,204,203,70,17,186,135,134,12,197,186,162,97,104,98,94,104,26,219,185,175,158,33,106,
+  57,193,153,153,146,106,106,50,39,17,40,249,71,132,234,3,2,250,30,253,93,250,251,132,233,157,228,227,143,9,180,114,
+  190,233,252,140,42,98,170,249,88,99,9,55,186,242,240,217,240,195,113,49,161,54,234,199,237,253,63,185,15,254,222,222,
+  135,147,167,229,152,99,95,31,163,10,62,253,236,179,207,66,35,34,242,8,212,249,4,102,242,208,145,168,103,254,119,144,
+  97,169,194,81,205,124,182,135,161,227,102,42,150,70,73,168,89,225,83,194,246,145,129,112,16,129,75,77,2,120,24,125,
+  48,62,36,124,243,8,86,37,143,181,45,211,133,234,204,76,230,148,153,216,203,199,139,135,148,226,238,220,2,211,245,76,
+  93,224,142,26,55,14,213,213,213,237,44,12,6,39,79,201,49,199,190,94,182,183,174,46,62,110,212,225,200,37,108,67,
+  8,197,221,57,249,152,51,124,24,54,102,229,163,134,208,8,64,211,232,206,237,193,65,169,168,77,115,97,23,21,115,11,
+  161,85,183,178,50,194,180,42,45,13,43,9,221,26,62,95,151,225,194,78,30,171,142,185,157,186,182,237,37,184,155,8,
+  227,234,225,35,241,104,113,49,78,226,251,243,249,217,52,126,215,243,207,61,3,127,56,210,158,60,21,199,28,251,250,89,
+  192,194,233,239,189,255,190,59,63,59,151,33,97,6,70,18,140,235,178,179,49,109,204,56,108,40,40,192,193,140,108,211,
+  15,84,21,51,166,63,40,225,211,228,76,251,211,178,208,68,24,181,6,132,6,231,54,50,108,213,28,161,234,41,163,121,
+  98,234,121,156,3,204,251,106,169,166,171,11,134,226,241,194,33,56,155,225,104,1,247,103,164,167,227,218,107,174,69,87,
+  79,215,20,175,215,235,172,128,228,216,215,219,66,161,192,206,63,62,250,40,178,93,89,200,205,206,99,62,56,8,87,80,
+  209,62,30,57,18,203,8,230,158,172,108,51,127,167,212,208,56,65,107,36,140,122,108,247,138,217,79,184,4,159,94,83,
+  248,42,8,171,121,188,121,195,70,224,190,188,124,28,173,176,147,225,105,102,70,6,38,156,61,1,83,39,79,190,62,249,
+  245,142,57,246,245,182,88,204,186,175,171,179,3,247,221,251,19,228,18,182,204,212,84,83,67,121,14,67,199,7,243,243,
+  241,241,144,97,102,180,196,198,220,124,108,39,152,213,174,76,236,227,246,0,95,175,163,239,101,184,169,57,62,53,197,252,
+  118,42,230,214,252,2,44,28,86,138,103,74,74,240,29,134,165,195,121,172,60,190,79,240,93,112,222,249,152,59,123,230,
+  163,129,128,211,233,218,49,199,140,169,247,9,61,219,221,209,81,254,248,159,254,132,81,165,195,204,26,125,121,84,185,17,
+  220,106,206,206,107,152,15,62,82,60,20,47,15,31,130,169,165,67,177,120,196,72,44,45,44,193,146,162,82,44,224,246,
+  139,226,82,204,30,61,22,239,14,25,201,247,21,225,59,132,237,8,130,151,69,56,53,234,190,32,39,23,223,185,226,59,
+  225,169,83,167,58,202,231,152,99,255,202,212,22,215,218,209,122,229,242,69,139,162,227,207,30,143,52,170,150,38,237,117,
+  209,179,169,138,133,12,43,5,213,120,62,62,159,96,93,206,253,223,203,200,196,165,105,105,56,191,168,24,103,242,253,227,
+  24,106,154,90,78,238,211,231,114,82,211,81,84,80,136,231,159,123,14,85,85,85,87,39,191,202,49,199,28,251,119,22,
+  137,68,78,238,232,234,152,253,230,27,111,226,162,11,47,198,208,210,82,228,102,184,204,218,237,26,187,167,17,20,249,116,
+  141,37,180,61,79,97,230,32,134,153,204,1,51,8,93,110,78,62,70,141,28,133,187,238,186,11,91,182,108,137,69,98,
+  177,217,4,60,55,249,21,142,57,230,216,255,47,179,44,235,33,119,111,143,191,166,166,218,255,252,115,207,251,191,123,197,
+  119,252,71,30,62,14,67,11,138,80,146,83,128,194,172,124,122,14,61,15,5,244,162,220,34,28,53,238,40,83,195,249,
+  209,71,31,161,182,126,31,124,62,239,162,112,56,124,92,242,144,142,57,230,216,255,138,185,27,26,158,153,191,112,225,179,
+  179,103,207,126,118,219,182,109,193,157,59,119,160,191,183,119,181,34,18,179,180,184,74,155,70,93,40,191,76,126,212,49,
+  199,28,251,159,52,183,219,93,200,176,178,200,246,88,44,242,131,190,190,200,9,122,76,240,156,145,13,142,57,230,152,99,
+  142,57,230,152,99,142,57,230,216,215,195,254,227,63,254,63,16,177,31,19,86,10,44,171,0,0,0,0,73,69,78,68,
+  174,66,96,130,
+};
+}
diff --git a/higan/target-star-rod/resource/resource.hpp b/higan/target-star-rod/resource/resource.hpp
new file mode 100644
index 0000000..9e53a0a
--- /dev/null
+++ b/higan/target-star-rod/resource/resource.hpp
@@ -0,0 +1,3 @@
+namespace resource {
+extern const nall::vector<uint8_t> star_rod;
+}
diff --git a/higan/target-star-rod/resource/star-rod.png b/higan/target-star-rod/resource/star-rod.png
new file mode 100644
index 0000000..e69de29
diff --git a/higan/target-star-rod/smp/registers.cpp b/higan/target-star-rod/smp/registers.cpp
new file mode 100644
index 0000000..fac9fcb
--- /dev/null
+++ b/higan/target-star-rod/smp/registers.cpp
@@ -0,0 +1,88 @@
+unique_pointer<SMPRegisterEditor> smpRegisterEditor;
+
+SMPRegisterEditor::SMPRegisterEditor() {
+  smpRegisterEditor = this;
+  setTitle("SMP Register Editor");
+
+  layout.setMargin(5);
+  regALabel.setText("A:");
+  regAValue.setFont(Font().setFamily(Font::Mono));
+  regXLabel.setText("X:");
+  regXValue.setFont(Font().setFamily(Font::Mono));
+  regYLabel.setText("Y:");
+  regYValue.setFont(Font().setFamily(Font::Mono));
+  regSLabel.setText("S:01");
+  regSValue.setFont(Font().setFamily(Font::Mono));
+  flagN.setText("N");
+  flagV.setText("V");
+  flagP.setText("P");
+  flagB.setText("B");
+  flagH.setText("H");
+  flagI.setText("I");
+  flagZ.setText("Z");
+  flagC.setText("C");
+  update.setText("Update");
+
+  loadRegisters();
+
+  layout.append(primaryLayout, {~0, 0}, 5);
+    primaryLayout.append(regALabel, {0, 0}, 5);
+    primaryLayout.append(regAValue, {0, 0}, 5);
+    primaryLayout.append(regXLabel, {0, 0}, 5);
+    primaryLayout.append(regXValue, {0, 0}, 5);
+    primaryLayout.append(regYLabel, {0, 0}, 5);
+    primaryLayout.append(regYValue, {0, 0}, 5);
+    primaryLayout.append(regSLabel, {0, 0}, 5);
+    primaryLayout.append(regSValue, {0, 0});
+  layout.append(secondaryLayout, {~0, 0}, 5);
+    secondaryLayout.append(flagN, {0, 0}, 5);
+    secondaryLayout.append(flagV, {0, 0}, 5);
+    secondaryLayout.append(flagP, {0, 0}, 5);
+    secondaryLayout.append(flagB, {0, 0}, 5);
+    secondaryLayout.append(flagH, {0, 0}, 5);
+    secondaryLayout.append(flagI, {0, 0}, 5);
+    secondaryLayout.append(flagZ, {0, 0}, 5);
+    secondaryLayout.append(flagC, {0, 0});
+  layout.append(tertiaryLayout, {~0, 0});
+    tertiaryLayout.append(spacer, {~0, 0});
+    tertiaryLayout.append(update, {80, 0});
+  append(layout);
+
+  update.onActivate([&] {
+    saveRegisters();
+    smpDebugger->updateDisassembly();
+    setVisible(false);
+  });
+
+  setGeometry({{128, 128}, layout.minimumSize()});
+}
+
+auto SMPRegisterEditor::loadRegisters() -> void {
+  regAValue.setText(hex(SFC::smp.regs.a, 2L));
+  regXValue.setText(hex(SFC::smp.regs.x, 2L));
+  regYValue.setText(hex(SFC::smp.regs.y, 2L));
+  regSValue.setText(hex(SFC::smp.regs.s, 2L));
+  flagN.setChecked(SFC::smp.regs.p.n);
+  flagV.setChecked(SFC::smp.regs.p.v);
+  flagP.setChecked(SFC::smp.regs.p.p);
+  flagB.setChecked(SFC::smp.regs.p.b);
+  flagH.setChecked(SFC::smp.regs.p.h);
+  flagI.setChecked(SFC::smp.regs.p.i);
+  flagZ.setChecked(SFC::smp.regs.p.z);
+  flagC.setChecked(SFC::smp.regs.p.c);
+}
+
+auto SMPRegisterEditor::saveRegisters() -> void {
+  SFC::smp.regs.a = regAValue.text().hex();
+  SFC::smp.regs.x = regXValue.text().hex();
+  SFC::smp.regs.y = regYValue.text().hex();
+  SFC::smp.regs.s = regSValue.text().hex();
+  SFC::smp.regs.p.n = flagN.checked();
+  SFC::smp.regs.p.v = flagV.checked();
+  SFC::smp.regs.p.p = flagP.checked();
+  SFC::smp.regs.p.b = flagB.checked();
+  SFC::smp.regs.p.h = flagH.checked();
+  SFC::smp.regs.p.i = flagI.checked();
+  SFC::smp.regs.p.z = flagZ.checked();
+  SFC::smp.regs.p.c = flagC.checked();
+}
diff --git a/higan/target-star-rod/smp/smp.cpp b/higan/target-star-rod/smp/smp.cpp
new file mode 100644
index 0000000..e0fc1db
--- /dev/null
+++ b/higan/target-star-rod/smp/smp.cpp
@@ -0,0 +1,98 @@
+#include "../laevateinn.hpp"
+unique_pointer<SMPDebugger> smpDebugger;
+
+#include "registers.cpp"
+
+SMPDebugger::SMPDebugger() {
+  smpDebugger = this;
+  opcodePC = 0xffc0;
+
+  setTitle("SMP Debugger");
+  setGeometry({128, 128, 520, 260});
+
+  layout.setMargin(5);
+  stepInto.setText("Step Into");
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  disassembly.setFont(Font().setFamily(Font::Mono));
+  registers.setFont(Font().setFamily(Font::Mono));
+  registers.setText(" ");
+
+  stepInto.onActivate([&] {
+    debugger->flags.smp.stepInto = true;
+    debugger->resume();
+  });
+
+  update.onActivate({ &SMPDebugger::updateDisassembly, this });
+
+  registers.onActivate([&] {
+    smpRegisterEditor->loadRegisters();
+    smpRegisterEditor->setVisible();
+  });
+}
+
+auto SMPDebugger::read(uint16 addr) -> uint8 {
+  if((addr & 0xfff0) == 0x00f0) return ~0;  //$00f0-00ff  MMIO
+  return SFC::smp.readBus(addr);
+}
+
+auto SMPDebugger::write(uint16 addr, uint8 data) -> void {
+  if((addr & 0xfff0) == 0x00f0) return;  //$00f0-00ff  MMIO
+  return SFC::smp.writeBus(addr, data);
+}
+
+auto SMPDebugger::opcodeLength(uint16 addr) -> uint {
+  static uint lengthTable[256] = {
+    0
+  };
+  return lengthTable[SFC::smp.readBus(addr)];
+}
+
+auto SMPDebugger::updateDisassembly() -> void {
+  string line[15];
+
+  line[7] = { "> ", SFC::smp.disassemble(opcodePC, SFC::smp.regs.p.p) };
+  //line[7][31] = 0;
+
+  int addr = opcodePC;
+  for(int o = 6; o >= 0; o--) {
+    for(int b = 1; b <= 3; b++) {
+      if(addr - b >= 0 && (debugger->apuUsage.data[addr - b] & Usage::Exec)) {
+        addr -= b;
+        line[o] = { "  ", SFC::smp.disassemble(addr, SFC::smp.regs.p.p) };
+        //line[o][31] = 0;
+        break;
+      }
+    }
+  }
+
+  addr = opcodePC;
+  for(int o = 8; o <= 14; o++) {
+    for(int b = 1; b <= 3; b++) {
+      if(addr - b <= 0xffff && (debugger->apuUsage.data[addr + b] & Usage::Exec)) {
+        addr += b;
+        line[o] = { "  ", SFC::smp.disassemble(addr, SFC::smp.regs.p.p) };
+        //line[o][31] = 0;
+        break;
+      }
+    }
+  }
+
+  string output;
+  for(auto& n : line) {
+    if(!n) output.append("  ...\n");
+    else   output.append(n, "\n");
+  }
+  output.trimRight("\n");
+
+  disassembly.setText(output);
+  registers.setText({
+    "YA:", hex(SFC::smp.regs.y, 2L), hex(SFC::smp.regs.a, 2L),
+    " A:", hex(SFC::smp.regs.a, 2L), " X:", hex(SFC::smp.regs.x, 2L),
+    " Y:", hex(SFC::smp.regs.y, 2L), " S:01", hex(SFC::smp.regs.s, 2L), " ",
+    SFC::smp.regs.p.n ? "N" : "n", SFC::smp.regs.p.v ? "V" : "v",
+    SFC::smp.regs.p.p ? "P" : "p", SFC::smp.regs.p.b ? "B" : "b",
+    SFC::smp.regs.p.h ? "H" : "h", SFC::smp.regs.p.i ? "I" : "i",
+    SFC::smp.regs.p.z ? "Z" : "z", SFC::smp.regs.p.c ? "C" : "c",
+  });
+}
diff --git a/higan/target-star-rod/smp/smp.hpp b/higan/target-star-rod/smp/smp.hpp
new file mode 100644
index 0000000..2557b13
--- /dev/null
+++ b/higan/target-star-rod/smp/smp.hpp
@@ -0,0 +1,51 @@
+struct SMPDebugger : Window {
+  uint16 opcodePC;
+
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Button stepInto{&controlLayout, Size{80, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    TextEdit disassembly{&layout, Size{~0, ~0}, 5};
+    Button registers{&layout, Size{~0, 0}};
+
+  auto read(uint16 addr) -> uint8;
+  auto write(uint16 addr, uint8 data) -> void;
+
+  auto opcodeLength(uint16 addr) -> uint;
+  auto updateDisassembly() -> void;
+  SMPDebugger();
+};
+
+struct SMPRegisterEditor : Window {
+  VerticalLayout layout;
+    HorizontalLayout primaryLayout;
+      Label regALabel;
+      LineEdit regAValue;
+      Label regXLabel;
+      LineEdit regXValue;
+      Label regYLabel;
+      LineEdit regYValue;
+      Label regSLabel;
+      LineEdit regSValue;
+    HorizontalLayout secondaryLayout;
+      CheckLabel flagN;
+      CheckLabel flagV;
+      CheckLabel flagP;
+      CheckLabel flagB;
+      CheckLabel flagH;
+      CheckLabel flagI;
+      CheckLabel flagZ;
+      CheckLabel flagC;
+    HorizontalLayout tertiaryLayout;
+      Widget spacer;
+      Button update;
+
+  auto loadRegisters() -> void;
+  auto saveRegisters() -> void;
+  SMPRegisterEditor();
+};
+
+extern unique_pointer<SMPDebugger> smpDebugger;
+extern unique_pointer<SMPRegisterEditor> smpRegisterEditor;
diff --git a/higan/target-star-rod/tracer/tracer.cpp b/higan/target-star-rod/tracer/tracer.cpp
new file mode 100644
index 0000000..aeaa64c
--- /dev/null
+++ b/higan/target-star-rod/tracer/tracer.cpp
@@ -0,0 +1,56 @@
+#include "../laevateinn.hpp"
+unique_pointer<Tracer> tracer;
+
+Tracer::Tracer() {
+  tracer = this;
+  mask = false;
+  cpuMask = new uint8[0x200000]();
+  smpMask = new uint8[0x2000]();
+}
+
+Tracer::~Tracer() {
+  delete[] cpuMask;
+  delete[] smpMask;
+}
+
+auto Tracer::resetMask() -> void {
+  memset(cpuMask, 0, 0x200000);
+  memset(smpMask, 0, 0x2000);
+}
+
+auto Tracer::maskCPU(uint24 addr) -> bool {
+  if(mask == false) return false;
+  if(cpuMask[addr >> 3] & (1 << (addr & 7))) return true;
+  cpuMask[addr >> 3] |= 1 << (addr & 7);
+  return false;
+}
+
+auto Tracer::maskSMP(uint16 addr) -> bool {
+  if(mask == false) return false;
+  if(smpMask[addr >> 3] & (1 << (addr & 7))) return true;
+  smpMask[addr >> 3] |= 1 << (addr & 7);
+  return false;
+}
+
+auto Tracer::enabled() -> bool {
+  return fp.open();
+}
+
+auto Tracer::enable(bool state) -> void {
+  if(state == false) {
+    debugger->print("Tracer disabled\n");
+    fp.close();
+    return;
+  }
+
+  //try not to overwrite existing traces: scan from 001-999.
+  //if all files exist, use 000, even if it overwrites another log.
+  uint n = 1;
+  do {
+    if(file::exists({program->mediumPaths(1), "debug/trace-", pad(n, 3L, '0'), ".log"}) == false) break;
+  } while(++n <= 999);
+
+  string filename = {program->mediumPaths(1), "debug/trace-", pad(n, 3L, '0'), ".log"};
+  if(fp.open(filename, file::mode::write) == false) return;
+  debugger->print("Tracing to ", filename, "\n");
+}
diff --git a/higan/target-star-rod/tracer/tracer.hpp b/higan/target-star-rod/tracer/tracer.hpp
new file mode 100644
index 0000000..f0770c5
--- /dev/null
+++ b/higan/target-star-rod/tracer/tracer.hpp
@@ -0,0 +1,22 @@
+struct Tracer {
+  file fp;
+  bool mask;
+  uint8* cpuMask;
+  uint8* smpMask;
+
+  auto resetMask() -> void;
+  auto maskCPU(uint24 addr) -> bool;
+  auto maskSMP(uint16 addr) -> bool;
+
+  auto enabled() -> bool;
+  auto enable(bool state) -> void;
+
+  Tracer();
+  ~Tracer();
+
+  template<typename... Args> void print(Args&&... args) {
+    fp.print(std::forward<Args>(args)...);
+  }
+};
+
+extern unique_pointer<Tracer> tracer;
diff --git a/higan/target-star-rod/vram/vram.cpp b/higan/target-star-rod/vram/vram.cpp
new file mode 100644
index 0000000..90ac8a1
--- /dev/null
+++ b/higan/target-star-rod/vram/vram.cpp
@@ -0,0 +1,199 @@
+#include "../laevateinn.hpp"
+unique_pointer<VRAMViewer> vramViewer;
+
+VRAMViewer::VRAMViewer() {
+  vramViewer = this;
+  setTitle("VRAM Viewer");
+  statusBar.setFont(Font().setBold());
+  statusBar.setVisible();
+
+  layout.setMargin(5);
+  modeLabel.setText("Mode:");
+  modeSelection.append(ComboButtonItem().setText("2BPP"));
+  modeSelection.append(ComboButtonItem().setText("4BPP"));
+  modeSelection.append(ComboButtonItem().setText("8BPP"));
+  modeSelection.append(ComboButtonItem().setText("Mode 7"));
+  paletteLabel.setText("Palette:");
+  autoUpdate.setText("Auto");
+  update.setText("Update");
+  canvas.setSize({512, 512});
+
+  modeSelection.onChange({ &VRAMViewer::modeChanged, this });
+  paletteSelection.onChange({ &VRAMViewer::paletteChanged, this });
+  update.onActivate({ &VRAMViewer::updateTiles, this });
+
+  canvas.onMouseLeave([&] { statusBar.setText(""); });
+  canvas.onMouseMove([&](Position position) {
+    uint x = position.x(), y = position.y(), mode = modeSelection.selected().offset();
+    if((x >= 256 && mode >= 1)) { statusBar.setText(""); return; }
+    if((y >= 256 && mode >= 2)) { statusBar.setText(""); return; }
+    if((x >= 128 && mode >= 3)) { statusBar.setText(""); return; }
+    string output = { x, ", ", y, ", " };
+    x /= 8, y /= 8;
+    uint tile = 0, address = 0;
+    switch(mode) {
+    case SFC::PPU::Background::Mode::BPP2:
+      tile = y * 64 + x;
+      address = tile * 16;
+      break;
+    case SFC::PPU::Background::Mode::BPP4:
+      tile = y * 32 + x;
+      address = tile * 32;
+      break;
+    case SFC::PPU::Background::Mode::BPP8:
+      tile = y * 32 + x;
+      address = tile * 64;
+      break;
+    case SFC::PPU::Background::Mode::Mode7:
+      tile = y * 16 + x;
+      address = tile * 128 + 1;
+      break;
+    }
+    output.append("Tile: 0x", hex(tile, 4L), ", Address: 0x", hex(address, 4L));
+    statusBar.setText(output);
+  });
+
+  modeChanged();
+
+  setGeometry({{128, 128}, layout.minimumSize()});
+}
+
+auto VRAMViewer::modeChanged() -> void {
+  paletteSelection.reset();
+  switch(modeSelection.selected().offset()) {
+  case SFC::PPU::Background::Mode::BPP2:
+    for(uint bg : range(4))
+    for(uint palette : range(8)) {
+      paletteSelection.append(ComboButtonItem().setText({"BG", bg, " ", palette}));
+    }
+    break;
+  case SFC::PPU::Background::Mode::BPP4:
+    for(uint palette : range(8)) {
+      paletteSelection.append(ComboButtonItem().setText({"BG ", palette}));
+    }
+    for(uint palette : range(8)) {
+      paletteSelection.append(ComboButtonItem().setText({"SP ", palette}));
+    }
+    break;
+  case SFC::PPU::Background::Mode::BPP8:
+  case SFC::PPU::Background::Mode::Mode7:
+    paletteSelection.append(ComboButtonItem().setText("BG"));
+    break;
+  }
+  paletteChanged();
+}
+
+auto VRAMViewer::paletteChanged() -> void {
+  updateTiles();
+}
+
+auto VRAMViewer::updateTiles() -> void {
+  uint32_t* dp = canvas.data();
+  for(uint y : range(512))
+  for(uint x : range(512)) {
+    *dp++ = 0xff800000;
+  }
+  dp = canvas.data();
+  const uint16* sp = SFC::ppu.vram.data;
+
+  uint color;
+
+  switch(modeSelection.selected().offset()) {
+  case SFC::PPU::Background::Mode::BPP2:
+    for(uint tileY : range(64))
+    for(uint tileX : range(64)) {
+      for(uint y : range(8)) {
+        uint16 d[] = { sp[0] };
+        for(uint x : range(8)) {
+          color = 0;
+          color += d[0] & 0x0080 ? 1 : 0;
+          color += d[0] & 0x8000 ? 2 : 0;
+          for(auto& b : d) b <<= 1;
+          color += paletteSelection.selected().offset() << 2;
+          color = SFC::ppu.screen.cgram[color];
+          color = (255u << 24) |
+            (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+            (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+            (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+          dp[(tileY * 8 + y) * 512 + (tileX * 8 + x)] = color;
+        }
+        sp++;
+      }
+    }
+    break;
+
+  case SFC::PPU::Background::Mode::BPP4:
+    for(uint tileY : range(64))
+    for(uint tileX : range(32)) {
+      for(uint y : range(8)) {
+        uint16 d[] = { sp[0], sp[8] };
+        for(uint x : range(8)) {
+          color = 0;
+          color += d[0] & 0x0080 ? 1 : 0;
+          color += d[0] & 0x8000 ? 2 : 0;
+          color += d[1] & 0x0080 ? 4 : 0;
+          color += d[1] & 0x8000 ? 8 : 0;
+          for(auto& b : d) b <<= 1;
+          color += paletteSelection.selected().offset() << 4;
+          color = SFC::ppu.screen.cgram[color];
+          color = (255u << 24) |
+            (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+            (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+            (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+          dp[(tileY * 8 + y) * 512 + (tileX * 8 + x)] = color;
+        }
+        sp++;
+      }
+      sp += 8;
+    }
+    break;
+
+  case SFC::PPU::Background::Mode::BPP8:
+    for(uint tileY : range(32))
+    for(uint tileX : range(32)) {
+      for(uint y : range(8)) {
+        uint16 d[] = { sp[0], sp[8], sp[16], sp[24] };
+        for(uint x : range(8)) {
+          color = 0;
+          color += d[0] & 0x0080 ?   1 : 0;
+          color += d[0] & 0x8000 ?   2 : 0;
+          color += d[1] & 0x0080 ?   4 : 0;
+          color += d[1] & 0x8000 ?   8 : 0;
+          color += d[2] & 0x0080 ?  16 : 0;
+          color += d[2] & 0x8000 ?  32 : 0;
+          color += d[3] & 0x0080 ?  64 : 0;
+          color += d[3] & 0x8000 ? 128 : 0;
+          for(auto& b : d) b <<= 1;
+          color = SFC::ppu.screen.cgram[color];
+          color = (255u << 24) |
+            (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+            (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+            (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+          dp[(tileY * 8 + y) * 512 + (tileX * 8 + x)] = color;
+        }
+        sp++;
+      }
+      sp += 24;
+    }
+    break;
+
+  case SFC::PPU::Background::Mode::Mode7:
+    for(uint tileY : range(32))
+    for(uint tileX : range(16)) {
+      for(uint y : range(8)) {
+        for(uint x : range(8)) {
+          color = SFC::ppu.screen.cgram[sp[x] >> 8];
+          color = (255u << 24) |
+            (image::normalize(color >>  0 & 31, 5, 8) << 16) |
+            (image::normalize(color >>  5 & 31, 5, 8) <<  8) |
+            (image::normalize(color >> 10 & 31, 5, 8) <<  0);
+          dp[(tileY * 8 + y) * 512 + (tileX * 8 + x)] = color;
+        }
+        sp += 8;
+      }
+    }
+    break;
+  }
+
+  canvas.update();
+}
diff --git a/higan/target-star-rod/vram/vram.hpp b/higan/target-star-rod/vram/vram.hpp
new file mode 100644
index 0000000..f319564
--- /dev/null
+++ b/higan/target-star-rod/vram/vram.hpp
@@ -0,0 +1,21 @@
+struct VRAMViewer : Window {
+  VerticalLayout layout{this};
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}, 5};
+      Label modeLabel{&controlLayout, Size{0, 0}, 5};
+      ComboButton modeSelection{&controlLayout, Size{~0, 0}, 5};
+      Label paletteLabel{&controlLayout, Size{0, 0}, 5};
+      ComboButton paletteSelection{&controlLayout, Size{~0, 0}, 5};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      CheckLabel autoUpdate{&controlLayout, Size{0, 0}, 5};
+      Button update{&controlLayout, Size{80, 0}};
+    Canvas canvas{&layout, Size{512, 512}};
+
+  StatusBar statusBar{this};
+
+  auto modeChanged() -> void;
+  auto paletteChanged() -> void;
+  auto updateTiles() -> void;
+  VRAMViewer();
+};
+
+extern unique_pointer<VRAMViewer> vramViewer;
diff --git a/higan/target-tomoko/GNUmakefile b/higan/target-tomoko/GNUmakefile
index 5569af9..b5d33c5 100644
--- a/higan/target-tomoko/GNUmakefile
+++ b/higan/target-tomoko/GNUmakefile
@@ -1,8 +1,17 @@
-name := higan
+ifndef name
+  name := higan
+endif
 flags += -DSFC_SUPERGAMEBOY
 
+include a2600/GNUmakefile
 include fc/GNUmakefile
-include sfc/GNUmakefile
+ifndef profile
+  include sfc/GNUmakefile
+else ifeq ($(profile),accuracy)
+  include sfc/GNUmakefile
+else ifeq ($(profile),balanced)
+  include sfc-balanced/GNUmakefile
+endif
 include ms/GNUmakefile
 include md/GNUmakefile
 include gb/GNUmakefile
@@ -11,7 +20,7 @@ include ws/GNUmakefile
 include processor/GNUmakefile
 
 ui_objects := ui-tomoko ui-program ui-configuration ui-input
-ui_objects += ui-settings ui-tools ui-presentation
+ui_objects += ui-settings ui-tools ui-dip-switches ui-presentation
 ui_objects += ruby hiro
 ui_objects += $(if $(call streq,$(platform),windows),ui-resource)
 
@@ -59,6 +68,7 @@ obj/ui-input.o: $(ui)/input/input.cpp $(call rwildcard,$(ui)/)
 obj/ui-library.o: $(ui)/library/library.cpp $(call rwildcard,$(ui)/)
 obj/ui-settings.o: $(ui)/settings/settings.cpp $(call rwildcard,$(ui)/)
 obj/ui-tools.o: $(ui)/tools/tools.cpp $(call rwildcard,$(ui)/)
+obj/ui-dip-switches.o: $(ui)/dip-switches/dip-switches.cpp $(call rwildcard,$(ui)/)
 obj/ui-presentation.o: $(ui)/presentation/presentation.cpp $(call rwildcard,$(ui)/)
 
 obj/ui-resource.o:
diff --git a/higan/target-tomoko/configuration/configuration.cpp b/higan/target-tomoko/configuration/configuration.cpp
index 980d82a..5f33a38 100644
--- a/higan/target-tomoko/configuration/configuration.cpp
+++ b/higan/target-tomoko/configuration/configuration.cpp
@@ -13,6 +13,7 @@ Settings::Settings() {
 
   set("Library/Location", {Path::user(), "Emulation/"});
   set("Library/IgnoreManifests", false);
+  set("Library/ShowPreAlpha", false);
 
   set("Video/Driver", ruby::Video::optimalDriver());
   set("Video/Synchronize", false);
diff --git a/higan/target-tomoko/dip-switches/dip-switches.cpp b/higan/target-tomoko/dip-switches/dip-switches.cpp
new file mode 100644
index 0000000..3dfea5d
--- /dev/null
+++ b/higan/target-tomoko/dip-switches/dip-switches.cpp
@@ -0,0 +1,66 @@
+#include "../tomoko.hpp"
+DipSwitches* dipSwitches = nullptr;
+
+DipSwitch::DipSwitch(VerticalLayout* parent, Size size) : HorizontalLayout(parent, size) {
+}
+
+DipSwitches::DipSwitches() {
+  dipSwitches = this;
+  setTitle("DIP Switches");
+
+  layout.setMargin(5);
+
+  setSize({250, layout.minimumSize().height()});
+
+  accept.setText("Accept");
+
+  onClose([&] {
+    setModal(false);
+    setVisible(false);
+  });
+
+  accept.onActivate([&] {
+    setModal(false);
+    setVisible(false);
+  });
+}
+
+auto DipSwitches::run(const Markup::Node& node) -> uint {
+  for(DipSwitch& dipItem : dip) {
+    dipItem.name.setEnabled(false);
+    dipItem.name.setText("(empty)");
+    dipItem.value.setEnabled(false);
+    dipItem.value.reset();
+    dipItem.values.reset();
+  }
+
+  uint index = 0;
+  for(auto& setting : node.find("setting")) {
+    dip[index].name.setEnabled();
+    dip[index].name.setText(setting["name"].text());
+    dip[index].value.setEnabled();
+    for(auto& option : setting.find("option")) {
+      if(auto result = Eval::integer(option["value"].text())) {
+        ComboButtonItem item;
+        item.setText(option["name"].text());
+        dip[index].value.append(item);
+        dip[index].values.append(result());
+      }
+    }
+
+    if(++index >= Slots) break;
+  }
+
+  setVisible();
+  accept.setFocused();
+
+  audio->clear();
+  setModal();
+
+  uint result = 0;
+  for(auto& dipItem : dip) {
+    if(dipItem.value.enabled() == false) continue;
+    result |= dipItem.values[dipItem.value.selected().offset()];
+  }
+  return result;
+}
diff --git a/higan/target-tomoko/dip-switches/dip-switches.hpp b/higan/target-tomoko/dip-switches/dip-switches.hpp
new file mode 100644
index 0000000..05e9a24
--- /dev/null
+++ b/higan/target-tomoko/dip-switches/dip-switches.hpp
@@ -0,0 +1,32 @@
+struct DipSwitch : HorizontalLayout {
+  DipSwitch(VerticalLayout*, Size);
+
+  Label name{this, Size{100, 0}, 5};
+  ComboButton value{this, Size{~0, 0}};
+
+  vector<uint> values;
+};
+
+struct DipSwitches : Window {
+  enum : uint { Slots = 8 };
+
+  VerticalLayout layout{this};
+    DipSwitch dip[Slots] = {
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}},
+      DipSwitch{&layout, Size{~0, 0}}
+    };
+    HorizontalLayout controlLayout{&layout, Size{~0, 0}};
+      Widget spacer{&controlLayout, Size{~0, 0}};
+      Button accept{&controlLayout, Size{80, 0}};
+
+  auto run(const Markup::Node& node) -> uint;
+  DipSwitches();
+};
+
+extern DipSwitches* dipSwitches;
diff --git a/higan/target-tomoko/input/hotkeys.cpp b/higan/target-tomoko/input/hotkeys.cpp
index c6c76e3..4ae1601 100644
--- a/higan/target-tomoko/input/hotkeys.cpp
+++ b/higan/target-tomoko/input/hotkeys.cpp
@@ -68,6 +68,24 @@ auto InputManager::appendHotkeys() -> void {
     hotkeys.append(hotkey);
   }
 
+  { auto hotkey = new InputHotkey;
+    hotkey->name = "Rotate";
+    hotkey->press = [] {
+      program->rotate();
+    };
+    hotkeys.append(hotkey);
+  }
+
+  { auto hotkey = new InputHotkey;
+    hotkey->name = "Export Memory";
+    hotkey->press = [] {
+      if(!::emulator) return;
+      ::emulator->exportMemory();
+      program->showMessage("Memory exported");
+    };
+    hotkeys.append(hotkey);
+  }
+
   for(auto& hotkey : hotkeys) {
     hotkey->path = string{"Hotkey/", hotkey->name}.replace(" ", "");
     hotkey->assignment = settings(hotkey->path).text();
diff --git a/higan/target-tomoko/presentation/presentation.cpp b/higan/target-tomoko/presentation/presentation.cpp
index 0513af0..6ca8276 100644
--- a/higan/target-tomoko/presentation/presentation.cpp
+++ b/higan/target-tomoko/presentation/presentation.cpp
@@ -7,39 +7,7 @@ Presentation::Presentation() {
   presentation = this;
 
   libraryMenu.setText("Library");
-  string_vector manufacturers;
-  for(auto& emulator : program->emulators) {
-    if(!manufacturers.find(emulator->information.manufacturer)) {
-      manufacturers.append(emulator->information.manufacturer);
-    }
-  }
-  for(auto& manufacturer : manufacturers) {
-    Menu manufacturerMenu{&libraryMenu};
-    manufacturerMenu.setText(manufacturer);
-    for(auto& emulator : program->emulators) {
-      if(emulator->information.manufacturer != manufacturer) continue;
-      for(auto& medium : emulator->media) {
-        auto item = new MenuItem{&manufacturerMenu};
-        item->setText({medium.name, " ..."}).onActivate([=] {
-          program->loadMedium(*emulator, medium);
-        });
-      }
-    }
-  }
-  //add icarus menu options -- but only if icarus binary is present
-  if(execute("icarus", "--name").output.strip() == "icarus") {
-    libraryMenu.append(MenuSeparator());
-    libraryMenu.append(MenuItem().setText("Load ROM File ...").onActivate([&] {
-      audio->clear();
-      if(auto location = execute("icarus", "--import")) {
-        program->mediumQueue.append(location.output.strip());
-        program->loadMedium();
-      }
-    }));
-    libraryMenu.append(MenuItem().setText("Import ROM Files ...").onActivate([&] {
-      invoke("icarus");
-    }));
-  }
+  refreshLibraryMenu();
 
   systemMenu.setText("System").setVisible(false);
   powerSystem.setText("Power").onActivate([&] { program->powerCycle(); });
@@ -48,9 +16,14 @@ Presentation::Presentation() {
 
   settingsMenu.setText("Settings");
   videoScaleMenu.setText("Video Scale");
+  if(settings["Video/Scale"].text() == "Tiny") videoScaleTiny.setChecked();
   if(settings["Video/Scale"].text() == "Small") videoScaleSmall.setChecked();
   if(settings["Video/Scale"].text() == "Medium") videoScaleMedium.setChecked();
   if(settings["Video/Scale"].text() == "Large") videoScaleLarge.setChecked();
+  videoScaleTiny.setText("Tiny").onActivate([&] {
+    settings["Video/Scale"].setValue("Tiny");
+    resizeViewport();
+  });
   videoScaleSmall.setText("Small").onActivate([&] {
     settings["Video/Scale"].setValue("Small");
     resizeViewport();
@@ -114,23 +87,33 @@ Presentation::Presentation() {
 
   toolsMenu.setText("Tools").setVisible(false);
   saveStateMenu.setText("Save State");
+  saveSlot0.setText("Slot 0").onActivate([&] { program->saveState(0); });
   saveSlot1.setText("Slot 1").onActivate([&] { program->saveState(1); });
   saveSlot2.setText("Slot 2").onActivate([&] { program->saveState(2); });
   saveSlot3.setText("Slot 3").onActivate([&] { program->saveState(3); });
   saveSlot4.setText("Slot 4").onActivate([&] { program->saveState(4); });
   saveSlot5.setText("Slot 5").onActivate([&] { program->saveState(5); });
+  saveSlot6.setText("Slot 6").onActivate([&] { program->saveState(6); });
+  saveSlot7.setText("Slot 7").onActivate([&] { program->saveState(7); });
+  saveSlot8.setText("Slot 8").onActivate([&] { program->saveState(8); });
+  saveSlot9.setText("Slot 9").onActivate([&] { program->saveState(9); });
   loadStateMenu.setText("Load State");
+  loadSlot0.setText("Slot 0").onActivate([&] { program->loadState(0); });
   loadSlot1.setText("Slot 1").onActivate([&] { program->loadState(1); });
   loadSlot2.setText("Slot 2").onActivate([&] { program->loadState(2); });
   loadSlot3.setText("Slot 3").onActivate([&] { program->loadState(3); });
   loadSlot4.setText("Slot 4").onActivate([&] { program->loadState(4); });
   loadSlot5.setText("Slot 5").onActivate([&] { program->loadState(5); });
+  loadSlot6.setText("Slot 6").onActivate([&] { program->loadState(6); });
+  loadSlot7.setText("Slot 7").onActivate([&] { program->loadState(7); });
+  loadSlot8.setText("Slot 8").onActivate([&] { program->loadState(8); });
+  loadSlot9.setText("Slot 9").onActivate([&] { program->loadState(9); });
   cheatEditor.setText("Cheat Editor").onActivate([&] { toolsManager->show(0); });
   stateManager.setText("State Manager").onActivate([&] { toolsManager->show(1); });
   manifestViewer.setText("Manifest Viewer").onActivate([&] { toolsManager->show(2); });
 
   helpMenu.setText("Help");
-  documentation.setText("Documentation ...").onActivate([&] {
+  documentation.setText("Documentation for higan ...").onActivate([&] {
     invoke("http://doc.byuu.org/higan/");
   });
   about.setText("About ...").onActivate([&] {
@@ -169,17 +152,66 @@ Presentation::Presentation() {
   #endif
 }
 
+auto Presentation::refreshLibraryMenu() -> void {
+  libraryMenu.reset();
+  string_vector manufacturers;
+  for(auto& emulator : program->emulators) {
+    if(emulator->information.preAlpha && !settings["Library/ShowPreAlpha"].boolean()) continue;
+    if(!manufacturers.find(emulator->information.manufacturer)) {
+      manufacturers.append(emulator->information.manufacturer);
+    }
+  }
+  for(auto& manufacturer : manufacturers) {
+    Menu manufacturerMenu{&libraryMenu};
+    manufacturerMenu.setText(manufacturer);
+    for(uint domain : range(3)) {
+      for(auto& emulator : program->emulators) {
+        if(emulator->information.manufacturer != manufacturer) continue;
+        if(emulator->information.preAlpha && !settings["Library/ShowPreAlpha"].boolean()) continue;
+        for(auto& medium : emulator->media) {
+          if(medium.domain != domain) continue;
+          auto item = new MenuItem{&manufacturerMenu};
+          item->setText({emulator->information.preAlpha ? "(!) " : "", medium.name, " ..."}).onActivate([=] {
+            program->loadMedium(*emulator, medium);
+          });
+        }
+      }
+    }
+  }
+  //add icarus menu options -- but only if icarus binary is present
+  if(execute("icarus", "--name").output.strip() == "icarus") {
+    libraryMenu.append(MenuSeparator());
+    libraryMenu.append(MenuItem().setText("Load ROM File ...").onActivate([&] {
+      audio->clear();
+      if(auto location = execute("icarus", "--import")) {
+        program->mediumQueue.append(location.output.strip());
+        program->loadMedium();
+      }
+    }));
+    libraryMenu.append(MenuItem().setText("Import ROM Files ...").onActivate([&] {
+      invoke("icarus");
+    }));
+  }
+}
+
 auto Presentation::updateEmulator() -> void {
   if(!emulator) return;
   resetSystem.setVisible(emulator->information.resettable);
   inputPort1.setVisible(false).reset();
   inputPort2.setVisible(false).reset();
   inputPort3.setVisible(false).reset();
+  inputPort4.setVisible(false).reset();
 
   for(auto n : range(emulator->ports)) {
-    if(n >= 3) break;
+    if(n >= 4) break;
     auto& port = emulator->ports[n];
-    auto& menu = (n == 0 ? inputPort1 : n == 1 ? inputPort2 : inputPort3);
+    if(!port.plugAndPlay) continue;
+    auto& menu = (
+    n == 0 ? inputPort1 :
+    n == 1 ? inputPort2 :
+    n == 2 ? inputPort3 :
+             inputPort4
+    );
     menu.setText(port.name);
 
     Group devices;
@@ -202,7 +234,12 @@ auto Presentation::updateEmulator() -> void {
     }
   }
 
-  systemMenuSeparatorPorts.setVisible(inputPort1.visible() || inputPort2.visible() || inputPort3.visible());
+  systemMenuSeparatorPorts.setVisible(
+    inputPort1.visible() ||
+    inputPort2.visible() ||
+    inputPort3.visible() ||
+    inputPort4.visible()
+  );
 
   emulator->set("Blur Emulation", blurEmulation.checked());
   emulator->set("Color Emulation", colorEmulation.checked());
@@ -232,6 +269,7 @@ auto Presentation::resizeViewport() -> void {
   clearViewport();
 
   uint scale = 2;
+  if(settings["Video/Scale"].text() == "Tiny"  ) scale = 1;
   if(settings["Video/Scale"].text() == "Small" ) scale = 2;
   if(settings["Video/Scale"].text() == "Medium") scale = 3;
   if(settings["Video/Scale"].text() == "Large" ) scale = 4;
@@ -239,9 +277,9 @@ auto Presentation::resizeViewport() -> void {
   uint windowWidth = 0, windowHeight = 0;
   bool aspectCorrection = true;
   if(!fullScreen()) {
-    windowWidth  = 320 * scale;
-    windowHeight = 240 * scale;
     aspectCorrection = settings["Video/AspectCorrection"].boolean();
+    windowWidth  = (aspectCorrection ? 384 : 320) * scale;  //320 for NTSC, 384 for PAL and SECAM
+    windowHeight = 240 * scale;  //240 for NTSC, 288 for PAL and SECAM
   } else {
     windowWidth  = geometry().width();
     windowHeight = geometry().height();
@@ -279,6 +317,40 @@ auto Presentation::toggleFullScreen() -> void {
   resizeViewport();
 }
 
+/*
+auto Presentation::draw(image logo) -> void {
+  if(!video) return;
+
+  uint32_t* output;
+  uint length = 0;
+  uint width = viewport.geometry().width();
+  uint height = viewport.geometry().height();
+  if(video->lock(output, length, width, height)) {
+    uint cx = (width - logo.width()) - 10;
+    uint cy = (height - logo.height()) - 10;
+
+    image backdrop;
+    backdrop.allocate(width, height);
+    if(logo && !program->hasQuit) {
+    //backdrop.sphericalGradient(0xff0000bf, 0xff000000, logo.width(), logo.height() / 2, width, height);
+      backdrop.impose(image::blend::sourceAlpha, cx, cy, logo, 0, 0, logo.width(), logo.height());
+    } else {
+      backdrop.fill(0xff000000);
+    }
+
+    auto data = (uint32_t*)backdrop.data();
+    for(auto y : range(height)) {
+      auto dp = output + y * (length >> 2);
+      auto sp = data + y * width;
+      for(auto x : range(width)) *dp++ = *sp++;
+    }
+
+    video->unlock();
+    video->refresh();
+  }
+}
+*/
+
 auto Presentation::loadShaders() -> void {
   auto pathname = locate("Video Shaders/");
 
diff --git a/higan/target-tomoko/presentation/presentation.hpp b/higan/target-tomoko/presentation/presentation.hpp
index 497e1f5..b5991d5 100644
--- a/higan/target-tomoko/presentation/presentation.hpp
+++ b/higan/target-tomoko/presentation/presentation.hpp
@@ -2,18 +2,21 @@ struct AboutWindow : Window {
   AboutWindow();
 
   VerticalLayout layout{this};
-    Canvas canvas{&layout, Size{399, 95}, 15};
+    Canvas canvas{&layout, Size{256, 96}, 15};
     HorizontalLayout informationLayout{&layout, Size{~0, 0}};
       Label informationLeft{&informationLayout, Size{~0, 0}, 3};
       Label informationRight{&informationLayout, Size{~0, 0}};
+    Label informationBottom{&layout, Size{~0, 0}};
 };
 
 struct Presentation : Window {
   Presentation();
+  auto refreshLibraryMenu() -> void;
   auto updateEmulator() -> void;
   auto clearViewport() -> void;
   auto resizeViewport() -> void;
   auto toggleFullScreen() -> void;
+  //auto draw(image logo = {}) -> void;
   auto loadShaders() -> void;
 
   MenuBar menuBar{this};
@@ -25,14 +28,16 @@ struct Presentation : Window {
       Menu inputPort1{&systemMenu};
       Menu inputPort2{&systemMenu};
       Menu inputPort3{&systemMenu};
+      Menu inputPort4{&systemMenu};
       MenuSeparator systemMenuSeparatorUnload{&systemMenu};
       MenuItem unloadSystem{&systemMenu};
     Menu settingsMenu{&menuBar};
       Menu videoScaleMenu{&settingsMenu};
+        MenuRadioItem videoScaleTiny{&videoScaleMenu};
         MenuRadioItem videoScaleSmall{&videoScaleMenu};
         MenuRadioItem videoScaleMedium{&videoScaleMenu};
         MenuRadioItem videoScaleLarge{&videoScaleMenu};
-          Group videoScales{&videoScaleSmall, &videoScaleMedium, &videoScaleLarge};
+          Group videoScales{&videoScaleTiny, &videoScaleSmall, &videoScaleMedium, &videoScaleLarge};
         MenuSeparator videoScaleSeparator{&videoScaleMenu};
         MenuCheckItem aspectCorrection{&videoScaleMenu};
       Menu videoEmulationMenu{&settingsMenu};
@@ -53,17 +58,27 @@ struct Presentation : Window {
       MenuItem showConfiguration{&settingsMenu};
     Menu toolsMenu{&menuBar};
       Menu saveStateMenu{&toolsMenu};
+        MenuItem saveSlot0{&saveStateMenu};
         MenuItem saveSlot1{&saveStateMenu};
         MenuItem saveSlot2{&saveStateMenu};
         MenuItem saveSlot3{&saveStateMenu};
         MenuItem saveSlot4{&saveStateMenu};
         MenuItem saveSlot5{&saveStateMenu};
+        MenuItem saveSlot6{&saveStateMenu};
+        MenuItem saveSlot7{&saveStateMenu};
+        MenuItem saveSlot8{&saveStateMenu};
+        MenuItem saveSlot9{&saveStateMenu};
       Menu loadStateMenu{&toolsMenu};
+        MenuItem loadSlot0{&loadStateMenu};
         MenuItem loadSlot1{&loadStateMenu};
         MenuItem loadSlot2{&loadStateMenu};
         MenuItem loadSlot3{&loadStateMenu};
         MenuItem loadSlot4{&loadStateMenu};
         MenuItem loadSlot5{&loadStateMenu};
+        MenuItem loadSlot6{&loadStateMenu};
+        MenuItem loadSlot7{&loadStateMenu};
+        MenuItem loadSlot8{&loadStateMenu};
+        MenuItem loadSlot9{&loadStateMenu};
       MenuSeparator toolsMenuSeparator{&toolsMenu};
       MenuItem cheatEditor{&toolsMenu};
       MenuItem stateManager{&toolsMenu};
diff --git a/higan/target-tomoko/program/interface.cpp b/higan/target-tomoko/program/interface.cpp
index 415dac6..1cfe56f 100644
--- a/higan/target-tomoko/program/interface.cpp
+++ b/higan/target-tomoko/program/interface.cpp
@@ -105,9 +105,25 @@ auto Program::inputRumble(uint port, uint device, uint input, bool enable) -> vo
   }
 }
 
+auto Program::deviceChanged(uint port, uint device) -> void {
+  Menu& portMenu = (
+    port == 0 ? presentation->inputPort1 :
+    port == 1 ? presentation->inputPort2 :
+    port == 2 ? presentation->inputPort3 :
+                presentation->inputPort4
+  );
+  uint localDevice = 0;
+  for(uint i : range(device)) {
+    //Check if device is available for this port by checking its name's length
+    if(inputManager->emulator->ports[port].devices[i].name) localDevice++;
+  }
+  ((MenuRadioItem)portMenu.action(localDevice)).setChecked();
+}
+
 auto Program::dipSettings(Markup::Node node) -> uint {
-  return 0;
+  return dipSwitches->run(node);
 }
 
 auto Program::notify(string text) -> void {
+  MessageWindow().setTitle("higan").setText(text).information();
 }
diff --git a/higan/target-tomoko/program/medium.cpp b/higan/target-tomoko/program/medium.cpp
index afb13f9..fc570e8 100644
--- a/higan/target-tomoko/program/medium.cpp
+++ b/higan/target-tomoko/program/medium.cpp
@@ -17,7 +17,7 @@ auto Program::loadMedium() -> void {
 auto Program::loadMedium(Emulator::Interface& interface, const Emulator::Interface::Medium& medium) -> void {
   unloadMedium();
 
-  mediumPaths.append(locate({medium.name, ".sys/"}));
+  mediumPaths.append(locateSystem({medium.name, ".sys/"}));
 
   Emulator::audio.reset(2, audio->get(Audio::Frequency).get<uint>(44100));
   inputManager->bind(emulator = &interface);
diff --git a/higan/target-tomoko/program/program.cpp b/higan/target-tomoko/program/program.cpp
index 06aa549..8d19b2b 100644
--- a/higan/target-tomoko/program/program.cpp
+++ b/higan/target-tomoko/program/program.cpp
@@ -1,6 +1,11 @@
 #include "../tomoko.hpp"
+#include <a2600/interface/interface.hpp>
 #include <fc/interface/interface.hpp>
+#if defined(PROFILE_BALANCED)
+#include <sfc-balanced/interface/interface.hpp>
+#else
 #include <sfc/interface/interface.hpp>
+#endif
 #include <ms/interface/interface.hpp>
 #include <md/interface/interface.hpp>
 #include <gb/interface/interface.hpp>
@@ -16,6 +21,7 @@ Program::Program(string_vector args) {
   program = this;
   Application::onMain({&Program::main, this});
 
+  emulators.append(new Atari2600::Interface);
   emulators.append(new Famicom::Interface);
   emulators.append(new SuperFamicom::Interface);
   emulators.append(new MasterSystem::Interface);
@@ -51,6 +57,7 @@ Program::Program(string_vector args) {
   new SettingsManager;
   new CheatDatabase;
   new ToolsManager;
+  new DipSwitches;
   new AboutWindow;
 
   presentation->setFocused();
diff --git a/higan/target-tomoko/program/program.hpp b/higan/target-tomoko/program/program.hpp
index 4e75749..93418f7 100644
--- a/higan/target-tomoko/program/program.hpp
+++ b/higan/target-tomoko/program/program.hpp
@@ -12,6 +12,7 @@ struct Program : Emulator::Interface::Bind {
   auto audioSample(const double* samples, uint channels) -> void override;
   auto inputPoll(uint port, uint device, uint input) -> int16 override;
   auto inputRumble(uint port, uint device, uint input, bool enable) -> void override;
+  auto deviceChanged(uint port, uint device) -> void override;
   auto dipSettings(Markup::Node node) -> uint override;
   auto notify(string text) -> void override;
 
@@ -29,6 +30,7 @@ struct Program : Emulator::Interface::Bind {
   auto powerCycle() -> void;
   auto softReset() -> void;
   auto connectDevices() -> void;
+  auto rotate() -> void;
   auto showMessage(const string& text) -> void;
   auto updateStatusText() -> void;
   auto updateVideoPalette() -> void;
diff --git a/higan/target-tomoko/program/utility.cpp b/higan/target-tomoko/program/utility.cpp
index ecbecf2..761a5bc 100644
--- a/higan/target-tomoko/program/utility.cpp
+++ b/higan/target-tomoko/program/utility.cpp
@@ -25,6 +25,11 @@ auto Program::connectDevices() -> void {
   }
 }
 
+auto Program::rotate() -> void {
+  if(!emulator) return;
+  emulator->rotate();
+}
+
 auto Program::showMessage(const string& text) -> void {
   statusTime = time(0);
   statusMessage = text;
diff --git a/higan/target-tomoko/settings/advanced.cpp b/higan/target-tomoko/settings/advanced.cpp
index 56ff124..931f5b6 100644
--- a/higan/target-tomoko/settings/advanced.cpp
+++ b/higan/target-tomoko/settings/advanced.cpp
@@ -43,4 +43,10 @@ AdvancedSettings::AdvancedSettings(TabFrame* parent) : TabFrameItem(parent) {
   ignoreManifests.setText("Ignore Manifests").setChecked(settings["Library/IgnoreManifests"].boolean()).onToggle([&] {
     settings["Library/IgnoreManifests"].setValue(ignoreManifests.checked());
   });
+
+  showPreAlpha.setText("Show Pre-Alpha Cores").setChecked(settings["Library/ShowPreAlpha"].boolean()).onToggle([&] {
+    settings["Library/ShowPreAlpha"].setValue(showPreAlpha.checked());
+    presentation->refreshLibraryMenu();
+    settingsManager->input.refreshEmulatorList();
+  });
 }
diff --git a/higan/target-tomoko/settings/input.cpp b/higan/target-tomoko/settings/input.cpp
index 038de2c..1c931f4 100644
--- a/higan/target-tomoko/settings/input.cpp
+++ b/higan/target-tomoko/settings/input.cpp
@@ -11,9 +11,7 @@ InputSettings::InputSettings(TabFrame* parent) : TabFrameItem(parent) {
   allowInput.setText("Allow Input").setChecked(settings["Input/FocusLoss/AllowInput"].boolean()).onToggle([&] {
     settings["Input/FocusLoss/AllowInput"].setValue(allowInput.checked());
   });
-  for(auto& emulator : inputManager->emulators) {
-    emulatorList.append(ComboButtonItem().setText(emulator.name));
-  }
+  refreshEmulatorList();
   emulatorList.onChange([&] { reloadPorts(); });
   portList.onChange([&] { reloadDevices(); });
   deviceList.onChange([&] { reloadMappings(); });
@@ -38,6 +36,14 @@ InputSettings::InputSettings(TabFrame* parent) : TabFrameItem(parent) {
   reloadPorts();
 }
 
+auto InputSettings::refreshEmulatorList() -> void {
+  emulatorList.reset();
+  for(auto& emulator : inputManager->emulators) {
+    if(emulator.interface->information.preAlpha && !settings["Library/ShowPreAlpha"].boolean()) continue;
+    emulatorList.append(ComboButtonItem().setText(emulator.name));
+  }
+}
+
 auto InputSettings::updateControls() -> void {
   eraseButton.setEnabled((bool)mappingList.selected());
   assignMouse1.setVisible(false);
diff --git a/higan/target-tomoko/settings/settings.hpp b/higan/target-tomoko/settings/settings.hpp
index 351ad69..b23961b 100644
--- a/higan/target-tomoko/settings/settings.hpp
+++ b/higan/target-tomoko/settings/settings.hpp
@@ -59,6 +59,7 @@ struct AudioSettings : TabFrameItem {
 
 struct InputSettings : TabFrameItem {
   InputSettings(TabFrame*);
+  auto refreshEmulatorList() -> void;
   auto updateControls() -> void;
   auto activeEmulator() -> InputEmulator&;
   auto activePort() -> InputPort&;
@@ -129,6 +130,7 @@ struct AdvancedSettings : TabFrameItem {
       LineEdit libraryLocation{&libraryLayout, Size{~0, 0}};
       Button libraryChange{&libraryLayout, Size{0, 0}};
     CheckLabel ignoreManifests{&layout, Size{~0, 0}};
+    CheckLabel showPreAlpha{&layout, Size{~0, 0}};
 };
 
 struct SettingsManager : Window {
diff --git a/higan/target-tomoko/tomoko.cpp b/higan/target-tomoko/tomoko.cpp
index 8eaecde..650dc05 100644
--- a/higan/target-tomoko/tomoko.cpp
+++ b/higan/target-tomoko/tomoko.cpp
@@ -11,10 +11,40 @@ auto locate(string name) -> string {
   location = {Path::config(), "higan/", name};
   if(inode::exists(location)) return location;
 
+  location = {Path::local(), "higan/", name};
+  if(inode::exists(location)) return location;
+
+  location = {Path::config(), "higan/", name};
+  if(inode::exists(location)) {
+    if(Location::suffix(location) == ".bml" && Location::suffix(Location::dir(location)) != ".sys") {
+      directory::create({Path::config(), "higan/"});
+      file::copy(location, {Path::config(), "higan/", name});
+      return {Path::config(), "higan/", name};
+    }
+    return location;
+  }
+
+  location = {Path::local(), "higan/", name};
+  if(inode::exists(location)) {
+    if(Location::suffix(location) == ".bml" && Location::suffix(Location::dir(location)) != ".sys") {
+      directory::create({Path::local(), "higan/"});
+      file::copy(location, {Path::local(), "higan/", name});
+      return {Path::local(), "higan/", name};
+    }
+    return location;
+  }
+
   directory::create({Path::local(), "higan/"});
   return {Path::local(), "higan/", name};
 }
 
+auto locateSystem(string name) -> string {
+  string location = {settings["Library/Location"].text(), "System/", name};
+  if(inode::exists(location)) return location;
+
+  return locate(name);
+}
+
 #include <nall/main.hpp>
 auto nall::main(string_vector args) -> void {
   Application::setName("higan");
diff --git a/higan/target-tomoko/tomoko.hpp b/higan/target-tomoko/tomoko.hpp
index 9282945..ff98876 100644
--- a/higan/target-tomoko/tomoko.hpp
+++ b/higan/target-tomoko/tomoko.hpp
@@ -17,5 +17,7 @@ extern Emulator::Interface* emulator;
 #include "settings/settings.hpp"
 #include "tools/tools.hpp"
 #include "presentation/presentation.hpp"
+#include "dip-switches/dip-switches.hpp"
 
 auto locate(string name) -> string;
+auto locateSystem(string name) -> string;
diff --git a/higan/video/video.cpp b/higan/video/video.cpp
index fd14001..ca5bd06 100644
--- a/higan/video/video.cpp
+++ b/higan/video/video.cpp
@@ -20,6 +20,7 @@ auto Video::reset() -> void {
   height = 0;
   effects.colorBleed = false;
   effects.interframeBlending = false;
+  effects.rotation = 0;
 }
 
 auto Video::setInterface(Interface* interface) -> void {
@@ -85,6 +86,17 @@ auto Video::setEffect(Effect effect, const any& value) -> void {
   if(effect == Effect::InterframeBlending && value.is<bool>()) {
     effects.interframeBlending = value.get<bool>();
   }
+
+  if(effect == Effect::Scanlines && value.is<bool>()) {
+    effects.scanlines = value.get<bool>();
+    resize(this->width, this->height);
+  }
+
+  if(effect == Effect::Rotation) {
+    if(value.is<int>())   effects.rotation = value.get<int>();
+    if(value.is<uint>())  effects.rotation = value.get<uint>();
+    if(value.is<uint2>()) effects.rotation = value.get<uint2>();
+  }
 }
 
 auto Video::createSprite(uint width, uint height) -> shared_pointer<Sprite> {
@@ -104,35 +116,82 @@ auto Video::removeSprite(shared_pointer<Sprite> sprite) -> bool {
 }
 
 auto Video::refresh(uint32* input, uint pitch, uint width, uint height) -> void {
+  resize(width, height);
+  refreshRegion(input, pitch, 0, 0, width, height);
+}
+
+auto Video::resize(uint width, uint height) -> void {
   if(this->width != width || this->height != height) {
     delete output;
-    output = new uint32[width * height]();
+    output = new uint32[width * (height << effects.scanlines)]();
     this->width = width;
     this->height = height;
   }
+}
 
+auto Video::refreshRegion(uint32* input, uint pitch, uint origin_x, uint origin_y, uint width, uint height, uint paletteOffset) -> void {
   pitch >>= 2;  //bytes to words
-  for(uint y : range(height)) {
-    auto source = input + y * pitch;
-    auto target = output + y * width;
 
-    if(!effects.interframeBlending) {
-      for(uint x : range(width)) {
-        auto color = palette[*source++];
-        *target++ = color;
+  if(!effects.scanlines) {
+    int increment;
+    switch(effects.rotation) {
+    case 0: increment =  1;            break;
+    case 1: increment =  this->height; break;
+    case 2: increment = -1;            break;
+    case 3: increment = -this->height; break;
+    }
+    for(uint y : range(height)) {
+      uint32* source = input + y * pitch;
+      uint32* target = output + (origin_y + y) * this->width + origin_x;
+      switch(effects.rotation) {
+      case 1: target = output + (this->height - 1 - origin_y - y); break;
+      case 2: target = output + (this->height - 1 - origin_y - y) * this->width + this->width - 1 - origin_x; break;
+      case 3: target = output + (this->width - 1 - origin_x) * this->height + origin_y + y; break;
       }
-    } else {
-      for(uint x : range(width)) {
-        auto a = *target;
-        auto b = palette[*source++];
-        *target++ = (a + b - ((a ^ b) & 0x01010101)) >> 1;
+
+      if(!effects.interframeBlending) {
+        for(uint x : range(width)) {
+          auto color = palette[*source++ + paletteOffset];
+          *target = color;
+          target += increment;
+        }
+      } else {
+        for(uint x : range(width)) {
+          auto a = *target;
+          auto b = palette[*source++ + paletteOffset];
+          *target = (a + b - ((a ^ b) & 0x01010101)) >> 1;
+          target += increment;
+        }
+      }
+    }
+  } else {
+    for(uint y : range(height)) {
+      auto source = input + y * pitch;
+      auto targetLo = output + (origin_y + y) * this->width * 2 + origin_x;
+      auto targetHi = output + (origin_y + y) * this->width * 2 + origin_x + this->width;
+
+      if(!effects.interframeBlending) {
+        for(uint x : range(width)) {
+          auto color = palette[*source++ + paletteOffset];
+          *targetLo++ = color;
+          *targetHi++ = (255 << 24) | ((color & 0xfefefe) >> 1);
+        }
+      } else {
+        for(uint x : range(width)) {
+          auto a = *targetLo;
+          auto b = palette[*source++ + paletteOffset];
+          *targetLo++ = (a + b - ((a ^ b) & 0x01010101)) >> 1;
+          auto c = *targetHi;
+          auto d = (255 << 24) | ((b & 0xfefefe) >> 1);
+          *targetHi++ = (c + d - ((c ^ d) & 0x01010101)) >> 1;
+        }
       }
     }
   }
 
   if(effects.colorBleed) {
     for(uint y : range(height)) {
-      auto target = output + y * width;
+      auto target = output + (origin_y + y) * this->width + origin_x;
       for(uint x : range(width)) {
         auto a = target[x];
         auto b = target[x + (x != width - 1)];
@@ -158,7 +217,18 @@ auto Video::refresh(uint32* input, uint pitch, uint width, uint height) -> void
     }
   }
 
-  interface->videoRefresh(output, width * sizeof(uint32), width, height);
+  if(!effects.rotation.bit(0)) {
+    interface->videoRefresh(output, this->width * sizeof(uint32), this->width, this->height << effects.scanlines);
+  } else {
+    interface->videoRefresh(
+      output, (this->height << effects.scanlines) * sizeof(uint32),
+      this->height << effects.scanlines, this->width
+    );
+  }
+}
+
+auto Video::clear() -> void {
+  memory::fill(output, width * (height << effects.scanlines) * sizeof(uint32));
 }
 
 }
diff --git a/higan/video/video.hpp b/higan/video/video.hpp
index e4a5a12..5ddb3b4 100644
--- a/higan/video/video.hpp
+++ b/higan/video/video.hpp
@@ -10,6 +10,8 @@ struct Video {
   enum class Effect : uint {
     ColorBleed,
     InterframeBlending,
+    Scanlines,
+    Rotation,
   };
 
   ~Video();
@@ -28,6 +30,9 @@ struct Video {
   auto removeSprite(shared_pointer<Sprite> sprite) -> bool;
 
   auto refresh(uint32* input, uint pitch, uint width, uint height) -> void;
+  auto resize(uint width, uint height) -> void;
+  auto refreshRegion(uint32* input, uint pitch, uint origin_x, uint origin_y, uint width, uint height, uint paletteOffset = 0) -> void;
+  auto clear() -> void;
 
 private:
   Emulator::Interface* interface = nullptr;
@@ -47,6 +52,8 @@ private:
   struct Effects {
     bool colorBleed = false;
     bool interframeBlending = false;
+    bool scanlines = false;
+    uint2 rotation = 0;
   } effects;
 
   friend class Sprite;
diff --git a/higan/ws/interface/interface.cpp b/higan/ws/interface/interface.cpp
index be37624..344bfc9 100644
--- a/higan/ws/interface/interface.cpp
+++ b/higan/ws/interface/interface.cpp
@@ -8,6 +8,7 @@ Settings settings;
 Interface::Interface() {
   interface = this;
 
+  information.preAlpha     = false;
   information.manufacturer = "Bandai";
   information.name         = "WonderSwan";
   information.overscan     = false;
@@ -16,13 +17,12 @@ Interface::Interface() {
   information.capability.states = true;
   information.capability.cheats = true;
 
-  media.append({ID::WonderSwan,      "WonderSwan",       "ws" });
-  media.append({ID::WonderSwanColor, "WonderSwan Color", "wsc"});
+  media.append({ID::WonderSwan,      "WonderSwan",       "ws",  Domain::Portable});
+  media.append({ID::WonderSwanColor, "WonderSwan Color", "wsc", Domain::Portable});
 
-  Port hardwareHorizontalPort{ID::Port::HardwareHorizontal, "Hardware - Horizontal"};
-  Port hardwareVerticalPort{ID::Port::HardwareVertical, "Hardware - Vertical"};
+  Port hardwarePort{ID::Port::Hardware, "Hardware", PlugAndPlay};
 
-  { Device device{ID::Device::Controls, "Controls"};
+  { Device device{ID::Device::HorizontalControls, "Horizontal Controls"};
     device.inputs.append({0, "Y1"});
     device.inputs.append({0, "Y2"});
     device.inputs.append({0, "Y3"});
@@ -34,13 +34,25 @@ Interface::Interface() {
     device.inputs.append({0, "B"});
     device.inputs.append({0, "A"});
     device.inputs.append({0, "Start"});
-    device.inputs.append({0, "Rotate"});
-    hardwareHorizontalPort.devices.append(device);
-    hardwareVerticalPort.devices.append(device);
+    hardwarePort.devices.append(device);
   }
 
-  ports.append(move(hardwareHorizontalPort));
-  ports.append(move(hardwareVerticalPort));
+  { Device device{ID::Device::VerticalControls, "Vertical Controls"};
+    device.inputs.append({0, "Y1"});
+    device.inputs.append({0, "Y2"});
+    device.inputs.append({0, "Y3"});
+    device.inputs.append({0, "Y4"});
+    device.inputs.append({0, "X1"});
+    device.inputs.append({0, "X2"});
+    device.inputs.append({0, "X3"});
+    device.inputs.append({0, "X4"});
+    device.inputs.append({0, "B"});
+    device.inputs.append({0, "A"});
+    device.inputs.append({0, "Start"});
+    hardwarePort.devices.append(device);
+  }
+
+  ports.append(move(hardwarePort));
 }
 
 auto Interface::manifest() -> string {
@@ -118,6 +130,10 @@ auto Interface::unload() -> void {
   system.unload();
 }
 
+auto Interface::connect(uint port, uint device) -> void {
+  if(port == 0 && system.orientation() != device) system.rotate();
+}
+
 auto Interface::power() -> void {
   system.power();
 }
@@ -126,6 +142,11 @@ auto Interface::run() -> void {
   system.run();
 }
 
+auto Interface::rotate() -> void {
+  system.rotate();
+  deviceChanged(0, system.orientation());
+}
+
 auto Interface::serialize() -> serializer {
   system.runToSave();
   return system.serialize();
diff --git a/higan/ws/interface/interface.hpp b/higan/ws/interface/interface.hpp
index 1119d6f..55944c8 100644
--- a/higan/ws/interface/interface.hpp
+++ b/higan/ws/interface/interface.hpp
@@ -8,12 +8,12 @@ struct ID {
   };
 
   struct Port { enum : uint {
-    HardwareHorizontal,
-    HardwareVertical,
+    Hardware,
   };};
 
   struct Device { enum : uint {
-    Controls,
+    HorizontalControls,
+    VerticalControls,
   };};
 };
 
@@ -39,8 +39,10 @@ struct Interface : Emulator::Interface {
   auto save() -> void override;
   auto unload() -> void override;
 
+  auto connect(uint port, uint device) -> void;
   auto power() -> void override;
   auto run() -> void override;
+  auto rotate() -> void override;
 
   auto serialize() -> serializer override;
   auto unserialize(serializer&) -> bool override;
diff --git a/higan/ws/memory/memory.cpp b/higan/ws/memory/memory.cpp
index 9c402a5..b89eb79 100644
--- a/higan/ws/memory/memory.cpp
+++ b/higan/ws/memory/memory.cpp
@@ -36,7 +36,7 @@ auto Bus::read(uint20 addr) -> uint8 {
   if(addr.bits(16,19) == 1) data = cartridge.ramRead(addr);
   if(addr.bits(16,19) >= 2) data = cartridge.romRead(addr);
   if(cheat) {
-    if(auto result = cheat.find(addr, data)) data = result();
+    if(auto result = cheat.find<1>(addr, data)) data = result();
   }
   return data;
 }
diff --git a/higan/ws/ppu/ppu.cpp b/higan/ws/ppu/ppu.cpp
index 8027983..a6b018f 100644
--- a/higan/ws/ppu/ppu.cpp
+++ b/higan/ws/ppu/ppu.cpp
@@ -28,10 +28,7 @@ auto PPU::main() -> void {
         if(l.screenTwoEnable) renderScreenTwo();
         if(l.spriteEnable) renderSprite();
       }
-      switch(l.orientation) {
-      case 0: output[(s.vclk + 40) * 224 + s.hclk] = s.pixel.color; break;
-      case 1: output[(223 - s.hclk) * 224 + (s.vclk + 40)] = s.pixel.color; break;
-      }
+      output[s.vclk * 224 + s.hclk] = s.pixel.color;
       step(1);
     }
     step(32);
@@ -76,14 +73,10 @@ auto PPU::frame() -> void {
   s.field = !s.field;
   s.vclk = 0;
   scheduler.exit(Scheduler::Event::Frame);
-  if(l.orientation != system.orientation()) {
-    l.orientation = system.orientation();
-    memory::fill(output, 224 * 224 * sizeof(uint32));
-  }
 }
 
 auto PPU::refresh() -> void {
-  Emulator::video.refresh(output, 224 * sizeof(uint32), 224, 224);
+  Emulator::video.refreshRegion(output, 224 * sizeof(uint32), 0, (224 - 144) / 2, 224, 144);
 }
 
 auto PPU::step(uint clocks) -> void {
diff --git a/higan/ws/ppu/ppu.hpp b/higan/ws/ppu/ppu.hpp
index 4a2f94f..15d432a 100644
--- a/higan/ws/ppu/ppu.hpp
+++ b/higan/ws/ppu/ppu.hpp
@@ -35,7 +35,7 @@ struct PPU : Thread, IO {
     uint12 color;
   };
 
-  uint32 output[224 * 224];
+  uint32 output[224 * 144];
 
   struct State {
     bool field;
@@ -45,9 +45,6 @@ struct PPU : Thread, IO {
   } s;
 
   struct Latches {
-    //frame(), power()
-    bool orientation;
-
     //latchRegisters()
     uint8 backColor;
 
diff --git a/higan/ws/ppu/serialization.cpp b/higan/ws/ppu/serialization.cpp
index 5ed28a1..e0f682c 100644
--- a/higan/ws/ppu/serialization.cpp
+++ b/higan/ws/ppu/serialization.cpp
@@ -7,7 +7,6 @@ auto PPU::serialize(serializer& s) -> void {
   s.integer((uint&)this->s.pixel.source);
   s.integer(this->s.pixel.color);
 
-  s.integer(l.orientation);
   s.integer(l.backColor);
   s.integer(l.screenOneEnable);
   s.integer(l.screenOneMapBase);
diff --git a/higan/ws/system/system.cpp b/higan/ws/system/system.cpp
index f8b569e..736e4ea 100644
--- a/higan/ws/system/system.cpp
+++ b/higan/ws/system/system.cpp
@@ -63,6 +63,7 @@ auto System::unload() -> void {
 auto System::power() -> void {
   Emulator::video.reset();
   Emulator::video.setInterface(interface);
+  Emulator::video.resize(224, 224);
   configureVideoPalette();
   configureVideoEffects();
 
@@ -101,9 +102,8 @@ auto System::runToSave() -> void {
 }
 
 auto System::pollKeypad() -> void {
-  uint port = !_orientation ? ID::Port::HardwareHorizontal : ID::Port::HardwareVertical;
-  uint device = ID::Device::Controls;
-  bool rotate = keypad.rotate;
+  uint port = ID::Port::Hardware;
+  uint device = !_orientation ? ID::Device::HorizontalControls : ID::Device::VerticalControls;
 
   keypad.y1 = interface->inputPoll(port, device, 0);
   keypad.y2 = interface->inputPoll(port, device, 1);
@@ -116,7 +116,6 @@ auto System::pollKeypad() -> void {
   keypad.b = interface->inputPoll(port, device, 8);
   keypad.a = interface->inputPoll(port, device, 9);
   keypad.start = interface->inputPoll(port, device, 10);
-  keypad.rotate = interface->inputPoll(port, device, 11);
 
   if(keypad.y1 || keypad.y2 || keypad.y3 || keypad.y4
   || keypad.x1 || keypad.x2 || keypad.x3 || keypad.x4
@@ -124,10 +123,11 @@ auto System::pollKeypad() -> void {
   ) {
     cpu.raise(CPU::Interrupt::Input);
   }
+}
 
-  if(!rotate && keypad.rotate) {
-    _orientation = !_orientation;
-  }
+auto System::rotate() -> void {
+  _orientation = !_orientation;
+  configureVideoEffects();
 }
 
 }
diff --git a/higan/ws/system/system.hpp b/higan/ws/system/system.hpp
index af3a119..a27790a 100644
--- a/higan/ws/system/system.hpp
+++ b/higan/ws/system/system.hpp
@@ -16,6 +16,7 @@ struct System : IO {
   auto run() -> void;
   auto runToSave() -> void;
   auto pollKeypad() -> void;
+  auto rotate() -> void;
 
   //io.cpp
   auto portRead(uint16 addr) -> uint8 override;
@@ -42,7 +43,6 @@ struct System : IO {
     bool y1, y2, y3, y4;
     bool x1, x2, x3, x4;
     bool b, a, start;
-    bool rotate;
   } keypad;
 
 privileged:
diff --git a/higan/ws/system/video.cpp b/higan/ws/system/video.cpp
index f77e7ae..d981e15 100644
--- a/higan/ws/system/video.cpp
+++ b/higan/ws/system/video.cpp
@@ -4,4 +4,6 @@ auto System::configureVideoPalette() -> void {
 
 auto System::configureVideoEffects() -> void {
   Emulator::video.setEffect(Emulator::Video::Effect::InterframeBlending, settings.blurEmulation);
+  Emulator::video.setEffect(Emulator::Video::Effect::Rotation, !orientation() ? 0 : 3);
+  Emulator::video.clear();
 }
diff --git a/hiro/gtk/keyboard.cpp b/hiro/gtk/keyboard.cpp
index 7a579d4..57cd570 100644
--- a/hiro/gtk/keyboard.cpp
+++ b/hiro/gtk/keyboard.cpp
@@ -19,7 +19,7 @@ auto pKeyboard::pressed(unsigned code) -> bool {
   #if defined(DISPLAY_XORG)
   XQueryKeymap(pApplication::display, state);
   #endif
-  return _pressed(state, code);
+  return _pressed(state, settings->keycodes[code]);
 }
 
 auto pKeyboard::_pressed(const char* state, uint16_t code) -> bool {
diff --git a/hiro/qt/keyboard.cpp b/hiro/qt/keyboard.cpp
index 4872be6..81dd3ba 100644
--- a/hiro/qt/keyboard.cpp
+++ b/hiro/qt/keyboard.cpp
@@ -15,7 +15,7 @@ auto pKeyboard::poll() -> vector<bool> {
 auto pKeyboard::pressed(unsigned code) -> bool {
   char state[256];
   XQueryKeymap(pApplication::display, state);
-  return _pressed(state, code);
+  return _pressed(state, settings->keycodes[code]);
 }
 
 auto pKeyboard::_pressed(const char* state, uint16_t code) -> bool {
diff --git a/hiro/windows/keyboard.cpp.orig b/hiro/windows/keyboard.cpp.orig
new file mode 100644
index 0000000..c269ba3
--- /dev/null
+++ b/hiro/windows/keyboard.cpp.orig
@@ -0,0 +1,99 @@
+#if defined(Hiro_Keyboard)
+
+namespace hiro {
+
+vector<uint16_t> pKeyboard::keycodes;
+
+auto pKeyboard::poll() -> vector<bool> {
+  vector<bool> result;
+  for(auto& code : keycodes) result.append(pressed(code));
+  return result;
+}
+
+auto pKeyboard::pressed(unsigned code) -> bool {
+  uint8_t lo = code >> 0;
+  uint8_t hi = code >> 8;
+  if(lo && GetAsyncKeyState(lo) & 0x8000) return true;
+  if(hi && GetAsyncKeyState(hi) & 0x8000) return true;
+  return false;
+}
+
+auto pKeyboard::initialize() -> void {
+  auto append = [](unsigned lo, unsigned hi = 0) {
+    keycodes.append(lo << 0 | hi << 8);
+  };
+
+  #define map(name, ...) if(key == name) { append(__VA_ARGS__); continue; }
+  for(auto& key : Keyboard::keys) {
+    #include <hiro/platform/windows/keyboard.hpp>
+  //print("[hiro/windows] warning: unhandled key: ", key, "\n");
+    append(0);
+  }
+  #undef map
+}
+
+auto pKeyboard::_translate(unsigned code, unsigned flags) -> signed {
+  bool numLock = GetKeyState(VK_NUMLOCK);
+  bool capsLock = GetKeyState(VK_CAPITAL);
+  bool shifted = (GetAsyncKeyState(VK_LSHIFT) & 0x8000) || (GetAsyncKeyState(VK_RSHIFT) & 0x8000);
+  bool pressed = GetAsyncKeyState(code) & 0x8000;
+  bool extended = flags & (1 << 24);
+
+  switch(code) {
+  case VK_OEM_3: return !shifted ? '`' : '~';
+  case '1': return !shifted ? '1' : '!';
+  case '2': return !shifted ? '2' : '@';
+  case '3': return !shifted ? '3' : '#';
+  case '4': return !shifted ? '4' : '$';
+  case '5': return !shifted ? '5' : '%';
+  case '6': return !shifted ? '6' : '^';
+  case '7': return !shifted ? '7' : '&';
+  case '8': return !shifted ? '8' : '*';
+  case '9': return !shifted ? '9' : '(';
+  case '0': return !shifted ? '0' : ')';
+  case VK_OEM_MINUS: return !shifted ? '-' : '_';
+  case VK_OEM_PLUS: return !shifted ? '=' : '+';
+  case VK_BACK: return '\b';
+
+  case VK_TAB: return '\t';
+  case VK_RETURN: return '\n';
+  case VK_SPACE: return ' ';
+
+  case VK_OEM_4: return !shifted ? '[' : '{';
+  case VK_OEM_6: return !shifted ? ']' : '}';
+  case VK_OEM_5: return !shifted ? '\\' : '|';
+  case VK_OEM_1: return !shifted ? ';' : ':';
+  case VK_OEM_7: return !shifted ? '\'' : '\"';
+  case VK_OEM_COMMA: return !shifted ? ',' : '<';
+  case VK_OEM_PERIOD: return !shifted ? '.' : '>';
+  case VK_OEM_2: return !shifted ? '/' : '?';
+
+  case 'A': case 'B': case 'C': case 'D': case 'E': case 'F': case 'G': case 'H': case 'I': case 'J': case 'K': case 'L': case 'M':
+  case 'N': case 'O': case 'P': case 'Q': case 'R': case 'S': case 'T': case 'U': case 'V': case 'W': case 'X': case 'Y': case 'Z':
+    if(capsLock) return !shifted ? code : code + 32;
+    else return !shifted ? code + 32 : code;
+
+  case VK_DIVIDE: return '/';
+  case VK_MULTIPLY: return '*';
+  case VK_SUBTRACT: return '-';
+  case VK_ADD: return '+';
+  case VK_DECIMAL: return '.';
+
+  case VK_NUMPAD1: return numLock ? '1' : 0;
+  case VK_NUMPAD2: return numLock ? '2' : 0;
+  case VK_NUMPAD3: return numLock ? '3' : 0;
+  case VK_NUMPAD4: return numLock ? '4' : 0;
+  case VK_NUMPAD5: return numLock ? '5' : 0;
+  case VK_NUMPAD6: return numLock ? '6' : 0;
+  case VK_NUMPAD7: return numLock ? '7' : 0;
+  case VK_NUMPAD8: return numLock ? '8' : 0;
+  case VK_NUMPAD9: return numLock ? '9' : 0;
+  case VK_NUMPAD0: return numLock ? '0' : 0;
+  }
+
+  return 0;
+}
+
+}
+
+#endif
diff --git a/hiro/windows/keyboard.cpp.rej b/hiro/windows/keyboard.cpp.rej
new file mode 100644
index 0000000..41883fb
--- /dev/null
+++ b/hiro/windows/keyboard.cpp.rej
@@ -0,0 +1,19 @@
+--- hiro/windows/keyboard.cpp
++++ hiro/windows/keyboard.cpp
+@@ -6,11 +6,15 @@ vector<uint16_t> pKeyboard::keycodes;
+ 
+ auto pKeyboard::poll() -> vector<bool> {
+   vector<bool> result;
+-  for(auto& code : keycodes) result.append(pressed(code));
++  for(auto& code : keycodes) result.append(_pressed(code));
+   return result;
+ }
+ 
+ auto pKeyboard::pressed(unsigned code) -> bool {
++  return _pressed(keycodes[code]);
++}
++
++auto pKeyboard::_pressed(uint16_t code) -> bool {
+   uint8_t lo = code >> 0;
+   uint8_t hi = code >> 8;
+   if(lo && GetAsyncKeyState(lo) & 0x8000) return true;
diff --git a/hiro/windows/keyboard.hpp b/hiro/windows/keyboard.hpp
index 5cf00c8..6b2ecb8 100644
--- a/hiro/windows/keyboard.hpp
+++ b/hiro/windows/keyboard.hpp
@@ -6,10 +6,11 @@ struct pKeyboard {
   static auto poll() -> vector<bool>;
   static auto pressed(unsigned code) -> bool;
 
-  static auto initialize() -> void;
-
+  static auto _pressed(uint16_t code) -> bool;
   static auto _translate(unsigned code, unsigned flags) -> signed;
 
+  static auto initialize() -> void;
+
   static vector<uint16_t> keycodes;
 };
 
diff --git a/icarus/Database/Famicom.bml b/icarus/Database/Famicom.bml
new file mode 100644
index 0000000..0cebb1b
--- /dev/null
+++ b/icarus/Database/Famicom.bml
@@ -0,0 +1,6155 @@
+database revision=2012-10-22 owner=BootGod
+  :hex_usr adds games one at a time from BootGod's database at
+  :http://bootgod.dyndns.org:7777/.
+
+cartridge sha256:a75af9b5972f22056d016474234b03213e5d7932fb1e81890d58bd100bb8d0d2
+  :board region=ntsc id:IREM-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   IF-02
+  :  board:    IREM-01-V
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     10-Yard Fight
+  :  title:    10ã¤ã¼ããã¡ã¤ã
+
+cartridge sha256:3669f979465f03cba7d55c9ad3080b8292557514ef0e7dba0b1de98313e6f392
+  :board region=ntsc id:IREM-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   IF-02
+  :  board:    IREM-01-V
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     10-Yard Fight
+  :  title:    10ã¤ã¼ããã¡ã¤ã
+
+cartridge sha256:28cdd5af3c441f361cfa3a21ec97a1ab08691dd5d73f7a10a372fbd1fffb8ba7
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   CAP-43
+  :  board:    HVC-UNROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     1943 - The Battle of Valhalla
+  :  title:    1943: The Battle of Valhalla
+
+cartridge sha256:42b21cc066490b78afca98224d642507a4dbb74c1483c3d63fa85ffc883fe640
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KYG-AX
+  :  board:    HVC-SLROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Airwolf
+  :  title:    ã¨ã¢ã¼ã¦ã«ã
+
+cartridge sha256:4fb12ad1c791c7ee8d5ec824eff871d71b43b92c4e93b45ed0b60f022459b917
+  :board region=ntsc id:SUNSOFT-4
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   SUN-AFB-6200
+  :  board:    UNK-SUNSOFT-AFB
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     After Burner II
+  :  title:    ã¢ãã¿ã¼ãã¼ãã¼II
+
+cartridge sha256:c70f0f5d4054ce7c4850259879c9823add73ccc234ddcf96d95681bb78bd2c58
+  :board region=ntsc id:KONAMI-VRC-6
+  :  chip type=VRC6
+  :    pinout a0=0 a1=1
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KON-RC845
+  :  board:    351951
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Akumajou Densetsu
+  :  title:    æªé­åä¼èª¬
+
+cartridge sha256:60b1aebdc0a19afc5d3e7dc4f09d8a968580e007197461a8a142656702c27f0d
+  :board region=ntsc id:KONAMI-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   KON-RV003
+  :  board:    353525
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Akumajou Dracula
+  :  title:    æªé­åãã©ã­ã¥ã©
+
+cartridge sha256:c972cea7f55db3f92b775bd3878ce477feace79e3325e8bbcdd65fe780e2f50f
+  :board region=ntsc id:TAITO-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   TFC-AN-5400-10
+  :  board:    FC-010
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Arkanoid
+  :  title:    ã¢ã«ã«ãã¤ã
+
+cartridge sha256:54526dc9444c0eb4b0e5814f98b5e522bcb9881a6f2c0644fc7a21ca8c03502b
+  :board region=ntsc id:HVC-TLSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IGS-9T
+  :  board:    HVC-TLSROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Armadillo
+  :  title:    ã¢ã«ãã¸ã­
+
+cartridge sha256:2b4ac20082e2f45a8f8fd4922a0e995829719a523e118a9eec891c3206adf25b
+  :board region=ntsc id:HVC-CNROM
+  :  security pass=0x3
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   DFC-BW
+  :  board:    HVC-CNROM-256K-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     B-Wings
+  :  title:    B-ã¯ã¤ã³ã°
+
+cartridge sha256:a9d7e89bd4ea28cfd169e32c4516ef5d059e19afb9dfa4ede8412f2373dfb0a7
+  :board region=ntsc id:NAMCOT-3401
+  :  chip type=109
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NAM-NBL-3900-16
+  :  board:    3401
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Babel no Tou
+  :  title:    ããã«ã®å¡
+
+cartridge sha256:3c8dde4541766bff7fc5b6d987e1ef985eb07375ede46bb3b48536ac133fd85a
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-BF
+  :  board:    HVC-RROM-05S
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Balloon Fight
+  :  title:    ãã«ã¼ã³ãã¡ã¤ã
+
+cartridge sha256:a0fe077a6f0babf27b691e42db79cb4fc580a2f358f679b996fb17c2b0a68f59
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-BA
+  :  board:    HVC-RROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Baseball
+  :  title:    ãã¼ã¹ãã¼ã«
+
+cartridge sha256:64832bef6533d98f49e807c000537c8cb26ef94e6c3f871b8b6b35c5a11e427b
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NBC-4500-09
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Battle City
+  :  title:    ããã«ã·ãã£ã¼
+
+cartridge sha256:bad75642a65cde63265f5f0bf0ad8d002da0ae5834a27aae4eb62651de7980cf
+  :board region=ntsc id:JALECO-JF-14
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   JF-14
+  :  board:    JF-14
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Bio Senshi Dan - Increaser Tono Tatakai
+  :  title:    ãã¤ãªæ¦å£«DAN ã¤ã³ã¯ãªã¼ãµã¼ã¨ã®éã
+
+cartridge sha256:acf054b0886a2ca74a0280fc36bc1d55e9845acc29759f1893c1da4c1389f9c2
+  :board region=ntsc id:HVC-CNROM
+  :  security pass=0x3
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   TFS-BK
+  :  board:    HVC-CNROM-256K-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Bird Week
+  :  title:    ãã¼ãã»ã¦ã£ã¼ã¯
+
+cartridge sha256:af7a31a57dd701f57b964667549240943c76bdd2a2044ad99dfeba47883f1b9b
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-BL
+  :  board:    HVC-NROM-256K-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Block
+  :  title:    ãã­ãã¯
+
+cartridge sha256:72c69f068099e42844bfe17e7d37f439243fad10b283650cac041e78443e0300
+  :board region=ntsc id:JALECO-JF-05
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   JF-05
+  :  board:    JF-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     City Connection
+  :  title:    ã·ãã£ã³ãã¯ã·ã§ã³
+
+cartridge sha256:62c9d4e0578cb1e615ce9bb2c8ebc15b1e8de4c928c5c07ba9a85c11aa36ae4d
+  :board region=ntsc id:KONAMI-VRC-2
+  :  chip type=VRC2
+  :    pinout a0=0 a1=1
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KON-RC826
+  :  board:    LROG009-00
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Contra
+  :  title:    ã³ã³ãã© é­æç¾
+
+cartridge sha256:3f243f6cf4b33d25d76c7cf9459e82bcd5367aa001f4c36fdf1c5728429bed0a
+  :board region=ntsc id:BANDAI-LZ93D50
+  :  chip type=LZ93D50
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   BA-SHINCHAN
+  :  board:    DRAGON BALL Z-B
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Crayon Shin-chan - Ora to Poi Poi
+  :  title:    ã¯ã¬ã¨ã³ããã¡ãã ãªã©ã¨ãã¤ãã¤
+
+cartridge sha256:e24d3c754dce20e27046afeacb2dfc217950d4be766ded80c20283392cb3891e
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC08
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NBF-CY (04)
+  :  board:    HVC-UNROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Crazy Climber
+  :  title:    ã¯ã¬ã¤ã¸ã¼ã¯ã©ã¤ãã¼
+
+cartridge sha256:a1d9bcf389d6837581cd33a26b4e13917d084e3e69dbe89453e443fc9976fa22
+  :board region=ntsc id:IREM-H3001
+  :  chip type=IF-H3001
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   IF-29
+  :  board:    FC-00-017C
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Daiku no Gen-san 2 - Akage no Dan no Gyakushuu
+  :  title:    å¤§å·¥ã®æºãã2 èµ¤æ¯ã®ãã³ã®éè¥²
+
+cartridge sha256:d2140fc2e6354a9f4d0154dabac757e5559890edba4885799c1c979d8b7a8b20
+  :board region=ntsc id:NAMCOT-3453
+  :  chip type=118
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NAM-DM-5500
+  :  board:    UNK-NAMCOT-DM
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Devil Man
+  :  title:    ããã«ãã³
+
+cartridge sha256:2fb438d10854136ec40b50410475d575860e24bc23d7b8c2a9ca27b87d14ba46
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-DD
+  :  board:    2
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Devil World
+  :  title:    ããã«ã¯ã¼ã«ã
+
+cartridge sha256:c0eb90e99bb35d9f5c6dd05dc38a7cb93d3d41701b66a0a0dca2ab4f314465dd
+  :board region=ntsc id:HVC-SROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-DD
+  :  board:    HVC-SROM-03
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Devil World
+  :  title:    ããã«ã¯ã¼ã«ã
+
+cartridge sha256:7c8b6add50b20e4612e3043df0671e701cd2aa163e4af864913e3940feee27f2
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NDD-4500-06
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dig Dug
+  :  title:    ãã£ã°ãã°
+
+cartridge sha256:dceca6fe26ef2e3cb2cf4100df50b6b6a5d37ef19193144e30dce01af823cf88
+  :board region=ntsc id:NAMCOT-3312
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NDDII-4500-14
+  :  board:    3312
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dig Dug II
+  :  title:    ãã£ã°ãã°II
+
+cartridge sha256:0cfdba2ec06229dfda9d68720d1ce45085e430e75f696092829d4a9325704b73
+  :board region=ntsc id:NAMCOT-3446
+  :  chip type=108
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NAM-MT-4900
+  :  board:    3446
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Digital Devil Monogatari - Megami Tensei
+  :  title:    ãã¸ã¿ã«ã»ããã«ç©èª å¥³ç¥è»¢ç
+
+cartridge sha256:1eaa6da0a158dd99c5dc46e0c75b8dcec07ee26300847b3e775c8b8ef1e7484a
+  :board region=ntsc id:TAITO-TC0350FMR
+  :  chip type=TC0350FMR
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   TFC-DD-5900-30
+  :  board:    J9100197A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Don Doko Don
+  :  title:    ãã³ãã³ãã³
+
+cartridge sha256:fb0b3aab3fb22ab78b1d94fcbc730ed440591fdc359caec9e9f1d45682a38d01
+  :board region=ntsc id:TAITO-TC0190FMC
+  :  chip type=TC0190FMC
+  :  chip type=PAL16R4
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   TFC-DDII-5900-41
+  :  board:    J9100287A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Don Doko Don 2
+  :  title:    ãã³ãã³ãã³2
+
+cartridge sha256:3ce807f46e50c7f44c0ce17ec61b25500d885623514209beed001e99cdaa27a8
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   DFC-DX
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Donald Land
+  :  title:    ããã«ãã©ã³ã
+
+cartridge sha256:dd108e55b60070b4c0147f7dba31844ed83065255466bfacd5038e6382483026
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-DK
+  :  board:    9011-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Donkey Kong
+  :  title:    ãã³ã­ã¼ã³ã³ã°
+
+cartridge sha256:aa408f5a6b97c0d738e7e8b489a5617ad4a9ecdee2b05c4ee504210ce31b2825
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-DK
+  :  board:    HVC-NROM-02
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Donkey Kong
+  :  title:    ãã³ã­ã¼ã³ã³ã°
+
+cartridge sha256:950ebe68e7f74219b9e5e104200b03165d59c24264f02e32c12be967fd311ac2
+  :board region=ntsc id:HVC-HROM
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-JR
+  :  board:    HVC-HROM-01
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Donkey Kong Jr.
+  :  title:    ãã³ã­ã¼ã³ã³ã°Jr
+
+cartridge sha256:8e9c7a7953161db3633dc39b097e5f731a6bdcdf871d352e33db67a7acaeca92
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-SL
+  :  board:    9011-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Donkey Kong Jr. + Jr. Sansuu Lesson
+  :  title:    ãã³ã­ã¼ã³ã³ã°JR./JR.ç®æ°ã¬ãã¹ã³
+
+cartridge sha256:7bd2caf4a42f7d5c391433d2bec37bb2130e3a39dce55ee597ec14703cefc769
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   EFC-DR
+  :  board:    9011-06
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Door Door
+  :  title:    ãã¢ãã¢
+
+cartridge sha256:71ca865ba15da47e7002d02886ae9548ee935e2b1f8623b78c4975f3ce30cfa6
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TJC-UH
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Downtown - Nekketsu Koushin Kyoku - Soreyuke Daiundoukai
+  :  title:    ãã¦ã³ã¿ã¦ã³ ç±è¡è¡é²æ² ããããå¤§éåä¼
+ 
+cartridge sha256:d36b8989cbaf9ceafd91d15edd7b990dce6f9aede1bf9ac696ea8d288ec53d44
+  :board region=ntsc id:BANDAI-FCG-1
+  :  chip type=FCG-1
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   BA-DB2
+  :  board:    DORAGON2B
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Ball - Dai Maou Fukkatsu
+  :  title:    ãã©ã´ã³ãã¼ã« å¤§é­çå¾©æ´»
+
+cartridge sha256:b1a7377282123b3b18107e0d929666af8831bebde78ceaf7fe410c2132cd61ce
+  :board region=ntsc id:NAMCOT-3425
+  :  chip type=118
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NAM-DB-4900
+  :  board:    3425
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Buster
+  :  title:    ãã©ã´ã³ãã¹ã¿ã¼
+
+cartridge sha256:50b92595fe9198c333fe6912867f9db2de5c16a6c2fa72edcf1d797e1d8b79cb
+  :board region=ntsc id:HVC-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   EFC-DQ
+  :  board:    CN-04B
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Quest
+  :  title:    ãã©ã´ã³ã¯ã¨ã¹ã
+
+cartridge sha256:b0f0ce24890db516c01b1e748a8b4c68b38cebc404c2bc1c24a1ef6fe02ac5cc
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   EFC-D2
+  :  board:    HVC-UNROM-09
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Quest II - Akuryou no Kamigami
+  :  title:    ãã©ã´ã³ã¯ã¨ã¹ãII æªéã®ç¥ã
+
+cartridge sha256:ba223cc3aa7992ace45dd9c50bc8b29100e18dd77d338b5383d006af47d05ed3
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   EFC-D3
+  :  board:    HVC-SNROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Quest III - Soshite Densetsu e...
+  :  title:    Dragon Quest III: ããã¦ä¼èª¬ã¸...
+
+cartridge sha256:691fe8b7112654dbe7d87c5996037059d880f010ebf1f34decb89cedce7c4b9d
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   EFC-D3
+  :  board:    HVC-SNROM-09
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Dragon Quest III - Soshite Densetsu e...
+  :  title:    Dragon Quest III: ããã¦ä¼èª¬ã¸...
+
+cartridge sha256:2c9786c4fc04fe476e83c0e3e06b1577dc244a6c388cd4b31c86f045ef146d12
+  :board region=ntsc id:HVC-SUROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   EFC-D4
+  :  board:    HVC-SUROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Dragon Quest IV - Michibikareshi Mono-tachi
+  :  title:    Dragon Quest IV: å°ãããèãã¡
+
+cartridge sha256:7026334a7e8742b61b450f4b3b182922c6a69fc723d7cd19c83db365f15e45ba
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-DH
+  :  board:    HVC-RROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Duck Hunt
+  :  title:    ããã¯ãã³ã
+
+cartridge sha256:e9f4c9d1b7c66c6af83f2db5d4f704cf5f4b3c86e26a49c05539237807d8875e
+  :board region=ntsc id:HVC-RTROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-EB
+  :  board:    HVC-RTROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Excitebike
+  :  title:    Excitebike
+
+cartridge sha256:e9aab85fd91822b9dc7a89997eda3415e45a07fe21580c0df4765ce392e63824
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-FR
+  :  board:    HVC-RROM-05S
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     F-1 Race
+  :  title:    F1ã¬ã¼ã¹
+
+cartridge sha256:99c18490ed9002d9c6d999b9d8d15be5c051bdfa7cc7e73318053c9a994b0178
+  :board region=ntsc id:FDS
+  :  prg
+  :    rom name=program.rom size=0x2000
+  :    ram name=work.ram size=0x8000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   N/A
+  :  board:    Famicom Disk System
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Famicom Disk System
+  :  title:    ãã¡ããªã¼ã³ã³ãã¥ã¼ã¿ãã£ã¹ã¯ã·ã¹ãã 
+
+cartridge sha256:dd031b72924e1d080f8758412c73224a274ae5e5a50d90310d578975df74101f
+  :board region=ntsc id:BANDAI-JUMP2
+  :  chip type=LZ93D50
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   BA-FJ2
+  :  board:    BA-JUMP2
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Famicom Jump II - Saikyou no 7 Nin
+  :  title:    ãã¡ãã³ã³ã¸ã£ã³ãII æå¼·ã®7äºº
+
+cartridge sha256:7586cdd8b742ba3c4f0ea3eefaa2f6f2215af197a5269e3de9026bcdf236e981
+  :board region=ntsc id:HVC-FJROM
+  :  chip type=MMC4
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   HVC-FW
+  :  board:    HVC-FJROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Famicom Wars
+  :  title:    ãã¡ãã³ã³ã¦ã©ã¼ãº
+
+cartridge sha256:277d06b71b7de4c9b3bd8b7114086532b951767f7fdf66883282a262beee84a8
+  :board region=ntsc id:HVC-FAMILYBASIC
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :    ram name=save.ram size=0x800
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-BS
+  :  board:    FB-R-128-01
+  :  region:   JPN
+  :  revision: 2.0
+  :  name:     Family BASIC
+  :  title:    ãã¡ããªã¼ãã¼ã·ãã¯
+
+cartridge sha256:a646dcaeb5f114176446d7106816623c5f5918739a4c16d651c5715c9825b6e9
+  :board region=ntsc id:HVC-FAMILYBASIC
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :    ram name=save.ram size=0x800
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-BS
+  :  board:    FB-N-128-02
+  :  region:   JPN
+  :  revision: 2.1
+  :  name:     Family BASIC
+  :  title:    ãã¡ããªã¼ãã¼ã·ãã¯
+
+cartridge sha256:c8c0b6c21bdda7503bab7592aea0f945a0259c18504bb241aafb1eabe65846f3
+  :board region=ntsc id:HVC-FAMILYBASIC
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :    ram name=save.ram size=0x1000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-VT
+  :  board:    VT-N-256-41
+  :  region:   JPN
+  :  revision: 3.0
+  :  name:     Family BASIC
+  :  title:    ãã¡ããªã¼ãã¼ã·ãã¯
+
+cartridge sha256:4dd1ccb16d8af15d5cb029f69cf8551c5c720a69ec314bd618be892f0fc20f86
+  :board region=ntsc id:NAMCOT-3407
+  :  chip type=118
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NAM-FJ-3900
+  :  board:    3407
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Family Jockey
+  :  title:    ãã¡ããªã¼ã¸ã§ãã­ã¼
+
+cartridge sha256:27c6e9bf1de790ce831a4e9211c897fab813b2f4447a897efaad905f2488d761
+  :board region=ntsc id:BANDAI-PT-554
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   FT-03
+  :  board:    BA-ã¨ã¢ã­ã
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Family Trainer 3 - Aerobics Studio
+  :  title:    ãã¡ããªã¼ãã¬ã¼ãã¼3 ã¨ã¢ã­ãã¹ã¿ã¸ãª
+
+cartridge sha256:16f116053eee2d5c0be6c934c750224aaade45d4f6236b36967cdf986772e351
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   SFX-FI
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Fighting Golf
+  :  title:    ãã¡ã¤ãã£ã³ã°ã´ã«ã
+
+cartridge sha256:13038600940772bd8276e7de55674d9d241d9bcd56b0ba7f31537b297c0e1e13
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-FF
+  :  board:    HVC-SNROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Final Fantasy
+  :  title:    ãã¡ã¤ãã«ãã¡ã³ã¿ã¸ã¼
+
+cartridge sha256:b0def1b810ab3d29ce7e4d7a7ab8373ce7b28ced56967c483da193ce0cad5ee2
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-FF
+  :  board:    HVC-SNROM-09
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Final Fantasy
+  :  title:    ãã¡ã¤ãã«ãã¡ã³ã¿ã¸ã¼
+
+cartridge sha256:60c65138a0edecee77e7fa808291d6198ef2ebd10b1fd2bc4f047298d93a4cc0
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-FY
+  :  board:    HVC-SNROM-07
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Final Fantasy II
+  :  title:    ãã¡ã¤ãã«ãã¡ã³ã¿ã¸ã¼II
+
+cartridge sha256:7ff89b50156b6f5b3d78d3d2eeec8a9221d9f7b18f8350abf89b7867a205f710
+  :board region=ntsc id:HVC-TNROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-FC
+  :  board:    HVC-TNROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Final Fantasy III
+  :  title:    ãã¡ã¤ãã«ãã¡ã³ã¿ã¸ã¼III
+
+cartridge sha256:a637619a8b794ac9382723930b5be0e5a3d37991d2804b1ee637eced44b2b494
+  :board region=ntsc id:HVC-SXROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x8000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-FO
+  :  board:    HVC-SXROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Final Fantasy I & II
+  :  title:    ãã¡ã¤ãã«ãã¡ã³ã¿ã¸ã¼Iã»II
+
+cartridge sha256:60db7fd78cc849658a42ca648f0d294ebf21e477ddf0753f0e6bbffaad6192ab
+  :board region=ntsc id:HVC-FKROM
+  :  chip type=MMC4
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HVC-VX
+  :  board:    HVC-FKROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Fire Emblem 1 - Ankoku Ryuu to Hikari no Tsurugi
+  :  title:    ãã¡ã¤ã¢ã¼ã¨ã ãã¬ã  æé»ç«ã¨åã®å£
+
+cartridge sha256:0d899d67c7a61b13151f465c38c63a0d2d6a42d6be2d4ecac0fef87d55d92f92
+  :board region=ntsc id:HVC-FKROM
+  :  chip type=MMC4
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HVC-2I
+  :  board:    HVC-FKROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Fire Emblem 2 - Gaiden
+  :  title:    ãã¡ã¤ã¢ã¼ã¨ã ãã¬ã å¤ä¼
+
+cartridge sha256:e6fe68b9f12578e74ba016ca146aaf8232b20475fb675c7d32e0ea4e47eb1cc8
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NGG-4500-05
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Galaga
+  :  title:    ã®ã£ã©ã¬
+
+cartridge sha256:50178a2856f8ed3574b4e7fd45b9d1ec44c660d51fe9783d0012a19df5892cce
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NGX-4500-01
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Galaxian
+  :  title:    ã®ã£ã©ã¯ã·ã¢ã³
+
+cartridge sha256:2613db1559a07137af1f3cfda4175ac09be465604c651956dd98d971aedae6bc
+  :board region=ntsc id:KONAMI-VRC-2
+  :  chip type=VRC2
+  :    pinout a0=1 a1=0
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   KON-RC840
+  :  board:    351948
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ganbare Goemon Gaiden - Kieta Ougon Kiseru
+  :  title:    ããã°ãã´ã¨ã¢ã³å¤ä¼ ãããé»éã­ã»ã«
+
+cartridge sha256:50770ffec21bd47eadc9b502b73323f976e48e6f8f589a6717300119bde99de3
+  :board region=ntsc id:KONAMI-VRC-4
+  :  chip type=VRC4
+  :    pinout a0=6 a1=7
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   KON-RC857
+  :  board:    352889
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ganbare Goemon Gaiden 2 - Tenka no Zaihou
+  :  title:    ããã°ãã´ã¨ã¢ã³å¤ä¼2 å¤©ä¸ã®è²¡å®
+
+cartridge sha256:1bbe4b3e20a004a4f741018e31e6ae291772b8876d6fb6f01494c9c5b0917c6c
+  :board region=ntsc id:SUNSOFT-5B
+  :  chip type=Sunsoft-5B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   SUN-GMK-6200
+  :  board:    FC-GMK
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Gimmick!
+  :  title:    ã®ããã¯!
+
+cartridge sha256:12c99ef93f7bf1eaace749b38e5b63bca1b9885fd7680c14dfcc20c3637d6aa5
+  :board region=ntsc id:HVC-SROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-GF
+  :  board:    HVC-SROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Golf
+  :  title:    ã´ã«ã
+
+cartridge sha256:3d6bf7221fc38cd5bd1a55b50a5b0f50e6cbba0f44e5236e8447876f711e74ae
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   VIC-G3
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Golgo 13 - Dai 1 Shou - Kamigami no Tasogare
+  :  title:    ã´ã«ã´13 ç¬¬ä¸ç«  ç¥ãã®é»æ
+
+cartridge sha256:100fe2b085e3d57dc1a8f1cea44a31766e8c81c50a6083bf16687dcd1b6219f4
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-GO
+  :  board:    HVC-RROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Gomoku Narabe - Renju
+  :  title:    äºç®ãªãã¹ é£ç 
+
+cartridge sha256:f837e0807ade4bb8036d40746e2433ed66986f043fc2be722e765e45a676cd5d
+  :board region=ntsc id:KONAMI-74*139/74
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   KON-RC809
+  :  board:    302047A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Goonies, The
+  :  title:    ã°ã¼ãã¼ãº
+
+cartridge sha256:0d895a031dd38f2661ba2af4a1b3c7b9753632b1530ea28eec936cf3fda8bf54
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-GY
+  :  board:    3I
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Gyro
+  :  title:    ã¸ã£ã¤ã­
+
+cartridge sha256:52aea6e53c380799ac392a66eb3ce6337d704033d811b889e5589fa4ec4489f5
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   CAP-HF
+  :  board:    HVC-SNROM-06
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Hitler no Fukkatsu - Top Secret
+  :  title:    ãããã©ã¼ã®å¾©æ´»: TOP SECRET
+
+cartridge sha256:8e4a04076b6a728a7e65a09737776dcb9defed7922bf0437d9a89bbe8c724b55
+  :board region=ntsc id:HVC-SROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-HA
+  :  board:    HVC-SROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Hogan's Alley
+  :  title:    ãã¼ã¬ã³ãºã¢ã¬ã¤
+
+cartridge sha256:1c1ad2992f728c7fb6a8f3980b1a0f8e01e5b24a0c43c713300846d87be5987a
+  :board region=ntsc id:IREM-HOLYDIVER
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IF-12
+  :  board:    UNK-IF-12
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Holy Diver
+  :  title:    ãã¼ãªã¼ãã¤ã´ã¡ã¼
+
+cartridge sha256:4604ba6e93ae7846f6cb8b2e37a79187e84f3c549f3619670269592c5aaa4612
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   GAM-HM-02
+  :  board:    HVC-UNROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Hoshi o Miru Hito
+  :  title:    æãã¿ãã²ã¨
+
+cartridge sha256:5b2b9eb0a2a1dd539eeb29a5a236265923064fa751312e93cd313e0368c90303
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   HVC-IC
+  :  board:    3I
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ice Climber
+  :  title:    ã¢ã¤ã¹ã¯ã©ã¤ãã¼
+
+cartridge sha256:c9707547555d8c38014540204649125f7b36d3990433bfebb63c49742e2dc3a2
+  :board region=ntsc id:IREM-G101
+  :  chip type=G-101
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IF-14
+  :  board:    FC-00-015
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Image Fight
+  :  title:    ã¤ã¡ã¼ã¸ãã¡ã¤ã
+
+cartridge sha256:0f406a7c853b919ed880868420808b945855146db9817ebc3102f08da13fa703
+  :board region=ntsc id:TAITO-TC0190FMC
+  :  chip type=TC0190FMC
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TFC-IS-5900-33
+  :  board:    J9100205A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Insector X
+  :  title:    ã¤ã³ã»ã¯ã¿ã¼X
+
+cartridge sha256:2e5520ba75f0d1b0e2d56588ea28838cb4555413919019372541b86cb5c36b15
+  :board region=ntsc id:JALECO-JF-09
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   JF-09
+  :  board:    JF-09
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Jajamaru no Daibouken
+  :  title:    ããããä¸¸ã®å¤§åéº
+
+cartridge sha256:ea770788f68e4bb089e4205807931d64b83175a0106e7563d0a6d3ebac369991
+  :board region=ntsc id:JALECO-JF-27
+  :  chip type=SS88006
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   JF-27
+  :  board:    JF-27B
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Jajamaru Gekimaden - Maboroshi no Kinmajou
+  :  title:    ããããä¸¸æé­ä¼ ~å¹»ã®éé­å~
+
+cartridge sha256:b844aff505c9db9fe75a45b115b65b6d3b26010eeae0a6357980a99e5e94ddf3
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   THF-TK
+  :  board:    HVC-UNROM-05
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Jekyll Hakase no Houma ga Toki
+  :  title:    ã¸ã­ã¼ã«åå£«ã®å½·é­ãå»
+
+cartridge sha256:511e82e8271080e940c90bafcc4e39671eef73af08e6c564e42732839cca7614
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   SQF-JJ
+  :  board:    HVC-UNROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     JJ - Tobidase Daisakusen Part 2
+  :  title:    ã¸ã§ã¤ ã¸ã§ã¤ ã¨ã³ã ãå¤§ä½æ¦ãã¼ãï¼
+
+cartridge sha256:f9a27ccbde3f382e3cd8d90d34383429407d1d257ce5fd403f6f887225a37db2
+  :board region=ntsc id:HVC-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   HVC-JM
+  :  board:    HVC-TKROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Joy Mech Fight
+  :  title:    ã¸ã§ã¤ã¡ã«ãã¡ã¤ã
+
+cartridge sha256:f40341cf7e76480465ba8ab2d09e44644c3e3af7d647dc04c8b38357b26e014a
+  :board region=ntsc id:HVC-EKROM
+  :  chip type=MMC5A
+  :    ram name=internal.ram size=0x400 volatile
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   EFC-I5
+  :  board:    HVC-EKROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Just Breed
+  :  title:    ã¸ã£ã¹ãããªã¼ã
+
+cartridge sha256:ced7f840a0cae6fe82aca994858e3c407d2ff9b2396f0b43cdbaddc7e9f2bc1d
+  :board region=ntsc id:IREM-TAM-S1
+  :  chip type=TAM-S1
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   IF-07
+  :  board:    FC-00-003
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Kaiketsu Yanchamaru
+  :  title:    å¿«åã¤ã³ãã£ä¸¸
+
+cartridge sha256:2241728a8072ccdf13c3bb913d2d16abd62bb43c71757d80a376c4f65cd060cf
+  :board region=ntsc id:BANDAI-74*161/161/32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   BA-KAMEN
+  :  board:    BA ã«ã¡ã³
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Kamen Rider Club - Gekitotsu Shocker Land
+  :  title:    ä»®é¢ã©ã¤ãã¼å¶æ¥½é¨ æ¿çªã·ã§ãã«ã¼ã©ã³ã
+
+cartridge sha256:a45d30c949f9d0942700826e4433ebad39e08da8252ecb541cae9d495928d63f
+  :board region=ntsc id:KONAMI-VRC-7
+  :  chip type=VRC7
+  :    pinout a0=4 a1=5
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   KON-RC851
+  :  board:    352402
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Lagrange Point
+  :  title:    ã©ã°ã©ã³ã¸ã¥ãã¤ã³ã
+
+cartridge sha256:944105c6dcc57314968d53a2e0dcdfc0e2b60678a53839ba25925416a7ac0e8c
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-MR
+  :  board:    3I
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Mach Rider
+  :  title:    ãããã©ã¤ãã¼
+
+cartridge sha256:5cb495fd9dc486d65a2197b17fd548f5201e53497dd51bdd418e3ba0d9d04bd9
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KDS-MU
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mad City
+  :  title:    ãããã»ã·ãã£
+
+cartridge sha256:497c3015516cb6ae2f20d70b8fb1b70b8c4cfcd64e118992c438cfe7b0579f2b
+  :board region=ntsc id:JALECO-JF-24
+  :  chip type=SS88006
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   JF-30
+  :  board:    JF-24A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Magic John
+  :  title:    ãã¸ãã¯ã»ã¸ã§ã³
+
+cartridge sha256:ac5b4a29b301e23dc979bfabd2e714513b188dcf9c7ed4ae83ef23fed9cf20ee
+  :board region=ntsc id:HVC-RROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-MJ
+  :  board:    HVC-RROM-05
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Mahjong
+  :  title:    éº»é
+
+cartridge sha256:0986e9e8057c476aff3726aac6b1b7698e8e6de77530f394b8be2e5b5caf9bea
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-MJ
+  :  board:    2I
+  :  region:   JPN
+  :  revision: 1.2
+  :  name:     Mahjong
+  :  title:    éº»é
+
+cartridge sha256:4ef61de405406bfa9eeaf19ed1d882444c41bb606ac78673b7ec8ee323d0e073
+  :board region=ntsc id:IREM-G101
+  :  chip type=G-101
+  :  mirror mode=screen-1
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IF-13
+  :  board:    UNK-IF-13
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Major League
+  :  title:    ã¡ã¸ã£ã¼ãªã¼ã°
+
+cartridge sha256:c75201cfacd2ebd3f6376cd84d6af27bd2b9e42cdfdaad2aeca6252f3214b53c
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   CAP-MK
+  :  board:    HVC-UNROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Makaimura
+  :  title:    é­çæ
+
+cartridge sha256:6bc8f71a1d19cab1a1364c7e2988eaec25b2694aa29670360cab6c513f1c47ac
+  :board region=ntsc id:NAMCOT-3302
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NMP-4500-04
+  :  board:    3302
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mappy
+  :  title:    ãããã¼
+
+cartridge sha256:481ddd49134a5e2ae6beb35227dbd2384d9968dc22391eb89cafb40f2a48db6a
+  :board region=ntsc id:NAMCOT-3415
+  :  chip type=109
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NAM-ML-3900
+  :  board:    3415
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mappy-Land
+  :  title:    ãããã¼ã©ã³ã
+
+cartridge sha256:0cc334007d3eae698cdcd034d12ec9bab2b5266e85bc703cf24ccb4e2d63b654
+  :board region=ntsc id:HVC-SROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-MA
+  :  board:    HVC-SROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mario Bros.
+  :  title:    ããªãªãã©ã¶ã¼ãº
+
+cartridge sha256:4ac0926d1e4704e75e7dfc27c4d990ebdbe685002b9af1a80a385604f3cb162c
+  :board region=ntsc id:IREM-BNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   IF-05
+  :  board:    IREM-I-IM
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mashou
+  :  title:    é­é
+
+cartridge sha256:eb58ea4856030ae44d404439a04a452c10e647d0bf626ecdcd8497ba900dfae7
+  :board region=ntsc id:HVC-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   HFC-MI
+  :  board:    N04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mickey Mouse - Fushigi no Kuni no Daibouken
+  :  title:    ããã­ã¼ãã¦ã¹ ä¸æè­°ã®å½ã®å¤§åéº
+
+cartridge sha256:b759ace00354ac3f28eda6a602c5c6fe4bd18ba034157f5d1f8d5178446fa204
+  :board region=ntsc id:HVC-SGROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   HFC-MO
+  :  board:    HVC-SGROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Momotarou Densetsu: Peach Boy Legend
+  :  title:    æ¡å¤ªéä¼èª¬ ~Peach Boy Legend~
+
+cartridge sha256:f2aef1a9ade54330ff821083fda7e03c7a5f93d77f4da359069d84f98ab1f852
+  :board region=ntsc id:HVC-SJROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   SFL-MY
+  :  board:    HVC-SJROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Money Game, The
+  :  title:    ã¶ã»ããã¼ã²ã¼ã 
+
+cartridge sha256:aa0fe1b0b1e0c3a0a01695f1914fbb5e92649db33b74a9bdcb51be1481221f49
+  :board region=ntsc id:HVC-TKROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HVC-MX
+  :  board:    HVC-TKROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     MOTHER
+  :  title:    MOTHER
+
+cartridge sha256:97ff1ac9e6061ba5fb02b4626abf3521f84ee1542fa8093d617ede08dbb17cdc
+  :board region=ntsc id:KONAMI-VRC-6
+  :  chip type=VRC6
+  :    pinout a0=1 a1=0
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   KON-RC846
+  :  board:    351949A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Mouryou Senki Madara
+  :  title:    é­é­æ¦è¨ããã©
+
+cartridge sha256:83d326a461cca8dc539283dc8017985e9a6cd1893db4674de1a086c7cb8b0269
+  :board region=ntsc id:IREM-74*161/161/21/138
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   IF-09
+  :  board:    LROG017-00
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Napoleon Senki
+  :  title:    ããã¬ãªã³æ¦è¨
+
+cartridge sha256:3c419e3ecf328c03364afbcf5bd15bf0029a525db9e8f74379ae1cce4062b3c3
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TJC-NA
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Nekketsu Kakutou Densetsu
+  :  title:    ç±è¡æ ¼éä¼èª¬
+
+cartridge sha256:4ab6b5f4d6ce39fff0ef5a3d89e0884f44491fbd7d9028bd1f02a266c2698197
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   TJC-KN
+  :  board:    HVC-UNROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Nekketsu Kouha Kunio-kun
+  :  title:    ç±è¡ç¡¬æ´¾ãã«ããã
+
+cartridge sha256:3aee07f35644c68301c29e6da1c9a8d9ad1fae19a52bd08303f3973d897ddc65
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TJC-ND
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Nekketsu Koukou Dodgeball Bu
+  :  title:    ç±è¡é«æ ¡ããã¸ãã¼ã«é¨
+
+cartridge sha256:558897a4e2083b95bd77d230e1f2cf932800a01b0ba246f1d84c3aa64b236f21
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TJC-N3
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Nekketsu Koukou Dodgeball Bu - Soccer Hen
+  :  title:    ç±è¡é«æ ¡ããã¸ãã¼ã«é¨ ã½ãã«ã¼ç·¨
+
+cartridge sha256:bf546b0ce7fc60d89020ff7c0fadc7369925ba68a84d25b03de4190a91c46a95
+  :board region=ntsc id:JALECO-JF-06
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   JF-06
+  :  board:    JF-06
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ninja Jajamaru-kun
+  :  title:    å¿èããããä¸¸ãã
+
+cartridge sha256:648cf7ac553517573cc9b3955ab50566a91974b2348154910bfa53ef15d55b56
+  :board region=ntsc id:JALECO-JF-25
+  :  chip type=SS88006
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   JF-32
+  :  board:    JF-25
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ninja Jajamaru - Ginga Daisakusen
+  :  title:    å¿èããããä¸¸ éæ²³å¤§ä½æ¦
+
+cartridge sha256:e506900cde4b49a1d234c8508f4fee3ad7c5f9b3fa710c49597395994dcbabb7
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HFC-NM
+  :  board:    9011-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Nuts & Milk
+  :  title:    ããã&ãã«ã¯
+
+cartridge sha256:6d2887d978262401f315836411537a208272cba7721f598308d92983f1f5731a
+  :board region=ntsc id:IREM-G101
+  :  chip type=G-101
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IF-20
+  :  board:    FC-00-016
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Paaman - Enban o Torikaese!!
+  :  title:    ãã¼ãã³ ããã°ãã ã¨ãããã!!
+
+cartridge sha256:ece3f1fefbcc9c4a6da801d931a5bda85241975d96b5b4931bcd635bc3e0f1a5
+  :board region=ntsc id:IREM-G101
+  :  chip type=G-101
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   IF-25
+  :  board:    FC-00-018
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Paaman Part 2 - Himitsu Kessha Madoodan o Taose!
+  :  title:    ãã¼ãã³2 ç§å¯çµç¤¾ããã¼å£ãããã!
+
+cartridge sha256:15a2652861a1fb58c526a0d6fb1fcd24943bd1213cd54f87d01c96a83718e396
+  :board region=ntsc id:NAMCOT-3305
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NPL-4500-10
+  :  board:    3305
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     PAC-LAND
+  :  title:    ããã¯ã©ã³ã
+
+cartridge sha256:30e1b191069992208841cde9b83afe710f6e1d61fceed9ebb6f554cab81afe78
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NPM-4500-02
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     PAC-MAN
+  :  title:    ããã¯ãã³
+
+cartridge sha256:1e0214b8b3baaea618abd379123733080fdb8b14e4ea230a1199c5f3405f6eb8
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NPM-4500-02
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     PAC-MAN
+  :  title:    ããã¯ãã³
+
+cartridge sha256:be59fd441e2509b67359cd02cadfa825ced0ec7fda8edb9c101d90fc7a793e61
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   TFS-PC
+  :  board:    HVC-NROM-256K-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Pachi Com
+  :  title:    ããã³ã³
+
+cartridge sha256:910ba4505b46a99b3779d84fd22ba8b18f3a649b0c1a11706c4609d06ce0bc18
+  :board region=ntsc id:HVC-STROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-PN
+  :  board:    HVC-STROM-06
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Pinball
+  :  title:    ãã³ãã¼ã«
+
+cartridge sha256:70c307aa0b1a4ce11259bf861e9a3260ea56743d4987d3a82e500687212e1cc0
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-PP
+  :  board:    9011-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Popeye
+  :  title:    ããã¤
+
+cartridge sha256:e20c619fec4c7aeb244710a3b89040f85b0aaa4cea52b5f7fede63d11db00cea
+  :board region=ntsc id:HVC-SROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-EN
+  :  board:    HVC-SROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Popeye no Eigo Asobi
+  :  title:    ããã¤ã®è±èªéã³
+
+cartridge sha256:f9434e80c4153283c96a4aac99d40319de9b0d4836520003c16bb70a5d53a3d7
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   EFC-PR
+  :  board:    HVC-NROM-256K-02S
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Portopia Renzoku Satsujin Jiken
+  :  title:    ãã¼ããã¢é£ç¶æ®ºäººäºä»¶
+
+cartridge sha256:1f5a86488d8bbc8fbc09fdb91a33fa2530ed124949a7001576e7c631f87bd9df
+  :board region=ntsc id:TAITO-TC0190FMC
+  :  chip type=TC0190FMC
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   TFC-PB-5900-31
+  :  board:    J9100205A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Power Blazer
+  :  title:    ãã¯ã¼ãã¬ã¤ã¶ã¼
+
+cartridge sha256:67123fe28cf5fbadeafc77400a0812f0135ab36706ec7d1267f84931d044e71d
+  :board region=ntsc id:NAMCOT-3416
+  :  chip type=118
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NAM-QK-3900
+  :  board:    3416
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Quest of Ki, The
+  :  title:    ã«ã¤ã®åéº: The Quest of Ki
+
+cartridge sha256:7cb999c28339dfca0fd4aff85aa93c7af87fb40698d4035ab5b23620b695940a
+  :board region=ntsc id:NAMCOT-3443
+  :  chip type=118
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NAM-QT-4900
+  :  board:    3443
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Quinty
+  :  title:    ã¯ã¤ã³ãã£
+
+cartridge sha256:086c63f105b1ad2215b03a4323d1c6ec064a454e42ef96cb2a4eafe9ae38c039
+  :board region=ntsc id:KONAMI-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   KON-RC801
+  :  board:    641-1-1
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Road Fighter
+  :  title:    ã­ã¼ããã¡ã¤ã¿ã¼
+
+cartridge sha256:05117c775581eb63f7686f58c24f1c9da0fa0669eede1e7bad12eed40e58935e
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   CAP-RX
+  :  board:    HVC-UNROM-10
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     RockMan
+  :  title:    ã­ãã¯ãã³
+
+cartridge sha256:5483658872ee75b6324cd631045241f14c76084d93799cf51495a9a2039a3800
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   DTF-LK (44)
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Seirei Densetsu Lickle
+  :  title:    èé´ä¼èª¬ LICKLE
+
+cartridge sha256:dbc22a40e8a79c5ccf1d6e5126c9b10bb3d9b3e708fe5316c298c3d03dbc7977
+  :board region=ntsc id:HVC-UN1ROM
+  :  chip type=74HC32
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   CAP-SJ
+  :  board:    HVC-UN1ROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Senjou no Ookami
+  :  title:    æ¦å ´ã®ç¼
+
+cartridge sha256:4fbd928f06fbc4ea537cdae7f6a906053df7cd80c35b5cfeac9dfb9d3033efb8
+  :board region=ntsc id:NAMCOT-3417
+  :  chip type=109
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NAM-NSK-3900-18
+  :  board:    3417
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     SkyKid
+  :  title:    ã¹ã«ã¤ã­ãã
+
+cartridge sha256:6a0c8be0f6445d9d777080955c7aa8fbff7497633b878a36c8139ec13dabfb8b
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-SC
+  :  board:    9011-10
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Soccer
+  :  title:    ãµãã«ã¼
+
+cartridge sha256:b47462459841d2aae3e2b10ca85aca70a395e0ba7f1ad51a10f758bedda894fe
+  :board region=ntsc id:HVC-SLROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   DFC-WN
+  :  board:    HVC-SLROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Soccer League - Winner's Cup
+  :  title:    ãµãã«ã¼ãªã¼ã° ã¦ã£ãã¼ãºã«ãã
+
+cartridge sha256:a9cf92ec1a080faa195d0b3dcb48fbb5ee3362f0f2f14e14e4257def48ac4346
+  :board region=ntsc id:HVC-CNROM
+  :  security pass=0x1
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   KSC-SP
+  :  board:    HVC-CNROM-256K-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Spy vs. Spy
+  :  title:    ã¹ãã¤VSã¹ãã¤
+
+cartridge sha256:9c957a63eeac9383082f5984ec95746e087b8c93a0425974763698dd32f48319
+  :board region=ntsc id:NAMCOT-3303
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NSL-4900-12
+  :  board:    3303
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Star Luster
+  :  title:    ã¹ã¿ã¼ã©ã¹ã¿ã¼
+
+cartridge sha256:fcb6a0ef3a20c19b356005fbb21dc8009563b1cb5a9aaebc8e9386b4a8c5912e
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-SM
+  :  board:    HVC-NROM-256K-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Super Mario Bros.
+  :  title:    ã¹ã¼ãã¼ããªãªãã©ã¶ã¼ãº
+
+cartridge sha256:1c74200e996b37b1315818de6b6dd2d2a7b8a17fb06b6967158235d703424ebe
+  :board region=ntsc id:HVC-TSROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HVC-UM
+  :  board:    HVC-TSROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 3
+  :  title:    ã¹ã¼ãã¼ããªãªãã©ã¶ã¼ãº3
+
+cartridge sha256:7fa8e9125baa2590019db90f1446d501a27e520b2593e87dff71e74906bfbad2
+  :board region=ntsc id:HVC-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HVC-UM
+  :  board:    HVC-TSROM-04
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Super Mario Bros. 3
+  :  title:    ã¹ã¼ãã¼ããªãªãã©ã¶ã¼ãº3
+
+cartridge sha256:fb6298bb3519faaee26f75e6e071ab109398f06ab381bbb9f3edf299cd694292
+  :board region=ntsc id:NAMCOT-3311
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NPW-4900-13
+  :  board:    3311
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tag Team Pro-Wrestling
+  :  title:    ã¿ãã°ãã¼ã ãã­ã¬ã¹ãªã³ã°
+
+cartridge sha256:1e6d5548a54a0db31a13e05b604afafd8f9402b47079d708e7bf2cf8582e2ac5
+  :board region=ntsc id:HVC-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   HFC-TB
+  :  board:    097-1A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Takahashi Meijin no Bouken Shima
+  :  title:    é«æ©åäººã®åéºå³¶
+
+cartridge sha256:e31511ebbea6e664490660eca241d91d3fc427945386570e8f124e7272a2b72d
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HFC-V7
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Takahashi Meijin no Bouken Shima II
+  :  title:    é«æ©åäººã®åéºå³¶II
+
+cartridge sha256:c6ef86ee14ec274fd00cec39fd669f24fdc3b7348747bb13bc7425029ea73c56
+  :board region=ntsc id:HVC-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   HFC-4X
+  :  board:    HVC-TLROM-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Takahashi Meijin no Bouken Shima III
+  :  title:    é«æ©åäººã®åéºå³¶III
+
+cartridge sha256:9583caa45626da3899b725fad3fcf345acbecd77eae6b77dbb065343c995ff1d
+  :board region=ntsc id:HVC-TL1ROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   DTF-H9 (28)
+  :  board:    HVC-TL1ROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Taito Chase H.Q.
+  :  title:    ã¿ã¤ãã¼ãã§ã¤ã¹H.Q.
+
+cartridge sha256:a086ff08e7eae822285975d04f5d227f2434d5f1819969e233ff8670f7d57439
+  :board region=ntsc id:HVC-SKROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   SHI-RN
+  :  board:    HVC-SKROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tatakae!! Rahmen Man - Sakuretsu Choujin 102 Gei
+  :  title:    éå°!!æéººç· ç¸è£è¶äººä¸âäºè¸
+
+cartridge sha256:8da7129bba8c61a5ba1cd7ce02932ea4cefbb12db75c517c14d96819fc57f299
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-TE
+  :  board:    9011-04
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tennis
+  :  title:    ããã¹
+
+cartridge sha256:e720782a38dd0bf3821579518ea11b9a3735fb1e03dbd748931d7d2484bf8bbe
+  :board region=ntsc id:HVC-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   BPS-T0
+  :  board:    CN-04B
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Tetris
+  :  title:    ãããªã¹
+
+cartridge sha256:2b3e28d08308558521c69806c51e6cd27ff6bf446346d89c8a06f444d158b46e
+  :board region=ntsc id:HVC-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   BPS-T0
+  :  board:    CN-04B
+  :  region:   JPN
+  :  revision: 1.2
+  :  name:     Tetris
+  :  title:    ãããªã¹
+
+cartridge sha256:18d41a2dc65d8afce295eaf29c391539a69d7cfe6dd32503713ae13d4495a545
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   SQF-TX
+  :  board:    HVC-NROM-256K-02S
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Thexder
+  :  title:    ãã°ã¶ã¼
+
+cartridge sha256:4b80a1db42ecde039f01c52a74146887f9dfc2ad54fe3706bcdf625ec3e2de97
+  :board region=ntsc id:KONAMI-VRC-4
+  :  chip type=VRC4
+  :    pinout a0=2 a1=3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KON-RC860
+  :  board:    352396
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tiny Toon Adventures
+  :  title:    ã¿ã¤ãã¼ãã¥ã¼ã³ã¢ããã³ãã£ã¼
+
+cartridge sha256:dabde0dbf12d01237350cf6ad6463ce79651ac1e80d57b7b3b55c1819e72fd8a
+  :board region=ntsc id:KONAMI-VRC-7
+  :  chip type=VRC7
+  :    pinout a0=3 a1=5
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KON-RV051
+  :  board:    353429
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tiny Toon Adventures 2 - Montana Land e Youkoso
+  :  title:    ã¿ã¤ãã¼ãã¥ã¼ã³ã¢ããã³ãã£ã¼2 ã¢ã³ã¿ãã©ã³ãã¸ãããã
+
+cartridge sha256:5ec7c3e91bfd5800073286ee978b1d152c19f924837788eb72700c7c01261fa4
+  :board region=ntsc id:NAMCOT-3305
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NTD-4900-07
+  :  board:    3305
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Tower of Druaga, The
+  :  title:    ãã«ã¢ã¼ã¬ã®å¡: The Tower of Druaga
+
+cartridge sha256:a0a9d57cbace21bf9c85c2b85e86656317f0768d7772acc90c7411ab1dbff2bf
+  :board region=ntsc id:FDS
+  :  prg
+  :    rom name=program.rom size=0x2000
+  :    ram name=work.ram size=0x8000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   N/A
+  :  board:    Famicom Disk System
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Twin Famicom Disk System
+  :  title:    Twin Famicom Disk System
+
+cartridge sha256:4b9c46714fa085d61ad1177b72bdaa9428d104a171eb6335a03bf06ad9782389
+  :board region=ntsc id:KONAMI-74*139/74
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   KON-RC807
+  :  board:    302034A
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     TwinBee
+  :  title:    ãã¤ã³ãã¼
+
+cartridge sha256:092db8cfadf0a96c67dd0734c966c47dfb80ffb830485d8ee702284ae8eac4aa
+  :board region=ntsc id:KONAMI-VRC-2
+  :  chip type=VRC2
+  :    pinout a0=1 a1=0 chr-shift=1
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   KON-RC841
+  :  board:    351618
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     TwinBee 3 - Poko Poko Dai Maou
+  :  title:    ãã¤ã³ãã¼3 ãã³ãã³å¤§é­ç
+
+cartridge sha256:407e54848ad9991399f0383118f138d3a0532bb03bb488ed856deb7f2eb4efbf
+  :board region=ntsc id:JALECO-JF-16
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   JF-16
+  :  board:    JF-16
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Uchuusen - Cosmo Carrier
+  :  title:    å®å®è¹ã³ã¹ã¢ã­ã£ãªã¢
+
+cartridge sha256:81aa477b7f5b873d19b845fa15d6830267889d912475d8393d2ecc8d6c037e75
+  :board region=ntsc id:JALECO-JF-10
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   JF-10
+  :  board:    JF-10
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Urusei Yatsura - Lum no Wedding Bell
+  :  title:    ããçãã¤ã ã©ã ã®ã¦ã¨ãã³ã°ãã«
+
+cartridge sha256:c6097d923df166818c3f25a7a25995d3ceddbca246770bec26554d7a920854b8
+  :board region=ntsc id:HVC-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   HVC-UW
+  :  board:    HVC-TKROM-03
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Wario no Mori
+  :  title:    ã¯ãªãªã®æ£®
+
+cartridge sha256:5b36ae6243ddb4a1ba717123db41981a96b89175928b00d63df3fa4cede83d70
+  :board region=ntsc id:NAMCOT-3301
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NWM-4500-08
+  :  board:    3301
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Warpman
+  :  title:    ã¯ã¼ããã³
+
+cartridge sha256:adff304553b64384f86f6c2b63571f43972b9d087f92359a1b9b93b54d523542
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-WG
+  :  board:    2I
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Wild Gunman
+  :  title:    ã¯ã¤ã«ãã¬ã³ãã³
+
+cartridge sha256:515dd3fdb7c6ba287c87cdfce67a05babceb83bac7dd5ccf0b01b68d853dd311
+  :board region=ntsc id:HVC-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   ATH-XW
+  :  board:    HVC-UNROM-09
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Wit's
+  :  title:    Wit's
+
+cartridge sha256:f1eb29dd1c7b2b29f4932df853f32a7560bbfe64997281aa79f61ba9f131fb17
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   HVC-WR
+  :  board:    HVC-NROM-256K-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Wrecking Crew
+  :  title:    ã¬ãã­ã³ã°ã¯ã«ã¼
+
+cartridge sha256:777345bbde222e06d5dee48f1b02197f5965c57c3e8972142975f0a4eac0c9f5
+  :board region=ntsc id:NAMCOT-3303
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NXV-4900-03
+  :  board:    3303
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Xevious
+  :  title:    ã¼ãã¦ã¹
+
+cartridge sha256:78b4525668842d06dc347b1146cb51dc9bb4a9d268c3c141e09c15fd01a1556b
+  :board region=ntsc id:NAMCOT-3303
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NAM-NXV-4900-03
+  :  board:    3303
+  :  region:   JPN
+  :  revision: 1.1
+  :  name:     Xevious
+  :  title:    ã¼ãã¦ã¹
+
+cartridge sha256:703411cb92283840c096d7e1e422582ecda18bd9b27604a253cb0b0702383043
+  :board region=ntsc id:JALECO-JF-11
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   JF-12
+  :  board:    JF-11
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Youkai Club
+  :  title:    å¦æªå¶æ¥½é¨
+
+cartridge sha256:1c11c09519822855b512dbbf69571c96a25cae95d55a0732b1e17a06eb31521a
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   VFR-Y2-05
+  :  board:    HVC-SNROM-06
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ys
+  :  title:    ã¤ã¼ã¹
+
+cartridge sha256:c79202082042baeb3a45e747a1675c9530137f847c357c393270715efc32217e
+  :board region=ntsc id:HVC-TKROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   VFR-Q2-09
+  :  board:    HVC-TKROM-02
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ys II - Ancient Ys Vanished - The Final Chapter
+  :  title:    ã¤ã¼ã¹II ~Ancient Ys Vanished: The Final Chapter~
+
+cartridge sha256:ec1d85479d72847d3adbd76e2e79221143e6c9324d5647be2c4a11aa87123f75
+  :board region=ntsc id:HVC-TKSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   VFR-Q8-12
+  :  board:    HVC-TKSROM-01
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Ys III - Wanderers From Ys
+  :  title:    ã¤ã¼ã¹III ã¯ã³ãã©ã¼ãºãã­ã ã¤ã¼ã¹
+
+cartridge sha256:8da8a934647053857f68aaf6d4a2aeb923d78e79ea886ae8fe5c9e60c1b0444e
+  :board region=ntsc id:HVC-SNROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   HVC-ZL
+  :  board:    HVC-SNROM-09
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Zelda no Densetsu 1 - The Hyrule Fantasy
+  :  title:    THE HYRULE FANTASY ã¼ã«ãã®ä¼èª¬1
+
+cartridge sha256:c457644ccfb93f8978326e728931800283821e531edc409fca9c0167495319c4
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-WO-USA
+  :  board:    NES-UN-ROM-04
+  :  revision: 1.0
+  :  name:     3-D Battles of WorldRunner, The
+  :  title:    The 3-D Battles of WorldRunner
+
+cartridge sha256:8e844d77da01f86ace52823f1f974c9230f09e6a6cbf33a07abfe9beeff00292
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-TY-USA
+  :  board:    NES-NROM-256-04
+  :  revision: 1.0
+  :  name:     10-Yard Fight
+  :  title:    10-Yard Fight
+
+cartridge sha256:e868400409c70876b98dad2cca87b8e9ee31877b0cccbbd8405be5c54922722a
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-NF-USA
+  :  board:    NES-NROM-256-05
+  :  revision: 1.0
+  :  name:     1942
+  :  title:    1942
+
+cartridge sha256:9f54aafa367247b99c344ba9a0c58ad8fa8aceeeae1c304b8fefc9985c3c118c
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-43-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     1943 - The Battle of Midway
+  :  title:    1943: The Battle of Midway
+
+cartridge sha256:c4d4ff0bd283656c63d9a30dfc7dc6d2956744730a3641ba2c8f9f8e7204d9a1
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-A3-USA
+  :  board:    NES-SLROM-05
+  :  revision: 1.0
+  :  name:     Abadox - The Deadly Inner War
+  :  title:    Abadox: The Deadly Inner War
+
+cartridge sha256:df2609c80e818bb95983b30a3ac1435ea2332ac83e29fde469f397e1d5a2db93
+  :board region=ntsc id:NES-SKROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-LQ-USA
+  :  board:    NES-SKROM-04
+  :  revision: 1.0
+  :  name:     Advanced Dungeons & Dragons - Heroes of the Lance
+  :  title:    Advanced Dungeons & Dragons: Heroes of the Lance
+
+cartridge sha256:53bfc94fce46a25188f84f102810406f686a7fb13fb5e4ae8f13760106acb969
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-TB-USA
+  :  board:    NES-CNROM-07
+  :  revision: 1.0
+  :  name:     Adventure Island
+  :  title:    Hudson's Adventure Island
+
+cartridge sha256:5ee479ef04d80366a75dd144cbeb47d0347ee82025d1b65dd358e1f6498c9a39
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-V7-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Adventure Island II
+  :  title:    Hudson's Adventure Island II
+
+cartridge sha256:e8dc8c0441c54d09a1cfe0c112a3137bb6d709989b23e6528f8e30360e1ad910
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-AT-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Hudson's Adventure Island III
+  :  title:    Hudson's Adventure Island III
+
+cartridge sha256:185e4adb2cbcb71ebf0fd3f6af767f2215f93916cd2ccf932ce5864d3953239a
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-VD-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Adventures in the Magic Kingdom
+  :  title:    Disney's Adventures in the Magic Kingdom
+
+cartridge sha256:0e862077f390348b8e109caa8189ff5ecdf3fac53eefc204369fae880e077d19
+  :board region=ntsc id:KONAMI-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-MU-USA
+  :  board:    351908
+  :  revision: 1.0
+  :  name:     Adventures of Bayou Billy, The
+  :  title:    The Adventures of Bayou Billy
+
+cartridge sha256:c5e47c0479f500b86995fc8d09e132f5ba3f54cfd9a2a601ea3848bb60871a20
+  :board region=ntsc id:NES-SEROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-AV-USA
+  :  board:    NES-SEROM-02
+  :  revision: 1.0
+  :  name:     Adventures of Lolo
+  :  title:    Adventures of Lolo
+
+cartridge sha256:b82c1234165cd725d8e7f3e51926bceb834744eb49ad915bd3ea8b76fa465eb1
+  :board region=ntsc id:NES-SH1ROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-AF-USA
+  :  board:    NES-SH1ROM-01
+  :  revision: 1.0
+  :  name:     Airwolf
+  :  title:    Airwolf
+
+cartridge sha256:a3763e702f8ae0818480cf0a8b2395d3f928c539f75e230ed43fa6b904fe6365
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-AR-USA
+  :  board:    NES-CN-ROM-256-03
+  :  revision: 1.0
+  :  name:     Arkanoid
+  :  title:    Arkanoid
+
+cartridge sha256:2137d1621d29df50100f4d0fba3bafa0be56ccd0c832e44cd29dd7f0d75b374e
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-AN-USA
+  :  board:    NES-UN-ROM-04
+  :  revision: 1.0
+  :  name:     Athena
+  :  title:    Athena
+
+cartridge sha256:7328b2eb1c9fe06b98e0cba5c9058bf026e06a94900d490f79436d714eb48d6b
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-BF-USA
+  :  board:    NES-NROM-128-04
+  :  revision: 1.0
+  :  name:     Balloon Fight
+  :  title:    Balloon Fight
+
+cartridge sha256:f22944452be3259aac853258759f469e7d2e2447c6178f26cc7bd0e89945bc04
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-BA-USA
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Baseball
+  :  title:    Baseball
+
+cartridge sha256:f9752a3d068d24a97efb4a413fc84858ecae689502ee7002b6884bbe331eb7cd
+  :board region=ntsc id:NES-SFEXPROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-LD-USA
+  :  board:    NES-SFEXPROM-01
+  :  revision: 1.0
+  :  name:     Bases Loaded
+  :  title:    Bases Loaded
+  :  // The Program ROM is patched at run-time by the NES-LD-0-EXP.
+  :  // pre-patched: 685c94591a76510bf1bb120f81acd68e62ce37384eccc1635180ca3be742fd36
+
+cartridge sha256:3a55db2bf9f03e138c60da85a9e8ee5472aff31475ba30762b247ff362a0216a
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-LD-USA
+  :  board:    NES-SFROM-02
+  :  revision: 1.1
+  :  name:     Bases Loaded
+  :  title:    Bases Loaded
+
+cartridge sha256:85de365c6e538bc7197e9cc326203957d4d160efe7ea02e4830e3cbda5072e16
+  :board region=ntsc id:NES-SF1ROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-LD-USA
+  :  board:    NES-SF1ROM-02
+  :  revision: 1.2
+  :  name:     Bases Loaded
+  :  title:    Bases Loaded
+
+cartridge sha256:b9af9efdf490e14895e7980097a86d2f69d6396383773c221e77c6183a4ab9c8
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-L2-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Bases Loaded 2
+  :  title:    Bases Loaded II: Second Season
+
+cartridge sha256:5d84d61e7e4c2b7d72a2b4599bd8cc415b71c90d1e332a83f95d96c75bc48efd
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-3L-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Bases Loaded 3
+  :  title:    Ryne Sandberg Plays Bases Loaded 3
+
+cartridge sha256:e4aa19e0fd2800b58655eac814e1d9a9aa16d83eabd641789f8a6625591063a3
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-BD-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Bases Loaded 4
+  :  title:    Bases Loaded 4
+
+cartridge sha256:183ede1115b428b046ae223f27e2db366a5b62c43f52b6fced5f22a57d39e663
+  :board region=ntsc id:NES-BTR
+  :  chip type=FME-7
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-48-USA
+  :  board:    NES-BTR
+  :  revision: 1.0
+  :  name:     Batman - Return of the Joker
+  :  title:    Batman: Return of the Joker
+
+cartridge sha256:56d25e05dde2048c3a9b4e36ab5325091310ce2b65171615b5596fc542db66fa
+  :board region=ntsc id:NES-AOROM
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-8T-USA
+  :  board:    NES-AOROM-03
+  :  revision: 1.0
+  :  name:     Battletoads
+  :  title:    Battletoads
+
+cartridge sha256:b9434d2f359f6e464da36fbcf6d9eb794b7edff03b89467d1609158f13bfef52
+  :board region=ntsc id:NES-AMROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-4B-USA
+  :  board:    NES-AMROM-01
+  :  revision: 1.0
+  :  name:     Beetlejuice
+  :  title:    Beetlejuice
+
+cartridge sha256:aeb61fd5cf5a5ed73344c46a43f8a8d539f601ff57e8f56c49bc1caea4ab3d9e
+  :board region=ntsc id:NES-SGROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-CM-USA
+  :  board:    NES-SGROM-03
+  :  revision: 1.0
+  :  name:     Bionic Commando
+  :  title:    Bionic Commando
+
+cartridge sha256:7a26c62a9b1605cbedf7cd5b2672aa0fc15b688b227a6cb57dbf74aa71a05f1c
+  :board region=ntsc id:NES-SL2ROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-VM-USA
+  :  board:    NES-SL2ROM-01
+  :  revision: 1.0
+  :  name:     Blaster Master
+  :  title:    Blaster Master
+
+cartridge sha256:31523322db8f94e7244f6e2d958692a412c1395fc744601d83d1e5111eff9042
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-B2-USA
+  :  board:    NES-SFROM-02
+  :  revision: 1.0
+  :  name:     Bubble Bobble
+  :  title:    Bubble Bobble
+
+cartridge sha256:a35e846379ff252594ace83da2a1a1cb0692717b931055d1f6603812f18ad5cd
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-CV-USA
+  :  board:    NES-UN-ROM-04
+  :  revision: 1.0
+  :  name:     Castlevania
+  :  title:    Castlevania
+
+cartridge sha256:7eba1637cd2fdbc4f0732eb5249e32d827dbdadbd7e165f961440af4310880dc
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-CV-USA
+  :  board:    NES-UN-ROM-06
+  :  revision: 1.1
+  :  name:     Castlevania
+  :  title:    Castlevania
+
+cartridge sha256:9575ec31c1c658fd6b77ae1d69e4861ecada8570e4eebf51409941486e4b4ef4
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-QU-USA
+  :  board:    NES-SLROM-04
+  :  revision: 1.0
+  :  name:     Castlevania II - Simon's Quest
+  :  title:    Castlevania II: Simon's Quest
+
+cartridge sha256:6e8d289635ac39479ff1d36733aa3f8b9650593ab972cedb8e2cdbfc03aaa739
+  :board region=ntsc id:NES-ELROM
+  :  chip type=MMC5
+  :    ram name=internal.ram size=0x400 volatile
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-VN-USA
+  :  board:    NES-ELROM-01
+  :  revision: 1.0
+  :  name:     Castlevania III - Dracula's Curse
+  :  title:    Castlevania III: Dracula's Curse
+
+cartridge sha256:b705f866955c7d19292b55a9b0f3ec0e970e3f2509c3da15708b7afd879d98ed
+  :board region=ntsc id:NES-SJROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-EM-USA
+  :  board:    NES-SJROM-03
+  :  revision: 1.0
+  :  name:     Chessmaster, The
+  :  title:    The Chessmaster
+
+cartridge sha256:e84d90fefb92f2b6ab70e35bfb990978c7e384e357ec6b995c3880bff4c5b460
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-RU-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Chip 'n Dale Rescue Rangers
+  :  title:    Disney's Chip 'n Dale Rescue Rangers
+
+cartridge sha256:afa359b53e90781ed3810642c09f7cb22f0ba21c40142649771bfb21a897b4d3
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-DV-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Chip 'n Dale Rescue Rangers 2
+  :  title:    Disney's Chip 'n Dale Rescue Rangers 2
+
+cartridge sha256:cf226f0d9486103bbaa19ee124b673d47aa2b3766334b6b7587d704c03e6649e
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-B6-USA
+  :  board:    NES-SLROM-05
+  :  revision: 1.0
+  :  name:     Clash at Demonhead
+  :  title:    Clash at Demonhead
+
+cartridge sha256:ed0a1a5ca7cf404116d0073e8ccd213a082d2ac50132f54f3c8621f3dbcdb248
+  :board region=ntsc id:NES-RROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-CL-USA
+  :  board:    NES-RROM-128-01
+  :  revision: 1.0
+  :  name:     Clu Clu Land
+  :  title:    Clu Clu Land
+
+cartridge sha256:a5b8e24589539b0b84a6ad98aee9c91eb86eff795162be38b020dc42c3e3eca7
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-7M-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Conquest of the Crystal Palace
+  :  title:    Conquest of the Crystal Palace
+
+cartridge sha256:d41e28b1a33b3b6768e7c39c9fdfb1fda4b49940542d14085911fabd399e1ca9
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-CT-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     Contra
+  :  title:    Contra
+
+cartridge sha256:5ad644d368f70b61700b74a1d04778888efcbbf98d5435d79f9fcefd23ac39c2
+  :board region=ntsc id:NES-TKROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-G0-USA
+  :  board:    NES-TKROM-01
+  :  revision: 1.0
+  :  name:     Crystalis
+  :  title:    Crystalis
+
+cartridge sha256:ad1e14d08657d99c8b70f779931f62524b4beb529090b82b368925d8b642e40c
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-YN-USA
+  :  board:    NES-CNROM-06
+  :  revision: 1.0
+  :  name:     Cybernoid - The Fighting Machine
+  :  title:    Cybernoid: The Fighting Machine
+
+cartridge sha256:f97f05a4f8747d81dc8adaf07df70d1f87366632ae3e93103d387043ef5ec508
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-DZ-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Darkwing Duck
+  :  title:    Disney's Darkwing Duck
+
+cartridge sha256:41f949cfedf7167985f779c0782ee17ee83d82e35111c5f22ee5037f54313a06
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-6D-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Day Dreamin' Davey
+  :  title:    Day Dreamin' Davey
+
+cartridge sha256:0115356b0791cc8ddcb7d3163d6ef7aa664f3ff4e68dba561ffffb79eefcbca9
+  :board region=ntsc id:NES-BNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-DE-USA
+  :  board:    NES-BN-ROM-01
+  :  revision: 1.0
+  :  name:     Deadly Towers
+  :  title:    Deadly Towers
+
+cartridge sha256:6d082c801942ce6787b471428ab4c8a6acb3e21f3f38fa197f2aeb698d9a2d7e
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-YZ-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Destiny of an Emperor
+  :  title:    Destiny of an Emperor
+
+cartridge sha256:163479e2b1571538cf2f0f147bcbdebaab8ed8b0251f87dabd9bc4c80d786ea1
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-3Y-USA
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     Dick Tracy
+  :  title:    Dick Tracy
+
+cartridge sha256:aa408f5a6b97c0d738e7e8b489a5617ad4a9ecdee2b05c4ee504210ce31b2825
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-DK-USA
+  :  board:    NES-NROM-128-01
+  :  revision: 1.0
+  :  name:     Donkey Kong
+  :  title:    Donkey Kong
+
+cartridge sha256:b15b298dc37692d0bed2cbf922727ea48ed38bbd6cf3acdd28be6d2b9be344d3
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-DT-USA
+  :  board     NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Donkey Kong 3
+  :  title:    Donkey Kong 3
+
+cartridge sha256:950ebe68e7f74219b9e5e104200b03165d59c24264f02e32c12be967fd311ac2
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-JR-USA
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Donkey Kong Jr.
+  :  title:    Donkey Kong Jr.
+
+cartridge sha256:07dd16464d769429c651bd203ac2e74c7aa5852824482ca8877959d643bc8689
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-CA-USA
+  :  board:    NES-NROM-128-02
+  :  revision: 1.0
+  :  name:     Donkey Kong Jr. Math
+  :  title:    Donkey Kong Jr. Math
+
+cartridge sha256:56cb5897c539b6874e311a314767df85186184690f10d9982b02cb90ff606537
+  :board region=ntsc id:NES-AOROM
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-2D-USA
+  :  board:    NES-AOROM-03
+  :  revision: 1.0
+  :  name:     Double Dare
+  :  title:    Double Dare
+
+cartridge sha256:5860e217030f9da957d487b3ca59000d5f4d79bf23486bad08205c5aa4d992ea
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-JH-USA
+  :  board:    NES-SFROM-01
+  :  revision: 1.0
+  :  name:     Dr. Jekyll and Mr. Hyde
+  :  title:    Dr. Jekyll and Mr. Hyde
+
+cartridge sha256:01d303a8c0ed6f374586d3a2562065b77f627e8dbf071bd919877e3b48dbdb57
+  :board region=ntsc id:NES-SEROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-VU-USA
+  :  board:    NES-SEROM-04
+  :  revision: 1.0
+  :  name:     Dr. Mario
+  :  title:    Dr. Mario
+
+cartridge sha256:d2fbe8b10f762099d320016ddfd4d2961a591fe6dfaaab2efbeb77282264d06a
+  :board region=ntsc id:NES-SEROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-VU-USA
+  :  board:    NES-SEROM-04
+  :  revision: 1.1
+  :  name:     Dr. Mario
+  :  title:    Dr. Mario
+
+cartridge sha256:5564e54943deddc6d290b256638c774aa379a0d33dcea3b0a4f0c4b9fc2034e3
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-L9-USA
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     Dragon's Lair
+  :  title:    Dragon's Lair
+
+cartridge sha256:abc5bcb459316a7d245065149ea72b5a8317f62fa6ed578569e15b670d3c0022
+  :board region=ntsc id:NES-SAROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-DQ-USA
+  :  board:    NES-SAROM-01
+  :  revision: 1.0
+  :  name:     Dragon Warrior
+  :  title:    Dragon Warrior
+
+cartridge sha256:d968a138b19d39dad24aceb3464c7b90e8d50416297273586d3faf1f094eb35c
+  :board region=ntsc id:NES-SAROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-DQ-USA
+  :  board:    NES-SAROM-02
+  :  revision: 1.1
+  :  name:     Dragon Warrior
+  :  title:    Dragon Warrior
+
+cartridge sha256:c15ab051ff066f018cf4b0159780c58026114bb47a6376ef81c1571a39a8fe9b
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-D2-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Dragon Warrior II
+  :  title:    Dragon Warrior II
+
+cartridge sha256:f91a8bfc25bd267f5ae77bafa7fc650f77f8e50067869e99682b32d5b410644e
+  :board region=ntsc id:NES-SUROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-D3-USA
+  :  board:    NES-SUROM-01
+  :  revision: 1.0
+  :  name:     Dragon Warrior III
+  :  title:    Dragon Warrior III
+
+cartridge sha256:e49cb745370065a40aff078ae52b5de1c0db137fedcbe93b78ab18d76479deed
+  :board region=ntsc id:NES-SUROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-D4-USA
+  :  board:    NES-SUROM-02
+  :  revision: 1.0
+  :  name:     Dragon Warrior IV
+  :  title:    Dragon Warrior IV
+
+cartridge sha256:7026334a7e8742b61b450f4b3b182922c6a69fc723d7cd19c83db365f15e45ba
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-DH-USA
+  :  serial:   NES-DH-CAN
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Duck Hunt
+  :  title:    Duck Hunt
+
+cartridge sha256:8ba8baed01a9fbaf1e9ff29e0c9825db1963ac2aff211d6f1f3bcfd3839e2013
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-UK-USA
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     DuckTales
+  :  title:    Disney's DuckTales
+
+cartridge sha256:54c70628739c9cfab40b8d79555e9076adae34127ef369988ca91635b4a688bf
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-DL-USA
+  :  board:    NES-UNROM-10
+  :  revision: 1.0
+  :  name:     DuckTales 2
+  :  title:    Disney's DuckTales 2
+
+cartridge sha256:e9f4c9d1b7c66c6af83f2db5d4f704cf5f4b3c86e26a49c05539237807d8875e
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-EB-USA
+  :  board:    NES-NROM-128-04
+  :  revision: 1.0
+  :  name:     Excitebike
+  :  title:    Excitebike
+
+cartridge sha256:c0c98471130cd09c82af6ead5e706c9299cc2cb4584016a5e5eb0c8897380172
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-EQ-USA
+  :  board:    NES-SLROM-05
+  :  revision: 1.0
+  :  name:     Fester's Quest
+  :  title:    Fester's Quest
+
+cartridge sha256:fa456d852372173ea31b192459ba1a2026f779df67793327ba6e132476c1d034
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-FF-USA
+  :  serial:   NES-FF-CAN
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Final Fantasy
+  :  title:    Final Fantasy
+
+cartridge sha256:04264565cf33f4bd1b23a3f7a1be1487a548c7f6b85323c68af754b0927b0a56
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-HO-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     Fist of the North Star
+  :  title:    Fist of the North Star
+
+cartridge sha256:7e94b4fe8c33439779bb653d007ba4678dd589636ffbc87d1535629578a64d5e
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-F3-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     Friday the 13th
+  :  title:    Friday the 13th
+
+cartridge sha256:df49cc788fff36881fcf1d1cb22281d305260d4d8fbbe07ca2c4d699fe54843a
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-AG-USA
+  :  board:    NES-NROM-256-04
+  :  revision: 1.0
+  :  name:     Galaga - Demons of Death
+  :  title:    Galaga: Demons of Death
+
+cartridge sha256:fd2a8520314fb183e15fd62f48df97f92eb9c81140da4e6ab9ff0386e4797071
+  :board region=ntsc id:NES-DRROM
+  :  chip type=109
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :    ram name=nametable.ram size=0x800 volatile
+  :
+  :information
+  :  serial:   NES-GL-USA
+  :  board:    NES-DRROM-01
+  :  revision: 1.0
+  :  name:     Gauntlet
+  :  title:    Gauntlet
+
+cartridge sha256:ffa61d9f7bfb1d60662ddf246b21a8756d518292e8fdc0f58ac1c9b3fbad672d
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-2U-USA
+  :  board:    NES-TSROM-07
+  :  revision: 1.0
+  :  name:     Gauntlet II
+  :  title:    Gauntlet II
+
+cartridge sha256:43221ae8a386e8ddf68251d5870d6fe3d696be14a5e41d9a44c36227894044d8
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-GB-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     Ghostbusters
+  :  title:    Ghostbusters
+
+cartridge sha256:eea66f7bcc90d1145454da487791be5926473bee4014313af12dfa0f7453ea81
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-GG-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     Ghosts 'n Goblins
+  :  title:    Ghosts 'n Goblins
+
+cartridge sha256:c41555b61617e52cae950e0a94d4d655646eed4e4ce4c1d26740ddee0a9ae090
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-GF-USA
+  :  serial:   NES-GF-CAN
+  :  board:    NES-NROM-128-04
+  :  revision: 1.0
+  :  name:     Golf
+  :  title:    Golf
+
+cartridge sha256:9f559f83b9b5179137069bae0ca4b8eacf84378892b598044b88ef50681b58bb
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-G3-USA
+  :  board:    NES-SLROM-04
+  :  revision: 1.0
+  :  name:     Golgo 13 - Top Secret Episode
+  :  title:    Golgo 13: Top Secret Episode
+
+cartridge sha256:4628f32db9b826d19fe5dd8e2c45a9f70e1041f15b7b44b06dee2f01731566e8
+  :board region=ntsc id:NES-GNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-GS-USA
+  :  board:    NES-GN-ROM-01
+  :  revision: 1.0
+  :  name:     Gumshoe
+  :  title:    Gumshoe
+
+cartridge sha256:0d895a031dd38f2661ba2af4a1b3c7b9753632b1530ea28eec936cf3fda8bf54
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-GY-USA
+  :  board:    3A
+  :  revision: 1.0
+  :  name:     Gyromite
+  :  title:    Gyromite
+
+cartridge sha256:fd3c19b0339bf2b326d8a0526216b5143f035f68dabb3b3392689c92d6c140d9
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-HV-USA
+  :  board:    NES-TLROM-02
+  :  revision: 1.0
+  :  name:     Heavy Barrel
+  :  title:    Heavy Barrel
+
+cartridge sha256:710e907230bbd82143286b40a56a298b25cf326697a9f07bfd8e043c1936a4b1
+  :board region=ntsc id:NES-TQROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :    ram name=nametable.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-8H-USA
+  :  board:    NES-TQROM-01
+  :  revision: 1.0
+  :  name:     High Speed
+  :  title:    High Speed
+
+cartridge sha256:8e4a04076b6a728a7e65a09737776dcb9defed7922bf0437d9a89bbe8c724b55
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-HA-USA
+  :  board:    NES-NROM-128-04
+  :  revision: 1.0
+  :  name:     Hogan's Alley
+  :  title:    Hogan's Alley
+
+cartridge sha256:770abf58074764db12aade941ab1a389a818b8ff94d95f4b4b4913912b1f40b5
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-HS-USA
+  :  board:    NES-NROM-256-05
+  :  revision: 1.0
+  :  name:     Hydlide
+  :  title:    Hydlide
+
+cartridge sha256:002bb62441c1625051555109bce93ff2e2a2badb534a350b6d17ad0d7e7ef023
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-IC-USA
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Ice Climber
+  :  title:    Ice Climber
+
+cartridge sha256:c42fc592821b474b486ae32d1d63e8938f1735a6d45db026f7b78b2ec51427ac
+  :board region=ntsc id:ACCLAIM-MC-ACC
+  :  chip type=MC-ACC
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-CQ-USA
+  :  board:    55741
+  :  revision: 1.0
+  :  name:     Incredible Crash Dummies, The
+  :  title:    The Incredible Crash Dummies
+
+cartridge sha256:8db2cb94dc9caec681b13b66f26590e88229245fa592e5292d097e8599ee79e0
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-JA-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     Jaws
+  :  title:    Jaws
+
+cartridge sha256:4ece74fde0b86ecef96d1909c517f55f2da71fd00e29102b8f2780606606e777
+  :board region=ntsc id:NES-DE1ROM
+  :  chip type=109
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-KV-USA
+  :  board:    NES-DE1ROM-01
+  :  revision: 1.0
+  :  name:     Karnov
+  :  title:    Karnov
+
+cartridge sha256:56f1fe3a7881b2e9d69cd33a0971b2f26247e964c3c7dd4a6019715425ff2256
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-KI-USA
+  :  serial:   NES-KI-CAN
+  :  board:    NES-SNROM-03
+  :  revision: 1.0
+  :  name:     Kid Icarus
+  :  title:    Kid Icarus
+
+cartridge sha256:997ddca52ac724481ad5daafbc4e61547a541d673214eac579a8de746b26978d
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-8Q-USA
+  :  board:    NES-TSROM-08
+  :  revision: 1.0
+  :  name:     King's Quest V
+  :  title:    King's Quest V
+
+cartridge sha256:a6b81fec11c24a33fd763db5c28005e760a1614e70c1bb5ccde0bd4242431000
+  :board region=ntsc id:NES-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-KR-USA
+  :  board:    NES-TKROM-10
+  :  revision: 1.0
+  :  name:     Kirby's Adventure
+  :  title:    Kirby's Adventure
+
+cartridge sha256:1250a80faf865aa5ee5585ad7639e5ef2b3fa541554effda5fad2cc5dc2acef5
+  :board region=ntsc id:NES-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-KR-USA
+  :  board:    NES-TKROM-10
+  :  revision: 1.1
+  :  name:     Kirby's Adventure
+  :  title:    Kirby's Adventure
+
+cartridge sha256:24fca0fe86464c807ab5d58a2d56155a3fa1994e9bd78d119e3f8f84c8aee785
+  :board region=ntsc id:NES-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-K5-CAN
+  :  board:    NES-TKROM-10
+  :  revision: 1.0
+  :  name:     Kirby's Adventure
+  :  title:    Kirby's Adventure
+  //  title:    L'aventure de Kirby
+
+cartridge sha256:ac9d9f60f68c020c99b5bb1b91c723f16ac59091676826bced466b7ee4c97209
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-FI-USA
+  :  board:    NES-SLROM-05
+  :  revision: 1.0
+  :  name:     Lee Trevino's Fighting Golf
+  :  title:    Lee Trevino's Fighting Golf
+
+cartridge sha256:085e5397a3487357c263dfa159fb0fe20a5f3ea8ef82d7af6a7e848d3b9364e8
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-ZL-USA
+  :  board:    NES-SNROM-02
+  :  revision: 1.0
+  :  name:     Legend of Zelda, The
+  :  title:    The Legend of Zelda
+
+cartridge sha256:ec0d4ebf6d2fcecd1d95fef7329954efe79676959bc281ea908b226459bc6dc2
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-ZL-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.1
+  :  name:     Legend of Zelda, The
+  :  title:    The Legend of Zelda
+
+cartridge sha256:494aa7d49d3f4d66f01cac0f31a9bc7bc9626faa575a635f43e7caf19a832a48
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-LG-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Lemmings
+  :  title:    Lemmings
+
+cartridge sha256:68e98b1b8dc5da610321f92718b4b4c2b2b71b6c752ff25ca6926e26cd91c57f
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-3U-USA
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     Little Mermaid, The
+  :  title:    Disney's The Little Mermaid
+
+cartridge sha256:a5165565263eaf8bdc45a8e6a615704f9bf271cd6d547d22c098c80cbaffd879
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-LT-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Little Samson
+  :  title:    Little Samson
+
+cartridge sha256:6c17c7bf2f7466eb43718305a0d74bd75f31b65429bc1fe406c34565e792310c
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-LO-USA
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Lode Runner
+  :  title:    Lode Runner
+
+cartridge sha256:4fb6c5c8359dcbabcb4d05cf36192c790e68a509ef8666c20ebdb81541df3243
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-L7-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Low G Man - The Low Gravity Man
+  :  title:    Low G Man: The Low Gravity Man
+
+cartridge sha256:52812b55986f96fa77eb24a76e795dc8d79977eec7488c7b5b84ac3b47d60366
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-4Q-USA
+  :  board:    NES-TSROM-08
+  :  revision: 1.0
+  :  name:     M.C. Kids
+  :  title:    M.C. Kids
+
+cartridge sha256:ef238662a27934d6dbe1692e822786a74a9a2c8bc58c38aa0fd5cfb3e2f1abce
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-MR-USA
+  :  board:    NES-NROM-256-05
+  :  revision: 1.0
+  :  name:     Mach Rider
+  :  title:    Mach Rider
+
+cartridge sha256:944105c6dcc57314968d53a2e0dcdfc0e2b60678a53839ba25925416a7ac0e8c
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-MR-CAN
+  :  board:    NES-NROM-256-02
+  :  revision: 1.1
+  :  name:     Mach Rider
+  :  title:    Mach Rider
+
+cartridge sha256:84f5377980d2fd44d71faec42f858b1e83540c2f55aba9236c3279d6dde8592a
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-JM-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Maniac Mansion
+  :  title:    Maniac Mansion
+
+cartridge sha256:c9348c4e30ef0bc62c4fd119b5e38d85af493a1eb436c6c229b7a6a52af42681
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-TM-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Mario's Time Machine!
+  :  title:    Mario's Time Machine!
+
+cartridge sha256:0cc334007d3eae698cdcd034d12ec9bab2b5266e85bc703cf24ccb4e2d63b654
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-MA-USA
+  :  serial:   NES-MA-CAN
+  :  board:    NES-NROM-128-06
+  :  revision: 1.0
+  :  name:     Mario Bros.
+  :  title:    Mario Bros.
+
+cartridge sha256:9babea1d40007f936e3d4e1450ec7e7bfe5aff71162ffdf7ede3acae8d811962
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-MQ-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Mario is Missing!
+  :  title:    Mario is Missing!
+
+cartridge sha256:c8486cd1a35950007a3ba671a128097d780084182a854d6115ddec7dad56e806
+  :board region=ntsc id:NES-SCROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-A6-USA
+  :  board:    NES-SCROM-03
+  :  revision: 1.0
+  :  name:     Mechanized Attack
+  :  title:    Mechanized Attack
+
+cartridge sha256:5314ad0c406161195b6bb100ee11304bab8af121bba85992be896d5cb26b109e
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-MN-USA
+  :  board:    NES-UN-ROM-06
+  :  revision: 1.0
+  :  name:     Mega Man
+  :  title:    Mega Man
+
+cartridge sha256:1e588d435e75d80c5c0b578b4fa8d196f2cf4346c11c9a7b7e435d768828ad01
+  :board region=ntsc id:NES-SGROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-XR-USA
+  :  board:    NES-SGROM-04
+  :  revision: 1.0
+  :  name:     Mega Man 2
+  :  title:    Mega Man 2
+
+cartridge sha256:5b85c1ff632c6ac34742ac87b9c8ddee9a13827caf1212ecfa1d11f1f9dece50
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-XU-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Mega Man 3
+  :  title:    Mega Man 3
+
+cartridge sha256:a1fda74d03a9dd0c168b1ecae66803d78723cf7ccd85a482dedf017b97e660e8
+  :board region=ntsc id:NES-TGROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-4V-USA
+  :  board:    NES-TGROM-01
+  :  revision: 1.0
+  :  name:     Mega Man 4
+  :  title:    Mega Man 4
+
+cartridge sha256:ed8bc89c9cd44bf566666451779d7db2da3d9c211ff2a4824372c172b554e05b
+  :board region=ntsc id:NES-TGROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-4V-USA
+  :  board:    NES-TGROM-01
+  :  revision: 1.1
+  :  name:     Mega Man 4
+  :  title:    Mega Man 4
+
+cartridge sha256:4ddb728c3a007f1aa7184b60a1355cfd376cae46edc007fd48e6bcf41207cdb7
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-MZ-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Mega Man 5
+  :  title:    Mega Man 5
+
+cartridge sha256:2037babe50fed7a13b6f6559914cb81497245c9477592e6f8da183df09a3609a
+  :board region=ntsc id:NES-TGROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x80000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-G6-USA
+  :  board:    NES-TGROM-01
+  :  revision: 1.0
+  :  name:     Mega Man 6
+  :  title:    Mega Man 6
+
+cartridge sha256:649db8035018f2512ccea70aca6606c3b3a6988cd9ed43953b38dc5103dec7bb
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-MT-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Metroid
+  :  title:    Metroid
+
+cartridge sha256:989243c99d6e58c4fbcc6999473e48a389eba22cf1d3cb95dbe4c8b1f3ce15d7
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-MI-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     Mickey Mousecapade
+  :  title:    Mickey Mousecapade
+
+cartridge sha256:2ebab487204c42b0d9cf19c37bdc395e396226ca3eaa664907bf7f8216b3c4d3
+  :board region=ntsc id:NES-PNROM
+  :  chip type=MMC2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-PT-USA
+  :  board:    NES-PNROM-03
+  :  revision: 1.1
+  :  name:     Mike Tyson's Punch-Out!!
+  :  title:    Mike Tyson's Punch-Out!!
+
+cartridge sha256:6eea421f6c0738ff3abfd6e059e91c3409eedd2150093d3e01d49dfaad4dbf80
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-KM-USA
+  :  board:    NES-CNROM-06
+  :  revision: 1.0
+  :  name:     Milon's Secret Castle
+  :  title:    Milon's Secret Castle
+
+cartridge sha256:f7cc35a736ffd7804056b92ab92bfef02ded95d999ac126b680e87b573f18182
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-M9-USA
+  :  board:    NES-NROM-256-06
+  :  revision: 1.0
+  :  name:     Ms. PAC-MAN
+  :  title:    Ms. PAC-MAN
+
+cartridge sha256:61cb18d11771cffa08f79fd6973f634c8351703a2fe0f79858171d72a5a46582
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-HQ-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     Mystery Quest
+  :  title:    Mystery Quest
+
+cartridge sha256:dc71dadc3f4eae03f26ac4afec8ef044e7874ad8fdee1567a9b9b9e2c112669e
+  :board region=ntsc id:NES-AMROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-NQ-USA
+  :  board:    NES-AMROM-01
+  :  revision: 1.0
+  :  name:     NARC
+  :  title:    NARC
+
+cartridge sha256:55efed163edb02abc2a344aba79edc5ad873a77ed92378ad0c3e62f1e1816d3e
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-UG-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     NES Open Tournament Golf
+  :  title:    NES Open Tournament Golf
+
+cartridge sha256:58be6a811ee3370882160115253b610581e8b4af7228669eb3fbd56e7a13117c
+  :board region=ntsc id:NES-AMROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-ES-USA
+  :  board:    NES-AMROM-01
+  :  revision: 1.0
+  :  name:     Nightmare on Elm Street, A
+  :  title:    A Nightmare on Elm Street
+
+cartridge sha256:6799437d4122b81c86ae35cefe5b6ae6e10e6f9a9c7b3140dd569f717ba32b3d
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B1-H
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-NG-USA
+  :  board:    NES-SLROM-03
+  :  revision: 1.0
+  :  name:     Ninja Gaiden
+  :  title:    Ninja Gaiden
+
+cartridge sha256:21c51dc47a458a7de66544533d56eb9a69de0190d012b1645699e816d2cb5008
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-NW-USA
+  :  board:    NES-TLROM-02
+  :  revision: 1.0
+  :  name:     Ninja Gaiden II - The Dark Sword of Chaos
+  :  title:    Ninja Gaiden II: The Dark Sword of Chaos
+
+cartridge sha256:ba5968f14a02f1adf8a6144fcf9c4acde80bce8a3e01bae54b555f258540dd4b
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-3N-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Ninja Gaiden III - The Ancient Ship of Doom
+  :  title:    Ninja Gaiden III: The Ancient Ship of Doom
+
+cartridge sha256:cf4670ae9dd91bd178c80ab7391c8a059f9eecb86d744bd51b9258e21825fd3c
+  :board region=ntsc id:NES-EVENT
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-90-USA
+  :  board:    NES-EVENT-02
+  :  revision: 1.0
+  :  name:     Nintendo World Championships 1990
+  :  title:    Nintendo World Championships 1990
+
+cartridge sha256:b0e4d88db0b21db4a84e3c21d51898c686e9031dc138b2939877ecad20dd2350
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-XZ-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Nintendo World Cup
+  :  title:    Nintendo World Cup
+
+cartridge sha256:fa12a61eb787bf8346a81e5b6eaede75238a1735db24a6f4df51ac3a6b499f18
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-P7-USA
+  :  board:    NES-NROM-128-06
+  :  revision: 1.0
+  :  name:     PAC-MAN
+  :  title:    PAC-MAN
+
+cartridge sha256:f1c9c4723190d6be5f1f683ad5fd8cc123abd70d42f486c175a25f1237db6199
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-PY-USA
+  :  board:    NES-CNROM-08
+  :  revision: 1.0
+  :  name:     Paperboy
+  :  title:    Paperboy
+
+cartridge sha256:f4ddb0f1a02f823ebed30b55547344de3c8fb9d87254ff993584373ecadd9141
+  :board region=ntsc id:NES-TQROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :    ram name=nametable.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-IO-USA
+  :  board:    NES-TQROM-01
+  :  revision: 1.0
+  :  name:     Pin-Bot
+  :  title:    Pin-Bot
+
+cartridge sha256:910ba4505b46a99b3779d84fd22ba8b18f3a649b0c1a11706c4609d06ce0bc18
+  :board region=ntsc id:HVC-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-PN-USA
+  :  serial:   NES-PN-CAN
+  :  board:    2
+  :  revision: 1.0
+  :  name:     Pinball
+  :  title:    Pinball
+
+cartridge sha256:97f56ee3bcb0542996401a65c63a0e91c1c9c71da07f0619975e910946f9540d
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-PP-USA
+  :  board:    NES-NROM-128-06
+  :  revision: 1.1
+  :  name:     Popeye
+  :  title:    Popeye
+
+cartridge sha256:96dafa1208bda2eaa601d6855d86cf670556018c2859805cae51a88f83e66e9e
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-PW-USA
+  :  board:    NES-UN-ROM-01
+  :  revision: 1.0
+  :  name:     Pro Wrestling
+  :  title:    Pro Wrestling
+
+cartridge sha256:e144020f37416f80f1a0da47aa9b3fbda338c61fcd175e8b2dc98df181e24b85
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-PW-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.1
+  :  name:     Pro Wrestling
+  :  title:    Pro Wrestling
+
+cartridge sha256:635271fe654636ec37c882f76c5f8cd39b7b3a476c9aa75cefb548d82de8f896
+  :board region=ntsc id:NES-PNROM
+  :  chip type=MMC2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-QP-USA
+  :  board:    NES-PNROM-05
+  :  revision: 1.0
+  :  name:     Punch-Out!!
+  :  title:    Punch-Out!!
+
+cartridge sha256:0cf2fc17a59a0932ce43e6b2e9ea4e2570f03139784b5c9df429a499e734b92e
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-ZP-USA
+  :  board:    NES-CNROM-07
+  :  revision: 1.0
+  :  name:     Puzznic
+  :  title:    Puzznic
+
+cartridge sha256:5fa346174b6b5a9dc2b5fe113ef8d8ac013a32b26dde6d5dfc9ed631d5e9af25
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-QB-USA
+  :  board:    NES-CNROM-06
+  :  revision: 1.0
+  :  name:     Q-bert
+  :  title:    Q*bert
+
+cartridge sha256:745050dec23a692e1e759eb3e291f58ad7739fadb3a1308ec8d60085fefaec69
+  :board region=ntsc id:NES-SNROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-QX-USA
+  :  board:    NES-SNROM-05
+  :  revision: 1.0
+  :  name:     Qix
+  :  title:    Qix
+
+cartridge sha256:2e14f4481b5b762ba1ff0e7a25b07f316f7bdef0574a1704856f92823874f4e6
+  :board region=ntsc id:NES-SGROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-RC-USA
+  :  serial:   NES-RC-CAN
+  :  board:    NES-SGROM-04
+  :  revision: 1.0
+  :  name:     Rad Racer
+  :  title:    Rad Racer
+
+cartridge sha256:bcc8a24ab99f85933ff2cd0787daab6093710ef04f95b4c7bec842961ee0e3ad
+  :board region=ntsc id:NES-TVROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :    ram name=nametable.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-QR-USA
+  :  board:    NES-TVROM-01
+  :  revision: 1.0
+  :  name:     Rad Racer II
+  :  title:    Rad Racer II
+
+cartridge sha256:b4856061c9310015101c461aef744e9dcf3b158bd13d5d9cb4a76d3ca18a6864
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-RG-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     Renegade
+  :  title:    Renegade
+
+cartridge sha256:54cdc8b6fab804339c44601663585c8e7a8b01ef35b49754eb13a767b57c7d07
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-DN-USA
+  :  board:    NES-TLROM-02
+  :  revision: 1.0
+  :  name:     River City Ransom
+  :  title:    River City Ransom
+
+cartridge sha256:d04b445ac57cccb3a31a3bf83d002dc9a9765f15313e96f67be077b6114d2411
+  :board region=ntsc id:NES-TL1ROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-CP-USA
+  :  board:    NES-TL1ROM-01
+  :  revision: 1.0
+  :  name:     RoboCop
+  :  title:    RoboCop
+
+cartridge sha256:fade44d9c76173afe098fbe02d859735e06b2c509fd80da08b1cc85bfc01a556
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-RA-USA
+  :  board:    NES-UN-ROM-06
+  :  revision: 1.0
+  :  name:     Rush'n Attack
+  :  title:    Rush'n Attack
+
+cartridge sha256:e3a7e0b559b18e8e2fd6f2bf0fdadbf9094be63a01bac50e5505413e1d7697a4
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-RY-USA
+  :  board:    NES-UN-ROM-04
+  :  revision: 1.0
+  :  name:     Rygar
+  :  title:    Rygar
+
+cartridge sha256:9bef1813dbcfa003b3b1978a66a8da3ff59c93dd74f1332801515aa4b633c51e
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-RY-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.1
+  :  name:     Rygar
+  :  title:    Rygar
+
+cartridge sha256:51958d12a19e7c573fab26b85fe81d57330ff6668d630c6bc95c7c563c441e93
+  :board region=ntsc id:NES-SHROM
+  :  chip type=MMC1
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-SY-USA
+  :  board:    NES-SHROM-02
+  :  revision: 1.0
+  :  name:     SkyKid
+  :  title:    SkyKid
+
+cartridge sha256:98691aea357072f901095e47db056a01887083fd81710d425b9171db1cd1ad1b
+  :board region=ntsc id:NES-SEROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-RJ-USA
+  :  board:    NES-SEROM-04
+  :  revision: 1.0
+  :  name:     Snake Rattle 'n Roll
+  :  title:    Snake Rattle 'n Roll
+
+cartridge sha256:6a0c8be0f6445d9d777080955c7aa8fbff7497633b878a36c8139ec13dabfb8b
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-SC-USA
+  :  serial:   NES-SC-CAN
+  :  board:    NES-NROM-256-02
+  :  revision: 1.0
+  :  name:     Soccer
+  :  title:    Soccer
+
+cartridge sha256:1c3a2806b546230c5560f7cfe229fd8aef0c14460d1c6e79bcb14ab713ae983f
+  :board region=ntsc id:NES-SGROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-6A-USA
+  :  board:    NES-SGROM-04
+  :  revision: 1.0
+  :  name:     Space Shuttle Project
+  :  title:    Space Shuttle Project
+
+cartridge sha256:6f58c6fb427cf18b4c28f07909db642abac09fac2d7ae7dc9c99f1cd79263d95
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-SU-USA
+  :  board:    NES-NROM-256-03
+  :  revision: 1.0
+  :  name:     Spelunker
+  :  title:    Spelunker
+
+cartridge sha256:af7a31a57dd701f57b964667549240943c76bdd2a2044ad99dfeba47883f1b9b
+  :board region=ntsc id:HVC-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-BL-USA
+  :  board:    HVC-NROM-256K-02
+  :  revision: 1.0
+  :  name:     Stack-Up
+  :  title:    Stack-Up
+
+cartridge sha256:69de2c7552fa81ca5921da0e457abf1be35f18ffbad159788a76141be59c9f6b
+  :board region=ntsc id:NES-HKROM
+  :  chip type=MMC6B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x400
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-OC-USA
+  :  board:    NES-HKROM-01
+  :  revision: 1.0
+  :  name:     StarTropics
+  :  title:    StarTropics
+
+cartridge sha256:3edd803db1cc88155720625ed8f3e362a5e3c660e7faf3285bbe3a2c6571511c
+  :board region=ntsc id:KONAMI-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-UE-USA
+  :  board:    352026
+  :  revision: 1.0
+  :  name:     Super C
+  :  title:    Super C
+
+cartridge sha256:92aa617d6254a7aa8fdc915770e813b9922100e374fd44f40bf5752f6069c7a7
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-6S-USA
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     Super Cars
+  :  title:    Super Cars
+
+cartridge sha256:28ce7c337755f30a99cfbd1ad0bed56c8e43ee18b461b6dfcbbf77b7ddbcd035
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-ND-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Super Dodge Ball
+  :  title:    Super Dodge Ball
+
+cartridge sha256:fcb6a0ef3a20c19b356005fbb21dc8009563b1cb5a9aaebc8e9386b4a8c5912e
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-SM-USA
+  :  board:    NES-NROM-256-04
+  :  revision: 1.0
+  :  name:     Super Mario Bros.
+  :  title:    Super Mario Bros.
+
+cartridge sha256:5dde385041aa7364c78205f2ba49615f416c701b6025e38aa1d7b9c4f99a62db
+  :board region=ntsc id:NES-MHROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-MH-USA
+  :  board:    NES-MHROM-04
+  :  revision: 1.0
+  :  name:     Super Mario Bros. + Duck Hunt
+  :  title:    Super Mario Bros. / Duck Hunt
+
+cartridge sha256:968cf4ae63fddf6a0d379bb12add5563f468e57ddddb69e00e1379a839234f95
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-WH-USA
+  :  board:    NES-SFROM-01
+  :  revision: 1.0
+  :  name:     Super Mario Bros. + Duck Hunt + World Class Track Meet
+  :  title:    Super Mario Bros. / Duck Hunt / World Class Track Meet
+
+cartridge sha256:26977a6c51a6f1e1af895b8863e8e7d57c5321621f29cf58ebfbf85163a999dd
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x10000
+  :
+  :information
+  :  serial:   NES-WH-USA
+  :  board:    NES-WH
+  :  revision: 1.1
+  :  name:     Super Mario Bros. + Duck Hunt + World Class Track Meet
+  :  title:    Super Mario Bros. / Duck Hunt / World Class Track Meet
+
+cartridge sha256:cba920f9394733c82253685d7783f26a3033ba58a94623e9abf7892329b969b9
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-MW-USA
+  :  board:    NES-TSROM-01
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 2
+  :  title:    Super Mario Bros. 2
+
+cartridge sha256:728d0ca6751b0c039fc3e34f2e7f27a870afcab30f5e270244ac40979c5f69ca
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-MW-USA
+  :  serial:   NES-MW-CAN
+  :  board:    NES-TSROM-08
+  :  revision: 1.1
+  :  name:     Super Mario Bros. 2
+  :  title:    Super Mario Bros. 2
+
+cartridge sha256:d77d17d34af24871d7ce1160ccd3330555835c8e940b7100e095ac38973d927a
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-UM-USA
+  :  board:    NES-TSROM-06
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 3
+  :  title:    Super Mario Bros. 3
+
+cartridge sha256:959fdd32c71735d6fb2bd16a646d39f4ee65623273dd035e6a968e991bd13ef8
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-UM-USA
+  :  serial:   NES-UM-CAN
+  :  board:    NES-TSROM-07
+  :  revision: 1.1
+  :  name:     Super Mario Bros. 3
+  :  title:    Super Mario Bros. 3
+
+cartridge sha256:fe019a7da7fb7ecd2e6478bde546e6c5d6bba185d53e5c8692522ed8fdd617a2
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-PI-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.0
+  :  name:     Super Pitfall
+  :  title:    Super Pitfall
+
+cartridge sha256:8951dccb6640b48c857f321ef01c06110c5b8870f5d901dcc538ab1b8db7e2a1
+  :board region=ntsc id:NES-QJ
+  :  chip type=MMC3
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-QJ-USA
+  :  board:    NES-QJ
+  :  revision: 1.0
+  :  name:     Super Spike V'Ball + Nintendo World Cup
+  :  title:    Super Spike V'Ball / Nintendo World Cup
+
+cartridge sha256:6d10e95fcbf4cd1179293106d526373ea43a0c2b8531e694288b147310d617c6
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-68-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     TaleSpin
+  :  title:    Disney's TaleSpin
+
+cartridge sha256:892468d05a1097769d14e0ed4822267760d85dbfc79d83a0235878109f839dd1
+  :board region=ntsc id:KONAMI-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-U2-USA
+  :  board:    351908
+  :  revision: 1.0
+  :  name:     Teenage Mutant Ninja Turtles
+  :  title:    Teenage Mutant Ninja Turtles
+
+cartridge sha256:368d7ea3a066d4dc937473ca6cfc3e0d79d928b2308fff5ddd6ff199c7da153d
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-2N-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Teenage Mutant Ninja Turtles II - The Arcade Game
+  :  title:    Teenage Mutant Ninja Turtles II: The Arcade Game
+
+cartridge sha256:9f671090ffd2bb1dc95b9d413c3627f7aa0d576435eeb5b868fa7ca9c29c1190
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-T3-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Teenage Mutant Ninja Turtles III - The Manhattan Project
+  :  title:    Teenage Mutant Ninja Turtles III: The Manhattan Project
+
+cartridge sha256:8da7129bba8c61a5ba1cd7ce02932ea4cefbb12db75c517c14d96819fc57f299
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-TE-USA
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Tennis
+  :  title:    Tennis
+
+cartridge sha256:2ae5fb18a1bf841077e3872ba05060f030ea0bfc573994b2f8fe2fb570dc7853
+  :board region=ntsc id:NES-SEROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-EI-USA
+  :  serial:   NES-EI-CAN
+  :  board:    NES-SEROM-04
+  :  revision: 1.0
+  :  name:     Tetris
+  :  title:    Tetris
+
+cartridge sha256:dd77dc88d380807990f55d0b1b55c151f78c480a0a0895e91d6edfb945ad71d7
+  :board region=ntsc id:NES-TSROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-TS-USA
+  :  board:    NES-TSROM-08
+  :  revision: 1.0
+  :  name:     Tetris 2
+  :  title:    Tetris 2
+
+cartridge sha256:700264cfa786a6bec49f5413057b30fa6ed1981fe3b75c3920db52945c1a7013
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-3T-USA
+  :  board:    NES-SLROM-05
+  :  revision: 1.0
+  :  name:     Three Stooges
+  :  title:    Three Stooges
+
+cartridge sha256:c47a01c9b32642ad3145316804e64b0475a20863e42e81d17c664d03dcdde3c5
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-NI-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Tiny Toon Adventures
+  :  title:    Tiny Toon Adventures
+
+cartridge sha256:d4a94fd07859485fc2aac73d627933b70e1977c93b744ec3d71b66d4365ab7f7
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-T2-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Tiny Toon Adventures 2 - Trouble in Wackyland
+  :  title:    Tiny Toon Adventures 2: Trouble in Wackyland
+
+cartridge sha256:aa43f3138d4f731e5e8df530dbf8fc1f6f45303b84589f7a0715e392887f3dff
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-TG-USA
+  :  board:    NES-UN-ROM-06
+  :  revision: 1.0
+  :  name:     Top Gun
+  :  title:    Top Gun
+
+cartridge sha256:e788ae1dff1b868795395e19357525b93ddd52ac86f6a505d14eac5fa323b023
+  :board region=ntsc id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-TG-USA
+  :  board:    NES-UN-ROM-07
+  :  revision: 1.1
+  :  name:     Top Gun
+  :  title:    Top Gun
+
+cartridge sha256:0bd29c5b583570e195e05a4272e69b74257db1f4ff928d59c8eb1022bad871ce
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-6T-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Totally Rad
+  :  title:    Totally Rad
+
+cartridge sha256:7255ab27932f7c07fa61c230a51342b0441ea9b24ba094ae3129ec7453de2449
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-UC-USA
+  :  board:    NES-NROM-128-06
+  :  revision: 1.0
+  :  name:     Urban Champion
+  :  title:    Urban Champion
+
+cartridge sha256:26ff208f2b133e66c602765778107c5938386c24fc03a197bbf9b2b659cb8792
+  :board region=ntsc id:NES-CPROM
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    ram name=character.ram size=0x4000 volatile
+  :
+  :information
+  :  serial:   NES-V8-USA
+  :  board:    NES-CPROM-02
+  :  revision: 1.0
+  :  name:     Videomation
+  :  title:    Videomation
+
+cartridge sha256:c12771e8155b030eff0081bfabd98e57a162d6592899f29dd16f141f0e6e08a3
+  :board region=ntsc id:NES-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-WB-USA
+  :  board:    NES-TKROM-10
+  :  revision: 1.0
+  :  name:     Wario's Woods
+  :  title:    Wario's Woods
+
+cartridge sha256:88691067f122467f2dae85e40b927013b91fe848f88d694616ed2f26ab1f3f4d
+  :board region=ntsc id:NES-AOROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-WF-USA
+  :  board:    NES-AOROM-01
+  :  revision: 1.0
+  :  name:     Wheel of Fortune
+  :  title:    Wheel of Fortune
+
+cartridge sha256:7157801d42484e58b81387c95f24d6e8acaa513fa588828398f5b7a69f2c14bd
+  :board region=ntsc id:NES-AOROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-WF-USA
+  :  board:    NES-AOROM-03
+  :  revision: 1.1
+  :  name:     Wheel of Fortune
+  :  title:    Wheel of Fortune
+
+cartridge sha256:9178fba5cbb412cc6d437f301ab93ba8c897235a5c8f2985756d3441061ecbe2
+  :board region=ntsc id:NES-ANROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-W3-USA
+  :  board:    NES-ANROM-03
+  :  revision: 1.0
+  :  name:     Wheel of Fortune - Family Edition
+  :  title:    Wheel of Fortune: Family Edition
+
+cartridge sha256:84e3a018cbaaf2311d7e9414112cb05cf3b43608de0b9f8a2f77bc4da33ce8e6
+  :board region=ntsc id:NES-ANROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-WJ-USA
+  :  board:    NES-ANROM-02
+  :  revision: 1.0
+  :  name:     Wheel of Fortune - Junior Edition
+  :  title:    Wheel of Fortune: Junior Edition
+
+cartridge sha256:700ebc3c2dd27420bbdcccb987ba60d3f0680469101353de15a1b2bd565ac701
+  :board region=ntsc id:NES-ANROM
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-WL-USA
+  :  board:    NES-ANROM-03
+  :  revision: 1.0
+  :  name:     Who Framed Roger Rabbit
+  :  title:    Who Framed Roger Rabbit
+
+cartridge sha256:62aec65696ecf24a487b7cdd19bad5cbd19f4229a89a7888634d468c67da378a
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-WG-USA
+  :  board:    NES-NROM-128-01
+  :  revision: 1.0
+  :  name:     Wild Gunman
+  :  title:    Wild Gunman
+
+cartridge sha256:adff304553b64384f86f6c2b63571f43972b9d087f92359a1b9b93b54d523542
+  :board region=ntsc id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-WG-USA
+  :  board:    NES-NROM-128-04
+  :  revision: 1.1
+  :  name:     Wild Gunman
+  :  title:    Wild Gunman
+
+cartridge sha256:6c74bcb9ac50428266cfc4d13892b6e93c6936ba569bf3f0f2068e45a9b675fc
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-WT-USA
+  :  board:    NES-CN-ROM-256-05
+  :  revision: 1.0
+  :  name:     World Class Track Meet
+  :  title:    World Class Track Meet
+
+cartridge sha256:ac766a8d99bfd8e95c02b9a9c68279c72ba5b3307b78edc67b52781ed185fa89
+  :board region=ntsc id:NES-CNROM
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-WT-USA
+  :  board:    NES-CNROM-07
+  :  revision: 1.1
+  :  name:     World Class Track Meet
+  :  title:    World Class Track Meet
+
+cartridge sha256:f1eb29dd1c7b2b29f4932df853f32a7560bbfe64997281aa79f61ba9f131fb17
+  :board region=ntsc id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-WR-USA
+  :  serial:   NES-WR-CAN
+  :  board:    NES-NROM-256-05
+  :  revision: 1.0
+  :  name:     Wrecking Crew
+  :  title:    Wrecking Crew
+
+cartridge sha256:a0354fb9c1c29e25b8bd2bd45735e8af2263cde66b56cc2e61eb5d9295a42de1
+  :board region=ntsc id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-WQ-USA
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     WURM - Journey to the Center of the Earth
+  :  title:    WURM: Journey to the Center of the Earth
+
+cartridge sha256:62a3551ce546fa7df5fd4970e725e36f1ca269be62b1e33f92546d6e649b8371
+  :board region=ntsc id:NES-SLROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-YC-USA
+  :  board:    NES-SLROM-06
+  :  revision: 1.0
+  :  name:     Yo! Noid
+  :  title:    Yo! Noid
+
+cartridge sha256:56a169bb3a6101057fb278f2febd58cb1dbf056e5aaeb709c51a55ce4cfac20d
+  :board region=ntsc id:NES-SFROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :
+  :information
+  :  serial:   NES-YM-USA
+  :  board:    NES-SFROM-03
+  :  revision: 1.0
+  :  name:     Yoshi
+  :  title:    Yoshi
+
+cartridge sha256:4cfc55e1521e58039d502f2a5ff16c233b84c0a05b1048185c75c971f3814c16
+  :board region=ntsc id:NES-SKROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-AL-USA
+  :  board:    NES-SKROM-04
+  :  revision: 1.0
+  :  name:     Zelda II - The Adventure of Link
+  :  title:    Zelda II: The Adventure of Link
+
+cartridge sha256:d0850075065ecbd125a33accc952de5d012527be45aa14a1b8223a9adf1643ae
+  :board region=ntsc id:NES-HKROM
+  :  chip type=MMC6B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x400
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-6C-USA
+  :  board:    NES-HKROM-02
+  :  revision: 1.0
+  :  name:     Zoda's Revenge - StarTropics 2
+  :  title:    Zoda's Revenge: StarTropics 2
+
+cartridge sha256:0bcd77e76d842c04a47f0dbc18c440da07da393400386fa13d6fdf59495a7be3
+  :board region=pal id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-BF-EEC
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Balloon Fight
+  :  title:    Balloon Fight
+
+cartridge sha256:f22944452be3259aac853258759f469e7d2e2447c6178f26cc7bd0e89945bc04
+  :board region=pal id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-BA-GBR
+  :  serial:   NES-BA-ESP
+  :  board:    NES-NROM-128-06
+  :  revision: 1.0
+  :  name:     Baseball
+  :  title:    Baseball
+
+cartridge sha256:92407ccb251d18be5ff681b9dbc945322fd3b7495875de973dbb80004f26fd5c
+  :board region=pal id:NES-SGROM
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-CM-EEC
+  :  serial:   NES-CM-FRG
+  :  board:    NES-SGROM-04
+  :  revision: 1.0
+  :  name:     Bionic Commando
+  :  title:    Bionic Commando
+
+cartridge sha256:5efe21c5569be4e6f6564d30ed89b8a8bab8e19a3dc9d3ab11d34ccad55ec180
+  :board region=pal id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-L9-SCN
+  :  serial:   NES-L9-ESP
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Dragon's Lair
+  :  title:    Dragon's Lair
+
+cartridge sha256:0d895a031dd38f2661ba2af4a1b3c7b9753632b1530ea28eec936cf3fda8bf54
+  :board region=pal id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-GY-GBR
+  :  serial:   NES-GY-FRA
+  :  board:    NES-NROM-256-05
+  :  revision: 1.0
+  :  name:     Gyromite
+  :  title:    Gyromite
+
+cartridge sha256:8e4a04076b6a728a7e65a09737776dcb9defed7922bf0437d9a89bbe8c724b55
+  :board region=pal id=NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-HA-EEC
+  :  board:    NES-NROM-128-03
+  :  revision: 1.0
+  :  name:     Hogan's Alley
+  :  title:    Hogan's Alley
+
+cartridge sha256:95bc817c38bd7fa4b92efdb20bd48e3d7a9c46a4d2981f419708652e5475acaf
+  :board region=pal id:NES-SNROM
+  :  chip type=MMC1A
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-ZL-EEC
+  :  board:    NES-SNROM-02
+  :  revision: 1.0
+  :  name:     Legend of Zelda, The
+  :  title:    The Legend of Zelda
+
+cartridge sha256:b822db53a1cc09564044b273b4b0bae8e76527688e733f80df884dc1ffb2abfa
+  :board region=pal id:NES-SNROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-ZL-EEC
+  :  serial:   NES-ZL-FRA
+  :  serial:   NES-ZL-FRG
+  :  serial:   NES-ZL-ESP
+  :  board:    NES-SNROM-05
+  :  revision: 1.1
+  :  name:     Legend of Zelda, The
+  :  title:    The Legend of Zelda
+
+cartridge sha256:c8e7036e8afcd95acaf3a5e0956df53beaab127a7defcc0e80d629653ff67c23
+  :board region=pal id:NES-UNROM
+  :  chip type=74HC32
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :
+  :information
+  :  serial:   NES-MN-EEC
+  :  serial:   NES-MN-FRG
+  :  board:    NES-UNROM-09
+  :  revision: 1.0
+  :  name:     Mega Man
+  :  title:    Mega Man
+
+cartridge sha256:3264e4c57ffaf64df816cc97b1d6d278042545a4be248f5c195d82037f0a9bfd
+  :board region=pal id:NES-BTR
+  :  chip type=FME-7
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-G8-SCN
+  :  serial:   NES-G8-UKV
+  :  board:    NES-BTR
+  :  revision: 1.0
+  :  name:     Mr. Gimmick
+  :  title:    Mr. Gimmick
+
+cartridge sha256:747481f0854295542936fa29f9c520033b2da8608c680202d36fff4badb681a0
+  :board region=pal id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-XZ-FRA
+  :  serial:   NES-XZ-NOE
+  :  serial:   NES-XZ-SCN
+  :  board:    NES-TLROM-03
+  :  revision: 1.0
+  :  name:     Nintendo World Cup
+  :  title:    Nintendo World Cup
+
+cartridge sha256:5e2f8f838edfba925973ddbdc9f4b70050bd132efcb62e173021c63de14fee5d
+  :board region=pal id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-XZ-NOE
+  :  board:    NES-TLROM-03
+  :  revision: 1.1
+  :  name:     Nintendo World Cup
+  :  title:    Nintendo World Cup
+
+cartridge sha256:6157c99fe7a214025c65fd3649e4afe9cd2d38c333e65af028b935e49fbeb500
+  :board region=pal id=NES-TSROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-NH-NOE
+  :  board:    NES-TSROM-08
+  :  revision: 1.0
+  :  name:     Noah's Ark
+  :  title:    Noah's Ark
+
+cartridge sha256:97f56ee3bcb0542996401a65c63a0e91c1c9c71da07f0619975e910946f9540d
+  :board region=pal id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-PP-EEC
+  :  serial:   NES-PP-FRA
+  :  serial:   NES-PP-ESP
+  :  board:    NES-NROM-128-06
+  :  revision: 1.1
+  :  name:     Popeye
+  :  title:    Popeye
+
+cartridge sha256:fcb6a0ef3a20c19b356005fbb21dc8009563b1cb5a9aaebc8e9386b4a8c5912e
+  :board region=pal subregion=A id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-SM-GBR
+  :  board:    NES-NROM-256-03
+  :  revision: 1.0
+  :  name:     Super Mario Bros.
+  :  title:    Super Mario Bros.
+
+cartridge sha256:6b3189414053f975bcac33eb51a1e9991e0d06f42abead7919969417cc26e2ad
+  :board region=pal id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-SM-EEC
+  :  serial:   NES-SM-NOE
+  :  serial:   NES-SM-ESP
+  :  serial:   NES-SM-SCN
+  :  board:    NES-NROM-256-08
+  :  revision: 1.1
+  :  name:     Super Mario Bros.
+  :  title:    Super Mario Bros.
+
+cartridge sha256:4c00009eb345474229372fc34ebe2abb4996eef7486ce8977e69edfc88816935
+  :board region=pal id=PAL-ZZ
+  :  chip type=MMC3
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-ZZ-FRG
+  :  serial:   NES-ZZ-SCN
+  :  board:    ZZ
+  :  revision: 1.0
+  :  name:     Super Mario Bros. + Tetris + Nintendo World Cup
+  :  title:    Super Mario Bros. / Tetris / Nintendo World Cup
+
+cartridge sha256:18fc0f452d796e522d776c1a848ca7ca8b1c25b44d553b6fd15becd2ea65076e
+  :board region=pal id=PAL-ZZ
+  :  chip type=MMC3
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-ZZ-FRG
+  :  board:    ZZ
+  :  revision: 1.1
+  :  name:     Super Mario Bros. + Tetris + Nintendo World Cup
+  :  title:    Super Mario Bros. / Tetris / Nintendo World Cup
+
+cartridge sha256:a4e8ea06ca01664ff995194a6f5de29a967ddf1e479156fde18fac0a557ae48b
+  :board region=pal id:NES-TSROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :
+  :information
+  :  serial:   NES-UM-GBR
+  :  serial:   NES-UM-FRG
+  :  serial:   NES-UM-SCN
+  :  serial:   NES-UM-ESP
+  :  board:    NES-TSROM-08
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 3
+  :  title:    Super Mario Bros. 3
+
+cartridge sha256:f6c64a384f7b11ab72b862a5fc237ead5c15c72102fa13b62f50408259ad4bbe
+  :board region=pal id:NES-SEROM
+  :  chip type=MMC1B3
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :
+  :information
+  :  serial:   NES-EI-EEC
+  :  serial:   NES-EI-FRA
+  :  serial:   NES-EI-ESP
+  :  board:    NES-SEROM-05
+  :  revision: 1.0
+  :  name:     Tetris
+  :  title:    Tetris
+
+cartridge sha256:9fe815d8fd175ef9ef03fb010638f2b6b7aa9d11d5a40eda2476450918543e6f
+  :board region=pal id=NES-TKROM
+  :  chip type=MMC3C
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=save.ram size=0x2000
+  :  chr
+  :    rom name=character.rom size=0x40000
+  :
+  :information
+  :  serial:   NES-WB-NOE
+  :  board:    NES-TKROM-10
+  :  revision: 1.0
+  :  name:     Wario's Woods
+  :  title:    Wario's Woods
+
+cartridge sha256:f1eb29dd1c7b2b29f4932df853f32a7560bbfe64997281aa79f61ba9f131fb17
+  :board region=pal id:NES-NROM-256
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :
+  :information
+  :  serial:   NES-WR-EEC
+  :  serial:   NES-WR-ESP
+  :  board:    NES-NROM-256-06
+  :  revision: 1.0
+  :  name:     Wrecking Crew
+  :  title:    Wrecking Crew
+
diff --git a/icarus/Database/PlayChoice-10.bml b/icarus/Database/PlayChoice-10.bml
new file mode 100644
index 0000000..ad445a7
--- /dev/null
+++ b/icarus/Database/PlayChoice-10.bml
@@ -0,0 +1,113 @@
+database owner=hex_usr
+  :Custom mappings designed only to get the games to work.
+
+cartridge sha256:37b1bd6a638d0044e68f9b5e01fc7e6ebfb3490c0f4d2c4695710c4e8f830a07
+  :board id:NES-NROM-128
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-01-ROM
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Duck Hunt
+  :  title:    Duck Hunt
+
+cartridge sha256:4ffca45697e5cd91699b0071966a89bd8d32a3f14ae87ceb355aeadf61fca218
+  :board id:NES-NROM-128
+  :  mirror mode=horizontal
+  :  prg
+  :    rom name=program.rom size=0x4000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-01-ROM
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Golf
+  :  title:    Golf
+
+cartridge sha256:967620e98d157d70c6cd4b72d88877d2aba49bc2e2d9008482b940ffd48f6b25
+  :board id:JALECO-JF-09
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-01-ROM-C
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Goonies, The
+  :  title:    The Goonies
+
+cartridge sha256:613da8bfaaa0be4b8308292acc5973d409f54ed143e14f082e1ef95442520ac2
+  :board id:NES-NROM-256
+  :  mirror mode=vertical
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x2000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-02-ROM
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Super Mario Bros.
+  :  title:    Super Mario Bros.
+
+cartridge sha256:3333a9dd6ef1e99150406413d7080f7007a6da9b9419bca936be70232a4ae304
+  :board id:NES-TLROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-01-ROM-G
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 2
+  :  title:    Super Mario Bros. 2
+
+cartridge sha256:01d456bcd2389a33cb536a86a9fcd524db52b6dbb30628e6d78297cdec4e3e29
+  :board id:NES-TSROM
+  :  chip type=MMC3B
+  :  prg
+  :    rom name=program.rom size=0x40000
+  :    ram name=work.ram size=0x2000 volatile
+  :  chr
+  :    rom name=character.rom size=0x20000
+  :  pc10
+  :    rom name=instructions.rom size=0x2000
+  :    rom name=key.rom size=0x9
+  :
+  :information
+  :  board:    PCH1-01-ROM-G
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Super Mario Bros. 3
+  :  title:    Super Mario Bros. 3
+
diff --git a/icarus/Database/VS. System.bml b/icarus/Database/VS. System.bml
new file mode 100644
index 0000000..3d67cef
--- /dev/null
+++ b/icarus/Database/VS. System.bml	
@@ -0,0 +1,673 @@
+database owner=hex_usr
+  :Custom mappings designed only to get the games to work.
+  :Games without extra hardware such as the 74xx32 (UxROM) are split into
+  :ROMs inserted into slots. A missing ROM causes open bus instead of mirroring.
+
+vs sha256:37ca2b6898e6c3cc96dcde5f0bf17268b907b448a45c58a8f1ea9d2c34bd7c63
+  :side
+  :  ppu version=RP2C04-0002
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  chip type=74HC32
+  :  prg
+  :    rom name=program.rom size=0x20000
+  :  chr
+  :    ram name=character.ram size=0x2000 volatile
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:2 Coins - 1 Credit
+  :    option value=0x01 name:3 Coins - 1 Credit
+  :    option value=0x05 name:4 Coins - 1 Credit
+  :    option value=0x03 name:5 Coins - 1 Credit
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x00 name:3 lives
+  :    option value=0x08 name:2 lives
+  :  setting name:Bonus ~needs verification~
+  :    option value=0x00 name:100000 OR Timer Ã 4; Heart Ã 40
+  :    option value=0x20 name:200000 OR Timer Ã 6; Heart Ã 60
+  :    option value=0x10 name:300000 OR Timer Ã 8; Heart Ã 80
+  :    option value=0x30 name:400000 OR Timer Ã 9; Heart Ã 90
+  :  setting name:Difficulty
+  :    option value=0x00 name:Easy
+  :    option value=0x40 name:Hard
+  :
+  :information
+  :  serial:   MDS-CV
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Castlevania
+  :  title:    VS. Castlevania
+
+vs sha256:020284464fed5b7f1649c463149c810ad36ac8b6478c26620c858e1ce4078f88
+  :side
+  :  ppu version=RP2C04-0003
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  chip type=MMC1B2
+  :  prg
+  :    rom name=program.rom size=0x10000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :  setting name:Drop Rate Increase after
+  :    option value=0x03 name:10 Megavitamins
+  :    option value=0x02 name:9 Megavitamins
+  :    option value=0x01 name:8 Megavitamins
+  :    option value=0x00 name:7 Megavitamins
+  :  setting name:Default Virus Level
+  :    option value=0x04 name:3
+  :    option value=0x00 name:1
+  :    option value=0x08 name:5
+  :    option value=0x0c name:7
+  :  setting name:Drop Rate Speed Up
+  :    option value=0x00 name:Slow
+  :    option value=0x10 name:Medium
+  :    option value=0x20 name:Fast
+  :    option value=0x30 name:Fastest
+  :  setting name:Free Play
+  :    option value=0x00 name:No
+  :    option value=0x40 name:Yes
+  :  setting name:Attract Mode Music
+  :    option value=0x80 name:Plays
+  :    option value=0x00 name:Muted
+  :
+  :information
+  :  serial:   MDS-VU
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Dr. Mario
+  :  title:    VS. Dr. Mario
+
+vs sha256:0626ec9afc5e244bc8b699006a2f1d827d7ab6fb21a183a53aa3c5319d364ba1
+  :side
+  :  ppu version=RC2C03B
+  :  controller port=2 device=zapper
+  :  controller port=1 device=none
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:2 Coins - 1 Credit
+  :    option value=0x02 name:3 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x01 name:1 Coin - 3 Credits
+  :    option value=0x05 name:1 Coin - 4 Credits
+  :    option value=0x03 name:1 Coin - 5 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Difficulty
+  :    option value=0x08 name:Normal
+  :    option value=0x00 name:Easy
+  :    option value=0x10 name:Hard
+  :    option value=0x18 name:Very Hard
+  :  setting name:Misses
+  :    option value=0x20 name:5 Misses
+  :    option value=0x00 name:3 Misses
+  :  setting name:Bonus Miss Award
+  :    option value=0x00 name:30000
+  :    option value=0x40 name:50000
+  :    option value=0x80 name:80000
+  :    option value=0xc0 name:100000
+  :
+  :information
+  :  serial:   MDS-DH
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Duck Hunt
+  :  title:    VS. Duck Hunt
+
+vs sha256:84c3f0d51a935bf478aa657f4728bb6a51112024913860e389f6710321ca5fbd
+  :side
+  :  ppu version=RC2C05-03
+  :  controller port=2 device=zapper
+  :  controller port=1 device=none
+  :  prg
+  :    // ROM chip order:
+  :    // 0x8000-0x9fff A
+  :    // 0x8000-0x9fff B
+  :    // 0xa000-0xbfff
+  :    // 0xc000-0xdfff
+  :    // 0xe000-0xffff
+  :    // iNES order:
+  :    // 0x8000-0x9fff A
+  :    // 0xa000-0xbfff
+  :    // 0xc000-0xdfff
+  :    // 0xe000-0xffff
+  :    // 0x8000-0x9fff B
+  :    // 0x00 Ã 0x2000
+  :    rom name=program.rom size=0xa000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:2 Coins - 1 Credit
+  :    option value=0x01 name:3 Coins - 1 Credit
+  :    option value=0x05 name:4 Coins - 1 Credit
+  :    option value=0x03 name:5 Coins - 1 Credit
+  :    option value=0x07 name:Free Play
+  :  setting name:Difficulty
+  :    option value=0x08 name:Normal
+  :    option value=0x00 name:Easy
+  :    option value=0x10 name:Hard
+  :    option value=0x18 name:Very Hard
+  :  setting name:Lives
+  :    option value=0x20 name:3
+  :    option value=0x00 name:5
+  :  setting name:Bullets per Balloon
+  :    option value=0x00 name:3
+  :    option value=0x40 name:2
+  :  setting name:Bonus Life
+  :    option value=0x00 name:50000 points
+  :    option value=0x80 name:None
+  :
+  :information
+  :  serial:   MDS-GM
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Gumshoe
+  :  title:    Gumshoe
+
+vs sha256:e4a21bd0b502594f72fd0cefab023a15db5f7813791d1737bafac46986b01868
+  :side
+  :  ppu version=RP2C04-0001
+  :  controller port=2 device=zapper
+  :  controller port=1 device=none
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x06 name:2 Coins - 1 Credit
+  :    option value=0x01 name:3 Coins - 1 Credit
+  :    option value=0x05 name:4 Coins - 1 Credit
+  :    option value=0x03 name:5 Coins - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Difficulty
+  :    option value=0x08 name:Normal
+  :    option value=0x00 name:Easy
+  :    option value=0x10 name:Hard
+  :    option value=0x18 name:Very Hard
+  :  setting name:Misses
+  :    option value=0x20 name:5 Misses
+  :    option value=0x00 name:3 Misses
+  :  setting name:Bonus Miss Award
+  :    option value=0x00 name:30000
+  :    option value=0x40 name:50000
+  :    option value=0x80 name:80000
+  :    option value=0xc0 name:100000
+  :
+  :information
+  :  serial:   MDS-HA
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Hogan's Alley
+  :  title:    VS. Hogan's Alley
+
+vs sha256:90087521b810c3d90af8aed726d19804d82cc5af4f1a52b34dcd551332d284bd
+  :side
+  :  ppu version=RP2C04-0004
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x01 name:2 Coins - 1 Credit
+  :    option value=0x05 name:3 Coins - 1 Credit
+  :    option value=0x03 name:4 Coins - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:1 Coin - 4 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x00 name:3
+  :    option value=0x10 name:4
+  :    option value=0x08 name:5
+  :    option value=0x18 name:7
+  :  setting name:Icicles
+  :    option value=0x00 name:Less (Easy)
+  :    option value=0x20 name:More (Hard)
+  :  setting name:Time before Polar Bear
+  :    option value=0x00 name:Long (Easy)
+  :    option value=0x40 name:Short (Hard)
+  :
+  :information
+  :  serial:   MDS-IC
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Ice Climber
+  :  title:    VS. Ice Climber
+
+vs sha256:38bb20d530fbcafecac41222b47b5eec5929e2d43a6fe69daf384085dd506c4c
+  :side
+  :  ppu version=RP2C04-0004
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x01 name:2 Coins - 1 Credit
+  :    option value=0x05 name:3 Coins - 1 Credit
+  :    option value=0x03 name:4 Coins - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:1 Coin - 4 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x00 name:3
+  :    option value=0x10 name:4
+  :    option value=0x08 name:5
+  :    option value=0x18 name:7
+  :  setting name:Icicles
+  :    option value=0x00 name:Less (Easy)
+  :    option value=0x20 name:More (Hard)
+  :  setting name:Time before Polar Bear
+  :    option value=0x00 name:Long (Easy)
+  :    option value=0x40 name:Short (Hard)
+  :
+  :information
+  :  serial:   MDS-IC
+  :  region:   USA
+  :  revision: 1.1
+  :  name:     Ice Climber
+  :  title:    VS. Ice Climber
+  :  //Requires holding Button 3 on the VS. Panel at startup.
+  :  //Bypass cheat code: b5fc/fe
+
+vs sha256:b920ad68b56c6fdbcd74659ac3d8340f2378a4c117bd6f15d653d23f2e633555
+  :side
+  :  ppu version=RP2C04-0002
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x01 name:1 Coin - 1 Credit
+  :    option value=0x05 name:2 Coins - 1 Credit
+  :    option value=0x03 name:3 Coins - 1 Credit
+  :    option value=0x07 name:4 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x04 name:1 Coin - 4 Credits
+  :    option value=0x00 name:Free Play
+  :  setting name:Hole Size
+  :    option value=0x00 name:Large
+  :    option value=0x08 name:Small
+  :  setting name:Scoring
+  :    option value=0x00 name:Par & up: Normal+1, Bogey: 0
+  :    option value=0x10 name:Par & up: Normal, Bogey: Normal
+  :  setting name:Starting Points
+  :    option value=0x00 name:10
+  :    option value=0x40 name:13
+  :    option value=0x20 name:16
+  :    option value=0x60 name:20
+  :  setting name:CPU Difficulty
+  :    option value=0x00 name:Easy
+  :    option value=0x80 name:Hard
+  :
+  :information
+  :  serial:   MDS-LG
+  :  region:   USA
+  :  revision: UniSystem
+  :  name:     Ladies Golf
+  :  title:    Ladies Golf
+  :  //title:    Stroke & Match Golf
+
+vs sha256:74ad66ebe7c931569db0a615f2225cf45ef11da1c9b5c956ecfe11c3991ea6ee
+  :side
+  :  ppu version=RP2C04-0002
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:1 Coin - 4 Credits
+  :    option value=0x01 name:2 Coins - 1 Credit
+  :    option value=0x05 name:3 Coins - 1 Credit
+  :    option value=0x03 name:4 Coins - 1 Credit
+  :    option value=0x07 name:Free Play
+  :  setting name:Time Limit
+  :    option value=0x00 name:280
+  :    option value=0x10 name:250
+  :    option value=0x08 name:220
+  :    option value=0x18 name:200
+  :  setting name:Enemies
+  :    option value=0x00 name:Less
+  :    option value=0x40 name:More
+  :
+  :information
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Mach Rider
+  :  title:    VS. Mach Rider
+
+vs sha256:eb774ce9f0c5da8ccaca2c6d680c96709beada8b7f74067eb4781b64e29de5bd
+  :side
+  :  ppu version=RP2C03B
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x01 name:1 Coin - 1 Credit
+  :    option value=0x05 name:2 Coins - 1 Credit
+  :    option value=0x03 name:3 Coins - 1 Credit
+  :    option value=0x07 name:4 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x04 name:1 Coin - 4 Credits
+  :    option value=0x00 name:Free Play
+  :  setting name:Side Drain Walls
+  :    option value=0x00 name:High
+  :    option value=0x08 name:Low
+  :  setting name:Extra Ball Score
+  :    option value=0x10 name:70000
+  :    option value=0x00 name:50000
+  :  setting name:Balls
+  :    option value=0x00 name:3
+  :    option value=0x20 name:5
+  :    option value=0x40 name:4
+  :    option value=0x60 name:2
+  :  setting name:Ball Speed
+  :    option value=0x00 name:Normal
+  :    option value=0x80 name:Fast
+  :
+  :information
+  :  serial:   MDS-PN
+  :  region:   JPN
+  :  revision: 1.0
+  :  name:     Pinball
+  :  title:    VS.ãã³ãã¼ã«
+  :  //Controlled using both controllers' A Buttons.
+
+vs sha256:963e0135121a522ad2ff1d7e4b018282eaad6531fc67a5774b5f462995a0653f
+  :side
+  :  ppu version=RP2C04-0001
+  :  controller port=1 device=gamepad
+  :  controller port=2 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x01 name:1 Coin - 1 Credit
+  :    option value=0x05 name:2 Coins - 1 Credit
+  :    option value=0x03 name:3 Coins - 1 Credit
+  :    option value=0x07 name:4 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x04 name:1 Coin - 4 Credits
+  :    option value=0x00 name:Free Play
+  :  setting name:Side Drain Walls
+  :    option value=0x00 name:High
+  :    option value=0x08 name:Low
+  :  setting name:Extra Ball Score
+  :    option value=0x10 name:70000
+  :    option value=0x00 name:50000
+  :  setting name:Balls
+  :    option value=0x00 name:3
+  :    option value=0x20 name:5
+  :    option value=0x40 name:4
+  :    option value=0x60 name:2
+  :  setting name:Ball Speed
+  :    option value=0x00 name:Normal
+  :    option value=0x80 name:Fast
+  :
+  :information
+  :  serial:   MDS-PN
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Pinball
+  :  title:    VS. Pinball
+
+vs sha256:be2136bed65347c7f3c0e33ea5caf7a83c29113bcabb07a6a152cdb76a2a07c4
+  :side
+  :  prg
+  :    rom name=program-1.rom size=0x2000
+  :side
+  :  ppu version=RP2C04-0002
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program-2.rom size=0x8000
+  :  chr
+  :    rom name=character-2.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x01 name:2 Coins - 1 Credit
+  :    option value=0x05 name:3 Coins - 1 Credit
+  :    option value=0x03 name:4 Coins - 1 Credit
+  :    option value=0x04 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x06 name:1 Coin - 4 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x08 name:3
+  :    option value=0x00 name:2
+  :
+  :information
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Raid on Bungeling Bay
+  :  title:    VS. Raid on Bungeling Bay
+  :  //Requires holding Buttons 3 and 4 on the VS. Panel at startup.
+  :  //Bypass cheat code: 96e0/e2
+
+vs sha256:9b95dc322fc25599bb7027463ea8ed83b792be004fe57767200a63f428c14232
+  :side
+  :  ppu version=RC2C03B
+  :  controller port=1 device=gamepad
+  :  controller port=2 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x01 name:2 Coins - 1 Credit
+  :    option value=0x03 name:3 Coins - 1 Credit
+  :    option value=0x02 name:1 Coin - 2 Credits
+  :  setting name:0x04
+  :    option value=0x00 name:0x00
+  :    option value=0x04 name:0x04
+  :  setting name:0x08
+  :    option value=0x00 name:0x00
+  :    option value=0x08 name:0x08
+  :  setting name:0x10
+  :    option value=0x00 name:0x00
+  :    option value=0x10 name:0x10
+  :  setting name:PPU
+  :    option value=0x00 name:Rx2C03
+  :    option value=0x20 name:RP2C04-0001
+  :    option value=0x60 name:RP2C04-0002
+  :    option value=0xa0 name:RP2C04-0003
+  :    option value=0xe0 name:RP2C04-0004
+  :
+  :information
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Star Luster
+  :  title:    Star Luster
+
+vs sha256:c19cabbc7b187b6190ee88192dc610a2f51021f6b22bf67aebbc5342f148ac1c
+  :side
+  :  ppu version=RP2C04-0002
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x01 name:1 Coin - 1 Credit
+  :    option value=0x05 name:2 Coins - 1 Credit
+  :    option value=0x03 name:3 Coins - 1 Credit
+  :    option value=0x07 name:4 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x02 name:1 Coin - 3 Credits
+  :    option value=0x04 name:1 Coin - 4 Credits
+  :    option value=0x00 name:Free Play
+  :  setting name:Hole Size
+  :    option value=0x00 name:Large
+  :    option value=0x08 name:Small
+  :  setting name:Scoring
+  :    option value=0x00 name:Par & up: Normal+1, Bogey: 0
+  :    option value=0x10 name:Par & up: Normal, Bogey: Normal
+  :  setting name:Starting Points
+  :    option value=0x00 name:10
+  :    option value=0x40 name:13
+  :    option value=0x20 name:16
+  :    option value=0x60 name:20
+  :  setting name:CPU Difficulty
+  :    option value=0x00 name:Easy
+  :    option value=0x80 name:Hard
+  :
+  :information
+  :  serial:   MDS-GF
+  :  region:   USA
+  :  revision: UniSystem
+  :  name:     Stroke & Match Golf
+  :  title:    Stroke & Match Golf
+
+vs sha256:c7ae61f4e850a8363c1546402334757727f3641acf41f28a2b7406145e7561f3
+  :side
+  :  cpu version=RP2A04
+  :side
+  :  ppu version=RP2C04-0004
+  :  controller port=1 device=gamepad
+  :  controller port=2 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:2 Coins - 1 Credit
+  :    option value=0x02 name:3 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x01 name:1 Coin - 3 Credits
+  :    option value=0x05 name:1 Coin - 4 Credits
+  :    option value=0x03 name:1 Coin - 5 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x00 name:3 lives
+  :    option value=0x08 name:2 lives
+  :  setting name:Coins for Bonus Life
+  :    option value=0x10 name:200 coins
+  :    option value=0x00 name:100 coins
+  :    option value=0x20 name:150 coins
+  :    option value=0x30 name:250 coins
+  :  setting name:Timer Speed
+  :    option value=0x00 name:Normal
+  :    option value=0x40 name:Fast
+  :  setting name:Continue Lives
+  :    option value=0x00 name:4 lives
+  :    option value=0x80 name:3 lives
+  :
+  :information
+  :  serial:   MDS-SM
+  :  region:   USA
+  :  revision: Easy
+  :  name:     Super Mario Bros.
+  :  title:    VS. Super Mario Bros.
+
+vs sha256:5eb7f18541c61eb3941b00436603b5aaad4c93a2b299918f8894963d506271dc
+  :side
+  :  cpu version=RP2A04
+  :side
+  :  ppu version=RP2C04-0004
+  :  controller port=1 device=gamepad
+  :  controller port=2 device=gamepad
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x4000
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x04 name:2 Coins - 1 Credit
+  :    option value=0x02 name:3 Coins - 1 Credit
+  :    option value=0x06 name:1 Coin - 2 Credits
+  :    option value=0x01 name:1 Coin - 3 Credits
+  :    option value=0x05 name:1 Coin - 4 Credits
+  :    option value=0x03 name:1 Coin - 5 Credits
+  :    option value=0x07 name:Free Play
+  :  setting name:Lives
+  :    option value=0x00 name:3 lives
+  :    option value=0x08 name:2 lives
+  :  setting name:Coins for Bonus Life
+  :    option value=0x10 name:200 coins
+  :    option value=0x00 name:100 coins
+  :    option value=0x20 name:150 coins
+  :    option value=0x30 name:250 coins
+  :  setting name:Timer Speed
+  :    option value=0x00 name:Fast
+  :    option value=0x40 name:Faster
+  :  setting name:Continue Lives
+  :    option value=0x00 name:4 lives
+  :    option value=0x80 name:3 lives
+  :
+  :information
+  :  serial:   MDS-SM
+  :  region:   USA
+  :  revision: Hard
+  :  name:     Super Mario Bros.
+  :  title:    VS. Super Mario Bros.
+
+vs sha256:269a3cd6bdbf79ee9baed9b8835ec66136f10f515f68d6ffbb1681fa30ad0717
+  :side
+  :  ppu version=RP2C04-0001
+  :  controller port=2 device=gamepad
+  :  controller port=1 device=gamepad
+  :  chip type=108
+  :  prg
+  :    rom name=program.rom size=0x8000
+  :  chr
+  :    rom name=character.rom size=0x8000
+  :  setting name:Difficulty
+  :    option value=0x01 name:Normal
+  :    option value=0x00 name:Easy
+  :    option value=0x02 name:Hard
+  :    option value=0x03 name:Very Hard
+  :  setting name:Lives
+  :    option value=0x04 name:3
+  :    option value=0x00 name:2
+  :  setting name:Price
+  :    option value=0x00 name:1 Coin - 1 Credit
+  :    option value=0x08 name:1 Coin - 2 Credits
+  :    option value=0x10 name:2 Coins - 1 Credit
+  :    option value=0x18 name:3 Coins - 1 Credit
+  :  setting name:Palette
+  :    option value=0x00 name:RP2C04-0001
+  :    option value=0x40 name:RP2C04-0002
+  :    option value=0x80 name:RP2C04-0003
+  :    option value=0xc0 name:RP2C04-0004
+  :    option value=0x20 name:Rx2C03
+  :
+  :information
+  :  region:   USA
+  :  revision: 1.0
+  :  name:     Super SkyKid
+  :  title:    Super SkyKid
+
diff --git a/icarus/core/atari-2600.cpp b/icarus/core/atari-2600.cpp
new file mode 100644
index 0000000..4ecfc68
--- /dev/null
+++ b/icarus/core/atari-2600.cpp
@@ -0,0 +1,45 @@
+auto Icarus::atari2600Manifest(string location) -> string {
+  vector<uint8_t> buffer;
+  concatenate(buffer, {location, "program.rom"});
+  return atari2600Manifest(buffer, location);
+}
+
+auto Icarus::atari2600Manifest(vector<uint8_t>& buffer, string location) -> string {
+  string manifest;
+
+  if(settings["icarus/UseDatabase"].boolean() && !manifest) {
+    string digest = Hash::SHA256(buffer.data(), buffer.size()).digest();
+    for(auto node : database.atari2600) {
+      if(node["sha256"].text() == digest) {
+        manifest.append(node.text(), "\n  sha256: ", digest, "\n");
+        break;
+      }
+    }
+  }
+
+  if(settings["icarus/UseHeuristics"].boolean() && !manifest) {
+    Atari2600Cartridge cartridge{location, buffer.data(), buffer.size()};
+    manifest = cartridge.manifest;
+  }
+
+  return manifest;
+}
+
+auto Icarus::atari2600Import(vector<uint8_t>& buffer, string location) -> string {
+  auto name = Location::prefix(location);
+  auto source = Location::path(location);
+  string target{settings["Library/Location"].text(), "Atari 2600/", name, ".ms/"};
+//if(directory::exists(target)) return failure("game already exists");
+
+  auto manifest = atari2600Manifest(buffer, location);
+  if(!manifest) return failure("failed to parse ROM image");
+
+  if(!directory::create(target)) return failure("library path unwritable");
+  if(file::exists({source, name, ".sav"}) && !file::exists({target, "save.ram"})) {
+    file::copy({source, name, ".sav"}, {target, "save.ram"});
+  }
+
+  if(settings["icarus/CreateManifests"].boolean()) file::write({target, "manifest.bml"}, manifest);
+  file::write({target, "program.rom"}, buffer);
+  return success(target);
+}
diff --git a/icarus/core/core.cpp b/icarus/core/core.cpp
index d63fe82..3bd08e6 100644
--- a/icarus/core/core.cpp
+++ b/icarus/core/core.cpp
@@ -1,6 +1,7 @@
 Icarus::Icarus() {
   database.famicom = BML::unserialize(string::read(locate("Database/Famicom.bml")));
   database.superFamicom = BML::unserialize(string::read(locate("Database/Super Famicom.bml")));
+  database.sg1000 = BML::unserialize(string::read(locate("Database/SG-1000.bml")));
   database.masterSystem = BML::unserialize(string::read(locate("Database/Master System.bml")));
   database.megaDrive = BML::unserialize(string::read(locate("Database/Mega Drive.bml")));
   database.gameBoy = BML::unserialize(string::read(locate("Database/Game Boy.bml")));
@@ -9,6 +10,8 @@ Icarus::Icarus() {
   database.gameGear = BML::unserialize(string::read(locate("Database/Game Gear.bml")));
   database.wonderSwan = BML::unserialize(string::read(locate("Database/WonderSwan.bml")));
   database.wonderSwanColor = BML::unserialize(string::read(locate("Database/WonderSwan Color.bml")));
+  database.vsSystem = BML::unserialize(string::read(locate("Database/VS. System.bml")));
+  database.playchoice10 = BML::unserialize(string::read(locate("Database/PlayChoice-10.bml")));
   database.bsMemory = BML::unserialize(string::read(locate("Database/BS Memory.bml")));
   database.sufamiTurbo = BML::unserialize(string::read(locate("Database/Sufami Turbo.bml")));
 }
@@ -34,6 +37,7 @@ auto Icarus::manifest(string location) -> string {
   auto type = Location::suffix(location).downcase();
   if(type == ".fc") return famicomManifest(location);
   if(type == ".sfc") return superFamicomManifest(location);
+  if(type == ".sg") return sg1000Manifest(location);
   if(type == ".ms") return masterSystemManifest(location);
   if(type == ".md") return megaDriveManifest(location);
   if(type == ".gb") return gameBoyManifest(location);
@@ -42,6 +46,8 @@ auto Icarus::manifest(string location) -> string {
   if(type == ".gg") return gameGearManifest(location);
   if(type == ".ws") return wonderSwanManifest(location);
   if(type == ".wsc") return wonderSwanColorManifest(location);
+  if(type == ".vs") return vsSystemManifest(location);
+  if(type == ".pc10") return playchoice10Manifest(location);
   if(type == ".bs") return bsMemoryManifest(location);
   if(type == ".st") return sufamiTurboManifest(location);
 
@@ -72,6 +78,7 @@ auto Icarus::import(string location) -> string {
 
   if(type == ".fc" || type == ".nes") return famicomImport(buffer, location);
   if(type == ".sfc" || type == ".smc") return superFamicomImport(buffer, location);
+  if(type == ".sg") return sg1000Import(buffer, location);
   if(type == ".ms" || type == ".sms") return masterSystemImport(buffer, location);
   if(type == ".md" || type == ".smd" || type == ".gen") return megaDriveImport(buffer, location);
   if(type == ".gb") return gameBoyImport(buffer, location);
@@ -80,6 +87,8 @@ auto Icarus::import(string location) -> string {
   if(type == ".gg") return gameGearImport(buffer, location);
   if(type == ".ws") return wonderSwanImport(buffer, location);
   if(type == ".wsc") return wonderSwanColorImport(buffer, location);
+  if(type == ".vs") return vsSystemImport(buffer, location);
+  if(type == ".pc10") return playchoice10Import(buffer, location);
   if(type == ".bs") return bsMemoryImport(buffer, location);
   if(type == ".st") return sufamiTurboImport(buffer, location);
 
diff --git a/icarus/core/core.hpp b/icarus/core/core.hpp
index 8e663c1..904661f 100644
--- a/icarus/core/core.hpp
+++ b/icarus/core/core.hpp
@@ -11,17 +11,40 @@ struct Icarus {
 
   auto concatenate(vector<uint8_t>& output, string location) -> void;
 
+  //atari-2600.cpp
+  auto atari2600Manifest(string location) -> string;
+  auto atari2600Manifest(vector<uint8_t>& buffer, string location) -> string;
+  auto atari2600Import(vector<uint8_t>& buffer, string location) -> string;
+
   //famicom.cpp
   auto famicomManifest(string location) -> string;
   auto famicomManifest(vector<uint8_t>& buffer, string location, uint* prgrom = nullptr, uint* chrrom = nullptr) -> string;
+  auto famicomManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void;
   auto famicomImport(vector<uint8_t>& buffer, string location) -> string;
 
+  //vs-system.cpp
+  auto vsSystemManifest(string location) -> string;
+  auto vsSystemManifest(vector<uint8_t>& buffer, string location, uint* prgrom = nullptr, uint* chrrom = nullptr) -> string;
+  auto vsSystemManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void;
+  auto vsSystemImport(vector<uint8_t>& buffer, string location) -> string;
+
+  //playchoice-10.cpp
+  auto playchoice10Manifest(string location) -> string;
+  auto playchoice10Manifest(vector<uint8_t>& buffer, string location, uint* prgrom = nullptr, uint* chrrom = nullptr, uint* instrom = nullptr, uint* keyrom = nullptr) -> string;
+  auto playchoice10ManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void;
+  auto playchoice10Import(vector<uint8_t>& buffer, string location) -> string;
+
   //super-famicom.cpp
   auto superFamicomManifest(string location) -> string;
   auto superFamicomManifest(vector<uint8_t>& buffer, string location, bool* firmwareAppended = nullptr) -> string;
   auto superFamicomManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void;
   auto superFamicomImport(vector<uint8_t>& buffer, string location) -> string;
 
+  //sg-1000.cpp
+  auto sg1000Manifest(string location) -> string;
+  auto sg1000Manifest(vector<uint8_t>& buffer, string location) -> string;
+  auto sg1000Import(vector<uint8_t>& buffer, string location) -> string;
+
   //master-system.cpp
   auto masterSystemManifest(string location) -> string;
   auto masterSystemManifest(vector<uint8_t>& buffer, string location) -> string;
@@ -76,8 +99,12 @@ private:
   string errorMessage;
 
   struct {
+    Markup::Node atari2600;
     Markup::Node famicom;
+    Markup::Node vsSystem;
+    Markup::Node playchoice10;
     Markup::Node superFamicom;
+    Markup::Node sg1000;
     Markup::Node masterSystem;
     Markup::Node megaDrive;
     Markup::Node gameBoy;
diff --git a/icarus/core/famicom.cpp b/icarus/core/famicom.cpp
index 34f2851..ec63d0d 100644
--- a/icarus/core/famicom.cpp
+++ b/icarus/core/famicom.cpp
@@ -8,7 +8,12 @@ auto Icarus::famicomManifest(string location) -> string {
 
 auto Icarus::famicomManifest(vector<uint8_t>& buffer, string location, uint* prgrom, uint* chrrom) -> string {
   string markup;
-  string digest = Hash::SHA256(buffer.data(), buffer.size()).digest();
+  unsigned offset = (buffer.size() & 0x1fff) == 0 ? 0 : 16;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) offset = 0;
+  string digest = Hash::SHA256(buffer.data() + offset, buffer.size() - offset).digest();
 
   if(settings["icarus/UseDatabase"].boolean() && !markup) {
     for(auto node : database.famicom) {
@@ -24,6 +29,7 @@ auto Icarus::famicomManifest(vector<uint8_t>& buffer, string location, uint* prg
     if(markup = cartridge.markup) {
       markup.append("\n");
       markup.append("information\n");
+      markup.append("  region: ", cartridge.region == 0 ? "NTSC" : "PAL", "\n");
       markup.append("  title:  ", Location::prefix(location), "\n");
       markup.append("  sha256: ", digest, "\n");
       markup.append("  note:   ", "heuristically generated by icarus\n");
@@ -37,7 +43,26 @@ auto Icarus::famicomManifest(vector<uint8_t>& buffer, string location, uint* prg
   return markup;
 }
 
+auto Icarus::famicomManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void {
+  if(node["name"].text().endsWith(".rom")) roms.append(node);
+  for(auto leaf : node) famicomManifestScan(roms, leaf);
+}
+
 auto Icarus::famicomImport(vector<uint8_t>& buffer, string location) -> string {
+  bool has_ines_header = true;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) has_ines_header = false;
+  unsigned offset = has_ines_header ? 16 : 0;
+
+  if(has_ines_header) {
+    if(buffer.data()[7] & 0x01) return vsSystemImport(buffer, location);
+    if((buffer.data()[7] & 0x0c) == 0x08) { // NES 2.0
+      if(buffer.data()[7] & 0x02) return playchoice10Import(buffer, location);
+    }
+  }
+
   auto name = Location::prefix(location);
   auto source = Location::path(location);
   string target{settings["Library/Location"].text(), "Famicom/", name, ".fc/"};
@@ -48,15 +73,23 @@ auto Icarus::famicomImport(vector<uint8_t>& buffer, string location) -> string {
   auto markup = famicomManifest(buffer, location, &prgrom, &chrrom);
   if(!markup) return failure("failed to parse ROM image");
 
+  auto document = BML::unserialize(markup);
+  vector<Markup::Node> roms;
+  if(has_ines_header) roms.append(BML::unserialize("rom name=ines.rom size=0x10")["rom"]);
+  famicomManifestScan(roms, document["board"]);
+
   if(!directory::create(target)) return failure("library path unwritable");
   if(file::exists({source, name, ".sav"}) && !file::exists({target, "save.ram"})) {
     file::copy({source, name, ".sav"}, {target, "save.ram"});
   }
 
   if(settings["icarus/CreateManifests"].boolean()) file::write({target, "manifest.bml"}, markup);
-  file::write({target, "ines.rom"}, buffer.data(), 16);
-  file::write({target, "program.rom"}, buffer.data() + 16, prgrom);
-  if(!chrrom) return success(target);
-  file::write({target, "character.rom"}, buffer.data() + 16 + prgrom, chrrom);
+  for(auto rom : roms) {
+    auto name = rom["name"].text();
+    auto size = rom["size"].natural();
+    if(size > buffer.size() - offset) return failure("ROM image is missing data");
+    file::write({target, name}, buffer.data() + offset, size);
+    offset += size;
+  }
   return success(target);
 }
diff --git a/icarus/core/playchoice-10.cpp b/icarus/core/playchoice-10.cpp
new file mode 100644
index 0000000..d6e24b0
--- /dev/null
+++ b/icarus/core/playchoice-10.cpp
@@ -0,0 +1,102 @@
+auto Icarus::playchoice10Manifest(string location) -> string {
+  vector<uint8_t> buffer;
+  concatenate(buffer, {location, "ines.rom"});
+  concatenate(buffer, {location, "program.rom"});
+  concatenate(buffer, {location, "character.rom"});
+  concatenate(buffer, {location, "instructions.rom"});
+  concatenate(buffer, {location, "key.rom"});
+  return playchoice10Manifest(buffer, location);
+}
+
+auto Icarus::playchoice10Manifest(vector<uint8_t>& buffer, string location,
+  uint* prgrom, uint* chrrom,
+  uint* instrom, uint* keyrom
+) -> string {
+  string markup;
+  unsigned offset = (buffer.size() & 0x1fff) == 0 ? 0 : 16;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) offset = 0;
+  string digest = Hash::SHA256(buffer.data() + offset, buffer.size() - offset).digest();
+
+  if(settings["icarus/UseDatabase"].boolean() && !markup) {
+    //PlayChoice-10 ROMs in iNES format store 16 bytes for the key,
+    //and 16 more bytes for Counter Out.
+    //However, only 9 key bytes actually exist in the cartridge.
+    //The remaining 7 key bytes, as well as the entire Counter Out,
+    //follow a pattern based on hardware behavior.
+    //TODO: Detect extraneous bytes and exclude them from SHA256
+    for(auto node : database.playchoice10) {
+      if(node["sha256"].text() == digest) {
+        markup.append(node.text(), "\n  sha256:   ", digest, "\n");
+        break;
+      }
+    }
+  }
+
+  if(settings["icarus/UseHeuristics"].boolean() && !markup) {
+    FamicomCartridge cartridge{buffer.data(), buffer.size()};
+    if(markup = cartridge.markup) {
+      markup.append("\n");
+      markup.append("information\n");
+      markup.append("  title:  ", Location::prefix(location), "\n");
+      markup.append("  sha256: ", digest, "\n");
+      markup.append("  note:   ", "heuristically generated by icarus\n");
+    }
+  }
+
+  auto document = BML::unserialize(markup);
+  if(prgrom)  *prgrom  = document["board/prg/rom/size"].natural();  //0 if node does not exist
+  if(chrrom)  *chrrom  = document["board/chr/rom/size"].natural();  //0 if node does not exist
+  if(instrom) *instrom = document.find("board/pc10/rom[0]/size")(0).natural();
+  if(keyrom)  *keyrom  = document.find("board/pc10/rom[1]/size")(0).natural();
+
+  return markup;
+}
+
+auto Icarus::playchoice10ManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void {
+  if(node["name"].text().endsWith(".rom")) roms.append(node);
+  for(auto leaf : node) playchoice10ManifestScan(roms, leaf);
+}
+
+auto Icarus::playchoice10Import(vector<uint8_t>& buffer, string location) -> string {
+  bool has_ines_header = true;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) has_ines_header = false;
+  unsigned offset = has_ines_header ? 16 : 0;
+
+  auto name = Location::prefix(location);
+  auto source = Location::path(location);
+  string target{settings["Library/Location"].text(), "PlayChoice-10/", name, ".pc10/"};
+//if(directory::exists(target)) return failure("game already exists");
+
+  uint prgrom = 0;
+  uint chrrom = 0;
+  uint instrom = 0;
+  uint keyrom = 0;
+  auto markup = playchoice10Manifest(buffer, location, &prgrom, &chrrom, &instrom, &keyrom);
+  if(!markup) return failure("failed to parse ROM image");
+
+  auto document = BML::unserialize(markup);
+  vector<Markup::Node> roms;
+  if(has_ines_header) roms.append(BML::unserialize("rom name=ines.rom size=0x10")["rom"]);
+  playchoice10ManifestScan(roms, document["board"]);
+
+  if(!directory::create(target)) return failure("library path unwritable");
+  if(file::exists({source, name, ".sav"}) && !file::exists({target, "save.ram"})) {
+    file::copy({source, name, ".sav"}, {target, "save.ram"});
+  }
+
+  if(settings["icarus/CreateManifests"].boolean()) file::write({target, "manifest.bml"}, markup);
+  for(auto rom : roms) {
+    auto name = rom["name"].text();
+    auto size = rom["size"].natural();
+    if(size > buffer.size() - offset) return failure("ROM image is missing data");
+    file::write({target, name}, buffer.data() + offset, size);
+    offset += size;
+  }
+  return success(target);
+}
diff --git a/icarus/core/sg-1000.cpp b/icarus/core/sg-1000.cpp
new file mode 100644
index 0000000..d51167d
--- /dev/null
+++ b/icarus/core/sg-1000.cpp
@@ -0,0 +1,45 @@
+auto Icarus::sg1000Manifest(string location) -> string {
+  vector<uint8_t> buffer;
+  concatenate(buffer, {location, "program.rom"});
+  return sg1000Manifest(buffer, location);
+}
+
+auto Icarus::sg1000Manifest(vector<uint8_t>& buffer, string location) -> string {
+  string manifest;
+
+  if(settings["icarus/UseDatabase"].boolean() && !manifest) {
+    string digest = Hash::SHA256(buffer.data(), buffer.size()).digest();
+    for(auto node : database.sg1000) {
+      if(node["sha256"].text() == digest) {
+        manifest.append(node.text(), "\n  sha256: ", digest, "\n");
+        break;
+      }
+    }
+  }
+
+  if(settings["icarus/UseHeuristics"].boolean() && !manifest) {
+    MasterSystemCartridge cartridge{location, buffer.data(), buffer.size()};
+    manifest = cartridge.manifest;
+  }
+
+  return manifest;
+}
+
+auto Icarus::sg1000Import(vector<uint8_t>& buffer, string location) -> string {
+  auto name = Location::prefix(location);
+  auto source = Location::path(location);
+  string target{settings["Library/Location"].text(), "SG-1000/", name, ".ms/"};
+//if(directory::exists(target)) return failure("game already exists");
+
+  auto manifest = sg1000Manifest(buffer, location);
+  if(!manifest) return failure("failed to parse ROM image");
+
+  if(!directory::create(target)) return failure("library path unwritable");
+  if(file::exists({source, name, ".sav"}) && !file::exists({target, "save.ram"})) {
+    file::copy({source, name, ".sav"}, {target, "save.ram"});
+  }
+
+  if(settings["icarus/CreateManifests"].boolean()) file::write({target, "manifest.bml"}, manifest);
+  file::write({target, "program.rom"}, buffer);
+  return success(target);
+}
diff --git a/icarus/core/vs-system.cpp b/icarus/core/vs-system.cpp
new file mode 100644
index 0000000..8ee4ae7
--- /dev/null
+++ b/icarus/core/vs-system.cpp
@@ -0,0 +1,92 @@
+auto Icarus::vsSystemManifest(string location) -> string {
+  vector<uint8_t> buffer;
+  concatenate(buffer, {location, "ines.rom"});
+  concatenate(buffer, {location, "program.rom"});
+  concatenate(buffer, {location, "character.rom"});
+  concatenate(buffer, {location, "program-1.rom"});
+  concatenate(buffer, {location, "character-1.rom"});
+  concatenate(buffer, {location, "program-2.rom"});
+  concatenate(buffer, {location, "character-2.rom"});
+  return vsSystemManifest(buffer, location);
+}
+
+auto Icarus::vsSystemManifest(vector<uint8_t>& buffer, string location, uint* prgrom, uint* chrrom) -> string {
+  string markup;
+  unsigned offset = (buffer.size() & 0x1fff) == 0 ? 0 : 16;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) offset = 0;
+  string digest = Hash::SHA256(buffer.data() + offset, buffer.size() - offset).digest();
+
+  if(settings["icarus/UseDatabase"].boolean() && !markup) {
+    for(auto node : database.vsSystem) {
+      if(node["sha256"].text() == digest) {
+        markup.append(node.text(), "\n  sha256:   ", digest, "\n");
+        break;
+      }
+    }
+  }
+
+  if(settings["icarus/UseHeuristics"].boolean() && !markup) {
+    FamicomCartridge cartridge{buffer.data(), buffer.size()};
+    if(auto markup = cartridge.markup) {
+      markup.append("\n");
+      markup.append("information\n");
+      markup.append("  title:  ", Location::prefix(location), "\n");
+      markup.append("  sha256: ", digest, "\n");
+      markup.append("  note:   ", "heuristically generated by icarus\n");
+    }
+  }
+
+  auto document = BML::unserialize(markup);
+  if(prgrom) *prgrom = document["side/prg/rom/size"].natural();  //0 if node does not exist
+  if(chrrom) *chrrom = document["side/chr/rom/size"].natural();  //0 if node does not exist
+
+  return markup;
+}
+
+auto Icarus::vsSystemManifestScan(vector<Markup::Node>& roms, Markup::Node node) -> void {
+  if(node["name"].text().endsWith(".rom")) roms.append(node);
+  for(auto leaf : node) vsSystemManifestScan(roms, leaf);
+}
+
+auto Icarus::vsSystemImport(vector<uint8_t>& buffer, string location) -> string {
+  bool has_ines_header = true;
+  if(buffer.data()[0] != 'N'
+  || buffer.data()[1] != 'E'
+  || buffer.data()[2] != 'S'
+  || buffer.data()[3] !=  26) has_ines_header = false;
+  unsigned offset = has_ines_header ? 16 : 0;
+
+  auto name = Location::prefix(location);
+  auto source = Location::path(location);
+  string target{settings["Library/Location"].text(), "VS. System/", name, ".vs/"};
+//if(directory::exists(target)) return failure("game already exists");
+
+  uint prgrom = 0;
+  uint chrrom = 0;
+  auto markup = vsSystemManifest(buffer, location, &prgrom, &chrrom);
+  if(!markup) return failure("failed to parse ROM image");
+
+  auto document = BML::unserialize(markup);
+  vector<Markup::Node> roms;
+  if(has_ines_header) roms.append(BML::unserialize("rom name=ines.rom size=0x10")["rom"]);
+  vsSystemManifestScan(roms, document.find("side[0]")(0));
+  vsSystemManifestScan(roms, document.find("side[1]")(0));
+
+  if(!directory::create(target)) return failure("library path unwritable");
+  if(file::exists({source, name, ".sav"}) && !file::exists({target, "save.ram"})) {
+    file::copy({source, name, ".sav"}, {target, "save.ram"});
+  }
+
+  if(settings["icarus/CreateManifests"].boolean()) file::write({target, "manifest.bml"}, markup);
+  for(auto rom : roms) {
+    auto name = rom["name"].text();
+    auto size = rom["size"].natural();
+    if(size > buffer.size() - offset) return failure("ROM image is missing data");
+    file::write({target, name}, buffer.data() + offset, size);
+    offset += size;
+  }
+  return success(target);
+}
diff --git a/icarus/database-legacy/bsx-satellaview.hpp b/icarus/database-legacy/bsx-satellaview.hpp
new file mode 100644
index 0000000..e6507af
--- /dev/null
+++ b/icarus/database-legacy/bsx-satellaview.hpp
@@ -0,0 +1,16 @@
+string BsxSatellaview = R"(
+
+database revision=2013-01-22 owner=byuu
+
+cartridge sha256:80c34b50817d58820bc8c88d2d9fa462550b4a76372e19c6467cbfbc8cf5d9ef
+  :board
+  :  rom type=mask name=program.rom size=0x80000
+  :
+  :information
+  :  serial:   BSMC-ZS5J-JPN
+  :  board:    BSMC-CR-01
+  :  revision: 1.0
+  :  name:     Same Game - Character Cassette
+  :  title:    é®«äº ã­ã£ã©ã«ã»ãã
+
+)";
\ No newline at end of file
diff --git a/icarus/database-legacy/sufami-turbo.hpp b/icarus/database-legacy/sufami-turbo.hpp
new file mode 100644
index 0000000..5ed7ae2
--- /dev/null
+++ b/icarus/database-legacy/sufami-turbo.hpp
@@ -0,0 +1,114 @@
+string SufamiTurbo = R"(
+
+database revision=2013-01-22 owner=byuu
+
+cartridge sha256:2bb55214fb668ca603d7b944b14f105dfb10b987a8902d420fe4ae1cb69c1d4a
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x800
+  :
+  :information
+  :  serial:   SFT-0101-JPN
+  :  revision: 1.0
+  :  name:     SD Ultra Battle - Ultraman Densetsu
+  :  title:    SDã¦ã«ãã©ããã« ã¦ã«ãã©ãã³ä¼èª¬
+
+cartridge sha256:2fec5f2bc7dee010af10569a3d2bc18715a79a126940800c3eade5abbd625e3f
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x800
+  :
+  :information
+  :  serial:   SFT-0102-JPN
+  :  revision: 1.0
+  :  name:     SD Ultra Battle - Seven Densetsu
+  :  title:    SDã¦ã«ãã©ããã« ã»ãã³ä¼èª¬
+
+cartridge sha256:602b20b788640f5743487108a10f3f77bca5ce2d24208b25b1ca498a96eb0d69
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x800
+  :
+  :information
+  :  serial:   SFT-0103-JPN
+  :  revision: 1.0
+  :  name:     Poi Poi Ninja World
+  :  title:    ãã¤ãã¤å¿èã¯ã¼ã«ã
+
+cartridge sha256:3e82215bed08274874b30d461fc4a965c6bca932229da5d46d56e36f484d65eb
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x2000
+  :
+  :information
+  :  serial:   SFT-0104-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Ichinen Sensouki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ä¸å¹´æ¦äºè¨
+
+cartridge sha256:8547a08ed11fe408eac282a90ac46654bd2e5f49bda3aec8e5edf166a0a4b9af
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x2000
+  :
+  :information
+  :  serial:   SFT-0105-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Grips Senki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ã°ãªãã¹æ¦è¨
+
+cartridge sha256:d93b3a570e7cf343f680ab0768a50b77e3577f9c555007e2de3decd6bc4765c8
+  :board
+  :  rom name=program.rom size=0x80000
+  :
+  :information
+  :  serial:   SFT-0106-JPN
+  :  revision: 1.0
+  :  name:     Gegege no Kitarou - Youkai Donjara
+  :  title:    ã²ã²ã²ã®é¬¼å¤ªé å¦æªãã³ã¸ã£ã©
+
+cartridge sha256:2a9d7c9a61318861028a73ca03e32a48cff162d76cba36fbaab8690b212efe9b
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x2000
+  :
+  :information
+  :  serial:   SFT-0107-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Axis Senki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ã¢ã¯ã·ãºæ¦è¨
+
+cartridge sha256:60ac017c18f534e8cf24ca7f38e22ce92db95ea6c30b2d59d76f13c4f1c8a6e4
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x2000
+  :
+  :information
+  :  serial:   SFT-0108-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Babylonia Kenkoku Senki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ããã­ãã¢å»ºå½æ¦è¨
+
+cartridge sha256:5951a58a91d8e397d0a237ccc2b1248e17c7312cb9cc11cbc350200a97b4e021
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x2000
+  :
+  :information
+  :  serial:   SFT-0110-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Zanscar Senki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ã¶ã³ã¹ã«ã¼ã«æ¦è¨
+
+cartridge sha256:e639b5d5d722432b6809ccc6801dc584e1a3016379f34b335ed2dfa73b1ebf69
+  :board linkable
+  :  rom name=program.rom size=0x80000
+  :  ram name=save.ram size=0x800
+  :
+  :information
+  :  serial:   SFT-0111-JPN
+  :  revision: 1.0
+  :  name:     SD Gundam Generation - Colony Kakutouki
+  :  title:    SDã¬ã³ãã ã¸ã§ãã¬ã¼ã·ã§ã³ ã³ã­ãã¼æ ¼éè¨
+
+)";
\ No newline at end of file
diff --git a/icarus/heuristics/atari-2600.cpp b/icarus/heuristics/atari-2600.cpp
new file mode 100644
index 0000000..c65bbcd
--- /dev/null
+++ b/icarus/heuristics/atari-2600.cpp
@@ -0,0 +1,20 @@
+struct Atari2600Cartridge {
+  Atari2600Cartridge(string location, uint8_t* data, uint size);
+
+  string manifest;
+
+//private:
+  struct Information {
+  } information;
+};
+
+Atari2600Cartridge::Atari2600Cartridge(string location, uint8_t* data, uint size) {
+  manifest.append("board\n");
+  manifest.append("  rom name=program.rom size=0x", hex(size), "\n");
+  manifest.append("\n");
+  manifest.append("information\n");
+  manifest.append("  title:  ", Location::prefix(location), "\n");
+  manifest.append("  sha256: ", Hash::SHA256(data, size).digest(), "\n");
+  manifest.append("\n");
+  manifest.append("note: heuristically generated by icarus\n");
+}
diff --git a/icarus/heuristics/famicom.cpp b/icarus/heuristics/famicom.cpp
index e7517f6..0469b38 100644
--- a/icarus/heuristics/famicom.cpp
+++ b/icarus/heuristics/famicom.cpp
@@ -1,15 +1,29 @@
 struct FamicomCartridge {
   FamicomCartridge(const uint8_t* data, uint size);
+  auto vsSystemHeuristic(const uint8_t* data, uint size) -> void;
 
   string markup;
 
 //private:
+  enum class Region : uint {
+    NTSC = 0,
+    PAL = 1,
+  };
+
   uint mapper;
   uint mirror;
   uint prgrom;
   uint prgram;
   uint chrrom;
   uint chrram;
+  bool     battery;
+  bool     region;
+  bool     vs;
+  // NES 2.0
+  bool     pc10;
+  bool     nes2;
+  uint submapper;
+  uint ppu;
 };
 
 FamicomCartridge::FamicomCartridge(const uint8_t* data, uint size) {
@@ -25,46 +39,120 @@ FamicomCartridge::FamicomCartridge(const uint8_t* data, uint size) {
   chrrom = data[5] * 0x2000;
   prgram = 0u;
   chrram = chrrom == 0u ? 8192u : 0u;
+  battery = data[6] & 0x02;
+  vs      = data[7] & 0x01;
+  nes2    = (data[7] & 0x0c) == 0x08;
+  if(!nes2) {
+    // ignore the last 9 bytes of headers that have "DiskDude!" or other
+    // messages written there
+    if(data[12] == 0 && data[13] == 0 && data[14] == 0 && data[15] == 0) {
+      prgram = data[8] * 0x2000;
+      region = data[9] & 0x01;
+    } else {
+      mapper &= 0x0f;
+      vs = false;
+      pc10 = false;
+    }
+  } else {
+    pc10 = data[7] & 0x02;
+    mapper |= (data[8] & 0x0f) << 8;
+    submapper |= data[8] >> 4;
+    prgrom += (data[9] & 0x0f) * 0x400000;
+    chrrom += (data[9] >> 4) * 0x200000;
+    prgram = ((data[10] & 0x0f) == 0 ? 0 : 64) << (data[10] & 0x0f); // no battery
+    prgram += (data[10] >> 4 == 0 ? 0 : 64) << (data[10] >> 4); // battery
+    chrram = ((data[11] & 0x0f) == 0 ? 0 : 64) << (data[11] & 0x0f); // no battery
+    chrram += (data[11] >> 4 == 0 ? 0 : 64) << (data[11] >> 4); // battery
+    region = data[12] & 0x01;
+    ppu = data[13] & 0x0f;
+  }
+
+  if(vs) { vsSystemHeuristic(data, size); return; }
 
-  markup.append("board ");
+  markup.append("board region=", region == (uint)Region::PAL ? "pal" : "ntsc", " ");
 
   switch(mapper) {
   default:
-    markup.append("id:NES-NROM-256\n");
+    if(prgram) {
+      markup.append("id:HVC-FAMILYBASIC\n");
+    } else if(prgrom <= 0x2000) {
+      markup.append("id:NAMCOT-3301\n");
+    } else if(prgrom <= 0x4000) {
+      markup.append("id:NES-NROM-128\n");
+    } else {
+      markup.append("id:NES-NROM-256\n");
+    }
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
   case   1:
-    markup.append("id:NES-SXROM\n");
-    markup.append("  chip type=MMC1B2\n");
-    prgram = 8192;
+  case 155:
+    if(prgram <= 0x2000) {
+      if(submapper != 5 || prgrom >= 0x8000) {
+        markup.append("id:NES-", prgrom <= 0x40000 ? "SNROM" : "SUROM", "\n");
+      } else {
+        markup.append("id:NES-SHROM\n");
+      }
+    } else {
+      markup.append("id:", prgrom <= 0x40000 ? "NES-SOROM" : "HVC-SXROM", "\n");
+    }
+    markup.append("  chip type=MMC1", mapper != 155 ? "B2" : "A", "\n");
+    if(!nes2 && !prgram) prgram = 0x2000;
     break;
 
   case   2:
-    markup.append("id:NES-UOROM\n");
+  case  94:
+  case 180:
+         if(mapper == 94)     markup.append("id:HVC-UN1ROM\n");
+    else if(prgrom <= 131072) markup.append("id:NES-UNROM\n");
+    else                      markup.append("id:NES-UOROM\n");
+    markup.append("  chip type=74HC", mapper != 180 ? "32" : "08", "\n");
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
   case   3:
+  case 185:
     markup.append("id:NES-CNROM\n");
+    if(mapper == 185) {
+      markup.append("  security pass=0x", hex(submapper & 3), "\n");
+    }
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
   case   4:
-    //MMC3
-    markup.append("id:NES-TLROM\n");
-    markup.append("  chip type=MMC3B\n");
-    prgram = 8192;
-    //MMC6
-  //markup.append("id:NES-HKROM\n");
-  //markup.append("  chip type=MMC6n");
-  //prgram = 1024;
+  case 118:
+  case 119:
+    if(prgram != 0x400) {
+      if(submapper != 3) {
+        switch(mapper) {
+        case   4:
+          if(mirror & 2) markup.append("id:NES-TR1ROM\n");
+          else           markup.append("id:NES-TLROM\n");
+          break;
+        case 118: markup.append("id:NES-TLSROM\n"); break;
+        case 119: markup.append("id:NES-TQROM\n"); break;
+        }
+        markup.append("  chip type=MMC3B\n");
+      } else {
+        markup.append("  chip type=ACCLAIM-MC-ACC\n");
+        markup.append("  chip type=MC-ACC\n");
+      }
+    } else {
+      markup.append("id:NES-HKROM\n");
+      markup.append("  chip type=MMC6n");
+    }
+    if(!nes2 && !prgram) prgram = 0x2000;
+    if(mapper == 119 && !nes2 && !chrram) chrram = 0x2000;
     break;
 
   case   5:
-    markup.append("id:NES-ELROM\n");
+         if(prgram ==      0) markup.append("id:NES-ELROM\n");
+    else if(prgram <= 0x2000) markup.append("id:NES-EKROM\n");
+    else if(prgram == 0x8000) markup.append("id:NES-EWROM\n");
+    else if(prgram == 0x4000) markup.append("id:NES-ETROM\n");
     markup.append("  chip type=MMC5\n");
-    prgram = 65536;
+    markup.append("    ram name=internal.ram size=0x400 volatile\n");
+    if(!nes2 && !prgram) prgram = 32768;
     break;
 
   case   7:
@@ -74,46 +162,117 @@ FamicomCartridge::FamicomCartridge(const uint8_t* data, uint size) {
   case   9:
     markup.append("id:NES-PNROM\n");
     markup.append("  chip type=MMC2\n");
-    prgram = 8192;
+    if(!nes2 && !prgram) prgram = 0x2000;
     break;
 
   case  10:
-    markup.append("id:NES-FKROM\n");
+    markup.append("id:HVC-FKROM\n");
     markup.append("  chip type=MMC4\n");
-    prgram = 8192;
+    if(!nes2 && !prgram) prgram = 0x2000;
+    break;
+
+  case  13:
+    markup.append("id:NES-CPROM\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
   case  16:
-    markup.append("id:BANDAI-FCG\n");
-    markup.append("  chip type=LZ93D50\n");
+  case 153:
+  case 159:
+    switch(mapper) {
+    case  16:
+      markup.append("id:BANDAI-FCG\n");
+      markup.append("  chip type=LZ93D50\n");
+      markup.append("  chip type=24C02\n");
+      break;
+    case 153:
+      markup.append("id:BANDAI-JUMP2\n");
+      markup.append("  chip type=LZ93D50\n");
+      if(!nes2 && !prgram) prgram = 0x2000;
+      break;
+    case 159:
+      markup.append("id:BANDAI-LZ93D50\n");
+      markup.append("  chip type=LZ93D50\n");
+      markup.append("  chip type=24C01\n");
+      break;
+    }
     break;
 
-  case  21:
-  case  23:
-  case  25:
-    //VRC4
+  case  18:
+    markup.append("id:JALECO-JF-24\n");
+    markup.append("  chip type=SS88006\n");
+    break;
+
+  case  19:
+  case 210:
+    {
+      string chip_type;
+      switch(mapper) {
+      case  19: chip_type = "163"; break;
+      case 210: chip_type = submapper == 1 ? "175" : "340"; break;
+      }
+      markup.append("id:NAMCOT-", chip_type, "\n");
+      markup.append("  chip type=", chip_type, "\n");
+    }
+    if(prgram == 0x80) {
+      markup.append("    ram name=sound.ram size=0x80\n");
+      prgram = 0;
+    } else {
+      markup.append("    ram name=sound.ram size=0x80 volatile\n");
+    }
+    if(mapper == 210 && submapper == 1) {
+      markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
+    }
+    break;
+
+  case  21: //VRC4a,VRC4c
+  case  23: //VRC4e,VRC4f,VRC2b
+  case  25: //VRC4b,VRC4d,VRC2c
+    //VRC4f is not confirmed to exist.
     markup.append("id:KONAMI-VRC-4\n");
-    markup.append("  chip type=VRC4\n");
-    markup.append("    pinout a0=1 a1=0\n");
-    prgram = 8192;
+    markup.append("  chip type=", submapper == 15 ? "VRC2" : "VRC4", "\n");
+    if(submapper == 0) {
+      switch(mapper) {
+      case 21: markup.append("    pinout a0=1 a1=2\n"); break;
+      case 23: markup.append("    pinout a0=0 a1=1\n"); break;
+      case 25: markup.append("    pinout a0=1 a1=0\n"); break;
+      }
+    } else if(submapper == 15) {
+      markup.append("    pinout",
+        " a0=", submapper == 25,
+        " a1=", submapper == 23,
+      "\n");
+    } else {
+      markup.append("    pinout",
+        " a0=", submapper & 7,
+        " a1=", (submapper & 7) + (((submapper & 8) >> 2) - 1),
+      "\n");
+    }
+    if(!nes2 && !prgram) prgram = 0x2000;
     break;
 
   case  22:
-    //VRC2
+    //VRC2a
     markup.append("id:KONAMI-VRC-2\n");
     markup.append("  chip type=VRC2\n");
-    markup.append("    pinout a0=0 a1=1\n");
+    markup.append("    pinout a0=1 a1=0\n");
     break;
 
   case  24:
+  case  26:
     markup.append("id:KONAMI-VRC-6\n");
     markup.append("  chip type=VRC6\n");
+    switch(mapper) {
+    case 24: markup.append("    pinout a0=0 a1=1\n"); break;
+    case 26: markup.append("    pinout a0=1 a1=0\n"); break;
+    }
+    if(!nes2 && !prgram) prgram = 0x2000;
     break;
 
-  case  26:
-    markup.append("id:KONAMI-VRC-6\n");
-    markup.append("  chip type=VRC6\n");
-    prgram = 8192;
+  case  32:
+    markup.append("id:IREM-G101\n");
+    markup.append("  chip type=G-101\n");
+    if(submapper == 1) markup.append("  mirror mode=screen-1\n");
     break;
 
   case  34:
@@ -121,22 +280,37 @@ FamicomCartridge::FamicomCartridge(const uint8_t* data, uint size) {
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
+  case  65:
+    markup.append("id:IREM-H3001\n");
+    markup.append("  chip type=IF-H3001\n");
+    break;
+
   case  66:
     markup.append("id:NES-GNROM\n");
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
+  case  68:
+    markup.append("id:SUNSOFT-4\n");
+    if(!nes2 && !prgram) prgram = 0x2000;
+    break;
+
   case  69:
     markup.append("id:SUNSOFT-5B\n");
     markup.append("  chip type=5B\n");
-    prgram = 8192;
+    if(!nes2 && !prgram) prgram = 0x2000;
+    break;
+
+  case  70:
+    markup.append("id:BANDAI-74*161/161/32\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
     break;
 
   case  73:
     markup.append("id:KONAMI-VRC-3\n");
     markup.append("  chip type=VRC3\n");
     markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
-    prgram = 8192;
+    if(!nes2 && !prgram) prgram = 0x2000;
     break;
 
   case  75:
@@ -144,18 +318,160 @@ FamicomCartridge::FamicomCartridge(const uint8_t* data, uint size) {
     markup.append("  chip type=VRC1\n");
     break;
 
+  case  77:
+    markup.append("id:IREM-74*161/161/21/138\n");
+    break;
+
+  case  78:
+    markup.append("id:", submapper != 3 ? "JALECO-JF-16" : "IREM-HOLYDIVER", "\n");
+    break;
+
   case  85:
     markup.append("id:KONAMI-VRC-7\n");
     markup.append("  chip type=VRC7\n");
-    prgram = 8192;
+    markup.append("    pinout a0=4 a1=5\n");
+    if(!nes2 && !prgram) prgram = 0x2000;
+    break;
+
+  case  86:
+    markup.append("id:JALECO-JF-13\n");
+    markup.append("  chip type=uPD7756C\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
+    break;
+
+  case  87:
+    markup.append("id:JALECO-JF-09\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
+    break;
+
+  case  97:
+    markup.append("id:IREM-TAM-S1\n");
+    markup.append("  chip type=TAM-S1\n");
+    break;
+
+  case 140:
+    markup.append("id:JALECO-JF-14\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
+    break;
+
+  case  76:
+  case  88:
+  case  95:
+  case 154:
+  case 206:
+    switch(mapper) {
+    case  76: markup.append("id:NAMCOT-3446\n"); break;
+    case  88: markup.append("id:NAMCOT-3443\n"); break;
+    case  95: markup.append("id:NAMCOT-3425\n"); break;
+    case 154: markup.append("id:NAMCOT-3453\n"); break;
+    case 206: markup.append("id:NAMCOT-3401\n"); break;
+    // Normally 3416, but ããã«ã®å¡ (Babel no Tou) uses bankswitching despite
+    // fitting entirely in the memory map, and other 32KB programs are not
+    // broken by having it enabled.
+    }
+    markup.append("  chip type=Namcot108\n");
+    markup.append("  mirror mode=", mirror == 0 ? "horizontal" : "vertical", "\n");
+    break;
+  }
+
+  markup.append("  prg\n");
+  if(prgrom) markup.append("    rom name=program.rom size=0x", hex(prgrom), "\n");
+  if(prgram) {
+    if(battery) markup.append("    ram name=save.ram size=0x", hex(prgram), "\n");
+    else        markup.append("    ram name=work.ram size=0x", hex(prgram), " volatile\n");
+  }
+
+  markup.append("  chr\n");
+  if(chrrom) markup.append("    rom name=character.rom size=0x", hex(chrrom), "\n");
+  if(chrram) markup.append("    ram name=character.ram size=0x", hex(chrram), " volatile\n");
+
+  if(pc10) {
+    markup.append("  pc10\n");
+    markup.append("    rom name=instructions.rom size=0x2000\n");
+    markup.append("    rom name=key.rom size=0x9\n");
+  }
+}
+
+auto FamicomCartridge::vsSystemHeuristic(const uint8_t* data, unsigned size) -> void {
+  mapper = (data[7] & 0x80) | (data[6] >> 4);
+  mirror = ((data[6] & 0x08) >> 2) | (data[6] & 0x01);
+  prgrom = data[4] * 0x4000;
+  chrrom = data[5] * 0x2000;
+  prgram = 0u;
+  chrram = chrrom == 0u ? 8192u : 0u;
+  battery = data[6] & 0x02;
+  vs      = data[7] & 0x01;
+  nes2    = (data[7] & 0x0c) == 0x08;
+  if(!nes2) {
+    // ignore the last 9 bytes of headers that have "DiskDude!" or other
+    // messages written there
+    if(data[12] == 0 && data[13] == 0 && data[14] == 0 && data[15] == 0) {
+      prgram = data[8] * 0x2000;
+      region = data[9] & 0x01;
+    } else {
+      return;
+    }
+  } else {
+    pc10 = data[7] & 0x02;
+    mapper |= (data[8] & 0x0f) << 8;
+    submapper |= data[8] >> 4;
+    prgrom += (data[9] & 0x0f) * 0x400000;
+    chrrom += (data[9] >> 4) * 0x200000;
+    prgram = ((data[10] & 0x0f) == 0 ? 0 : 64) << (data[10] & 0x0f); // no battery
+    prgram += (data[10] >> 4 == 0 ? 0 : 64) << (data[10] >> 4); // battery
+    chrram = ((data[11] & 0x0f) == 0 ? 0 : 64) << (data[11] & 0x0f); // no battery
+    chrram += (data[11] >> 4 == 0 ? 0 : 64) << (data[11] >> 4); // battery
+    region = data[12] & 0x01;
+    ppu = data[13] & 0x0f;
+  }
+  if(prgram >= 0x800) prgram -= 0x800; // VS. System built-in RAM
+
+  markup.append("side\n");
+  string ppu_revision = "";
+  switch(ppu) {
+  case  0: ppu_revision = "RP2C03B"; break;
+  case  1: ppu_revision = "RP2C03G"; break;
+  case  2: ppu_revision = "RP2C04-0001"; break;
+  case  3: ppu_revision = "RP2C04-0002"; break;
+  case  4: ppu_revision = "RP2C04-0003"; break;
+  case  5: ppu_revision = "RP2C04-0004"; break;
+  case  6: ppu_revision = "RC2C03B"; break;
+  case  7: ppu_revision = "RC2C03C"; break;
+  case  8: ppu_revision = "RC2C05-01"; break;
+  case  9: ppu_revision = "RC2C05-02"; break;
+  case 10: ppu_revision = "RC2C05-03"; break;
+  case 11: ppu_revision = "RC2C05-04"; break;
+  case 12: ppu_revision = "RC2C05-05"; break;
+  }
+  markup.append("  ppu revision=", ppu_revision, "\n");
+  markup.append("  controller port=2 device=gamepad\n");
+  markup.append("  controller port=1 device=gamepad\n");
+
+  switch(mapper) {
+  default: // case  99:
+    break;
+
+  case   1: // SxROM-like
+    markup.append("  chip type=MMC1B2\n");
+    break;
+
+  case   2: // UxROM-like
+    markup.append("  chip type=74HC32\n");
+    break;
+
+  case 206: // NAMCOT-34xx-like
+    markup.append("  chip type=108\n");
     break;
   }
 
   markup.append("  prg\n");
   if(prgrom) markup.append("    rom name=program.rom size=0x", hex(prgrom), "\n");
-  if(prgram) markup.append("    ram name=save.ram size=0x", hex(prgram), "\n");
+  if(prgram) {
+    if(battery) markup.append("    ram name=save.ram size=0x", hex(prgram), "\n");
+    else        markup.append("    ram name=work.ram size=0x", hex(prgram), " volatile\n");
+  }
 
   markup.append("  chr\n");
   if(chrrom) markup.append("    rom name=character.rom size=0x", hex(chrrom), "\n");
-  if(chrram) markup.append("    ram size=0x", hex(chrram), "\n");
+  if(chrram) markup.append("    ram name=character.ram size=0x", hex(chrram), " volatile\n");
 }
diff --git a/icarus/heuristics/game-boy.cpp b/icarus/heuristics/game-boy.cpp
index 002a6bf..77466c5 100644
--- a/icarus/heuristics/game-boy.cpp
+++ b/icarus/heuristics/game-boy.cpp
@@ -31,18 +31,20 @@ GameBoyCartridge::GameBoyCartridge(uint8_t* romdata, unsigned romsize) {
   info.romsize = 0;
   info.ramsize = 0;
 
-  unsigned base = romsize - 0x8000;
-  if(romdata[base + 0x0104] == 0xce && romdata[base + 0x0105] == 0xed
-  && romdata[base + 0x0106] == 0x66 && romdata[base + 0x0107] == 0x66
-  && romdata[base + 0x0108] == 0xcc && romdata[base + 0x0109] == 0x0d
-  && romdata[base + 0x0147] >= 0x0b && romdata[base + 0x0147] <= 0x0d
-  ) {
-    //MMM01 stores header at bottom of image
-    //flip this around for consistency with all other mappers
-    uint8_t header[0x8000];
-    memcpy(header, romdata + base, 0x8000);
-    memmove(romdata + 0x8000, romdata, romsize - 0x8000);
-    memcpy(romdata, header, 0x8000);
+  if(romsize >= 0x10000) {
+    uint base = romsize - 0x8000;
+    if(romdata[base + 0x0104] == 0xce && romdata[base + 0x0105] == 0xed
+    && romdata[base + 0x0106] == 0x66 && romdata[base + 0x0107] == 0x66
+    && romdata[base + 0x0108] == 0xcc && romdata[base + 0x0109] == 0x0d
+    && romdata[base + 0x0147] >= 0x0b && romdata[base + 0x0147] <= 0x0d
+    ) {
+      //MMM01 stores header at bottom of image
+      //flip this around for consistency with all other mappers
+      uint8_t header[0x8000];
+      memcpy(header, romdata + base, 0x8000);
+      memmove(romdata + 0x8000, romdata, romsize - 0x8000);
+      memcpy(romdata, header, 0x8000);
+    }
   }
 
   info.cgb     = (romdata[0x0143] & 0x80) == 0x80;
diff --git a/icarus/icarus.cpp b/icarus/icarus.cpp
index 79fdab6..4160655 100644
--- a/icarus/icarus.cpp
+++ b/icarus/icarus.cpp
@@ -18,6 +18,7 @@ auto locate(string name) -> string {
 #include "settings.cpp"
 Settings settings;
 
+#include "heuristics/atari-2600.cpp"
 #include "heuristics/famicom.cpp"
 #include "heuristics/super-famicom.cpp"
 #include "heuristics/master-system.cpp"
@@ -31,8 +32,10 @@ Settings settings;
 
 #include "core/core.hpp"
 #include "core/core.cpp"
+#include "core/atari-2600.cpp"
 #include "core/famicom.cpp"
 #include "core/super-famicom.cpp"
+#include "core/sg-1000.cpp"
 #include "core/master-system.cpp"
 #include "core/mega-drive.cpp"
 #include "core/game-boy.cpp"
@@ -41,6 +44,8 @@ Settings settings;
 #include "core/game-gear.cpp"
 #include "core/wonderswan.cpp"
 #include "core/wonderswan-color.cpp"
+#include "core/vs-system.cpp"
+#include "core/playchoice-10.cpp"
 #include "core/bs-memory.cpp"
 #include "core/sufami-turbo.cpp"
 Icarus icarus;
@@ -73,8 +78,10 @@ auto nall::main(string_vector args) -> void {
     .setTitle("Load ROM Image")
     .setPath(settings["icarus/Path"].text())
     .setFilters("ROM Files|"
+      "*.a26:"
       "*.fc:*.nes:"
       "*.sfc:*.smc:"
+      "*.sg:"
       "*.ms:*.sms:"
       "*.md:*.smd:*.gen:"
       "*.gb:"
@@ -83,6 +90,8 @@ auto nall::main(string_vector args) -> void {
       "*.gg:"
       "*.ws:"
       "*.wsc:"
+      "*.vs:"
+      "*.pc10:"
       "*.bs:"
       "*.st:"
       "*.zip"
diff --git a/icarus/icarus.plist b/icarus/icarus.plist
index 5caaab8..658bece 100644
--- a/icarus/icarus.plist
+++ b/icarus/icarus.plist
@@ -3,7 +3,7 @@
 <plist version="1.0">
 <dict>
   <key>CFBundleIdentifier</key>
-  <string>org.byuu.icarus</string>
+  <string>org.byuu.board.icarus</string>
   <key>CFBundleDisplayName</key>
   <string>icarus</string>
   <key>CFBundleExecutable</key>
diff --git a/shaders/Curvature.shader/manifest.bml b/shaders/Curvature.shader/manifest.bml
index 7bec470..2f9b930 100644
--- a/shaders/Curvature.shader/manifest.bml
+++ b/shaders/Curvature.shader/manifest.bml
@@ -1,4 +1,6 @@
-program
+input
   filter: linear
   wrap: border
+
+program
   fragment: curvature.fs
diff --git a/shaders/Display Emulation/Famicom.shader/famicom.fs b/shaders/Display Emulation/Famicom.shader/famicom.fs
new file mode 100644
index 0000000..aa9556f
--- /dev/null
+++ b/shaders/Display Emulation/Famicom.shader/famicom.fs	
@@ -0,0 +1,72 @@
+#version 150
+
+#in saturation
+#in hue
+#in contrast
+#in brightness
+#in gamma
+
+#define black 0.518
+#define white 1.962
+#define attenuation 0.746
+const float levels[8] = {
+  0.350, 0.518, 0.962, 1.550,
+  1.094, 1.506, 1.962, 1.962
+};
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+bool wave(int p, int color) {
+  return (color + p + 8) % 12 < 6;
+};
+
+float gammaAdjust(float f) {
+  return f < 0.0 ? 0.0 : pow(f, 2.2 / gamma);
+};
+
+void main() {
+  vec4 elc0 = texture(source[0], texCoord);
+  int emphasis = int(elc0[0] * 7);
+
+  int color = int(elc0[2] * 15), level = color < 0xe ? int(elc0[1] * 3) : 1;
+
+  float lo_and_hi[2] = float[](
+    levels[level + (color == 0x0 ? 4 : 0)],
+    levels[level + (color <  0xd ? 4 : 0)]
+  );
+
+  float y = 0.0, i = 0.0, q = 0.0;
+  for(int p = 0; p < 12; p++) {
+    float spot = lo_and_hi[wave(p, color) ? 1 : 0];
+
+    if(((emphasis & 1) == 1 && wave(p, 12))
+    || ((emphasis & 2) == 2 && wave(p,  4))
+    || ((emphasis & 4) == 4 && wave(p,  8))
+    ) spot *= attenuation;
+
+    float v = (spot - black) / (white - black);
+
+    v = (v - 0.5) * contrast + 0.5;
+    v *= brightness / 12.0;
+
+    y += v;
+    i += v * cos((3.141592653 / 6.0) * (p + hue));
+    q += v * sin((3.141592653 / 6.0) * (p + hue));
+  }
+
+  i *= saturation;
+  q *= saturation;
+
+  fragColor = vec4(
+    gammaAdjust(y +  0.946882 * i +  0.623557 * q),
+    gammaAdjust(y + -0.274788 * i + -0.635691 * q),
+    gammaAdjust(y + -1.108545 * i +  1.709007 * q),
+    0.0
+  );
+}
diff --git a/shaders/Display Emulation/Famicom.shader/manifest.bml b/shaders/Display Emulation/Famicom.shader/manifest.bml
new file mode 100644
index 0000000..5ecd034
--- /dev/null
+++ b/shaders/Display Emulation/Famicom.shader/manifest.bml	
@@ -0,0 +1,15 @@
+settings
+  saturation: 2.0
+  hue:        0.0
+  contrast:   1.0
+  brightness: 1.0
+  // Standard
+  gamma:      2.2
+  // Color emulation
+  //gamma:      1.8
+input
+  // Using linear filtering is not safe because of pre-blurred chroma and luma.
+  filter: nearest
+  wrap: border
+program
+  fragment: famicom.fs
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/DAC.fs b/shaders/Display Emulation/GTUfamicomLite.shader/DAC.fs
new file mode 100644
index 0000000..b39a12a
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/DAC.fs	
@@ -0,0 +1,30 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+uniform sampler2D	source[];
+uniform sampler2D	pixmap[];
+uniform vec4		sourceSize[];
+uniform vec4 		targetSize;
+uniform int 		phase;
+
+in Vertex {
+	vec2 texCoord;
+	float colorPhase;
+};
+out vec4 fragColor;
+
+
+void main() {
+	vec4 c=texture2D(source[0], texCoord.xy);
+	
+	vec2 pixmapCoord;
+	pixmapCoord.x= c.z*(15.0/(16.0*4.0))+c.y*(3.0/4.0)+(0.5/(16.0*4.0));
+	pixmapCoord.y= 1.0-(mod(colorPhase,12.0)/(12.0*8.0)+c.x*(7.0/8.0)+(0.5/(12.0*8.0)));
+	
+	fragColor.r=texture(pixmap[0], pixmapCoord.xy).r;
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/DAC.vs b/shaders/Display Emulation/GTUfamicomLite.shader/DAC.vs
new file mode 100644
index 0000000..c35b062
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/DAC.vs	
@@ -0,0 +1,29 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+
+#in cropOverscan
+// #define cropOverscan
+
+uniform vec4 targetSize;
+uniform int  phase;
+
+in vec4 position;
+in vec2 texCoord;
+
+out Vertex{
+	vec2 texCoord;
+	float colorPhase;
+}vertexOut;
+
+void main(void){	
+	gl_Position=position;
+	vertexOut.texCoord=texCoord;	
+	vec2 pos = (texCoord.xy*targetSize.xy)-0.5;	
+	vertexOut.colorPhase=8.0+pos.x+pos.y*4.0+(phase%2)*4.0;
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.fs b/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.fs
new file mode 100644
index 0000000..a581015
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.fs	
@@ -0,0 +1,31 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+
+uniform sampler2D	source[];
+uniform vec4 		targetSize;
+
+in Vertex {
+	vec2 texCoord;
+	float colorPhase;
+};
+out vec4 fragColor;
+#define pi			3.14159265358
+#define GET_LEVEL(X) ((X)*(255.0f / (128.0f*(1.962f-.518f)))-(.518f / (1.962f-.518f)))
+
+void main() {
+	
+	float level=GET_LEVEL(texture(source[0],texCoord.xy).r);
+	float signal=0.5f*(level+GET_LEVEL(texture(source[0],texCoord.xy-vec2(6.0*targetSize.z,0.0)).r));
+	
+	float chromaSignal=level-signal;
+	float I = chromaSignal * cos (colorPhase * (2.0 * pi / 12.0))*2.0;
+	float Q = chromaSignal * sin (colorPhase * (2.0 * pi / 12.0))*2.0;	
+
+	fragColor.rgb = vec3(signal,I+0.5,Q+0.5);
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.vs b/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.vs
new file mode 100644
index 0000000..73f79e1
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/combFilter.vs	
@@ -0,0 +1,27 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+#in phaseOffset
+
+uniform vec4 targetSize;
+uniform int  phase;
+
+in vec4 position;
+in vec2 texCoord;
+
+out Vertex{
+	vec2 texCoord;
+	float colorPhase;
+}vertexOut;
+
+void main(void){	
+	gl_Position=position;
+	vertexOut.texCoord=texCoord;	
+	vec2 pos = (texCoord.xy*targetSize.xy)-0.5;	
+	vertexOut.colorPhase=8.0+pos.x+pos.y*4.0+ (phase%2)*4.0+4.0+phaseOffset*12.0;
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/manifest.bml b/shaders/Display Emulation/GTUfamicomLite.shader/manifest.bml
new file mode 100644
index 0000000..29eb583
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/manifest.bml	
@@ -0,0 +1,68 @@
+// GTUfamicomLite
+// by aliaspider
+settings
+  cropOverscan:
+    active: false
+  noScanlines:
+    active: false
+  tvVerticalResolution: 275.0
+    min: 20.0
+    max: 1000.0
+    step: 1.0
+  signalResolutionY: 350.0
+    min: 20.0
+    max: 500.0
+    step: 1.0
+  signalResolutionI: 125.0
+    min: 20.0
+    max: 350.0
+    step: 1.0
+  signalResolutionQ: 125.0
+    min: 20.0
+    max: 350.0
+    step: 1.0
+  blackLevel: 0.07
+    min: -0.30
+    max: 0.30
+    step: 0.0001
+  contrast: 1.0
+    min: 0.0
+    max: 2.0
+    step: 0.1
+  gamma: 1.0
+    min: 0.5
+    max: 1.5
+    step: 0.01
+  phaseOffset: 0.0
+    min: -0.5
+    max: 0.5
+    step: 0.01
+input
+  filter: nearest
+program
+  width: 800%
+  height: 100%
+  wrap: edge
+  modulo: 32
+  vertex: DAC.vs
+  fragment: DAC.fs
+  pixmap: NesTable.png
+    filter: nearest
+	wrap: border
+program
+  width: 100%
+  height: 100%
+  wrap: edge
+  vertex: combFilter.vs
+  fragment: combFilter.fs
+program
+  height: 100%
+  wrap: edge
+  vertex: scaleX.vs
+  fragment: scaleX.fs
+program
+  wrap: edge
+  vertex: scaleY.vs
+  fragment: scaleY.fs
+output
+  filter: nearest
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.fs b/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.fs
new file mode 100644
index 0000000..5cc59f1
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.fs	
@@ -0,0 +1,83 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+
+#in signalResolutionY
+#in signalResolutionI
+#in signalResolutionQ
+
+#define YIQ_to_RGB 	mat3x3( 1.0   , 1.0      , 1.0      ,	0.9563   , -0.2721   , -1.1070   ,		0.6210   , -0.6474   , 1.7046   )
+
+
+#define pi			3.14159265358
+float STU0 (float x, float b){	
+	x = x*b*pi;
+	return clamp((x+sin(x))/(2.0*pi)+0.5,0.0,1.0);
+}
+float STU(float x, float b){
+	return STU0(x+0.5,b)-STU0(x-0.5,b);
+}
+
+uniform sampler2D	source[];
+uniform vec4		sourceSize[];
+
+in Vertex {
+	vec2 texCoord;
+};
+out vec4 fragColor;
+#define PROCESS_YIQ(X) \
+c=texture(source[0], vec2(texCoord.x - (X)*sourceSize[0].z,texCoord.y)).xyz;\
+tempColor+=vec3((c.x*STU(X,(signalResolutionY*sourceSize[0].z))),\
+                (c.y*STU(X,(signalResolutionI*sourceSize[0].z))),\
+                (c.z*STU(X,(signalResolutionQ*sourceSize[0].z))));
+#define PROCESS_IQ(X) \
+c.yz=texture(source[0], vec2(texCoord.x - (X)*sourceSize[0].z,texCoord.y)).yz;\
+tempColor.yz+=vec2((c.y*STU((X),(signalResolutionI*sourceSize[0].z))),\
+                   (c.z*STU((X),(signalResolutionQ*sourceSize[0].z))));
+#define PROCESS_Q(X) \
+c.z=texture(source[0], vec2(texCoord.x - (X)*sourceSize[0].z,texCoord.y)).z;\
+tempColor.z+=c.z*STU((X),(signalResolutionQ*sourceSize[0].z));
+
+void main() {
+	float	offset	= fract((texCoord.x * sourceSize[0].x) - 0.5);
+	vec3	tempColor = vec3(0.0);	
+	
+	
+	float range=ceil(0.5+sourceSize[0].x/min(min(signalResolutionY,signalResolutionI),signalResolutionQ));
+	range = min ( range, 255.0);
+	float X,i;
+	vec3 	c;
+
+	float rangeY=ceil(0.5+sourceSize[0].x/signalResolutionY);
+	rangeY = min ( range, 255.0);
+	float rangeI=ceil(0.5+sourceSize[0].x/signalResolutionI);
+	rangeI = min ( range, 255.0);
+	float rangeQ=ceil(0.5+sourceSize[0].x/signalResolutionQ);
+	rangeQ = min ( range, 255.0);
+	
+	for (i=1.0-rangeQ;i<1.0-rangeI;i++){
+		PROCESS_Q(offset-i)
+	}
+	for (i=1.0-rangeI;i<1.0-rangeY;i++){
+		PROCESS_IQ(offset-i)	
+	}
+	for (i=1.0-rangeY;i<1.0+rangeY;i++){
+		PROCESS_YIQ(offset-i)	
+	}	
+	for (i=1.0+rangeY;i<1.0+rangeI;i++){
+		PROCESS_IQ(offset-i)
+	}	
+	for (i=1.0+rangeI;i<1.0+rangeQ;i++){
+		PROCESS_Q(offset-i)
+	}		
+	
+	tempColor.gb-=vec2(0.5,0.5);
+	
+	tempColor=clamp(YIQ_to_RGB*tempColor,0.0,1.0);
+	fragColor.rgb = tempColor;
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.vs b/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.vs
new file mode 100644
index 0000000..a051750
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/scaleX.vs	
@@ -0,0 +1,29 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU-Famicom version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+#in cropOverscan
+
+in vec4 position;
+in vec2 texCoord;
+
+
+out Vertex{
+	vec2 texCoord;
+}vertexOut;
+
+void main(void){
+	
+#ifdef cropOverscan
+	gl_Position=position;
+	gl_Position.x/=(240.0/256.0);
+#else
+	gl_Position=position;
+#endif
+	
+	vertexOut.texCoord=texCoord;	
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.fs b/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.fs
new file mode 100644
index 0000000..1ca580f
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.fs	
@@ -0,0 +1,71 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+
+#in tvVerticalResolution
+#in noScanlines
+#in blackLevel
+#in contrast
+#in gamma
+#in perfTest2
+
+
+uniform sampler2D	source[];
+uniform vec4		sourceSize[];
+uniform vec4		targetSize;
+
+in Vertex {
+	vec2 texCoord;
+	float range;
+};
+out vec4 fragColor;
+
+#define pi			3.14159265358
+float STU0 (float x, float b){	
+	x = x*b*pi;
+	return clamp(((x+sin(x))/(2.0*pi))+0.5,0.0,1.0);
+}
+float STU(float x, float b){
+	return STU0(x+0.5,b)-STU0(x-0.5,b);
+}
+float STUR(float x, float b,float r){
+	return (STU0(x+r,b)-STU0(x-r,b));
+}
+#ifdef noScanlines		
+#define PROCESS(Y) \
+c=texture(source[0], vec2(texCoord.x,texCoord.y - (Y)*sourceSize[0].w)).xyz;\
+tempColor+=c*STU((Y),(tvVerticalResolution*sourceSize[0].w));
+#define FINISH
+#else
+#define PROCESS(Y) \
+c=texture(source[0], vec2(texCoord.x,texCoord.y - (Y)*sourceSize[0].w)).xyz;\
+tempColor+=c*STUR((Y),tvVerticalResolution*sourceSize[0].w,0.5*(sourceSize[0].y*targetSize.w));
+#define FINISH tempColor*=(sourceSize[0].w*targetSize.y);
+#endif
+
+void main() {
+	
+	float	offset	= fract(texCoord.y * sourceSize[0].y - 0.5);
+	vec3	tempColor = vec3(0.0);	
+
+	float range=ceil(0.5+sourceSize[0].y/tvVerticalResolution);
+	range = min ( range, 255.0);
+	float Y;
+	vec3 	c;
+
+	PROCESS(offset-2)
+	PROCESS(offset-1)
+	PROCESS(offset-0)
+	PROCESS(offset+1)
+	FINISH
+	
+	tempColor-=vec3(blackLevel);
+	tempColor*=(contrast/vec3(1.0-blackLevel));
+	tempColor=pow(tempColor,vec3(gamma));
+	fragColor = vec4(tempColor, 1.0);
+}
diff --git a/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.vs b/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.vs
new file mode 100644
index 0000000..a55cdd4
--- /dev/null
+++ b/shaders/Display Emulation/GTUfamicomLite.shader/scaleY.vs	
@@ -0,0 +1,29 @@
+#version 150
+
+////////////////////////////////////////////////////////
+//	GTU version 0.50	
+//	Author: aliaspider - aliaspider@gmail.com
+//	License: GPLv3      
+////////////////////////////////////////////////////////
+
+#in cropOverscan
+
+
+in vec4 position;
+in vec2 texCoord;
+
+out Vertex{
+	vec2 texCoord;
+}vertexOut;
+
+void main(void){
+	
+#ifdef cropOverscan
+	gl_Position=position;
+	gl_Position.y/=(224.0/240.0);
+#else
+	gl_Position=position;
+#endif
+	
+	vertexOut.texCoord=texCoord;		
+}
diff --git a/shaders/Display Emulation/Game Boy Advance.shader/game-boy-advance.fs b/shaders/Display Emulation/Game Boy Advance.shader/game-boy-advance.fs
new file mode 100644
index 0000000..f68d8c0
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy Advance.shader/game-boy-advance.fs	
@@ -0,0 +1,68 @@
+#version 150
+
+#in coloremulation
+
+#ifdef coloremulation
+const uint curve[32] = {
+  0x08, 0x09, 0x0a, 0x0b, 0x0c, 0x0e, 0x10, 0x12,
+  0x14, 0x16, 0x18, 0x1c, 0x20, 0x28, 0x38, 0x38,
+  0x40, 0x48, 0x50, 0x58, 0x60, 0x68, 0x70, 0x80,
+  0x88, 0x90, 0xa0, 0xb0, 0xc0, 0xd0, 0xe0, 0xf0
+};
+#endif
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  vec4 rgba = texture(source[0], texCoord);
+  #ifndef coloremulation
+  fragColor = rgba;
+  #else
+  uint R = curve[uint(rgba[0] * 31)];
+  uint G = curve[uint(rgba[1] * 31)];
+  uint B = curve[uint(rgba[2] * 31)];
+
+  uint Rr = R * 16;
+  uint Gr = R *  4;
+  uint Br = R *  4;
+
+  uint Rg = G *  8;
+  uint Gg = G * 16;
+  uint Bg = G *  8;
+
+  uint Rb = B *  0;  //intentionally always zero
+  uint Gb = B *  8;
+  uint Bb = B * 16;
+
+  // With no pointers, the shader language has no swap method.
+  #define swap(a, b) {a ^= b; b ^= a; a ^= b;}
+  if(Rr < Rg) swap(Rr, Rg);
+  if(Rr < Rb) swap(Rr, Rb);
+  if(Rg < Rb) swap(Rg, Rb);
+
+  if(Gr < Gg) swap(Gr, Gg);
+  if(Gr < Gb) swap(Gr, Gb);
+  if(Gg < Gb) swap(Gg, Gb);
+
+  if(Br < Bg) swap(Br, Bg);
+  if(Br < Bb) swap(Br, Bb);
+  if(Bg < Bb) swap(Bg, Bb);
+
+  R = (((4 * Rr + 2 * Rg + Rb) * 160) >> 14) + 32;
+  G = (((4 * Gr + 2 * Gg + Gb) * 160) >> 14) + 32;
+  B = (((4 * Br + 2 * Bg + Bb) * 160) >> 14) + 32;
+
+  fragColor = vec4(
+    R / 255.0,
+    G / 255.0,
+    B / 255.0,
+    0.0
+  );
+  #endif
+}
diff --git a/shaders/Display Emulation/Game Boy Advance.shader/manifest.bml b/shaders/Display Emulation/Game Boy Advance.shader/manifest.bml
new file mode 100644
index 0000000..3b332f9
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy Advance.shader/manifest.bml	
@@ -0,0 +1,9 @@
+settings
+  //coloremulation
+input
+  // Using linear with color emulation is not recommended.
+  // Colors are rounded down before being converted.
+  filter: nearest
+  wrap: border
+program
+  fragment: game-boy-advance.fs
diff --git a/shaders/Display Emulation/Game Boy Color.shader/game-boy-color.fs b/shaders/Display Emulation/Game Boy Color.shader/game-boy-color.fs
new file mode 100644
index 0000000..918cc18
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy Color.shader/game-boy-color.fs	
@@ -0,0 +1,28 @@
+#version 150
+
+#in coloremulation
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  vec4 rgba = texture(source[0], texCoord);
+  #ifndef coloremulation
+  fragColor = rgba;
+  #else
+  float r = rgba[0];
+  float g = rgba[1];
+  float b = rgba[2];
+  fragColor = vec4(
+    min(r * 806 + g * 124 + b *  62, 960.0) / 1023.0,
+    min(          g * 744 + b * 248, 960.0) / 1023.0,
+    min(r * 186 + g * 124 + b * 682, 960.0) / 1023.0,
+    0.0
+  );
+  #endif
+}
diff --git a/shaders/Display Emulation/Game Boy Color.shader/manifest.bml b/shaders/Display Emulation/Game Boy Color.shader/manifest.bml
new file mode 100644
index 0000000..b6300a4
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy Color.shader/manifest.bml	
@@ -0,0 +1,7 @@
+settings
+  //coloremulation
+input
+  filter: nearest
+  wrap: border
+program
+  fragment: game-boy-color.fs
diff --git a/shaders/Display Emulation/Game Boy.shader/game-boy.fs b/shaders/Display Emulation/Game Boy.shader/game-boy.fs
new file mode 100644
index 0000000..b414b49
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy.shader/game-boy.fs	
@@ -0,0 +1,40 @@
+#version 150
+
+#in palette
+
+const int green[12] = {
+  0xae, 0xd9, 0x27,
+  0x58, 0xa0, 0x28,
+  0x20, 0x62, 0x29,
+  0x1a, 0x45, 0x2a
+};
+
+const int yellow[12] = {
+  0xff, 0xf7, 0x7b,
+  0xb5, 0xae, 0x4a,
+  0x6b, 0x69, 0x31,
+  0x21, 0x20, 0x10
+};
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  #ifndef palette // Standard
+  float brightness = 1.0 - texture(source[0], texCoord)[2];
+  fragColor = brightness;
+  #else           // Color Emulation
+  int color = int(texture(source[0], texCoord)[2] * 3) * 3;
+  fragColor = vec4(
+    palette[color + 0] / 255.0,
+    palette[color + 1] / 255.0,
+    palette[color + 2] / 255.0,
+    0.0
+  );
+  #endif
+}
diff --git a/shaders/Display Emulation/Game Boy.shader/manifest.bml b/shaders/Display Emulation/Game Boy.shader/manifest.bml
new file mode 100644
index 0000000..45114f2
--- /dev/null
+++ b/shaders/Display Emulation/Game Boy.shader/manifest.bml	
@@ -0,0 +1,11 @@
+settings
+  // Color emulation: green, yellow
+  palette: green
+input
+  // Using linear with a color emulation palette is not recommended.
+  // Colors are rounded up before being converted, making a display that
+  // resembles 2xSaI or HQ#x.
+  filter: nearest
+  wrap: border
+program
+  fragment: game-boy.fs
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/manifest.bml b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/manifest.bml
new file mode 100644
index 0000000..c141f63
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/manifest.bml	
@@ -0,0 +1,37 @@
+// Gameboy-Display-Emulation
+// by aliaspider
+// adapted for Game Boy Display Emulation by hex_usr
+settings
+  //forceMonochromeGameBoy
+  blend
+  spacing: 0.045
+  shadowOffsetX: 0.4
+  shadowOffsetY: 0.4
+  contrast: 0.99
+  baselineAlpha: 0.1
+  shadowOpacity: 0.55
+  foregroundColor: (vec3(20.0,22.0,35.0)/255.0)
+  backgroundColor: (vec3(130.0,228.0,99.0)/255.0)
+  responseTime: 0.333
+history
+  frames: 7
+  filter: nearest
+program
+  width: 100%
+  height: 100%
+  filter: linear
+  wrap: border
+  fragment: pass1.fs
+program
+  width: 100%
+  filter: linear
+  wrap: border
+  vertex: pass2.vs
+  fragment: pass2.fs
+program
+  filter: linear
+  wrap: border
+  vertex: pass3.vs
+  fragment: pass3.fs
+output
+  filter: nearest
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass1.fs b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass1.fs
new file mode 100644
index 0000000..cae668d
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass1.fs	
@@ -0,0 +1,55 @@
+// This is a port of the original CG shader to the quark format
+// the original shader can be found here :
+// https://github.com/libretro/common-shaders/tree/master/handheld/gameboy
+
+///////////////////////////////////////////////////////////////////////////
+//                                                                       //
+// Gameboy Classic Shader v0.2.2                                         //
+//                                                                       //
+// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
+//                                                                       //
+// This program is free software: you can redistribute it and/or modify  //
+// it under the terms of the GNU General Public License as published by  //
+// the Free Software Foundation, either version 3 of the License, or     //
+// (at your option) any later version.                                   //
+//                                                                       //
+// This program is distributed in the hope that it will be useful,       //
+// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
+// GNU General Public License for more details.                          //
+//                                                                       //
+// You should have received a copy of the GNU General Public License     //
+// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
+//                                                                       //
+///////////////////////////////////////////////////////////////////////////
+
+#version 150
+
+#in forceMonochromeGameBoy
+#in responseTime
+#in baselineAlpha
+
+
+uniform sampler2D source[];
+uniform sampler2D frame[];
+uniform float baseline_alpha;
+in Vertex {
+  vec2 texCoord;
+};
+out vec4 fragColor;
+#ifdef  forceMonochromeGameBoy
+#define GET_ALPHA(src,coord) (1.0-clamp((1.0-texture(src, coord)[2])*(31.54-25.87+47.225),0.0,1.0))
+#else
+#define GET_ALPHA(src,coord) (1.0-clamp((1.0-texture(src, coord)[2])*(0.2126+0.7152+0.0722),0.0,1.0))
+#endif
+void main(void) {	
+	float  c0=GET_ALPHA(source[0],texCoord);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * responseTime;
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,2.0);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,3.0);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,4.0);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,5.0);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,6.0);
+	c0+=(GET_ALPHA(frame[0],texCoord) - c0) * pow(responseTime,7.0);
+	fragColor=vec4(c0*(1.0-baselineAlpha)+baselineAlpha);
+}
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.fs b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.fs
new file mode 100644
index 0000000..37b1089
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.fs	
@@ -0,0 +1,67 @@
+// This is a port of the original CG shader to the quark format
+// the original shader can be found here :
+// https://github.com/libretro/common-shaders/tree/master/handheld/gameboy
+
+///////////////////////////////////////////////////////////////////////////
+//                                                                       //
+// Gameboy Classic Shader v0.2.2                                         //
+//                                                                       //
+// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
+//                                                                       //
+// This program is free software: you can redistribute it and/or modify  //
+// it under the terms of the GNU General Public License as published by  //
+// the Free Software Foundation, either version 3 of the License, or     //
+// (at your option) any later version.                                   //
+//                                                                       //
+// This program is distributed in the hope that it will be useful,       //
+// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
+// GNU General Public License for more details.                          //
+//                                                                       //
+// You should have received a copy of the GNU General Public License     //
+// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
+//                                                                       //
+///////////////////////////////////////////////////////////////////////////
+
+#version 150
+
+#in blend
+#in spacing
+#in shadowOffsetY
+
+uniform sampler2D source[];
+uniform sampler2D frame[];
+uniform sampler2D pixmap[];
+uniform vec4 sourceSize[];
+uniform vec4 targetSize;
+in Vertex {
+  vec2 texCoord;
+  vec4 newSize;
+};
+
+out vec4 fragColor;
+#define pi			3.14159265358
+#define GAUSS(X) (0.5)*exp(-(X)*(X)*pi*0.25)
+void main(void) {
+	float offset	= fract(texCoord.y * sourceSize[0].y);
+	float  c0=texture(source[0],texCoord.xy-vec2(0.0,(offset-0.5)*sourceSize[0].w)).r;
+
+	float a=1.0-spacing*newSize.y*sourceSize[0].w;
+	a=max(a,0.0);	
+	a=(offset > sourceSize[0].y*newSize.w)?1.0:a;
+#ifdef blend
+	c0=(offset > sourceSize[0].y*newSize.w)?c0:texture(source[0],texCoord.xy).r;
+#endif
+	
+	vec2 shadowCoords=texCoord.xy;
+	shadowCoords.y-=shadowOffsetY*sourceSize[0].w;
+	offset=fract((shadowCoords.y * sourceSize[0].y)-0.5);
+	float blur;
+	blur =texture(source[0],shadowCoords.xy-vec2(0.0,(offset-0.0)*sourceSize[0].w)).g*GAUSS(offset-0.0);
+	blur+=texture(source[0],shadowCoords.xy-vec2(0.0,(offset-1.0)*sourceSize[0].w)).g*GAUSS(offset-1.0);	
+	blur+=texture(source[0],shadowCoords.xy-vec2(0.0,(offset-2.0)*sourceSize[0].w)).g*GAUSS(offset-2.0);
+	blur+=texture(source[0],shadowCoords.xy-vec2(0.0,(offset+1.0)*sourceSize[0].w)).g*GAUSS(offset+1.0);	
+
+	fragColor=vec4(c0,blur,a,a);
+
+}
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.vs b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.vs
new file mode 100644
index 0000000..2fca668
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass2.vs	
@@ -0,0 +1,48 @@
+// This is a port of the original CG shader to the quark format
+// the original shader can be found here :
+// https://github.com/libretro/common-shaders/tree/master/handheld/gameboy
+
+///////////////////////////////////////////////////////////////////////////
+//                                                                       //
+// Gameboy Classic Shader v0.2.2                                         //
+//                                                                       //
+// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
+//                                                                       //
+// This program is free software: you can redistribute it and/or modify  //
+// it under the terms of the GNU General Public License as published by  //
+// the Free Software Foundation, either version 3 of the License, or     //
+// (at your option) any later version.                                   //
+//                                                                       //
+// This program is distributed in the hope that it will be useful,       //
+// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
+// GNU General Public License for more details.                          //
+//                                                                       //
+// You should have received a copy of the GNU General Public License     //
+// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
+//                                                                       //
+///////////////////////////////////////////////////////////////////////////
+
+#version 150 
+in vec4 position;
+in vec2 texCoord;
+ 
+out Vertex {
+   vec2 texCoord;
+   vec4 newSize;
+} vertexOut;
+ 
+uniform vec4 targetSize;
+uniform vec4 sourceSize[];
+
+void main() {
+	gl_Position=position;
+	
+	float video_scale=floor(targetSize.y * sourceSize[0].w); 		
+	vertexOut.newSize.xy=sourceSize[0].xy*video_scale;
+    vertexOut.newSize.zw=sourceSize[0].zw/video_scale;
+	vec2 coord=texCoord*targetSize.xy;
+	coord-=floor((targetSize.xy-vertexOut.newSize.xy)/2.0);	
+	vertexOut.texCoord.x=texCoord.x;
+	vertexOut.texCoord.y=coord.y*vertexOut.newSize.w;
+}
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.fs b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.fs
new file mode 100644
index 0000000..59bdfde
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.fs	
@@ -0,0 +1,82 @@
+// This is a port of the original CG shader to the quark format
+// the original shader can be found here :
+// https://github.com/libretro/common-shaders/tree/master/handheld/gameboy
+
+///////////////////////////////////////////////////////////////////////////
+//                                                                       //
+// Gameboy Classic Shader v0.2.2                                         //
+//                                                                       //
+// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
+//                                                                       //
+// This program is free software: you can redistribute it and/or modify  //
+// it under the terms of the GNU General Public License as published by  //
+// the Free Software Foundation, either version 3 of the License, or     //
+// (at your option) any later version.                                   //
+//                                                                       //
+// This program is distributed in the hope that it will be useful,       //
+// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
+// GNU General Public License for more details.                          //
+//                                                                       //
+// You should have received a copy of the GNU General Public License     //
+// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
+//                                                                       //
+///////////////////////////////////////////////////////////////////////////
+
+#version 150
+
+#in blend
+#in spacing
+#in shadowOffsetX
+#in contrast
+#in shadowOpacity
+#in foregroundColor
+#in backgroundColor
+
+uniform sampler2D source[];
+uniform sampler2D frame[];
+uniform sampler2D pixmap[];
+uniform vec4 sourceSize[2];
+uniform vec4 targetSize;
+
+in Vertex {
+  vec2 texCoord;
+  vec4 newSize;
+};
+
+
+out vec4 fragColor;
+
+#define pi			3.14159265358
+#define GAUSS(X) (0.5)*exp(-(X)*(X)*pi*0.25)
+
+void main(void) {
+	float offset	= fract(texCoord.x * sourceSize[0].x);
+	vec4  c0=texture(source[0],texCoord.xy-vec2((offset-0.5)*sourceSize[0].z,0.0));
+	
+	float a=1.0-spacing*newSize.x*sourceSize[0].z;
+	a=max(a,0.0);	
+	a=(offset > sourceSize[0].x*newSize.z)?c0.a:a;
+
+#ifdef blend
+	c0.r=(offset > sourceSize[0].x*newSize.z)?c0.r:texture(source[0],texCoord.xy).r;
+#endif
+
+	a*=c0.r;
+	
+	vec2 shadowCoords=texCoord.xy;
+	shadowCoords.x-=shadowOffsetX*sourceSize[0].z;
+	offset=fract((shadowCoords.x * sourceSize[0].x)-0.5);
+	float blur;	
+	blur =texture(source[0],shadowCoords.xy-vec2((offset-0.0)*sourceSize[0].z,0.0)).g*GAUSS(offset-0.0);
+	blur+=texture(source[0],shadowCoords.xy-vec2((offset-2.0)*sourceSize[0].z,0.0)).g*GAUSS(offset-2.0);
+	blur+=texture(source[0],shadowCoords.xy-vec2((offset-1.0)*sourceSize[0].z,0.0)).g*GAUSS(offset-1.0);
+	blur+=texture(source[0],shadowCoords.xy-vec2((offset+1.0)*sourceSize[0].z,0.0)).g*GAUSS(offset+1.0);
+
+	
+    vec3 outColor =  backgroundColor * (1.0 - blur * contrast * shadowOpacity);
+    outColor = outColor + a * contrast *( foregroundColor - outColor);
+	fragColor=vec4(outColor,1.0);
+	// fragColor=vec4(1.0-a);
+
+}
diff --git a/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.vs b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.vs
new file mode 100644
index 0000000..45fe09a
--- /dev/null
+++ b/shaders/Display Emulation/Gameboy-Display-Emulation.shader/pass3.vs	
@@ -0,0 +1,48 @@
+// This is a port of the original CG shader to the quark format
+// the original shader can be found here :
+// https://github.com/libretro/common-shaders/tree/master/handheld/gameboy
+
+///////////////////////////////////////////////////////////////////////////
+//                                                                       //
+// Gameboy Classic Shader v0.2.2                                         //
+//                                                                       //
+// Copyright (C) 2013 Harlequin : unknown92835@gmail.com                 //
+//                                                                       //
+// This program is free software: you can redistribute it and/or modify  //
+// it under the terms of the GNU General Public License as published by  //
+// the Free Software Foundation, either version 3 of the License, or     //
+// (at your option) any later version.                                   //
+//                                                                       //
+// This program is distributed in the hope that it will be useful,       //
+// but WITHOUT ANY WARRANTY; without even the implied warranty of        //
+// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         //
+// GNU General Public License for more details.                          //
+//                                                                       //
+// You should have received a copy of the GNU General Public License     //
+// along with this program.  If not, see <http://www.gnu.org/licenses/>. //
+//                                                                       //
+///////////////////////////////////////////////////////////////////////////
+
+#version 150 
+in vec4 position;
+in vec2 texCoord;
+ 
+out Vertex {
+   vec2 texCoord;
+   vec4 newSize;
+} vertexOut;
+ 
+uniform vec4 targetSize;
+uniform vec4 sourceSize[];
+
+void main() {
+	gl_Position=position;
+	
+	float video_scale=floor(targetSize.y * sourceSize[1].w); 		
+	vertexOut.newSize.xy=sourceSize[1].xy*video_scale;
+    vertexOut.newSize.zw=sourceSize[1].zw/video_scale;
+	vec2 coord=texCoord*targetSize.xy;
+	coord-=floor((targetSize.xy-vertexOut.newSize.xy)/2.0);
+	vertexOut.texCoord.x=coord.x*vertexOut.newSize.z;	
+	vertexOut.texCoord.y=texCoord.y;
+}
diff --git a/shaders/Display Emulation/PlayChoice-10.shader/manifest.bml b/shaders/Display Emulation/PlayChoice-10.shader/manifest.bml
new file mode 100644
index 0000000..7cadb62
--- /dev/null
+++ b/shaders/Display Emulation/PlayChoice-10.shader/manifest.bml	
@@ -0,0 +1,6 @@
+input
+  filter: nearest
+  wrap: border
+
+program
+  fragment: playchoice-10.fs
diff --git a/shaders/Display Emulation/PlayChoice-10.shader/playchoice-10.fs b/shaders/Display Emulation/PlayChoice-10.shader/playchoice-10.fs
new file mode 100644
index 0000000..f21a770
--- /dev/null
+++ b/shaders/Display Emulation/PlayChoice-10.shader/playchoice-10.fs	
@@ -0,0 +1,18 @@
+#version 150
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  vec4 rgbs = texture(source[0], texCoord);
+  if(rgbs[3] < 1.0) { // Game display
+    fragColor = rgbs;
+  } else {            // Menu/instructions display
+    fragColor = vec4(rgbs[0], rgbs[1], rgbs[2], 0.0);
+  }
+}
diff --git a/shaders/Display Emulation/Super Famicom.shader/manifest.bml b/shaders/Display Emulation/Super Famicom.shader/manifest.bml
new file mode 100644
index 0000000..eabf9ab
--- /dev/null
+++ b/shaders/Display Emulation/Super Famicom.shader/manifest.bml	
@@ -0,0 +1,7 @@
+settings
+  //coloremulation
+input
+  filter: nearest
+  wrap: border
+program
+  fragment: super-famicom.fs
diff --git a/shaders/Display Emulation/Super Famicom.shader/super-famicom.fs b/shaders/Display Emulation/Super Famicom.shader/super-famicom.fs
new file mode 100644
index 0000000..db1675b
--- /dev/null
+++ b/shaders/Display Emulation/Super Famicom.shader/super-famicom.fs	
@@ -0,0 +1,41 @@
+#version 150
+
+#in coloremulation
+
+#ifdef coloremulation
+const uint gamma_ramp[32] = {
+  0x00, 0x01, 0x03, 0x06, 0x0a, 0x0f, 0x15, 0x1c,
+  0x24, 0x2d, 0x37, 0x42, 0x4e, 0x5b, 0x69, 0x78,
+  0x88, 0x90, 0x98, 0xa0, 0xa8, 0xb0, 0xb8, 0xc0,
+  0xc8, 0xd0, 0xd8, 0xe0, 0xe8, 0xf0, 0xf8, 0xff
+};
+#endif
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  vec4 rgbl = texture(source[0], texCoord);
+  float r = rgbl[0];
+  float g = rgbl[1];
+  float b = rgbl[2];
+  float l = rgbl[3];
+  #ifdef coloremulation
+  r = gamma_ramp[uint(rgbl[0] * 31)] / 255.0;
+  g = gamma_ramp[uint(rgbl[1] * 31)] / 255.0;
+  b = gamma_ramp[uint(rgbl[2] * 31)] / 255.0;
+  #endif
+  float L = (1.0 + l * 15) / 16.0;
+  if(l == 0.0) L *= 0.5;
+  fragColor = vec4(
+    L * r,
+    L * g,
+    L * b,
+    0.0
+  );
+}
diff --git a/shaders/Display Emulation/VS. System.shader/manifest.bml b/shaders/Display Emulation/VS. System.shader/manifest.bml
new file mode 100644
index 0000000..09267d5
--- /dev/null
+++ b/shaders/Display Emulation/VS. System.shader/manifest.bml	
@@ -0,0 +1,6 @@
+input
+  filter: nearest
+  wrap: border
+
+program
+  fragment: vs-system.fs
diff --git a/shaders/Display Emulation/VS. System.shader/vs-system.fs b/shaders/Display Emulation/VS. System.shader/vs-system.fs
new file mode 100644
index 0000000..24283b7
--- /dev/null
+++ b/shaders/Display Emulation/VS. System.shader/vs-system.fs	
@@ -0,0 +1,14 @@
+#version 150
+
+uniform sampler2D source[];
+
+in Vertex {
+  vec2 texCoord;
+};
+
+out vec4 fragColor;
+
+void main() {
+  vec4 rgba = texture(source[0], texCoord);
+  fragColor = rgba;
+}
diff --git a/shaders/Edge Detection.shader/manifest.bml b/shaders/Edge Detection.shader/manifest.bml
index 166db6d..d921065 100644
--- a/shaders/Edge Detection.shader/manifest.bml	
+++ b/shaders/Edge Detection.shader/manifest.bml	
@@ -1,4 +1,6 @@
-program
+input
   filter: linear
   wrap: edge
+
+program
   fragment: edge-detection.fs
diff --git a/shaders/Makefile b/shaders/GNUmakefile
similarity index 64%
rename from shaders/Makefile
rename to shaders/GNUmakefile
index 80d315c..42e2eae 100644
--- a/shaders/Makefile
+++ b/shaders/GNUmakefile
@@ -2,4 +2,6 @@ install:
 	if [ -d /usr/share/higan/Video\ Shaders ]; then sudo rm -r /usr/share/higan/Video\ Shaders; fi
 	sudo mkdir -p /usr/share/higan/Video\ Shaders
 	sudo cp -r *.shader /usr/share/higan/Video\ Shaders
+	sudo mkdir -p /usr/share/higan/Video\ Shaders/Display\ Emulation
+	sudo cp -r /Display\ Emulation/*.shader /usr/share/higan/Video\ Shaders/Display\ Emulation
 	sudo chmod -R 777 /usr/share/higan/Video\ Shaders
diff --git a/shaders/Scanline.shader/manifest.bml b/shaders/Scanline.shader/manifest.bml
index a5db635..b09323a 100644
--- a/shaders/Scanline.shader/manifest.bml
+++ b/shaders/Scanline.shader/manifest.bml
@@ -1,4 +1,6 @@
-program
+input
   filter: linear
   wrap: border
+
+program
   fragment: scanline.fs
